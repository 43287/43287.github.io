<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pRism</title>
  
  
  <link href="https://www.pri87.vip/atom.xml" rel="self"/>
  
  <link href="https://www.pri87.vip/"/>
  <updated>2024-10-11T13:03:55.851Z</updated>
  <id>https://www.pri87.vip/</id>
  
  <author>
    <name>pRism</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SCTF_RE_复现</title>
    <link href="https://www.pri87.vip/posts/359c2434.html"/>
    <id>https://www.pri87.vip/posts/359c2434.html</id>
    <published>2024-10-10T05:17:01.000Z</published>
    <updated>2024-10-11T13:03:55.851Z</updated>
    
    <content type="html"><![CDATA[<p>死磕了那么久，还是没搞出来QAQ，太菜了，还是，不过这个WP给我了些做这种语言类题目的想法。按WP的方法复现了一下，确实可以直接出</p><h2 id="ez-cython">ez_cython</h2><p>对于这类题目，以往我只会hook一下传入参数和返回值。但是这个WP通过构造自己的类使其返回了符号值从而直接打印流程，十分NB，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Symbol</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Symbol):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> + <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> + <span class="subst">&#123;<span class="built_in">hex</span>(other)&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__radd__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__add__(other)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__xor__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Symbol):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> ^ <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> ^ <span class="subst">&#123;<span class="built_in">hex</span>(other)&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rxor__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__xor__(other)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lshift__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &lt;&lt; <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rshift__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &gt;&gt; <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__and__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Symbol):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &amp; <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &amp; <span class="subst">&#123;<span class="built_in">hex</span>(other)&#125;</span>)&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">cout = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums</span>):</span><br><span class="line">        self.nums = [Symbol(<span class="built_in">str</span>(num)) <span class="keyword">for</span> num <span class="keyword">in</span> nums]</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">return</span> self.nums[index]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> SA(self.nums)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.nums)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, index, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;new_<span class="subst">&#123;self.nums[index]&#125;</span> = <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">        self.nums[index] = Symbol(<span class="string">f&#x27;new_<span class="subst">&#123;self.nums[index]&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">global</span> cout </span><br><span class="line">        cout += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, value: <span class="built_in">object</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n<span class="subst">&#123;self.nums&#125;</span> \n= \n<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.nums == value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inp = SA([<span class="string">f&quot;a[<span class="subst">&#123;i&#125;</span>]&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line">output = cy.sub14514(inp)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;round = <span class="subst">&#123;cout//<span class="number">32</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>根据输出可以一眼看出是xxtea</p><p>然后直接写XXTEA脚本就好QAQ</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arr.h&quot;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[] = &#123; <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deXXTEA</span><span class="params">(Arr&amp; input)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line"><span class="type">uint32_t</span> len = input.<span class="built_in">getsize</span>();</span><br><span class="line"><span class="type">uint32_t</span> round = <span class="number">60</span> / len + <span class="number">4</span>;</span><br><span class="line"><span class="type">uint32_t</span> sum = delta * round;</span><br><span class="line"><span class="type">int</span> t = <span class="number">32</span> * <span class="number">5</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; round; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> now = len - <span class="number">1</span>; now &gt; <span class="number">-1</span>; now--)</span><br><span class="line">&#123;</span><br><span class="line">input[now] -= (((input[now - <span class="number">1</span>] &gt;&gt; <span class="number">3</span> ^ input[now + <span class="number">1</span>] &lt;&lt; <span class="number">3</span>) +</span><br><span class="line">(input[now + <span class="number">1</span>] &gt;&gt; <span class="number">4</span> ^ input[now - <span class="number">1</span>] &lt;&lt; <span class="number">2</span>)) ^ ((sum ^ input[now + <span class="number">1</span>]) +</span><br><span class="line">(key[t] ^ input[now - <span class="number">1</span>])));</span><br><span class="line">t--;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; ((now &amp; 2) ^ ((sum &gt;&gt; 3) &amp; 3)) &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>] = &#123; <span class="number">0x53</span>,<span class="number">0x79</span>,<span class="number">0x43</span>,<span class="number">0x31</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> data[] = &#123; <span class="number">0xf4e984ac</span>, <span class="number">0xcaf0191d</span>, <span class="number">0x576ffc19</span>, <span class="number">0x2ef90939</span>, <span class="number">0x585c0e45</span>, <span class="number">0x2eaa8337</span>, <span class="number">0x617f6b89</span>, <span class="number">0xf55432a7</span>, <span class="number">0xa81cb817</span>, <span class="number">0xbf1ee8c3</span>, <span class="number">0x656309c6</span>, <span class="number">0x92ace1cc</span>, <span class="number">0x8efeb57e</span>, <span class="number">0x39c000bb</span>, <span class="number">0x4d650916</span>, <span class="number">0x6a78dba7</span>, <span class="number">0xeba5c0a3</span>, <span class="number">0x92fdb0f3</span>, <span class="number">0xf4b5dea2</span>, <span class="number">0x2e7098d9</span>, <span class="number">0x112df304</span>, <span class="number">0xc60e9667</span>, <span class="number">0xf5b523ec</span>, <span class="number">0x7c8eb381</span>, <span class="number">0x2720ac77</span>, <span class="number">0xb8939ede</span>, <span class="number">0x8428a41a</span>, <span class="number">0x288ac504</span>, <span class="number">0xca50bcfd</span>, <span class="number">0x2992ba6f</span>, <span class="number">0x4222d1a6</span>, <span class="number">0x876c84df</span></span><br><span class="line">&#125;;</span><br><span class="line">Arr* test = <span class="keyword">new</span> <span class="built_in">Arr</span>(data, <span class="number">32</span>);</span><br><span class="line"><span class="comment">//XXTEA(*test, (uint32_t*)key);</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; *test;</span></span><br><span class="line"><span class="comment">//deXXTEA(*test, (uint32_t*)key);</span></span><br><span class="line"><span class="built_in">deXXTEA</span>(*test);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">33</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">str[i] = (test-&gt;<span class="built_in">getarr</span>())[i];</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; str;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arr.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Arr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">size_t</span> size;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>* arr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Arr</span>(<span class="type">size_t</span> s);</span><br><span class="line"><span class="built_in">Arr</span>(<span class="type">uint32_t</span>* p, <span class="type">unsigned</span> s);</span><br><span class="line"><span class="built_in">Arr</span>(std::initializer_list&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; init);</span><br><span class="line">~<span class="built_in">Arr</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">getsize</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">getarr</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Arr&amp; obj);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">unsigned</span> i);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">begin</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">end</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arr.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(<span class="type">size_t</span> s) : <span class="built_in">size</span>(s), <span class="built_in">arr</span>(<span class="keyword">new</span> <span class="type">uint32_t</span>[s]) &#123;</span><br><span class="line">std::<span class="built_in">fill_n</span>(arr, s, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(<span class="type">uint32_t</span>* p, <span class="type">unsigned</span> s) : <span class="built_in">Arr</span>(s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(std::initializer_list&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; init) :<span class="built_in">size</span>(init.<span class="built_in">size</span>()), <span class="built_in">arr</span>(<span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">int</span>[init.<span class="built_in">size</span>()])</span><br><span class="line">&#123;</span><br><span class="line">std::<span class="built_in">copy</span>(init.<span class="built_in">begin</span>(), init.<span class="built_in">end</span>(), arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arr::~<span class="built_in">Arr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Arr::getsize</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::getarr</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>&amp; Arr::<span class="keyword">operator</span>[](<span class="type">unsigned</span> i)</span><br><span class="line">&#123;</span><br><span class="line">i = (i + size) % size;</span><br><span class="line">i = i &gt;= <span class="number">0</span> ? i : (i + size);</span><br><span class="line"><span class="keyword">return</span> arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::begin</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::end</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr + size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Arr&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;len: &quot;</span> &lt;&lt; obj.<span class="built_in">getsize</span>() &lt;&lt; std::endl;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;element list:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> i : obj) &#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; std::<span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>我一开始是想使用frida和python setattr一起搞的，最后失败了QAQ。<br>我现在在想，会不会对于那些语言形成的混淆，其实可以用语言本身的特性去解决，至少对于解释型语言似乎重点都在混淆里面，那么对于Java的so文件，似乎也可以这样？如果加密是传入一个byte[]类型，那我继承byte生成自己的类传进去，似乎就没有问题了。</p><p>再往编译型语言看看，像rust，go似乎都是直接看汇编比看ida反编译的更好。但是如果他们写成dll似乎也可以被我们主动触发。而剩下的exe类型，还是直接让之后专门的反编译器来解决吧。</p><p>我觉得像这种语言层面的混淆，会随着语言变多/发展而愈来愈多，所以我觉得深入研究某个语言的内容是不划算的（除非专门研究某个语言的逆向，但是这样也可能遇到很多不开源的框架，对于框架来说，我们也很难分析）。那么对于这些内容，我们为了理清逻辑，更应该使用通解：HOOK？来获取具体流程。</p><hr><p>关于我一开始的方法：frida_hook py38.dll的运算函数</p><p>hook到的永远是一个地址，且如果先传给python再解引用会导致一些bug，frida直接解引用也会导致bug。</p><p>所以还是要看一下具体的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span><span class="comment">//定长类型</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">&#125; PyObject;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//变长类型</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">&#125; PyVarObject;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//float为定长类型</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    <span class="type">double</span> ob_fval;</span><br><span class="line">&#125; PyFloatObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PyLongValue</span> &#123;</span><span class="comment">//int为变长类型</span></span><br><span class="line">    <span class="type">uintptr_t</span> lv_tag; <span class="comment">/* Number of digits, sign and flags */</span></span><br><span class="line">    digit ob_digit[<span class="number">1</span>];</span><br><span class="line">&#125; _PyLongValue;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">longobject</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    _PyLongValue long_value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://www.thinkinpython.com/post/deep_py_vm_3.html">3. Object 的基本结构 - Think In Python</a></p><p><a href="https://github.com/python/cpython/blob/main/Include/cpython/longintrepr.h#L98">cpython/Include/cpython/longintrepr.h at main · python/cpython (github.com)</a></p><p>根据如上去查找PyObject_HEAD，发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PyObject_HEAD                   PyObject ob_base;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span></span><br><span class="line">    _PyObject_HEAD_EXTRA</span><br><span class="line">    Py_ssize_t ob_refcnt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> *<span class="title">ob_type</span>;</span></span><br><span class="line">&#125; PyObject;</span><br></pre></td></tr></table></figure><p>其中_PyObject_HEAD_EXTRA被定义为NULL，Py_ssize_t为int64，struct _typeobject *是指针也为64<br>所以这里有16字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PyLongValue</span> &#123;</span></span><br><span class="line">    <span class="type">uintptr_t</span> lv_tag; <span class="comment">/* Number of digits, sign and flags */</span></span><br><span class="line">    digit ob_digit[<span class="number">1</span>];</span><br><span class="line">&#125; _PyLongValue;</span><br></pre></td></tr></table></figure><p>lv_tag保存了</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">低2位：符号信息：0：正数，1：0，2：<span class="string">-1</span></span><br><span class="line">第三低位：保留</span><br><span class="line">之前的：保存长整数中数字的个数，ndigits = lv_tag &gt;&gt; 3（64位中为(1&lt;&lt;61)<span class="string">-1</span>）</span><br></pre></td></tr></table></figure><p>ob_digit为数组，存放无符号整型，会放30位内容进去，作为值</p><p><a href="https://www.cnblogs.com/ChangAn223/p/11495690.html">Python 3 的 int 类型详解（为什么 int 不存在溢出问题？） - 长安223 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.thinkinpython.com/post/deep_python_4.html">4. Long Object 初探 - Think In Python</a></p><p>那么我们可以直接使用以下转换函数来转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNumber</span>(<span class="params">Nptr</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> ps = <span class="title class_">Process</span>.<span class="property">pointerSize</span></span><br><span class="line">    <span class="keyword">let</span> shift = ps == <span class="number">8</span>? <span class="number">30</span>:<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="title class_">Nptr</span>.<span class="title function_">add</span>(<span class="number">0x10</span>).<span class="title function_">readPointer</span>().<span class="title function_">toInt32</span>();</span><br><span class="line">    <span class="keyword">let</span> number = <span class="title function_">ptr</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> this_block = <span class="title function_">ptr</span>(<span class="title class_">Nptr</span>.<span class="title function_">add</span>(<span class="number">0x18</span>+i*(ps/<span class="number">2</span>)).<span class="title function_">readU32</span>())</span><br><span class="line">        number = number.<span class="title function_">or</span>(this_block.<span class="title function_">shl</span>(shift*i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据测试，这个可以hook出正确的值，但是乘法不对，似乎和底层实现有关，QAQ有没有佬教教我</p><p>hook出的每轮的值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_And</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x9e3779ce&#x27;</span>, <span class="string">&#x27;0xffffffff&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_And</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x9e3779ce</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x13c6ef39&#x27;</span>, <span class="string">&#x27;0x10&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x13c6ef29</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x0&#x27;</span>, <span class="string">&#x27;0x278dde738&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x278dde738</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x13c6ef29&#x27;</span>, <span class="string">&#x27;0x278dde738&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x28ca4d661</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x2&#x27;</span>, <span class="string">&#x27;0x9e3779b9&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x9e3779bb</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x0&#x27;</span>, <span class="string">&#x27;0x3&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x3</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x31&#x27;</span>, <span class="string">&#x27;0x9e3779ce&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x9e3779ff</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x9e3779bb&#x27;</span>, <span class="string">&#x27;0x9e3779ff&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x13c6ef3ba</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x28ca4d661&#x27;</span>, <span class="string">&#x27;0x13c6ef3ba&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x3b0ca25db</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x5&#x27;</span>, <span class="string">&#x27;0x3b0ca25db&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x3b0ca25e0</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_And</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x3b0ca25e0&#x27;</span>, <span class="string">&#x27;0xffffffff&#x27;</span>]</span></span><br></pre></td></tr></table></figure><p>感觉还是很对的。</p>]]></content>
    
    
    <summary type="html">悲伤的CYthon</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
    <category term="python" scheme="https://www.pri87.vip/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Cython学习</title>
    <link href="https://www.pri87.vip/posts/98181542.html"/>
    <id>https://www.pri87.vip/posts/98181542.html</id>
    <published>2024-10-01T15:29:23.000Z</published>
    <updated>2024-10-11T13:04:07.261Z</updated>
    
    <content type="html"><![CDATA[<p>怎么最近这么多Cython的题，做起来好痛苦。而且这种题还是那种很好出，但是不好逆的。当然，也就是暂时了。但凡有佬研究清楚结构，都可以搞个反编译器出来直接秒。不过好像就连rust，go这种都没有专门的反编译器，可能就还早了。。。</p><p>这次SCTF，某出题人叫我试试他出的题，然后就被恶心到了。</p><p>我本身是不喜欢去研究那些什么结构之类的东西，因为不一样的格式太多了，每个都研究显然是不高效的，我想找到一个可能的通解去研究某些问题</p><p>因为这不是python系列的第一篇了，所以这里只说一下我想的新方法。</p><h2 id="Cython">Cython</h2><p><a href="https://blog.csdn.net/MOU_IT/article/details/81876879">cython是什么-CSDN博客</a></p><p>Cython是一个语言：完全包含python语言和部分包含C语言和魔改C语言的集合。它由python实现用于写python模块。文件后缀是pyx，它的作用在于提高python的速度，编译过程：pyx-&gt;c-&gt;pyd/so（分别为Windows，linux）</p><p>可以尝试自写一个pyx文件生成pyd后用ida打开pyd文件，发现内容和原来的内容已经截然不同，可以说根本没有辨识度，极难分析。但是可以发现pyd都调用了python.dll的函数，其中所有运算符都在其中有对应的函数。我在想是不是可以通过这个方法来得到pyd的执行流程。</p><h2 id="Hook，启动！">Hook，启动！</h2><p>frida：挂钩时间在python层hook后第一次执行hook函数。好像不能全部hook，所以只hook基本运算函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> functionsToHook = [</span><br><span class="line">    <span class="string">&quot;PyNumber_Add&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Subtract&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Multiply&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_TrueDivide&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Or&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Xor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_And&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Lshift&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Rshift&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyObject_GetItem&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">functionsToHook.<span class="title function_">forEach</span>(<span class="function"><span class="params">functionName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&quot;python38.dll&quot;</span>, functionName), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> argsArray = [];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                argsArray.<span class="title function_">push</span>(args[<span class="number">0</span>]); </span><br><span class="line">                argsArray.<span class="title function_">push</span>(args[<span class="number">1</span>]); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Error reading arguments: <span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(argsArray);</span><br><span class="line">            <span class="title function_">send</span>(&#123; <span class="attr">function</span>: functionName, <span class="attr">arguments</span>: argsArray &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="title function_">send</span>(&#123; <span class="attr">function</span>: functionName, <span class="attr">returnValue</span>: retval &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后测试，结果失败了。QAQ因为这些函数的传参和传出都是python的值对象。所以要找个方法去解析那些对象。以及最后的比较不知道是什么函数，要知道最后的密文需要hook这个函数。</p><p>尝试先使用ida动调python，看看里面的值对象的空间是怎么样的。</p>]]></content>
    
    
    <summary type="html">python,NO!!!</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="python" scheme="https://www.pri87.vip/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C语言总结</title>
    <link href="https://www.pri87.vip/posts/76cbc618.html"/>
    <id>https://www.pri87.vip/posts/76cbc618.html</id>
    <published>2024-10-01T11:05:33.000Z</published>
    <updated>2024-10-01T11:07:19.905Z</updated>
    
    <content type="html"><![CDATA[<h1>C语言入门</h1><p>本章快速过一遍C语言的知识，同时提供一种从逆向角度看待不同语言的视角。</p><h2 id="0x01-为了实现">0x01 为了实现</h2><p>任何一个语言，均是为了实现一个目的而使用的。任何一个语言，均是为了解决一个痛点而出现的。C正是解决了汇编的繁琐而出现的，它把寄存器和内存的各种操作封装到每个过程的变量之中来简化指令的编写。</p><p>C语言基于面向过程。CPU从程序入口点抽出一条指令，然后执行，再抽出下一个指令，然后再执行，直到程序结束。这就叫过程，一般来说，面向过程的过程也可以叫做函数。一个函数的结束可以说是一个过程的结束。在C语言中也是如此。</p><h2 id="0x02-过程">0x02 过程</h2><h3 id="00-过程的定义">00 过程的定义</h3><p>C语言中，过程的定义就是一个有0或多个输入，0或多个输出的函数。通常来讲，只要是{}大括号包裹的空间，都被视为一个单独的过程，包括后面的循环体，选择体等等。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程是0输入，1输出的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">say</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程是一个2输入，0输出的函数。</p><p>对于一个函数，其主要作用就是返回一个数值，我们叫它返回值，也就是<code>return 0;</code>这个语句，但是还可能有其它效果，比如打印一个字符串到屏幕，这种除了返回一个值的其它效果被叫做<code>副作用</code>。printf的副作用就是输出内容到屏幕，它的返回值就是输出内容成功的个数。C语言中函数的本质就是它的返回值</p><h3 id="01-创建一个过程">01 创建一个过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">return_type <span class="title function_">identifier</span><span class="params">(type parameter,...)</span>&#123;</span><br><span class="line">    <span class="comment">//function body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个过程（在C语言中的函数）需要返回类型，过程名，传入参数和函数体。</p><p>上面的例子标识了函数如何定义。</p><ul><li><code>return_type</code> 表示返回值的类型(具体见0x03)</li><li><code>identifier</code> 是你为这个函数标识的名字（标识符）</li><li><code>type parameter</code> 即括号中的内容是传入的参数类型和传入值的标识符，如果没有，可以填void，标识为空(具体见0x03)</li><li><code>function body</code> 函数体，你会在这里写这个过程需要干什么，就像上面的main函数一样</li></ul><p>值得一提的是：每个C语言程序都需要一个main函数作为用户自定义过程的入口点。也就是说，当用户打开一个C程序，CPU从start函数（自动生成的）开始初始化所有需要的环境，成功后，自动调用main函数从而执行用户自定义的过程，main函数结束后，再自动回收/清理环境内容然后结束程序。</p><h3 id="02-调用一个过程">02 调用一个过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> c = add(a,b);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用是指：进入一个过程并完成它，在C语言中还有计算出它的返回值的含义</p><p>这个例子中，scanf和printf和add就是被调用的过程。以add举例，CPU执行到这里，会先进入add过程，然后一条一条执行其中的代码，返回出设定的值。函数调用的格式即是identifier(parameters)，再次说明：它的含义就是计算出这个过程的返回值，一个函数调用的本质就是得到它的值。对于printf这类含有副作用的函数，它们会在计算返回值的过程中“顺带”表现副作用。</p><h2 id="0x03-参数，计算，表达式和语句">0x03 参数，计算，表达式和语句</h2><p>刚刚说明了函数的本质就是返回值，那么对于C语言来说，添加/删除/修改”值“就是C程序的本职工作。这一章就介绍一下，C语言如何操作值</p><h3 id="00-标识符">00 标识符</h3><p>在计算机的底层实现中，任何一个内存地址都对应一个值，C语言通过使用标识符的方法来简化对内存空间的操作。现在可以假设内存地址是一个街道的所有门牌号，地址对应的值是门牌号内的东西。</p><p>在汇编中实现两数相加的运算过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;省略</span><br><span class="line">mov [rsp+4],4;在栈对应的内存地址放置一个值</span><br><span class="line">mov rax,3;另外一个操作数放到加法寄存器中</span><br><span class="line">add rax,[rsp+4];执行加法操作</span><br><span class="line">mov rax,rax;把返回值放到rax寄存器中，用于返回，这个步骤可能被优化</span><br><span class="line">;省略</span><br></pre></td></tr></table></figure><p>在C语言中实现两数相加的运算过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，C语言省略了对栈空间/内存地址以及寄存器的描述，将我们的精力放到了实现效果上。其中的a和b被叫做标识符，它们代表了内存空间的某个地址（这时又可以被叫做变量）。标识符即是内存空间一个区域的代号，是供我们操作其中值的中介</p><h3 id="01-声明一个标识符">01 声明一个标识符</h3><h4 id="1单独声明">1单独声明</h4><p>基本格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;qualifier&gt; type identifier;</span><br><span class="line"><span class="comment">//特殊写法</span></span><br><span class="line"><span class="type">int</span> a,b,c;<span class="comment">//连续声明</span></span><br></pre></td></tr></table></figure><p><code>type</code>：说明这个标识符对应空间的大小和默认的类型，其中默认类型影响运算效果，虽然可以强制类型转化，但是还是尽量在定义时就写好</p><table><thead><tr><th>type</th><th>大小</th><th>默认类型</th></tr></thead><tbody><tr><td>char</td><td>1字节</td><td>有符号字符型</td></tr><tr><td>short</td><td>2字节</td><td>有符号短整型</td></tr><tr><td>int</td><td>4字节</td><td>有符号整型</td></tr><tr><td>long</td><td>4字节</td><td>有符号长整型</td></tr><tr><td>long long</td><td>8字节</td><td>有符号长长整形</td></tr><tr><td>bool</td><td>1字节</td><td>只存放0和1，C23</td></tr></tbody></table><p><code>identifier</code>：一个你定义的名字，用来标识这块区域，之后对这块区域的操作转换为对这个标识符的操作。内容必须为：大小写字母和数字和下划线的组合。不能以数字开头，不能和已有内容重名（同一作用域下之前的标识符，关键字（比如char return））</p><p><code>&lt;qualifier&gt;</code>：可选的限定符，可以写多个内容。</p><table><thead><tr><th>qualifier</th><th>效果</th></tr></thead><tbody><tr><td>signed</td><td>表明这个区域的值默认为有符号，省略默认为signed</td></tr><tr><td>unsigned</td><td>表明这个区域的值默认为无符号，使用unsigned时省略type表明是无符号整型</td></tr><tr><td>const</td><td>表明这个区域的值除了初始赋值外不可更改，声明时必须直接赋值</td></tr><tr><td>volatile</td><td>不建议编译器优化这个区域的操作</td></tr><tr><td>extren</td><td>表明这个变量来自其它源代码文件</td></tr><tr><td>static</td><td>表明这个变量不能被extren，只能在本文件使用</td></tr><tr><td>auto</td><td>表明这个变量是局部变量，块作用域，省略默认为auto</td></tr><tr><td>register</td><td>建议编译器把这个值放到寄存器</td></tr></tbody></table><h4 id="2声明时赋值">2声明时赋值</h4><p>一个区域只声明，其中的内容是不会因为你给了这个区域一个名字而改变的。所以我们一般在声明时直接赋值。</p><p>基本格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;qualifier&gt; type identifier=number;</span><br><span class="line"><span class="comment">//特殊写法，连续赋值</span></span><br><span class="line"><span class="keyword">auto</span> a=<span class="number">1</span>,b=<span class="number">4</span>,c=<span class="number">0</span>;<span class="comment">//auto只能赋值一种类型</span></span><br></pre></td></tr></table></figure><p>这里的=为赋值号，作用是把整个等式右边的值计算出来给左边。形如a=b这样的式子被叫做表达式，和函数类似，这也是一个过程，对于赋值来说，副作用是把右边的值给左边，返回值是结束后左边的空间中的值。</p><p>所以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=b=c=d=e=f=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>的效果就是先让f等于5，再让e等于（f=5）这个表达式的值即5，以此类推，直到a=5.</p><p>大家也发现，对于赋值符号，左边一定是一个空间，右边则不一定，空间不一定在左侧，但是数一定在右侧。为了简便描述，我们把可以在赋值号左边的值（标识空间的）称为<code>左值</code>，而不可以在左边的值（只能视为数的）被称为<code>右值</code></p><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=b=c=d=e=f=<span class="number">5</span>;<span class="comment">//a,b,c,d,e,f为左值，5，f=5，e=f=5，d=e=f=5，c=d=e=f=5，b=c=d=e=f=5，a=b=c=d=e=f=5为右值</span></span><br><span class="line">c = add(a,b)-d;<span class="comment">//a,b,c,d为左值，add(a,b)，add(a,b)-d，c = add(a,b)-d为右值</span></span><br></pre></td></tr></table></figure><p>对于声明时赋值，number可以是左值也可以是右值。而前面的限定符和类型描述符均和赋值相同。</p><p>特别的，声明时赋值可以使用这样的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> a=<span class="number">1</span>;<span class="comment">//默认int</span></span><br><span class="line"><span class="keyword">auto</span> b=<span class="number">0.1f</span>;<span class="comment">//默认float</span></span><br><span class="line"><span class="keyword">auto</span> c=<span class="number">8.9</span>;<span class="comment">//默认double</span></span><br></pre></td></tr></table></figure><p>C23引入了这种写法,auto自动判断类型，甚至可以把函数返回值设为auto启用自动推断。</p><h4 id="3-声明数组">3 声明数组</h4><p>假设我的程序需要100个变量，难道我要写100个auto a,b,c,d,…吗？当然不是，通过数组，我们可以向系统申请一块连续的内存用来存放我们的多个变量。</p><p>声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;qualifier&gt; type identifier[size];</span><br><span class="line"><span class="type">int</span> arr[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><p>这里的type identifier[size]就是连续申请size个type大小的空间的意思。这个空间的名字就是identifier。如果写成结构体，类似这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arr</span>&#123;</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">...<span class="comment">//一共100个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以这样赋值和初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//初始化为0</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;&#125;; <span class="comment">//初始化为0，从C23开始</span></span><br></pre></td></tr></table></figure><p>其中的0,1用于指定从arr开始我们申请的第几个type长度的小空间，[]中的数我们称为下标，我们通过下标去访问数组的值。</p><p>那么，我们的数组下表支持变量吗，回答是肯定的。我们可以这样使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">arr[a] = <span class="number">1</span>; <span class="comment">//讲arr[0]的值改为1,因为a是0</span></span><br></pre></td></tr></table></figure><p>其实，可以把内存当作一个超长的数组，每个地址都是一个下标，访问地址0x10000时，可以理解为取memory[0x10000]中存放的值。C语言虽然没有直接定义一个memory数组来让我们直接操作，但是提供了一个额外的类型和操作符*&amp;（解引用运算符和取址运算符）来让我们自由地使用内存，那就是<code>指针</code>，指针就相当于memory数组的下标</p><h4 id="4-声明指针">4 声明指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type *identifier;</span><br><span class="line"><span class="type">int</span> *ptr;<span class="comment">//声明一个指向int型数据的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//操作memory[0x10000]</span></span><br><span class="line">ptr = (<span class="type">int</span>*)<span class="number">0x10000</span>;<span class="comment">//这里原来的数据是int型，和指针类型不同，所以要先进行转换</span></span><br><span class="line">*ptr = <span class="number">100</span>;<span class="comment">//等价于memory[0x10000]=100;</span></span><br><span class="line"><span class="type">int</span> a = *ptr;<span class="comment">//等价于a = memory[0x10000];</span></span><br></pre></td></tr></table></figure><p>通过以上的方法可以实现自由操作内存地址的值。</p><p>你可能会好奇，按上面所说ptr直接表示了一个内存地址，为什么还需要添加type标识来表示它指向空间的类型呢。其实这也很好理解。内存是连续的字节数组，但是使用时并不一定按字节使用，如果这里的空间是你给<code>int a</code>生成的空间，那这个空间肯定是int型的，你如果按char来使用，那就会错误。</p><p>好了，我们了解了指针如何赋值了，但是有个问题，如果我想要指向一个已经生成的标识符的地址，又该怎么赋值呢，这里就用到了另一个运算符&amp;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ptr;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">ptr = a;<span class="comment">//错误，不能把一个数赋给指针（或者说内存数组的下标）</span></span><br><span class="line">*ptr = a;<span class="comment">//正确，可以把数赋给指针指向的地址(等价memory[ptr]=a)</span></span><br><span class="line">ptr = &amp;a;<span class="comment">//正确，对标识符使用&amp;取址运算符取得目标标识符在内存中的地址，然后赋给指针，这样ptr指向的地址就是a的地址。对*ptr进行的操作就是对a进行的操作</span></span><br></pre></td></tr></table></figure><p>不难看出，*和&amp;是两个互逆的运算符，*把一个地址转为地址中的值，&amp;把一个值转为对应的地址，当然，&amp;运算符使用的前提是这里要有这个空间，标识符表明一个空间，因此可以使用&amp;标识符来获取这个空间的地址，单纯的一个数没有空间所以不能&amp;1。</p><p>可以来看看指针和普通标识符的区别及联系：</p><table><thead><tr><th></th><th>普通标识符</th><th>指针标识符</th></tr></thead><tbody><tr><td>默认表示</td><td>数据</td><td>目标地址</td></tr><tr><td>使用*</td><td>无效</td><td>数据</td></tr><tr><td>使用&amp;</td><td>自身地址</td><td>自身地址</td></tr></tbody></table><p>可以理解为：普通标识符是默认为值的，用&amp;获取地址，而指针标识符是默认为地址的，用*获取值。</p><p>现在假设</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *ptr1 = &amp;a;</span><br><span class="line"><span class="type">int</span> **ptr2 = ptr1;</span><br></pre></td></tr></table></figure><p>根据上面的表格可以得出</p><table><thead><tr><th></th><th>a</th><th>ptr1</th><th>ptr2</th></tr></thead><tbody><tr><td>默认表示</td><td>0</td><td>a的地址</td><td>ptr1的地址</td></tr><tr><td>使用*</td><td>无效数据</td><td>0</td><td>ptr1的值(即a的地址)</td></tr><tr><td>使用**</td><td>无效数据</td><td>无效数据</td><td>0</td></tr><tr><td>使用&amp;</td><td>a的地址</td><td>ptr1的地址</td><td>ptr2的地址</td></tr></tbody></table><p>很好理解吧。</p><h3 id="02-计算">02 计算</h3><p>基础运算符，这里就只说明一下，具体去网络上搜索</p><h4 id="1算数运算符">1算数运算符</h4><p>+,-,*,/,%，结合性均为从左至右</p><p>返回值类型为操作数的类型（不一样按空间大的计算），返回值为数学计算出的值</p><p>/和%右操作数不能为0，如果/的操作数有一个是浮点型，结果就是浮点型，否则为整除运算.</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>/<span class="number">3</span></span><br><span class="line"><span class="comment">//结果为1</span></span><br><span class="line"><span class="number">5.0</span>/<span class="number">3</span></span><br><span class="line"><span class="comment">//结果为1.666666</span></span><br></pre></td></tr></table></figure><p>%的左操作数决定返回值类型</p><p>C语言的取整为趋零截断，出现的所有小数变为整数时向0取整</p><h4 id="2自增运算符">2自增运算符</h4><p>i++,++i,i–,–i，和最近的一个结合</p><p>i++表明先运算完这个语句，然后执行i=i+1</p><p>++i表明先执行i=i+1，然后运算这个语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i++);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,--i);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,++i);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="3赋值运算符">3赋值运算符</h4><p>结合性从右到左</p><p>复合赋值</p><p>+=，-=，*=，/=，%=</p><p>a+=1表示a=a+1同理其它的</p><h4 id="4关系运算符">4关系运算符</h4><p>返回值均为真假（0或1），结合从左到右</p><p>&lt;,&gt;,==,!=,&gt;=,&lt;=</p><p>分别为是否小于，是否大于，是否等于，是否不等于，是否大于等于，是否小于等于</p><p>注意==和=的区别</p><h4 id="5逻辑运算符">5逻辑运算符</h4><p>a &amp;&amp; b 是否同时成立</p><p>a || b 是否至少一个成立</p><p>!a 是否不成立</p><h4 id="6三元运算符">6三元运算符</h4><p>a?b:c</p><p>表示a如果不为0，则返回（执行）为b，否则返回（执行）c，这里写执行是提醒副作用</p><h4 id="7位运算符">7位运算符</h4><p>&amp; 按位与</p><p>| 按位或</p><p>~ 按位非</p><p>^ 按位异或</p><p>&lt;&lt; 左移，空位补0</p><p>&gt; &gt; 右移，如果有符号，补符号，称为算数右移，否则是逻辑右移</p><p>以上优先级表请自行查看，注意位运算符和算数运算的优先级关系</p><p>好了，通过以上内容，我们已经可以操作一个空间进行赋值和计算了，然后就是面向过程的核心，操作过程，即控制程序的执行流程。</p><h2 id="0x04-过程控制">0x04 过程控制</h2><p>面向过程中分为三种结构：顺序，选择，循环</p><p>顺序就是指令依次执行从上到下的一种结构，所有指令执行且只执行一次。<br>选择就是根据条件来执行分支中代码的结构。指令执行0次或1次。<br>循环就是根据条件多次重复执行代码的结构。指令执行0次，1次或多次。</p><p>使用上面三种结构使得所有代码可以有逻辑地执行我们想让它执行的次数。<br>一般情况下，我们用顺序结构做连接，让选择和循环结构分块来执行我们的程序。由于顺序结构就是正常的语句，我们这里直接跳过。</p><h3 id="01-选择结构">01 选择结构</h3><p>我们一般使用if/else和switch来写选择结构</p><p>if-else</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x)&#123;<span class="comment">//单if</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( x )&#123;<span class="comment">//if+else</span></span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x)&#123;<span class="comment">//if+else&#123;if+else&#125;</span></span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">if</span>(y)&#123;</span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若if括号中任意内容的返回值为非0则执行，否则跳过，如果有else就执行else，如果if或else后只有一条语句则不需要写大括号，由于if本身也是一条语句所以：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a)</span><br><span class="line">    <span class="keyword">if</span>(b)</span><br><span class="line">        <span class="keyword">if</span>(c)</span><br><span class="line">            <span class="keyword">if</span>(d)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;不用写大括号，爽！&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;我和if(d)匹配&quot;</span>);<span class="comment">//else只和最近的未匹配的if匹配</span></span><br></pre></td></tr></table></figure><p>因此，if-else if语法也不需要定义可以直接使用因为if else整个是一条语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;神奇的&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果我们要选择的内容是离散的，可以直接枚举，那么使用switch更方便</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(a)&#123;</span><br><span class="line">    <span class="keyword">case</span> x:<span class="comment">//如果a的值是x</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;匹配成功&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> y:<span class="comment">//如果a的值是y</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;匹配成功&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> z:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:<span class="comment">//如果上面的都不是，默认</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里有一个新语法叫做case :，c语言中，只有两个地方使用了冒号，一个是switch，一个是goto，可以想象：冒号用于给一个语句开头贴标签，语句跳转时，直接跳转到这个标签的位置继续执行而不会考虑这里有没有其它标签。因此如果a的值是x，会输出两次匹配成功，因为它跳转到case x的标签处继续执行。那么有什么办法可以防止多个情况被匹配到呢，这里使用了break关键字来跳出这个块，从而结束了继续执行。因此，可以在每个case最后放一个break;来防止继续执行到下一个地方</p><h3 id="02-循环结构">02 循环结构</h3><p>如何让一个操作多次执行呢，使用循环结构吧</p><p>基本循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(init;check;cycle)&#123;</span><br><span class="line">    <span class="comment">//body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下for的小括号里面的内容：</p><p>第一个是循环进入时执行的语句，cycle是每次循环结束时执行的语句，check是每次进入循环前执行的语句，如果这个语句的条件为否就跳出循环，否则一直循环。注意，这里的三个内容均为语句，不可以直接写表达式！比如：1。但是可以留空。</p><p>顺序是init-&gt;check-&gt;body-&gt;cycle-&gt;check-&gt;body-&gt;cycle-&gt;check-&gt;…</p><p>while循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(a)&#123;</span><br><span class="line"><span class="comment">//body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//body</span></span><br><span class="line">&#125;<span class="keyword">while</span>(a);</span><br></pre></td></tr></table></figure><p>这里的a可以写任意内容，只有当内容不为0时才会继续执行，否则跳出。</p><h4 id="1控制语句">1控制语句</h4><p>有三个语句可以用来改变执行流：</p><ul><li>break;：离开循环体或switch块</li><li>continue;：跳过这个语句之后的内容。进行下一次循环</li><li>goto x;：跳到x标签的位置，设置标签直接在函数内使用x:就可以在这一行设置标签。</li></ul><p>（语法篇结束）</p><hr>]]></content>
    
    
    <summary type="html">C-yyds</summary>
    
    
    
    <category term="语言学习" scheme="https://www.pri87.vip/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C语言" scheme="https://www.pri87.vip/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>中国剩余定理证明</title>
    <link href="https://www.pri87.vip/posts/891a7930.html"/>
    <id>https://www.pri87.vip/posts/891a7930.html</id>
    <published>2024-09-15T12:27:45.000Z</published>
    <updated>2024-10-01T11:07:19.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定理描述">定理描述</h3><p><img src="https://s2.loli.net/2024/09/15/jIlf4DvczOoGa6k.png" alt="image-20240915202907787"></p><p>假设解为<br>$$<br>x = \sum^k_{i=0}a_iN_im_i<br>$$<br>解释：</p><p>设$N_i = \frac{N}{n_i}$，由于条件已知n互质，<br>那么根据$N_i$和$n_i$互质和贝祖定理<br>所以$N_im_i+n_ik_i=1$,这里的m和k为任意可能的整数<br>这个式子左右同模$n_i$<br>可得:<br>$$<br>N_im_i \equiv 1 \mod n_i<br>$$</p><hr><p>好的，已经清楚x中每个字母的表示了，继续</p><p>在$\mod n_i$的情况下，(这里用j避免和n混淆，n的i是第i个，前面的sum是全部取值，j可以取到i)<br>$$<br>x \equiv \sum^k_{j=0}a_jN_jm_j \mod n_i<br>$$</p><p>又当$N_j\not = N_i$时，$N_j \mod n_i=0$，所以:<br>$$<br>x \equiv a_iN_im_i \mod n_i<br>$$<br>又因为$N_im_i \equiv 1 \mod n_i$：<br>$$<br>x \equiv a_i \mod n_i<br>$$由于每步可逆，得证</p><hr><p>唯一性证明</p><p>若$x_1$和$x_2$均为方程的解，那么根据同余的定义<br>有$(x_1-x_2)|n_i$，所以$(x_1-x_2)|lim(n_1,n_2,…)$<br>所以$(x_1-x_2)|N$</p><p>所以$x_1 \equiv x_2 \mod N$<br>所以最多有一个解小于N</p><p>得证</p>]]></content>
    
    
    <summary type="html">当我只会用的时候</summary>
    
    
    
    <category term="密码学" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="crt" scheme="https://www.pri87.vip/tags/crt/"/>
    
  </entry>
  
  <entry>
    <title>python-运行时获取信息</title>
    <link href="https://www.pri87.vip/posts/36f452d0.html"/>
    <id>https://www.pri87.vip/posts/36f452d0.html</id>
    <published>2024-09-10T17:06:15.000Z</published>
    <updated>2024-09-10T17:20:04.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块">模块</h2><p>基本信息获取，对类同理,获取函数传参用inspect</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(mod))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(mod))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="built_in">print</span>(inspect.signature(obj.func1))</span><br></pre></td></tr></table></figure><p>对类的函数进行hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setattr</span>(the_class,<span class="string">&#x27;true_func1&#x27;</span>,the_class.__dict__[<span class="string">&#x27;func1&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_func1</span>(<span class="params">self,a,b</span>): <span class="comment"># 改为正确的传参，</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func1&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(a),<span class="built_in">hex</span>(b))</span><br><span class="line">    ret = self.true_func1(a,b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(ret))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setattr</span>(the_class, <span class="string">&quot;func1&quot;</span>, hook_func1)</span><br></pre></td></tr></table></figure><h2 id="读取内存">读取内存</h2><p>python进程运行时是由python解释器运行的，可以使用CE附加python解释器读取内存内容，效果和正常使用CE相同</p>]]></content>
    
    
    <summary type="html">之前我遇到的python题往往不方便调试，这里写一点运行时获取信息的手段</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="python逆向" scheme="https://www.pri87.vip/tags/python%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>长城杯2024复现</title>
    <link href="https://www.pri87.vip/posts/84d382e7.html"/>
    <id>https://www.pri87.vip/posts/84d382e7.html</id>
    <published>2024-09-09T08:05:33.000Z</published>
    <updated>2024-10-02T04:05:06.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="easyre">easyre</h3><p>不解释了，42位逐位异或</p><p>有些反编译很怪的[a±k *(b/k)]这个相当于[(a+b) mod len]</p><p>而类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( _mm_movemask_epi8(</span><br><span class="line">       _mm_and_si128(</span><br><span class="line">         _mm_cmpeq_epi8(_mm_loadu_si128(v3), (__m128i)xmmword_140021410),</span><br><span class="line">         _mm_cmpeq_epi8(_mm_loadu_si128(v3 + <span class="number">1</span>), (__m128i)xmmword_140021400))) == <span class="number">0xFFFF</span> )</span><br></pre></td></tr></table></figure><p>是memcmp两个值（wmctf里面x64打开so就是这个，在arm架构等价的就是memcmp）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># lsat = [0x00, 0x1B, 0x19, 0x02, 0x01, 0x54, 0x4E, 0x4C, 0x56, 0x00, 0x51, 0x4B, 0x4F, 0x57, 0x05, 0x54, 0x0A, 0x0D, 0x06, 0x1C, 0x1D, 0x05, 0x05, 0x5F, 0x0D, 0x03, 0x04, 0x0A, 0x14, 0x49, 0x05, 0x57]</span></span><br><span class="line"><span class="comment"># j = 1</span></span><br><span class="line"><span class="comment"># a = [0x0A, 0x0D, 0x06, 0x1C, 0x1D, 0x05, 0x05, 0x5F, 0x0D, 0x03, 0x04, 0x0A, 0x14, 0x49, 0x05, 0x57]</span></span><br><span class="line"><span class="comment"># b = [0x00, 0x1B, 0x19, 0x02, 0x01, 0x54, 0x4E, 0x4C, 0x56, 0x00, 0x51, 0x4B, 0x4F, 0x57, 0x05, 0x54]</span></span><br><span class="line"><span class="comment"># c = b+a</span></span><br><span class="line"><span class="comment"># d = [0x0A, 0x0D, 0x06, 0x1C, 0x1D, 0x05, 0x05, 0x5F, 0x0D, 0x03, 0x04, 0x0A, 0x14, 0x49, 0x05, 0x57, 0x0A, 0x0D, 0x06, 0x1C, 0x1D, 0x05, 0x05, 0x5F, 0x0D, 0x03, 0x04, 0x0A, 0x14, 0x49, 0x05, 0x57, 0x00, 0x1B, 0x19, 0x02, 0x01, 0x54, 0x4E, 0x4C, 0x56, 0x00, 0x51, 0x4B, 0x4F, 0x57, 0x05, 0x54, 0x55, 0x03, 0x53, 0x57, 0x01, 0x03, 0x07, 0x04, 0x4A, 0x77, 0x0D,0x00, 0x1B, 0x19, 0x02, 0x01, 0x54, 0x4E, 0x4C, 0x56, 0x00, 0x51, 0x4B, 0x4F, 0x57, 0x05, 0x54]</span></span><br><span class="line"><span class="comment"># for i in range(len(d)-2,0,-1):</span></span><br><span class="line"><span class="comment">#     d[i] ^= d[(i+1)]</span></span><br><span class="line"><span class="comment"># pl(d)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l2 = [<span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0x19</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x54</span>, <span class="number">0x4E</span>, <span class="number">0x4C</span>, <span class="number">0x56</span>, <span class="number">0x00</span>, <span class="number">0x51</span>, <span class="number">0x4B</span>, <span class="number">0x4F</span>, <span class="number">0x57</span>, <span class="number">0x05</span>, <span class="number">0x54</span>]</span><br><span class="line">l1 = [<span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x06</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x5F</span>, <span class="number">0x0D</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0A</span>, <span class="number">0x14</span>, <span class="number">0x49</span>, <span class="number">0x05</span>, <span class="number">0x57</span>]</span><br><span class="line">l = l1+l2</span><br><span class="line"><span class="comment"># m = [0x0A, 0x0D, 0x06, 0x1C, 0x1A, 0x0E, 0x04, 0x18, 0x06, 0x10, 0x0B, 0x0A, 0x0D, 0x0A, 0x09, 0x12, 0x0D, 0x0F, 0x0A, 0x01, 0x1D, 0x1B, 0x1A, 0x08, 0x0C, 0x1B, 0x07, 0x0C, 0x0D, 0x1C, 0x59, 0x01, 0x02, 0x0B, 0x0A, 0x0B, 0x0C, 0x03, 0x02, 0x03, 0x4B, 0x77, 0x0D]</span></span><br><span class="line"><span class="comment"># j = 0</span></span><br><span class="line"><span class="comment"># for i in range(len(l)-1,-1,-1):</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pl(l)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(ord(&#x27;&#125;&#x27;)^0x77)</span></span><br><span class="line"><span class="comment"># print(chr(ord(&#x27;K&#x27;)^0x7D))</span></span><br><span class="line">k = [<span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x06</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x5F</span>, <span class="number">0x0D</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0A</span>, <span class="number">0x14</span>, <span class="number">0x49</span>, <span class="number">0x05</span>, <span class="number">0x57</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0x19</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x54</span>, <span class="number">0x4E</span>, <span class="number">0x4C</span>, <span class="number">0x56</span>, <span class="number">0x00</span>, <span class="number">0x51</span>, <span class="number">0x4B</span>, <span class="number">0x4F</span>, <span class="number">0x57</span>, <span class="number">0x05</span>, <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x03</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x4A</span>, <span class="number">0x77</span>]</span><br><span class="line">kk = k</span><br><span class="line">kb = kk[:]</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">    kk[<span class="built_in">len</span>(kk)-<span class="number">1</span>] = ch</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(kk)-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        kk[i] ^= kk[i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> kk[<span class="number">0</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>) <span class="keyword">and</span> kk[<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;l&#x27;</span>):</span><br><span class="line">        pl(kk)</span><br><span class="line">    kk = kb[:]</span><br></pre></td></tr></table></figure><h3 id="tmaze">tmaze</h3><p>根据调试分析可以知道它是一个链表(?图)，有三个方向和3个标记。要走到最后一个v7的位置</p><p>node节点大概是</p><p><img src="https://s2.loli.net/2024/09/08/Cq5yrtOnwTAXvsY.png" alt="image-20240908215707302"></p><p>前三个是指针，后面的sign是三个方向是否可以通过的标记</p><p>bef指向前一个node<br>next指向下一个node<br>tride的指向没有看懂，但是这个指针是互指的</p><p><img src="https://s2.loli.net/2024/09/08/H1NhxZkWCRIsJ72.png" alt="image-20240908215931928"></p><p>初始化过程</p><p><img src="https://s2.loli.net/2024/09/08/O5GbkeMc2RqNS37.png" alt="image-20240908215956884"></p><p>检查输入过程</p><p>这个题当时被困在不会写idc脚本，最后学长告诉我idapython更方便，然后就试了一下idapython发现这个语法和python基本一样，感觉很爽，然后就把脚本搓出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, addr: <span class="built_in">int</span></span>):</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.x = <span class="built_in">int</span>(idc.get_qword(addr))</span><br><span class="line">        self.y = <span class="built_in">int</span>(idc.get_qword(addr + <span class="number">8</span>))</span><br><span class="line">        self.z = <span class="built_in">int</span>(idc.get_qword(addr + <span class="number">16</span>))</span><br><span class="line">        self.to_x = <span class="built_in">int</span>(idc.get_wide_byte(addr + <span class="number">24</span>)) == <span class="number">0</span></span><br><span class="line">        self.to_y = <span class="built_in">int</span>(idc.get_wide_byte(addr + <span class="number">25</span>)) == <span class="number">0</span></span><br><span class="line">        self.to_z = <span class="built_in">int</span>(idc.get_wide_byte(addr + <span class="number">26</span>)) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hash</span>(self.addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Node):</span><br><span class="line">            <span class="keyword">return</span> self.addr == other.addr</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_next</span>(<span class="params">self, direction</span>):</span><br><span class="line">        <span class="keyword">if</span> direction == <span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> self.to_x:</span><br><span class="line">            <span class="keyword">return</span> Node(self.x)</span><br><span class="line">        <span class="keyword">elif</span> direction == <span class="string">&#x27;y&#x27;</span> <span class="keyword">and</span> self.to_y:</span><br><span class="line">            <span class="keyword">return</span> Node(self.y)</span><br><span class="line">        <span class="keyword">elif</span> direction == <span class="string">&#x27;z&#x27;</span> <span class="keyword">and</span> self.to_z:</span><br><span class="line">            <span class="keyword">return</span> Node(self.z)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_way</span>(<span class="params">start, end, visited=<span class="literal">None</span>, path=<span class="string">&#x27;&#x27;</span>, path_length=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> visited <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        visited = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">if</span> path_length &gt; <span class="number">43</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    visited.add(start)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> start == end:</span><br><span class="line">        <span class="keyword">return</span> path, path_length</span><br><span class="line">    shortest_path = <span class="literal">None</span></span><br><span class="line">    shortest_length = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> situation <span class="keyword">in</span> <span class="string">&#x27;xyz&#x27;</span>:</span><br><span class="line">        next_node = start.get_next(situation)</span><br><span class="line">        <span class="keyword">if</span> next_node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> next_node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            new_path, new_length = find_way(next_node, end, visited.copy(), path + situation, path_length + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> new_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> new_length &lt; shortest_length:</span><br><span class="line">                shortest_path = new_path</span><br><span class="line">                shortest_length = new_length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shortest_path, shortest_length</span><br><span class="line"></span><br><span class="line">start_node = Node(<span class="number">0x1B7BA6315D0</span>)</span><br><span class="line">end_node = Node(<span class="number">0x1B7BA632180</span>)</span><br><span class="line">path, plength = find_way(start_node, end_node)</span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line"><span class="comment"># yzyzyzyzyyzxzyyyzxzyzxxxzxzyyyyyyyyzxzxzyy</span></span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get<span class="emphasis">_qword 获取对应地址的qword值</span></span><br><span class="line"><span class="emphasis">get_wide_</span>bytes 获取对应地址的bytes值</span><br></pre></td></tr></table></figure><p>比赛的时候没出，不知道最后是不是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;yzyzyzyzyyzxzyyyzxzyzxxxzxzyyyyyyyyzxzxzyy&#x27;</span></span><br><span class="line">uuid3_generated = uuid.uuid3(uuid.NAMESPACE_DNS, name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">长城杯</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="安卓" scheme="https://www.pri87.vip/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>IDApython常见接口</title>
    <link href="https://www.pri87.vip/posts/c52f1795.html"/>
    <id>https://www.pri87.vip/posts/c52f1795.html</id>
    <published>2024-09-09T06:50:23.000Z</published>
    <updated>2024-09-10T16:50:16.270Z</updated>
    
    <content type="html"><![CDATA[<p>IDA支持两种脚本语言，分别为IDC和IDApython。</p><p>IDC和C语言感觉差别较大，比如i++必须写成i = i + 1，感觉十分麻烦，同时还保留了花括号，有点离谱，解释语言还有一堆格式，又改了一些东西，太难用了。于是我尝试学习IDApython。<br>IDApyhon的好处在于它的语法和python一模一样，而通过<code>import idc.idc</code>就可以使用所有IDC可以使用的IDA的接口，其具体的接口定义在<code>IDA主目录\python\3</code>目录中，将其添加到工程目录，然后就可以引用其中的内容了（只看了8.3版本的）</p><p>其中的所有代码均需要在ida命令行或者脚本界面执行</p><p>参考：</p><p><a href="https://github.com/yanxxd/IDA/blob/master/IDAPython%E6%89%8B%E5%86%8C%E4%B8%AD%E6%96%87%E7%89%88.pdf">IDA/IDAPython手册中文版.pdf at master · yanxxd/IDA (github.com)</a></p><h3 id="对地址的读写接口">对地址的读写接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">get_wide_byte(addr)</span><br><span class="line">get_wide_word(addr)</span><br><span class="line">get_wide_dword(addr)</span><br><span class="line">get_qword(addr)</span><br><span class="line"><span class="comment"># 上面的分别读取目标地址的1，2，3，4字节，返回对应的值</span></span><br><span class="line">patch_byte(ea,x)</span><br><span class="line">patch_word(ea, x)</span><br><span class="line">patch_dword(ea, x)</span><br><span class="line">patch_qword(ea, x)</span><br><span class="line"><span class="comment"># 上面的分别修改对应ea的地址为x的值</span></span><br></pre></td></tr></table></figure><p>ea是IDA中的地址</p><p>其它的不同粒度的操作参考上面的pdf</p>]]></content>
    
    
    <summary type="html">idapython是一个很好用的工具，可惜我不会</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
    <category term="ida" scheme="https://www.pri87.vip/tags/ida/"/>
    
    <category term="语言" scheme="https://www.pri87.vip/tags/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>dasctf-re复现</title>
    <link href="https://www.pri87.vip/posts/9e273b7a.html"/>
    <id>https://www.pri87.vip/posts/9e273b7a.html</id>
    <published>2024-08-30T06:25:39.000Z</published>
    <updated>2024-09-10T17:03:04.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wp">wp</h2><h3 id="pic">pic</h3><p>动调可知，就是一个异或加rc4，需要爆破5位的key</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">init_permutation</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; key)</span> </span>&#123;</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">S</span><span class="params">(<span class="number">256</span>)</span></span>;</span><br><span class="line">std::<span class="built_in">iota</span>(S.<span class="built_in">begin</span>(), S.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">j = (j + S[i] + key[i % key.<span class="built_in">size</span>()]) % <span class="number">256</span>;</span><br><span class="line">std::<span class="built_in">swap</span>(S[i], S[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt; <span class="title">read_file</span><span class="params">(<span class="type">const</span> std::string&amp; filename)</span> </span>&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">file</span><span class="params">(filename, std::ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!file) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;无法打开文件！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt; <span class="title">buffer</span><span class="params">((std::istreambuf_iterator&lt;<span class="type">char</span>&gt;(file)), std::istreambuf_iterator&lt;<span class="type">char</span>&gt;())</span></span>;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> std::string filename = <span class="string">&quot;C:\\工作区\\box\\ctf\\dasctf2024qiu\\re\\pic\\pic\\bak\\flag.png&quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> buf = <span class="built_in">read_file</span>(filename);</span><br><span class="line"><span class="keyword">auto</span> bak = buf;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; onkey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i1 = <span class="string">&#x27;0&#x27;</span>; i1 &lt;= <span class="string">&#x27;z&#x27;</span>; ++i1) &#123;</span><br><span class="line"><span class="keyword">if</span> (i1 &gt; <span class="string">&#x27;9&#x27;</span> &amp;&amp; i1 &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i2 = <span class="string">&#x27;0&#x27;</span>; i2 &lt;= <span class="string">&#x27;z&#x27;</span>; ++i2) &#123;</span><br><span class="line"><span class="keyword">if</span> (i2 &gt; <span class="string">&#x27;9&#x27;</span> &amp;&amp; i2 &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i3 = <span class="string">&#x27;0&#x27;</span>; i3 &lt;= <span class="string">&#x27;z&#x27;</span>; ++i3) &#123;</span><br><span class="line"><span class="keyword">if</span> (i3 &gt; <span class="string">&#x27;9&#x27;</span> &amp;&amp; i3 &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i4 = <span class="string">&#x27;0&#x27;</span>; i4 &lt;= <span class="string">&#x27;z&#x27;</span>; ++i4) &#123;</span><br><span class="line"><span class="keyword">if</span> (i4 &gt; <span class="string">&#x27;9&#x27;</span> &amp;&amp; i4 &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i5 = <span class="string">&#x27;0&#x27;</span>; i5 &lt;= <span class="string">&#x27;z&#x27;</span>; ++i5) &#123;</span><br><span class="line"><span class="keyword">if</span> (i5 &gt; <span class="string">&#x27;9&#x27;</span> &amp;&amp; i5 &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">buf = bak;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; combination = &#123; i1, i2, i3, i4, i5 &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> xor_num = i2;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; S = <span class="built_in">init_permutation</span>(combination);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">buf[i] ^= xor_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (q &lt; <span class="number">4</span>) &#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (S[i] + j) % <span class="number">256</span>;</span><br><span class="line">std::<span class="built_in">swap</span>(S[i], S[j]);</span><br><span class="line">buf[q] ^= S[(S[i] + S[j]) % <span class="number">256</span>] ^ <span class="number">0x11</span>;</span><br><span class="line">++q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((buf[<span class="number">0</span>] == <span class="number">0x89</span>) &amp;&amp; (buf[<span class="number">1</span>] == <span class="number">0x50</span>) &amp;&amp; (buf[<span class="number">2</span>] == <span class="number">0x4e</span>) &amp;&amp; (buf[<span class="number">3</span>] == <span class="number">0x47</span>)) &#123;</span><br><span class="line">std::cout &lt;&lt; i1 &lt;&lt; i2 &lt;&lt; i3 &lt;&lt; i4 &lt;&lt; i5 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">goto</span> A;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">A:</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;finished&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>爆出来之后直接解密</p><h3 id="你这主函数保真吗">你这主函数保真吗</h3><p>直接调试,然后就是原题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dct3</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">double</span>&gt;&amp; Y, std::vector&lt;<span class="type">double</span>&gt;&amp; X)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> N = Y.<span class="built_in">size</span>();</span><br><span class="line">X.<span class="built_in">resize</span>(N);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; N; ++n) &#123;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += Y[k] * std::<span class="built_in">cos</span>(<span class="number">3.14159265</span> * k * (n + <span class="number">0.5</span>) / N) * std::<span class="built_in">sqrt</span>(<span class="number">1.0</span> / N);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sum += Y[k] * std::<span class="built_in">cos</span>(<span class="number">3.14159265</span> * k * (n + <span class="number">0.5</span>) / N) * std::<span class="built_in">sqrt</span>(<span class="number">2.0</span> / N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">X[n] = sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; res = &#123; <span class="number">513.355</span>, <span class="number">-37.7986</span>, <span class="number">8.7316</span>, <span class="number">-10.7832</span>, <span class="number">-1.3097</span>, <span class="number">-20.5779</span>,</span><br><span class="line"><span class="number">6.98641</span>, <span class="number">-29.2989</span>, <span class="number">15.9422</span>,<span class="number">21.4138</span>,<span class="number">29.4754</span>, <span class="number">-2.77161</span>,</span><br><span class="line"><span class="number">-6.58794</span>, <span class="number">-4.22332</span>, <span class="number">-7.20771</span>, <span class="number">8.83506</span>, <span class="number">-4.38138</span>, <span class="number">-19.3898</span>,</span><br><span class="line"><span class="number">18.3453</span>, <span class="number">6.88259</span>, <span class="number">-14.7652</span>, <span class="number">14.6102</span>, <span class="number">24.7414</span>, <span class="number">-11.6222</span>,</span><br><span class="line"><span class="number">-9.754759999999999</span>,<span class="number">12.2424</span>,<span class="number">13.4343</span>, <span class="number">-34.9307</span>, <span class="number">-35.735</span>,</span><br><span class="line"><span class="number">-20.0848</span>, <span class="number">39.689</span>, <span class="number">21.879</span>, <span class="number">26.8296</span> &#125;;</span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; X;</span><br><span class="line"><span class="built_in">dct3</span>(res, X);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> x : X) &#123;</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++) &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> chr = (<span class="type">char</span>)std::<span class="built_in">round</span>(X[i]);</span><br><span class="line">std::cout &lt;&lt; chr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后rot13</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="doccrack">doccrack</h3><p>用7z解压</p><p>vbaProject.bin中把DPB改成DPx，然后打开word的宏可以直接得到源代码。</p><p>把下面执行的地方删除，运行得到exe，然后直接逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">data = [<span class="number">0x10C0</span>, <span class="number">0x1180</span>, <span class="number">0x1500</span>, <span class="number">0x1100</span>, <span class="number">0x14C0</span>, <span class="number">0x1040</span>, <span class="number">0x1F00</span>, <span class="number">0x1440</span>, <span class="number">0x1940</span>, <span class="number">0x1980</span>, <span class="number">0x1600</span>, <span class="number">0x0D80</span>, <span class="number">0x1D00</span>, <span class="number">0x1600</span>, <span class="number">0x18C0</span>, <span class="number">0x1980</span>, <span class="number">0x1A40</span>, <span class="number">0x1800</span>, <span class="number">0x1880</span>, <span class="number">0x1D40</span>, <span class="number">0x1A00</span>, <span class="number">0x1C80</span>, <span class="number">0x1D00</span>, <span class="number">0x0980</span>, <span class="number">0x0980</span>, <span class="number">0x0980</span>, <span class="number">0x1600</span>, <span class="number">0x1140</span>, <span class="number">0x0D80</span>, <span class="number">0x1C00</span>, <span class="number">0x1980</span>, <span class="number">0x1D40</span>, <span class="number">0x1880</span>, <span class="number">0x1600</span>, <span class="number">0x0DC0</span>, <span class="number">0x1840</span>, <span class="number">0x1600</span>, <span class="number">0x1280</span>, <span class="number">0x1980</span>, <span class="number">0x1900</span>, <span class="number">0x1D40</span>, <span class="number">0x0DC0</span>, <span class="number">0x1600</span>, <span class="number">0x1440</span>, <span class="number">0x0D80</span>, <span class="number">0x1D40</span>, <span class="number">0x1C80</span>, <span class="number">0x0C80</span>, <span class="number">0x1880</span>, <span class="number">0x1D00</span>, <span class="number">0x0980</span>, <span class="number">0x0980</span>, <span class="number">0x0980</span>, <span class="number">0x1E80</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    data[i]&gt;&gt;=<span class="number">6</span></span><br><span class="line">pxor(data,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">好难QAQ</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>sekaictf2024复现</title>
    <link href="https://www.pri87.vip/posts/925c7fa6.html"/>
    <id>https://www.pri87.vip/posts/925c7fa6.html</id>
    <published>2024-08-30T06:25:18.000Z</published>
    <updated>2024-09-10T17:02:57.565Z</updated>
    
    <content type="html"><![CDATA[<p>只做了一个，之后再复现其它的</p><h2 id="x64extenshion">x64extenshion</h2><p>用指令集自写了一个aes</p><p>先动态调试出加密的轮密钥，然后算出解密密钥直接出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wmmintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_encrypt_array</span><span class="params">(__m128i* data, <span class="type">int</span> num_elements, __m128i* rkeys)</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key1[] = &#123; <span class="number">0xFF</span>, <span class="number">0xFE</span>, <span class="number">0xFD</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xFA</span>, <span class="number">0xF9</span>, <span class="number">0xF8</span>, <span class="number">0xF7</span>, <span class="number">0xF6</span>, <span class="number">0xF5</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xF0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key2[] = &#123; <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span> &#125;;</span><br><span class="line"></span><br><span class="line">__m128i key1_m128i = _mm_loadu_si128((__m128i*)key1);</span><br><span class="line">__m128i key2_m128i = _mm_loadu_si128((__m128i*)key2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> index = <span class="number">0</span>; index &lt; num_elements; ++index) &#123;</span><br><span class="line">__m128i state = _mm_loadu_si128(&amp;data[index]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">state = _mm_xor_si128(state, _mm_xor_si128(key1_m128i, key2_m128i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">__m128i previous_encrypted = _mm_loadu_si128(&amp;data[index - <span class="number">1</span>]);</span><br><span class="line">state = _mm_xor_si128(state, _mm_xor_si128(previous_encrypted, key2_m128i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; ++i) &#123;</span><br><span class="line">state = _mm_aesenc_si128(state, rkeys[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">state = _mm_aesenclast_si128(state, rkeys[<span class="number">13</span>]);</span><br><span class="line"></span><br><span class="line">_mm_storeu_si128(&amp;data[index], state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_decrypt_array</span><span class="params">(__m128i* data, <span class="type">int</span> num_elements, __m128i* rkeys)</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key1[] = &#123; <span class="number">0xFF</span>, <span class="number">0xFE</span>, <span class="number">0xFD</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xFA</span>, <span class="number">0xF9</span>, <span class="number">0xF8</span>, <span class="number">0xF7</span>, <span class="number">0xF6</span>, <span class="number">0xF5</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xF0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key2[] = &#123; <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span> &#125;;</span><br><span class="line"></span><br><span class="line">__m128i key1_m128i = _mm_loadu_si128((__m128i*)key1);</span><br><span class="line">__m128i key2_m128i = _mm_loadu_si128((__m128i*)key2);</span><br><span class="line">__m128i initial_key = _mm_xor_si128(key1_m128i, key2_m128i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> index = num_elements - <span class="number">1</span>; index &gt;= <span class="number">0</span>; --index) &#123;</span><br><span class="line">__m128i state = _mm_loadu_si128(&amp;data[index]);</span><br><span class="line">state = _mm_xor_si128(state, rkeys[<span class="number">13</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">12</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">state = _mm_aesdec_si128(state, rkeys[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">state = _mm_aesdeclast_si128(state, initial_key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">__m128i previous_encrypted = _mm_loadu_si128(&amp;data[index - <span class="number">1</span>]);</span><br><span class="line">__m128i temp_key = _mm_xor_si128(previous_encrypted, key2_m128i);</span><br><span class="line">state = _mm_aesdeclast_si128(state, temp_key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_mm_storeu_si128(&amp;data[index], state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">generateDecryptionKeys</span><span class="params">(<span class="type">const</span> __m128i* encryptionKeys, __m128i* decryptionKeys, <span class="type">int</span> nr)</span> &#123;</span><br><span class="line">decryptionKeys[nr - <span class="number">1</span>] = encryptionKeys[nr - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nr - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">decryptionKeys[i] = _mm_aesimc_si128(encryptionKeys[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ciphers[] = &#123; <span class="number">0x15</span>,<span class="number">0x2a</span>,<span class="number">0x38</span>,<span class="number">0x82</span>,<span class="number">0xcd</span>,<span class="number">0x8a</span>,<span class="number">0x36</span>,<span class="number">0x33</span>,<span class="number">0x54</span>,<span class="number">0x4d</span>,<span class="number">0x22</span>,<span class="number">0x66</span>,<span class="number">0x5c</span>,<span class="number">0xe5</span>,<span class="number">0x8a</span>,<span class="number">0xea</span>,<span class="number">0x1c</span>,<span class="number">0xb2</span>,<span class="number">0x5d</span>,<span class="number">0xb2</span>,<span class="number">0x59</span>,<span class="number">0x64</span>,<span class="number">0x7a</span>,<span class="number">0x7e</span>,<span class="number">0x6d</span>,<span class="number">0x70</span>,<span class="number">0x21</span>,<span class="number">0x2a</span>,<span class="number">0xdd</span>,<span class="number">0x24</span>,<span class="number">0x6b</span>,<span class="number">0x8e</span>,<span class="number">0x38</span>,<span class="number">0x11</span>,<span class="number">0x45</span>,<span class="number">0xa3</span>,<span class="number">0x60</span>,<span class="number">0x3d</span>,<span class="number">0xca</span>,<span class="number">0x8f</span>,<span class="number">0x12</span>,<span class="number">0xb6</span>,<span class="number">0xec</span>,<span class="number">0x9c</span>,<span class="number">0x0f</span>,<span class="number">0x60</span>,<span class="number">0xd9</span>,<span class="number">0x26</span>,<span class="number">0xe9</span>,<span class="number">0x2c</span>,<span class="number">0x83</span>,<span class="number">0x9f</span>,<span class="number">0x61</span>,<span class="number">0x70</span>,<span class="number">0x0f</span>,<span class="number">0xdc</span>,<span class="number">0x78</span>,<span class="number">0x92</span>,<span class="number">0x59</span>,<span class="number">0x39</span>,<span class="number">0x48</span>,<span class="number">0xc1</span>,<span class="number">0xe7</span>,<span class="number">0xc2</span>,<span class="number">0x6b</span>,<span class="number">0x5c</span>,<span class="number">0xba</span>,<span class="number">0x1c</span>,<span class="number">0x43</span>,<span class="number">0xc2</span>,<span class="number">0x86</span>,<span class="number">0x80</span>,<span class="number">0x18</span>,<span class="number">0x62</span>,<span class="number">0x15</span>,<span class="number">0xd2</span>,<span class="number">0x1e</span>,<span class="number">0x0b</span>,<span class="number">0x6b</span>,<span class="number">0x9e</span>,<span class="number">0x17</span>,<span class="number">0x2c</span>,<span class="number">0x14</span>,<span class="number">0xc7</span>,<span class="number">0x41</span>,<span class="number">0x10</span>,<span class="number">0xc4</span>,<span class="number">0x35</span>,<span class="number">0xfe</span>,<span class="number">0x78</span>,<span class="number">0x6f</span>,<span class="number">0xb4</span>,<span class="number">0xfc</span>,<span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0xaa</span>,<span class="number">0xba</span>,<span class="number">0xdd</span>,<span class="number">0xaa</span>,<span class="number">0x15</span>,<span class="number">0x02</span>,<span class="number">0xb7</span>,<span class="number">0xf7</span>,<span class="number">0x77</span>,<span class="number">0x65</span>,<span class="number">0x43</span>,<span class="number">0xf3</span>,<span class="number">0x78</span>,<span class="number">0xcc</span>,<span class="number">0xee</span>,<span class="number">0x14</span>,<span class="number">0xca</span>,<span class="number">0x53</span>,<span class="number">0x42</span>,<span class="number">0xdf</span>,<span class="number">0x3a</span>,<span class="number">0xec</span>,<span class="number">0xed</span>,<span class="number">0xa6</span>,<span class="number">0x31</span>,<span class="number">0x4a</span>,<span class="number">0x81</span>,<span class="number">0x4d</span>,<span class="number">0xff</span>,<span class="number">0xbe</span>,<span class="number">0x4e</span>,<span class="number">0xc6</span>,<span class="number">0xef</span>,<span class="number">0x17</span>,<span class="number">0x68</span>,<span class="number">0xd0</span>,<span class="number">0x9d</span>,<span class="number">0xb1</span>,<span class="number">0x73</span>,<span class="number">0xff</span>,<span class="number">0x4e</span>,<span class="number">0x24</span>,<span class="number">0xbf</span>,<span class="number">0xec</span>,<span class="number">0xbb</span>,<span class="number">0x55</span>,<span class="number">0xf5</span>,<span class="number">0xaf</span>,<span class="number">0x7d</span>,<span class="number">0x7d</span>,<span class="number">0x6b</span>,<span class="number">0xdf</span>,<span class="number">0x9f</span>,<span class="number">0x9a</span>,<span class="number">0x3b</span>,<span class="number">0x23</span>,<span class="number">0x98</span>,<span class="number">0xb3</span>,<span class="number">0xa4</span>,<span class="number">0xb4</span>,<span class="number">0x1c</span>,<span class="number">0x26</span>,<span class="number">0x5f</span>,<span class="number">0x7a</span>,<span class="number">0x0d</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> rkeys[] = &#123; <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, <span class="number">0x1E</span>, <span class="number">0x1F</span>,</span><br><span class="line"><span class="number">0xB7</span>, <span class="number">0x73</span>, <span class="number">0xC2</span>, <span class="number">0x9F</span>, <span class="number">0xB3</span>, <span class="number">0x76</span>, <span class="number">0xC4</span>, <span class="number">0x98</span>, <span class="number">0xBB</span>, <span class="number">0x7F</span>, <span class="number">0xCE</span>, <span class="number">0x93</span>, <span class="number">0xB7</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0x9C</span>,</span><br><span class="line"><span class="number">0xB9</span>, <span class="number">0x51</span>, <span class="number">0xA8</span>, <span class="number">0xCD</span>, <span class="number">0xAD</span>, <span class="number">0x44</span>, <span class="number">0xBE</span>, <span class="number">0xDA</span>, <span class="number">0xB5</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0xC1</span>, <span class="number">0xA9</span>, <span class="number">0x40</span>, <span class="number">0xBA</span>, <span class="number">0xDE</span>,</span><br><span class="line"><span class="number">0x8D</span>, <span class="number">0x87</span>, <span class="number">0xDF</span>, <span class="number">0x4C</span>, <span class="number">0x3E</span>, <span class="number">0xF1</span>, <span class="number">0x1B</span>, <span class="number">0xD4</span>, <span class="number">0x85</span>, <span class="number">0x8E</span>, <span class="number">0xD5</span>, <span class="number">0x47</span>, <span class="number">0x32</span>, <span class="number">0xFC</span>, <span class="number">0x15</span>, <span class="number">0xDB</span>,</span><br><span class="line"><span class="number">0x9A</span>, <span class="number">0xE1</span>, <span class="number">0xF1</span>, <span class="number">0x74</span>, <span class="number">0x37</span>, <span class="number">0xA5</span>, <span class="number">0x4F</span>, <span class="number">0xAE</span>, <span class="number">0x82</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x6F</span>, <span class="number">0x2B</span>, <span class="number">0xB8</span>, <span class="number">0x51</span>, <span class="number">0xB1</span>,</span><br><span class="line"><span class="number">0xD6</span>, <span class="number">0x56</span>, <span class="number">0x17</span>, <span class="number">0xBD</span>, <span class="number">0xE8</span>, <span class="number">0xA7</span>, <span class="number">0x0C</span>, <span class="number">0x69</span>, <span class="number">0x6D</span>, <span class="number">0x29</span>, <span class="number">0xD9</span>, <span class="number">0x2E</span>, <span class="number">0x5F</span>, <span class="number">0xD5</span>, <span class="number">0xCC</span>, <span class="number">0xF5</span>,</span><br><span class="line"><span class="number">0x55</span>, <span class="number">0xE2</span>, <span class="number">0xBA</span>, <span class="number">0x92</span>, <span class="number">0x62</span>, <span class="number">0x47</span>, <span class="number">0xF5</span>, <span class="number">0x3C</span>, <span class="number">0xE0</span>, <span class="number">0xBF</span>, <span class="number">0x1E</span>, <span class="number">0x53</span>, <span class="number">0xCB</span>, <span class="number">0x07</span>, <span class="number">0x4F</span>, <span class="number">0xE2</span>,</span><br><span class="line"><span class="number">0xA9</span>, <span class="number">0xD2</span>, <span class="number">0x8F</span>, <span class="number">0xA2</span>, <span class="number">0x41</span>, <span class="number">0x75</span>, <span class="number">0x83</span>, <span class="number">0xCB</span>, <span class="number">0x2C</span>, <span class="number">0x5C</span>, <span class="number">0x5A</span>, <span class="number">0xE5</span>, <span class="number">0x73</span>, <span class="number">0x89</span>, <span class="number">0x96</span>, <span class="number">0x10</span>,</span><br><span class="line"><span class="number">0xDA</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x58</span>, <span class="number">0xB8</span>, <span class="number">0x02</span>, <span class="number">0xDF</span>, <span class="number">0x64</span>, <span class="number">0x58</span>, <span class="number">0xBD</span>, <span class="number">0xC1</span>, <span class="number">0x37</span>, <span class="number">0x93</span>, <span class="number">0xBA</span>, <span class="number">0x8E</span>, <span class="number">0xD5</span>,</span><br><span class="line"><span class="number">0x87</span>, <span class="number">0xCB</span>, <span class="number">0x8C</span>, <span class="number">0x7E</span>, <span class="number">0xC6</span>, <span class="number">0xBE</span>, <span class="number">0x0F</span>, <span class="number">0xB5</span>, <span class="number">0xEA</span>, <span class="number">0xE2</span>, <span class="number">0x55</span>, <span class="number">0x50</span>, <span class="number">0x99</span>, <span class="number">0x6B</span>, <span class="number">0xC3</span>, <span class="number">0x40</span>,</span><br><span class="line"><span class="number">0x34</span>, <span class="number">0x3A</span>, <span class="number">0x04</span>, <span class="number">0x51</span>, <span class="number">0x8C</span>, <span class="number">0x38</span>, <span class="number">0xDB</span>, <span class="number">0x35</span>, <span class="number">0xD4</span>, <span class="number">0x85</span>, <span class="number">0x1A</span>, <span class="number">0x02</span>, <span class="number">0x47</span>, <span class="number">0x3F</span>, <span class="number">0x94</span>, <span class="number">0xD7</span>,</span><br><span class="line"><span class="number">0xA7</span>, <span class="number">0xE9</span>, <span class="number">0x82</span>, <span class="number">0xDE</span>, <span class="number">0x61</span>, <span class="number">0x57</span>, <span class="number">0x8D</span>, <span class="number">0x6B</span>, <span class="number">0x8B</span>, <span class="number">0xB5</span>, <span class="number">0xD8</span>, <span class="number">0x3B</span>, <span class="number">0x12</span>, <span class="number">0xDE</span>, <span class="number">0x1B</span>, <span class="number">0x7B</span>,</span><br><span class="line"><span class="number">0xFD</span>, <span class="number">0x27</span>, <span class="number">0xAB</span>, <span class="number">0x70</span>, <span class="number">0x71</span>, <span class="number">0x1F</span>, <span class="number">0x70</span>, <span class="number">0x45</span>, <span class="number">0xA5</span>, <span class="number">0x9A</span>, <span class="number">0x6A</span>, <span class="number">0x47</span>, <span class="number">0xE2</span>, <span class="number">0xA5</span>, <span class="number">0xFE</span>, <span class="number">0x90</span>,</span><br><span class="line"><span class="number">0xC7</span>, <span class="number">0x52</span>, <span class="number">0xE2</span>, <span class="number">0x46</span>, <span class="number">0xA6</span>, <span class="number">0x05</span>, <span class="number">0x6F</span>, <span class="number">0x2D</span>, <span class="number">0x2D</span>, <span class="number">0xB0</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0x3F</span>, <span class="number">0x6E</span>, <span class="number">0xAC</span>, <span class="number">0x6D</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> decryption_keys[<span class="number">224</span>];</span><br><span class="line">generateDecryptionKeys((__m128i*)rkeys, (__m128i*)decryption_keys, <span class="number">14</span>);</span><br><span class="line">aes_decrypt_array((__m128i*)ciphers, <span class="number">10</span>, (__m128i*)decryption_keys);</span><br><span class="line">ciphers[<span class="number">159</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ciphers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">不会</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>angr学习</title>
    <link href="https://www.pri87.vip/posts/3d36c04.html"/>
    <id>https://www.pri87.vip/posts/3d36c04.html</id>
    <published>2024-08-28T10:41:34.000Z</published>
    <updated>2024-09-10T16:51:13.589Z</updated>
    
    <content type="html"><![CDATA[<p>昨天打dasctf，被第一个题暴打了，之后复现的时候感觉可以爆破，尝试一下angr，（虽然不知道行不行）</p><h3 id="安装">安装</h3><p>因为是exe所以在win上安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">pip install GitPython</span><br><span class="line">pip install pyvex</span><br><span class="line">pip install unicorn</span><br><span class="line">pip install simuvex</span><br><span class="line">pip install angr  </span><br><span class="line">pip install &quot;numpy&lt;1.24.0&quot;</span><br></pre></td></tr></table></figure><p>最后的numpy一定要小于这个版本，不然会报错</p><h2 id="使用">使用</h2><p>载入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = Project(<span class="string">&#x27;xxx&#x27;</span>,auto_load_libs = <span class="literal">False</span>)</span><br><span class="line"><span class="comment"># xxx为文件路径</span></span><br></pre></td></tr></table></figure><p>执行后，视为载入了这个文件，这时才可以分析</p><h3 id="数据类型及操作">数据类型及操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bv = state.solver.BVV(<span class="number">0x1234</span>, <span class="number">32</span>)       <span class="comment"># create a 32-bit-wide bitvector with value 0x1234</span></span><br><span class="line">state.solver.<span class="built_in">eval</span>(bv)                <span class="comment"># convert to python int</span></span><br></pre></td></tr></table></figure><p>位向量和int的转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">state.mem[index] <span class="comment">#指定一个内存地址</span></span><br><span class="line">state.mem[<span class="number">0x1000</span>].long = <span class="number">4</span> <span class="comment">#赋值为long类型的4 可以char, short, int, long, size_t, uint8_t, uint16_t等</span></span><br><span class="line"></span><br><span class="line">state.mem[<span class="number">0x1000</span>].long.resolved <span class="comment">#输出为位向量</span></span><br><span class="line">state.mem[<span class="number">0x1000</span>].long.concrete <span class="comment">#输出为int</span></span><br><span class="line"></span><br><span class="line">state.regs.rsi = state.solver.BVV(<span class="number">3</span>,<span class="number">64</span>) <span class="comment">#给一个寄存器赋值64位值为3，angr中寄存器的值均为位向量类型</span></span><br></pre></td></tr></table></figure><p>操作寄存器和内存地址</p><h3 id="求解器">求解器</h3><p>Simulation Managers用来管理状态，执行模拟和运行。控制一组state的符号执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simgr = proj.factory.simulation_manager(state) <span class="comment">#创建一个SM</span></span><br><span class="line">simgr.active <span class="comment">#查看SM状态</span></span><br></pre></td></tr></table></figure><p>不加state默认用入口点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">step() <span class="comment"># 执行一个基本块</span></span><br><span class="line">run() <span class="comment">#执行到结束</span></span><br></pre></td></tr></table></figure><h4 id="explore">explore</h4><p>用explore方法来探索路径</p><p>方法定义是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">explore</span>(<span class="params">self, stash=<span class="string">&#x27;active&#x27;</span>, n=<span class="literal">None</span>, find=<span class="literal">None</span>, avoid=<span class="literal">None</span>, find_stash=<span class="string">&#x27;found&#x27;</span>, avoid_stash=<span class="string">&#x27;avoid&#x27;</span>, cfg=<span class="literal">None</span>,num_find=<span class="number">1</span>, **kwargs</span>):</span><br><span class="line"><span class="comment"># find 表示目标地点</span></span><br><span class="line"><span class="comment"># avoid 表示不能到的地点</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simgr.explore(find=<span class="keyword">lambda</span> s: <span class="string">b&quot;Congrats&quot;</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 求解所有可以让标准输出输出b&quot;Congrats&quot;的路径</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = simgr.found[<span class="number">0</span>] <span class="comment">#取解</span></span><br><span class="line">flag = s.posix.dumps(<span class="number">0</span>) <span class="comment">#输出内容</span></span><br></pre></td></tr></table></figure><h3 id="求解引擎">求解引擎</h3><p>state.solver</p><p>位向量：比特序列，可以是值或者符号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">one = state.solver.BVV(<span class="number">1</span>, <span class="number">64</span>)</span><br><span class="line">one_hundred = state.solver.BVV(<span class="number">100</span>, <span class="number">64</span>)</span><br><span class="line">weird_nine = state.solver.BVV(<span class="number">9</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>weird_nine.zero_extend(<span class="number">64</span> - <span class="number">27</span>)</span><br><span class="line">&lt;BV64 <span class="number">0x9</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one + weird_nine.zero_extend(<span class="number">64</span> - <span class="number">27</span>)</span><br><span class="line">&lt;BV64 <span class="number">0xa</span>&gt;</span><br></pre></td></tr></table></figure><p>S带符号,用extend扩展长度</p><p>创建符号变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = state.solver.BVS(<span class="string">&quot;x&quot;</span>, <span class="number">64</span>)</span><br><span class="line">y = state.solver.BVS(<span class="string">&quot;y&quot;</span>, <span class="number">64</span>)</span><br></pre></td></tr></table></figure><p>可以直接运算得到AST抽象语法树，使用SMT求解器可以转化AST</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">state.solver.add(x &gt; y)</span><br><span class="line">state.solver.add(y &gt; <span class="number">2</span>)</span><br><span class="line">state.solver.add(<span class="number">10</span> &gt; x)</span><br><span class="line">state.solver.<span class="built_in">eval</span>(x)</span><br></pre></td></tr></table></figure><p>add用来添加约束，eval用来求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.satisfiable() <span class="comment">#解是否可行</span></span><br></pre></td></tr></table></figure><p>除了朴素的 eval ，angr 提供了多种解析方式 。</p><table><thead><tr><th>接口</th><th>描述</th></tr></thead><tbody><tr><td><code>solver.eval(expression)</code></td><td>将会解出一个可行解</td></tr><tr><td><code>solver.eval_one(expression)</code></td><td>将会给出一个表达式的可行解，若有多个可行解，则抛出异常</td></tr><tr><td><code>solver.eval_upto(expression, n)</code></td><td>将会给出最多n个可行解，如果不足n个就给出所有的可行解。</td></tr><tr><td><code>solver.eval_exact(expression, n)</code></td><td>将会给出n个可行解，如果解的个数不等于n个，将会抛出异常。</td></tr><tr><td><code>solver.min(expression)</code></td><td>给出最小可行解</td></tr><tr><td><code>solver.max(expression)</code></td><td>给出最大可行解</td></tr></tbody></table><p>同时可以设置 <code>extra_constraints</code> 和 <code>cast_to</code>参数对结果进行限制或转换。</p><hr><p><a href="https://xz.aliyun.com/t/7117?time__1311=n4%2BxnD0Dy737qY5ee05%2BbWDOQDCb8DcjxQTYID">angr 系列教程(一）核心概念及模块解读 - 先知社区 (aliyun.com)</a></p>]]></content>
    
    
    <summary type="html">还是逃不过angrQZQ</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="工具" scheme="https://www.pri87.vip/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>buuctf2024秋-RE复现</title>
    <link href="https://www.pri87.vip/posts/559c76ab.html"/>
    <id>https://www.pri87.vip/posts/559c76ab.html</id>
    <published>2024-08-24T17:58:32.000Z</published>
    <updated>2024-09-10T17:03:20.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MAZE">MAZE</h2><p>这个题比赛的时候没有做出来</p><p>这里重新分析一遍</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="built_in">strlen</span>(Str) )</span><br><span class="line">      print_wrong();</span><br><span class="line">    Sleep(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="keyword">switch</span> ( Str[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 % <span class="number">8</span> - <span class="number">1</span> &lt; <span class="number">0</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 - <span class="number">1</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          --v4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 % <span class="number">8</span> + <span class="number">1</span> &gt;= <span class="number">8</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 + <span class="number">1</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++v4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 - <span class="number">64</span> &lt; <span class="number">0</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 - <span class="number">64</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v4 -= <span class="number">64</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 % <span class="number">64</span> + <span class="number">8</span> &gt;= <span class="number">64</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 + <span class="number">8</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v4 += <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 + <span class="number">64</span> &gt;= <span class="number">512</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 + <span class="number">64</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v4 += <span class="number">64</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v4 % <span class="number">64</span> - <span class="number">8</span> &lt; <span class="number">0</span> )</span><br><span class="line">            print_wrong();</span><br><span class="line">          <span class="keyword">if</span> ( *((_BYTE *)off_7FF692C56200 + v4 - <span class="number">8</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v4 -= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        print_wrong();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">436</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>主函数的switch证明了这是一个迷宫题，有6个方向，可以看出offxxx是地图，根据方向可以对地图的加减可以看出是8*8*8的立体地图</p><p>每一个case里面，都有一个while，想要break必须off +xxx不为0，打开地图数组可以看到全是1和0，说明只有当这个方向的相邻格是1的时候才会停止。也就是说这个迷宫的移动不能在中间停止</p><p>最后，我们得到迷宫重点在436的位置（i,j,k）=(6,6,4)</p><p>画出地图</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">map = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, </span><br><span class="line"><span class="built_in">       1,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       1,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       </span></span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line"><span class="built_in">       0,</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>可得：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sduwandus</span></span><br></pre></td></tr></table></figure><p>检验后发现结果错误</p><p>于是尝试调试看看哪里有问题</p><p>先检查了一下反调试，发现有tls</p><p>打开</p><p>发现tls还原了一个函数，不知道这个函数在哪里调用的</p><p><img src="https://s2.loli.net/2024/08/24/btP6WvqIp5zZidB.png" alt="image-20240824223727101"></p><p>查找资料显示，这个函数的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( Context.Dr0 || Context.Dr1 || Context.Dr2 || Context.Dr3 )</span><br><span class="line">&#123;</span><br><span class="line">  CurrentProcess = GetCurrentProcess();</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(HANDLE, _QWORD))ProcAddress)(CurrentProcess, <span class="number">0</span>i64);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProcAddress为ZwTerminateProcess</p><p>检查了是否有断点寄存器的值，如果有就会直接退出</p><blockquote><p>DR0-DR3:存放断点寄存器<br>DR4-DR5:保留<br>DR6:状态寄存器</p><p><a href="https://blog.csdn.net/Rong_Toa/article/details/118557609">调试寄存器：Debug Register-CSDN博客</a></p></blockquote><p>同时调试到这里的时候会发现这个不是主线程，而是其它的线程</p><p>这个线程就会在这里一直循环来反调试</p><p>同时这里的i!=j也很奇怪不知道判断了什么，i是输入的第多少位</p><p>同时从下面得到了另一张地图map2_num</p><p>尝试nop掉反调再调一次</p><p>发现进入这个函数的时候已经要求输入了</p><p><img src="https://s2.loli.net/2024/08/24/kIlKUJcgrHAC8dZ.png" alt="image-20240824231847577"></p><p>于是查找交叉引用，发现__scrt_common_main_seh()中的</p><p>initterm_e((_PIFV *)&amp;First, (_PIFV *)&amp;Last)调用了这个函数</p><p>initterm_e遍历了地址从first到last执行了其中所有函数</p><p>似乎系统认为这个是初始化函数？？</p><p>这里一共有两个用户自定义的函数，第一个为第二个执行初始化，解密字符串</p><p><img src="https://s2.loli.net/2024/08/24/NuxvF3bQezlrfJK.png" alt="image-20240824234314235"></p><p>最后执行了ZwSetInformationThread函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NTSYSAPI NTSTATUS <span class="title function_">ZwSetInformationThread</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] HANDLE          ThreadHandle,</span></span><br><span class="line"><span class="params">  [in] THREADINFOCLASS ThreadInformationClass,</span></span><br><span class="line"><span class="params">  [in] PVOID           ThreadInformation,</span></span><br><span class="line"><span class="params">  [in] ULONG           ThreadInformationLength</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>这里第二个ThreadInformationClass传入的是17</p><p>对应的0x11标志是：ThreadHideFromDebugger</p><p>[<a href="https://bbs.kanxue.com/thread-249689.htm">原创]调试陷阱ThreadHideFromDebugger的另一种对抗方法-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p>根据这个文章，可以看到效果是使调试器接收不到调试信息<br>然后调试就会寄掉</p><p>这里只需要跳过最后一行代码即可进入main函数中，为了后面调试方便，继续patch</p><p>然后再回到主函数，if里面有个sleep感觉是为了每轮开始时给那个检查函数足够的时间去检查的</p><p>如果是地图有问题那么off指向的东西肯定会变，所以下一个硬件写入断点</p><p>第一个循环完，没有问题，但是到sleep(0x28)的时候，断点被写入，忽然跳到了第5个线程</p><p><img src="https://s2.loli.net/2024/08/25/JADyt2mG9YVSbdn.png" alt="image-20240825000637454"></p><p>这时因为sleep函数会将当前线程暂时挂起让cpu去执行其它线程</p><p>在这里它把qword数组的第-8位写入了v2</p><p><img src="https://s2.loli.net/2024/08/25/aOwyM87qhuj2fL5.png" alt="image-20240825000825078"></p><p>那么我们就知道，它在另外一个线程检查了一个东西，然后写入这一轮(按1个字符算一轮)的地图。判断依据是什么呢</p><p><img src="https://s2.loli.net/2024/08/25/DNwxstMihH7KEdW.png" alt="image-20240825001138474"></p><p>很明显这里写入的是v2的值，v2的值根据v1来变化，v1根据test_num来变化，同时也和i，j有关</p><p>testnum每次和1比较同时每次都会被v1赋值，也就是说每一轮的test_num都是上一轮的v1得到的，由于v1为局部变量，一开始为0，所以test_num一定会是1，2，1，2交替</p><p>打上断点<br>发现test_num它只在这里被赋值。</p><p>然后给i和j打断点</p><p>调试的时候发现，由于i一直在main里面增加，所以一旦到新的一轮，这里就会触发，让j++，然后修改v1，赋值</p><p>至此，它的逻辑应该是：第一轮用map1，第二轮用map2，第三轮用map1…</p><p>然后就直接写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">map1 = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">map2 = [</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_way</span>(<span class="params">a,b,c,num,max_num</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testc</span>():</span><br><span class="line">        ans = []</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">map</span>[a*<span class="number">64</span>+b*<span class="number">8</span>+i] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> i&lt; c-<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i+<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">                <span class="keyword">elif</span> i&gt;c+<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i-<span class="number">1</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, c</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, ans</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testb</span>():</span><br><span class="line">        ans = []</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">map</span>[a*<span class="number">64</span>+i*<span class="number">8</span>+c] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> i&lt; b-<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i+<span class="number">1</span>,<span class="string">&#x27;w&#x27;</span>])</span><br><span class="line">                <span class="keyword">elif</span> i&gt;b+<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i-<span class="number">1</span>,<span class="string">&#x27;s&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, b</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, ans</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testa</span>():</span><br><span class="line">        ans = []</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">map</span>[i*<span class="number">64</span>+b*<span class="number">8</span>+c] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> i&lt; a-<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i+<span class="number">1</span>,<span class="string">&#x27;n&#x27;</span>])</span><br><span class="line">                <span class="keyword">elif</span> i&gt;a+<span class="number">1</span>:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    ans.append([i-<span class="number">1</span>,<span class="string">&#x27;u&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, b</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, ans</span><br><span class="line">    <span class="keyword">if</span> num&gt;max_num:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>,<span class="number">0</span></span><br><span class="line">    way = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    pos = a*<span class="number">64</span>+b*<span class="number">8</span>+c</span><br><span class="line">    <span class="keyword">if</span> pos==<span class="number">436</span>:</span><br><span class="line">        <span class="keyword">return</span> way,<span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (num%<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">map</span>=map2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">map</span>=map1</span><br><span class="line">    test_c = testc()</span><br><span class="line">    test_a = testa()</span><br><span class="line">    test_b = testb()</span><br><span class="line">    <span class="keyword">if</span> test_c[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(test_c[<span class="number">1</span>])):</span><br><span class="line">            next_way =  find_way(a,b,test_c[<span class="number">1</span>][j][<span class="number">0</span>],num+<span class="number">1</span>,max_num) <span class="comment">#第一种情况</span></span><br><span class="line">            <span class="keyword">if</span> next_way[<span class="number">1</span>]:</span><br><span class="line">                way=test_c[<span class="number">1</span>][j][<span class="number">1</span>]+next_way[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">return</span> way,<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test_a[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(test_a[<span class="number">1</span>])):</span><br><span class="line">            next_way = find_way(test_a[<span class="number">1</span>][j][<span class="number">0</span>],b,c,num+<span class="number">1</span>,max_num)</span><br><span class="line">            <span class="keyword">if</span> next_way[<span class="number">1</span>]:</span><br><span class="line">                way = test_a[<span class="number">1</span>][j][<span class="number">1</span>]+next_way[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">return</span> way, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test_b[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(test_b[<span class="number">1</span>])):</span><br><span class="line">            next_way = find_way(a,test_b[<span class="number">1</span>][j][<span class="number">0</span>],c,num+<span class="number">1</span>,max_num)</span><br><span class="line">            <span class="keyword">if</span> next_way[<span class="number">1</span>]:</span><br><span class="line">                way = test_b[<span class="number">1</span>][j][<span class="number">1</span>]+next_way[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">return</span> way, <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> way, <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> max_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>,<span class="number">50</span>):</span><br><span class="line">    mstr = (find_way(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,max_num))[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> mstr!=<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(mstr)</span><br><span class="line">        <span class="built_in">hash</span> = hashlib.md5()</span><br><span class="line">        <span class="built_in">hash</span>.update(mstr.encode())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+<span class="built_in">hash</span>.hexdigest()+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">双被暴打了QAQ</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="算法" scheme="https://www.pri87.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="反调试" scheme="https://www.pri87.vip/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>win-段寄存器</title>
    <link href="https://www.pri87.vip/posts/3bf83b56.html"/>
    <id>https://www.pri87.vip/posts/3bf83b56.html</id>
    <published>2024-08-15T13:09:11.000Z</published>
    <updated>2024-09-10T16:52:01.185Z</updated>
    
    <content type="html"><![CDATA[<p>ES  CS SS DS FS GS LDTR TR</p><p>段寄存器长度：96位</p><p>实模式</p><p>实际地址=段地址左移4位+偏移量</p><p>eg:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>:[<span class="built_in">si</span>],<span class="built_in">ax</span></span><br><span class="line">等价</span><br><span class="line"><span class="keyword">mov</span> [<span class="built_in">ds</span>*<span class="number">16</span>+<span class="built_in">si</span>],<span class="built_in">ax</span></span><br></pre></td></tr></table></figure><p>保护模式：</p><p>保护模式下，cpu依旧通过短地址和偏移量寻址，但是段寄存器不直接保存偏移，下面是段寄存器在保护模式下的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegMent</span>//示意</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">WORD Selector;<span class="comment">//段选择子</span></span><br><span class="line">WORD Atrributes;<span class="comment">//属性</span></span><br><span class="line">DWORD Base;</span><br><span class="line">DWORD Limit;<span class="comment">//段界限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>段选择子：</p><p>002B：（前8位是0）00101  0  11</p><p>其中低2位为当前请求权限级别<code>RPL</code>：从r0到r3，其中CS寄存器的低2位存着cs中eip的偏移，即cs指向当前代码段，它的RPL被称为<code>CPL</code>，同理于指向堆栈的SS寄存器</p><p>第3位表示查询哪张表：一般有两张表：GDT和LDT表,0表示GDT，1表示LDT（LDT必须嵌套在GDT中，同时可以有多张LDT）</p><p>如果是1：会装载某一个ldt表，通过段选择子在gdt中找到ldt执行后续操作</p><p>前5位表示段描述符索引，指向GDT中存放段描述符的地址，即gdt[x],n为前五位的值，所以</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">段描述符位置 </span>=<span class="string"> gdt首地址 + x*8</span></span><br></pre></td></tr></table></figure><p>其中段描述符存放了除了段选择子之外的属性</p><p><img src="https://s2.loli.net/2024/06/03/RvPYDWao5EN7d2b.png" alt="image-20240603014954353"></p><p><img src="https://s2.loli.net/2024/06/03/p1tNuKkRPAUF4Ca.png" alt="image-20240603134721994"></p><p>其中：</p><p>绿色表示段基址<br>蓝色表示段界限<br>黄色表示段属性</p><p>段属性中，先看P,DPL,S,TYPE这几段</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">P占一位：</span><br><span class="line"><span class="attribute">P</span>=0 该段不在内存中</span><br><span class="line"><span class="attribute">P</span>=1 该段在内存中</span><br><span class="line">DPL占2位：</span><br><span class="line">表示特权等级0~3</span><br><span class="line"></span><br><span class="line">S占一位：</span><br><span class="line"><span class="attribute">S</span>=0 该段是系统段/门</span><br><span class="line"><span class="attribute">S</span>=1 该段是数据段或代码段</span><br><span class="line"></span><br><span class="line">TYPE占4位：</span><br><span class="line">如果<span class="attribute">S</span>=1</span><br><span class="line">4位分别为：执行位，一致/方向位，读写位，访问位</span><br><span class="line">执行位：为0表示这是数据段，为1表示是代码段（是否可执行）</span><br><span class="line">一致/方向位：执行位为1：为0表示普通段，为1表示一致代码段；执行位为0：为0表示向上增长，为1表示向下增长</span><br><span class="line">读写位：执行位为0：为1表示可读可写，为0表示可读；执行位为1：为1表示可读可执行，为0表示可执行</span><br><span class="line">访问位：为1表示已访问过，为0表示未访问过</span><br></pre></td></tr></table></figure><p>其中一致位表示是不是一致代码段。<br>这里需要先看一下这个定义：</p><blockquote><p>操作系统保护模式下把代码段分为一致代码段和非一致代码段的原因是：内核程序和用户程序要分开，内核程序不能被用户程序干扰。但是有时候用户程序也需要读取内核的某些数据，于是操作系统就从内核程序中分配一些可以供用户程序访问的段，但是不允许用户程序写入数据，用户程序访问这些段时遵循以下规则：</p><ol><li>内核程序不知道用户程序的数据，不调用用户程序的数据，也不转移到用户程序中来</li><li>用户程序只能访问到内核的某些共享段，这些段称为<code>一致代码段</code></li><li>用户程序不能访问内核不共享的段</li></ol></blockquote><p>所以一致代码段就是操作系统内核拿出来的共享段：</p><p>性质是</p><blockquote><ol><li>特权级高的程序不允许访问特权级低的数据：即内核态不允许调用用户态的数据。</li><li>特权级低的程序可以访问到特权级高的程序，但是特权级不会改变，即不会从用户态切换到内核态。</li></ol></blockquote><p>所以如果是低特权级到高特权级，可以直接访问，且权限不变，如果是高特权级到低特权级，触发常规保护错误。</p><p>非一致代码段：为了避免低特权级的访问而被操作系统保护起来的系统代码</p><p>性质是</p><blockquote><ol><li>只允许同特权级访问。</li><li>绝对禁止不同特权级直接访问：内核态不去用户态，用户态也不使用内核态。</li><li>通常低特权级代码必须通过<code>门调用</code>来实现对高特权级代码段的访问和调用。</li></ol></blockquote><p>所以如果特权级不相等，触发常规保护错误</p><p>这里的特权等级检测是根据DPL和CPL的值来判断的</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DPL&gt;<span class="operator">=</span>CPL  </span><br><span class="line">可以进入一致代码段</span><br><span class="line"></span><br><span class="line"><span class="attribute">DPL</span><span class="operator">=</span><span class="operator">=</span>CPL and RPL&lt;<span class="operator">=</span>DPL</span><br><span class="line">可以进入普通代码段/非一致代码段</span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">如果S=<span class="number">0</span>，系统段</span><br><span class="line">TYPE只定义了<span class="number">12</span>个值</span><br><span class="line"><span class="number">0x1</span> 可用286TSS</span><br><span class="line"><span class="number">0x2</span> 该段存储了LDT（局部描述符表）</span><br><span class="line"><span class="number">0x3</span> 忙286TSS</span><br><span class="line"><span class="number">0x4</span> <span class="number">286</span>调用门</span><br><span class="line"><span class="number">0x5</span> 任务门</span><br><span class="line"><span class="number">0x6</span> <span class="number">286</span>中断门</span><br><span class="line"><span class="number">0x7</span> <span class="number">286</span>陷阱门</span><br><span class="line"><span class="number">0x8</span> </span><br><span class="line"><span class="number">0x9</span> 可用386TSS</span><br><span class="line"><span class="number">0xa</span> </span><br><span class="line"><span class="number">0xb</span> 忙386TSS</span><br><span class="line"><span class="number">0xc</span> <span class="number">386</span>调用门</span><br><span class="line"><span class="number">0xd</span> </span><br><span class="line"><span class="number">0xe</span> <span class="number">386</span>中断门</span><br><span class="line"><span class="number">0xf</span> <span class="number">386</span>陷阱门</span><br></pre></td></tr></table></figure><p>另外4个属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AVL 占<span class="number">1</span>位</span><br><span class="line">无定义</span><br><span class="line">L 占<span class="number">1</span>位</span><br><span class="line">如果代码段是<span class="number">64</span>位，为<span class="number">1</span>（此时D为<span class="number">0</span>），否则<span class="number">0</span></span><br><span class="line">D/<span class="selector-tag">B</span> 占<span class="number">1</span>位</span><br><span class="line">如果对应代码段D：这是<span class="number">32</span>位代码段为<span class="number">1</span>，否则为<span class="number">16</span>位代码段为<span class="number">0</span></span><br><span class="line">如果对应栈段<span class="selector-tag">B</span>：是被SS寄存器指向的数据段</span><br><span class="line">为<span class="number">1</span>：采用<span class="number">32</span>位栈指针寄存器，否则为<span class="number">0</span>，采用<span class="number">16</span>位栈指针寄存器</span><br><span class="line">如果对应向下扩展的数据段<span class="selector-tag">B</span>：</span><br><span class="line">为<span class="number">1</span>：段的上界为<span class="number">4</span>GB，为<span class="number">0</span>：上界为<span class="number">64</span>KB</span><br><span class="line">G 占一位</span><br><span class="line">为<span class="number">0</span>：段界限粒度（单位）为字节，为<span class="number">1</span>：段界限单位为<span class="number">4</span>KB</span><br></pre></td></tr></table></figure><p>那么又有一个问题：</p><p>为什么段寄存器一共有96位，这里不是一共才64（段描述符）+16（段选择子）=80位吗</p><p>这里会发现：段描述符中的limit段是3字节，最大值为ffffff，又有G可以表示最大单位为4KB,再加属性里面的保留的一（十六进制）位空位<br>(ffffff-1)*4096=ffffffff<br>(8+4)x4+8x4+16=96</p><p>这个不像数组，界限为FFFFFFFF那么它可以取到0~FFFFFFFF</p><p>参考资料</p><p><a href="https://blog.csdn.net/linuxheik/article/details/7542320">RPL保存在选择子里，那么CPL是保存在哪里的_cpl 在哪里-CSDN博客</a></p><p><a href="https://blog.csdn.net/abc123lzf/article/details/109289567">x86保护模式——全局描述符表GDT详解_gdt全局描述符表 作用-CSDN博客</a></p><h2 id="段选择器成员">段选择器成员</h2><p><img src="https://s2.loli.net/2024/06/18/g6plXIqAvzMOa2h.png" alt="image-20240618175919652"></p><p>FS地址不一定和图中相同</p><p>通过以下代码查看对应段寄存器的读写属性</p><p>（由于）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> var = <span class="number">0</span>;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax, ss;</span><br><span class="line">mov ds, ax;</span><br><span class="line">mov edx, <span class="number">1</span>;</span><br><span class="line">mov dword ptr ds : [var] , edx;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; var;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序可以通过，且表明了ss可读，ds可写的属性</p><p>将其换为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> var = <span class="number">0</span>;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax, cs;</span><br><span class="line">mov ds, ax;</span><br><span class="line">mov edx, <span class="number">1</span>;</span><br><span class="line">mov dword ptr ds : [var] , edx;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; var;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现调试状态可以执行，直接运行会在输出时报错</p><p>关于为什么不能直接用立即数给段寄存器赋值：</p><p>网上的解释：</p><p><a href="https://bbs.csdn.net/topics/340215235">为什么立即数不能直接赋给段寄存器-CSDN社区</a></p><p>不懂QAQ</p><hr><p>在线程和进程不改变时，在写之后的读不会读gdt，在手工修改进程线程时，会读一次gdt</p>]]></content>
    
    
    <summary type="html">只是笔记</summary>
    
    
    
    <category term="Win核心" scheme="https://www.pri87.vip/categories/Win%E6%A0%B8%E5%BF%83/"/>
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/Win%E6%A0%B8%E5%BF%83/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="段" scheme="https://www.pri87.vip/tags/%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>win-虚拟内存</title>
    <link href="https://www.pri87.vip/posts/c53724db.html"/>
    <id>https://www.pri87.vip/posts/c53724db.html</id>
    <published>2024-08-15T09:53:41.000Z</published>
    <updated>2024-09-10T16:52:02.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="虚拟内存">虚拟内存</h2><h3 id="物理寻址和虚拟寻址">物理寻址和虚拟寻址</h3><p>把物理内存分为M个连续的字节数组。分别标号为0,1,2…这就是物理地址。</p><p>CPU直接查找对应的物理地址来查找信息就是<code>物理寻址</code>。CPU直接对内存总线发送地址然后主存接收到以后返回内容给CPU，并放在寄存器里。</p><p>现在，CPU一般先生成一个虚拟地址，然后将虚拟地址发送给MMU(内存管理单元)翻译成物理地址，这时才发送给主存，它再返回地址中的内容。这叫<code>虚拟寻址</code></p><blockquote><p>简要地址翻译流程：</p><p>在内存中存放了一个查询表（称为页表），MMU通过读取查询表来动态翻译虚拟地址，表的内容由操作系统管理。（一般情况下，第一级页表就在MMU中，被称为TLB，这样速度更快）</p></blockquote><hr><h3 id="地址空间">地址空间</h3><p>一个非负整数地址的有序集合。意思是：用自然数从0开始依次为一个地方编号，得到的数的有序集合就是<code>地址空间</code>。如果这个地址空间的元素是连续的整数，就称它为<code>线性地址空间</code>。</p><p>现在，CPU通过映射n比特位得到了$2^n$个地址编号，形成的线性地址空间的大小是$2^n$。记作$N = 2^n$，最小地址是0，最大地址是$N-1$。这样形成的地址空间被叫做<code>n位地址空间</code>。它表示虚拟内存，现在的32位系统/64位系统即是这个意思。</p><p>内存也有一个空间，它是物理存在的。它的大小记作M，不要求一定为2的幂次。</p><hr><h3 id="页">页</h3><p>我们已经知道是从虚拟地址到物理地址的映射了，页的实现就是映射实现的具体方式。</p><p>为了让虚拟内存中的地址可以顺利转换到物理地址，我们规定每4KB长度的地址称为一个<code>页</code>，和地址一样，分为虚拟页和物理页(物理页又称为页帧)。虚拟页面的集合为{未分配的页，已缓存的页，未缓存的页}，后两项统称已分配的页。我们把一个虚拟也的大小称为$P=2^p$</p><p>而映射的基本单位就是一个页。也就是说，一个进程在内存中是被划分为n页分开存放的（也可以挨在一起）</p><blockquote><p>缓存表示已经分配到物理内存中，而未缓存表示在其它存储介质中，比如硬盘。如果系统查询页时发现是未缓存页，这称为未命中(缺页)，然后要把那个页和内存中的一个物理页交换以访问它</p></blockquote><h3 id="页表">页表</h3><p>系统为了查询哪些页是已经分配的，哪些页是没有缓存的，以及页缓存在哪里等信息，同硬件/软件一起在内存中维护了一张页表。每个页表都是一个页表条目(PTE)数组</p><p>页表中每一个虚拟地址都对应了一个物理地址，也可能对应其它硬件，比如磁盘的某个位置。同时设置了一些标志来判断部分情况(比如可能0表示没有映射)</p><h3 id="缺页">缺页</h3><p>如果cpu查询页表发现它是一个未缓存页，就会引发一个<code>缺页异常</code>，从而进入内核态执行以下操作：</p><ul><li>选择一个页表中查询次数最少的页作为牺牲页</li><li>如果它被修改了，那么写回磁盘</li><li>将这次查询的物理页写到牺牲页对应的物理页中</li><li>刷新页表，然后可以继续访问</li></ul><hr><h3 id="内存管理">内存管理</h3><p>实际上，操作系统并不是只维护一张页表，而是对于每个进程都维护一张页表，每个的大小也都是4KB，从而形成了每个进程的独立虚拟地址空间。这样，每个程序的EP可以都是0x400000，而不用担心相互影响。</p><p><img src="https://s2.loli.net/2024/08/15/oDiGwUxSMshrFgl.png" alt="image-20240815201626132"></p><h3 id="内存保护">内存保护</h3><p>页表中有访问权限的标志位可以控制对对应页的访问，综合段寄存器，实现对段页权限的划分，提供安全等级</p><hr><h3 id="地址翻译">地址翻译</h3><p>在这里说明虚拟地址转为物理地址的流程</p><p>任何虚拟地址都由两部分组成(物理地址也是)：</p><p>虚拟页号和页偏移，长度分别为n-p-1和p-1</p><p>转换时，只转换虚拟页号，转为物理地址后+页偏移就得到真实的物理地址</p><p><img src="https://s2.loli.net/2024/08/15/MCLDWKaB5ghyHXV.png" alt="image-20240815202956150"></p><p>正如上面讲的，为了减少时间消耗，MMU中有一个翻译后备缓冲器TLB，它是一个物理设备，每一行都有一个由单个PTE组成的块，它可以直接被cpu查询</p><p><img src="https://s2.loli.net/2024/08/15/IkMBq6neoRvNSdj.png" alt="image-20240815203950975"></p><h3 id="多级页表">多级页表</h3><p>很明显，如果是32位系统，由于一个程序就有一个4MB的页表（一个页表项需要4字节，有4GB/4KB=$2^{20}$项），如果开了50个进程，就有200MB大小的空间，这显然是不能忍受的。</p><p>于是，使用多级页表可以实现压缩内存。首先：第一级页表在内存中，最常用的在TLB中，检索地址时，先检索TLB，如果没有，再检索内存，然后转到二级页表，被称为片(chunk)。再在片中查找基址再转到虚拟内存。</p><p>如果第一级页表不存在对应PTE，第二级页表页不会存在。<br>第二级页表不一定在内存中，只有最常用的才在。</p><p>这样就减轻了内存的负担。</p><p>实际上，使用的层级还更多</p><hr><p>参考：</p><p>书籍：深入理解计算机系统</p><p>网站：</p><p><a href="https://www.bilibili.com/read/cv16655753/">一篇文带你搞懂，虚拟内存、内存分页、分段、段页式内存管理（超详细）</a></p><p><a href="https://www.bilibili.com/video/BV1AU411o7GY/">你真的理解虚拟内存吗</a></p><p><a href="https://blog.csdn.net/weixin_65286359/article/details/135577694">CPU入门扫盲篇之MMU内存管理单元------万字长文带你搞定MMU&amp;TLB&amp;TWU</a></p>]]></content>
    
    
    <summary type="html">写着win，实际上是linuxQAQ</summary>
    
    
    
    <category term="Win核心" scheme="https://www.pri87.vip/categories/Win%E6%A0%B8%E5%BF%83/"/>
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/Win%E6%A0%B8%E5%BF%83/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="内存" scheme="https://www.pri87.vip/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>父子进程反调试</title>
    <link href="https://www.pri87.vip/posts/3f67770.html"/>
    <id>https://www.pri87.vip/posts/3f67770.html</id>
    <published>2024-08-06T12:20:43.000Z</published>
    <updated>2024-08-06T14:14:59.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>顾名思义，如果一个进程创建出了另一个进程</p><p>然后用第一个进程（父）去调试第二个进程（子）</p><p>子进程由于已经被调试，所以不能再被调试器附加，从而防止了真实逻辑被调试</p><p>这里引申出几个议题：</p><blockquote><p>如何创建另一个进程（子进程的来源）</p><ul><li>另一个可执行程序</li><li>就是本身</li><li>一段内存中的代码</li></ul><p>从上又分出几个问题</p><ul><li>创建另一个可执行程序（已经存在的，还是在代码里面需要dump或者从网上下载）</li><li>本身（如何区分两次执行的逻辑流）</li><li>一段内存中的代码（CreateProcess很明显不支持，那要怎么办）</li></ul></blockquote><p>第二：</p><blockquote><p>如何用父进程调试子进程</p><p>在win API中有CreateProcess的第6个参数可以选择父进程作为调试器。</p><p>然后通过API中其它函数来接受调试信息以及读取/修改子进程的上下文/寄存器/执行流。</p><p>有没有其它办法不知道</p></blockquote><p>第三：</p><blockquote><p>执行完如何返回内容/结果</p><p>同样在win API中有函数OutputDebugString来输出调试信息</p></blockquote><p>现在以创建自身为新进程来解释</p><hr><h2 id="区分逻辑流的方法">区分逻辑流的方法</h2><p>区分逻辑流，表明为需要一个if-else分支语句来执行不同的代码</p><p>因此</p><ul><li>if中写一样的内容，但是可能返回不同的东西</li><li>在执行第一个逻辑时修改了本身，导致执行流的改变</li></ul><p>对于第一种情况</p><ul><li>检查自身的状态，两次的状态不一致</li><li>检查外界的状态，通过本身在外界的注册内容来判断</li></ul><p>常见标志位<br>系统函数</p><p>这些内容还没怎么学QAQ</p><p>我只知道绑定端口和创建互斥体两个函数，这两个函数只要指定了id，只要第一次返回可行，第二次一定失败。借这个来直接区分逻辑流，至于使用它们，自然不重要</p><p>还有就是创建进程时可以指定参数，参数数量也可以算作不同的内容</p><hr><h2 id="调试方法">调试方法</h2><p>首先CreateProcess，并设置DEBUG_PROCESS</p><p>然后WaitForDebugEvent等待并读取调试信息</p><p>然后用得到的debugEvent.dwDebugEventCode来判断类型</p><p>比如：EXCEPTION_DEBUG_EVENT（int 3断点）</p><p>然后就可以用WriteProcessMemory写入内存，其它的像获取rip，stack之类的就不说了</p><p>最后ContinueDebugEvent继续执行流程</p><p>这里只是大概说个流程</p>]]></content>
    
    
    <summary type="html">我创建我自己</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="反调试" scheme="https://www.pri87.vip/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>TLS相关研究</title>
    <link href="https://www.pri87.vip/posts/95e9e72b.html"/>
    <id>https://www.pri87.vip/posts/95e9e72b.html</id>
    <published>2024-08-06T10:44:01.000Z</published>
    <updated>2024-08-06T13:13:00.792Z</updated>
    
    <content type="html"><![CDATA[<p>经常能看到有tls的题，这里研究一下tls的原理和写法</p><p>然后就发现网上已经有很全的教程了，那我就直接放教程了</p><p><a href="https://www.52pojie.cn/thread-1490663-1-1.html">【原创】反调试实战系列二 TLS反调试+CheckRemoteDebuggerPresent原理 - 『软件调试区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h3 id="写法">写法</h3><p>这个说的很清楚，要写TLS函数，只需要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含回调</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64       <span class="comment">//64位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_used&quot;</span>)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span>               <span class="comment">//32位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//创建段</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">EXTERN_C <span class="type">const</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="comment">//是c语言就不写</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前缀表示这是线程的全局变量，每个线程初始化的值都是0x1，生命仅在这个线程内</span></span><br><span class="line">__declspec (thread) <span class="type">int</span> CheckIsChildren = <span class="number">0x1</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">t_TlsCallBack</span><span class="params">(PVOID Dllhandle, DWORD Reason, PVOID Reserved)</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加函数到数组，执行时按数组元素依次执行</span></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; t_TlsCallBack ,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后就是：</p><h3 id="reason">reason</h3><p>Reason值对应4种调用原因，在这四个条件下，都会触发TLS回调函数</p><table><thead><tr><th style="text-align:left">宏定义</th><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">DLL_PROCESS_ATTACH</td><td style="text-align:left">1</td><td style="text-align:left">一个新进程已经启动，包括第一个线程</td></tr><tr><td style="text-align:left">DLL_THREAD_ATTACH</td><td style="text-align:left">2</td><td style="text-align:left">创建了一个新线程。此通知已发送给除第一个线程外的所有线程</td></tr><tr><td style="text-align:left">DLL_THREAD_DETACH</td><td style="text-align:left">3</td><td style="text-align:left">线程即将被终止。此通知已发送给除第一个线程外的所有线程</td></tr><tr><td style="text-align:left">DLL_PROCESS_DETACH</td><td style="text-align:left">0</td><td style="text-align:left">进程即将终止，包括原始线程</td></tr></tbody></table><p>所以内部应当使用if来判断（或者没有创建线程，就不管了）</p><h3 id="提示">提示</h3><ul><li>在使用CreateThread后记得WaitForSingleObject防止主线程提前结束</li><li>tls声明的变量是在每个线程里面分离的，互不影响，类似于静态局部变量？？</li></ul><hr><p>相关代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//包含回调</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64       <span class="comment">//64位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:_tls_used&quot;</span>)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span>               <span class="comment">//32位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//创建段</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">EXTERN_C <span class="type">const</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">__declspec (thread) <span class="type">int</span> CheckIsChildren = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* szMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hStdout = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line"><span class="built_in">WriteConsoleA</span>(hStdout, szMsg, <span class="built_in">strlen</span>(szMsg), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">t_TlsCallBack</span><span class="params">(PVOID Dllhandle, DWORD Reason, PVOID Reserved)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">CheckIsChildren--;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;loaded\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">2</span>) &#123;</span><br><span class="line">CheckIsChildren += <span class="number">7</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;this is %d\n&quot;</span>, CheckIsChildren);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;exit thread %d\n&quot;</span>, CheckIsChildren);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">char</span> szMsg[<span class="number">80</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="built_in">wsprintfA</span>(szMsg, <span class="string">&quot;%d&quot;</span>, CheckIsChildren);</span><br><span class="line"><span class="built_in">print</span>(szMsg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; t_TlsCallBack ,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">MyThreadFunction</span><span class="params">(LPVOID lpParam)</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Thread running with value: &quot;</span> &lt;&lt; CheckIsChildren &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;why dont play\n&quot;</span>;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (CheckIsChildren == <span class="number">0</span>) &#123;</span><br><span class="line">CheckIsChildren += <span class="number">2</span>;</span><br><span class="line">std::cout &lt;&lt; CheckIsChildren &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">PROCESS_INFORMATION ProInfo;</span><br><span class="line">STARTUPINFO StartInfo;</span><br><span class="line"><span class="built_in">ZeroMemory</span>(&amp;StartInfo, <span class="built_in">sizeof</span>(StartInfo));</span><br><span class="line">TCHAR ModulePath[<span class="number">100</span>] = &#123;&#125;;</span><br><span class="line"><span class="built_in">GetModuleFileName</span>(<span class="literal">NULL</span>, ModulePath, <span class="number">100</span>);</span><br><span class="line"><span class="type">int</span> input = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*CreateProcess(NULL,</span></span><br><span class="line"><span class="comment">ModulePath,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">TRUE,</span></span><br><span class="line"><span class="comment">DEBUG_PROCESS,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">NULL,</span></span><br><span class="line"><span class="comment">&amp;StartInfo,</span></span><br><span class="line"><span class="comment">&amp;ProInfo);</span></span><br><span class="line"><span class="comment">WaitForSingleObject(ProInfo.hProcess, INFINITE);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CloseHandle(ProInfo.hProcess);</span></span><br><span class="line"><span class="comment">CloseHandle(ProInfo.hThread);</span></span><br><span class="line"><span class="comment">printf(&quot;\nfinished\n&quot;);*/</span></span><br><span class="line">DWORD threadId;</span><br><span class="line">HANDLE hThread = <span class="built_in">CreateThread</span>(</span><br><span class="line"><span class="literal">NULL</span>,                   <span class="comment">// 默认安全属性</span></span><br><span class="line"><span class="number">0</span>,                      <span class="comment">// 默认堆栈大小</span></span><br><span class="line">MyThreadFunction,       <span class="comment">// 线程函数</span></span><br><span class="line">&amp;input,                 <span class="comment">// 传递给线程函数的参数</span></span><br><span class="line"><span class="number">0</span>,                      <span class="comment">// 默认创建标志</span></span><br><span class="line">&amp;threadId               <span class="comment">// 返回线程ID</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//Sleep(1000);</span></span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;NO!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;yes,yes,yes&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">TLS</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="反调试" scheme="https://www.pri87.vip/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>web入门</title>
    <link href="https://www.pri87.vip/posts/f3edc96d.html"/>
    <id>https://www.pri87.vip/posts/f3edc96d.html</id>
    <published>2024-08-05T15:02:48.000Z</published>
    <updated>2024-09-10T16:54:21.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开发者工具打开方式">开发者工具打开方式</h3><ul><li>F12/command option I<br>ctrl shift I</li><li>右上角更多，开发人员工具</li><li>右键页面，检查</li></ul><h3 id="Burpsuit使用场景">Burpsuit使用场景</h3><h4 id="抓包">抓包</h4><p>在服务器和客户端之间放一个中间人，两边只和中间人相联系，通过中间人，我们可以看到两边交互的数据以及修改它们</p><h4 id="重放">重放</h4><p>发送到重放，我们可以修改内容然后再发送</p><h4 id="爆破">爆破</h4><p>发送到爆破，遍历一些内容并发送，实现爆破攻击得到想要的东西</p><h4 id="编码解码">编码解码</h4><p>得到的响应包可能是编码后的内容，使用解码来查看生字符，或者把信息编码后发送</p><h3 id="http">http</h3><p>客户端/服务端：前者是请求内容的，后者是计算并提供内容的</p><p>请求包/相应包：客户端发给服务端的包，服务端响应客户端返回的包</p><h4 id="请求包-相应包格式">请求包/相应包格式</h4><h5 id="请求行">请求行</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span> /?wllm=<span class="number">2</span>%<span class="number">27</span>% HTTP/<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>作用</th></tr></thead><tbody><tr><td>请求方法</td><td>说明是get还是post</td></tr><tr><td>URL字段</td><td>如果是get就会有get内容的具体说明</td></tr><tr><td>HTTP版本协议</td><td>1.1或1.0</td></tr></tbody></table><h5 id="请求头">请求头</h5><p><a href="https://blog.csdn.net/qq_42684504/article/details/106634035">HTTP 请求头各参数具体含义_请求头的参数详解-CSDN博客</a></p><h5 id="空行">空行</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>用于分隔请求头和数据</p><h5 id="请求数据">请求数据</h5><p>如果是GET，则为空行，如果是POST，则是xxx=xxx&amp;xxx=xxx形式的变量及值</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">params<span class="operator">=</span>BbITMWZukVrbpcvF<span class="number">9E9</span>subK<span class="number">2</span><span class="keyword">c</span><span class="number">4</span>G<span class="number">5</span>qLX<span class="number">0</span>zQfWyh<span class="number">3</span>TukD<span class="number">43</span>kI<span class="variable">%2</span>BdaOFlA<span class="number">9</span>rOJTasxuH<span class="number">9</span>cRGzv<span class="number">8</span>A<span class="variable">%2</span>BTuJIi<span class="variable">%2</span>Fq<span class="number">6</span>QDciuadCEJ<span class="number">1</span>ppF<span class="number">6</span>eP<span class="number">8</span>k<span class="number">2</span>wR<span class="variable">%2</span>FkQiZnohRO&amp;encSecKey<span class="operator">=</span>decd<span class="number">4703</span>eddd<span class="number">42253</span>cb<span class="number">59259</span><span class="keyword">c</span><span class="number">60</span>f<span class="number">689869</span>cb<span class="number">6</span>df<span class="number">59</span>b<span class="number">7</span>ab<span class="number">906917</span>f<span class="number">23</span>b<span class="number">76</span>eb<span class="number">2</span>d<span class="number">5393</span>b<span class="number">40e1</span>bbd<span class="number">0</span>b<span class="number">697700288149</span>d<span class="number">4</span>ca<span class="number">398</span>a<span class="number">8</span><span class="keyword">c</span><span class="number">20</span>f<span class="number">000</span><span class="keyword">cc</span><span class="number">3</span>f<span class="number">47452984</span>d<span class="number">6665</span><span class="keyword">c</span><span class="number">5183</span><span class="keyword">c</span><span class="number">1330729</span>fed<span class="number">3</span>d<span class="number">63e4011495</span>f<span class="number">3</span>cee<span class="number">6</span>ff<span class="number">4e29</span>d</span><br></pre></td></tr></table></figure><h4 id="响应码">响应码</h4><p><a href="https://www.runoob.com/http/http-status-codes.html">HTTP 状态码 | 菜鸟教程 (runoob.com)</a></p><h4 id="robot-txt">robot.txt</h4><p>如果网站根目录有这个文件，合法的爬虫爬取时就会依照这个文件的要求去(不)爬取相应的文件</p><p>格式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">User-agent</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Allow</span><span class="punctuation">: </span>/</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">User-agent</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Disallow</span><span class="punctuation">: </span>/</span><br></pre></td></tr></table></figure><p>User-agent用于表明自己的身份或区分用途</p><p>比如：Googlebot，Googlebot-Image，Storebot-Google，Bingbot等</p><p>Disallow用于写入不允许访问的目录或文件，似乎支持正则表达式</p><p>Allow用于只能访问对应的目录或文件，似乎支持正则表达式。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Disallow: /blog Allow: /blog/allowed-post</span><br></pre></td></tr></table></figure><p>只允许访问allowed-post，而同目录下其它的不能访问</p><h2 id="WP">WP</h2><h3 id="gift-F12">gift_F12</h3><p>根据提示，f12打开开发者模式，找到源码，发现flag：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">WLLMCTF</span><span class="template-variable">&#123;We1c0me_t0_WLLMCTF_Th1s_1s_th3_G1ft&#125;</span></span><br></pre></td></tr></table></figure><h3 id="get-post">get_post</h3><p>发送get和post请求即可</p><h3 id="Do-you-know-HTTP">Do you know HTTP</h3><p>根据要求修改请求头</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HS</span> / HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: node5.anna.nssctf.cn:<span class="number">22621</span></span><br><span class="line"><span class="attribute">Gecko</span>/<span class="number">20100101</span> Firefox/<span class="number">115</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0</span>.<span class="number">9</span>,image/avif,image/jxl,image/webp,*/*;q=<span class="number">0</span>.<span class="number">8</span></span><br><span class="line"><span class="attribute">Accept</span>-Language: zh-CN,zh;q=<span class="number">0</span>.<span class="number">8</span>,zh-TW;q=<span class="number">0</span>.<span class="number">7</span>,zh-HK;q=<span class="number">0</span>.<span class="number">5</span>,en-US;q=<span class="number">0</span>.<span class="number">3</span>,en;q=<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">Accept</span>-Encoding: gzip, deflate, br</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Upgrade</span>-Insecure-Requests: <span class="number">1</span></span><br><span class="line"><span class="attribute">X</span>-Forwarded-For: <span class="number">127.0.0.1</span></span><br><span class="line"><span class="attribute">Referer</span>: www.ltyyds.com</span><br><span class="line"><span class="attribute">User</span>-Agent: LT</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一开始被坑了，在最后放了一个User-Agent: LT不知道为什么出不来，结果发现在上面还有一个User-Agent，删了就出了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;e6688e51-abc6-<span class="number">4943</span>-b819-<span class="number">3</span>e4d967c9457&#125;</span><br></pre></td></tr></table></figure><h3 id="robots">robots</h3><p>不知道为什么场景启动不了</p><p>没写</p><h3 id="ctfhub-web前置-http">ctfhub-web前置-http</h3><h4 id="请求方式">请求方式</h4><p>直接修改请求方式为CTFHUB</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ctfhub</span>&#123;<span class="number">0</span>a211e2f0ed998f0bb25c674&#125; </span><br></pre></td></tr></table></figure><h4 id="302跳转">302跳转</h4><p>好怪，跟着wp做出来了</p><p>但是还是不理解为什么重放（重放有自动拦截功能，可以点击跟随重定向得到重定向后的内容）一遍就好了，发送的包都是一样的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ctfhub</span>&#123;<span class="number">1</span>b0aee8a83c3e0d0322ce749&#125;</span><br></pre></td></tr></table></figure><h4 id="Cookie">Cookie</h4><p>在请求头中把admin改成1</p><h4 id="基础认证">基础认证</h4><p>先抓包，发现一串base64，解码后发现是用户名:密码</p><p>好像给了一些能爆破的密码，但是不知道用户名，先猜一个admin</p><p>然后在intruder里面</p><p><img src="https://s2.loli.net/2024/07/26/wyDjHabJuh783ek.png" alt="image-20240726164807767"></p><p>这样开始爆破</p><p>没出来，难受。去网上看wp，它们说要把下面的payloadURL编码去掉，然后就对了，不理解</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">YWRtaW46bXVzdGFuZw</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line">ctfhub&#123;<span class="number">6</span>fd9a3602ed44a12e16ba9eb&#125;</span><br></pre></td></tr></table></figure><h4 id="相应包源代码">相应包源代码</h4><p>点击按钮，没用拦到信息，所以应该是发了一个代码过来</p><p>f12看源代码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfhub&#123;<span class="number">669</span><span class="keyword">c</span><span class="number">2</span>d<span class="number">83e81</span><span class="keyword">c</span><span class="number">22</span><span class="keyword">c</span><span class="number">497</span>bece<span class="number">5</span>b&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">水一点web基础，，不然显得我什么都没干</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="web" scheme="https://www.pri87.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>暑假学习记录2</title>
    <link href="https://www.pri87.vip/posts/d7a4634e.html"/>
    <id>https://www.pri87.vip/posts/d7a4634e.html</id>
    <published>2024-08-05T13:13:38.000Z</published>
    <updated>2024-08-06T14:23:29.536Z</updated>
    
    <content type="html"><![CDATA[<div class="note info simple"><p>目录：</p><p><a href="https://www.pri87.vip/posts/4ead32f4.html">学习记录1</a></p><p><a href="https://www.pri87.vip/posts/d7a4634e.html">学习记录2</a> &lt;=</p></div><p>还是差不多，没写什么东西，也没学多少</p><hr><h2 id="wp">wp:</h2><h3 id="crackme-100">crackme-100</h3><p>在学互斥体的时候看到的一个crackme</p><p>一进main函数看到了不能被解析的内容</p><p><img src="https://s2.loli.net/2024/08/05/SvDRnMdlOagCbrT.png" alt="img"></p><p>不敢乱动，还是直接看汇编吧</p><p>这里的汇编是判断了两次长度，然后进入了一个函数检查,这个是第一个地方</p><p>进去看看</p><p><img src="https://s2.loli.net/2024/08/05/Skv5cEfN1K8rMx4.png" alt="img"></p><p>函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __thiscall <span class="title function_">sub_401180</span><span class="params">(<span class="type">char</span> *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  LPWSTR CommandLineW; <span class="comment">// eax</span></span><br><span class="line">  LPWSTR v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  LPWSTR v6; <span class="comment">// edi</span></span><br><span class="line">  WCHAR v7; <span class="comment">// cx</span></span><br><span class="line">  _BYTE *v8; <span class="comment">// edi</span></span><br><span class="line">  __int16 v9; <span class="comment">// ax</span></span><br><span class="line">  <span class="type">char</span> *v10; <span class="comment">// eax</span></span><br><span class="line">  __int16 v11; <span class="comment">// cx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// eax</span></span><br><span class="line">  _WORD *v13; <span class="comment">// edi</span></span><br><span class="line">  __int16 v14; <span class="comment">// cx</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span> <span class="title">ProcessInformation</span>;</span> <span class="comment">// [esp+10h] [ebp-11A8h] BYREF</span></span><br><span class="line">  SIZE_T NumberOfBytesRead; <span class="comment">// [esp+20h] [ebp-1198h] BYREF</span></span><br><span class="line">  SIZE_T NumberOfBytesWritten; <span class="comment">// [esp+24h] [ebp-1194h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFOW</span> <span class="title">StartupInfo</span>;</span> <span class="comment">// [esp+28h] [ebp-1190h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">DEBUG_EVENT</span> <span class="title">DebugEvent</span>;</span> <span class="comment">// [esp+70h] [ebp-1148h] BYREF</span></span><br><span class="line">  CONTEXT Context; <span class="comment">// [esp+D0h] [ebp-10E8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v22[<span class="number">3</span>]; <span class="comment">// [esp+3A0h] [ebp-E18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v23; <span class="comment">// [esp+3ACh] [ebp-E0Ch]</span></span><br><span class="line">  <span class="type">int</span> Buffer[<span class="number">255</span>]; <span class="comment">// [esp+3B0h] [ebp-E08h] BYREF</span></span><br><span class="line">  _BYTE v25[<span class="number">2</span>]; <span class="comment">// [esp+7AEh] [ebp-A0Ah] BYREF</span></span><br><span class="line">  WCHAR CommandLine[<span class="number">1282</span>]; <span class="comment">// [esp+7B0h] [ebp-A08h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;ProcessInformation, <span class="number">0</span>, <span class="keyword">sizeof</span>(ProcessInformation));</span><br><span class="line">  <span class="built_in">memset</span>(&amp;StartupInfo, <span class="number">0</span>, <span class="keyword">sizeof</span>(StartupInfo));</span><br><span class="line">  <span class="built_in">memset</span>(&amp;DebugEvent, <span class="number">0</span>, <span class="keyword">sizeof</span>(DebugEvent));</span><br><span class="line">  StartupInfo.cb = <span class="number">68</span>;</span><br><span class="line">  <span class="built_in">memset</span>(CommandLine, <span class="number">0</span>, <span class="number">0xA00</span>u);</span><br><span class="line">  CommandLineW = GetCommandLineW();</span><br><span class="line">  v3 = CommandLineW;</span><br><span class="line">  <span class="keyword">while</span> ( *CommandLineW++ )</span><br><span class="line">    ;</span><br><span class="line">  v5 = (<span class="type">char</span> *)CommandLineW - (<span class="type">char</span> *)v3;</span><br><span class="line">  v6 = (LPWSTR)v25;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v7 = v6[<span class="number">1</span>];</span><br><span class="line">    ++v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v7 );</span><br><span class="line">  qmemcpy(v6, v3, v5);</span><br><span class="line">  v8 = v25;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = *((_WORD *)v8 + <span class="number">1</span>);</span><br><span class="line">    v8 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v9 );</span><br><span class="line">  *(_DWORD *)v8 = <span class="number">32</span>;</span><br><span class="line">  v10 = this;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v11 = *(_WORD *)v10;</span><br><span class="line">    v10 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v11 );</span><br><span class="line">  v12 = v10 - this;</span><br><span class="line">  v13 = v25;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v14 = v13[<span class="number">1</span>];</span><br><span class="line">    ++v13;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v14 );</span><br><span class="line">  qmemcpy(v13, this, v12);</span><br><span class="line">  CreateProcessW(<span class="number">0</span>, CommandLine, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1u</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  <span class="keyword">while</span> ( DebugEvent.dwDebugEventCode != <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">    WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  LOWORD(Buffer[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  Context.ContextFlags = <span class="number">65537</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  GetThreadContext(ProcessInformation.hThread, &amp;Context);</span><br><span class="line">  v22[<span class="number">0</span>] = <span class="number">344606352</span>;</span><br><span class="line">  v22[<span class="number">1</span>] = <span class="number">252981262</span>;</span><br><span class="line">  v22[<span class="number">2</span>] = <span class="number">1976056641</span>;</span><br><span class="line">  v23 = <span class="number">-11</span>;</span><br><span class="line">  WriteProcessMemory(ProcessInformation.hProcess, (LPVOID)(Context.Eip - <span class="number">1</span>), v22, <span class="number">0xD</span>u, &amp;NumberOfBytesWritten);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  LOWORD(Buffer[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  <span class="keyword">if</span> ( Buffer[<span class="number">0</span>] == <span class="number">727473189</span> &amp;&amp; Buffer[<span class="number">1</span>] == <span class="number">907631919</span> &amp;&amp; Buffer[<span class="number">2</span>] == <span class="number">1987208236</span> )</span><br><span class="line">    <span class="keyword">return</span> -(Buffer[<span class="number">3</span>] != <span class="number">1380869760</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点只在最后13行，前面都是初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WriteProcessMemory(ProcessInformation.hProcess, (LPVOID)(Context.Eip - <span class="number">1</span>), v22, <span class="number">0xD</span>u, &amp;NumberOfBytesWritten);</span><br><span class="line">  ContinueDebugEvent(ProcessInformation.dwProcessId, ProcessInformation.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">  WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">  LOWORD(Buffer[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  ReadProcessMemory(</span><br><span class="line">    ProcessInformation.hProcess,</span><br><span class="line">    DebugEvent.u.CreateThread.hThread,</span><br><span class="line">    Buffer,</span><br><span class="line">    DebugEvent.u.DebugString.nDebugStringLength,</span><br><span class="line">    &amp;NumberOfBytesRead);</span><br><span class="line">  <span class="keyword">if</span> ( Buffer[<span class="number">0</span>] == <span class="number">727473189</span> &amp;&amp; Buffer[<span class="number">1</span>] == <span class="number">907631919</span> &amp;&amp; Buffer[<span class="number">2</span>] == <span class="number">1987208236</span> )</span><br><span class="line">    <span class="keyword">return</span> -(Buffer[<span class="number">3</span>] != <span class="number">1380869760</span>);</span><br></pre></td></tr></table></figure><p>这里可以看到最后的输出条件，同时它是创建了一个新进程。并把输入作为参数一起打开，然后用WaitForDebugEvent来读取调试，读取到后patch后面的几个字节，地方是Context.Eip - 1，也就是程序执行到的位置，刚刚的main函数里面刚好就有一个int3断点，在那里直接patch得到最后的逻辑</p><p><img src="https://s2.loli.net/2024/08/05/8Q9namgWbVYdZ7S.png" alt="img"></p><p>所以只是一个异或然后一个加值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0x25</span>,<span class="number">0x5c</span>,<span class="number">0x5c</span>,<span class="number">0x2b</span>,<span class="number">0x2f</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x36</span>,<span class="number">0x2c</span>,<span class="number">0x64</span>,<span class="number">0x72</span>,<span class="number">0x76</span>,<span class="number">0x80</span>,<span class="number">0x66</span>,<span class="number">0x4e</span>,<span class="number">0x52</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    last[i]-=<span class="number">1</span></span><br><span class="line">s = <span class="string">&#x27;elcome to CFF test!&#x27;</span></span><br><span class="line">pxor(last,s)</span><br></pre></td></tr></table></figure><h3 id="CISCN2022-happymath">CISCN2022 happymath</h3><p>进去直接看main：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%32s&quot;</span>, input);</span><br><span class="line">  len = <span class="number">-1</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++len;</span><br><span class="line">  <span class="keyword">while</span> ( input[len] );</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)len == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    j = <span class="number">0</span>i64;</span><br><span class="line">    k = <span class="number">0</span>i64;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = input[k];</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)(v6 - <span class="string">&#x27;a&#x27;</span>) &gt; <span class="number">5u</span> &amp;&amp; (<span class="type">unsigned</span> __int8)(v6 - <span class="string">&#x27;0&#x27;</span>) &gt; <span class="number">9u</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ++k &gt;= <span class="number">32</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        n = <span class="number">0</span>i64;</span><br><span class="line">        m = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          sk = <span class="number">-1</span>;</span><br><span class="line">          <span class="keyword">for</span> ( i = j; i &lt; m; sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>) )</span><br><span class="line">            mid = input[i++];</span><br><span class="line">          v12 = (sk | ~*(_DWORD *)((<span class="type">char</span> *)&amp;t2 + j)) &amp; ~(sk &amp; ~*(_DWORD *)((<span class="type">char</span> *)&amp;t2 + j));</span><br><span class="line">          v13 = ((((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">16</span>) | ((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">          v14 = ((v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>))) &gt;&gt; <span class="number">1</span>) | v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>));</span><br><span class="line">          v15 = (((v14 &gt;&gt; <span class="number">2</span>) | v14) &gt;&gt; <span class="number">4</span>) | (v14 &gt;&gt; <span class="number">2</span>) | v14;</span><br><span class="line">          v16 = (((v15 &gt;&gt; <span class="number">8</span>) | v15) &gt;&gt; <span class="number">16</span>) | (v15 &gt;&gt; <span class="number">8</span>) | v15;</span><br><span class="line">          v17 = (<span class="number">4</span> * ((<span class="number">2</span> * v16) | v16)) | (<span class="number">2</span> * v16) | v16;</span><br><span class="line">          v18 = (((<span class="number">16</span> * v17) | v17) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v17) | v17;</span><br><span class="line">          v19 = (<span class="number">4</span> * ((<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>)) | (<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>;</span><br><span class="line">          v20 = (((<span class="number">16</span> * v19) | v19) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v19) | v19;</span><br><span class="line">          <span class="keyword">if</span> ( ((v20 | (v20 &lt;&lt; <span class="number">16</span>)) &amp; (~((v18 &lt;&lt; <span class="number">16</span>) | v18) | v18 &amp; <span class="number">1</span>)) != <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          m += <span class="number">4</span>;</span><br><span class="line">          n += <span class="number">256</span>i64;</span><br><span class="line">          j += <span class="number">4</span>i64;</span><br><span class="line">          <span class="keyword">if</span> ( m &gt;= <span class="number">36</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            sub_7FF6471D1020(<span class="string">&quot;Your flag is flag&#123;%s&#125;\n&quot;</span>, input);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF6471D1020(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = j; i &lt; m; sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>) )</span><br><span class="line">mid = input[i++];</span><br><span class="line"><span class="comment">//改写为</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mid = input[i];</span><br><span class="line">sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，这里每四个字节用t1表生成每次的密钥sk，生成只和输入和n有关，校验只和sk有关。那么直接写爆破脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> t1[<span class="number">2048</span>] = &#123;</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xF26B8303</span>, <span class="number">0xE13B70F7</span>, <span class="number">0x1350F3F4</span>, <span class="number">0xC79A971F</span>, <span class="number">0x35F1141C</span>, <span class="number">0x26A1E7E8</span>, <span class="number">0xD4CA64EB</span>,</span><br><span class="line"><span class="number">0x8AD958CF</span>, <span class="number">0x78B2DBCC</span>, <span class="number">0x6BE22838</span>, <span class="number">0x9989AB3B</span>, <span class="number">0x4D43CFD0</span>, <span class="number">0xBF284CD3</span>, <span class="number">0xAC78BF27</span>, <span class="number">0x5E133C24</span>,</span><br><span class="line"><span class="number">0x105EC76F</span>, <span class="number">0xE235446C</span>, <span class="number">0xF165B798</span>, <span class="number">0x030E349B</span>, <span class="number">0xD7C45070</span>, <span class="number">0x25AFD373</span>, <span class="number">0x36FF2087</span>, <span class="number">0xC494A384</span>,</span><br><span class="line"><span class="number">0x9A879FA0</span>, <span class="number">0x68EC1CA3</span>, <span class="number">0x7BBCEF57</span>, <span class="number">0x89D76C54</span>, <span class="number">0x5D1D08BF</span>, <span class="number">0xAF768BBC</span>, <span class="number">0xBC267848</span>, <span class="number">0x4E4DFB4B</span>,</span><br><span class="line"><span class="number">0x20BD8EDE</span>, <span class="number">0xD2D60DDD</span>, <span class="number">0xC186FE29</span>, <span class="number">0x33ED7D2A</span>, <span class="number">0xE72719C1</span>, <span class="number">0x154C9AC2</span>, <span class="number">0x061C6936</span>, <span class="number">0xF477EA35</span>,</span><br><span class="line"><span class="number">0xAA64D611</span>, <span class="number">0x580F5512</span>, <span class="number">0x4B5FA6E6</span>, <span class="number">0xB93425E5</span>, <span class="number">0x6DFE410E</span>, <span class="number">0x9F95C20D</span>, <span class="number">0x8CC531F9</span>, <span class="number">0x7EAEB2FA</span>,</span><br><span class="line"><span class="number">0x30E349B1</span>, <span class="number">0xC288CAB2</span>, <span class="number">0xD1D83946</span>, <span class="number">0x23B3BA45</span>, <span class="number">0xF779DEAE</span>, <span class="number">0x05125DAD</span>, <span class="number">0x1642AE59</span>, <span class="number">0xE4292D5A</span>,</span><br><span class="line"><span class="number">0xBA3A117E</span>, <span class="number">0x4851927D</span>, <span class="number">0x5B016189</span>, <span class="number">0xA96AE28A</span>, <span class="number">0x7DA08661</span>, <span class="number">0x8FCB0562</span>, <span class="number">0x9C9BF696</span>, <span class="number">0x6EF07595</span>,</span><br><span class="line"><span class="number">0x417B1DBC</span>, <span class="number">0xB3109EBF</span>, <span class="number">0xA0406D4B</span>, <span class="number">0x522BEE48</span>, <span class="number">0x86E18AA3</span>, <span class="number">0x748A09A0</span>, <span class="number">0x67DAFA54</span>, <span class="number">0x95B17957</span>,</span><br><span class="line"><span class="number">0xCBA24573</span>, <span class="number">0x39C9C670</span>, <span class="number">0x2A993584</span>, <span class="number">0xD8F2B687</span>, <span class="number">0x0C38D26C</span>, <span class="number">0xFE53516F</span>, <span class="number">0xED03A29B</span>, <span class="number">0x1F682198</span>,</span><br><span class="line"><span class="number">0x5125DAD3</span>, <span class="number">0xA34E59D0</span>, <span class="number">0xB01EAA24</span>, <span class="number">0x42752927</span>, <span class="number">0x96BF4DCC</span>, <span class="number">0x64D4CECF</span>, <span class="number">0x77843D3B</span>, <span class="number">0x85EFBE38</span>,</span><br><span class="line"><span class="number">0xDBFC821C</span>, <span class="number">0x2997011F</span>, <span class="number">0x3AC7F2EB</span>, <span class="number">0xC8AC71E8</span>, <span class="number">0x1C661503</span>, <span class="number">0xEE0D9600</span>, <span class="number">0xFD5D65F4</span>, <span class="number">0x0F36E6F7</span>,</span><br><span class="line"><span class="number">0x61C69362</span>, <span class="number">0x93AD1061</span>, <span class="number">0x80FDE395</span>, <span class="number">0x72966096</span>, <span class="number">0xA65C047D</span>, <span class="number">0x5437877E</span>, <span class="number">0x4767748A</span>, <span class="number">0xB50CF789</span>,</span><br><span class="line"><span class="number">0xEB1FCBAD</span>, <span class="number">0x197448AE</span>, <span class="number">0x0A24BB5A</span>, <span class="number">0xF84F3859</span>, <span class="number">0x2C855CB2</span>, <span class="number">0xDEEEDFB1</span>, <span class="number">0xCDBE2C45</span>, <span class="number">0x3FD5AF46</span>,</span><br><span class="line"><span class="number">0x7198540D</span>, <span class="number">0x83F3D70E</span>, <span class="number">0x90A324FA</span>, <span class="number">0x62C8A7F9</span>, <span class="number">0xB602C312</span>, <span class="number">0x44694011</span>, <span class="number">0x5739B3E5</span>, <span class="number">0xA55230E6</span>,</span><br><span class="line"><span class="number">0xFB410CC2</span>, <span class="number">0x092A8FC1</span>, <span class="number">0x1A7A7C35</span>, <span class="number">0xE811FF36</span>, <span class="number">0x3CDB9BDD</span>, <span class="number">0xCEB018DE</span>, <span class="number">0xDDE0EB2A</span>, <span class="number">0x2F8B6829</span>,</span><br><span class="line"><span class="number">0x82F63B78</span>, <span class="number">0x709DB87B</span>, <span class="number">0x63CD4B8F</span>, <span class="number">0x91A6C88C</span>, <span class="number">0x456CAC67</span>, <span class="number">0xB7072F64</span>, <span class="number">0xA457DC90</span>, <span class="number">0x563C5F93</span>,</span><br><span class="line"><span class="number">0x082F63B7</span>, <span class="number">0xFA44E0B4</span>, <span class="number">0xE9141340</span>, <span class="number">0x1B7F9043</span>, <span class="number">0xCFB5F4A8</span>, <span class="number">0x3DDE77AB</span>, <span class="number">0x2E8E845F</span>, <span class="number">0xDCE5075C</span>,</span><br><span class="line"><span class="number">0x92A8FC17</span>, <span class="number">0x60C37F14</span>, <span class="number">0x73938CE0</span>, <span class="number">0x81F80FE3</span>, <span class="number">0x55326B08</span>, <span class="number">0xA759E80B</span>, <span class="number">0xB4091BFF</span>, <span class="number">0x466298FC</span>,</span><br><span class="line"><span class="number">0x1871A4D8</span>, <span class="number">0xEA1A27DB</span>, <span class="number">0xF94AD42F</span>, <span class="number">0x0B21572C</span>, <span class="number">0xDFEB33C7</span>, <span class="number">0x2D80B0C4</span>, <span class="number">0x3ED04330</span>, <span class="number">0xCCBBC033</span>,</span><br><span class="line"><span class="number">0xA24BB5A6</span>, <span class="number">0x502036A5</span>, <span class="number">0x4370C551</span>, <span class="number">0xB11B4652</span>, <span class="number">0x65D122B9</span>, <span class="number">0x97BAA1BA</span>, <span class="number">0x84EA524E</span>, <span class="number">0x7681D14D</span>,</span><br><span class="line"><span class="number">0x2892ED69</span>, <span class="number">0xDAF96E6A</span>, <span class="number">0xC9A99D9E</span>, <span class="number">0x3BC21E9D</span>, <span class="number">0xEF087A76</span>, <span class="number">0x1D63F975</span>, <span class="number">0x0E330A81</span>, <span class="number">0xFC588982</span>,</span><br><span class="line"><span class="number">0xB21572C9</span>, <span class="number">0x407EF1CA</span>, <span class="number">0x532E023E</span>, <span class="number">0xA145813D</span>, <span class="number">0x758FE5D6</span>, <span class="number">0x87E466D5</span>, <span class="number">0x94B49521</span>, <span class="number">0x66DF1622</span>,</span><br><span class="line"><span class="number">0x38CC2A06</span>, <span class="number">0xCAA7A905</span>, <span class="number">0xD9F75AF1</span>, <span class="number">0x2B9CD9F2</span>, <span class="number">0xFF56BD19</span>, <span class="number">0x0D3D3E1A</span>, <span class="number">0x1E6DCDEE</span>, <span class="number">0xEC064EED</span>,</span><br><span class="line"><span class="number">0xC38D26C4</span>, <span class="number">0x31E6A5C7</span>, <span class="number">0x22B65633</span>, <span class="number">0xD0DDD530</span>, <span class="number">0x0417B1DB</span>, <span class="number">0xF67C32D8</span>, <span class="number">0xE52CC12C</span>, <span class="number">0x1747422F</span>,</span><br><span class="line"><span class="number">0x49547E0B</span>, <span class="number">0xBB3FFD08</span>, <span class="number">0xA86F0EFC</span>, <span class="number">0x5A048DFF</span>, <span class="number">0x8ECEE914</span>, <span class="number">0x7CA56A17</span>, <span class="number">0x6FF599E3</span>, <span class="number">0x9D9E1AE0</span>,</span><br><span class="line"><span class="number">0xD3D3E1AB</span>, <span class="number">0x21B862A8</span>, <span class="number">0x32E8915C</span>, <span class="number">0xC083125F</span>, <span class="number">0x144976B4</span>, <span class="number">0xE622F5B7</span>, <span class="number">0xF5720643</span>, <span class="number">0x07198540</span>,</span><br><span class="line"><span class="number">0x590AB964</span>, <span class="number">0xAB613A67</span>, <span class="number">0xB831C993</span>, <span class="number">0x4A5A4A90</span>, <span class="number">0x9E902E7B</span>, <span class="number">0x6CFBAD78</span>, <span class="number">0x7FAB5E8C</span>, <span class="number">0x8DC0DD8F</span>,</span><br><span class="line"><span class="number">0xE330A81A</span>, <span class="number">0x115B2B19</span>, <span class="number">0x020BD8ED</span>, <span class="number">0xF0605BEE</span>, <span class="number">0x24AA3F05</span>, <span class="number">0xD6C1BC06</span>, <span class="number">0xC5914FF2</span>, <span class="number">0x37FACCF1</span>,</span><br><span class="line"><span class="number">0x69E9F0D5</span>, <span class="number">0x9B8273D6</span>, <span class="number">0x88D28022</span>, <span class="number">0x7AB90321</span>, <span class="number">0xAE7367CA</span>, <span class="number">0x5C18E4C9</span>, <span class="number">0x4F48173D</span>, <span class="number">0xBD23943E</span>,</span><br><span class="line"><span class="number">0xF36E6F75</span>, <span class="number">0x0105EC76</span>, <span class="number">0x12551F82</span>, <span class="number">0xE03E9C81</span>, <span class="number">0x34F4F86A</span>, <span class="number">0xC69F7B69</span>, <span class="number">0xD5CF889D</span>, <span class="number">0x27A40B9E</span>,</span><br><span class="line"><span class="number">0x79B737BA</span>, <span class="number">0x8BDCB4B9</span>, <span class="number">0x988C474D</span>, <span class="number">0x6AE7C44E</span>, <span class="number">0xBE2DA0A5</span>, <span class="number">0x4C4623A6</span>, <span class="number">0x5F16D052</span>, <span class="number">0xAD7D5351</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x13A29877</span>, <span class="number">0x274530EE</span>, <span class="number">0x34E7A899</span>, <span class="number">0x4E8A61DC</span>, <span class="number">0x5D28F9AB</span>, <span class="number">0x69CF5132</span>, <span class="number">0x7A6DC945</span>,</span><br><span class="line"><span class="number">0x9D14C3B8</span>, <span class="number">0x8EB65BCF</span>, <span class="number">0xBA51F356</span>, <span class="number">0xA9F36B21</span>, <span class="number">0xD39EA264</span>, <span class="number">0xC03C3A13</span>, <span class="number">0xF4DB928A</span>, <span class="number">0xE7790AFD</span>,</span><br><span class="line"><span class="number">0x3FC5F181</span>, <span class="number">0x2C6769F6</span>, <span class="number">0x1880C16F</span>, <span class="number">0x0B225918</span>, <span class="number">0x714F905D</span>, <span class="number">0x62ED082A</span>, <span class="number">0x560AA0B3</span>, <span class="number">0x45A838C4</span>,</span><br><span class="line"><span class="number">0xA2D13239</span>, <span class="number">0xB173AA4E</span>, <span class="number">0x859402D7</span>, <span class="number">0x96369AA0</span>, <span class="number">0xEC5B53E5</span>, <span class="number">0xFFF9CB92</span>, <span class="number">0xCB1E630B</span>, <span class="number">0xD8BCFB7C</span>,</span><br><span class="line"><span class="number">0x7F8BE302</span>, <span class="number">0x6C297B75</span>, <span class="number">0x58CED3EC</span>, <span class="number">0x4B6C4B9B</span>, <span class="number">0x310182DE</span>, <span class="number">0x22A31AA9</span>, <span class="number">0x1644B230</span>, <span class="number">0x05E62A47</span>,</span><br><span class="line"><span class="number">0xE29F20BA</span>, <span class="number">0xF13DB8CD</span>, <span class="number">0xC5DA1054</span>, <span class="number">0xD6788823</span>, <span class="number">0xAC154166</span>, <span class="number">0xBFB7D911</span>, <span class="number">0x8B507188</span>, <span class="number">0x98F2E9FF</span>,</span><br><span class="line"><span class="number">0x404E1283</span>, <span class="number">0x53EC8AF4</span>, <span class="number">0x670B226D</span>, <span class="number">0x74A9BA1A</span>, <span class="number">0x0EC4735F</span>, <span class="number">0x1D66EB28</span>, <span class="number">0x298143B1</span>, <span class="number">0x3A23DBC6</span>,</span><br><span class="line"><span class="number">0xDD5AD13B</span>, <span class="number">0xCEF8494C</span>, <span class="number">0xFA1FE1D5</span>, <span class="number">0xE9BD79A2</span>, <span class="number">0x93D0B0E7</span>, <span class="number">0x80722890</span>, <span class="number">0xB4958009</span>, <span class="number">0xA737187E</span>,</span><br><span class="line"><span class="number">0xFF17C604</span>, <span class="number">0xECB55E73</span>, <span class="number">0xD852F6EA</span>, <span class="number">0xCBF06E9D</span>, <span class="number">0xB19DA7D8</span>, <span class="number">0xA23F3FAF</span>, <span class="number">0x96D89736</span>, <span class="number">0x857A0F41</span>,</span><br><span class="line"><span class="number">0x620305BC</span>, <span class="number">0x71A19DCB</span>, <span class="number">0x45463552</span>, <span class="number">0x56E4AD25</span>, <span class="number">0x2C896460</span>, <span class="number">0x3F2BFC17</span>, <span class="number">0x0BCC548E</span>, <span class="number">0x186ECCF9</span>,</span><br><span class="line"><span class="number">0xC0D23785</span>, <span class="number">0xD370AFF2</span>, <span class="number">0xE797076B</span>, <span class="number">0xF4359F1C</span>, <span class="number">0x8E585659</span>, <span class="number">0x9DFACE2E</span>, <span class="number">0xA91D66B7</span>, <span class="number">0xBABFFEC0</span>,</span><br><span class="line"><span class="number">0x5DC6F43D</span>, <span class="number">0x4E646C4A</span>, <span class="number">0x7A83C4D3</span>, <span class="number">0x69215CA4</span>, <span class="number">0x134C95E1</span>, <span class="number">0x00EE0D96</span>, <span class="number">0x3409A50F</span>, <span class="number">0x27AB3D78</span>,</span><br><span class="line"><span class="number">0x809C2506</span>, <span class="number">0x933EBD71</span>, <span class="number">0xA7D915E8</span>, <span class="number">0xB47B8D9F</span>, <span class="number">0xCE1644DA</span>, <span class="number">0xDDB4DCAD</span>, <span class="number">0xE9537434</span>, <span class="number">0xFAF1EC43</span>,</span><br><span class="line"><span class="number">0x1D88E6BE</span>, <span class="number">0x0E2A7EC9</span>, <span class="number">0x3ACDD650</span>, <span class="number">0x296F4E27</span>, <span class="number">0x53028762</span>, <span class="number">0x40A01F15</span>, <span class="number">0x7447B78C</span>, <span class="number">0x67E52FFB</span>,</span><br><span class="line"><span class="number">0xBF59D487</span>, <span class="number">0xACFB4CF0</span>, <span class="number">0x981CE469</span>, <span class="number">0x8BBE7C1E</span>, <span class="number">0xF1D3B55B</span>, <span class="number">0xE2712D2C</span>, <span class="number">0xD69685B5</span>, <span class="number">0xC5341DC2</span>,</span><br><span class="line"><span class="number">0x224D173F</span>, <span class="number">0x31EF8F48</span>, <span class="number">0x050827D1</span>, <span class="number">0x16AABFA6</span>, <span class="number">0x6CC776E3</span>, <span class="number">0x7F65EE94</span>, <span class="number">0x4B82460D</span>, <span class="number">0x5820DE7A</span>,</span><br><span class="line"><span class="number">0xFBC3FAF9</span>, <span class="number">0xE861628E</span>, <span class="number">0xDC86CA17</span>, <span class="number">0xCF245260</span>, <span class="number">0xB5499B25</span>, <span class="number">0xA6EB0352</span>, <span class="number">0x920CABCB</span>, <span class="number">0x81AE33BC</span>,</span><br><span class="line"><span class="number">0x66D73941</span>, <span class="number">0x7575A136</span>, <span class="number">0x419209AF</span>, <span class="number">0x523091D8</span>, <span class="number">0x285D589D</span>, <span class="number">0x3BFFC0EA</span>, <span class="number">0x0F186873</span>, <span class="number">0x1CBAF004</span>,</span><br><span class="line"><span class="number">0xC4060B78</span>, <span class="number">0xD7A4930F</span>, <span class="number">0xE3433B96</span>, <span class="number">0xF0E1A3E1</span>, <span class="number">0x8A8C6AA4</span>, <span class="number">0x992EF2D3</span>, <span class="number">0xADC95A4A</span>, <span class="number">0xBE6BC23D</span>,</span><br><span class="line"><span class="number">0x5912C8C0</span>, <span class="number">0x4AB050B7</span>, <span class="number">0x7E57F82E</span>, <span class="number">0x6DF56059</span>, <span class="number">0x1798A91C</span>, <span class="number">0x043A316B</span>, <span class="number">0x30DD99F2</span>, <span class="number">0x237F0185</span>,</span><br><span class="line"><span class="number">0x844819FB</span>, <span class="number">0x97EA818C</span>, <span class="number">0xA30D2915</span>, <span class="number">0xB0AFB162</span>, <span class="number">0xCAC27827</span>, <span class="number">0xD960E050</span>, <span class="number">0xED8748C9</span>, <span class="number">0xFE25D0BE</span>,</span><br><span class="line"><span class="number">0x195CDA43</span>, <span class="number">0x0AFE4234</span>, <span class="number">0x3E19EAAD</span>, <span class="number">0x2DBB72DA</span>, <span class="number">0x57D6BB9F</span>, <span class="number">0x447423E8</span>, <span class="number">0x70938B71</span>, <span class="number">0x63311306</span>,</span><br><span class="line"><span class="number">0xBB8DE87A</span>, <span class="number">0xA82F700D</span>, <span class="number">0x9CC8D894</span>, <span class="number">0x8F6A40E3</span>, <span class="number">0xF50789A6</span>, <span class="number">0xE6A511D1</span>, <span class="number">0xD242B948</span>, <span class="number">0xC1E0213F</span>,</span><br><span class="line"><span class="number">0x26992BC2</span>, <span class="number">0x353BB3B5</span>, <span class="number">0x01DC1B2C</span>, <span class="number">0x127E835B</span>, <span class="number">0x68134A1E</span>, <span class="number">0x7BB1D269</span>, <span class="number">0x4F567AF0</span>, <span class="number">0x5CF4E287</span>,</span><br><span class="line"><span class="number">0x04D43CFD</span>, <span class="number">0x1776A48A</span>, <span class="number">0x23910C13</span>, <span class="number">0x30339464</span>, <span class="number">0x4A5E5D21</span>, <span class="number">0x59FCC556</span>, <span class="number">0x6D1B6DCF</span>, <span class="number">0x7EB9F5B8</span>,</span><br><span class="line"><span class="number">0x99C0FF45</span>, <span class="number">0x8A626732</span>, <span class="number">0xBE85CFAB</span>, <span class="number">0xAD2757DC</span>, <span class="number">0xD74A9E99</span>, <span class="number">0xC4E806EE</span>, <span class="number">0xF00FAE77</span>, <span class="number">0xE3AD3600</span>,</span><br><span class="line"><span class="number">0x3B11CD7C</span>, <span class="number">0x28B3550B</span>, <span class="number">0x1C54FD92</span>, <span class="number">0x0FF665E5</span>, <span class="number">0x759BACA0</span>, <span class="number">0x663934D7</span>, <span class="number">0x52DE9C4E</span>, <span class="number">0x417C0439</span>,</span><br><span class="line"><span class="number">0xA6050EC4</span>, <span class="number">0xB5A796B3</span>, <span class="number">0x81403E2A</span>, <span class="number">0x92E2A65D</span>, <span class="number">0xE88F6F18</span>, <span class="number">0xFB2DF76F</span>, <span class="number">0xCFCA5FF6</span>, <span class="number">0xDC68C781</span>,</span><br><span class="line"><span class="number">0x7B5FDFFF</span>, <span class="number">0x68FD4788</span>, <span class="number">0x5C1AEF11</span>, <span class="number">0x4FB87766</span>, <span class="number">0x35D5BE23</span>, <span class="number">0x26772654</span>, <span class="number">0x12908ECD</span>, <span class="number">0x013216BA</span>,</span><br><span class="line"><span class="number">0xE64B1C47</span>, <span class="number">0xF5E98430</span>, <span class="number">0xC10E2CA9</span>, <span class="number">0xD2ACB4DE</span>, <span class="number">0xA8C17D9B</span>, <span class="number">0xBB63E5EC</span>, <span class="number">0x8F844D75</span>, <span class="number">0x9C26D502</span>,</span><br><span class="line"><span class="number">0x449A2E7E</span>, <span class="number">0x5738B609</span>, <span class="number">0x63DF1E90</span>, <span class="number">0x707D86E7</span>, <span class="number">0x0A104FA2</span>, <span class="number">0x19B2D7D5</span>, <span class="number">0x2D557F4C</span>, <span class="number">0x3EF7E73B</span>,</span><br><span class="line"><span class="number">0xD98EEDC6</span>, <span class="number">0xCA2C75B1</span>, <span class="number">0xFECBDD28</span>, <span class="number">0xED69455F</span>, <span class="number">0x97048C1A</span>, <span class="number">0x84A6146D</span>, <span class="number">0xB041BCF4</span>, <span class="number">0xA3E32483</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xA541927E</span>, <span class="number">0x4F6F520D</span>, <span class="number">0xEA2EC073</span>, <span class="number">0x9EDEA41A</span>, <span class="number">0x3B9F3664</span>, <span class="number">0xD1B1F617</span>, <span class="number">0x74F06469</span>,</span><br><span class="line"><span class="number">0x38513EC5</span>, <span class="number">0x9D10ACBB</span>, <span class="number">0x773E6CC8</span>, <span class="number">0xD27FFEB6</span>, <span class="number">0xA68F9ADF</span>, <span class="number">0x03CE08A1</span>, <span class="number">0xE9E0C8D2</span>, <span class="number">0x4CA15AAC</span>,</span><br><span class="line"><span class="number">0x70A27D8A</span>, <span class="number">0xD5E3EFF4</span>, <span class="number">0x3FCD2F87</span>, <span class="number">0x9A8CBDF9</span>, <span class="number">0xEE7CD990</span>, <span class="number">0x4B3D4BEE</span>, <span class="number">0xA1138B9D</span>, <span class="number">0x045219E3</span>,</span><br><span class="line"><span class="number">0x48F3434F</span>, <span class="number">0xEDB2D131</span>, <span class="number">0x079C1142</span>, <span class="number">0xA2DD833C</span>, <span class="number">0xD62DE755</span>, <span class="number">0x736C752B</span>, <span class="number">0x9942B558</span>, <span class="number">0x3C032726</span>,</span><br><span class="line"><span class="number">0xE144FB14</span>, <span class="number">0x4405696A</span>, <span class="number">0xAE2BA919</span>, <span class="number">0x0B6A3B67</span>, <span class="number">0x7F9A5F0E</span>, <span class="number">0xDADBCD70</span>, <span class="number">0x30F50D03</span>, <span class="number">0x95B49F7D</span>,</span><br><span class="line"><span class="number">0xD915C5D1</span>, <span class="number">0x7C5457AF</span>, <span class="number">0x967A97DC</span>, <span class="number">0x333B05A2</span>, <span class="number">0x47CB61CB</span>, <span class="number">0xE28AF3B5</span>, <span class="number">0x08A433C6</span>, <span class="number">0xADE5A1B8</span>,</span><br><span class="line"><span class="number">0x91E6869E</span>, <span class="number">0x34A714E0</span>, <span class="number">0xDE89D493</span>, <span class="number">0x7BC846ED</span>, <span class="number">0x0F382284</span>, <span class="number">0xAA79B0FA</span>, <span class="number">0x40577089</span>, <span class="number">0xE516E2F7</span>,</span><br><span class="line"><span class="number">0xA9B7B85B</span>, <span class="number">0x0CF62A25</span>, <span class="number">0xE6D8EA56</span>, <span class="number">0x43997828</span>, <span class="number">0x37691C41</span>, <span class="number">0x92288E3F</span>, <span class="number">0x78064E4C</span>, <span class="number">0xDD47DC32</span>,</span><br><span class="line"><span class="number">0xC76580D9</span>, <span class="number">0x622412A7</span>, <span class="number">0x880AD2D4</span>, <span class="number">0x2D4B40AA</span>, <span class="number">0x59BB24C3</span>, <span class="number">0xFCFAB6BD</span>, <span class="number">0x16D476CE</span>, <span class="number">0xB395E4B0</span>,</span><br><span class="line"><span class="number">0xFF34BE1C</span>, <span class="number">0x5A752C62</span>, <span class="number">0xB05BEC11</span>, <span class="number">0x151A7E6F</span>, <span class="number">0x61EA1A06</span>, <span class="number">0xC4AB8878</span>, <span class="number">0x2E85480B</span>, <span class="number">0x8BC4DA75</span>,</span><br><span class="line"><span class="number">0xB7C7FD53</span>, <span class="number">0x12866F2D</span>, <span class="number">0xF8A8AF5E</span>, <span class="number">0x5DE93D20</span>, <span class="number">0x29195949</span>, <span class="number">0x8C58CB37</span>, <span class="number">0x66760B44</span>, <span class="number">0xC337993A</span>,</span><br><span class="line"><span class="number">0x8F96C396</span>, <span class="number">0x2AD751E8</span>, <span class="number">0xC0F9919B</span>, <span class="number">0x65B803E5</span>, <span class="number">0x1148678C</span>, <span class="number">0xB409F5F2</span>, <span class="number">0x5E273581</span>, <span class="number">0xFB66A7FF</span>,</span><br><span class="line"><span class="number">0x26217BCD</span>, <span class="number">0x8360E9B3</span>, <span class="number">0x694E29C0</span>, <span class="number">0xCC0FBBBE</span>, <span class="number">0xB8FFDFD7</span>, <span class="number">0x1DBE4DA9</span>, <span class="number">0xF7908DDA</span>, <span class="number">0x52D11FA4</span>,</span><br><span class="line"><span class="number">0x1E704508</span>, <span class="number">0xBB31D776</span>, <span class="number">0x511F1705</span>, <span class="number">0xF45E857B</span>, <span class="number">0x80AEE112</span>, <span class="number">0x25EF736C</span>, <span class="number">0xCFC1B31F</span>, <span class="number">0x6A802161</span>,</span><br><span class="line"><span class="number">0x56830647</span>, <span class="number">0xF3C29439</span>, <span class="number">0x19EC544A</span>, <span class="number">0xBCADC634</span>, <span class="number">0xC85DA25D</span>, <span class="number">0x6D1C3023</span>, <span class="number">0x8732F050</span>, <span class="number">0x2273622E</span>,</span><br><span class="line"><span class="number">0x6ED23882</span>, <span class="number">0xCB93AAFC</span>, <span class="number">0x21BD6A8F</span>, <span class="number">0x84FCF8F1</span>, <span class="number">0xF00C9C98</span>, <span class="number">0x554D0EE6</span>, <span class="number">0xBF63CE95</span>, <span class="number">0x1A225CEB</span>,</span><br><span class="line"><span class="number">0x8B277743</span>, <span class="number">0x2E66E53D</span>, <span class="number">0xC448254E</span>, <span class="number">0x6109B730</span>, <span class="number">0x15F9D359</span>, <span class="number">0xB0B84127</span>, <span class="number">0x5A968154</span>, <span class="number">0xFFD7132A</span>,</span><br><span class="line"><span class="number">0xB3764986</span>, <span class="number">0x1637DBF8</span>, <span class="number">0xFC191B8B</span>, <span class="number">0x595889F5</span>, <span class="number">0x2DA8ED9C</span>, <span class="number">0x88E97FE2</span>, <span class="number">0x62C7BF91</span>, <span class="number">0xC7862DEF</span>,</span><br><span class="line"><span class="number">0xFB850AC9</span>, <span class="number">0x5EC498B7</span>, <span class="number">0xB4EA58C4</span>, <span class="number">0x11ABCABA</span>, <span class="number">0x655BAED3</span>, <span class="number">0xC01A3CAD</span>, <span class="number">0x2A34FCDE</span>, <span class="number">0x8F756EA0</span>,</span><br><span class="line"><span class="number">0xC3D4340C</span>, <span class="number">0x6695A672</span>, <span class="number">0x8CBB6601</span>, <span class="number">0x29FAF47F</span>, <span class="number">0x5D0A9016</span>, <span class="number">0xF84B0268</span>, <span class="number">0x1265C21B</span>, <span class="number">0xB7245065</span>,</span><br><span class="line"><span class="number">0x6A638C57</span>, <span class="number">0xCF221E29</span>, <span class="number">0x250CDE5A</span>, <span class="number">0x804D4C24</span>, <span class="number">0xF4BD284D</span>, <span class="number">0x51FCBA33</span>, <span class="number">0xBBD27A40</span>, <span class="number">0x1E93E83E</span>,</span><br><span class="line"><span class="number">0x5232B292</span>, <span class="number">0xF77320EC</span>, <span class="number">0x1D5DE09F</span>, <span class="number">0xB81C72E1</span>, <span class="number">0xCCEC1688</span>, <span class="number">0x69AD84F6</span>, <span class="number">0x83834485</span>, <span class="number">0x26C2D6FB</span>,</span><br><span class="line"><span class="number">0x1AC1F1DD</span>, <span class="number">0xBF8063A3</span>, <span class="number">0x55AEA3D0</span>, <span class="number">0xF0EF31AE</span>, <span class="number">0x841F55C7</span>, <span class="number">0x215EC7B9</span>, <span class="number">0xCB7007CA</span>, <span class="number">0x6E3195B4</span>,</span><br><span class="line"><span class="number">0x2290CF18</span>, <span class="number">0x87D15D66</span>, <span class="number">0x6DFF9D15</span>, <span class="number">0xC8BE0F6B</span>, <span class="number">0xBC4E6B02</span>, <span class="number">0x190FF97C</span>, <span class="number">0xF321390F</span>, <span class="number">0x5660AB71</span>,</span><br><span class="line"><span class="number">0x4C42F79A</span>, <span class="number">0xE90365E4</span>, <span class="number">0x032DA597</span>, <span class="number">0xA66C37E9</span>, <span class="number">0xD29C5380</span>, <span class="number">0x77DDC1FE</span>, <span class="number">0x9DF3018D</span>, <span class="number">0x38B293F3</span>,</span><br><span class="line"><span class="number">0x7413C95F</span>, <span class="number">0xD1525B21</span>, <span class="number">0x3B7C9B52</span>, <span class="number">0x9E3D092C</span>, <span class="number">0xEACD6D45</span>, <span class="number">0x4F8CFF3B</span>, <span class="number">0xA5A23F48</span>, <span class="number">0x00E3AD36</span>,</span><br><span class="line"><span class="number">0x3CE08A10</span>, <span class="number">0x99A1186E</span>, <span class="number">0x738FD81D</span>, <span class="number">0xD6CE4A63</span>, <span class="number">0xA23E2E0A</span>, <span class="number">0x077FBC74</span>, <span class="number">0xED517C07</span>, <span class="number">0x4810EE79</span>,</span><br><span class="line"><span class="number">0x04B1B4D5</span>, <span class="number">0xA1F026AB</span>, <span class="number">0x4BDEE6D8</span>, <span class="number">0xEE9F74A6</span>, <span class="number">0x9A6F10CF</span>, <span class="number">0x3F2E82B1</span>, <span class="number">0xD50042C2</span>, <span class="number">0x7041D0BC</span>,</span><br><span class="line"><span class="number">0xAD060C8E</span>, <span class="number">0x08479EF0</span>, <span class="number">0xE2695E83</span>, <span class="number">0x4728CCFD</span>, <span class="number">0x33D8A894</span>, <span class="number">0x96993AEA</span>, <span class="number">0x7CB7FA99</span>, <span class="number">0xD9F668E7</span>,</span><br><span class="line"><span class="number">0x9557324B</span>, <span class="number">0x3016A035</span>, <span class="number">0xDA386046</span>, <span class="number">0x7F79F238</span>, <span class="number">0x0B899651</span>, <span class="number">0xAEC8042F</span>, <span class="number">0x44E6C45C</span>, <span class="number">0xE1A75622</span>,</span><br><span class="line"><span class="number">0xDDA47104</span>, <span class="number">0x78E5E37A</span>, <span class="number">0x92CB2309</span>, <span class="number">0x378AB177</span>, <span class="number">0x437AD51E</span>, <span class="number">0xE63B4760</span>, <span class="number">0x0C158713</span>, <span class="number">0xA954156D</span>,</span><br><span class="line"><span class="number">0xE5F54FC1</span>, <span class="number">0x40B4DDBF</span>, <span class="number">0xAA9A1DCC</span>, <span class="number">0x0FDB8FB2</span>, <span class="number">0x7B2BEBDB</span>, <span class="number">0xDE6A79A5</span>, <span class="number">0x3444B9D6</span>, <span class="number">0x91052BA8</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xDD45AAB8</span>, <span class="number">0xBF672381</span>, <span class="number">0x62228939</span>, <span class="number">0x7B2231F3</span>, <span class="number">0xA6679B4B</span>, <span class="number">0xC4451272</span>, <span class="number">0x1900B8CA</span>,</span><br><span class="line"><span class="number">0xF64463E6</span>, <span class="number">0x2B01C95E</span>, <span class="number">0x49234067</span>, <span class="number">0x9466EADF</span>, <span class="number">0x8D665215</span>, <span class="number">0x5023F8AD</span>, <span class="number">0x32017194</span>, <span class="number">0xEF44DB2C</span>,</span><br><span class="line"><span class="number">0xE964B13D</span>, <span class="number">0x34211B85</span>, <span class="number">0x560392BC</span>, <span class="number">0x8B463804</span>, <span class="number">0x924680CE</span>, <span class="number">0x4F032A76</span>, <span class="number">0x2D21A34F</span>, <span class="number">0xF06409F7</span>,</span><br><span class="line"><span class="number">0x1F20D2DB</span>, <span class="number">0xC2657863</span>, <span class="number">0xA047F15A</span>, <span class="number">0x7D025BE2</span>, <span class="number">0x6402E328</span>, <span class="number">0xB9474990</span>, <span class="number">0xDB65C0A9</span>, <span class="number">0x06206A11</span>,</span><br><span class="line"><span class="number">0xD725148B</span>, <span class="number">0x0A60BE33</span>, <span class="number">0x6842370A</span>, <span class="number">0xB5079DB2</span>, <span class="number">0xAC072578</span>, <span class="number">0x71428FC0</span>, <span class="number">0x136006F9</span>, <span class="number">0xCE25AC41</span>,</span><br><span class="line"><span class="number">0x2161776D</span>, <span class="number">0xFC24DDD5</span>, <span class="number">0x9E0654EC</span>, <span class="number">0x4343FE54</span>, <span class="number">0x5A43469E</span>, <span class="number">0x8706EC26</span>, <span class="number">0xE524651F</span>, <span class="number">0x3861CFA7</span>,</span><br><span class="line"><span class="number">0x3E41A5B6</span>, <span class="number">0xE3040F0E</span>, <span class="number">0x81268637</span>, <span class="number">0x5C632C8F</span>, <span class="number">0x45639445</span>, <span class="number">0x98263EFD</span>, <span class="number">0xFA04B7C4</span>, <span class="number">0x27411D7C</span>,</span><br><span class="line"><span class="number">0xC805C650</span>, <span class="number">0x15406CE8</span>, <span class="number">0x7762E5D1</span>, <span class="number">0xAA274F69</span>, <span class="number">0xB327F7A3</span>, <span class="number">0x6E625D1B</span>, <span class="number">0x0C40D422</span>, <span class="number">0xD1057E9A</span>,</span><br><span class="line"><span class="number">0xABA65FE7</span>, <span class="number">0x76E3F55F</span>, <span class="number">0x14C17C66</span>, <span class="number">0xC984D6DE</span>, <span class="number">0xD0846E14</span>, <span class="number">0x0DC1C4AC</span>, <span class="number">0x6FE34D95</span>, <span class="number">0xB2A6E72D</span>,</span><br><span class="line"><span class="number">0x5DE23C01</span>, <span class="number">0x80A796B9</span>, <span class="number">0xE2851F80</span>, <span class="number">0x3FC0B538</span>, <span class="number">0x26C00DF2</span>, <span class="number">0xFB85A74A</span>, <span class="number">0x99A72E73</span>, <span class="number">0x44E284CB</span>,</span><br><span class="line"><span class="number">0x42C2EEDA</span>, <span class="number">0x9F874462</span>, <span class="number">0xFDA5CD5B</span>, <span class="number">0x20E067E3</span>, <span class="number">0x39E0DF29</span>, <span class="number">0xE4A57591</span>, <span class="number">0x8687FCA8</span>, <span class="number">0x5BC25610</span>,</span><br><span class="line"><span class="number">0xB4868D3C</span>, <span class="number">0x69C32784</span>, <span class="number">0x0BE1AEBD</span>, <span class="number">0xD6A40405</span>, <span class="number">0xCFA4BCCF</span>, <span class="number">0x12E11677</span>, <span class="number">0x70C39F4E</span>, <span class="number">0xAD8635F6</span>,</span><br><span class="line"><span class="number">0x7C834B6C</span>, <span class="number">0xA1C6E1D4</span>, <span class="number">0xC3E468ED</span>, <span class="number">0x1EA1C255</span>, <span class="number">0x07A17A9F</span>, <span class="number">0xDAE4D027</span>, <span class="number">0xB8C6591E</span>, <span class="number">0x6583F3A6</span>,</span><br><span class="line"><span class="number">0x8AC7288A</span>, <span class="number">0x57828232</span>, <span class="number">0x35A00B0B</span>, <span class="number">0xE8E5A1B3</span>, <span class="number">0xF1E51979</span>, <span class="number">0x2CA0B3C1</span>, <span class="number">0x4E823AF8</span>, <span class="number">0x93C79040</span>,</span><br><span class="line"><span class="number">0x95E7FA51</span>, <span class="number">0x48A250E9</span>, <span class="number">0x2A80D9D0</span>, <span class="number">0xF7C57368</span>, <span class="number">0xEEC5CBA2</span>, <span class="number">0x3380611A</span>, <span class="number">0x51A2E823</span>, <span class="number">0x8CE7429B</span>,</span><br><span class="line"><span class="number">0x63A399B7</span>, <span class="number">0xBEE6330F</span>, <span class="number">0xDCC4BA36</span>, <span class="number">0x0181108E</span>, <span class="number">0x1881A844</span>, <span class="number">0xC5C402FC</span>, <span class="number">0xA7E68BC5</span>, <span class="number">0x7AA3217D</span>,</span><br><span class="line"><span class="number">0x52A0C93F</span>, <span class="number">0x8FE56387</span>, <span class="number">0xEDC7EABE</span>, <span class="number">0x30824006</span>, <span class="number">0x2982F8CC</span>, <span class="number">0xF4C75274</span>, <span class="number">0x96E5DB4D</span>, <span class="number">0x4BA071F5</span>,</span><br><span class="line"><span class="number">0xA4E4AAD9</span>, <span class="number">0x79A10061</span>, <span class="number">0x1B838958</span>, <span class="number">0xC6C623E0</span>, <span class="number">0xDFC69B2A</span>, <span class="number">0x02833192</span>, <span class="number">0x60A1B8AB</span>, <span class="number">0xBDE41213</span>,</span><br><span class="line"><span class="number">0xBBC47802</span>, <span class="number">0x6681D2BA</span>, <span class="number">0x04A35B83</span>, <span class="number">0xD9E6F13B</span>, <span class="number">0xC0E649F1</span>, <span class="number">0x1DA3E349</span>, <span class="number">0x7F816A70</span>, <span class="number">0xA2C4C0C8</span>,</span><br><span class="line"><span class="number">0x4D801BE4</span>, <span class="number">0x90C5B15C</span>, <span class="number">0xF2E73865</span>, <span class="number">0x2FA292DD</span>, <span class="number">0x36A22A17</span>, <span class="number">0xEBE780AF</span>, <span class="number">0x89C50996</span>, <span class="number">0x5480A32E</span>,</span><br><span class="line"><span class="number">0x8585DDB4</span>, <span class="number">0x58C0770C</span>, <span class="number">0x3AE2FE35</span>, <span class="number">0xE7A7548D</span>, <span class="number">0xFEA7EC47</span>, <span class="number">0x23E246FF</span>, <span class="number">0x41C0CFC6</span>, <span class="number">0x9C85657E</span>,</span><br><span class="line"><span class="number">0x73C1BE52</span>, <span class="number">0xAE8414EA</span>, <span class="number">0xCCA69DD3</span>, <span class="number">0x11E3376B</span>, <span class="number">0x08E38FA1</span>, <span class="number">0xD5A62519</span>, <span class="number">0xB784AC20</span>, <span class="number">0x6AC10698</span>,</span><br><span class="line"><span class="number">0x6CE16C89</span>, <span class="number">0xB1A4C631</span>, <span class="number">0xD3864F08</span>, <span class="number">0x0EC3E5B0</span>, <span class="number">0x17C35D7A</span>, <span class="number">0xCA86F7C2</span>, <span class="number">0xA8A47EFB</span>, <span class="number">0x75E1D443</span>,</span><br><span class="line"><span class="number">0x9AA50F6F</span>, <span class="number">0x47E0A5D7</span>, <span class="number">0x25C22CEE</span>, <span class="number">0xF8878656</span>, <span class="number">0xE1873E9C</span>, <span class="number">0x3CC29424</span>, <span class="number">0x5EE01D1D</span>, <span class="number">0x83A5B7A5</span>,</span><br><span class="line"><span class="number">0xF90696D8</span>, <span class="number">0x24433C60</span>, <span class="number">0x4661B559</span>, <span class="number">0x9B241FE1</span>, <span class="number">0x8224A72B</span>, <span class="number">0x5F610D93</span>, <span class="number">0x3D4384AA</span>, <span class="number">0xE0062E12</span>,</span><br><span class="line"><span class="number">0x0F42F53E</span>, <span class="number">0xD2075F86</span>, <span class="number">0xB025D6BF</span>, <span class="number">0x6D607C07</span>, <span class="number">0x7460C4CD</span>, <span class="number">0xA9256E75</span>, <span class="number">0xCB07E74C</span>, <span class="number">0x16424DF4</span>,</span><br><span class="line"><span class="number">0x106227E5</span>, <span class="number">0xCD278D5D</span>, <span class="number">0xAF050464</span>, <span class="number">0x7240AEDC</span>, <span class="number">0x6B401616</span>, <span class="number">0xB605BCAE</span>, <span class="number">0xD4273597</span>, <span class="number">0x09629F2F</span>,</span><br><span class="line"><span class="number">0xE6264403</span>, <span class="number">0x3B63EEBB</span>, <span class="number">0x59416782</span>, <span class="number">0x8404CD3A</span>, <span class="number">0x9D0475F0</span>, <span class="number">0x4041DF48</span>, <span class="number">0x22635671</span>, <span class="number">0xFF26FCC9</span>,</span><br><span class="line"><span class="number">0x2E238253</span>, <span class="number">0xF36628EB</span>, <span class="number">0x9144A1D2</span>, <span class="number">0x4C010B6A</span>, <span class="number">0x5501B3A0</span>, <span class="number">0x88441918</span>, <span class="number">0xEA669021</span>, <span class="number">0x37233A99</span>,</span><br><span class="line"><span class="number">0xD867E1B5</span>, <span class="number">0x05224B0D</span>, <span class="number">0x6700C234</span>, <span class="number">0xBA45688C</span>, <span class="number">0xA345D046</span>, <span class="number">0x7E007AFE</span>, <span class="number">0x1C22F3C7</span>, <span class="number">0xC167597F</span>,</span><br><span class="line"><span class="number">0xC747336E</span>, <span class="number">0x1A0299D6</span>, <span class="number">0x782010EF</span>, <span class="number">0xA565BA57</span>, <span class="number">0xBC65029D</span>, <span class="number">0x6120A825</span>, <span class="number">0x0302211C</span>, <span class="number">0xDE478BA4</span>,</span><br><span class="line"><span class="number">0x31035088</span>, <span class="number">0xEC46FA30</span>, <span class="number">0x8E647309</span>, <span class="number">0x5321D9B1</span>, <span class="number">0x4A21617B</span>, <span class="number">0x9764CBC3</span>, <span class="number">0xF54642FA</span>, <span class="number">0x2803E842</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x38116FAC</span>, <span class="number">0x7022DF58</span>, <span class="number">0x4833B0F4</span>, <span class="number">0xE045BEB0</span>, <span class="number">0xD854D11C</span>, <span class="number">0x906761E8</span>, <span class="number">0xA8760E44</span>,</span><br><span class="line"><span class="number">0xC5670B91</span>, <span class="number">0xFD76643D</span>, <span class="number">0xB545D4C9</span>, <span class="number">0x8D54BB65</span>, <span class="number">0x2522B521</span>, <span class="number">0x1D33DA8D</span>, <span class="number">0x55006A79</span>, <span class="number">0x6D1105D5</span>,</span><br><span class="line"><span class="number">0x8F2261D3</span>, <span class="number">0xB7330E7F</span>, <span class="number">0xFF00BE8B</span>, <span class="number">0xC711D127</span>, <span class="number">0x6F67DF63</span>, <span class="number">0x5776B0CF</span>, <span class="number">0x1F45003B</span>, <span class="number">0x27546F97</span>,</span><br><span class="line"><span class="number">0x4A456A42</span>, <span class="number">0x725405EE</span>, <span class="number">0x3A67B51A</span>, <span class="number">0x0276DAB6</span>, <span class="number">0xAA00D4F2</span>, <span class="number">0x9211BB5E</span>, <span class="number">0xDA220BAA</span>, <span class="number">0xE2336406</span>,</span><br><span class="line"><span class="number">0x1BA8B557</span>, <span class="number">0x23B9DAFB</span>, <span class="number">0x6B8A6A0F</span>, <span class="number">0x539B05A3</span>, <span class="number">0xFBED0BE7</span>, <span class="number">0xC3FC644B</span>, <span class="number">0x8BCFD4BF</span>, <span class="number">0xB3DEBB13</span>,</span><br><span class="line"><span class="number">0xDECFBEC6</span>, <span class="number">0xE6DED16A</span>, <span class="number">0xAEED619E</span>, <span class="number">0x96FC0E32</span>, <span class="number">0x3E8A0076</span>, <span class="number">0x069B6FDA</span>, <span class="number">0x4EA8DF2E</span>, <span class="number">0x76B9B082</span>,</span><br><span class="line"><span class="number">0x948AD484</span>, <span class="number">0xAC9BBB28</span>, <span class="number">0xE4A80BDC</span>, <span class="number">0xDCB96470</span>, <span class="number">0x74CF6A34</span>, <span class="number">0x4CDE0598</span>, <span class="number">0x04EDB56C</span>, <span class="number">0x3CFCDAC0</span>,</span><br><span class="line"><span class="number">0x51EDDF15</span>, <span class="number">0x69FCB0B9</span>, <span class="number">0x21CF004D</span>, <span class="number">0x19DE6FE1</span>, <span class="number">0xB1A861A5</span>, <span class="number">0x89B90E09</span>, <span class="number">0xC18ABEFD</span>, <span class="number">0xF99BD151</span>,</span><br><span class="line"><span class="number">0x37516AAE</span>, <span class="number">0x0F400502</span>, <span class="number">0x4773B5F6</span>, <span class="number">0x7F62DA5A</span>, <span class="number">0xD714D41E</span>, <span class="number">0xEF05BBB2</span>, <span class="number">0xA7360B46</span>, <span class="number">0x9F2764EA</span>,</span><br><span class="line"><span class="number">0xF236613F</span>, <span class="number">0xCA270E93</span>, <span class="number">0x8214BE67</span>, <span class="number">0xBA05D1CB</span>, <span class="number">0x1273DF8F</span>, <span class="number">0x2A62B023</span>, <span class="number">0x625100D7</span>, <span class="number">0x5A406F7B</span>,</span><br><span class="line"><span class="number">0xB8730B7D</span>, <span class="number">0x806264D1</span>, <span class="number">0xC851D425</span>, <span class="number">0xF040BB89</span>, <span class="number">0x5836B5CD</span>, <span class="number">0x6027DA61</span>, <span class="number">0x28146A95</span>, <span class="number">0x10050539</span>,</span><br><span class="line"><span class="number">0x7D1400EC</span>, <span class="number">0x45056F40</span>, <span class="number">0x0D36DFB4</span>, <span class="number">0x3527B018</span>, <span class="number">0x9D51BE5C</span>, <span class="number">0xA540D1F0</span>, <span class="number">0xED736104</span>, <span class="number">0xD5620EA8</span>,</span><br><span class="line"><span class="number">0x2CF9DFF9</span>, <span class="number">0x14E8B055</span>, <span class="number">0x5CDB00A1</span>, <span class="number">0x64CA6F0D</span>, <span class="number">0xCCBC6149</span>, <span class="number">0xF4AD0EE5</span>, <span class="number">0xBC9EBE11</span>, <span class="number">0x848FD1BD</span>,</span><br><span class="line"><span class="number">0xE99ED468</span>, <span class="number">0xD18FBBC4</span>, <span class="number">0x99BC0B30</span>, <span class="number">0xA1AD649C</span>, <span class="number">0x09DB6AD8</span>, <span class="number">0x31CA0574</span>, <span class="number">0x79F9B580</span>, <span class="number">0x41E8DA2C</span>,</span><br><span class="line"><span class="number">0xA3DBBE2A</span>, <span class="number">0x9BCAD186</span>, <span class="number">0xD3F96172</span>, <span class="number">0xEBE80EDE</span>, <span class="number">0x439E009A</span>, <span class="number">0x7B8F6F36</span>, <span class="number">0x33BCDFC2</span>, <span class="number">0x0BADB06E</span>,</span><br><span class="line"><span class="number">0x66BCB5BB</span>, <span class="number">0x5EADDA17</span>, <span class="number">0x169E6AE3</span>, <span class="number">0x2E8F054F</span>, <span class="number">0x86F90B0B</span>, <span class="number">0xBEE864A7</span>, <span class="number">0xF6DBD453</span>, <span class="number">0xCECABBFF</span>,</span><br><span class="line"><span class="number">0x6EA2D55C</span>, <span class="number">0x56B3BAF0</span>, <span class="number">0x1E800A04</span>, <span class="number">0x269165A8</span>, <span class="number">0x8EE76BEC</span>, <span class="number">0xB6F60440</span>, <span class="number">0xFEC5B4B4</span>, <span class="number">0xC6D4DB18</span>,</span><br><span class="line"><span class="number">0xABC5DECD</span>, <span class="number">0x93D4B161</span>, <span class="number">0xDBE70195</span>, <span class="number">0xE3F66E39</span>, <span class="number">0x4B80607D</span>, <span class="number">0x73910FD1</span>, <span class="number">0x3BA2BF25</span>, <span class="number">0x03B3D089</span>,</span><br><span class="line"><span class="number">0xE180B48F</span>, <span class="number">0xD991DB23</span>, <span class="number">0x91A26BD7</span>, <span class="number">0xA9B3047B</span>, <span class="number">0x01C50A3F</span>, <span class="number">0x39D46593</span>, <span class="number">0x71E7D567</span>, <span class="number">0x49F6BACB</span>,</span><br><span class="line"><span class="number">0x24E7BF1E</span>, <span class="number">0x1CF6D0B2</span>, <span class="number">0x54C56046</span>, <span class="number">0x6CD40FEA</span>, <span class="number">0xC4A201AE</span>, <span class="number">0xFCB36E02</span>, <span class="number">0xB480DEF6</span>, <span class="number">0x8C91B15A</span>,</span><br><span class="line"><span class="number">0x750A600B</span>, <span class="number">0x4D1B0FA7</span>, <span class="number">0x0528BF53</span>, <span class="number">0x3D39D0FF</span>, <span class="number">0x954FDEBB</span>, <span class="number">0xAD5EB117</span>, <span class="number">0xE56D01E3</span>, <span class="number">0xDD7C6E4F</span>,</span><br><span class="line"><span class="number">0xB06D6B9A</span>, <span class="number">0x887C0436</span>, <span class="number">0xC04FB4C2</span>, <span class="number">0xF85EDB6E</span>, <span class="number">0x5028D52A</span>, <span class="number">0x6839BA86</span>, <span class="number">0x200A0A72</span>, <span class="number">0x181B65DE</span>,</span><br><span class="line"><span class="number">0xFA2801D8</span>, <span class="number">0xC2396E74</span>, <span class="number">0x8A0ADE80</span>, <span class="number">0xB21BB12C</span>, <span class="number">0x1A6DBF68</span>, <span class="number">0x227CD0C4</span>, <span class="number">0x6A4F6030</span>, <span class="number">0x525E0F9C</span>,</span><br><span class="line"><span class="number">0x3F4F0A49</span>, <span class="number">0x075E65E5</span>, <span class="number">0x4F6DD511</span>, <span class="number">0x777CBABD</span>, <span class="number">0xDF0AB4F9</span>, <span class="number">0xE71BDB55</span>, <span class="number">0xAF286BA1</span>, <span class="number">0x9739040D</span>,</span><br><span class="line"><span class="number">0x59F3BFF2</span>, <span class="number">0x61E2D05E</span>, <span class="number">0x29D160AA</span>, <span class="number">0x11C00F06</span>, <span class="number">0xB9B60142</span>, <span class="number">0x81A76EEE</span>, <span class="number">0xC994DE1A</span>, <span class="number">0xF185B1B6</span>,</span><br><span class="line"><span class="number">0x9C94B463</span>, <span class="number">0xA485DBCF</span>, <span class="number">0xECB66B3B</span>, <span class="number">0xD4A70497</span>, <span class="number">0x7CD10AD3</span>, <span class="number">0x44C0657F</span>, <span class="number">0x0CF3D58B</span>, <span class="number">0x34E2BA27</span>,</span><br><span class="line"><span class="number">0xD6D1DE21</span>, <span class="number">0xEEC0B18D</span>, <span class="number">0xA6F30179</span>, <span class="number">0x9EE26ED5</span>, <span class="number">0x36946091</span>, <span class="number">0x0E850F3D</span>, <span class="number">0x46B6BFC9</span>, <span class="number">0x7EA7D065</span>,</span><br><span class="line"><span class="number">0x13B6D5B0</span>, <span class="number">0x2BA7BA1C</span>, <span class="number">0x63940AE8</span>, <span class="number">0x5B856544</span>, <span class="number">0xF3F36B00</span>, <span class="number">0xCBE204AC</span>, <span class="number">0x83D1B458</span>, <span class="number">0xBBC0DBF4</span>,</span><br><span class="line"><span class="number">0x425B0AA5</span>, <span class="number">0x7A4A6509</span>, <span class="number">0x3279D5FD</span>, <span class="number">0x0A68BA51</span>, <span class="number">0xA21EB415</span>, <span class="number">0x9A0FDBB9</span>, <span class="number">0xD23C6B4D</span>, <span class="number">0xEA2D04E1</span>,</span><br><span class="line"><span class="number">0x873C0134</span>, <span class="number">0xBF2D6E98</span>, <span class="number">0xF71EDE6C</span>, <span class="number">0xCF0FB1C0</span>, <span class="number">0x6779BF84</span>, <span class="number">0x5F68D028</span>, <span class="number">0x175B60DC</span>, <span class="number">0x2F4A0F70</span>,</span><br><span class="line"><span class="number">0xCD796B76</span>, <span class="number">0xF56804DA</span>, <span class="number">0xBD5BB42E</span>, <span class="number">0x854ADB82</span>, <span class="number">0x2D3CD5C6</span>, <span class="number">0x152DBA6A</span>, <span class="number">0x5D1E0A9E</span>, <span class="number">0x650F6532</span>,</span><br><span class="line"><span class="number">0x081E60E7</span>, <span class="number">0x300F0F4B</span>, <span class="number">0x783CBFBF</span>, <span class="number">0x402DD013</span>, <span class="number">0xE85BDE57</span>, <span class="number">0xD04AB1FB</span>, <span class="number">0x9879010F</span>, <span class="number">0xA0686EA3</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0xEF306B19</span>, <span class="number">0xDB8CA0C3</span>, <span class="number">0x34BCCBDA</span>, <span class="number">0xB2F53777</span>, <span class="number">0x5DC55C6E</span>, <span class="number">0x697997B4</span>, <span class="number">0x8649FCAD</span>,</span><br><span class="line"><span class="number">0x6006181F</span>, <span class="number">0x8F367306</span>, <span class="number">0xBB8AB8DC</span>, <span class="number">0x54BAD3C5</span>, <span class="number">0xD2F32F68</span>, <span class="number">0x3DC34471</span>, <span class="number">0x097F8FAB</span>, <span class="number">0xE64FE4B2</span>,</span><br><span class="line"><span class="number">0xC00C303E</span>, <span class="number">0x2F3C5B27</span>, <span class="number">0x1B8090FD</span>, <span class="number">0xF4B0FBE4</span>, <span class="number">0x72F90749</span>, <span class="number">0x9DC96C50</span>, <span class="number">0xA975A78A</span>, <span class="number">0x4645CC93</span>,</span><br><span class="line"><span class="number">0xA00A2821</span>, <span class="number">0x4F3A4338</span>, <span class="number">0x7B8688E2</span>, <span class="number">0x94B6E3FB</span>, <span class="number">0x12FF1F56</span>, <span class="number">0xFDCF744F</span>, <span class="number">0xC973BF95</span>, <span class="number">0x2643D48C</span>,</span><br><span class="line"><span class="number">0x85F4168D</span>, <span class="number">0x6AC47D94</span>, <span class="number">0x5E78B64E</span>, <span class="number">0xB148DD57</span>, <span class="number">0x370121FA</span>, <span class="number">0xD8314AE3</span>, <span class="number">0xEC8D8139</span>, <span class="number">0x03BDEA20</span>,</span><br><span class="line"><span class="number">0xE5F20E92</span>, <span class="number">0x0AC2658B</span>, <span class="number">0x3E7EAE51</span>, <span class="number">0xD14EC548</span>, <span class="number">0x570739E5</span>, <span class="number">0xB83752FC</span>, <span class="number">0x8C8B9926</span>, <span class="number">0x63BBF23F</span>,</span><br><span class="line"><span class="number">0x45F826B3</span>, <span class="number">0xAAC84DAA</span>, <span class="number">0x9E748670</span>, <span class="number">0x7144ED69</span>, <span class="number">0xF70D11C4</span>, <span class="number">0x183D7ADD</span>, <span class="number">0x2C81B107</span>, <span class="number">0xC3B1DA1E</span>,</span><br><span class="line"><span class="number">0x25FE3EAC</span>, <span class="number">0xCACE55B5</span>, <span class="number">0xFE729E6F</span>, <span class="number">0x1142F576</span>, <span class="number">0x970B09DB</span>, <span class="number">0x783B62C2</span>, <span class="number">0x4C87A918</span>, <span class="number">0xA3B7C201</span>,</span><br><span class="line"><span class="number">0x0E045BEB</span>, <span class="number">0xE13430F2</span>, <span class="number">0xD588FB28</span>, <span class="number">0x3AB89031</span>, <span class="number">0xBCF16C9C</span>, <span class="number">0x53C10785</span>, <span class="number">0x677DCC5F</span>, <span class="number">0x884DA746</span>,</span><br><span class="line"><span class="number">0x6E0243F4</span>, <span class="number">0x813228ED</span>, <span class="number">0xB58EE337</span>, <span class="number">0x5ABE882E</span>, <span class="number">0xDCF77483</span>, <span class="number">0x33C71F9A</span>, <span class="number">0x077BD440</span>, <span class="number">0xE84BBF59</span>,</span><br><span class="line"><span class="number">0xCE086BD5</span>, <span class="number">0x213800CC</span>, <span class="number">0x1584CB16</span>, <span class="number">0xFAB4A00F</span>, <span class="number">0x7CFD5CA2</span>, <span class="number">0x93CD37BB</span>, <span class="number">0xA771FC61</span>, <span class="number">0x48419778</span>,</span><br><span class="line"><span class="number">0xAE0E73CA</span>, <span class="number">0x413E18D3</span>, <span class="number">0x7582D309</span>, <span class="number">0x9AB2B810</span>, <span class="number">0x1CFB44BD</span>, <span class="number">0xF3CB2FA4</span>, <span class="number">0xC777E47E</span>, <span class="number">0x28478F67</span>,</span><br><span class="line"><span class="number">0x8BF04D66</span>, <span class="number">0x64C0267F</span>, <span class="number">0x507CEDA5</span>, <span class="number">0xBF4C86BC</span>, <span class="number">0x39057A11</span>, <span class="number">0xD6351108</span>, <span class="number">0xE289DAD2</span>, <span class="number">0x0DB9B1CB</span>,</span><br><span class="line"><span class="number">0xEBF65579</span>, <span class="number">0x04C63E60</span>, <span class="number">0x307AF5BA</span>, <span class="number">0xDF4A9EA3</span>, <span class="number">0x5903620E</span>, <span class="number">0xB6330917</span>, <span class="number">0x828FC2CD</span>, <span class="number">0x6DBFA9D4</span>,</span><br><span class="line"><span class="number">0x4BFC7D58</span>, <span class="number">0xA4CC1641</span>, <span class="number">0x9070DD9B</span>, <span class="number">0x7F40B682</span>, <span class="number">0xF9094A2F</span>, <span class="number">0x16392136</span>, <span class="number">0x2285EAEC</span>, <span class="number">0xCDB581F5</span>,</span><br><span class="line"><span class="number">0x2BFA6547</span>, <span class="number">0xC4CA0E5E</span>, <span class="number">0xF076C584</span>, <span class="number">0x1F46AE9D</span>, <span class="number">0x990F5230</span>, <span class="number">0x763F3929</span>, <span class="number">0x4283F2F3</span>, <span class="number">0xADB399EA</span>,</span><br><span class="line"><span class="number">0x1C08B7D6</span>, <span class="number">0xF338DCCF</span>, <span class="number">0xC7841715</span>, <span class="number">0x28B47C0C</span>, <span class="number">0xAEFD80A1</span>, <span class="number">0x41CDEBB8</span>, <span class="number">0x75712062</span>, <span class="number">0x9A414B7B</span>,</span><br><span class="line"><span class="number">0x7C0EAFC9</span>, <span class="number">0x933EC4D0</span>, <span class="number">0xA7820F0A</span>, <span class="number">0x48B26413</span>, <span class="number">0xCEFB98BE</span>, <span class="number">0x21CBF3A7</span>, <span class="number">0x1577387D</span>, <span class="number">0xFA475364</span>,</span><br><span class="line"><span class="number">0xDC0487E8</span>, <span class="number">0x3334ECF1</span>, <span class="number">0x0788272B</span>, <span class="number">0xE8B84C32</span>, <span class="number">0x6EF1B09F</span>, <span class="number">0x81C1DB86</span>, <span class="number">0xB57D105C</span>, <span class="number">0x5A4D7B45</span>,</span><br><span class="line"><span class="number">0xBC029FF7</span>, <span class="number">0x5332F4EE</span>, <span class="number">0x678E3F34</span>, <span class="number">0x88BE542D</span>, <span class="number">0x0EF7A880</span>, <span class="number">0xE1C7C399</span>, <span class="number">0xD57B0843</span>, <span class="number">0x3A4B635A</span>,</span><br><span class="line"><span class="number">0x99FCA15B</span>, <span class="number">0x76CCCA42</span>, <span class="number">0x42700198</span>, <span class="number">0xAD406A81</span>, <span class="number">0x2B09962C</span>, <span class="number">0xC439FD35</span>, <span class="number">0xF08536EF</span>, <span class="number">0x1FB55DF6</span>,</span><br><span class="line"><span class="number">0xF9FAB944</span>, <span class="number">0x16CAD25D</span>, <span class="number">0x22761987</span>, <span class="number">0xCD46729E</span>, <span class="number">0x4B0F8E33</span>, <span class="number">0xA43FE52A</span>, <span class="number">0x90832EF0</span>, <span class="number">0x7FB345E9</span>,</span><br><span class="line"><span class="number">0x59F09165</span>, <span class="number">0xB6C0FA7C</span>, <span class="number">0x827C31A6</span>, <span class="number">0x6D4C5ABF</span>, <span class="number">0xEB05A612</span>, <span class="number">0x0435CD0B</span>, <span class="number">0x308906D1</span>, <span class="number">0xDFB96DC8</span>,</span><br><span class="line"><span class="number">0x39F6897A</span>, <span class="number">0xD6C6E263</span>, <span class="number">0xE27A29B9</span>, <span class="number">0x0D4A42A0</span>, <span class="number">0x8B03BE0D</span>, <span class="number">0x6433D514</span>, <span class="number">0x508F1ECE</span>, <span class="number">0xBFBF75D7</span>,</span><br><span class="line"><span class="number">0x120CEC3D</span>, <span class="number">0xFD3C8724</span>, <span class="number">0xC9804CFE</span>, <span class="number">0x26B027E7</span>, <span class="number">0xA0F9DB4A</span>, <span class="number">0x4FC9B053</span>, <span class="number">0x7B757B89</span>, <span class="number">0x94451090</span>,</span><br><span class="line"><span class="number">0x720AF422</span>, <span class="number">0x9D3A9F3B</span>, <span class="number">0xA98654E1</span>, <span class="number">0x46B63FF8</span>, <span class="number">0xC0FFC355</span>, <span class="number">0x2FCFA84C</span>, <span class="number">0x1B736396</span>, <span class="number">0xF443088F</span>,</span><br><span class="line"><span class="number">0xD200DC03</span>, <span class="number">0x3D30B71A</span>, <span class="number">0x098C7CC0</span>, <span class="number">0xE6BC17D9</span>, <span class="number">0x60F5EB74</span>, <span class="number">0x8FC5806D</span>, <span class="number">0xBB794BB7</span>, <span class="number">0x544920AE</span>,</span><br><span class="line"><span class="number">0xB206C41C</span>, <span class="number">0x5D36AF05</span>, <span class="number">0x698A64DF</span>, <span class="number">0x86BA0FC6</span>, <span class="number">0x00F3F36B</span>, <span class="number">0xEFC39872</span>, <span class="number">0xDB7F53A8</span>, <span class="number">0x344F38B1</span>,</span><br><span class="line"><span class="number">0x97F8FAB0</span>, <span class="number">0x78C891A9</span>, <span class="number">0x4C745A73</span>, <span class="number">0xA344316A</span>, <span class="number">0x250DCDC7</span>, <span class="number">0xCA3DA6DE</span>, <span class="number">0xFE816D04</span>, <span class="number">0x11B1061D</span>,</span><br><span class="line"><span class="number">0xF7FEE2AF</span>, <span class="number">0x18CE89B6</span>, <span class="number">0x2C72426C</span>, <span class="number">0xC3422975</span>, <span class="number">0x450BD5D8</span>, <span class="number">0xAA3BBEC1</span>, <span class="number">0x9E87751B</span>, <span class="number">0x71B71E02</span>,</span><br><span class="line"><span class="number">0x57F4CA8E</span>, <span class="number">0xB8C4A197</span>, <span class="number">0x8C786A4D</span>, <span class="number">0x63480154</span>, <span class="number">0xE501FDF9</span>, <span class="number">0x0A3196E0</span>, <span class="number">0x3E8D5D3A</span>, <span class="number">0xD1BD3623</span>,</span><br><span class="line"><span class="number">0x37F2D291</span>, <span class="number">0xD8C2B988</span>, <span class="number">0xEC7E7252</span>, <span class="number">0x034E194B</span>, <span class="number">0x8507E5E6</span>, <span class="number">0x6A378EFF</span>, <span class="number">0x5E8B4525</span>, <span class="number">0xB1BB2E3C</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x68032CC8</span>, <span class="number">0xD0065990</span>, <span class="number">0xB8057558</span>, <span class="number">0xA5E0C5D1</span>, <span class="number">0xCDE3E919</span>, <span class="number">0x75E69C41</span>, <span class="number">0x1DE5B089</span>,</span><br><span class="line"><span class="number">0x4E2DFD53</span>, <span class="number">0x262ED19B</span>, <span class="number">0x9E2BA4C3</span>, <span class="number">0xF628880B</span>, <span class="number">0xEBCD3882</span>, <span class="number">0x83CE144A</span>, <span class="number">0x3BCB6112</span>, <span class="number">0x53C84DDA</span>,</span><br><span class="line"><span class="number">0x9C5BFAA6</span>, <span class="number">0xF458D66E</span>, <span class="number">0x4C5DA336</span>, <span class="number">0x245E8FFE</span>, <span class="number">0x39BB3F77</span>, <span class="number">0x51B813BF</span>, <span class="number">0xE9BD66E7</span>, <span class="number">0x81BE4A2F</span>,</span><br><span class="line"><span class="number">0xD27607F5</span>, <span class="number">0xBA752B3D</span>, <span class="number">0x02705E65</span>, <span class="number">0x6A7372AD</span>, <span class="number">0x7796C224</span>, <span class="number">0x1F95EEEC</span>, <span class="number">0xA7909BB4</span>, <span class="number">0xCF93B77C</span>,</span><br><span class="line"><span class="number">0x3D5B83BD</span>, <span class="number">0x5558AF75</span>, <span class="number">0xED5DDA2D</span>, <span class="number">0x855EF6E5</span>, <span class="number">0x98BB466C</span>, <span class="number">0xF0B86AA4</span>, <span class="number">0x48BD1FFC</span>, <span class="number">0x20BE3334</span>,</span><br><span class="line"><span class="number">0x73767EEE</span>, <span class="number">0x1B755226</span>, <span class="number">0xA370277E</span>, <span class="number">0xCB730BB6</span>, <span class="number">0xD696BB3F</span>, <span class="number">0xBE9597F7</span>, <span class="number">0x0690E2AF</span>, <span class="number">0x6E93CE67</span>,</span><br><span class="line"><span class="number">0xA100791B</span>, <span class="number">0xC90355D3</span>, <span class="number">0x7106208B</span>, <span class="number">0x19050C43</span>, <span class="number">0x04E0BCCA</span>, <span class="number">0x6CE39002</span>, <span class="number">0xD4E6E55A</span>, <span class="number">0xBCE5C992</span>,</span><br><span class="line"><span class="number">0xEF2D8448</span>, <span class="number">0x872EA880</span>, <span class="number">0x3F2BDDD8</span>, <span class="number">0x5728F110</span>, <span class="number">0x4ACD4199</span>, <span class="number">0x22CE6D51</span>, <span class="number">0x9ACB1809</span>, <span class="number">0xF2C834C1</span>,</span><br><span class="line"><span class="number">0x7AB7077A</span>, <span class="number">0x12B42BB2</span>, <span class="number">0xAAB15EEA</span>, <span class="number">0xC2B27222</span>, <span class="number">0xDF57C2AB</span>, <span class="number">0xB754EE63</span>, <span class="number">0x0F519B3B</span>, <span class="number">0x6752B7F3</span>,</span><br><span class="line"><span class="number">0x349AFA29</span>, <span class="number">0x5C99D6E1</span>, <span class="number">0xE49CA3B9</span>, <span class="number">0x8C9F8F71</span>, <span class="number">0x917A3FF8</span>, <span class="number">0xF9791330</span>, <span class="number">0x417C6668</span>, <span class="number">0x297F4AA0</span>,</span><br><span class="line"><span class="number">0xE6ECFDDC</span>, <span class="number">0x8EEFD114</span>, <span class="number">0x36EAA44C</span>, <span class="number">0x5EE98884</span>, <span class="number">0x430C380D</span>, <span class="number">0x2B0F14C5</span>, <span class="number">0x930A619D</span>, <span class="number">0xFB094D55</span>,</span><br><span class="line"><span class="number">0xA8C1008F</span>, <span class="number">0xC0C22C47</span>, <span class="number">0x78C7591F</span>, <span class="number">0x10C475D7</span>, <span class="number">0x0D21C55E</span>, <span class="number">0x6522E996</span>, <span class="number">0xDD279CCE</span>, <span class="number">0xB524B006</span>,</span><br><span class="line"><span class="number">0x47EC84C7</span>, <span class="number">0x2FEFA80F</span>, <span class="number">0x97EADD57</span>, <span class="number">0xFFE9F19F</span>, <span class="number">0xE20C4116</span>, <span class="number">0x8A0F6DDE</span>, <span class="number">0x320A1886</span>, <span class="number">0x5A09344E</span>,</span><br><span class="line"><span class="number">0x09C17994</span>, <span class="number">0x61C2555C</span>, <span class="number">0xD9C72004</span>, <span class="number">0xB1C40CCC</span>, <span class="number">0xAC21BC45</span>, <span class="number">0xC422908D</span>, <span class="number">0x7C27E5D5</span>, <span class="number">0x1424C91D</span>,</span><br><span class="line"><span class="number">0xDBB77E61</span>, <span class="number">0xB3B452A9</span>, <span class="number">0x0BB127F1</span>, <span class="number">0x63B20B39</span>, <span class="number">0x7E57BBB0</span>, <span class="number">0x16549778</span>, <span class="number">0xAE51E220</span>, <span class="number">0xC652CEE8</span>,</span><br><span class="line"><span class="number">0x959A8332</span>, <span class="number">0xFD99AFFA</span>, <span class="number">0x459CDAA2</span>, <span class="number">0x2D9FF66A</span>, <span class="number">0x307A46E3</span>, <span class="number">0x58796A2B</span>, <span class="number">0xE07C1F73</span>, <span class="number">0x887F33BB</span>,</span><br><span class="line"><span class="number">0xF56E0EF4</span>, <span class="number">0x9D6D223C</span>, <span class="number">0x25685764</span>, <span class="number">0x4D6B7BAC</span>, <span class="number">0x508ECB25</span>, <span class="number">0x388DE7ED</span>, <span class="number">0x808892B5</span>, <span class="number">0xE88BBE7D</span>,</span><br><span class="line"><span class="number">0xBB43F3A7</span>, <span class="number">0xD340DF6F</span>, <span class="number">0x6B45AA37</span>, <span class="number">0x034686FF</span>, <span class="number">0x1EA33676</span>, <span class="number">0x76A01ABE</span>, <span class="number">0xCEA56FE6</span>, <span class="number">0xA6A6432E</span>,</span><br><span class="line"><span class="number">0x6935F452</span>, <span class="number">0x0136D89A</span>, <span class="number">0xB933ADC2</span>, <span class="number">0xD130810A</span>, <span class="number">0xCCD53183</span>, <span class="number">0xA4D61D4B</span>, <span class="number">0x1CD36813</span>, <span class="number">0x74D044DB</span>,</span><br><span class="line"><span class="number">0x27180901</span>, <span class="number">0x4F1B25C9</span>, <span class="number">0xF71E5091</span>, <span class="number">0x9F1D7C59</span>, <span class="number">0x82F8CCD0</span>, <span class="number">0xEAFBE018</span>, <span class="number">0x52FE9540</span>, <span class="number">0x3AFDB988</span>,</span><br><span class="line"><span class="number">0xC8358D49</span>, <span class="number">0xA036A181</span>, <span class="number">0x1833D4D9</span>, <span class="number">0x7030F811</span>, <span class="number">0x6DD54898</span>, <span class="number">0x05D66450</span>, <span class="number">0xBDD31108</span>, <span class="number">0xD5D03DC0</span>,</span><br><span class="line"><span class="number">0x8618701A</span>, <span class="number">0xEE1B5CD2</span>, <span class="number">0x561E298A</span>, <span class="number">0x3E1D0542</span>, <span class="number">0x23F8B5CB</span>, <span class="number">0x4BFB9903</span>, <span class="number">0xF3FEEC5B</span>, <span class="number">0x9BFDC093</span>,</span><br><span class="line"><span class="number">0x546E77EF</span>, <span class="number">0x3C6D5B27</span>, <span class="number">0x84682E7F</span>, <span class="number">0xEC6B02B7</span>, <span class="number">0xF18EB23E</span>, <span class="number">0x998D9EF6</span>, <span class="number">0x2188EBAE</span>, <span class="number">0x498BC766</span>,</span><br><span class="line"><span class="number">0x1A438ABC</span>, <span class="number">0x7240A674</span>, <span class="number">0xCA45D32C</span>, <span class="number">0xA246FFE4</span>, <span class="number">0xBFA34F6D</span>, <span class="number">0xD7A063A5</span>, <span class="number">0x6FA516FD</span>, <span class="number">0x07A63A35</span>,</span><br><span class="line"><span class="number">0x8FD9098E</span>, <span class="number">0xE7DA2546</span>, <span class="number">0x5FDF501E</span>, <span class="number">0x37DC7CD6</span>, <span class="number">0x2A39CC5F</span>, <span class="number">0x423AE097</span>, <span class="number">0xFA3F95CF</span>, <span class="number">0x923CB907</span>,</span><br><span class="line"><span class="number">0xC1F4F4DD</span>, <span class="number">0xA9F7D815</span>, <span class="number">0x11F2AD4D</span>, <span class="number">0x79F18185</span>, <span class="number">0x6414310C</span>, <span class="number">0x0C171DC4</span>, <span class="number">0xB412689C</span>, <span class="number">0xDC114454</span>,</span><br><span class="line"><span class="number">0x1382F328</span>, <span class="number">0x7B81DFE0</span>, <span class="number">0xC384AAB8</span>, <span class="number">0xAB878670</span>, <span class="number">0xB66236F9</span>, <span class="number">0xDE611A31</span>, <span class="number">0x66646F69</span>, <span class="number">0x0E6743A1</span>,</span><br><span class="line"><span class="number">0x5DAF0E7B</span>, <span class="number">0x35AC22B3</span>, <span class="number">0x8DA957EB</span>, <span class="number">0xE5AA7B23</span>, <span class="number">0xF84FCBAA</span>, <span class="number">0x904CE762</span>, <span class="number">0x2849923A</span>, <span class="number">0x404ABEF2</span>,</span><br><span class="line"><span class="number">0xB2828A33</span>, <span class="number">0xDA81A6FB</span>, <span class="number">0x6284D3A3</span>, <span class="number">0x0A87FF6B</span>, <span class="number">0x17624FE2</span>, <span class="number">0x7F61632A</span>, <span class="number">0xC7641672</span>, <span class="number">0xAF673ABA</span>,</span><br><span class="line"><span class="number">0xFCAF7760</span>, <span class="number">0x94AC5BA8</span>, <span class="number">0x2CA92EF0</span>, <span class="number">0x44AA0238</span>, <span class="number">0x594FB2B1</span>, <span class="number">0x314C9E79</span>, <span class="number">0x8949EB21</span>, <span class="number">0xE14AC7E9</span>,</span><br><span class="line"><span class="number">0x2ED97095</span>, <span class="number">0x46DA5C5D</span>, <span class="number">0xFEDF2905</span>, <span class="number">0x96DC05CD</span>, <span class="number">0x8B39B544</span>, <span class="number">0xE33A998C</span>, <span class="number">0x5B3FECD4</span>, <span class="number">0x333CC01C</span>,</span><br><span class="line"><span class="number">0x60F48DC6</span>, <span class="number">0x08F7A10E</span>, <span class="number">0xB0F2D456</span>, <span class="number">0xD8F1F89E</span>, <span class="number">0xC5144817</span>, <span class="number">0xAD1764DF</span>, <span class="number">0x15121187</span>, <span class="number">0x7D113D4F</span>,</span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x493C7D27</span>, <span class="number">0x9278FA4E</span>, <span class="number">0xDB448769</span>, <span class="number">0x211D826D</span>, <span class="number">0x6821FF4A</span>, <span class="number">0xB3657823</span>, <span class="number">0xFA590504</span>,</span><br><span class="line"><span class="number">0x423B04DA</span>, <span class="number">0x0B0779FD</span>, <span class="number">0xD043FE94</span>, <span class="number">0x997F83B3</span>, <span class="number">0x632686B7</span>, <span class="number">0x2A1AFB90</span>, <span class="number">0xF15E7CF9</span>, <span class="number">0xB86201DE</span>,</span><br><span class="line"><span class="number">0x847609B4</span>, <span class="number">0xCD4A7493</span>, <span class="number">0x160EF3FA</span>, <span class="number">0x5F328EDD</span>, <span class="number">0xA56B8BD9</span>, <span class="number">0xEC57F6FE</span>, <span class="number">0x37137197</span>, <span class="number">0x7E2F0CB0</span>,</span><br><span class="line"><span class="number">0xC64D0D6E</span>, <span class="number">0x8F717049</span>, <span class="number">0x5435F720</span>, <span class="number">0x1D098A07</span>, <span class="number">0xE7508F03</span>, <span class="number">0xAE6CF224</span>, <span class="number">0x7528754D</span>, <span class="number">0x3C14086A</span>,</span><br><span class="line"><span class="number">0x0D006599</span>, <span class="number">0x443C18BE</span>, <span class="number">0x9F789FD7</span>, <span class="number">0xD644E2F0</span>, <span class="number">0x2C1DE7F4</span>, <span class="number">0x65219AD3</span>, <span class="number">0xBE651DBA</span>, <span class="number">0xF759609D</span>,</span><br><span class="line"><span class="number">0x4F3B6143</span>, <span class="number">0x06071C64</span>, <span class="number">0xDD439B0D</span>, <span class="number">0x947FE62A</span>, <span class="number">0x6E26E32E</span>, <span class="number">0x271A9E09</span>, <span class="number">0xFC5E1960</span>, <span class="number">0xB5626447</span>,</span><br><span class="line"><span class="number">0x89766C2D</span>, <span class="number">0xC04A110A</span>, <span class="number">0x1B0E9663</span>, <span class="number">0x5232EB44</span>, <span class="number">0xA86BEE40</span>, <span class="number">0xE1579367</span>, <span class="number">0x3A13140E</span>, <span class="number">0x732F6929</span>,</span><br><span class="line"><span class="number">0xCB4D68F7</span>, <span class="number">0x827115D0</span>, <span class="number">0x593592B9</span>, <span class="number">0x1009EF9E</span>, <span class="number">0xEA50EA9A</span>, <span class="number">0xA36C97BD</span>, <span class="number">0x782810D4</span>, <span class="number">0x31146DF3</span>,</span><br><span class="line"><span class="number">0x1A00CB32</span>, <span class="number">0x533CB615</span>, <span class="number">0x8878317C</span>, <span class="number">0xC1444C5B</span>, <span class="number">0x3B1D495F</span>, <span class="number">0x72213478</span>, <span class="number">0xA965B311</span>, <span class="number">0xE059CE36</span>,</span><br><span class="line"><span class="number">0x583BCFE8</span>, <span class="number">0x1107B2CF</span>, <span class="number">0xCA4335A6</span>, <span class="number">0x837F4881</span>, <span class="number">0x79264D85</span>, <span class="number">0x301A30A2</span>, <span class="number">0xEB5EB7CB</span>, <span class="number">0xA262CAEC</span>,</span><br><span class="line"><span class="number">0x9E76C286</span>, <span class="number">0xD74ABFA1</span>, <span class="number">0x0C0E38C8</span>, <span class="number">0x453245EF</span>, <span class="number">0xBF6B40EB</span>, <span class="number">0xF6573DCC</span>, <span class="number">0x2D13BAA5</span>, <span class="number">0x642FC782</span>,</span><br><span class="line"><span class="number">0xDC4DC65C</span>, <span class="number">0x9571BB7B</span>, <span class="number">0x4E353C12</span>, <span class="number">0x07094135</span>, <span class="number">0xFD504431</span>, <span class="number">0xB46C3916</span>, <span class="number">0x6F28BE7F</span>, <span class="number">0x2614C358</span>,</span><br><span class="line"><span class="number">0x1700AEAB</span>, <span class="number">0x5E3CD38C</span>, <span class="number">0x857854E5</span>, <span class="number">0xCC4429C2</span>, <span class="number">0x361D2CC6</span>, <span class="number">0x7F2151E1</span>, <span class="number">0xA465D688</span>, <span class="number">0xED59ABAF</span>,</span><br><span class="line"><span class="number">0x553BAA71</span>, <span class="number">0x1C07D756</span>, <span class="number">0xC743503F</span>, <span class="number">0x8E7F2D18</span>, <span class="number">0x7426281C</span>, <span class="number">0x3D1A553B</span>, <span class="number">0xE65ED252</span>, <span class="number">0xAF62AF75</span>,</span><br><span class="line"><span class="number">0x9376A71F</span>, <span class="number">0xDA4ADA38</span>, <span class="number">0x010E5D51</span>, <span class="number">0x48322076</span>, <span class="number">0xB26B2572</span>, <span class="number">0xFB575855</span>, <span class="number">0x2013DF3C</span>, <span class="number">0x692FA21B</span>,</span><br><span class="line"><span class="number">0xD14DA3C5</span>, <span class="number">0x9871DEE2</span>, <span class="number">0x4335598B</span>, <span class="number">0x0A0924AC</span>, <span class="number">0xF05021A8</span>, <span class="number">0xB96C5C8F</span>, <span class="number">0x6228DBE6</span>, <span class="number">0x2B14A6C1</span>,</span><br><span class="line"><span class="number">0x34019664</span>, <span class="number">0x7D3DEB43</span>, <span class="number">0xA6796C2A</span>, <span class="number">0xEF45110D</span>, <span class="number">0x151C1409</span>, <span class="number">0x5C20692E</span>, <span class="number">0x8764EE47</span>, <span class="number">0xCE589360</span>,</span><br><span class="line"><span class="number">0x763A92BE</span>, <span class="number">0x3F06EF99</span>, <span class="number">0xE44268F0</span>, <span class="number">0xAD7E15D7</span>, <span class="number">0x572710D3</span>, <span class="number">0x1E1B6DF4</span>, <span class="number">0xC55FEA9D</span>, <span class="number">0x8C6397BA</span>,</span><br><span class="line"><span class="number">0xB0779FD0</span>, <span class="number">0xF94BE2F7</span>, <span class="number">0x220F659E</span>, <span class="number">0x6B3318B9</span>, <span class="number">0x916A1DBD</span>, <span class="number">0xD856609A</span>, <span class="number">0x0312E7F3</span>, <span class="number">0x4A2E9AD4</span>,</span><br><span class="line"><span class="number">0xF24C9B0A</span>, <span class="number">0xBB70E62D</span>, <span class="number">0x60346144</span>, <span class="number">0x29081C63</span>, <span class="number">0xD3511967</span>, <span class="number">0x9A6D6440</span>, <span class="number">0x4129E329</span>, <span class="number">0x08159E0E</span>,</span><br><span class="line"><span class="number">0x3901F3FD</span>, <span class="number">0x703D8EDA</span>, <span class="number">0xAB7909B3</span>, <span class="number">0xE2457494</span>, <span class="number">0x181C7190</span>, <span class="number">0x51200CB7</span>, <span class="number">0x8A648BDE</span>, <span class="number">0xC358F6F9</span>,</span><br><span class="line"><span class="number">0x7B3AF727</span>, <span class="number">0x32068A00</span>, <span class="number">0xE9420D69</span>, <span class="number">0xA07E704E</span>, <span class="number">0x5A27754A</span>, <span class="number">0x131B086D</span>, <span class="number">0xC85F8F04</span>, <span class="number">0x8163F223</span>,</span><br><span class="line"><span class="number">0xBD77FA49</span>, <span class="number">0xF44B876E</span>, <span class="number">0x2F0F0007</span>, <span class="number">0x66337D20</span>, <span class="number">0x9C6A7824</span>, <span class="number">0xD5560503</span>, <span class="number">0x0E12826A</span>, <span class="number">0x472EFF4D</span>,</span><br><span class="line"><span class="number">0xFF4CFE93</span>, <span class="number">0xB67083B4</span>, <span class="number">0x6D3404DD</span>, <span class="number">0x240879FA</span>, <span class="number">0xDE517CFE</span>, <span class="number">0x976D01D9</span>, <span class="number">0x4C2986B0</span>, <span class="number">0x0515FB97</span>,</span><br><span class="line"><span class="number">0x2E015D56</span>, <span class="number">0x673D2071</span>, <span class="number">0xBC79A718</span>, <span class="number">0xF545DA3F</span>, <span class="number">0x0F1CDF3B</span>, <span class="number">0x4620A21C</span>, <span class="number">0x9D642575</span>, <span class="number">0xD4585852</span>,</span><br><span class="line"><span class="number">0x6C3A598C</span>, <span class="number">0x250624AB</span>, <span class="number">0xFE42A3C2</span>, <span class="number">0xB77EDEE5</span>, <span class="number">0x4D27DBE1</span>, <span class="number">0x041BA6C6</span>, <span class="number">0xDF5F21AF</span>, <span class="number">0x96635C88</span>,</span><br><span class="line"><span class="number">0xAA7754E2</span>, <span class="number">0xE34B29C5</span>, <span class="number">0x380FAEAC</span>, <span class="number">0x7133D38B</span>, <span class="number">0x8B6AD68F</span>, <span class="number">0xC256ABA8</span>, <span class="number">0x19122CC1</span>, <span class="number">0x502E51E6</span>,</span><br><span class="line"><span class="number">0xE84C5038</span>, <span class="number">0xA1702D1F</span>, <span class="number">0x7A34AA76</span>, <span class="number">0x3308D751</span>, <span class="number">0xC951D255</span>, <span class="number">0x806DAF72</span>, <span class="number">0x5B29281B</span>, <span class="number">0x1215553C</span>,</span><br><span class="line"><span class="number">0x230138CF</span>, <span class="number">0x6A3D45E8</span>, <span class="number">0xB179C281</span>, <span class="number">0xF845BFA6</span>, <span class="number">0x021CBAA2</span>, <span class="number">0x4B20C785</span>, <span class="number">0x906440EC</span>, <span class="number">0xD9583DCB</span>,</span><br><span class="line"><span class="number">0x613A3C15</span>, <span class="number">0x28064132</span>, <span class="number">0xF342C65B</span>, <span class="number">0xBA7EBB7C</span>, <span class="number">0x4027BE78</span>, <span class="number">0x091BC35F</span>, <span class="number">0xD25F4436</span>, <span class="number">0x9B633911</span>,</span><br><span class="line"><span class="number">0xA777317B</span>, <span class="number">0xEE4B4C5C</span>, <span class="number">0x350FCB35</span>, <span class="number">0x7C33B612</span>, <span class="number">0x866AB316</span>, <span class="number">0xCF56CE31</span>, <span class="number">0x14124958</span>, <span class="number">0x5D2E347F</span>,</span><br><span class="line"><span class="number">0xE54C35A1</span>, <span class="number">0xAC704886</span>, <span class="number">0x7734CFEF</span>, <span class="number">0x3E08B2C8</span>, <span class="number">0xC451B7CC</span>, <span class="number">0x8D6DCAEB</span>, <span class="number">0x56294D82</span>, <span class="number">0x1F1530A5</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> t2[<span class="number">32</span>] = &#123;</span><br><span class="line"><span class="number">0xDC</span>, <span class="number">0x53</span>, <span class="number">0xF5</span>, <span class="number">0x95</span>, <span class="number">0x23</span>, <span class="number">0x4E</span>, <span class="number">0x3B</span>, <span class="number">0x1D</span>, <span class="number">0x14</span>, <span class="number">0x34</span>, <span class="number">0x91</span>, <span class="number">0x0B</span>, <span class="number">0x82</span>, <span class="number">0x45</span>, <span class="number">0x9E</span>, <span class="number">0x6B</span>,</span><br><span class="line"><span class="number">0x1B</span>, <span class="number">0x62</span>, <span class="number">0xE7</span>, <span class="number">0x35</span>, <span class="number">0x7F</span>, <span class="number">0x88</span>, <span class="number">0x86</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xA0</span>, <span class="number">0xDE</span>, <span class="number">0x26</span>, <span class="number">0xAA</span>, <span class="number">0x4C</span>, <span class="number">0x04</span>, <span class="number">0x87</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// edx</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// r9d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v14; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v15; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v16; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">int</span> v17; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">int</span> v18; <span class="comment">// r8d</span></span><br><span class="line"><span class="type">int</span> v19; <span class="comment">// r9d</span></span><br><span class="line"><span class="type">int</span> v20; <span class="comment">// r9d</span></span><br><span class="line"><span class="type">int</span> m, n, j = <span class="number">0</span>, k = <span class="number">0</span>, i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> mid;</span><br><span class="line"><span class="type">unsigned</span> sk;</span><br><span class="line">std::string hexChars = <span class="string">&quot;0123456789abcdef&quot;</span>;</span><br><span class="line"><span class="function">std::string <span class="title">input</span><span class="params">(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line">m = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> tt = <span class="number">0</span>; tt &lt; <span class="number">8</span>; tt++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c1 : hexChars) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c2 : hexChars) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c3 : hexChars) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c4 : hexChars) &#123;</span><br><span class="line">input[<span class="number">0</span>] = c1;</span><br><span class="line">input[<span class="number">1</span>] = c2;</span><br><span class="line">input[<span class="number">2</span>] = c3;</span><br><span class="line">input[<span class="number">3</span>] = c4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">sk = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mid = input[i];</span><br><span class="line">sk = t1[n + (~(mid &amp; sk) &amp; (<span class="type">unsigned</span> __int8)(mid | sk))] ^ (sk &gt;&gt; <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">v12 = (sk | ~*(DWORD*)((<span class="type">char</span>*)&amp;t2 + j)) &amp; ~(sk &amp; ~*(DWORD*)((<span class="type">char</span>*)&amp;t2 + j));</span><br><span class="line">v13 = ((((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">16</span>) | ((((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">8</span>) | ((((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">4</span>) | ((v12 | (v12 &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) | v12 | (v12 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">v14 = ((v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>))) &gt;&gt; <span class="number">1</span>) | v12 &amp; (v13 | (v13 &gt;&gt; <span class="number">1</span>)) &amp; ~(v13 &amp; (v13 &gt;&gt; <span class="number">1</span>));</span><br><span class="line">v15 = (((v14 &gt;&gt; <span class="number">2</span>) | v14) &gt;&gt; <span class="number">4</span>) | (v14 &gt;&gt; <span class="number">2</span>) | v14;</span><br><span class="line">v16 = (((v15 &gt;&gt; <span class="number">8</span>) | v15) &gt;&gt; <span class="number">16</span>) | (v15 &gt;&gt; <span class="number">8</span>) | v15;</span><br><span class="line">v17 = (<span class="number">4</span> * ((<span class="number">2</span> * v16) | v16)) | (<span class="number">2</span> * v16) | v16;</span><br><span class="line">v18 = (((<span class="number">16</span> * v17) | v17) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v17) | v17;</span><br><span class="line">v19 = (<span class="number">4</span> * ((<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>)) | (<span class="number">2</span> * (v13 &amp; <span class="number">1</span>)) | v13 &amp; <span class="number">1</span>;</span><br><span class="line">v20 = (((<span class="number">16</span> * v19) | v19) &lt;&lt; <span class="number">8</span>) | (<span class="number">16</span> * v19) | v19;</span><br><span class="line"><span class="keyword">if</span> (((v20 | (v20 &lt;&lt; <span class="number">16</span>)) &amp; (~((v18 &lt;&lt; <span class="number">16</span>) | v18) | v18 &amp; <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">std::cout &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; c3 &lt;&lt; c4;</span><br><span class="line">m += <span class="number">4</span>;</span><br><span class="line">n += <span class="number">256</span>;</span><br><span class="line">j += <span class="number">4</span>;</span><br><span class="line"><span class="keyword">goto</span> B;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">B:;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag&#123;b19777392bfa99f1cb695279e8b6851e&#125;</span></span><br></pre></td></tr></table></figure><hr><p>这两周在上课，导致一直在摆烂</p><p>然后主要学了一点TLS的内容和SMC还有父子进程调试还有web的一些入门</p><h2 id="TLS">TLS</h2><p><a href="https://www.52pojie.cn/thread-1490663-1-1.html">【原创】反调试实战系列二 TLS反调试+CheckRemoteDebuggerPresent原理 - 『软件调试区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>这篇很详细，直接看就好了</p><p>值得注意的是TLS不仅有函数还有全局变量，大致写在下面</p><p><a href="https://www.pri87.vip/posts/95e9e72b.html">TLS相关研究</a></p><h2 id="SMC">SMC</h2><p>其实就是动态地解密代码，动态patch，和hook差不多，但是还是感觉hook方便一点。需要注意尽量不要修改需要重定位的地方，在修改完地址和栈的情况下，地址会错乱，栈指针的偏移量会爆红</p><p>之后我想一个好一点的方法（感觉还是改key或者数组的值好）</p><h2 id="父子进程反调试">父子进程反调试</h2><p><a href="https://www.pri87.vip/posts/3f67770.html">父子进程反调试</a></p><h2 id="杂项">杂项</h2><h3 id="ida插件编写相关文章">ida插件编写相关文章</h3><p><a href="https://bbs.kanxue.com/thread-38900.htm">IDA Plugin 编写基础-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-226983.htm">原创]用IDAPython实现的反反调试小脚本-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-63160.htm">翻译]《IDA pro plugin writing in C/C++》[2008-07-28第二次更新]-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://github.com/notify-bibi/ScyllaHide-IDA7.5/releases/tag/0.2">Release ScyllaHide-IDA7.5 · notify-bibi/ScyllaHide-IDA7.5 · GitHub</a></p><h3 id="web入门">web入门</h3><p><a href="https://www.pri87.vip/posts/f3edc96d.html">web入门</a></p><h3 id="elf文件结构">elf文件结构</h3><p><a href="https://www.pri87.vip/posts/e60119a.html">ELF文件结构</a></p><h3 id="pyc与花指令">pyc与花指令</h3><p><a href="https://www.pri87.vip/posts/96b00b8.html">pyc与花指令</a></p>]]></content>
    
    
    <summary type="html">就是你，暑假不许学习，听到了没有</summary>
    
    
    
    
    <category term="放假" scheme="https://www.pri87.vip/tags/%E6%94%BE%E5%81%87/"/>
    
    <category term="开摆" scheme="https://www.pri87.vip/tags/%E5%BC%80%E6%91%86/"/>
    
  </entry>
  
  <entry>
    <title>pyc与花指令</title>
    <link href="https://www.pri87.vip/posts/96b00b8.html"/>
    <id>https://www.pri87.vip/posts/96b00b8.html</id>
    <published>2024-07-27T06:22:25.000Z</published>
    <updated>2024-10-02T04:03:14.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pycdc反编译器">Pycdc反编译器</h2><p><a href="https://github.com/zrax/pycdc">GitHub - zrax/pycdc: C++ python bytecode disassembler and decompiler</a></p><p>用这个可以方便地反编译高版本代码</p><h2 id="花指令或者反编译无效">花指令或者反编译无效</h2><p>取巧的一个方法就是</p><p>用dis的dis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">r&quot;./NSSCTF.pyc&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">data = fp.read()</span><br><span class="line">Pyobj = marshal.loads(data[<span class="number">16</span>:])</span><br><span class="line">dis.dis(Pyobj)</span><br></pre></td></tr></table></figure><p>直接看字节码，然后让ai反编译</p><p>另一个方法</p><p>参考</p><p><a href="https://www.qinglite.cn/doc/27916618484af0123">技术分享 | Python逆向：修改Pycdc源码绕过花指令-轻识 (qinglite.cn)</a></p>]]></content>
    
    
    <summary type="html">本文介绍pycdc和python字节码无法反编译的情况要怎么办</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="python逆向" scheme="https://www.pri87.vip/tags/python%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>ELF文件结构</title>
    <link href="https://www.pri87.vip/posts/e60119a.html"/>
    <id>https://www.pri87.vip/posts/e60119a.html</id>
    <published>2024-07-21T13:18:13.000Z</published>
    <updated>2024-07-27T06:16:56.931Z</updated>
    
    <content type="html"><![CDATA[<hr><p>无限期停更<br><a href="https://sp4n9x.github.io/2021/05/27/ELF_FileFormat_Analysis/">ELF文件格式分析 | Sp4n9x’s Blog</a></p><p><a href="https://www.cnblogs.com/sky-heaven/p/15863815.html">手拆ELF32（一，文件头）【转】 - Sky&amp;Zhang - 博客园 (cnblogs.com)</a></p><p><a href="https://juejin.cn/post/7317577665015005223">ELF解析01 - ELF头和程序头 - 掘金 (juejin.cn)</a></p><p><a href="https://mudongliang.github.io/2015/05/19/elf-section-header-data-structure.html">ELF Section Header的结构 (mudongliang.github.io)</a></p><p>因为上面几篇讲的太详细了，后面不写了</p><p>其中第三篇为加载时需要关注的点，前两篇都是讲结构特点</p><hr><p>上次了解了windows系统上的PE文件结构，这里在网上总结了一些（抄了一些）内容</p><h2 id="序">序</h2><p>ELF分为大致分为三种：</p><ul><li>可重定位文件(relocatable)：编译器和汇编器产生的.o文件，被Linker所处理</li><li>可执行文件(executable)：Linker对.o文件进行处理输出的文件，进程映像</li><li>共享对象文件(shared object)：<a href="http://xn--5nqw3gs1n2mbb8m.so">动态库文件.so</a></li></ul><p>文件布局大致为：</p><ul><li>ELF header</li><li>program header table（描述段）</li><li>段和区</li><li>section header table（描述区）</li></ul><p>以上的布局只有ELF header在固定位置，其它的位置不定</p><h2 id="ELF-header">ELF header</h2><h3 id="e-ident">e_ident</h3><p><code>Magic Number</code>  7F 45 4C 46</p><p>EI_class：(1字节)</p><ul><li>无效类</li><li>1 32位</li><li>2 64位</li></ul><p>EI_DATA：(1字节)</p><ul><li>0 无效数据编码</li><li>1 小端序</li><li>2 大端序</li></ul><p>EI_VERSION：只有01这个值</p><p>EI_OSABI：操作系统/ABI标识</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">ELFOSABI_NONE</td><td style="text-align:center">0</td><td style="text-align:left">No extensions or unspecified</td></tr><tr><td style="text-align:left">ELFOSABI_SYSV</td><td style="text-align:center">0</td><td style="text-align:left">UNIX System V ABI</td></tr><tr><td style="text-align:left">ELFOSABI_HPUX</td><td style="text-align:center">1</td><td style="text-align:left">HP-UX ABI</td></tr><tr><td style="text-align:left">ELFOSABI_NETBSD</td><td style="text-align:center">2</td><td style="text-align:left">NetBSD ABI</td></tr><tr><td style="text-align:left">ELFOSABI_LINUX</td><td style="text-align:center">3</td><td style="text-align:left">Linux ABI</td></tr><tr><td style="text-align:left">ELFOSABI_HURD</td><td style="text-align:center">4</td><td style="text-align:left">GNU Hurd ABI</td></tr><tr><td style="text-align:left">ELFOSABI_SOLARIS</td><td style="text-align:center">6</td><td style="text-align:left">Sun Solaris ABI</td></tr><tr><td style="text-align:left">ELFOSABI_AIX</td><td style="text-align:center">7</td><td style="text-align:left">IBM AIX ABI</td></tr><tr><td style="text-align:left">ELFOSABI_IRIX</td><td style="text-align:center">8</td><td style="text-align:left">SGI Irix ABI</td></tr><tr><td style="text-align:left">ELFOSABI_FREEBSD</td><td style="text-align:center">9</td><td style="text-align:left">FreeBSD ABI</td></tr><tr><td style="text-align:left">ELFOSABI_TRU64</td><td style="text-align:center">10</td><td style="text-align:left">Compaq TRU64 UNIX ABI</td></tr><tr><td style="text-align:left">ELFOSABI_MODESTO</td><td style="text-align:center">11</td><td style="text-align:left">Novell Modesto ABI</td></tr><tr><td style="text-align:left">ELFOSABI_OPENBSD</td><td style="text-align:center">12</td><td style="text-align:left">OpenBSD ABI</td></tr><tr><td style="text-align:left">ELFOSABI_OPENVMS</td><td style="text-align:center">13</td><td style="text-align:left">OpenVMS ABI</td></tr><tr><td style="text-align:left">ELFOSABI_NSK</td><td style="text-align:center">14</td><td style="text-align:left">NonStop Kernel ABI</td></tr><tr><td style="text-align:left">ELFOSABI_AROS</td><td style="text-align:center">15</td><td style="text-align:left">AROS ABI</td></tr><tr><td style="text-align:left">ELFOSABI_FENIXOS</td><td style="text-align:center">16</td><td style="text-align:left">Fenix OS ABI</td></tr><tr><td style="text-align:left">ELFOSABI_CLOUDABI</td><td style="text-align:center">17</td><td style="text-align:left">CloudABI</td></tr><tr><td style="text-align:left">ELFOSABI_ARM_AEABI</td><td style="text-align:center">64</td><td style="text-align:left">ARM EABI</td></tr><tr><td style="text-align:left">ELFOSABI_ARM</td><td style="text-align:center">97</td><td style="text-align:left">ARM ABI</td></tr><tr><td style="text-align:left">ELFOSABI_STANDALONE</td><td style="text-align:center">255</td><td style="text-align:left">Standalone (embedded) application</td></tr></tbody></table><p>EI_ABIVERSION：</p><p>进一步指定ABI版本</p><p>elf pad：填充字节，置0</p><h3 id="E-TYPE">E_TYPE</h3><p>标明文件类型（2字节）</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">ET_NONE</td><td style="text-align:center">0</td><td style="text-align:left">无文件类型</td></tr><tr><td style="text-align:left">ET_REL</td><td style="text-align:center">1</td><td style="text-align:left">可重定位文件</td></tr><tr><td style="text-align:left">ET_EXEC</td><td style="text-align:center">2</td><td style="text-align:left">可执行文件</td></tr><tr><td style="text-align:left">ET_DYN</td><td style="text-align:center">3</td><td style="text-align:left">共享目标文件</td></tr><tr><td style="text-align:left">ET_CORE</td><td style="text-align:center">4</td><td style="text-align:left">核心转储文件</td></tr><tr><td style="text-align:left">ET_NUM</td><td style="text-align:center">5</td><td style="text-align:left">定义的文件类型数量</td></tr><tr><td style="text-align:left">ET_LOOS</td><td style="text-align:center">0xFE00</td><td style="text-align:left">特定操作系统目标文件类型值范围的下限</td></tr><tr><td style="text-align:left">ET_HIOS</td><td style="text-align:center">0xFEFF</td><td style="text-align:left">特定操作系统目标文件类型值范围的上限</td></tr><tr><td style="text-align:left">ET_LOPROC</td><td style="text-align:center">0xFF00</td><td style="text-align:left">特定处理器目标文件类型值范围的下限</td></tr><tr><td style="text-align:left">ET_HIPROC</td><td style="text-align:center">0xFFFF</td><td style="text-align:left">特定处理器目标文件类型值范围的上限</td></tr></tbody></table><h3 id="e-machine">e_machine</h3><p>标明处理器架构和指令集（2字节）</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">EM_NONE</td><td style="text-align:center">0</td><td style="text-align:left">无机器类型</td></tr><tr><td style="text-align:left">EM_M32</td><td style="text-align:center">1</td><td style="text-align:left">AT&amp;T WE 32100</td></tr><tr><td style="text-align:left">EM_SPARC</td><td style="text-align:center">2</td><td style="text-align:left">SUN SPARC</td></tr><tr><td style="text-align:left">EM_386</td><td style="text-align:center">3</td><td style="text-align:left">Intel 80386(x86)</td></tr><tr><td style="text-align:left">EM_68K</td><td style="text-align:center">4</td><td style="text-align:left">Motorola 68000(M68k)</td></tr><tr><td style="text-align:left">EM_88K</td><td style="text-align:center">5</td><td style="text-align:left">Motorola 88000(M88k)</td></tr><tr><td style="text-align:left">EM_860</td><td style="text-align:center">7</td><td style="text-align:left">Intel 80860</td></tr><tr><td style="text-align:left">EM_MIPS</td><td style="text-align:center">8</td><td style="text-align:left">MIPS R3000 big-endian</td></tr><tr><td style="text-align:left">EM_MIPS_RS3_LE</td><td style="text-align:center">10</td><td style="text-align:left">MIPS R3000 little-endian</td></tr><tr><td style="text-align:left">EM_MIPS_RS4_BE</td><td style="text-align:center">10</td><td style="text-align:left">MIPS R4000 big-endian</td></tr><tr><td style="text-align:left">EM_PPC</td><td style="text-align:center">20</td><td style="text-align:left">PowerPC</td></tr><tr><td style="text-align:left">EM_PPC64</td><td style="text-align:center">21</td><td style="text-align:left">PowerPC 64-bit</td></tr><tr><td style="text-align:left">EM_ARM</td><td style="text-align:center">40</td><td style="text-align:left">ARM 32-bit(up to ARMv7/Aarch32)</td></tr><tr><td style="text-align:left">EM_SPARCV9</td><td style="text-align:center">43</td><td style="text-align:left">SPARC v9 64-bit</td></tr><tr><td style="text-align:left">EM_IA_64</td><td style="text-align:center">50</td><td style="text-align:left">HP/Intel IA-64</td></tr><tr><td style="text-align:left">EM_X86_64</td><td style="text-align:center">62</td><td style="text-align:left">AMD x86-64</td></tr><tr><td style="text-align:left">EM_MSP430</td><td style="text-align:center">105</td><td style="text-align:left">Texas Instruments msp430</td></tr><tr><td style="text-align:left">EM_ALTERA_NIOS2</td><td style="text-align:center">113</td><td style="text-align:left">Altera Nios II</td></tr><tr><td style="text-align:left">EM_AARCH64</td><td style="text-align:center">183</td><td style="text-align:left">ARM 64-bit(ARMv8/Aarch64)</td></tr><tr><td style="text-align:left">EM_AVR32</td><td style="text-align:center">185</td><td style="text-align:left">Amtel 32-bit microprocessor</td></tr><tr><td style="text-align:left">EM_STM8</td><td style="text-align:center">186</td><td style="text-align:left">STMicroelectronics STM8</td></tr><tr><td style="text-align:left">EM_RISCV</td><td style="text-align:center">243</td><td style="text-align:left">RISC-V</td></tr><tr><td style="text-align:left">EM_BPF</td><td style="text-align:center">247</td><td style="text-align:left">Linux BPF – in-kernel virtual machine</td></tr></tbody></table><h3 id="e-version">e_version</h3><p>当前文件版本（四字节）</p><p>0 无版本</p><p>其它 当前版本号</p><h3 id="程序入口">程序入口</h3><p>8字节，标明入口点</p><h3 id="程序头表偏移">程序头表偏移</h3><p>8字节，描述段表在文件中的偏移</p><h3 id="区表偏移">区表偏移</h3><p>8字节，描述区表在文件中的偏移</p><h3 id="e-flag">e_flag</h3><p>处理器指定的与文件相关联的flag(4字节，一般是0)</p><h3 id="ELF-header-大小">ELF_header 大小</h3><p>2字节，指明头大小。一般为0x40</p><h3 id="程序头表大小">程序头表大小</h3><p>2字节，如果没有程序头表，则为0</p><h3 id="程序头内容数量">程序头内容数量</h3><p>2字节，标明程序头表中的内容个数</p><h3 id="节区头表大小">节区头表大小</h3><p>2字节，如果没有节区头表，则为0</p><h3 id="节区头内容数量">节区头内容数量</h3><p>2字节，标明节区头表中的内容个数</p><h3 id="节区头字符表索引">节区头字符表索引</h3><p>2字节，有以下可选值</p><p>/* Special section indices. */</p><p>#define SHN_UNDEF 0 /* Undefined section <em>/<br>#define SHN_LORESERVE 0xff00 /</em> Start of reserved indices <em>/<br>#define SHN_LOPROC 0xff00 /</em> Start of processor-specific <em>/<br>#define SHN_BEFORE 0xff00 /</em> Order section before all others<br>(Solaris). <em>/<br>#define SHN_AFTER 0xff01 /</em> Order section after all others<br>(Solaris). <em>/<br>#define SHN_HIPROC 0xff1f /</em> End of processor-specific <em>/<br>#define SHN_LOOS 0xff20 /</em> Start of OS-specific <em>/<br>#define SHN_HIOS 0xff3f /</em> End of OS-specific <em>/<br>#define SHN_ABS 0xfff1 /</em> Associated symbol is absolute <em>/<br>#define SHN_COMMON 0xfff2 /</em> Associated symbol is common <em>/<br>#define SHN_XINDEX 0xffff /</em> Index is in extra table. <em>/<br>#define SHN_HIRESERVE 0xffff /</em> End of reserved indices */</p><h2 id="program-header-table">program_header_table</h2><p>是一个结构体数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PN_XNUM0xffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf32_Wordp_type;<span class="comment">/* Segment type */</span></span><br><span class="line">    Elf32_Offp_offset;<span class="comment">/* Segment file offset */</span></span><br><span class="line">    Elf32_Addrp_vaddr;<span class="comment">/* Segment virtual address */</span></span><br><span class="line">    Elf32_Addrp_paddr;<span class="comment">/* Segment physical address */</span></span><br><span class="line">    Elf32_Wordp_filesz;<span class="comment">/* Segment size in file */</span></span><br><span class="line">    Elf32_Wordp_memsz;<span class="comment">/* Segment size in memory */</span></span><br><span class="line">    Elf32_Wordp_flags;<span class="comment">/* Segment flags */</span></span><br><span class="line">    Elf32_Wordp_align;<span class="comment">/* Segment alignment */</span></span><br><span class="line">&#125; Elf32_Phdr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf64_Wordp_type;<span class="comment">/* Segment type */</span></span><br><span class="line">    Elf64_Wordp_flags;<span class="comment">/* Segment flags */</span></span><br><span class="line">    Elf64_Offp_offset;<span class="comment">/* Segment file offset */</span></span><br><span class="line">    Elf64_Addrp_vaddr;<span class="comment">/* Segment virtual address */</span></span><br><span class="line">    Elf64_Addrp_paddr;<span class="comment">/* Segment physical address */</span></span><br><span class="line">    Elf64_Xwordp_filesz;<span class="comment">/* Segment size in file */</span></span><br><span class="line">    Elf64_Xwordp_memsz;<span class="comment">/* Segment size in memory */</span></span><br><span class="line">    Elf64_Xwordp_align;<span class="comment">/* Segment alignment */</span></span><br><span class="line">&#125; Elf64_Phdr;</span><br></pre></td></tr></table></figure><h3 id="段类型">段类型</h3><p>p_type，四字节</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">PT_NULL</td><td style="text-align:center">0</td><td style="text-align:left">该数组元素未使用。除p_type外，其他结构体成员的值都是未定义的。这种类型可以使程序头表(Program Header Table)忽略此条目。</td></tr><tr><td style="text-align:left">PT_LOAD</td><td style="text-align:center">1</td><td style="text-align:left">此类型段为一个可加载的段，大小由p_filesz和p_memsz描述。文件中该段的内容被映射到相应内存段的开始处。如果p_memsz大于p_filesz，“剩余”的字节都要被置为0并跟踪段的初始化区域。p_filesz不能大于p_memsz。可加载的段在程序头表中按照p_vaddr升序排列。</td></tr><tr><td style="text-align:left">PT_DYNAMIC</td><td style="text-align:center">2</td><td style="text-align:left">此类型段给出动态链接信息，具体参见ELF手册Book III。</td></tr><tr><td style="text-align:left">PT_INTERP</td><td style="text-align:center">3</td><td style="text-align:left">此类型段给出了一个以Null结尾的字符串的位置和长度，该字符串将被当作解释器的路径名进行调用。这种段类型仅对可执行文件有意义(也可能出现在共享目标文件中)。此外，这种段在一个文件中最多出现一次。而且该段类型的数组元素存在的话，它必须在所有可加载段条目的前面。</td></tr><tr><td style="text-align:left">PT_NOTE</td><td style="text-align:center">4</td><td style="text-align:left">此类型段给出附加信息的位置和大小。</td></tr><tr><td style="text-align:left">PT_SHLIB</td><td style="text-align:center">5</td><td style="text-align:left">该段类型被保留，不过语义未指定。而且，包含这种类型数组元素的程序不符合Unix System V的ELF标准，具体参见ELF手册Book III。</td></tr><tr><td style="text-align:left">PT_PHDR</td><td style="text-align:center">6</td><td style="text-align:left">该段类型的数组元素如果存在的话，则给出了程序头表自身在文件和程序内存映像中的的位置和大小。此类型的段在文件中最多出现一次。此外，只有程序头表是程序内存映像的一部分时，该段类型的数组元素才会存在。如果该段类型的数组元素存在，则必须在所有可加载段条目的前面。</td></tr><tr><td style="text-align:left">PT_TLS</td><td style="text-align:center">7</td><td style="text-align:left">该段类型的数组元素给出线程本地存储段(TLS)的信息。</td></tr><tr><td style="text-align:left">PT_LOOS</td><td style="text-align:center">0x60000000</td><td style="text-align:left">特定操作系统段类型值的下限。</td></tr><tr><td style="text-align:left">PT_GNU_EH_FRAME</td><td style="text-align:center">0x6474E550</td><td style="text-align:left">该段类型数组元素指定异常处理信息的位置和大小(由.eh_frame_hdr节定义)[^5]。</td></tr><tr><td style="text-align:left">PT_GNU_STACK</td><td style="text-align:center">0x6474E551</td><td style="text-align:left">该段类型数组元素中的p_flags成员指定包含栈的段的权限，并用于指示栈是否应该是可执行的。没有此段类型的数组元素，则表示该栈将是可执行的[^5]。</td></tr><tr><td style="text-align:left">PT_GNU_RELRO</td><td style="text-align:center">0x6474E552</td><td style="text-align:left">该段类型数组元素指定了一个在重定位后可以被置为只读的段的位置和大小[^5]。</td></tr><tr><td style="text-align:left">PT_GNU_PROPERTY</td><td style="text-align:center">0x6474E553</td><td style="text-align:left">该段类型数组元素指定.note.gnu.property节的位置和大小。</td></tr><tr><td style="text-align:left">PT_HIOS</td><td style="text-align:center">0x6FFFFFFF</td><td style="text-align:left">特定操作系统段类型值的上限。</td></tr><tr><td style="text-align:left">PT_LOPROC</td><td style="text-align:center">0x70000000</td><td style="text-align:left">特定处理器段类型值的下限。</td></tr><tr><td style="text-align:left">PT_HIPROC</td><td style="text-align:center">0x7FFFFFFF</td><td style="text-align:left">特定处理器段类型值的上限。</td></tr></tbody></table><h3 id="段权限">段权限</h3><p>p_flags，四字节</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">PF_X</td><td style="text-align:center">0x1</td><td style="text-align:left">段具有可执行权限</td></tr><tr><td style="text-align:left">PF_W</td><td style="text-align:center">0x2</td><td style="text-align:left">段具有写权限</td></tr><tr><td style="text-align:left">PF_R</td><td style="text-align:center">0x4</td><td style="text-align:left">段具有读权限</td></tr><tr><td style="text-align:left">PF_MASKOS</td><td style="text-align:center">0x0FF00000</td><td style="text-align:left">为特定操作系统预留</td></tr><tr><td style="text-align:left">PF_MASKPROC</td><td style="text-align:center">0xF0000000</td><td style="text-align:left">为特定处理器预留</td></tr></tbody></table><p>如果是0，表明拒绝访问<br>以上权限可组合，且一般情况，段没有写权限</p><table><thead><tr><th style="text-align:left">宏名称</th><th style="text-align:center">值</th><th style="text-align:left">准确的权限</th><th style="text-align:left">允许的权限</th></tr></thead><tbody><tr><td style="text-align:left">none</td><td style="text-align:center">0</td><td style="text-align:left">拒绝所有访问</td><td style="text-align:left">拒绝所有访问</td></tr><tr><td style="text-align:left">PF_X</td><td style="text-align:center">1</td><td style="text-align:left">只执行</td><td style="text-align:left">读，执行</td></tr><tr><td style="text-align:left">PF_W</td><td style="text-align:center">2</td><td style="text-align:left">只写</td><td style="text-align:left">读，写，执行</td></tr><tr><td style="text-align:left">PF_W + PF_X</td><td style="text-align:center">3</td><td style="text-align:left">写，执行</td><td style="text-align:left">读，写，执行</td></tr><tr><td style="text-align:left">PF_R</td><td style="text-align:center">4</td><td style="text-align:left">只读</td><td style="text-align:left">读，执行</td></tr><tr><td style="text-align:left">PF_R + PF_X</td><td style="text-align:center">5</td><td style="text-align:left">读，执行</td><td style="text-align:left">读，执行</td></tr><tr><td style="text-align:left">PF_R + PF_W</td><td style="text-align:center">6</td><td style="text-align:left">读，写</td><td style="text-align:left">读，写，执行</td></tr><tr><td style="text-align:left">PF_R + PF_W + PF_X</td><td style="text-align:center">7</td><td style="text-align:left">读，写，执行</td><td style="text-align:left">读，写，执行</td></tr></tbody></table><h3 id="段内容">段内容</h3><p>Segment Contents标明了一个段的多种节的类型</p><h3 id="段偏移">段偏移</h3><p>在文件中的偏移，8字节</p><h3 id="段虚拟地址">段虚拟地址</h3><p>表示加载后的相对偏移。真实地址=虚拟地址基址+段虚拟地址，8字节</p><h3 id="段物理地址">段物理地址</h3><p>不知道作用，可能是在虚拟内存中的地址。8字节</p><h3 id="段文件长度">段文件长度</h3><p>段在文件中的长度，8字节</p><h3 id="段虚拟长度">段虚拟长度</h3><p>段在内存中的长度，8字节</p><h3 id="段对齐方式">段对齐方式</h3><p>8字节，一般为4096</p><hr><p>参考：</p><p><a href="https://docs.oracle.com/cd/E26926_01/html/E25910/chapter6-35342.html">ELF 标识 - 链接程序和库指南 (oracle.com)</a></p><hr>]]></content>
    
    
    <summary type="html">全是抄的</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="PE文件结构" scheme="https://www.pri87.vip/tags/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    
    <category term="ELF" scheme="https://www.pri87.vip/tags/ELF/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF2024summer-RE</title>
    <link href="https://www.pri87.vip/posts/b7df16dd.html"/>
    <id>https://www.pri87.vip/posts/b7df16dd.html</id>
    <published>2024-07-21T09:42:35.000Z</published>
    <updated>2024-09-10T17:03:35.409Z</updated>
    
    <content type="html"><![CDATA[<p>第一次遇到DCT，QAQ，终究还是被暴打了</p><h2 id="DosSnake">DosSnake</h2><p>考察16位汇编，大概打开看看，是一个贪吃蛇，按照游戏题的惯例，应当是胜利后自动输出flag</p><p>看一下有没有相关函数或者字符串</p><p>查字符串可以看到有DASCTF，然后交叉引用</p><p>大概是这样：</p><p><img src="https://s2.loli.net/2024/07/21/FtOvZPhXBp6o82c.png" alt="image-20240721174647593"></p><p>可以看到用（di）dasctf和（si）后面的位数依次异或，一轮后重置di</p><p>直接写脚本</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from prism import *</span><br><span class="line">a = [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x09</span>, <span class="number">0x63</span>, <span class="number">0x34</span>, <span class="number">0x32</span>, <span class="number">0x13</span>, <span class="number">0x2A</span>, <span class="number">0x2F</span>, <span class="number">0x2A</span>, <span class="number">0x37</span>, <span class="number">0x3C</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x2E</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x3A</span>, <span class="number">0x27</span>, <span class="number">0x2F</span>, <span class="number">0x24</span>, <span class="number">0x3A</span>, <span class="number">0x30</span>, <span class="number">0x75</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, <span class="number">0x3C</span>]</span><br><span class="line">c = [<span class="number">0x44</span>, <span class="number">0x41</span>, <span class="number">0x53</span>, <span class="number">0x43</span>, <span class="number">0x54</span>, <span class="number">0x46</span>]</span><br><span class="line"><span class="keyword">pxor</span>(a,c)</span><br><span class="line"># DASCTF&#123;H0wfUnnytheDosSnakeis!!!&#125;</span><br></pre></td></tr></table></figure><h2 id="Strangeprograme">Strangeprograme</h2><p>常规TEA，不多说</p><p>反调，附加调试进入主要判断逻辑</p><p>加密是一样的，区别是只加密第一组数据，然后异或后面的数据</p><p>直接写脚本解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">enc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* a1, <span class="type">unsigned</span> <span class="type">int</span>* a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-2Ch]</span></span><br><span class="line"><span class="type">int</span> v3; <span class="comment">// [esp+E8h] [ebp-20h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+F4h] [ebp-14h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+100h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sub_4114D8(&amp;unk_4250F3);</span></span><br><span class="line">v5 = *a1;</span><br><span class="line">v4 = a1[<span class="number">1</span>];</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v5 += (a2[<span class="number">1</span>] + (v4 &gt;&gt; <span class="number">5</span>)) ^ (v3 + v4) ^ (*a2 + <span class="number">16</span> * v4);</span><br><span class="line">v4 += (a2[<span class="number">3</span>] + (v5 &gt;&gt; <span class="number">5</span>)) ^ (v3 + v5) ^ (a2[<span class="number">2</span>] + <span class="number">16</span> * v5);</span><br><span class="line">v3 -= <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;</span><br><span class="line">*a1 = v5;</span><br><span class="line">a1[<span class="number">1</span>] = v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* a1, <span class="type">unsigned</span> <span class="type">int</span>* a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-2Ch]</span></span><br><span class="line"><span class="type">int</span> sum; <span class="comment">// [esp+E8h] [ebp-20h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+F4h] [ebp-14h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+100h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sub_4114D8(&amp;unk_4250F3);</span></span><br><span class="line">v5 = *a1;</span><br><span class="line">v4 = a1[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">sum += <span class="number">0x61C88647</span>;</span><br><span class="line">v4 -= (a2[<span class="number">3</span>] + (v5 &gt;&gt; <span class="number">5</span>)) ^ (sum + v5) ^ (a2[<span class="number">2</span>] + <span class="number">16</span> * v5);</span><br><span class="line">v5 -= (a2[<span class="number">1</span>] + (v4 &gt;&gt; <span class="number">5</span>)) ^ (sum + v4) ^ (*a2 + <span class="number">16</span> * v4);</span><br><span class="line">&#125;</span><br><span class="line">*a1 = v5;</span><br><span class="line">a1[<span class="number">1</span>] = v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> last[<span class="number">10</span>] = &#123;</span><br><span class="line"><span class="number">0xBC2B4DF9</span>, <span class="number">0x6213DD13</span>, <span class="number">0x89FFFCC9</span>, <span class="number">0x0FC94F7D</span>, <span class="number">0x526D1D63</span>, <span class="number">0xE341FD50</span>, <span class="number">0x97287633</span>, <span class="number">0x6BF93638</span>,</span><br><span class="line"><span class="number">0x83143990</span>, <span class="number">0x1F2CE22C</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x12345678</span>, <span class="number">0x09101112</span>, <span class="number">0x13141516</span>, <span class="number">0x15161718</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>; i &gt; <span class="number">0</span>; i -= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">last[i] ^= last[<span class="number">0</span>];</span><br><span class="line">last[i + <span class="number">1</span>] ^= last[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">dec</span>(last, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dec</span>(last, key);</span><br><span class="line">std::cout &lt;&lt; (<span class="type">char</span>*)last;</span><br><span class="line">&#125;</span><br><span class="line"># DASCTF&#123;I4TH0ok_I5S0ooFunny_Isnotit?????&#125;</span><br></pre></td></tr></table></figure><h2 id="BabyAndroid">BabyAndroid</h2><p>这个题如果没有套娃，我愿夸它，但是出题人知不知道我以为我要解完了结果才是刚刚开始有多么崩溃</p><p>首先题目给了抓包信息</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">charset</span><span class="punctuation">: </span>utf-8</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Dalvik/2.1.0 (Linux; U; Android 11; M2004J7AC Build/RP1A.200720.011)</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>yuanshen.com</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>413</span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">data</span>=TwMkYUkg4bYsY0hL99ggYWnVjWyXQrWAdNmToB0eBXbS6wBzL6ktorjNWI9VOroTU4HgIUYyzGLpcHzd1zNGT+bFZZI7IoxJwpcgXfdwW1LSmiNSP+PuSUsqAzNclF1nJ07b4tYyLWg0zTypbzWsLhOIM+<span class="number">6</span>uci3RFZLREUCALafi01M8mS+KMNxX1Pyn8mSP+KKKjQ5S5fasHRSn+L9qBFws0mWavpfI0QEiMgarxv0iGhYU8cfgonWyL70RvoXET5VUDP1vfYWIBLzzzaAqLC0OiMtUK3TTATSU7yijdgXm18OKMcGIke/NZIM6Sr5fL3t6psDOOkw2C/<span class="number">5</span>uYrJVPn+D6U9KTL64bgREppDqMOvhvbhtuf/S3ASW/+rhtPMtoaD8FxDg0wWSLZA53fQfNA==</span></span><br></pre></td></tr></table></figure><p>很明显data就是flag，然后要逆程序</p><p>jadx（原谅我安卓只会jadxQAQ）搜索yuanshen.com找到发送位置</p><p><img src="https://s2.loli.net/2024/07/21/mR4YMlZDWVLO7py.png" alt="image-20240721175844067"></p><p>然后它用反射调用了encrypt方法，没有搜索到，同时也没看到site.qifen.note.ui.Encrypto，然后详细看这段代码，发现它加载了sex.jpg然后解密作为dex，那么查看解密方法，解密dex，发现是rc4，直接复制为文本解密</p><p>然后看加密方式</p><p><img src="https://s2.loli.net/2024/07/22/giLMsU5YJQGAEWk.png" alt="image-20240721180421330"></p><p>得到密钥：0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D</p><p>解密数据得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">458</span>.<span class="number">853181</span>,-<span class="number">18</span>.<span class="number">325492</span>,-<span class="number">18</span>.<span class="number">251911</span>,-<span class="number">2</span>.<span class="number">097520</span>,-<span class="number">21</span>.<span class="number">198660</span>,-<span class="number">22</span>.<span class="number">304648</span>,<span class="number">21</span>.<span class="number">103162</span>,-<span class="number">5</span>.<span class="number">786284</span>,-<span class="number">15</span>.<span class="number">248906</span>,<span class="number">15</span>.<span class="number">329286</span>,<span class="number">16</span>.<span class="number">919499</span>,-<span class="number">19</span>.<span class="number">669045</span>,<span class="number">30</span>.<span class="number">928253</span>,-<span class="number">37</span>.<span class="number">588034</span>,-<span class="number">16</span>.<span class="number">593954</span>,-<span class="number">5</span>.<span class="number">505211</span>,<span class="number">3</span>.<span class="number">014744</span>,<span class="number">6</span>.<span class="number">553616</span>,<span class="number">31</span>.<span class="number">131491</span>,<span class="number">16</span>.<span class="number">472500</span>,<span class="number">6</span>.<span class="number">802400</span>,-<span class="number">78</span>.<span class="number">278577</span>,<span class="number">15</span>.<span class="number">280099</span>,<span class="number">3</span>.<span class="number">893073</span>,<span class="number">56</span>.<span class="number">493581</span>,-<span class="number">34</span>.<span class="number">576344</span>,<span class="number">30</span>.<span class="number">146729</span>,<span class="number">4</span>.<span class="number">445671</span>,<span class="number">6</span>.<span class="number">732204</span></span><br></pre></td></tr></table></figure><p>？？？什么玩意</p><p>然后再一看数据传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">cipher</span> <span class="operator">=</span> (String) checkMethod.invoke(checkerClass.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]).newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]), NoteActivity.<span class="built_in">this</span>.sendInit(contentText));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里还有一个sendInit</p><p>一看是个native，apktool解包，ida开</p><p><img src="https://s2.loli.net/2024/07/22/VmuI7E9RPlWzAGN.png" alt="image-20240721181218663"></p><p>可以找到encrypt函数</p><p>这里复制下来网上搜索可以查到，这个算法是DCT2，一维的，搜索可以看到：</p><p><a href="https://zh.wikipedia.org/wiki/%E7%A6%BB%E6%95%A3%E4%BD%99%E5%BC%A6%E5%8F%98%E6%8D%A2">离散余弦变换</a></p><p>但是DCT3并不可以直接逆向DCT2，查了很多资料也没查到</p><p>然后就看着佬的wp复现了</p><p>逆向时，把DCT3的$x_0/2$去掉，然后后面处理相同，</p><p>同时对每个值乘以$\sqrt{\frac{2}{N}}$和$\sqrt{\frac{1}{N}}$也是在DCT2同样的位置处理，代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dct3</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">double</span>&gt;&amp; Y, std::vector&lt;<span class="type">double</span>&gt;&amp; X)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> N = Y.<span class="built_in">size</span>();</span><br><span class="line">X.<span class="built_in">resize</span>(N);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; N; ++n) &#123;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += Y[k] * std::<span class="built_in">cos</span>(<span class="number">3.14159265</span> * k * (n + <span class="number">0.5</span>) / N) * std::<span class="built_in">sqrt</span>(<span class="number">1.0</span> / N);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sum += Y[k] * std::<span class="built_in">cos</span>(<span class="number">3.14159265</span> * k * (n + <span class="number">0.5</span>) / N) * std::<span class="built_in">sqrt</span>(<span class="number">2.0</span> / N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">X[n] = sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; res = &#123; <span class="number">458.853181</span>,<span class="number">-18.325492</span>,<span class="number">-18.251911</span>,<span class="number">-2.097520</span>,<span class="number">-21.198660</span>,<span class="number">-22.304648</span>,<span class="number">21.103162</span>,<span class="number">-5.786284</span>,</span><br><span class="line"><span class="number">-15.248906</span>,<span class="number">15.329286</span>,<span class="number">16.919499</span>,<span class="number">-19.669045</span>,<span class="number">30.928253</span>,<span class="number">-37.588034</span>,<span class="number">-16.593954</span>,<span class="number">-5.505211</span>,</span><br><span class="line"><span class="number">3.014744</span>,<span class="number">6.553616</span>,<span class="number">31.131491</span>,<span class="number">16.472500</span>,<span class="number">6.802400</span>,<span class="number">-78.278577</span>,<span class="number">15.280099</span>,<span class="number">3.893073</span>,</span><br><span class="line"><span class="number">56.493581</span>,<span class="number">-34.576344</span>,<span class="number">30.146729</span>,<span class="number">4.445671</span>,<span class="number">6.732204</span> &#125;;</span><br><span class="line">std::vector&lt;<span class="type">double</span>&gt; X;</span><br><span class="line"><span class="built_in">dct3</span>(res, X);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> x : X) &#123;</span><br><span class="line">std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++) &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> chr = (<span class="type">char</span>)std::<span class="built_in">round</span>(X[i]);</span><br><span class="line">std::cout &lt;&lt; chr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DASCTF&#123;Y0u_Ar3Re4lly_H@ck3r!&#125;</span></span><br></pre></td></tr></table></figure><hr><p>补充DCT变换公式（一维）：</p><p><img src="https://s2.loli.net/2024/07/22/VjwTGsU8gbd9Mqr.png" alt="image-20240722132702606"></p><p>逆变换</p><p><img src="https://s2.loli.net/2024/07/22/iSNuvny7QTjHwcE.png" alt="image-20240722132724585"></p><p>就按上面写的那样写就好了</p>]]></content>
    
    
    <summary type="html">打比赛(划掉)被比赛打</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
    <category term="汇编" scheme="https://www.pri87.vip/tags/%E6%B1%87%E7%BC%96/"/>
    
    <category term="调试" scheme="https://www.pri87.vip/tags/%E8%B0%83%E8%AF%95/"/>
    
    <category term="套娃" scheme="https://www.pri87.vip/tags/%E5%A5%97%E5%A8%83/"/>
    
  </entry>
  
</feed>
