<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pRism</title>
  
  
  <link href="https://www.pri87.vip/atom.xml" rel="self"/>
  
  <link href="https://www.pri87.vip/"/>
  <updated>2024-03-09T04:08:47.149Z</updated>
  <id>https://www.pri87.vip/</id>
  
  <author>
    <name>pRism</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTF-VM(2)</title>
    <link href="https://www.pri87.vip/posts/b22e135.html"/>
    <id>https://www.pri87.vip/posts/b22e135.html</id>
    <published>2024-03-08T18:18:12.000Z</published>
    <updated>2024-03-09T04:08:47.149Z</updated>
    
    <content type="html"><![CDATA[<p>尝试对虚拟机保护有更深的理解。</p><p>由于之前做vm题感觉完全不会，所以找了几道题试一试</p><p>由之前的vm简要介绍看到vm题总是给出opcode的运行方式，然后通过opcode还原出运行逻辑，最后求出flag</p><h2 id="EzADVM"><a href="#EzADVM" class="headerlink" title="EzADVM"></a>EzADVM</h2><p>这个是个安卓vm，jadx打开，然后打开main_activity,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CheckClick</span><span class="params">(View a)</span> &#123;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="built_in">this</span>.binding.sampleText;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">flagText</span> <span class="operator">=</span> <span class="built_in">this</span>.binding.flagtext;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flagstring</span> <span class="operator">=</span> flagText.getText().toString();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Right!&quot;</span>.equals(stringFromJNI(flagstring))) &#123;</span><br><span class="line">            tv.setText(<span class="string">&quot;Right!&quot;</span>);</span><br><span class="line">            tv.setTextColor(-<span class="number">16711936</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>看到有stringFromJNI(flagstring)，去找函数原型，没找到，应该在库里。</p><p>用apktool反编译出源代码。打开so文件</p><p>重点是这些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">now_num = <span class="number">0</span>;</span><br><span class="line">  i = <span class="number">1</span>;</span><br><span class="line">  used_char = _JNIEnv::GetStringUTFChars(in, a3, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !i++ )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_29:</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;(v14, <span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">        v7 = (<span class="type">const</span> <span class="type">char</span> *)sub_20F50(v14);</span><br><span class="line">        v13 = _JNIEnv::NewStringUTF(in, v7);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v14);</span><br><span class="line">        <span class="keyword">return</span> v13;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( code[i] != <span class="number">0x21</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      __strcpy_chk(input, used_char, <span class="number">1024LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( code[i] == <span class="number">0xFF</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">    <span class="keyword">if</span> ( code[i] == <span class="number">0x88</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( code[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xA1</span>u:</span><br><span class="line">        s[now_num - <span class="number">1</span>] = or_not_num &amp; or_num;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xC3</span>u:</span><br><span class="line">        or_num = b1 | b2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xB2</span>u:</span><br><span class="line">        not_1 = ~b1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xE5</span>u:</span><br><span class="line">        not_2 = ~b2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xF1</span>u:</span><br><span class="line">        b1 = input[now_num];</span><br><span class="line">        b2 = input[++now_num];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xD4</span>u:</span><br><span class="line">        or_not_num = not_2 | not_1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBF</span>u:</span><br><span class="line">        i_form = now_num++;</span><br><span class="line">        save[<span class="number">0</span>] = s[i_form];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x99</span>u:</span><br><span class="line">        now_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBB</span>u:</span><br><span class="line">        s[now_num - <span class="number">1</span>] = now_num + save[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;last, s, <span class="number">0x20</span>uLL) )</span><br></pre></td></tr></table></figure><p>输入用来初始化input了，所以相当于是用指令码对input加密，最后得到last</p><p>以及一开始有一个循环只有当code[i]==0先1时才会执行初始化，所以只需要匹配合理的指令即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">opcode = [<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, </span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, </span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, </span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, </span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, </span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, </span><br><span class="line">        <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x99</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, </span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x99</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x53</span>, </span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x88</span>, <span class="number">0xFF</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> code <span class="keyword">in</span> opcode:</span><br><span class="line">    <span class="keyword">match</span> code:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xa1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;last[now_num - 1] = or_not_num &amp; or_num&quot;</span> )</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xc3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;or_num = b1 | b2&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xb2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not_1 = ~b1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xe5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not_2 = ~b2&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xf1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b1 = input[now_num]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num += 1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b2 = input[now_num]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xd4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;or_not_num = not_2 | not_1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xbf</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;save = last[now_num]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num+=1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x99</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num = 0&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xbb</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;last[now_num-1] = now_num + save - 1&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大致是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0</span>]*<span class="number">100</span></span><br><span class="line">now_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line"></span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">now_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">now_num = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后化简逆向：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">last = [<span class="number">0x1D</span>, <span class="number">0x01</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x16</span>, <span class="number">0x42</span>, <span class="number">0x39</span>, <span class="number">0x0F</span>, </span><br><span class="line">        <span class="number">0x38</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, <span class="number">0x31</span>, <span class="number">0x28</span>, <span class="number">0x38</span>, <span class="number">0x67</span>, <span class="number">0x6E</span>, </span><br><span class="line">        <span class="number">0x1B</span>, <span class="number">0x61</span>, <span class="number">0x7C</span>, <span class="number">0x24</span>, <span class="number">0x1F</span>, <span class="number">0x47</span>, <span class="number">0x44</span>, <span class="number">0x81</span>, </span><br><span class="line">        <span class="number">0x6A</span>, <span class="number">0x2C</span>, <span class="number">0x6D</span>, <span class="number">0x2B</span>, <span class="number">0x2C</span>, <span class="number">0x2D</span>, <span class="number">0x6A</span>, <span class="number">0x9C</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># last = [0]*100</span></span><br><span class="line"><span class="comment"># now_num = 0</span></span><br><span class="line"><span class="comment"># for i in range(32):</span></span><br><span class="line"><span class="comment">#     b1 = input[now_num]</span></span><br><span class="line"><span class="comment">#     now_num += 1</span></span><br><span class="line"><span class="comment">#     b2 = input[now_num]</span></span><br><span class="line"><span class="comment">#     or_num = b1 | b2</span></span><br><span class="line"><span class="comment">#     not_1 = ~b1</span></span><br><span class="line"><span class="comment">#     not_2 = ~b2</span></span><br><span class="line"><span class="comment">#     or_not_num = not_2 | not_1</span></span><br><span class="line"><span class="comment">#     last[now_num - 1] = or_not_num &amp; or_num</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now_num = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(32):</span></span><br><span class="line"><span class="comment">#     save = last[now_num]</span></span><br><span class="line"><span class="comment">#     now_num+=1</span></span><br><span class="line"><span class="comment">#     last[now_num-1] = now_num + save - 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    last[i]-=i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    last[i]^=last[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">pl(last)</span><br><span class="line"><span class="comment">#NSSCTF&#123;H@ppy_Ch1ne5_NEwY3ar!1!1&#125;</span></span><br></pre></td></tr></table></figure><p>小结：这个题和之前遇到的jvm那道题一样，都要解析指令，还原流程</p><h2 id="羊城杯2021-babyvm"><a href="#羊城杯2021-babyvm" class="headerlink" title="羊城杯2021 babyvm"></a>羊城杯2021 babyvm</h2><p>这个题一样，只是在前面加了一个动态调试</p><p>指令码大概是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">sub_80487A8</span><span class="params">(_DWORD *reg)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *v1; <span class="comment">// [esp+18h] [ebp-20h]</span></span><br><span class="line"><span class="type">int</span> reg[<span class="number">999</span>];</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">113</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">6</span>] -= <span class="number">4</span>;</span><br><span class="line">      *(_DWORD *)reg[<span class="number">6</span>] = *(_DWORD *)(reg[<span class="number">8</span>] + <span class="number">1</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">65</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] += reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">66</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] -= reg[<span class="number">4</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">67</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">55</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">56</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">57</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">53</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xF7</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">68</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] /= reg[<span class="number">5</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0x80</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[sub_804875F(reg, <span class="number">1</span>)] = *(_DWORD *)(reg[<span class="number">8</span>] + <span class="number">2</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">119</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">83</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(*(<span class="type">char</span> *)reg[<span class="number">3</span>]);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">34</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">35</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0x99</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">118</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">3</span>] = *(_DWORD *)reg[<span class="number">6</span>];</span><br><span class="line">      *(_DWORD *)reg[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">      reg[<span class="number">6</span>] += <span class="number">4</span>;</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">84</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 = (_BYTE *)reg[<span class="number">3</span>];</span><br><span class="line">      *v1 = getchar();</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">48</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] |= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">49</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] &amp;= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">50</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">3</span>] = *(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = <span class="number">1877735783</span>;</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">16</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">51</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">52</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">2</span>] = *(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xFE</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = reg[<span class="number">9</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">17</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, reg[<span class="number">1</span>]);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xA0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( reg[<span class="number">1</span>] != <span class="number">1877735783</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xA1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      read(<span class="number">0</span>, s, <span class="number">0x2C</span>u);</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strlen</span>(s) != <span class="number">44</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">0</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xA4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      fog[*(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>)] = reg[<span class="number">1</span>];</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">3</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = (<span class="type">unsigned</span> __int8)s[*(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>)];</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC7</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( exit_door[<span class="number">0</span>] != reg[<span class="number">1</span>] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( exit_door[<span class="number">1</span>] != reg[<span class="number">1</span>] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)*(_DWORD *)(reg[<span class="number">8</span>] + <span class="number">1</span>) != reg[<span class="number">1</span>] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后转换写出来就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">flagafter = []</span><br><span class="line">fog = [<span class="number">0x0000007B</span>, <span class="number">0x0000002F</span>, <span class="number">0x00000037</span>, <span class="number">0x000000E8</span>]</span><br><span class="line"></span><br><span class="line">exit_door = [<span class="number">0xCF1304DC</span>, <span class="number">0x283B8E84</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">opcode = [<span class="number">0xA1</span>, <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4A</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x01</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x02</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0xDD</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x03</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x0F</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x04</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x05</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x89</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x06</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x07</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x08</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4F</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x09</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0A</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x55</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0B</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x56</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0C</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x8E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0D</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0E</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0F</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x10</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x11</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x12</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x13</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x14</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x53</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x15</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1F</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x16</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x52</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x17</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0xDB</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x18</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x19</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0xD9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1A</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1B</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x55</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1C</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1E</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1F</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x20</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x10</span>, <span class="number">0xC1</span>, <span class="number">0x21</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xFE</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x77</span>, <span class="number">0x10</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0xF1</span>, <span class="number">0x98</span>, <span class="number">0x31</span>, <span class="number">0x77</span>, <span class="number">0x10</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x20</span>, <span class="number">0xB9</span>, <span class="number">0xE4</span>, <span class="number">0x35</span>, <span class="number">0x31</span>, <span class="number">0x77</span>, <span class="number">0x10</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x77</span>, <span class="number">0xA0</span>, <span class="number">0xC1</span>, <span class="number">0x24</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x10</span>, <span class="number">0xC1</span>, <span class="number">0x25</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x26</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x27</span>, <span class="number">0xF7</span>, <span class="number">0xFE</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x10</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0xC7</span>, <span class="number">0xC1</span>, <span class="number">0x28</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x10</span>, <span class="number">0xC1</span>, <span class="number">0x29</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x2A</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x2B</span>, <span class="number">0xF7</span>, <span class="number">0xFE</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x10</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0xC8</span>, <span class="number">0x99</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_asm</span>(<span class="params">reg</span>):<span class="comment"># 这里写成python语法方便爆破</span></span><br><span class="line">    now = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        opcode = reg[now]</span><br><span class="line">        <span class="keyword">if</span> opcode == <span class="number">113</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;push <span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>,<span class="subst">&#123;reg[now+<span class="number">2</span>]&#125;</span>,<span class="subst">&#123;reg[now+<span class="number">3</span>]&#125;</span>,<span class="subst">&#123;reg[now+<span class="number">4</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">5</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">65</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1+=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">66</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1-=reg4&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">67</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1*=reg3&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">55</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1=reg5&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">56</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1^=reg4&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">57</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1^=reg5&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">53</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg5=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xF7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9+=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">68</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1/=reg5&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x80</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg<span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>= <span class="subst">&#123;<span class="built_in">int</span>.from_bytes(<span class="built_in">bytes</span>(reg[now + <span class="number">2</span>:now + <span class="number">6</span>]), <span class="string">&#x27;little&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">6</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x77</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1^=reg9&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x53</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;pop [reg3]&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x22</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1&gt;&gt;=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x23</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1&lt;&lt;=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x99</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x76</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;r3 = [r6]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[r6] = 0&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;r6 += 4&quot;</span>)</span><br><span class="line">            now += <span class="number">5</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x54</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;read [reg3]&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x30</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1|=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x31</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1&amp;=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x32</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;r3 = <span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">9</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1=1877735783&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x10</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x33</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg4=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x34</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg2=<span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xFE</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1=reg9&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x11</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;printf &#x27;%x\\n&#x27;, reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xA0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cmp reg1=1877735783&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xA1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;read 0, s, 0x2Cu&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cmp strlen(s), 44&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg9=<span class="subst">&#123;fog[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg9=<span class="subst">&#123;fog[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xA4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;fog[<span class="subst">&#123;now&#125;</span>]=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">4</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9=fog[2]&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9=fog[3]&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg1=s[<span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;cmp <span class="subst">&#123;exit_door[<span class="number">0</span>]&#125;</span>, reg1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC8</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;cmp <span class="subst">&#123;exit_door[<span class="number">1</span>]&#125;</span>, reg1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;exit if now!=r1&quot;</span>)</span><br><span class="line">            now += <span class="number">5</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">print_asm(opcode)</span><br></pre></td></tr></table></figure><p>这个变量没有命好名。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line">read 0, s, 0x2Cu</span><br><span class="line">cmp strlen(s), 44</span><br><span class="line">jne exit</span><br><span class="line">reg1=s[0]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 74!=r1</span><br><span class="line">reg1=s[1]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[2]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 221!=r1</span><br><span class="line">reg1=s[3]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 15!=r1</span><br><span class="line">reg1=s[4]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 27!=r1</span><br><span class="line">reg1=s[5]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 137!=r1</span><br><span class="line">reg1=s[6]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[7]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 84!=r1</span><br><span class="line">reg1=s[8]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 79!=r1</span><br><span class="line">reg1=s[9]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 78!=r1</span><br><span class="line">reg1=s[10]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 85!=r1</span><br><span class="line">reg1=s[11]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 86!=r1</span><br><span class="line">reg1=s[12]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 142!=r1</span><br><span class="line">reg1=s[13]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 73!=r1</span><br><span class="line">reg1=s[14]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 14!=r1</span><br><span class="line">reg1=s[15]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 75!=r1</span><br><span class="line">reg1=s[16]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 6!=r1</span><br><span class="line">reg1=s[17]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 84!=r1</span><br><span class="line">reg1=s[18]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 26!=r1</span><br><span class="line">reg1=s[19]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 66!=r1</span><br><span class="line">reg1=s[20]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 83!=r1</span><br><span class="line">reg1=s[21]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 31!=r1</span><br><span class="line">reg1=s[22]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 82!=r1</span><br><span class="line">reg1=s[23]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 219!=r1</span><br><span class="line">reg1=s[24]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[25]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 217!=r1</span><br><span class="line">reg1=s[26]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[27]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 85!=r1</span><br><span class="line">reg1=s[28]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[29]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 0!=r1</span><br><span class="line">reg1=s[30]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 75!=r1</span><br><span class="line">reg1=s[31]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 30!=r1</span><br><span class="line">reg1=s[32]</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9=reg1</span><br><span class="line">reg1=s[33]</span><br><span class="line">reg2= 16</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[34]</span><br><span class="line">reg2= 8</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[35]</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=reg9</span><br><span class="line">reg2= 5</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg9=reg1</span><br><span class="line">reg2= 7</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg2= 2565961507</span><br><span class="line">reg1&amp;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg9=reg1</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg2= 904182048</span><br><span class="line">reg1&amp;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg9=reg1</span><br><span class="line">reg2= 18</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">cmp reg1=1877735783</span><br><span class="line">jne exit</span><br><span class="line">reg1=s[36]</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9=reg1</span><br><span class="line">reg1=s[37]</span><br><span class="line">reg2= 16</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[38]</span><br><span class="line">reg2= 8</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[39]</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=reg9</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">reg9=reg1</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">cmp 3474130140, reg1</span><br><span class="line">jne exit</span><br><span class="line">reg1=s[40]</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9=reg1</span><br><span class="line">reg1=s[41]</span><br><span class="line">reg2= 16</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[42]</span><br><span class="line">reg2= 8</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[43]</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=reg9</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">reg9=reg1</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">cmp 674991748, reg1</span><br><span class="line">jne exit</span><br></pre></td></tr></table></figure><p>前面异或直接给ai破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">fog = [<span class="number">0x0000007B</span>, <span class="number">0x0000002F</span>, <span class="number">0x00000037</span>, <span class="number">0x000000E8</span>]</span><br><span class="line">s = [<span class="literal">None</span>] * <span class="number">32</span>  <span class="comment"># 创建一个长度为 32 的列表来存储 s 的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于每个 i，x 和 y 的值</span></span><br><span class="line"><span class="keyword">for</span> i, x, y <span class="keyword">in</span> [</span><br><span class="line">    (<span class="number">0</span>, fog[<span class="number">0</span>], <span class="number">74</span>), </span><br><span class="line">    (<span class="number">1</span>, fog[<span class="number">1</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">2</span>, fog[<span class="number">3</span>], <span class="number">221</span>), </span><br><span class="line">    (<span class="number">3</span>, fog[<span class="number">2</span>], <span class="number">15</span>), </span><br><span class="line">    (<span class="number">4</span>, fog[<span class="number">1</span>], <span class="number">27</span>), </span><br><span class="line">    (<span class="number">5</span>, fog[<span class="number">3</span>], <span class="number">137</span>), </span><br><span class="line">    (<span class="number">6</span>, fog[<span class="number">0</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">7</span>, fog[<span class="number">2</span>], <span class="number">84</span>), </span><br><span class="line">    (<span class="number">8</span>, fog[<span class="number">0</span>], <span class="number">79</span>), </span><br><span class="line">    (<span class="number">9</span>, fog[<span class="number">0</span>], <span class="number">78</span>), </span><br><span class="line">    (<span class="number">10</span>, fog[<span class="number">2</span>], <span class="number">85</span>), </span><br><span class="line">    (<span class="number">11</span>, fog[<span class="number">2</span>], <span class="number">86</span>), </span><br><span class="line">    (<span class="number">12</span>, fog[<span class="number">3</span>], <span class="number">142</span>), </span><br><span class="line">    (<span class="number">13</span>, fog[<span class="number">1</span>], <span class="number">73</span>), </span><br><span class="line">    (<span class="number">14</span>, fog[<span class="number">2</span>], <span class="number">14</span>), </span><br><span class="line">    (<span class="number">15</span>, fog[<span class="number">0</span>], <span class="number">75</span>), </span><br><span class="line">    (<span class="number">16</span>, fog[<span class="number">2</span>], <span class="number">6</span>), </span><br><span class="line">    (<span class="number">17</span>, fog[<span class="number">2</span>], <span class="number">84</span>), </span><br><span class="line">    (<span class="number">18</span>, fog[<span class="number">1</span>], <span class="number">26</span>), </span><br><span class="line">    (<span class="number">19</span>, fog[<span class="number">0</span>], <span class="number">66</span>), </span><br><span class="line">    (<span class="number">20</span>, fog[<span class="number">2</span>], <span class="number">83</span>), </span><br><span class="line">    (<span class="number">21</span>, fog[<span class="number">0</span>], <span class="number">31</span>), </span><br><span class="line">    (<span class="number">22</span>, fog[<span class="number">2</span>], <span class="number">82</span>), </span><br><span class="line">    (<span class="number">23</span>, fog[<span class="number">3</span>], <span class="number">219</span>), </span><br><span class="line">    (<span class="number">24</span>, fog[<span class="number">0</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">25</span>, fog[<span class="number">3</span>], <span class="number">217</span>), </span><br><span class="line">    (<span class="number">26</span>, fog[<span class="number">0</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">27</span>, fog[<span class="number">2</span>], <span class="number">85</span>), </span><br><span class="line">    (<span class="number">28</span>, fog[<span class="number">1</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">29</span>, fog[<span class="number">2</span>], <span class="number">0</span>), </span><br><span class="line">    (<span class="number">30</span>, fog[<span class="number">0</span>], <span class="number">75</span>), </span><br><span class="line">    (<span class="number">31</span>, fog[<span class="number">1</span>], <span class="number">30</span>)</span><br><span class="line">]:  </span><br><span class="line"></span><br><span class="line">    s[i] = <span class="built_in">chr</span>(y ^ x)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#16584abc45baff901c59dde3b1bb6701</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">characters = string.ascii_letters + string.digits + string.punctuation + <span class="string">&#x27; &#x27;</span></span><br><span class="line">combinations = itertools.product(characters, repeat=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">对每个组合执行给定的操作</span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> combinations:</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span>.join(combination)</span><br><span class="line">    reg = [<span class="number">0</span>] * <span class="number">10</span>  </span><br><span class="line">    reg[<span class="number">9</span>] = <span class="built_in">int</span>.from_bytes(s.encode(), <span class="string">&#x27;big&#x27;</span>)  </span><br><span class="line">    <span class="comment"># 将字符串转换为整数,这里用big，存储就是正序，不然是小端序转换</span></span><br><span class="line"></span><br><span class="line">    reg[<span class="number">1</span>] = reg[<span class="number">9</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">5</span></span><br><span class="line">    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">9</span>] = reg[<span class="number">1</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">7</span></span><br><span class="line">    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">2565961507</span></span><br><span class="line">    reg[<span class="number">1</span>] &amp;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">9</span>] = reg[<span class="number">1</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">24</span></span><br><span class="line">    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">904182048</span></span><br><span class="line">    reg[<span class="number">1</span>] &amp;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">9</span>] = reg[<span class="number">1</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">18</span></span><br><span class="line">    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查结果是否等于 1877735783</span></span><br><span class="line">    <span class="keyword">if</span> reg[<span class="number">1</span>] == <span class="number">1877735783</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;找到了满足条件的字符串：<span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># a245</span></span><br></pre></td></tr></table></figure><p>第二部分有与，不可能逆出来，干脆爆破</p><p>后面两次有左移，不好用python，就用c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 所有可能的字符</span></span><br><span class="line"><span class="type">char</span> characters[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化寄存器</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> reg[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对每一个组合进行检查</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(characters); i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(characters); j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="built_in">strlen</span>(characters); k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="built_in">strlen</span>(characters); l++) &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">40</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">s[<span class="number">36</span>] = characters[i];</span><br><span class="line">s[<span class="number">37</span>] = characters[j];</span><br><span class="line">s[<span class="number">38</span>] = characters[k];</span><br><span class="line">s[<span class="number">39</span>] = characters[l];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行给定的操作</span></span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">36</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">24</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">37</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">16</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">38</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">8</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">39</span>];</span><br><span class="line">reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">reg[<span class="number">1</span>] = reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line">reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查结果</span></span><br><span class="line"><span class="keyword">if</span> (reg[<span class="number">1</span>] == <span class="number">3474130140</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Found matching combination: %c%c%c%c\n&quot;</span>, s[<span class="number">36</span>], s[<span class="number">37</span>], s[<span class="number">38</span>], s[<span class="number">39</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No matching combination found.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b06c</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 所有可能的字符</span></span><br><span class="line">    <span class="type">char</span> characters[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化寄存器</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> reg[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对每一个组合进行检查</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(characters); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(characters); j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="built_in">strlen</span>(characters); k++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="built_in">strlen</span>(characters); l++) &#123;</span><br><span class="line">                    <span class="type">char</span> s[<span class="number">44</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    s[<span class="number">40</span>] = characters[i];</span><br><span class="line">                    s[<span class="number">41</span>] = characters[j];</span><br><span class="line">                    s[<span class="number">42</span>] = characters[k];</span><br><span class="line">                    s[<span class="number">43</span>] = characters[l];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 执行给定的操作</span></span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">40</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">24</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">41</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">16</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">42</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">8</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">43</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                    reg[<span class="number">1</span>] = reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">                    reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">                    reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 检查结果</span></span><br><span class="line">                    <span class="keyword">if</span> (reg[<span class="number">1</span>] == <span class="number">674991748</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Found matching combination: %c%c%c%c\n&quot;</span>, s[<span class="number">40</span>], s[<span class="number">41</span>], s[<span class="number">42</span>], s[<span class="number">43</span>]);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No matching combination found.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dc23</span></span><br></pre></td></tr></table></figure><p>最后合并一下flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;<span class="number">16584</span>abc45baff901c59dde3b1bb6701a254b06cdc23&#125;</span><br></pre></td></tr></table></figure><p>这个题最后很明显是不能直接逆向的，那就需要爆破，所以翻译opcode的时候写成python语法或者c语法就会更方便，然后注意一下爆破的时候的大端序和小端序就好了</p><h2 id="羊城杯2023-vm-wo"><a href="#羊城杯2023-vm-wo" class="headerlink" title="羊城杯2023 vm_wo"></a>羊城杯2023 vm_wo</h2><p>这道题是我第一次遇见mac的题</p><p>一开始用ida 8.3打开，但是不能反编译，去网上看wp发现好像都能反编译，于是试了试7.7结果就可以了&gt;_&lt;</p><p>打开之后直接去主函数，直接拿到了last</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span>]</span><br></pre></td></tr></table></figure><p>在之前进行了myoperate这个函数，应该是encode<br>然后就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">myoperate</span><span class="params">(<span class="type">char</span> *flag, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 i; <span class="comment">// x20</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">15</span>]; <span class="comment">// [xsp+8h] [xbp-98h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">15</span>]; <span class="comment">// [xsp+18h] [xbp-88h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">15</span>]; <span class="comment">// [xsp+28h] [xbp-78h] BYREF</span></span><br><span class="line">  <span class="type">char</span> code[<span class="number">16</span>]; <span class="comment">// [xsp+38h] [xbp-68h] BYREF</span></span><br><span class="line">  __int64 v8; <span class="comment">// [xsp+48h] [xbp-58h]</span></span><br><span class="line"></span><br><span class="line">  LODWORD(i) = len;</span><br><span class="line">  v8 = <span class="number">0x100000CFEEDFA</span>LL;</span><br><span class="line">  dword_100008003 = <span class="number">0xBEEDBEEF</span>;</span><br><span class="line">  <span class="keyword">if</span> ( ptrace(<span class="number">0</span>, <span class="number">0</span>, (<span class="type">caddr_t</span>)<span class="number">1</span>, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)i &gt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    i = (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)code = <span class="number">0x20D01011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;code[<span class="number">7</span>] = <span class="number">0x300010201180702</span>LL;</span><br><span class="line">      code[<span class="number">2</span>] = *flag;</span><br><span class="line">      interpretBytecode(code, <span class="number">15</span>);</span><br><span class="line">      *(_QWORD *)v6 = <span class="number">0x20D02011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v6[<span class="number">7</span>] = <span class="number">0x400010201180602</span>LL;</span><br><span class="line">      v6[<span class="number">2</span>] = vm.body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode(v6, <span class="number">15</span>);</span><br><span class="line">      *(_QWORD *)v5 = <span class="number">0x20D03011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v5[<span class="number">7</span>] = <span class="number">0x500010201180502</span>LL;</span><br><span class="line">      v5[<span class="number">2</span>] = vm.body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode(v5, <span class="number">15</span>);</span><br><span class="line">      *(_QWORD *)v4 = <span class="number">0x20D04011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v4[<span class="number">7</span>] = <span class="number">0x600010201180402</span>LL;</span><br><span class="line">      v4[<span class="number">2</span>] = vm.body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode(v4, <span class="number">15</span>);</span><br><span class="line">      *flag++ = ((<span class="type">unsigned</span> __int8)vm.body[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * vm.body[<span class="number">0</span>]);</span><br><span class="line">      --i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是opcode生成的位置，注意一共有15位同时第二位被换成了flag的值<br>相当于每轮对一个字符加密<br>所以写解密函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">t = [[<span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x7</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x3</span>],</span><br><span class="line">     [<span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x6</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x4</span>],</span><br><span class="line">     [<span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x5</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x5</span>],</span><br><span class="line">    [ <span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x4</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x4</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x6</span>]]</span><br><span class="line"><span class="comment"># 0xff用作标志,表明这里使用了上一次加密后的这一位flag</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> t:</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># this_code = b[i]</span></span><br><span class="line">            code0 = b[i]</span><br><span class="line">            code1 = b[i+<span class="number">1</span>]</span><br><span class="line">            code2 = b[i+<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">if</span> code0 == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>], s[<span class="subst">&#123;code2&#125;</span>] = s[<span class="subst">&#123;code2&#125;</span>], s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] ^= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] += <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] += s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] *= <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] *= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">8</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] //= <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">9</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] //= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">10</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">11</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">12</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[<span class="subst">&#123;code1&#125;</span>] &lt;&lt; <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">13</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[0] &lt;&lt; <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">14</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">15</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;print(s[<span class="subst">&#123;code1&#125;</span>])&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">16</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;i -= 1&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;print(s[<span class="subst">&#123;i + <span class="number">16</span>&#125;</span>])&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">17</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;i = <span class="subst">&#123;code2&#125;</span> if not s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">18</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;i = <span class="subst">&#123;code2&#125;</span> if s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="comment"># elif code0 == 19:</span></span><br><span class="line">            <span class="comment">#     # i = code1</span></span><br><span class="line">            <span class="comment"># elif code0 == 20:</span></span><br><span class="line">            <span class="comment">#     # s[code1] = s[code1]</span></span><br><span class="line">            <span class="comment"># elif code0 == 21:</span></span><br><span class="line">            <span class="comment">#     # i -= 1</span></span><br><span class="line">            <span class="comment">#     # s[0] = s[i + 16]</span></span><br><span class="line">            <span class="comment"># elif code0 == 22:</span></span><br><span class="line">            <span class="comment">#     # s[i + 16] = code1</span></span><br><span class="line">            <span class="comment"># elif code0 == 23:</span></span><br><span class="line">            <span class="comment">#     break</span></span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">24</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[0] = byte_100008002 | byte_100008001&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">25</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[0] &gt;&gt; <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">26</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            i += <span class="number">3</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(b):</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">s[<span class="number">0</span>] = flag[i]</span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">1</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">7</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">3</span>]</span><br><span class="line"><span class="comment"># s[0] = 255</span></span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">2</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">6</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">4</span>]</span><br><span class="line"><span class="comment"># s[0] = 255</span></span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">3</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">5</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">5</span>]</span><br><span class="line"><span class="comment"># s[0] = 255</span></span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">4</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">4</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>但是我不理解的是byte_100008002和byte_100008001的值，不然没法或。。<br>去网上看了wp,看到了它们的dword_100008003和这两个值是一样的<br>（然后才发现那四个值在一起是个数组，前面还有3个寄存器，就是上面代码的s0,s1,s2）<br>就是</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">arr</span> = <span class="number">0</span>xDEEDBEEF.to_bytes(<span class="number">4</span>,<span class="string">&#x27;little&#x27;</span>)</span><br></pre></td></tr></table></figure><p>相当于这个dword是s = [0,0,0xEF,0xBE,0xED,0xDE]放在这四个位置上,因为deadbeef是第四个上面放着<br>写一下解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">last = [<span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, </span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, </span><br><span class="line">        <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, </span><br><span class="line">        <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>(<span class="params">k</span>):</span><br><span class="line">    q = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(k)):</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">            t = (s &gt;&gt; <span class="number">1</span> | (s &lt;&lt; <span class="number">7</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xef</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">2</span> | (t &lt;&lt; <span class="number">6</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xbe</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">3</span> | (t &lt;&lt; <span class="number">5</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xed</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">4</span> | (t &lt;&lt; <span class="number">4</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xde</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">5</span> | (t &lt;&lt; <span class="number">3</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">            <span class="keyword">if</span> (t == k[i]):</span><br><span class="line">                q.append(s)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line">pl(back(last))</span><br></pre></td></tr></table></figure><p>?为什么出不来，好好好，不是deadbeef是beedbeef是吧,,6,改好之后</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DASCTF</span><span class="template-variable">&#123;you_are_right_so_cool&#125;</span></span><br></pre></td></tr></table></figure><hr><p>做完这几道题，感觉vm主要考把opcode转汇编，再把汇编转可读代码的静态分析能力，这里要分析出reg，stack的实现是哪些代码，如果能拿到opcode，就能分析出其中可能不用的case，省去一些时间</p><p>而且一般是用单字节加密，所以后面可以爆破答案，</p><p>如果用python写脚本，要注意左移时要限定范围不然会得不到正确结果</p><p>最后在第三道题，ida版本能直接影响到反编译的结果，最后用7.5版本才能正确反编译出来</p>]]></content>
    
    
    <summary type="html">上次介绍完之后，再次根据题目来练习</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="VM" scheme="https://www.pri87.vip/tags/VM/"/>
    
  </entry>
  
  <entry>
    <title>polar_re部分wp</title>
    <link href="https://www.pri87.vip/posts/5a6db6c8.html"/>
    <id>https://www.pri87.vip/posts/5a6db6c8.html</id>
    <published>2024-03-05T13:52:24.000Z</published>
    <updated>2024-03-05T13:54:59.086Z</updated>
    
    <content type="html"><![CDATA[<p>这个polar的re感觉质量好低，不是太简单就是太恶心，写了5道不想写了QAQ</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>用apktool解包，在assets文件中把zip文件名改成png得到flag</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;money<span class="number">_</span><span class="keyword">is</span><span class="number">_n</span>othing&#125;</span><br></pre></td></tr></table></figure><p>这题被坑了一个晚上，因为一开始尝试静态分析一关一关过，结果解包之后flag在图片里面，之后看到这种可以逆出资源的可以先尝试把资源找出来，说不定就是flag，<del>建议把这道题放到misc</del></p><h3 id="老八小冒险"><a href="#老八小冒险" class="headerlink" title="老八小冒险"></a>老八小冒险</h3><p>这个题挺简单的，甚至都是原始工程文件，没有打包也不用解包</p><p>直接用rpgmaker vx ace打开，直接看事件就好了</p><p>jbkjckjsdsfdsfjbkjckj的md5</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">60</span>b<span class="number">6</span>cd<span class="number">0848639100</span><span class="keyword">c</span><span class="number">68</span><span class="keyword">c</span><span class="number">04</span>d<span class="number">4884</span>db<span class="number">1e8</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="逢七必变"><a href="#逢七必变" class="headerlink" title="逢七必变"></a>逢七必变</h3><p>第一次见到aspack壳，尝试搜索工具脱壳,找到了，那么就直接使用，结果工具有问题，看来还是要一步一步调</p><p>打开之后，里面的代码好像很奇怪，代码看不懂，一开始call然后又返回，不理解，esp定律一开始也不好使/</p><p>好吧，因为这个特征不一样，这个aspack壳的特点是一开始popad，然后call，最后popad，然后ret，在popad完对esp下断点然后点击运行，可以直接到ret的位置，之后f7一下，应该可以到一个call加jmp的位置，这里就是oep</p><p><img src="https://s2.loli.net/2024/03/04/6QyLedptHSumvg7.png" alt="image-20240304193949183"></p><p>在这个位置dump，然后打开dump的文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> len; <span class="comment">// kr00_4</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [esp+14h] [ebp-110h]</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">256</span>]; <span class="comment">// [esp+20h] [ebp-104h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">&quot;akf`|7fda1005c?1b253bc17346b5c77bab?0z&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v6[<span class="number">39</span>], <span class="number">0</span>, <span class="number">0xD9</span>u);</span><br><span class="line">  len = <span class="built_in">strlen</span>(v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">    v6[i] ^= <span class="number">7u</span>;</span><br><span class="line">  sub_5F1040(<span class="string">&quot;You got it!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后有手就行了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">0</span>acf6772d86e524ed60431e2d00efe87&#125;</span><br></pre></td></tr></table></figure><h3 id="高卢战记"><a href="#高卢战记" class="headerlink" title="高卢战记"></a>高卢战记</h3><p>直接ida打开obj文件，看main函数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">6f759f8f7</span>:deg::<span class="number">796486</span>&lt;<span class="number">8</span>&lt;<span class="number">8</span>edf9:<span class="number">73</span></span><br></pre></td></tr></table></figure><p>只有一个这个然后就输出了这个</p><p>一开始看不懂</p><p>结果。。因为《高卢战记》是凯撒写的，书里面用的3的位移，所以要用-3</p><p>这样接出来就是flag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">3</span><span class="keyword">c</span><span class="number">426</span><span class="keyword">c</span><span class="number">5</span><span class="keyword">c</span><span class="number">47</span>abd<span class="number">774631539595</span>bac<span class="number">6740</span>&#125;</span><br></pre></td></tr></table></figure><p>真恶心，为什么不是misc</p><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><p>直接得到最短26</p><p>画图或者ai（比ai还快）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">from</span> <span class="string">prism</span> <span class="string">import</span> <span class="string">*</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">import</span> <span class="string">heapq</span></span><br><span class="line"></span><br><span class="line"><span class="string">def</span> <span class="string">dijkstra(graph,</span> <span class="string">start,</span> <span class="string">end):</span></span><br><span class="line">    <span class="string">heap</span> <span class="string">=</span> [<span class="string">(0</span>, <span class="string">start)</span>]</span><br><span class="line">    <span class="string">distances</span> <span class="string">=</span> &#123;<span class="attr">node:</span> <span class="string">float(&#x27;infinity&#x27;)</span> <span class="string">for</span> <span class="string">node</span> <span class="string">in</span> <span class="string">graph</span>&#125;</span><br><span class="line">    <span class="string">distances[start]</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line">    <span class="string">paths</span> <span class="string">=</span> &#123;<span class="attr">start:</span> []&#125;</span><br><span class="line"></span><br><span class="line">    <span class="attr">while heap:</span></span><br><span class="line">        <span class="string">(dist,</span> <span class="string">current)</span> <span class="string">=</span> <span class="string">heapq.heappop(heap)</span></span><br><span class="line">        <span class="string">if</span> <span class="string">dist</span> <span class="string">&gt;</span> <span class="string">distances[current]:</span></span><br><span class="line">            <span class="string">continue</span></span><br><span class="line">        <span class="string">for</span> <span class="string">neighbor,</span> <span class="string">neighbor_dist</span> <span class="string">in</span> <span class="string">graph[current].items():</span></span><br><span class="line">            <span class="string">old_dist</span> <span class="string">=</span> <span class="string">distances[neighbor]</span></span><br><span class="line">            <span class="string">new_dist</span> <span class="string">=</span> <span class="string">dist</span> <span class="string">+</span> <span class="string">neighbor_dist</span></span><br><span class="line">            <span class="string">if</span> <span class="string">new_dist</span> <span class="string">&lt;</span> <span class="attr">old_dist:</span></span><br><span class="line">                <span class="string">distances[neighbor]</span> <span class="string">=</span> <span class="string">new_dist</span></span><br><span class="line">                <span class="string">paths[neighbor]</span> <span class="string">=</span> <span class="string">paths[current]</span> <span class="string">+</span> [<span class="string">neighbor</span>]</span><br><span class="line">                <span class="string">heapq.heappush(heap,</span> <span class="string">(new_dist,</span> <span class="string">neighbor))</span></span><br><span class="line">    <span class="string">return</span> <span class="string">distances[end],</span> <span class="string">paths[end]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义图的边和权重</span></span><br><span class="line"><span class="string">graph</span> <span class="string">=</span> &#123;</span><br><span class="line">    <span class="attr">1:</span> &#123;<span class="attr">2:</span> <span class="number">2</span>, <span class="attr">3:</span> <span class="number">3</span>&#125;,</span><br><span class="line">    <span class="attr">2:</span> &#123;<span class="attr">3:</span> <span class="number">5</span>, <span class="attr">4:</span> <span class="number">3</span>, <span class="attr">10:</span> <span class="number">20</span>&#125;,</span><br><span class="line">    <span class="attr">3:</span> &#123;<span class="attr">5:</span> <span class="number">6</span>, <span class="attr">8:</span> <span class="number">5</span>&#125;,</span><br><span class="line">    <span class="attr">4:</span> &#123;<span class="attr">5:</span> <span class="number">7</span>&#125;,</span><br><span class="line">    <span class="attr">5:</span> &#123;<span class="attr">9:</span> <span class="number">4</span>, <span class="attr">8:</span> <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="attr">6:</span> &#123;<span class="attr">7:</span> <span class="number">3</span>&#125;,</span><br><span class="line">    <span class="attr">7:</span> &#123;<span class="attr">14:</span> <span class="number">6</span>&#125;,</span><br><span class="line">    <span class="attr">8:</span> &#123;<span class="attr">11:</span> <span class="number">5</span>, <span class="attr">15:</span> <span class="number">21</span>&#125;,</span><br><span class="line">    <span class="attr">9:</span> &#123;<span class="attr">12:</span> <span class="number">5</span>&#125;,</span><br><span class="line">    <span class="attr">10:</span> &#123;&#125;,</span><br><span class="line">    <span class="attr">11:</span> &#123;<span class="attr">15:</span> <span class="number">13</span>&#125;,</span><br><span class="line">    <span class="attr">12:</span> &#123;<span class="attr">15:</span> <span class="number">9</span>&#125;,</span><br><span class="line">    <span class="attr">14:</span> &#123;<span class="attr">15:</span> <span class="number">7</span>&#125;,</span><br><span class="line">    <span class="attr">15:</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行Dijkstra算法</span></span><br><span class="line"><span class="string">distance,</span> <span class="string">path</span> <span class="string">=</span> <span class="string">dijkstra(graph,</span> <span class="number">1</span><span class="string">,</span> <span class="number">15</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">print(f&quot;最短距离:</span> &#123;<span class="string">distance</span>&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">print(f&quot;</span><span class="string">路径:</span> &#123;<span class="string">&#x27; -&gt; &#x27;</span><span class="string">.join(map(str</span>, <span class="string">path))</span>&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">pmd5(&quot;</span><span class="number">1381115</span><span class="string">&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">4991</span>ce1781b53409a7a84e2baf9431d6&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">真的感觉质量低，没写的别写QAQ</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>青少年ctf#1 wp</title>
    <link href="https://www.pri87.vip/posts/c4803d60.html"/>
    <id>https://www.pri87.vip/posts/c4803d60.html</id>
    <published>2024-03-02T16:29:55.000Z</published>
    <updated>2024-03-06T05:16:31.437Z</updated>
    
    <content type="html"><![CDATA[<p>不知为何，密码比逆向做的多，但是不会密码也不会逆向</p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="解个方程"><a href="#解个方程" class="headerlink" title="解个方程"></a>解个方程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line">p = <span class="number">88405749077010121197972538332505989817</span></span><br><span class="line">q = <span class="number">314336612126421969080144444342415739457</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>这个是动态flag</p><h3 id="ez-log"><a href="#ez-log" class="headerlink" title="ez_log"></a>ez_log</h3><p>这个题是求离散对数，g=3，直接用函数求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> discrete_log</span><br><span class="line">p=<span class="number">3006156660704242356836102321001016782090189571028526298055526061772989406357037170723984497344618257575827271367883545096587962708266010793826346841303043716776726799898939374985320242033037</span></span><br><span class="line">g = <span class="number">3</span></span><br><span class="line">c=<span class="number">2637361207438328172880452774725735558448205624296999428196250415451022718950315626464793126507500112508727744681450551541566511482157902377105193512791814667446983536196889757495426692091900</span></span><br><span class="line"></span><br><span class="line">m = discrete_log(p, c, g)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>也是动态flag</p><h3 id="四重加密"><a href="#四重加密" class="headerlink" title="四重加密"></a>四重加密</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">base32:</span></span><br><span class="line"><span class="language-xml">qsnctf</span></span><br><span class="line"><span class="language-xml">ascii code:</span></span><br><span class="line"><span class="language-xml">zcye</span><span class="template-variable">&#123;mxmemtxrzt_lzbha_kwmqzec&#125;</span><span class="language-xml">|key=hello</span></span><br><span class="line"><span class="language-xml">维吉尼亚：</span></span><br><span class="line"><span class="language-xml">synt</span><span class="template-variable">&#123;yqitbfqnoi_xsxwp_wpifoqv&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">凯撒:</span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;ldvgosdabv_kfkjc_jcvsbdi&#125;</span></span><br></pre></td></tr></table></figure><p>把flag改成qsnctf就好</p><h3 id="ez-rsa"><a href="#ez-rsa" class="headerlink" title="ez_rsa"></a>ez_rsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;qsnctf&#123;xxx-xxxx-xxxx-xxxx-xxxxxxxxx&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q * r</span><br><span class="line">leak = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak = <span class="subst">&#123;leak&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>相当于已知r,e,c求m</p><p>我们知道</p><script type="math/tex; mode=display">c = m^e \mod pqr\iff\\c = m^e + kpqr\iff\\c = m^e + (kpq)r\iff\\c = m^e \mod r</script><p>那么就可以解出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gy</span><br><span class="line"></span><br><span class="line">c = <span class="number">173595148273920891298949441727054328036798235134009407863895058729356993814829340513336567479145746034781201823694596731886346933549577879568197521436900228804336056005940048086898794965549472641334237175801757569154295743915744875800647234151498117718087319013271748204766997008772782882813572814296213516343420236873651060868227487925491016675461540894535563805130406391144077296854410932791530755245514034242725719196949258860635915202993968073392778882692892</span></span><br><span class="line">n = <span class="number">1396260492498511956349135417172451037537784979103780135274615061278987700332528182553755818089525730969834188061440258058608031560916760566772742776224528590152873339613356858551518007022519033843622680128062108378429621960808412913676262141139805667510615660359775475558729686515755127570976326233255349428771437052206564497930971797497510539724340471032433502724390526210100979700467607197448780324427953582222885828678441579349835574787605145514115368144031247</span></span><br><span class="line">leak = <span class="number">152254254502019783796170793516692965417859793325424454902983763285830332059600151137162944897787532369961875766745853731769162511788354655291037150251085942093411304833287510644995339391240164033052417935316876168953838783742499485868268986832640692657031861629721225482114382472324320636566226653243762620647</span></span><br><span class="line">r = n // leak</span><br><span class="line">phi = r-<span class="number">1</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = gy.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,r)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#qsnctf&#123;12ff81e0-7646-4a96-a7eb-6a509ec01c9e&#125;</span></span><br></pre></td></tr></table></figure><p>根据这道题可以知道：已知c,e,和n的任意一个因子（如果这个因子可以求phi）那就可以直接解</p><h3 id="factor1"><a href="#factor1" class="headerlink" title="factor1"></a>factor1</h3><p>这个题是第一次见</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">d = getPrime(<span class="number">256</span>)</span><br><span class="line">e = gmpy2.invert(d, (p**<span class="number">2</span> - <span class="number">1</span>) * (q**<span class="number">2</span> - <span class="number">1</span>))</span><br><span class="line">flag = <span class="string">&quot;qsnctf&#123;&quot;</span> + hashlib.md5(<span class="built_in">str</span>(p+q).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># 4602579741478096718172697218991734057017874575484294836043557658035277770732473025335441717904100009903832353915404911860888652406859201203199117870443451616457858224082143505393843596092945634675849883286107358454466242110831071552006337406116884147391687266536283395576632885877802269157970812862013700574069981471342712011889330292259696760297157958521276388120468220050600419562910879539594831789625596079773163447643235584124521162320450208920533174722239029506505492660271016917768383199286913178821124229554263149007237679675898370759082438533535303763664408320263258144488534391712835778283152436277295861859</span></span><br><span class="line"><span class="comment"># 78665180675705390001452176028555030916759695827388719494705803822699938653475348982551790040292552032924503104351703419136483078949363470430486531014134503794074329285351511023863461560882297331218446027873891885693166833003633460113924956936552466354566559741886902240131031116897293107970411780310764816053</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到这个题很神奇的地方在于(p<em>\</em>2 - 1) <em> (q</em>*2 - 1),所以我去搜了一下，就搜到攻击脚本了</p><p><a href="https://www.cnblogs.com/tr0uble/p/17106202.html#/c/subject/p/17106202.html">Cryptanalysis of RSA Variants with Primes Sharing Most Significant Bits - tr0uble - 博客园 (cnblogs.com)</a></p><p>好像叫LUC，用连分数方法攻击，但是看不懂，有机会之后看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">N, e</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors of a modulus and the private exponent if two prime factors share most significant bits</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param e: the public exponent</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors and the private exponent, or None if the private exponent was not found</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    PR = PolynomialRing(ZZ, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    x = PR.gen()</span><br><span class="line">    convergents = continued_fraction(ZZ(e) / ZZ((N-<span class="number">1</span>)**<span class="number">2</span>)).convergents()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> convergents:</span><br><span class="line">        k = c.numerator()</span><br><span class="line">        d = c.denominator()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = x**<span class="number">2</span> - x*(N**<span class="number">2</span> + <span class="number">1</span> - <span class="built_in">int</span>((e*d-<span class="number">1</span>)/k)) + N**<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> f.discriminant() &gt; <span class="number">0</span>:</span><br><span class="line">                root = f.roots()</span><br><span class="line">                p2 = root[<span class="number">0</span>][<span class="number">0</span>]; q2 = root[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> is_square(p2) <span class="keyword">and</span> is_square(q2):</span><br><span class="line">                    p = isqrt(p2); q = isqrt(q2)</span><br><span class="line">                    <span class="keyword">if</span> p*q == N:</span><br><span class="line">                        <span class="keyword">return</span> p, q, d</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">4602579741478096718172697218991734057017874575484294836043557658035277770732473025335441717904100009903832353915404911860888652406859201203199117870443451616457858224082143505393843596092945634675849883286107358454466242110831071552006337406116884147391687266536283395576632885877802269157970812862013700574069981471342712011889330292259696760297157958521276388120468220050600419562910879539594831789625596079773163447643235584124521162320450208920533174722239029506505492660271016917768383199286913178821124229554263149007237679675898370759082438533535303763664408320263258144488534391712835778283152436277295861859</span></span><br><span class="line">n = <span class="number">78665180675705390001452176028555030916759695827388719494705803822699938653475348982551790040292552032924503104351703419136483078949363470430486531014134503794074329285351511023863461560882297331218446027873891885693166833003633460113924956936552466354566559741886902240131031116897293107970411780310764816053</span></span><br><span class="line">p=q=d=<span class="number">0</span></span><br><span class="line">p,q,d = attack(n,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(p + q))</span><br></pre></td></tr></table></figure><p>这个是sage</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">17842948407837550252915901438494310860377505026658598797918460167146832545038336985103505761787935094014130901091944301325113646047622033244783641463109866</span>\</span><br><span class="line"><span class="attribute">qsnctf</span>&#123;<span class="number">8072</span>e8b2982bc729cc74ef58f1abc862&#125;</span><br></pre></td></tr></table></figure><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p>那个txt一打开，好像看不出来是什么，到最后发现504d0304那就是压缩包了，写个脚本生成文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_bin</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f_in, <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">        <span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(f_in):</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 每隔一行处理一次</span></span><br><span class="line">                hex_str = line[<span class="number">10</span>:<span class="number">57</span>].replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 从第11个字符开始，读取到第57个字符</span></span><br><span class="line">                bin_data = <span class="built_in">bytes</span>.fromhex(hex_str)</span><br><span class="line">                f_out.write(bin_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hex_to_bin(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;output.zip&#x27;</span>)</span><br><span class="line"><span class="comment">#这边事先处理成正的了</span></span><br></pre></td></tr></table></figure><p>output.zip直接爆破，因为说了是小写和数字</p><p>z12345，得到flag图片拼接即可</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">qsnctf</span><span class="template-variable">&#123;b414e3e3a6449ddba0997db259203eb7&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="来打cs咯"><a href="#来打cs咯" class="headerlink" title="来打cs咯"></a>来打cs咯</h3><p>文件描述不要在实体机打开</p><p>于是在win10虚拟机中sandboxie中尝试用ida调试</p><p>但是打开后函数很杂，看不出来在干什么</p><p>网上查查这种题该怎么做，看到要放到在线沙箱中分析一下</p><p>直接拿到</p><p>10.0.80.253:8118</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">qsnctf</span>&#123;<span class="number">10.0.80.253:8118</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学废了，学废了</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="crypto" scheme="https://www.pri87.vip/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>HGAME 2024 week4 RE wp</title>
    <link href="https://www.pri87.vip/posts/f5113ec1.html"/>
    <id>https://www.pri87.vip/posts/f5113ec1.html</id>
    <published>2024-02-28T13:47:51.000Z</published>
    <updated>2024-02-28T13:51:23.816Z</updated>
    
    <content type="html"><![CDATA[<p>这次re至少能看懂</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="again"><a href="#again" class="headerlink" title="again!"></a>again!</h3><p>打开后发现一个py打包的exe和bin2.pyc</p><p>反编译一下第一个文件,说是要用这个文件去解密bin2,但是看不懂QAQ</p><p>但是二进制形式打开bin2，观察可以发现出现大量一样的</p><p>a405b5d321e446459d8f9169d027bd92</p><p>怀疑是异或，所以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_with_key</span>(<span class="params">input_file, key, output_file</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fin, <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            chunk = fin.read(<span class="number">32</span>)  </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(chunk) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            data = <span class="built_in">bytearray</span>(<span class="built_in">len</span>(chunk))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chunk)):</span><br><span class="line">                data[i] = chunk[i] ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])  </span><br><span class="line">            fout.write(data)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;a405b5d321e446459d8f9169d027bd92&quot;</span>  </span><br><span class="line">xor_with_key(<span class="string">&#x27;bin2&#x27;</span>, key, <span class="string">&#x27;output.bin&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后得到的文件再二进制打开一下，是winPE，就ida打开</p><p>主函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> key[<span class="number">6</span>]; <span class="comment">// [rsp+20h] [rbp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_140001020(<span class="string">&quot;plz input your flag:&quot;</span>);</span><br><span class="line">  sub_140001080(<span class="string">&quot;%32s&quot;</span>,flag);</span><br><span class="line">  key[<span class="number">0</span>] = <span class="number">0x1234</span>;</span><br><span class="line">  key[<span class="number">1</span>] = <span class="number">0x2341</span>;</span><br><span class="line">  key[<span class="number">2</span>] = <span class="number">0x3412</span>;</span><br><span class="line">  key[<span class="number">3</span>] = <span class="number">0x4123</span>;</span><br><span class="line">  encode(key);</span><br><span class="line">  i = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">while</span> ( flag[i] == *(_DWORD *)((<span class="type">char</span> *)&amp;check + i * <span class="number">4</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v3 &gt;= <span class="number">8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_140001020(<span class="string">&quot;Congratulations!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_140001020(<span class="string">&quot;Wrong!try again...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来就是flag以dword来加密然后比较,encode里面是一个TEA变体，直接逆就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s6;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> delta;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s5;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s4; <span class="comment">// r15d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s3; <span class="comment">// r14d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s2; <span class="comment">// ebp</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s1; <span class="comment">// esi</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s0; <span class="comment">// r11d</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// ebx</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s7; <span class="comment">// [rsp+40h] [rbp+8h]</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flag[<span class="number">8</span>] = &#123; <span class="number">0x506FB5C3</span>, <span class="number">0xB9358F45</span>, <span class="number">0xC91AE8C7</span>, <span class="number">0x3820E280</span>, <span class="number">0xD13ABA83</span>, <span class="number">0x975CF554</span>, <span class="number">0x4352036B</span>, <span class="number">0x1CD20447</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x00001234</span>, <span class="number">0x00002341</span>, <span class="number">0x00003412</span>, <span class="number">0x00004123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key_[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0x00001234</span>, <span class="number">0x00002341</span>, <span class="number">0x00003412</span>, <span class="number">0x00004123</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">s7 = flag[<span class="number">7</span>];</span><br><span class="line">s1 = flag[<span class="number">1</span>];</span><br><span class="line">s2 = flag[<span class="number">2</span>];</span><br><span class="line">s3 = flag[<span class="number">3</span>];</span><br><span class="line">s4 = flag[<span class="number">4</span>];</span><br><span class="line">s5 = flag[<span class="number">5</span>];</span><br><span class="line">s6 = flag[<span class="number">6</span>];</span><br><span class="line">s0 = flag[<span class="number">0</span>];</span><br><span class="line">delta = <span class="number">0</span>;</span><br><span class="line">delta += <span class="number">0x7937B99E</span> * <span class="number">12</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">v11 = key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">s7 -= (((s6 ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">3</span>]) + (delta ^ flag[<span class="number">0</span>])) ^ (((<span class="number">16</span> * s6) ^ (flag[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>)) + ((s6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * flag[<span class="number">0</span>]))));</span><br><span class="line">s6 -= ((s5 ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">2</span>]) + (delta ^ s7)) ^ (((<span class="number">16</span> * s5) ^ (s7 &gt;&gt; <span class="number">3</span>)) + ((s5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s7)));</span><br><span class="line">s5 -= ((delta ^ s6) + (s4 ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">1</span>])) ^ (((<span class="number">16</span> * s4) ^ (s6 &gt;&gt; <span class="number">3</span>)) + ((s4 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s6)));</span><br><span class="line"><span class="comment">//flag[0] = s0;</span></span><br><span class="line">s4 -= ((delta ^ s5) + (s3 ^ v11)) ^ (((<span class="number">16</span> * s3) ^ (s5 &gt;&gt; <span class="number">3</span>)) + ((s3 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s5)));</span><br><span class="line">s3 -= ((delta ^ s4) + (s2 ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">3</span>])) ^ (((<span class="number">16</span> * s2) ^ (s4 &gt;&gt; <span class="number">3</span>)) + ((s2 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s4)));</span><br><span class="line">s2 -= ((delta ^ s3) + (s1 ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">2</span>])) ^ (((<span class="number">16</span> * s1) ^ (s3 &gt;&gt; <span class="number">3</span>)) + ((s1 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s3)));</span><br><span class="line">s1 -= ((delta ^ s2) + (flag[<span class="number">0</span>] ^ key[(delta &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> ^ <span class="number">1</span>])) ^ (((<span class="number">16</span> * flag[<span class="number">0</span>]) ^ (s2 &gt;&gt; <span class="number">3</span>)) + ((flag[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s2)));</span><br><span class="line"><span class="comment">//s0 = flag[0] - (((delta ^ s1) + (s7 ^ v11)) ^ (((16 * s7) ^ (s1 &gt;&gt; 3)) + ((s7 &gt;&gt; 5) ^ (4 * s1))));</span></span><br><span class="line">flag[<span class="number">0</span>] -= (((delta ^ s1) + (s7 ^ v11)) ^ (((<span class="number">16</span> * s7) ^ (s1 &gt;&gt; <span class="number">3</span>)) + ((s7 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * s1))));</span><br><span class="line">delta -= <span class="number">0x7937B99E</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag[0] = s0;</span></span><br><span class="line">flag[<span class="number">7</span>] = s7;</span><br><span class="line">flag[<span class="number">1</span>] = s1;</span><br><span class="line">flag[<span class="number">2</span>] = s2;</span><br><span class="line">flag[<span class="number">3</span>] = s3;</span><br><span class="line">flag[<span class="number">4</span>] = s4;</span><br><span class="line">flag[<span class="number">5</span>] = s5;</span><br><span class="line">flag[<span class="number">6</span>] = s6;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; flag[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6d616768</span></span><br><span class="line"><span class="comment">//74627b65</span></span><br><span class="line"><span class="comment">//695f6165</span></span><br><span class="line"><span class="comment">//5f615f73</span></span><br><span class="line"><span class="comment">//64726168</span></span><br><span class="line"><span class="comment">//636e655f</span></span><br><span class="line"><span class="comment">//74707972</span></span><br><span class="line"><span class="comment">//7d6e6f69</span></span><br><span class="line"><span class="comment">//hgame&#123;btea_is_a_hard_encryption&#125;</span></span><br></pre></td></tr></table></figure><h3 id="change"><a href="#change" class="headerlink" title="change"></a>change</h3><p>直接ida打开<br>主函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sub_7FF787FD21E0(v10, <span class="string">&quot;am2qasl&quot;</span>, envp);</span><br><span class="line">  v6 = <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;__ExceptionPtr&gt;::operator=((__int64)v7, v10);</span><br><span class="line">  sub_7FF787FD2280(a, v6);</span><br><span class="line">  sub_7FF787FD1410(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;plz input your flag:&quot;</span>);</span><br><span class="line">  sub_7FF787FD10F0(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;flag);</span><br><span class="line">  sub_7FF787FD29A0((__int64)a, (__int64)b, (__int64)&amp;flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    last = byte_7FF787FD8000[i];</span><br><span class="line">    <span class="keyword">if</span> ( last != *(<span class="type">char</span> *)sub_7FF787FD2960((__int64)b, i) )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_7FF787FD1410(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;sry,try again...&quot;</span>);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(b);</span><br><span class="line">      sub_7FF787FD2780(a);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v10);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF787FD1410(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Congratulations!&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(b);</span><br><span class="line">  sub_7FF787FD2780(a);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v10);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>化简一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sub_7FF787FD10F0(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;flag);</span><br><span class="line">  sub_7FF787FD29A0((__int64)a, (__int64)b, (__int64)&amp;flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    last = byte_7FF787FD8000[i];</span><br><span class="line">    <span class="keyword">if</span> ( last != *(<span class="type">char</span> *)sub_7FF787FD2960((__int64)b, i) )</span><br></pre></td></tr></table></figure><p>那就完了，sub_7FF787FD29A0肯定是加密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">_QWORD *__fastcall <span class="title function_">sub_7FF787FD29A0</span><span class="params">(_QWORD *a, _QWORD *b, _QWORD *flag)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+20h] [rbp-58h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> Duration; <span class="comment">// [rsp+28h] [rbp-50h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// [rsp+30h] [rbp-48h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// [rsp+48h] [rbp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// [rsp+58h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;__ExceptionPtr&gt;::operator=((__int64)b, flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; (<span class="type">unsigned</span> __int64)unknown_libname_20(b); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i % <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_7FF787FD2D20(sub_7FF787FD3670);</span><br><span class="line">      v11 = unknown_libname_20(a);</span><br><span class="line">      v9 = *(<span class="type">char</span> *)sub_7FF787FD2960(a, i % v11);</span><br><span class="line">      v5 = (<span class="type">char</span> *)sub_7FF787FD2960(b, i);</span><br><span class="line">      beep(*v5, v9);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      sub_7FF787FD2D20(sub_7FF787FD3650);</span><br><span class="line">      v10 = unknown_libname_20(a);</span><br><span class="line">      Duration = *(<span class="type">char</span> *)sub_7FF787FD2960(a, i % v10);</span><br><span class="line">      v3 = (<span class="type">char</span> *)sub_7FF787FD2960(b, i);</span><br><span class="line">      beep(*v3, Duration);</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)sub_7FF787FD2960(b, i) = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据奇数位和偶数位来分别加密：</p><p>奇数位直接和key异或<br>偶数位异或完加10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">last = cal([<span class="number">0x13</span>, <span class="number">0x0A</span>, <span class="number">0x5D</span>, <span class="number">0x1C</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0x23</span>, <span class="number">0x06</span>, </span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x4B</span>, <span class="number">0x38</span>, <span class="number">0x22</span>, <span class="number">0x0D</span>, <span class="number">0x1C</span>, <span class="number">0x48</span>, <span class="number">0x0C</span>, </span><br><span class="line">        <span class="number">0x66</span>, <span class="number">0x15</span>, <span class="number">0x48</span>, <span class="number">0x1B</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x10</span>, <span class="number">0x4F</span>, </span><br><span class="line">        ])</span><br><span class="line">a = cal([<span class="number">0x61</span>, <span class="number">0x6D</span>, <span class="number">0x32</span>, <span class="number">0x71</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x6C</span>])</span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">2</span>):</span><br><span class="line">                c += <span class="built_in">chr</span>(last[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                c += <span class="built_in">chr</span>(last[i]-<span class="number">10</span>)</span><br><span class="line">pxor(c,a)</span><br><span class="line"><span class="comment">#hgame&#123;ugly_Cpp_and_hook&#125;</span></span><br></pre></td></tr></table></figure><h3 id="crackme2"><a href="#crackme2" class="headerlink" title="crackme2"></a>crackme2</h3><p>这个题把我坑惨了……</p><p>ida打开之后反编译有标红，对应位置的指令是：mov     byte ptr ds:0, 1<br>于是准备先不管，去看主体逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sub_1400035C4(<span class="string">&quot;%50s&quot;</span>, v6);</span><br><span class="line">MEMORY[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">v3 = sub_14000105C(v6);</span><br><span class="line">v4 = <span class="string">&quot;right flag!&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> ( !v3 )</span><br><span class="line">  v4 = <span class="string">&quot;wrong flag!&quot;</span>;</span><br><span class="line"><span class="built_in">puts</span>(v4);</span><br></pre></td></tr></table></figure><p>很明显v6是flag，v3是最后的校验信息1或0</p><p>sub_14000105C打开后是换表base64</p><p>解密后发现是hgame{th1s_i5_fake_fl4g}假的，那哪里有问题呢</p><p>既然不能正确反编译主函数，那就尝试直接读汇编指令</p><p><img src="https://s2.loli.net/2024/02/26/uNo8mcwDzBqjpRF.png" alt="image-20240226194726601"></p><p>在这一段发现了virtalprotect函数，好家伙！原来是加密了。</p><p>阅读后可知，是把加密函数和一个位置异或加密了，运行解密脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start = 0x14000105C</span><br><span class="line">loop = 0x246a</span><br><span class="line">j = 0</span><br><span class="line">for i in range(start,loop+start):</span><br><span class="line">    patch_byte(i,get_wide_byte(i)^get_wide_byte(0x140006000+j))</span><br><span class="line">    j += 1</span><br></pre></td></tr></table></figure><p>在用u+c+p组合拳然后tab反汇编后是多项式方程，用z3求解即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a1 = [BitVec(<span class="string">&#x27;a1[%i]&#x27;</span> % i,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">v1 = a1[<span class="number">25</span>]</span><br><span class="line">v2 = a1[<span class="number">21</span>]</span><br><span class="line">v3 = a1[<span class="number">31</span>]</span><br><span class="line">v4 = a1[<span class="number">29</span>]</span><br><span class="line">v5 = a1[<span class="number">0</span>]</span><br><span class="line">v6 = a1[<span class="number">23</span>]</span><br><span class="line">v7 = a1[<span class="number">8</span>]</span><br><span class="line">v8 = a1[<span class="number">28</span>]</span><br><span class="line">v9 = a1[<span class="number">12</span>]</span><br><span class="line">v10 = a1[<span class="number">3</span>]</span><br><span class="line">v11 = a1[<span class="number">2</span>]</span><br><span class="line">v19 = a1[<span class="number">30</span>]</span><br><span class="line">v15 = a1[<span class="number">18</span>]</span><br><span class="line">v16 = a1[<span class="number">24</span>]</span><br><span class="line">v27 = a1[<span class="number">11</span>]</span><br><span class="line">v17 = a1[<span class="number">26</span>]</span><br><span class="line">v30 = a1[<span class="number">14</span>]</span><br><span class="line">v40 = a1[<span class="number">7</span>]</span><br><span class="line">v26 = a1[<span class="number">20</span>]</span><br><span class="line">v37 = <span class="number">2</span> * v26</span><br><span class="line">v42 = a1[<span class="number">22</span>]</span><br><span class="line">v28 = a1[<span class="number">1</span>]</span><br><span class="line">v25 = a1[<span class="number">27</span>]</span><br><span class="line">v21 = a1[<span class="number">19</span>]</span><br><span class="line">v23 = a1[<span class="number">16</span>]</span><br><span class="line">v31 = a1[<span class="number">13</span>]</span><br><span class="line">v29 = a1[<span class="number">10</span>]</span><br><span class="line">v41 = a1[<span class="number">5</span>]</span><br><span class="line">v24 = a1[<span class="number">4</span>]</span><br><span class="line">v20 = a1[<span class="number">15</span>]</span><br><span class="line">v39 = a1[<span class="number">17</span>]</span><br><span class="line">v22 = a1[<span class="number">6</span>]</span><br><span class="line">v18 = a1[<span class="number">9</span>]</span><br><span class="line">v33 = <span class="number">2</span> * v41</span><br><span class="line">v38 = <span class="number">2</span> * v16</span><br><span class="line">v32 = <span class="number">2</span> * v18</span><br><span class="line">v35 = v25 + v30</span><br><span class="line">v34 = <span class="number">2</span> * v31</span><br><span class="line">v12 = v10 + <span class="number">2</span> * (v31 + <span class="number">4</span> * (v29 + v17)) + v31 + <span class="number">4</span> * (v29 + v17)</span><br><span class="line">v36 = <span class="number">3</span> * v21</span><br><span class="line">v13 = v6 + v1 + <span class="number">8</span> * v6 + <span class="number">4</span> * (v8 + <span class="number">2</span> * v27)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> a1:</span><br><span class="line">    s.add(a &gt;= <span class="number">32</span>, a &lt;= <span class="number">126</span>)</span><br><span class="line">s.add(a1[<span class="number">0</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;h&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">1</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">2</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">3</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">4</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;e&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">5</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>))</span><br><span class="line">s.add(a1[<span class="number">31</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line"></span><br><span class="line">s.add(v18 +  <span class="number">201</span> * v24 +  <span class="number">194</span> * v10 +  <span class="number">142</span> * v20 +  <span class="number">114</span> * v39 +  <span class="number">103</span> * v11 +  <span class="number">52</span> * (v17 + v31) +  ((v9 + v23) &lt;&lt; <span class="number">6</span>) +  <span class="number">14</span> * (v21 + <span class="number">4</span> * v25 + v25) +  <span class="number">9</span> * (v40 + <span class="number">23</span> * v27 + v2 + <span class="number">3</span> * v1 + <span class="number">4</span> * v2 + <span class="number">4</span> * v6) +  <span class="number">5</span> * (v16 + <span class="number">23</span> * v30 + <span class="number">2</span> * (v3 + <span class="number">2</span> * v19) + <span class="number">5</span> * v5 + <span class="number">39</span> * v15 + <span class="number">51</span> * v4) +  <span class="number">24</span> * (v8 + <span class="number">10</span> * v28 + <span class="number">4</span> * (v42 + v7 + <span class="number">2</span> * v26)) +  <span class="number">62</span> * v22 +  <span class="number">211</span> * v41 +  <span class="number">212</span> * v29 == <span class="number">296473</span>)</span><br><span class="line">s.add(<span class="number">207</span> * v41 +  <span class="number">195</span> * v22 +  <span class="number">151</span> * v40 +  <span class="number">57</span> * v5 +  <span class="number">118</span> * v6 +  <span class="number">222</span> * v42 +  <span class="number">103</span> * v7 +  <span class="number">181</span> * v8 +  <span class="number">229</span> * v9 +  <span class="number">142</span> * v31 +  <span class="number">51</span> * v29 +  <span class="number">122</span> * (v26 + v20) +  <span class="number">91</span> * (v2 + <span class="number">2</span> * v16) +  <span class="number">107</span> * (v27 + v25) +  <span class="number">81</span> * (v17 + <span class="number">2</span> * v18 + v18) +  <span class="number">45</span> * (v19 + <span class="number">2</span> * (v11 + v24) + v11 + v24) +  <span class="number">4</span> * (<span class="number">3</span> * (v23 + a1[<span class="number">19</span>] + <span class="number">2</span> * v23 + <span class="number">5</span> * v4) + v39 + <span class="number">29</span> * (v10 + v1) + <span class="number">25</span> * v15) +  <span class="number">26</span> * v28 +  <span class="number">101</span> * v30 +  <span class="number">154</span> * v3 == <span class="number">354358</span>)</span><br><span class="line"></span><br><span class="line">s.add(And((<span class="number">177</span> * v40 +  <span class="number">129</span> * v26 +  <span class="number">117</span> * v42 +  <span class="number">143</span> * v28 +  <span class="number">65</span> * v8 +  <span class="number">137</span> * v25 +  <span class="number">215</span> * v21 +  <span class="number">93</span> * v31 +  <span class="number">235</span> * v39 +  <span class="number">203</span> * v11 +  <span class="number">15</span> * (v7 + <span class="number">17</span> * v30) +  <span class="number">2</span>* (v24 +  <span class="number">91</span> * v9 +  <span class="number">95</span> * v29 +  <span class="number">51</span> * v41 +  <span class="number">81</span> * v20 +  <span class="number">92</span> * v18 +  <span class="number">112</span> * (v10 + v6) +  <span class="number">32</span> * (v22 + <span class="number">2</span> * (v1 + v23)) +  <span class="number">6</span> * (v2 + <span class="number">14</span> * v16 + <span class="number">19</span> * v15) +  <span class="number">83</span> * v5 +  <span class="number">53</span> * v4 +  <span class="number">123</span> * v19) +  v17 +  <span class="number">175</span> * v27 +  <span class="number">183</span> * v3 == <span class="number">448573</span>)</span><br><span class="line">    ,  (<span class="number">113</span> * v19 +  <span class="number">74</span> * v3 +  <span class="number">238</span> * v6 +  <span class="number">140</span> * v2 +  <span class="number">214</span> * v26 +  <span class="number">242</span> * v8 +  <span class="number">160</span> * v21 +  <span class="number">136</span> * v23 +  <span class="number">209</span> * v9 +  <span class="number">220</span> * v31 +  <span class="number">50</span> * v24 +  <span class="number">125</span> * v10 +  <span class="number">175</span> * v20 +  <span class="number">23</span> * v39 +  <span class="number">137</span> * v22 +  <span class="number">149</span> * v18 +  <span class="number">83</span> * (v4 + <span class="number">2</span> * v30) +  <span class="number">21</span> * (<span class="number">9</span> * v29 + v16) +  <span class="number">59</span> * (<span class="number">4</span> * v27 + v17) +  <span class="number">41</span> * (v1 + v41) +  <span class="number">13</span> * (v7 + <span class="number">11</span> * (v40 + v15) + <span class="number">6</span> * v42 + <span class="number">4</span> * (v28 + <span class="number">2</span> * v11) + v28 + <span class="number">2</span> * v11 + <span class="number">17</span> * v5) +  <span class="number">36</span> * v25 == <span class="number">384306</span>)</span><br><span class="line">    ,  (<span class="number">229</span> * v21 +  <span class="number">78</span> * v1 +  v2 +  v9 +  <span class="number">133</span> * v27 +  <span class="number">74</span> * v6 +  <span class="number">69</span> * v26 +  <span class="number">243</span> * v7 +  <span class="number">98</span> * v28 +  <span class="number">253</span> * v8 +  <span class="number">142</span> * v25 +  <span class="number">175</span> * v31 +  <span class="number">105</span> * v41 +  <span class="number">221</span> * v10 +  <span class="number">121</span> * v39 +  <span class="number">218</span> * (v19 + v29) +  <span class="number">199</span> * (v24 + v30) +  <span class="number">33</span> * (v40 + <span class="number">7</span> * v17) +  <span class="number">4</span> * (<span class="number">27</span> * v20 + <span class="number">50</span> * v11 + <span class="number">45</span> * v18 + <span class="number">19</span> * (v3 + v42) + v16 + <span class="number">16</span> * v23 + <span class="number">52</span> * v4) +  <span class="number">195</span> * v22 +  <span class="number">211</span> * v5 +  <span class="number">153</span> * v15 == <span class="number">424240</span>)</span><br><span class="line">    ,  (<span class="number">181</span> * v25 +  <span class="number">61</span> * v2 +  <span class="number">65</span> * v21 +  <span class="number">58</span> * v31 +  <span class="number">170</span> * v29 +  <span class="number">143</span> * v24 +  <span class="number">185</span> * v10 +  <span class="number">86</span> * v11 +  <span class="number">97</span> * v22 +  <span class="number">235</span> * (v23 + v27) +  <span class="number">3</span>* (<span class="number">53</span> * v41 +  <span class="number">74</span> * (v8 + v3) +  <span class="number">13</span> * (v42 + <span class="number">6</span> * v9) +  <span class="number">11</span> * (v39 + <span class="number">7</span> * v20) +  <span class="number">15</span> * (v18 + <span class="number">4</span> * v17) +  v7 +  <span class="number">35</span> * v1 +  <span class="number">29</span> * v15) +  <span class="number">4</span> * (<span class="number">57</span> * v6 + <span class="number">18</span> * (v5 + v37) + v28 + <span class="number">17</span> * v16 + <span class="number">55</span> * v30) +  <span class="number">151</span> * v40 +  <span class="number">230</span> * v4 +  <span class="number">197</span> * v19 == <span class="number">421974</span>)</span><br><span class="line">    ,  (<span class="number">209</span> * v21 +  <span class="number">249</span> * v30 +  <span class="number">195</span> * v2 +  <span class="number">219</span> * v25 +  <span class="number">201</span> * v39 +  <span class="number">85</span> * v18 +  <span class="number">213</span> * (v17 + v31) +  <span class="number">119</span> * (v11 + <span class="number">2</span> * v41) +  <span class="number">29</span> * (<span class="number">8</span> * v24 + v40 + <span class="number">4</span> * v27 + v27) +  <span class="number">2</span>* (v8 +  <span class="number">55</span> * (<span class="number">2</span> * v29 + v19) +  <span class="number">3</span> * (v10 + <span class="number">39</span> * v9 + <span class="number">2</span> * (v6 + <span class="number">20</span> * v20) + <span class="number">35</span> * v7) +  <span class="number">4</span> * (v5 + <span class="number">31</span> * v42 + <span class="number">28</span> * v3) +  <span class="number">26</span> * v28 +  <span class="number">46</span> * (v37 + v16) +  <span class="number">98</span> * v1) +  <span class="number">53</span> * v23 +  <span class="number">171</span> * v15 +  <span class="number">123</span> * v4 == <span class="number">442074</span>)</span><br><span class="line">    ,  ( <span class="number">162</span> * v19 +  <span class="number">74</span> * v5 +  <span class="number">28</span> * v27 +  <span class="number">243</span> * v42 +  <span class="number">123</span> * v28 +  <span class="number">73</span> * v8 +  <span class="number">166</span> * v23 +  <span class="number">94</span> * v24 +  <span class="number">113</span> * v11 +  <span class="number">193</span> * v22 +  <span class="number">122</span> * (v6 + <span class="number">2</span> * v7) +  <span class="number">211</span> * (v10 + v25) +  <span class="number">21</span> * (v17 + <span class="number">7</span> * v41) +  <span class="number">11</span> * (v4 + <span class="number">23</span> * (v16 + v39) + <span class="number">2</span> * (v40 + <span class="number">5</span> * v30 + <span class="number">2</span> * (<span class="number">2</span> * v18 + v29) + <span class="number">2</span> * v18 + v29)) +  <span class="number">5</span> * (<span class="number">46</span> * v9 + <span class="number">26</span> * v20 + <span class="number">4</span> * (v31 + <span class="number">2</span> * v21) + v15 + <span class="number">27</span> * v2 + <span class="number">10</span> * v1) +  <span class="number">36</span> * (v3 + <span class="number">5</span> * v26) == <span class="number">376007</span>)</span><br><span class="line">    ,  (<span class="number">63</span> * v19 +  <span class="number">143</span> * v5 +  <span class="number">250</span> * v6 +  <span class="number">136</span> * v2 +  <span class="number">214</span> * v40 +  <span class="number">62</span> * v26 +  <span class="number">221</span> * v42 +  <span class="number">226</span> * v7 +  <span class="number">171</span> * v28 +  <span class="number">178</span> * v8 +  <span class="number">244</span> * v23 +  ((v9 &lt;&lt; <span class="number">7</span>)) +  <span class="number">150</span> * v31 +  <span class="number">109</span> * v29 +  <span class="number">70</span> * v41 +  <span class="number">127</span> * v20 +  <span class="number">204</span> * v39 +  <span class="number">121</span> * v22 +  <span class="number">173</span> * v18 +  <span class="number">69</span> * (v25 + v30 + v27) +  <span class="number">74</span> * (v16 + <span class="number">2</span> * v15 + v15) +  <span class="number">22</span> * (<span class="number">7</span> * v24 + v17 + <span class="number">10</span> * v11) +  <span class="number">40</span> * (v1 + <span class="number">4</span> * v21 + v21) +  <span class="number">81</span> * v10 +  <span class="number">94</span> * v4 +  <span class="number">84</span> * v3 == <span class="number">411252</span>)</span><br><span class="line">    ,  (<span class="number">229</span> * v15 +  <span class="number">121</span> * v4 +  <span class="number">28</span> * v30 +  <span class="number">206</span> * v16 +  <span class="number">145</span> * v27 +  <span class="number">41</span> * v1 +  <span class="number">247</span> * v6 +  <span class="number">118</span> * v26 +  <span class="number">241</span> * v28 +  <span class="number">79</span> * v8 +  <span class="number">102</span> * v25 +  <span class="number">124</span> * v23 +  <span class="number">65</span> * v9 +  <span class="number">68</span> * v31 +  <span class="number">239</span> * v17 +  <span class="number">148</span> * v24 +  <span class="number">245</span> * v39 +  <span class="number">115</span> * v11 +  <span class="number">163</span> * v22 +  <span class="number">137</span> * v18 +  <span class="number">53</span> * (v5 + <span class="number">2</span> * v29) +  <span class="number">126</span> * (v40 + <span class="number">2</span> * v10) +  <span class="number">38</span> * (v7 + v21 + <span class="number">4</span> * v7 + <span class="number">6</span> * v41) +  <span class="number">12</span> * (v2 + <span class="number">16</span> * v42) +  <span class="number">109</span> * v20 +  <span class="number">232</span> * v3 +  <span class="number">47</span> * v19 == <span class="number">435012</span>)</span><br><span class="line">    ,  (<span class="number">209</span> * v21 +  <span class="number">233</span> * v40 +  <span class="number">93</span> * v1 +  <span class="number">241</span> * v2 +  <span class="number">137</span> * v8 +  <span class="number">249</span> * v17 +  <span class="number">188</span> * v29 +  <span class="number">86</span> * v24 +  <span class="number">246</span> * v10 +  <span class="number">149</span> * v20 +  <span class="number">99</span> * v11 +  <span class="number">37</span> * v22 +  <span class="number">219</span> * v18 +  <span class="number">17</span> * (v6 + <span class="number">10</span> * v25) +  <span class="number">49</span> * (v5 + <span class="number">3</span> * v3 + <span class="number">4</span> * v28 + v28) +  <span class="number">5</span> * (<span class="number">16</span> * v39 + <span class="number">11</span> * (v41 + <span class="number">2</span> * v27 + v27) + <span class="number">12</span> * v7 + v31 + <span class="number">30</span> * v16 + <span class="number">27</span> * v19) +  <span class="number">18</span> * (v23 + <span class="number">2</span> * (v4 + v26 + <span class="number">2</span> * v4) + v4 + v26 + <span class="number">2</span> * v4) +  <span class="number">24</span> * v9 +  <span class="number">109</span> * v42 +  <span class="number">183</span> * v30 +  <span class="number">154</span> * v15 == <span class="number">392484</span>)</span><br><span class="line">    ,  (<span class="number">155</span> * v15 +  <span class="number">247</span> * v40 +  <span class="number">157</span> * v28 +  <span class="number">119</span> * v23 +  <span class="number">161</span> * v17 +  <span class="number">133</span> * v20 +  <span class="number">85</span> * v22 +  <span class="number">229</span> * (v7 + v24) +  <span class="number">123</span> * (<span class="number">2</span> * v31 + v42) +  <span class="number">21</span> * (v41 + <span class="number">12</span> * v30) +  <span class="number">55</span> * (v9 + v5 + v18 + <span class="number">2</span> * v5) +  <span class="number">15</span> * (v3 + <span class="number">16</span> * v10 + <span class="number">9</span> * v21) +  <span class="number">2</span>* (v2 +  <span class="number">115</span> * v29 +  <span class="number">111</span> * v16 +  <span class="number">26</span> * v6 +  <span class="number">88</span> * v8 +  <span class="number">73</span> * v39 +  <span class="number">71</span> * v11 +  <span class="number">28</span> * (v26 + <span class="number">2</span> * (v25 + <span class="number">2</span> * v1)) +  <span class="number">51</span> * v27 +  <span class="number">99</span> * v4 +  <span class="number">125</span> * v19) == <span class="number">437910</span>)</span><br><span class="line">    ,  (<span class="number">220</span> * v3 +  <span class="number">200</span> * v4 +  <span class="number">139</span> * v15 +  <span class="number">33</span> * v5 +  <span class="number">212</span> * v30 +  <span class="number">191</span> * v16 +  <span class="number">30</span> * v27 +  <span class="number">233</span> * v1 +  <span class="number">246</span> * v6 +  <span class="number">89</span> * v2 +  <span class="number">252</span> * v40 +  <span class="number">223</span> * v42 +  <span class="number">19</span> * v25 +  <span class="number">141</span> * v21 +  <span class="number">163</span> * v9 +  <span class="number">185</span> * v17 +  <span class="number">136</span> * v31 +  <span class="number">46</span> * v24 +  <span class="number">109</span> * v10 +  <span class="number">217</span> * v39 +  <span class="number">75</span> * v22 +  <span class="number">157</span> * v18 +  <span class="number">125</span> * (v11 + v19) +  <span class="number">104</span> * (v33 + v20) +  <span class="number">43</span> * (v28 + <span class="number">2</span> * v29 + v29) +  <span class="number">32</span> * (v8 + v7 + <span class="number">2</span> * v8 + <span class="number">2</span> * (v23 + v26)) == <span class="number">421905</span>)</span><br><span class="line">    ,  (<span class="number">211</span> * v24 +  <span class="number">63</span> * v15 +  <span class="number">176</span> * v5 +  <span class="number">169</span> * v16 +  <span class="number">129</span> * v27 +  <span class="number">146</span> * v40 +  <span class="number">111</span> * v26 +  <span class="number">68</span> * v42 +  <span class="number">39</span> * v25 +  <span class="number">188</span> * v23 +  <span class="number">130</span> * v9 +  ((v31 &lt;&lt; <span class="number">6</span>)) +  <span class="number">91</span> * v41 +  <span class="number">208</span> * v20 +  <span class="number">145</span> * v39 +  <span class="number">247</span> * v18 +  <span class="number">93</span> * (v22 + v17) +  <span class="number">71</span> * (v6 + <span class="number">2</span> * v11) +  <span class="number">103</span> * (v8 + <span class="number">2</span> * v30) +  <span class="number">6</span> * (v21 + <span class="number">10</span> * v28 + <span class="number">28</span> * v7 + <span class="number">9</span> * v29 + <span class="number">19</span> * v2 + <span class="number">24</span> * v1 + <span class="number">22</span> * v3) +  <span class="number">81</span> * v10 +  <span class="number">70</span> * v4 +  <span class="number">23</span> * v19 == <span class="number">356282</span>)</span><br><span class="line">    ,  (<span class="number">94</span> * v42 +  <span class="number">101</span> * v2 +  <span class="number">152</span> * v40 +  <span class="number">200</span> * v7 +  <span class="number">226</span> * v8 +  <span class="number">211</span> * v23 +  <span class="number">121</span> * v24 +  <span class="number">74</span> * v11 +  <span class="number">166</span> * v18 +  (((v6 + <span class="number">3</span> * v28) &lt;&lt; <span class="number">6</span>)) +  <span class="number">41</span> * (<span class="number">4</span> * v9 + v21) +  <span class="number">23</span> * (v39 + <span class="number">11</span> * v41) +  <span class="number">7</span> * (v20 + <span class="number">10</span> * v25 + <span class="number">2</span> * v12 + v12) +  <span class="number">3</span> * (<span class="number">78</span> * v30 + <span class="number">81</span> * v16 + <span class="number">55</span> * v27 + <span class="number">73</span> * v1 + <span class="number">4</span> * v26 + v15 + <span class="number">85</span> * v3 + <span class="number">65</span> * v19) +  <span class="number">62</span> * v22 +  <span class="number">88</span> * v5 +  <span class="number">110</span> * v4 == <span class="number">423091</span>)</span><br><span class="line">    ,  (<span class="number">133</span> * v22 +  <span class="number">175</span> * v15 +  <span class="number">181</span> * v30 +  <span class="number">199</span> * v16 +  <span class="number">123</span> * v27 +  <span class="number">242</span> * v1 +  <span class="number">75</span> * v6 +  <span class="number">69</span> * v2 +  <span class="number">153</span> * v40 +  <span class="number">33</span> * v26 +  <span class="number">100</span> * v42 +  <span class="number">229</span> * v7 +  <span class="number">177</span> * v8 +  <span class="number">134</span> * v31 +  <span class="number">179</span> * v29 +  <span class="number">129</span> * v41 +  <span class="number">14</span> * v10 +  <span class="number">247</span> * v24 +  <span class="number">228</span> * v20 +  <span class="number">92</span> * v11 +  <span class="number">86</span> * (v9 + v32) +  <span class="number">94</span> * (v23 + v21) +  <span class="number">37</span> * (v17 + <span class="number">4</span> * v3) +  <span class="number">79</span> * (v25 + <span class="number">2</span> * v28) +  <span class="number">72</span> * v5 +  <span class="number">93</span> * v39 +  <span class="number">152</span> * v4 +  <span class="number">214</span> * v19 == <span class="number">391869</span>)</span><br><span class="line">    ,  (<span class="number">211</span> * v24 +  <span class="number">213</span> * v18 +  <span class="number">197</span> * v40 +  <span class="number">159</span> * v25 +  <span class="number">117</span> * v21 +  <span class="number">119</span> * v9 +  <span class="number">98</span> * v17 +  <span class="number">218</span> * v41 +  <span class="number">106</span> * v39 +  <span class="number">69</span> * v11 +  <span class="number">43</span> * (v2 + v29 + <span class="number">2</span> * v2) +  <span class="number">116</span> * (v4 + v10 + v37) +  <span class="number">5</span> * (v42 + <span class="number">9</span> * v23 + <span class="number">35</span> * v20 + <span class="number">37</span> * v31) +  <span class="number">11</span> * (v16 + <span class="number">13</span> * v27 + <span class="number">5</span> * v5 + <span class="number">8</span> * v30) +  <span class="number">6</span> * (<span class="number">29</span> * v28 + <span class="number">25</span> * v8 + <span class="number">38</span> * v22 + v15 + <span class="number">13</span> * v1 + <span class="number">10</span> * v3) +  <span class="number">136</span> * v7 +  <span class="number">142</span> * v6 +  <span class="number">141</span> * v19 == <span class="number">376566</span>)</span><br><span class="line">    ,  (<span class="number">173</span> * v3 +  <span class="number">109</span> * v15 +  <span class="number">61</span> * v30 +  <span class="number">187</span> * v1 +  <span class="number">79</span> * v6 +  <span class="number">53</span> * v40 +  <span class="number">184</span> * v21 +  <span class="number">43</span> * v23 +  <span class="number">41</span> * v9 +  <span class="number">166</span> * v31 +  <span class="number">193</span> * v41 +  <span class="number">58</span> * v24 +  <span class="number">146</span> * v10 +  ((v20 &lt;&lt; <span class="number">6</span>)) +  <span class="number">89</span> * v39 +  <span class="number">121</span> * v11 +  <span class="number">5</span> * (v17 + <span class="number">23</span> * v8) +  <span class="number">7</span> * (<span class="number">29</span> * v18 + v29 + <span class="number">4</span> * v7) +  <span class="number">13</span> * (<span class="number">3</span> * v42 + v16 + <span class="number">7</span> * v26 + <span class="number">13</span> * v2) +  <span class="number">3</span> * (v4 + <span class="number">83</span> * v5 + <span class="number">51</span> * v27 + <span class="number">33</span> * v22 + <span class="number">8</span> * (v19 + <span class="number">4</span> * v28) + <span class="number">18</span> * v25) == <span class="number">300934</span>)</span><br><span class="line">    ,  (<span class="number">78</span> * v1 +  <span class="number">131</span> * v5 +  <span class="number">185</span> * v16 +  <span class="number">250</span> * v40 +  <span class="number">90</span> * v26 +  <span class="number">129</span> * v42 +  <span class="number">255</span> * v28 +  <span class="number">206</span> * v8 +  <span class="number">239</span> * v25 +  <span class="number">150</span> * v10 +  <span class="number">253</span> * v39 +  <span class="number">104</span> * v22 +  <span class="number">58</span> * (v2 + <span class="number">2</span> * v7) +  <span class="number">96</span> * (v15 + v31) +  <span class="number">117</span> * (v9 + <span class="number">2</span> * v4) +  <span class="number">27</span> * (v17 + <span class="number">8</span> * v18 + v18) +  <span class="number">19</span> * (v23 + <span class="number">3</span> * v21 + <span class="number">4</span> * v29 + v29) +  <span class="number">7</span> * (<span class="number">22</span> * v41 + <span class="number">3</span> * (v11 + <span class="number">11</span> * v24) + v3 + <span class="number">29</span> * v6 + <span class="number">14</span> * v27) +  <span class="number">109</span> * v20 +  <span class="number">102</span> * v30 +  <span class="number">100</span> * v19 == <span class="number">401351</span>)</span><br><span class="line">    ,  (<span class="number">233</span> * v19 +  <span class="number">71</span> * v5 +  <span class="number">209</span> * v27 +  <span class="number">82</span> * v6 +  <span class="number">58</span> * v26 +  <span class="number">53</span> * v25 +  <span class="number">113</span> * v23 +  <span class="number">206</span> * v31 +  <span class="number">39</span> * v41 +  <span class="number">163</span> * v20 +  <span class="number">222</span> * v11 +  <span class="number">191</span> * v18 +  <span class="number">123</span> * (v7 + v40) +  <span class="number">69</span> * (v9 + <span class="number">2</span> * v22 + v22) +  <span class="number">9</span> * (v3 + <span class="number">8</span> * v24 + <span class="number">7</span> * (<span class="number">3</span> * v1 + v28) + <span class="number">5</span> * v16 + <span class="number">19</span> * v30) +  <span class="number">4</span> * (v15 + <span class="number">26</span> * v17 + <span class="number">61</span> * v29 + <span class="number">43</span> * v42 + <span class="number">49</span> * v2 + <span class="number">32</span> * v4) +  <span class="number">10</span> * (<span class="number">7</span> * (v8 + v36) + v39 + <span class="number">12</span> * v10) == <span class="number">368427</span>)</span><br><span class="line">    ,  (<span class="number">139</span> * v30 +  <span class="number">53</span> * v5 +  <span class="number">158</span> * v16 +  <span class="number">225</span> * v1 +  <span class="number">119</span> * v6 +  <span class="number">67</span> * v2 +  <span class="number">213</span> * v40 +  <span class="number">188</span> * v28 +  <span class="number">152</span> * v8 +  <span class="number">187</span> * v21 +  <span class="number">129</span> * v23 +  <span class="number">54</span> * v9 +  <span class="number">125</span> * v17 +  <span class="number">170</span> * v24 +  <span class="number">184</span> * v11 +  <span class="number">226</span> * v22 +  <span class="number">253</span> * v18 +  <span class="number">26</span> * (v29 + v41) +  <span class="number">97</span> * (v4 + <span class="number">2</span> * v25) +  <span class="number">39</span> * (<span class="number">5</span> * v26 + v27) +  <span class="number">21</span> * (v39 + <span class="number">8</span> * v42) +  <span class="number">12</span> * (<span class="number">17</span> * v10 + v31 + <span class="number">15</span> * v7 + <span class="number">12</span> * v19) +  <span class="number">165</span> * v20 +  <span class="number">88</span> * v15 +  <span class="number">157</span> * v3 == <span class="number">403881</span>)</span><br><span class="line">    ,  (<span class="number">114</span> * v3 +  <span class="number">61</span> * v27 +  <span class="number">134</span> * v40 +  <span class="number">62</span> * v42 +  <span class="number">89</span> * v9 +  <span class="number">211</span> * v17 +  <span class="number">163</span> * v41 +  <span class="number">66</span> * v24 +  <span class="number">201</span> * (v7 + v18) +  <span class="number">47</span> * (<span class="number">5</span> * v16 + v22) +  <span class="number">74</span> * (v4 + v31) +  <span class="number">142</span> * (v2 + v28) +  <span class="number">35</span> * (v20 + <span class="number">6</span> * v26) +  <span class="number">39</span> * (v15 + <span class="number">6</span> * v30) +  <span class="number">27</span> * (v25 + <span class="number">9</span> * v23 + <span class="number">8</span> * v6) +  <span class="number">4</span> * (v21 + <span class="number">63</span> * v19 + <span class="number">2</span> * (v1 + <span class="number">12</span> * (v10 + v5) + <span class="number">8</span> * v11 + <span class="number">26</span> * v29)) +  <span class="number">10</span> * (v8 + <span class="number">4</span> * v39 + v39) == <span class="number">382979</span>)</span><br><span class="line">    ,  (<span class="number">122</span> * v25 +  <span class="number">225</span> * v21 +  <span class="number">52</span> * v23 +  <span class="number">253</span> * v9 +  <span class="number">197</span> * v17 +  <span class="number">187</span> * v31 +  <span class="number">181</span> * v29 +  <span class="number">183</span> * v41 +  <span class="number">47</span> * v20 +  <span class="number">229</span> * v39 +  <span class="number">88</span> * v22 +  <span class="number">127</span> * (v10 + v32) +  <span class="number">37</span> * (v7 + <span class="number">3</span> * v3) +  (((v11 + <span class="number">2</span> * v30 + v30) &lt;&lt; <span class="number">6</span>)) +  <span class="number">7</span> * (<span class="number">21</span> * v8 + v27 + <span class="number">18</span> * (v4 + v1 + v38)) +  <span class="number">6</span> * (<span class="number">23</span> * v24 + v26 + <span class="number">17</span> * v2 + <span class="number">39</span> * v6) +  <span class="number">10</span> * (v5 + <span class="number">11</span> * v28 + <span class="number">21</span> * v42) +  <span class="number">149</span> * v19 +  <span class="number">165</span> * v40 +  <span class="number">121</span> * v15 == <span class="number">435695</span>)</span><br><span class="line">    ,  (<span class="number">165</span> * v20 +  <span class="number">223</span> * v4 +  <span class="number">249</span> * v5 +  <span class="number">199</span> * v1 +  <span class="number">135</span> * v2 +  <span class="number">133</span> * v26 +  <span class="number">254</span> * v42 +  <span class="number">111</span> * v7 +  <span class="number">189</span> * v28 +  <span class="number">221</span> * v25 +  <span class="number">115</span> * v21 +  <span class="number">186</span> * v9 +  <span class="number">79</span> * v41 +  <span class="number">217</span> * v24 +  <span class="number">122</span> * v11 +  <span class="number">38</span> * v18 +  <span class="number">109</span> * (v34 + v29) +  <span class="number">14</span> * (v8 + <span class="number">17</span> * v40 + <span class="number">8</span> * (v6 + v38)) +  <span class="number">4</span> * (<span class="number">11</span> * (<span class="number">5</span> * v30 + v39) + <span class="number">6</span> * (v10 + <span class="number">2</span> * v22) + v27 + <span class="number">52</span> * v17 + <span class="number">50</span> * v23) +  <span class="number">229</span> * v15 +  <span class="number">86</span> * v3 +  <span class="number">234</span> * v19 == <span class="number">453748</span>)</span><br><span class="line">    ,  (<span class="number">181</span> * v25 +  <span class="number">94</span> * v42 +  <span class="number">125</span> * v1 +  <span class="number">226</span> * v26 +  <span class="number">155</span> * v7 +  <span class="number">95</span> * v21 +  <span class="number">212</span> * v17 +  <span class="number">91</span> * v31 +  <span class="number">194</span> * v29 +  <span class="number">98</span> * v24 +  <span class="number">166</span> * v11 +  <span class="number">120</span> * v22 +  <span class="number">59</span> * v18 +  <span class="number">32</span> * (v9 + v8) +  <span class="number">158</span> * (v6 + v5) +  <span class="number">101</span> * (v41 + v19) +  <span class="number">63</span> * (v4 + <span class="number">2</span> * v23) +  <span class="number">67</span> * (v28 + <span class="number">2</span> * v20) +  <span class="number">11</span> * (v39 + <span class="number">10</span> * v16 + <span class="number">11</span> * v10) +  <span class="number">39</span> * (v30 + <span class="number">4</span> * (v2 + v15)) +  <span class="number">233</span> * v40 +  <span class="number">56</span> * v27 +  <span class="number">225</span> * v3 == <span class="number">358321</span>)</span><br><span class="line">    ,  (<span class="number">229</span> * v21 +  <span class="number">135</span> * v4 +  <span class="number">197</span> * v15 +  <span class="number">118</span> * v5 +  <span class="number">143</span> * v16 +  <span class="number">134</span> * v6 +  <span class="number">204</span> * v40 +  <span class="number">173</span> * v26 +  <span class="number">81</span> * v7 +  <span class="number">60</span> * v28 +  <span class="number">58</span> * v8 +  <span class="number">179</span> * v23 +  <span class="number">142</span> * v9 +  <span class="number">178</span> * v17 +  <span class="number">230</span> * v31 +  <span class="number">148</span> * v29 +  <span class="number">224</span> * v41 +  <span class="number">194</span> * v24 +  <span class="number">223</span> * v10 +  <span class="number">87</span> * v20 +  <span class="number">200</span> * v39 +  <span class="number">233</span> * v11 +  <span class="number">49</span> * v22 +  <span class="number">127</span> * v35 +  <span class="number">31</span> * (<span class="number">4</span> * v27 + v18) +  <span class="number">42</span> * (v1 + <span class="number">6</span> * v2) +  <span class="number">109</span> * v42 +  <span class="number">75</span> * v3 +  <span class="number">165</span> * v19 == <span class="number">456073</span>)</span><br><span class="line">    ,  (<span class="number">41</span> * v4 +  <span class="number">253</span> * v3 +  <span class="number">163</span> * v15 +  <span class="number">193</span> * v30 +  <span class="number">155</span> * v16 +  <span class="number">113</span> * v27 +  <span class="number">131</span> * v6 +  <span class="number">55</span> * v2 +  <span class="number">21</span> * v40 +  <span class="number">53</span> * v26 +  <span class="number">13</span> * v8 +  <span class="number">201</span> * v25 +  <span class="number">237</span> * v9 +  <span class="number">223</span> * v31 +  <span class="number">95</span> * v24 +  <span class="number">194</span> * v20 +  <span class="number">62</span> * v39 +  <span class="number">119</span> * v11 +  <span class="number">171</span> * v22 +  <span class="number">135</span> * v18 +  <span class="number">69</span> * (v10 + <span class="number">3</span> * v28) +  <span class="number">211</span> * (v1 + v29) +  <span class="number">4</span> * (<span class="number">43</span> * v7 + v42 + <span class="number">40</span> * v17) +  <span class="number">6</span> * (v5 + <span class="number">33</span> * v41 + <span class="number">20</span> * (<span class="number">2</span> * v19 + v21) + <span class="number">24</span> * v23) == <span class="number">407135</span>)</span><br><span class="line">    ,  (<span class="number">111</span> * v19 +  <span class="number">190</span> * v3 +  <span class="number">149</span> * v4 +  <span class="number">173</span> * v28 +  <span class="number">118</span> * v23 +  <span class="number">146</span> * v29 +  <span class="number">179</span> * v10 +  <span class="number">51</span> * v20 +  <span class="number">49</span> * v39 +  <span class="number">61</span> * v11 +  <span class="number">125</span> * v22 +  <span class="number">162</span> * v18 +  <span class="number">214</span> * v35 +  <span class="number">14</span> * (v34 + v24) +  <span class="number">178</span> * (v41 + v16) +  <span class="number">11</span> * (<span class="number">4</span> * v9 + v21 + <span class="number">17</span> * v42) +  <span class="number">65</span> * (v26 + v17 + <span class="number">2</span> * v26 + <span class="number">2</span> * v5) +  <span class="number">4</span> * (v7 + <span class="number">38</span> * v15 + <span class="number">4</span> * v13 + v13 + <span class="number">8</span> * v40 + <span class="number">43</span> * v2) == <span class="number">369835</span>)</span><br><span class="line">    ,  (<span class="number">27</span> * v27 +  <span class="number">223</span> * v6 +  <span class="number">147</span> * v26 +  <span class="number">13</span> * v21 +  <span class="number">35</span> * (v17 + <span class="number">7</span> * v4) +  <span class="number">57</span> * (v19 + v32 + <span class="number">3</span> * v11) +  <span class="number">11</span> * (v1 + <span class="number">17</span> * (v9 + v5) + <span class="number">10</span> * v16 + <span class="number">3</span> * v31) +  <span class="number">2</span>* (<span class="number">53</span> * v23 +  v25 +  <span class="number">38</span> * v15 +  <span class="number">43</span> * v42 +  <span class="number">115</span> * v29 +  <span class="number">61</span> * v22 +  <span class="number">111</span> * (v10 + v40) +  <span class="number">14</span> * (v20 + v7 + <span class="number">2</span> * v7 + <span class="number">8</span> * v28) +  <span class="number">109</span> * v2 +  <span class="number">100</span> * v41 +  <span class="number">63</span> * v8) +  <span class="number">93</span> * v39 +  <span class="number">251</span> * v30 +  <span class="number">131</span> * v3 == <span class="number">393303</span>)</span><br><span class="line">    ,  (<span class="number">116</span> * v9 +  <span class="number">152</span> * v29 +  <span class="number">235</span> * v20 +  <span class="number">202</span> * v18 +  <span class="number">85</span> * (v8 + <span class="number">3</span> * v11) +  <span class="number">221</span> * (v16 + v40) +  <span class="number">125</span> * (v33 + v24) +  <span class="number">7</span> * (<span class="number">19</span> * v4 + <span class="number">9</span> * (v10 + <span class="number">2</span> * v25) + v2 + <span class="number">33</span> * v3 + <span class="number">32</span> * v19) +  <span class="number">3</span> * (<span class="number">71</span> * v39 + <span class="number">43</span> * v22 + <span class="number">32</span> * (v17 + v26) + <span class="number">15</span> * (v5 + v6 + <span class="number">2</span> * v23) + v28 + <span class="number">74</span> * v31 + <span class="number">48</span> * v42) +  <span class="number">10</span> * (v21 + <span class="number">11</span> * v30 + <span class="number">16</span> * v15) +  <span class="number">136</span> * v7 +  <span class="number">106</span> * v1 +  <span class="number">41</span> * v27 == <span class="number">403661</span>)</span><br><span class="line">    ,  (<span class="number">127</span> * v4 +  <span class="number">106</span> * v15 +  <span class="number">182</span> * v30 +  <span class="number">142</span> * v5 +  <span class="number">159</span> * v16 +  <span class="number">17</span> * v1 +  <span class="number">211</span> * v6 +  <span class="number">134</span> * v2 +  <span class="number">199</span> * v7 +  <span class="number">103</span> * v28 +  <span class="number">247</span> * v23 +  <span class="number">122</span> * v9 +  <span class="number">95</span> * v41 +  <span class="number">62</span> * v10 +  <span class="number">203</span> * v39 +  <span class="number">16</span> * v11 +  <span class="number">41</span> * (<span class="number">6</span> * v42 + v25) +  <span class="number">9</span> * (<span class="number">22</span> * v24 + v20 + <span class="number">27</span> * v31 + <span class="number">28</span> * v40) +  <span class="number">10</span> * (v8 + v22 + v36 + <span class="number">8</span> * v17 + <span class="number">2</span> * (v22 + v36 + <span class="number">8</span> * v17) + <span class="number">13</span> * v29) +  <span class="number">6</span> * (<span class="number">23</span> * v27 + v26) +  <span class="number">213</span> * v18 +  <span class="number">179</span> * v3 +  <span class="number">43</span> * v19 == <span class="number">418596</span>)))</span><br><span class="line">s.add(<span class="number">149</span> * v19 +  v1 +  <span class="number">133</span> * v22 +  <span class="number">207</span> * v41 +  <span class="number">182</span> * v26 +  <span class="number">234</span> * v7 +  <span class="number">199</span> * v8 +  <span class="number">168</span> * v21 +  <span class="number">58</span> * v10 +  <span class="number">108</span> * v20 +  <span class="number">142</span> * v18 +  <span class="number">156</span> * (v9 + v25) +  <span class="number">16</span> * (v29 + <span class="number">6</span> * v31) +  <span class="number">126</span> * (v17 + <span class="number">2</span> * v39) +  <span class="number">127</span> * (v4 + <span class="number">2</span> * v27 + v40) +  <span class="number">49</span> * (v30 + <span class="number">4</span> * v16) +  <span class="number">11</span> * (v5 + <span class="number">22</span> * v11) +  <span class="number">5</span> * (v15 + v42 + <span class="number">45</span> * v24 + <span class="number">50</span> * v28) +  <span class="number">109</span> * v2 +  <span class="number">124</span> * v6 +  <span class="number">123</span> * v3 == <span class="number">418697</span>)</span><br><span class="line">pcheck(s,a1)</span><br><span class="line"><span class="comment">#hgame&#123;SMC_4nd_s0lv1ng_equ4t1Ons&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">终于不是被打了</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="wp" scheme="https://www.pri87.vip/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>SICTF#3 wp及复现</title>
    <link href="https://www.pri87.vip/posts/65f5db04.html"/>
    <id>https://www.pri87.vip/posts/65f5db04.html</id>
    <published>2024-02-24T17:32:45.000Z</published>
    <updated>2024-03-03T12:52:36.875Z</updated>
    
    <content type="html"><![CDATA[<p>又被暴打了QAQ</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="baby-c"><a href="#baby-c" class="headerlink" title="baby_c++"></a>baby_c++</h3><p>判断的地方找数组即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">a = [<span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0x43</span>, <span class="number">0x54</span>, <span class="number">0x46</span>, <span class="number">0x7B</span>, <span class="number">0x34</span>, <span class="number">0x65</span>, <span class="number">0x34</span>, <span class="number">0x37</span>, <span class="number">0x34</span>, <span class="number">0x62</span>, <span class="number">0x38</span>, <span class="number">0x61</span>, <span class="number">0x2D</span>, <span class="number">0x39</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x36</span>, <span class="number">0x2D</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x62</span>, <span class="number">0x2D</span>, <span class="number">0x39</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x36</span>, <span class="number">0x2D</span>, <span class="number">0x64</span>, <span class="number">0x34</span>, <span class="number">0x66</span>, <span class="number">0x35</span>, <span class="number">0x65</span>, <span class="number">0x33</span>, <span class="number">0x37</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x35</span>, <span class="number">0x31</span>, <span class="number">0x66</span>, <span class="number">0x7D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">pl(a)</span><br><span class="line"><span class="comment">#SICTF&#123;4e474b8a-9df6-454b-9ea6-d4f5e37cd51f&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ez-pyc"><a href="#ez-pyc" class="headerlink" title="ez_pyc"></a>ez_pyc</h3><p>分析逻辑可知，是求解一个数独，同时只要求其中的一个解</p><p>尝试放到网上直接求解，直接出来了</p><p><img src="https://s2.loli.net/2024/02/23/yepYRodIr564mOT.png" alt="image-20240223163033222"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2548656723194376198518245679931748649825721856943342156965374812</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/23/UEgNoFqBv1CbdZm.png" alt="image-20240223163250217"></p><blockquote><p>这里我把输入改成十进制了</p></blockquote><p>之后更新一个碰撞md5的方法</p><h3 id="Sweet-Tofu"><a href="#Sweet-Tofu" class="headerlink" title="Sweet_Tofu"></a>Sweet_Tofu</h3><p>动调直接找检查数组，判断时要异或0x66</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">a = [<span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x1D</span>, <span class="number">0x3F</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, </span><br><span class="line">     <span class="number">0x39</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x02</span>, <span class="number">0x39</span>, <span class="number">0x2F</span>, <span class="number">0x39</span>, <span class="number">0x21</span>, </span><br><span class="line">     <span class="number">0x09</span>, <span class="number">0x02</span>, <span class="number">0x41</span>, <span class="number">0x15</span>, <span class="number">0x39</span>, <span class="number">0x25</span>, <span class="number">0x14</span>, <span class="number">0x03</span>, </span><br><span class="line">     <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x0F</span>, <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0x47</span>, <span class="number">0x22</span>, <span class="number">0x09</span>, </span><br><span class="line">     <span class="number">0x08</span>, <span class="number">0x41</span>, <span class="number">0x12</span>, <span class="number">0x39</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x39</span>, <span class="number">0x15</span>, </span><br><span class="line">     <span class="number">0x03</span>, <span class="number">0x14</span>, <span class="number">0x0F</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, <span class="number">0x15</span>, <span class="number">0x47</span>, <span class="number">0x1B</span>]</span><br><span class="line"></span><br><span class="line">pxor(a,<span class="number">0x66</span>)</span><br><span class="line"><span class="comment">#flag&#123;You_and_I_God&#x27;s_Creation!Don&#x27;t_be_serious!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="artbreaker"><a href="#artbreaker" class="headerlink" title="artbreaker"></a>artbreaker</h3><p>ida打开后发现不能反编译也不能看流程，修改最大节点数量然后跳到流程图</p><p>结果</p><p><img src="https://s2.loli.net/2024/02/23/zvDxTWEJqRoksOM.png" alt="image-20240223164916217"></p><p>居然用流程图把flag画出来了,看未定义变量的wp，说是用了<strong><a href="https://github.com/JuliaPoo/Artfuscator">Artfuscator</a></strong>这个来画的画</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Rabbit_falls_into_rabbit_hole&#125;</span></span><br></pre></td></tr></table></figure><h3 id="BattleCity"><a href="#BattleCity" class="headerlink" title="BattleCity"></a>BattleCity</h3><p>游戏题，看样子是要通关，在assets中可以看到levels.ldtk文件，用文本文件编辑器打开可以发现里面有各种东西的属性，于是我把每一关的敌人只留了一个，然后把基地的长宽改成0，打完4关，assets里出现了win.png，是二维码，扫码就出来了</p><h3 id="closeme"><a href="#closeme" class="headerlink" title="closeme"></a>closeme</h3><p>提示是要用正常方式结束程序</p><p>由于程序一直弹出窗口，因此需要通过messagebox函数的交叉引用找到主函数。或者通过动态调试找到位置。</p><p>然后动调分析一下，发现是一个循环+一些东西，要结束的话只能先break，在205行有唯一的break。同时后面有一个goto，让执行流又回到label_4了，这就</p><p>（看了wp）发现下面有一个xor加密的hint，解密得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">a=[<span class="number">0x23</span>, <span class="number">0x11</span>, <span class="number">0x0D</span>, <span class="number">0x1B</span>, <span class="number">0x13</span>, <span class="number">0x4B</span>, <span class="number">0x18</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x0A</span>, <span class="number">0x50</span>, <span class="number">0x08</span>, <span class="number">0x1D</span>, <span class="number">0x06</span>, <span class="number">0x54</span>, <span class="number">0x16</span>, <span class="number">0x1A</span>, <span class="number">0x18</span>, <span class="number">0x0B</span>, <span class="number">0x1C</span>, <span class="number">0x5A</span>, <span class="number">0x0F</span>, <span class="number">0x14</span>, <span class="number">0x18</span>, <span class="number">0x5E</span>, <span class="number">0x12</span>, <span class="number">0xE5</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0xE3</span>, <span class="number">0xE0</span>, <span class="number">0xE4</span>, <span class="number">0xE8</span>, <span class="number">0xF0</span>, <span class="number">0xA9</span>, <span class="number">0xE8</span>, <span class="number">0xF2</span>, <span class="number">0xAC</span>, <span class="number">0xEE</span>, <span class="number">0xE2</span>, <span class="number">0xE6</span>, <span class="number">0xF3</span>, <span class="number">0xFA</span>, <span class="number">0xB2</span>, <span class="number">0xF3</span>, <span class="number">0xCD</span>, <span class="number">0xF0</span>, <span class="number">0xE5</span>, <span class="number">0xF7</span>, <span class="number">0xB8</span>, <span class="number">0xF6</span>, <span class="number">0xE8</span>, <span class="number">0xBB</span>, <span class="number">0xFC</span>, <span class="number">0xD3</span>, <span class="number">0xF1</span>, <span class="number">0xFF</span>, <span class="number">0x8C</span>, <span class="number">0x81</span>, <span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0x84</span>, <span class="number">0xD2</span>, <span class="number">0xCF</span>, <span class="number">0xCB</span>, <span class="number">0xC4</span>, <span class="number">0x89</span>, <span class="number">0xC8</span>, <span class="number">0xCE</span>, <span class="number">0x8C</span>, <span class="number">0xDE</span>, <span class="number">0xDA</span>, <span class="number">0xC0</span>, <span class="number">0xC2</span>, <span class="number">0xD4</span>, <span class="number">0xD6</span>, <span class="number">0x9D</span>, <span class="number">0x94</span>, <span class="number">0xFF</span>, <span class="number">0xC3</span>, <span class="number">0xC4</span>, <span class="number">0xCC</span>, <span class="number">0x99</span>, <span class="number">0xD9</span>, <span class="number">0xD3</span>, <span class="number">0xD3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0xDA</span>, <span class="number">0xE0</span>, <span class="number">0x98</span>, <span class="number">0xA7</span>, <span class="number">0xB0</span>, <span class="number">0xEB</span>, <span class="number">0x8B</span>, <span class="number">0xA9</span>, <span class="number">0xEF</span>, <span class="number">0xF9</span>, <span class="number">0xE6</span>, <span class="number">0xFA</span>, <span class="number">0xE2</span>, <span class="number">0xEC</span>, <span class="number">0xA4</span>, <span class="number">0xA0</span>, <span class="number">0xEF</span>, <span class="number">0xB1</span>, <span class="number">0xF1</span>, <span class="number">0xB1</span>, <span class="number">0xB6</span>, <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xB7</span>, <span class="number">0xBE</span>, <span class="number">0xB6</span>, <span class="number">0xF9</span>, <span class="number">0xB5</span>, <span class="number">0xA9</span>, <span class="number">0xB8</span>, <span class="number">0xB8</span>, <span class="number">0xAC</span>, <span class="number">0xFF</span>, <span class="number">0x97</span>, <span class="number">0x89</span>, <span class="number">0x8B</span>, <span class="number">0x80</span>, <span class="number">0x8C</span>, <span class="number">0xC5</span>, <span class="number">0x8F</span>, <span class="number">0x94</span>, <span class="number">0xC8</span>, <span class="number">0x9D</span>, <span class="number">0x82</span>, <span class="number">0x8E</span>, <span class="number">0xCC</span>, <span class="number">0x8B</span>, <span class="number">0x82</span>, <span class="number">0x8E</span>, <span class="number">0x97</span>, <span class="number">0xDD</span>, <span class="number">0xD2</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x96</span>, <span class="number">0x9E</span>, <span class="number">0xD7</span>, <span class="number">0x99</span>, <span class="number">0x8A</span>, <span class="number">0xDA</span>, <span class="number">0xCB</span>, <span class="number">0xCD</span>, <span class="number">0xCD</span>, <span class="number">0xCE</span>, <span class="number">0xCE</span>,<span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x2D</span>, <span class="number">0x24</span>, <span class="number">0x55</span>, <span class="number">0x6A</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x7A</span>, <span class="number">0x6F</span>, <span class="number">0x2B</span>, <span class="number">0x7F</span>, <span class="number">0x78</span>, <span class="number">0x6C</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x65</span>, <span class="number">0x32</span>, <span class="number">0x75</span>, <span class="number">0x78</span>, <span class="number">0x74</span>, <span class="number">0x71</span>, <span class="number">0x37</span>, <span class="number">0x6F</span>, <span class="number">0x71</span>, <span class="number">0x73</span>, <span class="number">0x78</span>, <span class="number">0x74</span>, <span class="number">0x3D</span>, <span class="number">0x6A</span>, <span class="number">0x77</span>, <span class="number">0x45</span>, <span class="number">0x01</span>, <span class="number">0x44</span>, <span class="number">0x4C</span>, <span class="number">0x56</span>, <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x53</span>, <span class="number">0x08</span>, <span class="number">0x45</span>, <span class="number">0x43</span>, <span class="number">0x40</span>, <span class="number">0x49</span>, <span class="number">0x0D</span>, <span class="number">0x4E</span>, <span class="number">0x7C</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x4F</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x40</span>, <span class="number">0x5E</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i] ^= i+<span class="number">102</span></span><br><span class="line">pl(a)</span><br><span class="line"><span class="comment">#Every time you close the messagebox by click `Yes` or `No`, it will be stored. Just choose Yes/No(1/0) in a certain order which is the flag, such as 01001100. Please submit flag which the format like `SICTF&#123;01001100&#125;`</span></span><br></pre></td></tr></table></figure><p>那么根据上面的break，可以看出需要输入16次</p><p>但是要检测到按键按的是哪个</p><p>根据messageboxW：yes是6，no是7。查找后可以发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v2 == <span class="number">5</span> * (v2 / <span class="number">5</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v63 = (<span class="type">const</span> WCHAR *)&amp;unk_140022B10;</span><br><span class="line">        v64 = (__int64)&amp;unk_140022B3C;</span><br><span class="line">        LOWORD(Size) = <span class="number">0</span>;</span><br><span class="line">        LODWORD(v66) = <span class="number">1</span>;</span><br><span class="line">        sub_140003240(&amp;v70, &amp;v63);</span><br><span class="line">        lpWindowName = v71;</span><br><span class="line">        v63 = (<span class="type">const</span> WCHAR *)&amp;unk_140022B3C;</span><br><span class="line">        v64 = (__int64)&amp;unk_140022B5D;</span><br><span class="line">        LOWORD(Size) = <span class="number">0</span>;</span><br><span class="line">        LODWORD(v66) = <span class="number">1</span>;</span><br><span class="line">        sub_140003240(lpCaption, &amp;v63);</span><br><span class="line">        v73 = (<span class="type">unsigned</span> __int64)lpCaption[<span class="number">1</span>];</span><br><span class="line">        choose = MessageBoxW(<span class="number">0</span>i64, lpWindowName, lpCaption[<span class="number">1</span>], <span class="number">4u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( lpCaption[<span class="number">0</span>] )</span><br><span class="line">          sub_1400038E0(v73, <span class="number">2</span> * (__int64)lpCaption[<span class="number">0</span>], <span class="number">2</span>i64);</span><br><span class="line">        <span class="keyword">if</span> ( v70 )</span><br><span class="line">          sub_1400038E0(lpWindowName, <span class="number">2</span>i64 * (_QWORD)v70, <span class="number">2</span>i64);</span><br><span class="line">        this_choose_ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( choose != <span class="number">6</span> )                      <span class="comment">// 否</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( choose != <span class="number">7</span> )                    <span class="comment">// 否，不可能进入</span></span><br><span class="line">          &#123;</span><br><span class="line">            v63 = (<span class="type">const</span> WCHAR *)&amp;off_140022B98;</span><br><span class="line">            v64 = <span class="number">1</span>i64;</span><br><span class="line">            Size = (<span class="type">size_t</span>)&amp;off_140022888;</span><br><span class="line">            v66 = <span class="number">0</span>i64;</span><br><span class="line">            sub_1400214A0(&amp;v63, &amp;off_140022BA8);</span><br><span class="line">          &#125;</span><br><span class="line">          this_choose_ans = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cont2 = cont;                           <span class="comment">// 是</span></span><br><span class="line">        <span class="keyword">if</span> ( cont == v59 )                      <span class="comment">// ?</span></span><br><span class="line">        &#123;</span><br><span class="line">          sub_140003820(&amp;v59);</span><br><span class="line">          cont2 = cont;</span><br><span class="line">        &#125;</span><br><span class="line">        *(_BYTE *)(save_place + cont2) = this_choose_ans;</span><br><span class="line">        <span class="keyword">if</span> ( ++cont == <span class="number">16</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>修正this_choose_ans的值，是\==1，否\==0,最后存在save_place中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">sp0 = *(<span class="type">unsigned</span> __int8 *)save_place;</span><br><span class="line"><span class="keyword">if</span> ( sp0 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp1 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp1 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp2 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp2 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp3 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp3 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp4 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp4 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp5 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp5 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp6 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">6</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp6 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp7 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp7 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp8 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">8</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp8 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp9 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">9</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp9 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp10 = (LPCWSTR)*(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)sp10 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp11 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">11</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp11 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp12 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">12</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp12 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp13 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">13</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp13 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp14 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">14</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp14 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">sp15 = *(<span class="type">unsigned</span> __int8 *)(save_place + <span class="number">15</span>);</span><br><span class="line"><span class="keyword">if</span> ( sp15 &gt; <span class="number">1</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">final = sp0</span><br><span class="line">      + <span class="number">10</span></span><br><span class="line">      * (sp1</span><br><span class="line">       + <span class="number">10</span></span><br><span class="line">       * (sp2</span><br><span class="line">        + <span class="number">10</span></span><br><span class="line">        * (sp3</span><br><span class="line">         + <span class="number">10</span></span><br><span class="line">         * (sp4</span><br><span class="line">          + <span class="number">10</span></span><br><span class="line">          * (sp5</span><br><span class="line">           + <span class="number">10</span></span><br><span class="line">           * (sp6</span><br><span class="line">            + <span class="number">10</span></span><br><span class="line">            * (sp7</span><br><span class="line">             + <span class="number">10</span></span><br><span class="line">             * (sp8</span><br><span class="line">              + <span class="number">10</span> * (sp9 + <span class="number">10</span>i64 * (_QWORD)&amp;sp10[<span class="number">50000</span> * sp15 + <span class="number">5000</span> * sp14 + <span class="number">500</span> * sp13 + <span class="number">50</span> * sp12 + <span class="number">5</span> * sp11])))))))));</span><br></pre></td></tr></table></figure><p>经过这里后label_4会到第一个while（1）的位置最后,那只能继续分析final，它储存了所有输入内容计算后的最终值，由于先输入sp0，然后1。。。说明高位后输入，低位先输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)sub_14001F580(&amp;final, &amp;zero) )</span><br></pre></td></tr></table></figure><p>并且由于提示的按一定方式点击，说明肯定有检测的存在</p><p>在label_3的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (what &amp; <span class="number">0xFFFF0000</span>) != <span class="number">-1443823616</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_3:</span><br><span class="line">    cont = <span class="number">0</span>i64;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>只要等于就可以往后走</p><p>反异或一下what的值等于1443758080/560E 0000</p><p>动态调试，输入测试，发现sp0到15就是放入的值1010101，唯一奇怪的是sp13和sp11是特定的值0x800和0x90000000</p><p><del>继续看what的生成</del>看不出来，试试代数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">0000 </span><span class="number">0000</span> <span class="string">》</span>           <span class="number">1111 </span><span class="number">1111 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111</span> <span class="string">》</span> <span class="number">0011 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1100 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111</span> <span class="string">》</span> <span class="number">0011 </span><span class="number">1111 </span><span class="number">1100 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001</span> <span class="string">》</span> <span class="number">0110 </span><span class="number">0110 </span><span class="number">0110 </span><span class="number">0110 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br></pre></td></tr></table></figure><p>根据第一组数据感觉是倒序排入，上面final也是倒序的。倒序一下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111</span> <span class="string">》</span>           <span class="number">1111 </span><span class="number">1111 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">0000</span> <span class="string">》</span> <span class="number">0011 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1100 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">1111 </span><span class="number">1111 </span><span class="number">0000 </span><span class="number">0000</span> <span class="string">》</span> <span class="number">0011 </span><span class="number">1111 </span><span class="number">1100 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br><span class="line"></span><br><span class="line"><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001 </span><span class="number">1001</span> <span class="string">》</span> <span class="number">0110 </span><span class="number">0110 </span><span class="number">0110 </span><span class="number">0110 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000</span></span><br></pre></td></tr></table></figure><p>第四个看得很明显如果不看后4位是最后两个变到了前面</p><p>试一试最后的what是不是这样变的</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">560e0000</span>：</span><br><span class="line"><span class="number">0101011000001110</span></span><br><span class="line"><span class="number">0101100000111001</span></span><br><span class="line"><span class="symbol">0101 </span><span class="number">1000</span> <span class="number">0011</span> <span class="number">1001</span></span><br></pre></td></tr></table></figure><p>不对？重新看了一遍发现是与运算，不是异或，那就是说最后的A9F1就是结果的末值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1010 </span><span class="number">1001 </span><span class="number">1111 </span><span class="number">0001</span></span><br><span class="line"><span class="number">1010 </span><span class="number">0111 </span><span class="number">1100 </span><span class="number">0110</span></span><br><span class="line"><span class="number">0110 </span><span class="number">0011 </span><span class="number">1110 </span><span class="number">0101</span></span><br><span class="line"><span class="string">得到</span></span><br><span class="line"><span class="string">SICTF&#123;0110001111100101&#125;</span></span><br></pre></td></tr></table></figure><p>这道题告诉我看到这种抽象的题要多调试，静下来分析QAQ</p><h3 id="virus-nlys1s-待补充"><a href="#virus-nlys1s-待补充" class="headerlink" title="virus-nlys1s[待补充]"></a>virus-nlys1s[待补充]</h3><p>居然是病毒样本，没玩过，之后再说</p><hr><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="vigenere"><a href="#vigenere" class="headerlink" title="vigenere"></a>vigenere</h3><p>从名字可以看出是维吉尼亚密码</p><p>第二段可以明显看出有一段是SICTF{}，进入</p><p><a href="https://www.dcode.fr/vigenere-cipher这个网站，输入密文和已知的明文">https://www.dcode.fr/vigenere-cipher这个网站，输入密文和已知的明文</a></p><p>得key：SAATF和明文</p><h3 id="SuperbRSA"><a href="#SuperbRSA" class="headerlink" title="SuperbRSA"></a>SuperbRSA</h3><p>这个是变体的共模攻击</p><p>通过e1，e2求gcd，最后的结果要取gcd的根</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e1=<span class="number">55</span></span><br><span class="line">e2=<span class="number">200</span></span><br><span class="line">n= <span class="number">19006830358118902392432453595802675566730850352890246995920642811967821259388009049803513102750594524106471709641202019832682438027312468849299985832675191795417160553379580813410722359089872519372049229233732405993062464286888889084640878784209014165871696882564834896322508054231777967011195636564463806270998326936161449009988434249178477100127347406759932149010712091376183710135615375272671888541233275415737155953323133439644529709898791881795186775830217884663044495979067807418758455237701315019683802437323177125493076113419739827430282311018083976114158159925450746712064639569301925672742186294237113199023</span></span><br><span class="line">c1= <span class="number">276245243658976720066605903875366763552720328374098965164676247771817997950424168480909517684516498439306387133611184795758628248588201187138612090081389226321683486308199743311842513053259894661221013008371261704678716150646764446208833447643781574516045641493770778735363586857160147826684394417412837449465273160781074676966630398315417741542529612480836572205781076576325382832502694868883931680720558621770570349864399879523171995953720198118660355479626037129047327185224203109006251809257919143284157354935005710902589809259500117996982503679601132486140677013625335552533104471327456798955341220640782369529</span></span><br><span class="line">c2= <span class="number">11734019659226247713821792108026989060106712358397514827024912309860741729438494689480531875833287268454669859568719053896346471360750027952226633173559594064466850413737504267807599435679616522026241111887294138123201104718849744300769676961585732810579953221056338076885840743126397063074940281522137794340822594577352361616598702143477379145284687427705913831885493512616944504612474278405909277188118896882441812469679494459216431405139478548192152811441169176134750079073317011232934250365454908280676079801770043968006983848495835089055956722848080915898151352242215210071011331098761828031786300276771001839021</span></span><br><span class="line"></span><br><span class="line">g,x,y=gmpy2.gcdext(e1,e2)</span><br><span class="line"></span><br><span class="line">m=<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n)%n</span><br><span class="line">m=gmpy2.iroot(m,g)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;SICTF&#123;S0_Great_RSA_Have_Y0u_Learned?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="easyLattice-待补充"><a href="#easyLattice-待补充" class="headerlink" title="easyLattice[待补充]"></a>easyLattice[待补充]</h3><p>感觉在考逆元和模的基本运算？但是没做出来悲伤。</p><p>翻wp发现是考格密码，按照<a href="https://blog.csdn.net/u010883831/article/details/128262134">VSCode配置sage教程 不用notebook直接运行+代码高亮+命令行输出_sage windows-CSDN博客</a>安装好环境，（最后失败了，于是把库全放到自带的解释器里面）</p><p>没见过呀（TVT），看不懂，之后再说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">h = <span class="number">9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span></span><br><span class="line">p = <span class="number">11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947</span>     </span><br><span class="line">T = <span class="number">2</span>^<span class="number">250</span></span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ,[[<span class="number">1</span>,T*h],[<span class="number">0</span>,T*p]])</span><br><span class="line"></span><br><span class="line">f,g = L.LLL()[<span class="number">0</span>]</span><br><span class="line">f,g = <span class="built_in">abs</span>(f),<span class="built_in">abs</span>(g)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(f)))</span><br><span class="line"><span class="comment"># SICTF&#123;e3fea01c-18f3-4638-9544-9201393940a9&#125;</span></span><br></pre></td></tr></table></figure><p>大概是说</p><script type="math/tex; mode=display">h = (f^{-1}g) \mod p</script><script type="math/tex; mode=display">g = fh+kp</script><script type="math/tex; mode=display">\begin{pmatrix}f & k \\\end{pmatrix}\times\begin{pmatrix}1 & h \\0 & p\end{pmatrix}=\begin{pmatrix}f & g \\\end{pmatrix}</script><h3 id="gggcd-待补充"><a href="#gggcd-待补充" class="headerlink" title="gggcd[待补充]"></a>gggcd[待补充]</h3><p>这个第一次见到诶，好怪：同e，n不同m，$m_2=f(m_1)$</p><p>m2是m1的线性变换</p><p>然后已知c1，c2，n，e</p><p>查了查，原来这个叫相关消息攻击</p><p>通过求可能的g再求其gcd（g1，g2）得到m</p><p>看大佬们的wp，exp都是用sage写的，我安装好后也不能导入python，但是直接用sage自带的好像可以，不过不能导入Crypto.Util.number，我就先解出m再longtobytes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">....: c2 = <span class="number">205635624489021368248826364689528951802539834493392269547383991633413</span></span><br><span class="line">....: <span class="number">32272571882209784996486250189912121870946577915881638415484043534161071782</span></span><br><span class="line">....: <span class="number">38735899371291867878739806568899981073418921390469351451959495552246015176</span></span><br><span class="line">....: <span class="number">94795153230498219402854082280557713496709195875609525488767962526341049263</span></span><br><span class="line">....: <span class="number">67078177733076253</span></span><br><span class="line">....: e = <span class="number">65537</span></span><br><span class="line">....: a = <span class="number">233</span></span><br><span class="line">....: b = <span class="number">9527</span></span><br><span class="line">....:</span><br><span class="line">....: <span class="keyword">import</span> binascii</span><br><span class="line">....: <span class="keyword">def</span> <span class="title function_">franklinReiter</span>(<span class="params">n,e,c1,c2</span>):</span><br><span class="line">....:     PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">....:     g1 = (x)^e - c1</span><br><span class="line">....:     g2 = (<span class="number">233</span>*x+<span class="number">9527</span>)^e - c2</span><br><span class="line">....:</span><br><span class="line">....:     <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">....:         <span class="keyword">while</span> g2:</span><br><span class="line">....:             g1, g2 = g2, g1 % g2</span><br><span class="line">....:         <span class="keyword">return</span> g1.monic()</span><br><span class="line">....:     <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">....:</span><br><span class="line">....: m=franklinReiter(n,e,c1,c2)</span><br><span class="line">....: <span class="built_in">print</span>((m))</span><br><span class="line"><span class="number">11658736990073968144116409270602503966776095409763057826884617698882016691134900406351481309826095854973</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">print</span>(long_to_bytes(<span class="number">11658736990073968144116409270602503966776095409763057826884617698882016691134900406351481309826095854973</span>))</span><br><span class="line"><span class="attribute">b</span>&#x27;SICTF&#123;<span class="number">45115</span>fb2-<span class="number">84</span>d6-<span class="number">4369</span>-<span class="number">88</span>c2-c8c3d72b4c55&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="签到，确信-待补充"><a href="#签到，确信-待补充" class="headerlink" title="签到，确信![待补充]"></a>签到，确信![待补充]</h3><p>我不解，但我大受震撼</p><h3 id="铜匠-待补充"><a href="#铜匠-待补充" class="headerlink" title="铜匠[待补充]"></a>铜匠[待补充]</h3><p>似乎这个是已知p的高位</p><p>但是转5进制之后似乎不能准确表示p的高位，难度是把n转5进制？</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">from</span> Crypto.Util.number import *</span><br><span class="line"><span class="attribute">import</span> gmpy2</span><br><span class="line"><span class="attribute">from</span> tqdm import *</span><br><span class="line"></span><br><span class="line"><span class="attribute">leak</span> = <span class="string">&quot;2011133132443111302000224204142244403203442000141102312242343143241244243020003333022112141220422134444214010012&quot;</span></span><br><span class="line"><span class="attribute">n</span> = <span class="number">85988668134257353631742597258304937106964673395852009846703777410474172989069717247424903079500594820235304351355706519069516847244761609583338251489134035212061654870087550317540291994559481862615812258493738064606592165529948648774081655902831715928483206013332330998262897765489820121129058926463847702821</span></span><br><span class="line"><span class="attribute">e</span> = <span class="number">65537</span></span><br><span class="line"><span class="attribute">c</span> = <span class="number">64708526479058278743788046708923650158905888858865427385501446781738669889375403360886995849554813207230509920789341593771929287415439407977283018525484281064769128358863513387658744063469874845446480637925790150835186431234289848506337341595817156444941964510251032210939739594241869190746437858135599624562</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">def</span> five_to_ten(num):</span><br><span class="line">    <span class="attribute">temp</span> = <span class="number">0</span></span><br><span class="line">    <span class="attribute">i</span> = <span class="number">109</span></span><br><span class="line">    <span class="attribute">for</span> j in reversed(num):</span><br><span class="line">        <span class="attribute">temp</span> += int(j) * <span class="number">5</span>**i</span><br><span class="line">        <span class="attribute">i</span> += <span class="number">1</span></span><br><span class="line">    <span class="attribute">return</span> temp</span><br><span class="line"></span><br><span class="line"><span class="attribute">leak</span> = five_to_ten(leak)</span><br><span class="line"><span class="attribute">gift</span> = leak &gt;&gt; <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">for</span> i in trange(<span class="number">2</span>^<span class="number">8</span>):</span><br><span class="line">    <span class="attribute">ph</span> = gift &lt;&lt; <span class="number">8</span></span><br><span class="line">    <span class="attribute">phigh</span> = ph + i</span><br><span class="line">    <span class="attribute">phigh</span> = phigh &lt;&lt; <span class="number">248</span></span><br><span class="line">    <span class="attribute">R</span>.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    <span class="attribute">f</span> = phigh + x</span><br><span class="line">    <span class="attribute">res</span> = f.small_roots(X=<span class="number">2</span>^<span class="number">248</span>, beta=<span class="number">0</span>.<span class="number">4</span>, epsilon=<span class="number">0</span>.<span class="number">01</span>)</span><br><span class="line">    <span class="attribute">if</span> res !=<span class="meta"> []:</span></span><br><span class="line"><span class="meta">        p = phigh + int(res[0])</span></span><br><span class="line"><span class="meta">        q = n // p</span></span><br><span class="line"><span class="meta">        d = gmpy2.invert(e,(p-1)*(q-1))</span></span><br><span class="line"><span class="meta">        m = pow(c,d,n)</span></span><br><span class="line"><span class="meta">        print(f&quot;i = &#123;i&#125;&quot;)</span></span><br><span class="line"><span class="meta">        print(long_to_bytes(int(m)))</span></span><br><span class="line"><span class="meta">        break</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><h3 id="babyRSA-待补充"><a href="#babyRSA-待补充" class="headerlink" title="babyRSA[待补充]"></a>babyRSA[待补充]</h3><h3 id="easy-or-baby-RSA-待补充"><a href="#easy-or-baby-RSA-待补充" class="headerlink" title="easy_or_baby_RSA[待补充]"></a>easy_or_baby_RSA[待补充]</h3><h3 id="2024-New-Setback-待补充"><a href="#2024-New-Setback-待补充" class="headerlink" title="2024_New_Setback[待补充]"></a>2024_New_Setback[待补充]</h3><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>略</p><h3 id="geekchallenge"><a href="#geekchallenge" class="headerlink" title="geekchallenge"></a>geekchallenge</h3><p>这个要连接一个地址，连接后是一个猜数字游戏，114位，一共5种字符，一开始尝试了很久不知道为什么错了，最后发现它延迟一次显示，上一次的结果出现在下一次在，那么解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有可见字符</span></span><br><span class="line">visible_chars = string.printable[:-<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个socket对象</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务器</span></span><br><span class="line">s.connect((<span class="string">&quot;yuanshen.life&quot;</span>, <span class="number">34757</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个114位的列表，初始值为None</span></span><br><span class="line">password = [<span class="literal">None</span>] * <span class="number">114</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存上一次的字符</span></span><br><span class="line">last_char = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历所有可能的字符</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> visible_chars:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>(v <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">for</span> v <span class="keyword">in</span> password):</span><br><span class="line">        <span class="comment"># 将guess设为password并将空位全部改为char</span></span><br><span class="line">        guess = <span class="string">&#x27;&#x27;</span>.join([v <span class="keyword">if</span> v <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> char <span class="keyword">for</span> v <span class="keyword">in</span> password]) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 否则，guess为114个相同的字符</span></span><br><span class="line">        guess = char * <span class="number">114</span> + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送字符串到服务器</span></span><br><span class="line">    s.send(guess.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收服务器的响应</span></span><br><span class="line">    response = s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(guess)</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br><span class="line">    <span class="comment"># 如果response中有&#x27;1&#x27;，就把上一次的char放入password中的每一个返回的&#x27;1&#x27;的位置</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> response <span class="keyword">and</span> last_char <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> i, bit <span class="keyword">in</span> <span class="built_in">enumerate</span>(response):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(password) <span class="keyword">and</span> bit == <span class="string">&#x27;1&#x27;</span><span class="keyword">and</span> password[i] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                password[i] = last_char</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新上一次的字符</span></span><br><span class="line">    last_char = char</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">filter</span>(<span class="literal">None</span>, password)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    message = <span class="built_in">input</span>(<span class="string">&quot;请输入你要发送的消息：\n&quot;</span>)</span><br><span class="line">    message += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    s.send(message.encode())</span><br><span class="line">    response = s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">s.close()</span><br><span class="line"><span class="comment">#SICTF&#123;18e62b78-c753-407c-9b0f-aa386fb4d6fd&#125;</span></span><br></pre></td></tr></table></figure><h3 id="New-year-s-regret"><a href="#New-year-s-regret" class="headerlink" title="New_year`s regret"></a>New_year`s regret</h3><p>给了一个压缩包，有秘密，但是说了格式：xxxxSICTF</p><p>那就掩码爆破：格式是????SICTF</p><p>出来是2024SICTF</p><p>解压压缩包得到一个task.png和output.txt，同时压缩包注释表示压缩包有额外数据，用010editor查看得：43637d135333</p><p>task.png是400x400的类似二维码的黑白图像，一行25个格</p><p>output.txt是一堆0101二进制串，22464个字符加一个换行符</p><p>那么很有可能要把output转为图片，但是并不知道要怎么转换。</p><p>然后这里的额外数据43637d135333实在想不出来是什么意思，看wp后才知道要反转之后from hex：351×64刚好22464</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_image_from_file</span>(<span class="params">filename, width, height</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        data = file.read().replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    pixels = img.load()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data)):</span><br><span class="line">        row = i // width</span><br><span class="line">        col = i % width</span><br><span class="line">        <span class="keyword">if</span> data[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            pixels[col, row] = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  </span><br><span class="line">        <span class="keyword">elif</span> data[i] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            pixels[col, row] = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)  </span><br><span class="line"></span><br><span class="line">    img.save(<span class="string">&#x27;output.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">create_image_from_file(<span class="string">&#x27;output.txt&#x27;</span>,<span class="number">351</span>,<span class="number">64</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/21/GcEh8Qu1xPMSW3o.png" alt="output"></p><p>得到一张五线谱，这个叫Music Sheet Cipher</p><p>通过网站：<a href="https://www.dcode.fr/music-sheet-cipher">Music Sheet Cipher - Online Notes Decoder, Encoder, Translator (dcode.fr)</a></p><p>来解码</p><p>得到：PUTITALLTOGETHER/put_it_all_together</p><p>以zip形式打开task.png</p><p>发现有base64编码的字符,解码后好像还是base64，多试几次，最后发现35次的时候有PNG的标志，37次就不能继续了，把它输出成png，是一个二维码，扫码然后获得部分flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.readline().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>):</span><br><span class="line">    data = base64.b64decode(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;something.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(data)</span><br></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;Congratuation_to_you!</span><br></pre></td></tr></table></figure><p>再查看task.png,二进制打开看有没有什么标志，除了50 4B 03 04还有一个PNG，复制PNG保存打开是一张武器表，根据提示：你知道这是几星吗想到要找武器星级</p><p><img src="https://s2.loli.net/2024/02/21/EATqRXUfzZDg5F4.png" alt="k"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">44664654464566654465645644544664654654644546445446646565444454544664654664544545646454544454466465465645644</span><br></pre></td></tr></table></figure><p>结果是如上。四五六有三种变化，猜莫斯密码</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">..--.-</span> <span class="string">..-.</span> <span class="params">---</span> <span class="string">..-</span> -. -<span class="string">..</span> <span class="string">..--.-</span> <span class="string">.-</span> <span class="string">.-..</span> <span class="string">.-..</span> <span class="string">..--.-</span> - <span class="string">....</span> . <span class="string">..--.-</span> <span class="string">.--.</span> <span class="string">..</span> . -<span class="string">.-.</span> . <span class="string">...</span> <span class="string">..--.-</span> <span class="string">.-</span> -. -<span class="string">..</span></span><br></pre></td></tr></table></figure><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">_FOUND_ALL_THE_PIECES_AND</span></span><br></pre></td></tr></table></figure><p>拼接flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">SICTF</span><span class="template-variable">&#123;Congratulation_to_you!_found_all_the_pieces_and_put_it_all_together&#125;</span></span><br></pre></td></tr></table></figure><h3 id="WHOWHOWHO"><a href="#WHOWHOWHO" class="headerlink" title="WHOWHOWHO"></a>WHOWHOWHO</h3><p>又是有密码的压缩包,但是有提示：6位数小写密码，爆破：qweqwe</p><p>二号位置有空白字符，很明显是0宽隐写,网上找工具解密</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">U2FsdGVkX19uvldJ6CGUNff3B28QEdIjZqgUh98K</span>+/<span class="number">0</span>J16ELU8WVQydohw4P5+<span class="number">2</span>M</span><br><span class="line"><span class="attribute">jbhTLQHNOpcoOd7kSRgy8pwpovCmimdD8M0IbYUeXjNKYePL</span>/WP4PCMaOJHAW3HR</span><br><span class="line"><span class="attribute">b7IEoDDH1NYh3o5NwMmcFEqy1ujf72VgQIQkaeYFFFE</span>=</span><br></pre></td></tr></table></figure><p>base64，有三行，直接解密，解完发现是乱码，但是一开头说salted，加盐了</p><p>上网查时发现rabbit加密开头一定是U2FsdGVkX1，base64之后就是salted_所以尝试用这个解密，需要key才可以，根据txt文件中的谁是渣男，尝试：shumu</p><p>成功</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GTAGAGCTAGTCCTT&#123;GGGTCACGGTTC_GGGTCACGGTTC_GAACGGTTC_GTAGTG_GCTTC<span class="built_in">A_GTAGACGTGGCGGTG</span>_GTAGACTC<span class="built_in">A_TATGACCGG</span>_GCTCGGGCT&#125;</span><br></pre></td></tr></table></figure><p>这个是dna加密，好像没有直接解密的，但是有脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mapping = &#123;</span><br><span class="line">        <span class="string">&#x27;AAA&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;AAC&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;AAG&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;AAT&#x27;</span>:<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;ACA&#x27;</span>:<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;ACC&#x27;</span>:<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;ACG&#x27;</span>:<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;ACT&#x27;</span>:<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;AGA&#x27;</span>:<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;AGC&#x27;</span>:<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;AGG&#x27;</span>:<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;AGT&#x27;</span>:<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;ATA&#x27;</span>:<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;ATC&#x27;</span>:<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;ATG&#x27;</span>:<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;ATT&#x27;</span>:<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;CAA&#x27;</span>:<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;CAC&#x27;</span>:<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;CAG&#x27;</span>:<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;CAT&#x27;</span>:<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;CCA&#x27;</span>:<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;CCC&#x27;</span>:<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;CCG&#x27;</span>:<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;CCT&#x27;</span>:<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;CGA&#x27;</span>:<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;CGC&#x27;</span>:<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;CGG&#x27;</span>:<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;CGT&#x27;</span>:<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;CTA&#x27;</span>:<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;CTC&#x27;</span>:<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;CTG&#x27;</span>:<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;CTT&#x27;</span>:<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;GAA&#x27;</span>:<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;GAC&#x27;</span>:<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;GAG&#x27;</span>:<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;GAT&#x27;</span>:<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;GCA&#x27;</span>:<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;GCC&#x27;</span>:<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;GCG&#x27;</span>:<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;GCT&#x27;</span>:<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;GGA&#x27;</span>:<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;GGC&#x27;</span>:<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;GGG&#x27;</span>:<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;GGT&#x27;</span>:<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;GTA&#x27;</span>:<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;GTC&#x27;</span>:<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;GTG&#x27;</span>:<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;GTT&#x27;</span>:<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;TAA&#x27;</span>:<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;TAC&#x27;</span>:<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;TAG&#x27;</span>:<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;TAT&#x27;</span>:<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;TCA&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;TCC&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;TCG&#x27;</span>:<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;TCT&#x27;</span>:<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;TGA&#x27;</span>:<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;TGC&#x27;</span>:<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;TGG&#x27;</span>:<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;TGT&#x27;</span>:<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;TTA&#x27;</span>:<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;TTC&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;TTG&#x27;</span>:<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;TTT&#x27;</span>:<span class="string">&#x27;.&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>= <span class="string">&#x27;GTAGAGCTAGTCCTT&#123;GGGTCACGGTTC_GGGTCACGGTTC_GAACGGTTC_GTAGTG_GCTTCA_GTAGACGTGGCGGTG_GTAGACTCA_TATGACCGG_GCTCGGGCT&#125;&#x27;</span></span><br><span class="line">final = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(<span class="built_in">input</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span>[i]==<span class="string">&#x27;_&#x27;</span><span class="keyword">or</span> <span class="built_in">input</span>[i]==<span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">or</span> <span class="built_in">input</span>[i]==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">        final+=<span class="built_in">input</span>[i]</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = <span class="built_in">input</span>[i:i+<span class="number">3</span>]</span><br><span class="line">        final += mapping[tmp]</span><br><span class="line">        i+=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(final)</span><br><span class="line"><span class="comment">#SICTF&#123;Q1A0_Q1A0_GA0_SU_N1_SHUMU_SH1_ZHA_NAN&#125;</span></span><br></pre></td></tr></table></figure><h3 id="日志分析1"><a href="#日志分析1" class="headerlink" title="日志分析1"></a>日志分析1</h3><p>使用了windows自带的evtx浏览器和logparser</p><p>尝试查找注册或者登录：id4779</p><p>找到</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志分析<span class="number">1.</span>evtx<span class="number">1600</span><span class="number">2020</span><span class="number">-07</span><span class="number">-22</span> <span class="number">10</span>:<span class="number">52</span>:<span class="number">19</span><span class="number">2020</span><span class="number">-07</span><span class="number">-22</span> <span class="number">10</span>:<span class="number">52</span>:<span class="number">19</span><span class="number">4779</span><span class="number">8</span>Success Audit event<span class="number">12551</span>The name <span class="keyword">for</span> category <span class="number">12551</span> <span class="keyword">in</span> Source <span class="string">&quot;Microsoft-Windows-Security-Auditing&quot;</span> cannot be found. The <span class="built_in">local</span> computer may <span class="keyword">not</span> have <span class="keyword">the</span> necessary registry information <span class="keyword">or</span> message DLL <span class="built_in">files</span> <span class="built_in">to</span> display messages <span class="built_in">from</span> <span class="keyword">a</span> remote computerMicrosoft-Windows-Security-Auditingattack$|ADOFLMB|<span class="number">0x12a334</span>|RDP-Tcp<span class="comment">#0|kali|192.168.222.200WIN-WH8G5MDPHE5.ADoflmb.comNULLThe description for Event ID 4779 in Source &quot;Microsoft-Windows-Security-Auditing&quot; cannot be found. The local computer may not have the necessary registry information or message DLL files to display messages from a remote computerNULL</span></span><br></pre></td></tr></table></figure><p>这里找到attack$的用户名，ADOFLMB的用户域，下面的192.168.222.200是内网登录的ip，然后查找创建计划任务的id：</p><p>得到任务名称\callback，文件路径c:\windows\system32\windows_attack.exe</p><p>锁定这一天寻找其它内容就能找到就能找到用户组是Administrators</p><p>远程登录账户是WIN-WH8G5MDPHE5$</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;<span class="number">192.168</span><span class="number">.222</span><span class="number">.200</span>|<span class="type">attack</span>$|<span class="type">Administrators</span>|<span class="type">\callback</span>|<span class="type">c</span>:\windows\system32\windows_attack.exe|<span class="type">ADOFLMB</span>\WIN-WH8G5MDPHE5$&#125;</span><br></pre></td></tr></table></figure><p>但是不对，结果远程登录账户就是attack$</p><p>在4769号内容2020/7/22/10：52：06</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">已请求 Kerberos 服务票证。</span><br><span class="line"></span><br><span class="line">帐户信息:</span><br><span class="line">帐户名:attack$@ADOFLMB.COM</span><br><span class="line">帐户域:ADOFLMB.COM</span><br><span class="line">登录 GUID:&#123;7539ad21<span class="string">-0</span>be8<span class="string">-8</span>cb6<span class="string">-7406</span><span class="string">-054797</span>c14d68&#125;</span><br><span class="line"></span><br><span class="line">服务信息:</span><br><span class="line">服务名称:WIN-WH8G5MDPHE5$</span><br><span class="line">服务 ID:S<span class="string">-1</span><span class="string">-5</span><span class="string">-21</span><span class="string">-867333373</span><span class="string">-202576419</span><span class="string">-2389709931</span><span class="string">-1000</span></span><br><span class="line"></span><br><span class="line">网络信息:</span><br><span class="line">客户端地址:::1</span><br><span class="line">客户端端口:0</span><br><span class="line"></span><br><span class="line">附加信息:</span><br><span class="line">票证选项:0x40810000</span><br><span class="line">票证加密类型:0x12</span><br><span class="line">故障代码:0x0</span><br><span class="line">传递服务:-</span><br><span class="line"></span><br><span class="line">每次请求访问资源(例如计算机或 Windows 服务)时生成此事件。服务名称表示请求访问的资源。</span><br><span class="line"></span><br><span class="line">可以通过比较每个事件中的“登录 GUID”字段将此事件与 Windows 登录事件相关联。登录事件发生在被访问的计算机上，通常情况下，该计算机不是颁发服务票证的域控制器计算机。</span><br><span class="line"></span><br><span class="line">票证选项、加密类型和故障代码是在 RFC 4120 中定义的。</span><br></pre></td></tr></table></figure><p>第一行得到目标账户名，这个事件是生成凭证以访问资源的所以没问题？</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;<span class="number">192.168</span><span class="number">.222</span><span class="number">.200</span>|<span class="type">attack</span>$|<span class="type">Administrators</span>|<span class="type">\callback</span>|<span class="type">c</span>:\windows\system32\windows_attack.exe|<span class="type">ADOFLMB</span>\attack$&#125;</span><br></pre></td></tr></table></figure><p>然而，任务名不加\，这个\表示它位于任务计划程序的根目录下，所以正确flag是</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;<span class="number">192.168</span><span class="number">.222</span><span class="number">.200</span>|<span class="type">attack</span>$|<span class="type">Administrators</span>|<span class="type">callback</span>|<span class="type">c</span>:\windows\system32\windows_attack.exe|<span class="type">ADOFLMB</span>\attack$&#125;</span><br></pre></td></tr></table></figure><p>（所以说$表示隐藏为什么要加QAQ）</p><h3 id="日志分析2-待补充"><a href="#日志分析2-待补充" class="headerlink" title="日志分析2[待补充]"></a>日志分析2[待补充]</h3><h3 id="神秘的流量-待补充"><a href="#神秘的流量-待补充" class="headerlink" title="神秘的流量[待补充]"></a>神秘的流量[待补充]</h3><hr><h2 id="FORENSICS"><a href="#FORENSICS" class="headerlink" title="FORENSICS"></a>FORENSICS</h2><p>明明是社工却叫取证？</p><h3 id="OSINT签到"><a href="#OSINT签到" class="headerlink" title="OSINT签到"></a>OSINT签到</h3><p>直接放到谷歌识图，得出答案</p><p>红城湖公园位于海南省<a href="https://baike.baidu.com/item/海口/5775?fromModule=lemma_inlink">海口</a>琼山区府城街道红城湖路北侧</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;海南省<span class="literal">_</span>海口市<span class="literal">_</span>琼山区<span class="literal">_</span>红城湖公园&#125;</span><br></pre></td></tr></table></figure><h3 id="这才是签到"><a href="#这才是签到" class="headerlink" title="这才是签到"></a>这才是签到</h3><p>谷歌识图得出地点是意大利的威尼斯，图片中是一个酒店，但是提示说不酒店，拍摄地点找没有空格的好像找不出来？</p><p>看对话jpg，是说穿过小巷，感觉很多啊。奇怪诶。</p><p>好吧，看了wp发现没有特殊字符是省略空格就可以，那拍摄地点是Gondola Danieli</p><p>穿过小道，我之前一直理解成往左边走，结果是往右？？</p><p>不过提示了比例尺是20m，穷举也是可以的</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">SICTF</span><span class="template-variable">&#123;意大利_威尼斯_GondolaDanieli_ChiesadiSanZaccaria&#125;</span></span><br></pre></td></tr></table></figure><h3 id="真的签到"><a href="#真的签到" class="headerlink" title="真的签到"></a>真的签到</h3><p>显眼的是摩天轮</p><p>谷歌识图找到地点</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;广东省<span class="literal">_</span>珠海市<span class="literal">_</span>斗门区<span class="literal">_</span>大信新都汇&#125;</span><br></pre></td></tr></table></figure><h3 id="树木的压迫"><a href="#树木的压迫" class="headerlink" title="树木的压迫"></a>树木的压迫</h3><p>百度识图只搜索红框部分</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;四川省<span class="literal">_</span>达州市<span class="literal">_</span>通川区<span class="literal">_</span>凤凰大道<span class="number">376</span>号<span class="literal">_</span>达州市体育中心&#125;</span><br></pre></td></tr></table></figure><h3 id="签退"><a href="#签退" class="headerlink" title="签退"></a>签退</h3><p>根据左下角车是右舵，去网上搜索地区</p><blockquote><p>采用右舵，靠左行驶的国家主要是英联邦国家，也就是原来受英国的影响比较大的国家，较大的国家有英国、日本、印度、澳大利亚、南非，等三十多个国家和地区。</p><p>具体都包括：孟加拉、不丹、文莱、东帝汶、印度、印度尼西亚、日本、马来西亚、马尔代夫、尼泊尔、巴基斯坦、新加坡、斯里兰卡、泰国、中国香港地区和澳门地区、爱尔兰、塞浦路斯、马耳他、英国、博茨瓦纳、肯尼亚、莱索托、马拉维、毛里求斯、莫桑比克、纳米比亚、塞舌尔、南非、斯威士兰、坦桑尼亚、乌干达、赞比亚、津巴布韦、安提瓜和巴布达、巴哈马、巴巴多斯、格林纳达、圭亚那、牙买加、圣基茨和尼维斯、圣卢西亚、圣文森特和格林纳丁斯、苏里南、特立尼达和多巴哥、澳大利亚、斐济、基里巴斯、新西兰、巴布亚新几内亚、所罗门群岛、汤加、图瓦卢。</p></blockquote><p>通过直接搜图，发现一个视频<a href="https://www.bilibili.com/video/BV1TF411E7Kj/">【超清南非】第一视角 开车从开普敦机场高速前往市中心 (1080P高清版) 2022.2_哔哩哔哩_bilibili</a></p><p>其中红绿灯一样，建筑也差不多，就猜是开普敦了</p><p>同时裁剪图片搜索右上角建筑，可以发现中间被涂掉的蜘蛛侠。那么地点就是这里了。</p><p>根据这个图片继续查找，发现这个建筑的另一边</p><p><a href="https://www.property24.com/to-rent/cape-town-city-centre/cape-town/western-cape/9138/112975960">Commercial property to rent in Cape Town City Centre - 63 Strand Street - P24-112975960 (property24.com)</a></p><p>得到附近地址<br>strand street</p><p>全景地图观察发现就是这里</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SICTF&#123;南非\_开普敦\_StrandSt_STEERS&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">打到咽气了</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="wp" scheme="https://www.pri87.vip/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF-r18题目复现</title>
    <link href="https://www.pri87.vip/posts/cc56fc8c.html"/>
    <id>https://www.pri87.vip/posts/cc56fc8c.html</id>
    <published>2024-02-16T04:00:39.000Z</published>
    <updated>2024-02-28T12:37:51.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="genshinwishsimulator"><a href="#genshinwishsimulator" class="headerlink" title="genshinwishsimulator"></a>genshinwishsimulator</h3><p>原神抽卡模拟，先开Assembly-CSharp.dll看看，看到</p><p><img src="https://s2.loli.net/2024/02/16/Dnhg4uE96Nky1Hx.png" alt="image-20240216120848553"></p><p>其中input为已知数组。那么我们就需要找bucket是什么了，发现这个方法下面是check,搜索check方法：</p><p><img src="https://s2.loli.net/2024/02/16/oLrf9gustUlB2bM.png" alt="image-20240216121045048"></p><p>可以发现如果check==1，就返回5星，否则其它，那么就需要check返回1才可以</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Check</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span>[] bucket = GachaManager.instance.gachaHistoryBucket.GetBucket();</span><br><span class="line"><span class="keyword">return</span> bucket[<span class="number">0</span>] * <span class="number">40</span> + bucket[<span class="number">1</span>] * <span class="number">65</span> + bucket[<span class="number">2</span>] * <span class="number">-53</span> + bucket[<span class="number">3</span>] * <span class="number">70</span> + bucket[<span class="number">4</span>] * <span class="number">-84</span> + bucket[<span class="number">5</span>] * <span class="number">-38</span> + bucket[<span class="number">6</span>] * <span class="number">94</span> + bucket[<span class="number">7</span>] * <span class="number">-39</span> + bucket[<span class="number">8</span>] * <span class="number">-91</span> + bucket[<span class="number">9</span>] * <span class="number">-35</span> + bucket[<span class="number">10</span>] * <span class="number">54</span> + bucket[<span class="number">11</span>] * <span class="number">17</span> + bucket[<span class="number">12</span>] * <span class="number">45</span> + bucket[<span class="number">13</span>] * <span class="number">92</span> + bucket[<span class="number">14</span>] * <span class="number">-29</span> + bucket[<span class="number">15</span>] * <span class="number">61</span> == <span class="number">3004</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-15</span> + bucket[<span class="number">1</span>] * <span class="number">74</span> + bucket[<span class="number">2</span>] * <span class="number">-89</span> + bucket[<span class="number">3</span>] * <span class="number">-82</span> + bucket[<span class="number">4</span>] * <span class="number">-92</span> + bucket[<span class="number">5</span>] * <span class="number">27</span> + bucket[<span class="number">6</span>] * <span class="number">21</span> + bucket[<span class="number">7</span>] * <span class="number">-24</span> + bucket[<span class="number">8</span>] * <span class="number">-82</span> + bucket[<span class="number">9</span>] * <span class="number">-58</span> + bucket[<span class="number">10</span>] * <span class="number">-36</span> + bucket[<span class="number">11</span>] * <span class="number">64</span> + bucket[<span class="number">12</span>] * <span class="number">-49</span> + bucket[<span class="number">13</span>] * <span class="number">-22</span> + bucket[<span class="number">14</span>] * <span class="number">59</span> + bucket[<span class="number">15</span>] * <span class="number">-47</span> == <span class="number">-674</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">67</span> + bucket[<span class="number">1</span>] * <span class="number">-23</span> + bucket[<span class="number">2</span>] * <span class="number">63</span> + bucket[<span class="number">3</span>] * <span class="number">-38</span> + bucket[<span class="number">4</span>] * <span class="number">-32</span> + bucket[<span class="number">5</span>] * <span class="number">61</span> + bucket[<span class="number">6</span>] * <span class="number">-71</span> + bucket[<span class="number">7</span>] * <span class="number">49</span> + bucket[<span class="number">8</span>] * <span class="number">83</span> + bucket[<span class="number">9</span>] * <span class="number">-92</span> + bucket[<span class="number">10</span>] * <span class="number">-16</span> + bucket[<span class="number">11</span>] * <span class="number">65</span> + bucket[<span class="number">12</span>] * <span class="number">-22</span> + bucket[<span class="number">13</span>] * <span class="number">12</span> + bucket[<span class="number">14</span>] * <span class="number">-85</span> + bucket[<span class="number">15</span>] * <span class="number">74</span> == <span class="number">945</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-49</span> + bucket[<span class="number">1</span>] * <span class="number">48</span> + bucket[<span class="number">2</span>] * <span class="number">-11</span> + bucket[<span class="number">3</span>] * <span class="number">20</span> + bucket[<span class="number">4</span>] * <span class="number">-14</span> + bucket[<span class="number">5</span>] * <span class="number">92</span> + bucket[<span class="number">6</span>] * <span class="number">-19</span> + bucket[<span class="number">7</span>] * <span class="number">32</span> + bucket[<span class="number">8</span>] * <span class="number">64</span> + bucket[<span class="number">9</span>] * <span class="number">-77</span> + bucket[<span class="number">10</span>] * <span class="number">49</span> + bucket[<span class="number">11</span>] * <span class="number">-19</span> + bucket[<span class="number">12</span>] * <span class="number">72</span> + bucket[<span class="number">13</span>] * <span class="number">-64</span> + bucket[<span class="number">14</span>] * <span class="number">85</span> + bucket[<span class="number">15</span>] * <span class="number">54</span> == <span class="number">1721</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">36</span> + bucket[<span class="number">1</span>] * <span class="number">-21</span> + bucket[<span class="number">2</span>] * <span class="number">-59</span> + bucket[<span class="number">3</span>] * <span class="number">-54</span> + bucket[<span class="number">4</span>] * <span class="number">-96</span> + bucket[<span class="number">5</span>] * <span class="number">-81</span> + bucket[<span class="number">6</span>] * <span class="number">-33</span> + bucket[<span class="number">7</span>] * <span class="number">31</span> + bucket[<span class="number">8</span>] * <span class="number">-41</span> + bucket[<span class="number">9</span>] * <span class="number">-70</span> + bucket[<span class="number">10</span>] * <span class="number">-27</span> + bucket[<span class="number">11</span>] * <span class="number">24</span> + bucket[<span class="number">12</span>] * <span class="number">95</span> + bucket[<span class="number">13</span>] * <span class="number">-61</span> + bucket[<span class="number">14</span>] * <span class="number">-17</span> + bucket[<span class="number">15</span>] * <span class="number">-52</span> == <span class="number">-2198</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">78</span> + bucket[<span class="number">1</span>] * <span class="number">-62</span> + bucket[<span class="number">2</span>] * <span class="number">70</span> + bucket[<span class="number">3</span>] * <span class="number">-69</span> + bucket[<span class="number">4</span>] * <span class="number">38</span> + bucket[<span class="number">5</span>] * <span class="number">90</span> + bucket[<span class="number">6</span>] * <span class="number">-52</span> + bucket[<span class="number">7</span>] * <span class="number">41</span> + bucket[<span class="number">8</span>] * <span class="number">63</span> + bucket[<span class="number">9</span>] * <span class="number">-65</span> + bucket[<span class="number">10</span>] * <span class="number">-15</span> + bucket[<span class="number">11</span>] * <span class="number">59</span> + bucket[<span class="number">12</span>] * <span class="number">-31</span> + bucket[<span class="number">13</span>] * <span class="number">54</span> + bucket[<span class="number">14</span>] * <span class="number">33</span> + bucket[<span class="number">15</span>] * <span class="number">-57</span> == <span class="number">-1833</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">56</span> + bucket[<span class="number">1</span>] * <span class="number">75</span> + bucket[<span class="number">2</span>] * <span class="number">71</span> + bucket[<span class="number">3</span>] * <span class="number">78</span> + bucket[<span class="number">4</span>] * <span class="number">-39</span> + bucket[<span class="number">5</span>] * <span class="number">-84</span> + bucket[<span class="number">6</span>] * <span class="number">55</span> + bucket[<span class="number">7</span>] * <span class="number">54</span> + bucket[<span class="number">8</span>] * <span class="number">-12</span> + bucket[<span class="number">9</span>] * <span class="number">-57</span> + bucket[<span class="number">10</span>] * <span class="number">32</span> + bucket[<span class="number">11</span>] * <span class="number">-19</span> + bucket[<span class="number">12</span>] * <span class="number">13</span> + bucket[<span class="number">13</span>] * <span class="number">-83</span> + bucket[<span class="number">14</span>] * <span class="number">11</span> + bucket[<span class="number">15</span>] * <span class="number">-67</span> == <span class="number">829</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">10</span> + bucket[<span class="number">1</span>] * <span class="number">-97</span> + bucket[<span class="number">2</span>] * <span class="number">56</span> + bucket[<span class="number">3</span>] * <span class="number">-61</span> + bucket[<span class="number">4</span>] * <span class="number">45</span> + bucket[<span class="number">5</span>] * <span class="number">-22</span> + bucket[<span class="number">6</span>] * <span class="number">33</span> + bucket[<span class="number">7</span>] * <span class="number">81</span> + bucket[<span class="number">8</span>] * <span class="number">32</span> + bucket[<span class="number">9</span>] * <span class="number">49</span> + bucket[<span class="number">10</span>] * <span class="number">-19</span> + bucket[<span class="number">11</span>] * <span class="number">-18</span> + bucket[<span class="number">12</span>] * <span class="number">80</span> + bucket[<span class="number">13</span>] * <span class="number">-98</span> + bucket[<span class="number">14</span>] * <span class="number">79</span> + bucket[<span class="number">15</span>] * <span class="number">-36</span> == <span class="number">-2551</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">24</span> + bucket[<span class="number">1</span>] * <span class="number">-61</span> + bucket[<span class="number">2</span>] * <span class="number">91</span> + bucket[<span class="number">3</span>] * <span class="number">93</span> + bucket[<span class="number">4</span>] * <span class="number">76</span> + bucket[<span class="number">5</span>] * <span class="number">54</span> + bucket[<span class="number">6</span>] * <span class="number">-33</span> + bucket[<span class="number">7</span>] * <span class="number">-29</span> + bucket[<span class="number">8</span>] * <span class="number">-72</span> + bucket[<span class="number">9</span>] * <span class="number">20</span> + bucket[<span class="number">10</span>] * <span class="number">48</span> + bucket[<span class="number">11</span>] * <span class="number">79</span> + bucket[<span class="number">12</span>] * <span class="number">76</span> + bucket[<span class="number">13</span>] * <span class="number">68</span> + bucket[<span class="number">14</span>] * <span class="number">51</span> + bucket[<span class="number">15</span>] * <span class="number">25</span> == <span class="number">2996</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-83</span> + bucket[<span class="number">1</span>] * <span class="number">-77</span> + bucket[<span class="number">2</span>] * <span class="number">-64</span> + bucket[<span class="number">3</span>] * <span class="number">-38</span> + bucket[<span class="number">4</span>] * <span class="number">-13</span> + bucket[<span class="number">5</span>] * <span class="number">-85</span> + bucket[<span class="number">6</span>] * <span class="number">33</span> + bucket[<span class="number">7</span>] * <span class="number">-76</span> + bucket[<span class="number">8</span>] * <span class="number">27</span> + bucket[<span class="number">9</span>] * <span class="number">14</span> + bucket[<span class="number">10</span>] * <span class="number">-79</span> + bucket[<span class="number">11</span>] * <span class="number">-63</span> + bucket[<span class="number">12</span>] * <span class="number">-78</span> + bucket[<span class="number">13</span>] * <span class="number">53</span> + bucket[<span class="number">14</span>] * <span class="number">-73</span> + bucket[<span class="number">15</span>] * <span class="number">61</span> == <span class="number">-2315</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">84</span> + bucket[<span class="number">1</span>] * <span class="number">-67</span> + bucket[<span class="number">2</span>] * <span class="number">57</span> + bucket[<span class="number">3</span>] * <span class="number">26</span> + bucket[<span class="number">4</span>] * <span class="number">94</span> + bucket[<span class="number">5</span>] * <span class="number">20</span> + bucket[<span class="number">6</span>] * <span class="number">-71</span> + bucket[<span class="number">7</span>] * <span class="number">-88</span> + bucket[<span class="number">8</span>] * <span class="number">-28</span> + bucket[<span class="number">9</span>] * <span class="number">-13</span> + bucket[<span class="number">10</span>] * <span class="number">-40</span> + bucket[<span class="number">11</span>] * <span class="number">76</span> + bucket[<span class="number">12</span>] * <span class="number">-14</span> + bucket[<span class="number">13</span>] * <span class="number">33</span> + bucket[<span class="number">14</span>] * <span class="number">76</span> + bucket[<span class="number">15</span>] * <span class="number">-75</span> == <span class="number">-150</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-60</span> + bucket[<span class="number">1</span>] * <span class="number">88</span> + bucket[<span class="number">2</span>] * <span class="number">-66</span> + bucket[<span class="number">3</span>] * <span class="number">-72</span> + bucket[<span class="number">4</span>] * <span class="number">41</span> + bucket[<span class="number">5</span>] * <span class="number">49</span> + bucket[<span class="number">6</span>] * <span class="number">48</span> + bucket[<span class="number">7</span>] * <span class="number">-77</span> + bucket[<span class="number">8</span>] * <span class="number">-42</span> + bucket[<span class="number">9</span>] * <span class="number">25</span> + bucket[<span class="number">10</span>] * <span class="number">-50</span> + bucket[<span class="number">11</span>] * <span class="number">-84</span> + bucket[<span class="number">12</span>] * <span class="number">40</span> + bucket[<span class="number">13</span>] * <span class="number">50</span> + bucket[<span class="number">14</span>] * <span class="number">-83</span> + bucket[<span class="number">15</span>] * <span class="number">-27</span> == <span class="number">-1919</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-16</span> + bucket[<span class="number">1</span>] * <span class="number">-53</span> + bucket[<span class="number">2</span>] * <span class="number">-21</span> + bucket[<span class="number">3</span>] * <span class="number">-44</span> + bucket[<span class="number">4</span>] * <span class="number">26</span> + bucket[<span class="number">5</span>] * <span class="number">-56</span> + bucket[<span class="number">6</span>] * <span class="number">-90</span> + bucket[<span class="number">7</span>] * <span class="number">-93</span> + bucket[<span class="number">8</span>] * <span class="number">-73</span> + bucket[<span class="number">9</span>] * <span class="number">48</span> + bucket[<span class="number">10</span>] * <span class="number">15</span> + bucket[<span class="number">11</span>] * <span class="number">-43</span> + bucket[<span class="number">12</span>] * <span class="number">-61</span> + bucket[<span class="number">13</span>] * <span class="number">-24</span> + bucket[<span class="number">14</span>] * <span class="number">71</span> + bucket[<span class="number">15</span>] * <span class="number">67</span> == <span class="number">-1199</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">55</span> + bucket[<span class="number">1</span>] * <span class="number">-34</span> + bucket[<span class="number">2</span>] * <span class="number">-22</span> + bucket[<span class="number">3</span>] * <span class="number">60</span> + bucket[<span class="number">4</span>] * <span class="number">93</span> + bucket[<span class="number">5</span>] * <span class="number">-95</span> + bucket[<span class="number">6</span>] * <span class="number">50</span> + bucket[<span class="number">7</span>] * <span class="number">36</span> + bucket[<span class="number">8</span>] * <span class="number">-48</span> + bucket[<span class="number">9</span>] * <span class="number">-26</span> + bucket[<span class="number">10</span>] * <span class="number">-94</span> + bucket[<span class="number">11</span>] * <span class="number">-35</span> + bucket[<span class="number">12</span>] * <span class="number">21</span> + bucket[<span class="number">13</span>] * <span class="number">-27</span> + bucket[<span class="number">14</span>] * <span class="number">91</span> + bucket[<span class="number">15</span>] * <span class="number">-76</span> == <span class="number">-1163</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">64</span> + bucket[<span class="number">1</span>] * <span class="number">-50</span> + bucket[<span class="number">2</span>] * <span class="number">-23</span> + bucket[<span class="number">3</span>] * <span class="number">-70</span> + bucket[<span class="number">4</span>] * <span class="number">-78</span> + bucket[<span class="number">5</span>] * <span class="number">34</span> + bucket[<span class="number">6</span>] * <span class="number">26</span> + bucket[<span class="number">7</span>] * <span class="number">64</span> + bucket[<span class="number">8</span>] * <span class="number">-72</span> + bucket[<span class="number">9</span>] * <span class="number">10</span> + bucket[<span class="number">10</span>] * <span class="number">-96</span> + bucket[<span class="number">11</span>] * <span class="number">61</span> + bucket[<span class="number">12</span>] * <span class="number">-15</span> + bucket[<span class="number">13</span>] * <span class="number">31</span> + bucket[<span class="number">14</span>] * <span class="number">36</span> + bucket[<span class="number">15</span>] * <span class="number">50</span> == <span class="number">-266</span> &amp;&amp; bucket[<span class="number">0</span>] * <span class="number">-27</span> + bucket[<span class="number">1</span>] * <span class="number">86</span> + bucket[<span class="number">2</span>] * <span class="number">-61</span> + bucket[<span class="number">3</span>] * <span class="number">89</span> + bucket[<span class="number">4</span>] * <span class="number">-53</span> + bucket[<span class="number">5</span>] * <span class="number">10</span> + bucket[<span class="number">6</span>] * <span class="number">-42</span> + bucket[<span class="number">7</span>] * <span class="number">92</span> + bucket[<span class="number">8</span>] * <span class="number">-48</span> + bucket[<span class="number">9</span>] * <span class="number">13</span> + bucket[<span class="number">10</span>] * <span class="number">84</span> + bucket[<span class="number">11</span>] * <span class="number">-71</span> + bucket[<span class="number">12</span>] * <span class="number">93</span> + bucket[<span class="number">13</span>] * <span class="number">54</span> + bucket[<span class="number">14</span>] * <span class="number">-69</span> + bucket[<span class="number">15</span>] * <span class="number">-30</span> == <span class="number">892</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试z3:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">bucket = [Int(<span class="string">&#x27;bucket[%d]&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(And(bucket[<span class="number">0</span>] * <span class="number">40</span> + bucket[<span class="number">1</span>] * <span class="number">65</span> + bucket[<span class="number">2</span>] * -<span class="number">53</span> + bucket[<span class="number">3</span>] * <span class="number">70</span> + bucket[<span class="number">4</span>] * -<span class="number">84</span> + bucket[<span class="number">5</span>] * -<span class="number">38</span> + bucket[<span class="number">6</span>] * <span class="number">94</span> + bucket[<span class="number">7</span>] * -<span class="number">39</span> + bucket[<span class="number">8</span>] * -<span class="number">91</span> + bucket[<span class="number">9</span>] * -<span class="number">35</span> + bucket[<span class="number">10</span>] * <span class="number">54</span> + bucket[<span class="number">11</span>] * <span class="number">17</span> + bucket[<span class="number">12</span>] * <span class="number">45</span> + bucket[<span class="number">13</span>] * <span class="number">92</span> + bucket[<span class="number">14</span>] * -<span class="number">29</span> + bucket[<span class="number">15</span>] * <span class="number">61</span> == <span class="number">3004</span> , bucket[<span class="number">0</span>] * -<span class="number">15</span> + bucket[<span class="number">1</span>] * <span class="number">74</span> + bucket[<span class="number">2</span>] * -<span class="number">89</span> + bucket[<span class="number">3</span>] * -<span class="number">82</span> + bucket[<span class="number">4</span>] * -<span class="number">92</span> + bucket[<span class="number">5</span>] * <span class="number">27</span> + bucket[<span class="number">6</span>] * <span class="number">21</span> + bucket[<span class="number">7</span>] * -<span class="number">24</span> + bucket[<span class="number">8</span>] * -<span class="number">82</span> + bucket[<span class="number">9</span>] * -<span class="number">58</span> + bucket[<span class="number">10</span>] * -<span class="number">36</span> + bucket[<span class="number">11</span>] * <span class="number">64</span> + bucket[<span class="number">12</span>] * -<span class="number">49</span> + bucket[<span class="number">13</span>] * -<span class="number">22</span> + bucket[<span class="number">14</span>] * <span class="number">59</span> + bucket[<span class="number">15</span>] * -<span class="number">47</span> == -<span class="number">674</span> , bucket[<span class="number">0</span>] * <span class="number">67</span> + bucket[<span class="number">1</span>] * -<span class="number">23</span> + bucket[<span class="number">2</span>] * <span class="number">63</span> + bucket[<span class="number">3</span>] * -<span class="number">38</span> + bucket[<span class="number">4</span>] * -<span class="number">32</span> + bucket[<span class="number">5</span>] * <span class="number">61</span> + bucket[<span class="number">6</span>] * -<span class="number">71</span> + bucket[<span class="number">7</span>] * <span class="number">49</span> + bucket[<span class="number">8</span>] * <span class="number">83</span> + bucket[<span class="number">9</span>] * -<span class="number">92</span> + bucket[<span class="number">10</span>] * -<span class="number">16</span> + bucket[<span class="number">11</span>] * <span class="number">65</span> + bucket[<span class="number">12</span>] * -<span class="number">22</span> + bucket[<span class="number">13</span>] * <span class="number">12</span> + bucket[<span class="number">14</span>] * -<span class="number">85</span> + bucket[<span class="number">15</span>] * <span class="number">74</span> == <span class="number">945</span> , bucket[<span class="number">0</span>] * -<span class="number">49</span> + bucket[<span class="number">1</span>] * <span class="number">48</span> + bucket[<span class="number">2</span>] * -<span class="number">11</span> + bucket[<span class="number">3</span>] * <span class="number">20</span> + bucket[<span class="number">4</span>] * -<span class="number">14</span> + bucket[<span class="number">5</span>] * <span class="number">92</span> + bucket[<span class="number">6</span>] * -<span class="number">19</span> + bucket[<span class="number">7</span>] * <span class="number">32</span> + bucket[<span class="number">8</span>] * <span class="number">64</span> + bucket[<span class="number">9</span>] * -<span class="number">77</span> + bucket[<span class="number">10</span>] * <span class="number">49</span> + bucket[<span class="number">11</span>] * -<span class="number">19</span> + bucket[<span class="number">12</span>] * <span class="number">72</span> + bucket[<span class="number">13</span>] * -<span class="number">64</span> + bucket[<span class="number">14</span>] * <span class="number">85</span> + bucket[<span class="number">15</span>] * <span class="number">54</span> == <span class="number">1721</span> , bucket[<span class="number">0</span>] * <span class="number">36</span> + bucket[<span class="number">1</span>] * -<span class="number">21</span> + bucket[<span class="number">2</span>] * -<span class="number">59</span> + bucket[<span class="number">3</span>] * -<span class="number">54</span> + bucket[<span class="number">4</span>] * -<span class="number">96</span> + bucket[<span class="number">5</span>] * -<span class="number">81</span> + bucket[<span class="number">6</span>] * -<span class="number">33</span> + bucket[<span class="number">7</span>] * <span class="number">31</span> + bucket[<span class="number">8</span>] * -<span class="number">41</span> + bucket[<span class="number">9</span>] * -<span class="number">70</span> + bucket[<span class="number">10</span>] * -<span class="number">27</span> + bucket[<span class="number">11</span>] * <span class="number">24</span> + bucket[<span class="number">12</span>] * <span class="number">95</span> + bucket[<span class="number">13</span>] * -<span class="number">61</span> + bucket[<span class="number">14</span>] * -<span class="number">17</span> + bucket[<span class="number">15</span>] * -<span class="number">52</span> == -<span class="number">2198</span> , bucket[<span class="number">0</span>] * <span class="number">78</span> + bucket[<span class="number">1</span>] * -<span class="number">62</span> + bucket[<span class="number">2</span>] * <span class="number">70</span> + bucket[<span class="number">3</span>] * -<span class="number">69</span> + bucket[<span class="number">4</span>] * <span class="number">38</span> + bucket[<span class="number">5</span>] * <span class="number">90</span> + bucket[<span class="number">6</span>] * -<span class="number">52</span> + bucket[<span class="number">7</span>] * <span class="number">41</span> + bucket[<span class="number">8</span>] * <span class="number">63</span> + bucket[<span class="number">9</span>] * -<span class="number">65</span> + bucket[<span class="number">10</span>] * -<span class="number">15</span> + bucket[<span class="number">11</span>] * <span class="number">59</span> + bucket[<span class="number">12</span>] * -<span class="number">31</span> + bucket[<span class="number">13</span>] * <span class="number">54</span> + bucket[<span class="number">14</span>] * <span class="number">33</span> + bucket[<span class="number">15</span>] * -<span class="number">57</span> == -<span class="number">1833</span> , bucket[<span class="number">0</span>] * <span class="number">56</span> + bucket[<span class="number">1</span>] * <span class="number">75</span> + bucket[<span class="number">2</span>] * <span class="number">71</span> + bucket[<span class="number">3</span>] * <span class="number">78</span> + bucket[<span class="number">4</span>] * -<span class="number">39</span> + bucket[<span class="number">5</span>] * -<span class="number">84</span> + bucket[<span class="number">6</span>] * <span class="number">55</span> + bucket[<span class="number">7</span>] * <span class="number">54</span> + bucket[<span class="number">8</span>] * -<span class="number">12</span> + bucket[<span class="number">9</span>] * -<span class="number">57</span> + bucket[<span class="number">10</span>] * <span class="number">32</span> + bucket[<span class="number">11</span>] * -<span class="number">19</span> + bucket[<span class="number">12</span>] * <span class="number">13</span> + bucket[<span class="number">13</span>] * -<span class="number">83</span> + bucket[<span class="number">14</span>] * <span class="number">11</span> + bucket[<span class="number">15</span>] * -<span class="number">67</span> == <span class="number">829</span> , bucket[<span class="number">0</span>] * <span class="number">10</span> + bucket[<span class="number">1</span>] * -<span class="number">97</span> + bucket[<span class="number">2</span>] * <span class="number">56</span> + bucket[<span class="number">3</span>] * -<span class="number">61</span> + bucket[<span class="number">4</span>] * <span class="number">45</span> + bucket[<span class="number">5</span>] * -<span class="number">22</span> + bucket[<span class="number">6</span>] * <span class="number">33</span> + bucket[<span class="number">7</span>] * <span class="number">81</span> + bucket[<span class="number">8</span>] * <span class="number">32</span> + bucket[<span class="number">9</span>] * <span class="number">49</span> + bucket[<span class="number">10</span>] * -<span class="number">19</span> + bucket[<span class="number">11</span>] * -<span class="number">18</span> + bucket[<span class="number">12</span>] * <span class="number">80</span> + bucket[<span class="number">13</span>] * -<span class="number">98</span> + bucket[<span class="number">14</span>] * <span class="number">79</span> + bucket[<span class="number">15</span>] * -<span class="number">36</span> == -<span class="number">2551</span> , bucket[<span class="number">0</span>] * <span class="number">24</span> + bucket[<span class="number">1</span>] * -<span class="number">61</span> + bucket[<span class="number">2</span>] * <span class="number">91</span> + bucket[<span class="number">3</span>] * <span class="number">93</span> + bucket[<span class="number">4</span>] * <span class="number">76</span> + bucket[<span class="number">5</span>] * <span class="number">54</span> + bucket[<span class="number">6</span>] * -<span class="number">33</span> + bucket[<span class="number">7</span>] * -<span class="number">29</span> + bucket[<span class="number">8</span>] * -<span class="number">72</span> + bucket[<span class="number">9</span>] * <span class="number">20</span> + bucket[<span class="number">10</span>] * <span class="number">48</span> + bucket[<span class="number">11</span>] * <span class="number">79</span> + bucket[<span class="number">12</span>] * <span class="number">76</span> + bucket[<span class="number">13</span>] * <span class="number">68</span> + bucket[<span class="number">14</span>] * <span class="number">51</span> + bucket[<span class="number">15</span>] * <span class="number">25</span> == <span class="number">2996</span> , bucket[<span class="number">0</span>] * -<span class="number">83</span> + bucket[<span class="number">1</span>] * -<span class="number">77</span> + bucket[<span class="number">2</span>] * -<span class="number">64</span> + bucket[<span class="number">3</span>] * -<span class="number">38</span> + bucket[<span class="number">4</span>] * -<span class="number">13</span> + bucket[<span class="number">5</span>] * -<span class="number">85</span> + bucket[<span class="number">6</span>] * <span class="number">33</span> + bucket[<span class="number">7</span>] * -<span class="number">76</span> + bucket[<span class="number">8</span>] * <span class="number">27</span> + bucket[<span class="number">9</span>] * <span class="number">14</span> + bucket[<span class="number">10</span>] * -<span class="number">79</span> + bucket[<span class="number">11</span>] * -<span class="number">63</span> + bucket[<span class="number">12</span>] * -<span class="number">78</span> + bucket[<span class="number">13</span>] * <span class="number">53</span> + bucket[<span class="number">14</span>] * -<span class="number">73</span> + bucket[<span class="number">15</span>] * <span class="number">61</span> == -<span class="number">2315</span> , bucket[<span class="number">0</span>] * <span class="number">84</span> + bucket[<span class="number">1</span>] * -<span class="number">67</span> + bucket[<span class="number">2</span>] * <span class="number">57</span> + bucket[<span class="number">3</span>] * <span class="number">26</span> + bucket[<span class="number">4</span>] * <span class="number">94</span> + bucket[<span class="number">5</span>] * <span class="number">20</span> + bucket[<span class="number">6</span>] * -<span class="number">71</span> + bucket[<span class="number">7</span>] * -<span class="number">88</span> + bucket[<span class="number">8</span>] * -<span class="number">28</span> + bucket[<span class="number">9</span>] * -<span class="number">13</span> + bucket[<span class="number">10</span>] * -<span class="number">40</span> + bucket[<span class="number">11</span>] * <span class="number">76</span> + bucket[<span class="number">12</span>] * -<span class="number">14</span> + bucket[<span class="number">13</span>] * <span class="number">33</span> + bucket[<span class="number">14</span>] * <span class="number">76</span> + bucket[<span class="number">15</span>] * -<span class="number">75</span> == -<span class="number">150</span> , bucket[<span class="number">0</span>] * -<span class="number">60</span> + bucket[<span class="number">1</span>] * <span class="number">88</span> + bucket[<span class="number">2</span>] * -<span class="number">66</span> + bucket[<span class="number">3</span>] * -<span class="number">72</span> + bucket[<span class="number">4</span>] * <span class="number">41</span> + bucket[<span class="number">5</span>] * <span class="number">49</span> + bucket[<span class="number">6</span>] * <span class="number">48</span> + bucket[<span class="number">7</span>] * -<span class="number">77</span> + bucket[<span class="number">8</span>] * -<span class="number">42</span> + bucket[<span class="number">9</span>] * <span class="number">25</span> + bucket[<span class="number">10</span>] * -<span class="number">50</span> + bucket[<span class="number">11</span>] * -<span class="number">84</span> + bucket[<span class="number">12</span>] * <span class="number">40</span> + bucket[<span class="number">13</span>] * <span class="number">50</span> + bucket[<span class="number">14</span>] * -<span class="number">83</span> + bucket[<span class="number">15</span>] * -<span class="number">27</span> == -<span class="number">1919</span> , bucket[<span class="number">0</span>] * -<span class="number">16</span> + bucket[<span class="number">1</span>] * -<span class="number">53</span> + bucket[<span class="number">2</span>] * -<span class="number">21</span> + bucket[<span class="number">3</span>] * -<span class="number">44</span> + bucket[<span class="number">4</span>] * <span class="number">26</span> + bucket[<span class="number">5</span>] * -<span class="number">56</span> + bucket[<span class="number">6</span>] * -<span class="number">90</span> + bucket[<span class="number">7</span>] * -<span class="number">93</span> + bucket[<span class="number">8</span>] * -<span class="number">73</span> + bucket[<span class="number">9</span>] * <span class="number">48</span> + bucket[<span class="number">10</span>] * <span class="number">15</span> + bucket[<span class="number">11</span>] * -<span class="number">43</span> + bucket[<span class="number">12</span>] * -<span class="number">61</span> + bucket[<span class="number">13</span>] * -<span class="number">24</span> + bucket[<span class="number">14</span>] * <span class="number">71</span> + bucket[<span class="number">15</span>] * <span class="number">67</span> == -<span class="number">1199</span> , bucket[<span class="number">0</span>] * <span class="number">55</span> + bucket[<span class="number">1</span>] * -<span class="number">34</span> + bucket[<span class="number">2</span>] * -<span class="number">22</span> + bucket[<span class="number">3</span>] * <span class="number">60</span> + bucket[<span class="number">4</span>] * <span class="number">93</span> + bucket[<span class="number">5</span>] * -<span class="number">95</span> + bucket[<span class="number">6</span>] * <span class="number">50</span> + bucket[<span class="number">7</span>] * <span class="number">36</span> + bucket[<span class="number">8</span>] * -<span class="number">48</span> + bucket[<span class="number">9</span>] * -<span class="number">26</span> + bucket[<span class="number">10</span>] * -<span class="number">94</span> + bucket[<span class="number">11</span>] * -<span class="number">35</span> + bucket[<span class="number">12</span>] * <span class="number">21</span> + bucket[<span class="number">13</span>] * -<span class="number">27</span> + bucket[<span class="number">14</span>] * <span class="number">91</span> + bucket[<span class="number">15</span>] * -<span class="number">76</span> == -<span class="number">1163</span> , bucket[<span class="number">0</span>] * <span class="number">64</span> + bucket[<span class="number">1</span>] * -<span class="number">50</span> + bucket[<span class="number">2</span>] * -<span class="number">23</span> + bucket[<span class="number">3</span>] * -<span class="number">70</span> + bucket[<span class="number">4</span>] * -<span class="number">78</span> + bucket[<span class="number">5</span>] * <span class="number">34</span> + bucket[<span class="number">6</span>] * <span class="number">26</span> + bucket[<span class="number">7</span>] * <span class="number">64</span> + bucket[<span class="number">8</span>] * -<span class="number">72</span> + bucket[<span class="number">9</span>] * <span class="number">10</span> + bucket[<span class="number">10</span>] * -<span class="number">96</span> + bucket[<span class="number">11</span>] * <span class="number">61</span> + bucket[<span class="number">12</span>] * -<span class="number">15</span> + bucket[<span class="number">13</span>] * <span class="number">31</span> + bucket[<span class="number">14</span>] * <span class="number">36</span> + bucket[<span class="number">15</span>] * <span class="number">50</span> == -<span class="number">266</span> , bucket[<span class="number">0</span>] * -<span class="number">27</span> + bucket[<span class="number">1</span>] * <span class="number">86</span> + bucket[<span class="number">2</span>] * -<span class="number">61</span> + bucket[<span class="number">3</span>] * <span class="number">89</span> + bucket[<span class="number">4</span>] * -<span class="number">53</span> + bucket[<span class="number">5</span>] * <span class="number">10</span> + bucket[<span class="number">6</span>] * -<span class="number">42</span> + bucket[<span class="number">7</span>] * <span class="number">92</span> + bucket[<span class="number">8</span>] * -<span class="number">48</span> + bucket[<span class="number">9</span>] * <span class="number">13</span> + bucket[<span class="number">10</span>] * <span class="number">84</span> + bucket[<span class="number">11</span>] * -<span class="number">71</span> + bucket[<span class="number">12</span>] * <span class="number">93</span> + bucket[<span class="number">13</span>] * <span class="number">54</span> + bucket[<span class="number">14</span>] * -<span class="number">69</span> + bucket[<span class="number">15</span>] * -<span class="number">30</span> == <span class="number">892</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;this.bucket[%d] = %s;&#x27;</span> % (i, m[bucket[i]]))</span><br><span class="line">       <span class="comment"># print(&#x27;%s,&#x27;% m[bucket[i]],end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#this.bucket[0] = 1;</span></span><br><span class="line"><span class="comment">#this.bucket[1] = 14;</span></span><br><span class="line"><span class="comment">#this.bucket[2] = 1;</span></span><br><span class="line"><span class="comment">#this.bucket[3] = 17;</span></span><br><span class="line"><span class="comment">#this.bucket[4] = 2;</span></span><br><span class="line"><span class="comment">#this.bucket[5] = 1;</span></span><br><span class="line"><span class="comment">#this.bucket[6] = 1;</span></span><br><span class="line"><span class="comment">#this.bucket[7] = 0;</span></span><br><span class="line"><span class="comment">#this.bucket[8] = 2;</span></span><br><span class="line"><span class="comment">#this.bucket[9] = 4;</span></span><br><span class="line"><span class="comment">#this.bucket[10] = 1;</span></span><br><span class="line"><span class="comment">#this.bucket[11] = 17;</span></span><br><span class="line"><span class="comment">#this.bucket[12] = 2;</span></span><br><span class="line"><span class="comment">#this.bucket[13] = 0;</span></span><br><span class="line"><span class="comment">#this.bucket[14] = 2;</span></span><br><span class="line"><span class="comment">#this.bucket[15] = 16;</span></span><br></pre></td></tr></table></figure><p>那么在int[] bucket = GachaManager.instance.gachaHistoryBucket.GetBucket();中直接写入bucket的值，右键-&gt;编辑方法-&gt;写入上面的内容-&gt;编译-&gt;上面工具栏保存所有-&gt;打开主程序-&gt;出金</p><p><img src="https://s2.loli.net/2024/02/16/q9Az37dHfU52bsl.png" alt="image-20240216121732007"></p><h3 id="EzADVM"><a href="#EzADVM" class="headerlink" title="EzADVM"></a>EzADVM</h3><p>这个是个安卓vm，jadx打开，然后打开main_activity,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CheckClick</span><span class="params">(View a)</span> &#123;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="built_in">this</span>.binding.sampleText;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">flagText</span> <span class="operator">=</span> <span class="built_in">this</span>.binding.flagtext;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flagstring</span> <span class="operator">=</span> flagText.getText().toString();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Right!&quot;</span>.equals(stringFromJNI(flagstring))) &#123;</span><br><span class="line">            tv.setText(<span class="string">&quot;Right!&quot;</span>);</span><br><span class="line">            tv.setTextColor(-<span class="number">16711936</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>看到有stringFromJNI(flagstring)，去找函数原型，没找到，应该在库里。</p><p>用apktool反编译出源代码。打开so文件</p><p>重点是这些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">now_num = <span class="number">0</span>;</span><br><span class="line">  i = <span class="number">1</span>;</span><br><span class="line">  used_char = _JNIEnv::GetStringUTFChars(in, a3, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !i++ )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_29:</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;(v14, <span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">        v7 = (<span class="type">const</span> <span class="type">char</span> *)sub_20F50(v14);</span><br><span class="line">        v13 = _JNIEnv::NewStringUTF(in, v7);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v14);</span><br><span class="line">        <span class="keyword">return</span> v13;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( code[i] != <span class="number">0x21</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      __strcpy_chk(input, used_char, <span class="number">1024LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( code[i] == <span class="number">0xFF</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">    <span class="keyword">if</span> ( code[i] == <span class="number">0x88</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( code[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xA1</span>u:</span><br><span class="line">        s[now_num - <span class="number">1</span>] = or_not_num &amp; or_num;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xC3</span>u:</span><br><span class="line">        or_num = b1 | b2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xB2</span>u:</span><br><span class="line">        not_1 = ~b1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xE5</span>u:</span><br><span class="line">        not_2 = ~b2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xF1</span>u:</span><br><span class="line">        b1 = input[now_num];</span><br><span class="line">        b2 = input[++now_num];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xD4</span>u:</span><br><span class="line">        or_not_num = not_2 | not_1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBF</span>u:</span><br><span class="line">        i_form = now_num++;</span><br><span class="line">        save[<span class="number">0</span>] = s[i_form];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x99</span>u:</span><br><span class="line">        now_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBB</span>u:</span><br><span class="line">        s[now_num - <span class="number">1</span>] = now_num + save[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;last, s, <span class="number">0x20</span>uLL) )</span><br></pre></td></tr></table></figure><p>输入用来初始化input了，所以相当于是用指令码对input加密，最后得到last</p><p>以及一开始有一个循环只有当code[i]==0先1时才会执行初始化，所以只需要匹配合理的指令即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">opcode = [<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, </span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, </span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, </span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, </span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, </span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, </span><br><span class="line">        <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x99</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, </span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x99</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x53</span>, </span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x88</span>, <span class="number">0xFF</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> code <span class="keyword">in</span> opcode:</span><br><span class="line">    <span class="keyword">match</span> code:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xa1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;last[now_num - 1] = or_not_num &amp; or_num&quot;</span> )</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xc3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;or_num = b1 | b2&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xb2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not_1 = ~b1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xe5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not_2 = ~b2&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xf1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b1 = input[now_num]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num += 1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b2 = input[now_num]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xd4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;or_not_num = not_2 | not_1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xbf</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;save = last[now_num]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num+=1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x99</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num = 0&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xbb</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;last[now_num-1] = now_num + save - 1&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大致是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0</span>]*<span class="number">100</span></span><br><span class="line">now_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line"></span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">now_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">now_num = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后化简逆向：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">last = [<span class="number">0x1D</span>, <span class="number">0x01</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x16</span>, <span class="number">0x42</span>, <span class="number">0x39</span>, <span class="number">0x0F</span>, </span><br><span class="line">        <span class="number">0x38</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, <span class="number">0x31</span>, <span class="number">0x28</span>, <span class="number">0x38</span>, <span class="number">0x67</span>, <span class="number">0x6E</span>, </span><br><span class="line">        <span class="number">0x1B</span>, <span class="number">0x61</span>, <span class="number">0x7C</span>, <span class="number">0x24</span>, <span class="number">0x1F</span>, <span class="number">0x47</span>, <span class="number">0x44</span>, <span class="number">0x81</span>, </span><br><span class="line">        <span class="number">0x6A</span>, <span class="number">0x2C</span>, <span class="number">0x6D</span>, <span class="number">0x2B</span>, <span class="number">0x2C</span>, <span class="number">0x2D</span>, <span class="number">0x6A</span>, <span class="number">0x9C</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># last = [0]*100</span></span><br><span class="line"><span class="comment"># now_num = 0</span></span><br><span class="line"><span class="comment"># for i in range(32):</span></span><br><span class="line"><span class="comment">#     b1 = input[now_num]</span></span><br><span class="line"><span class="comment">#     now_num += 1</span></span><br><span class="line"><span class="comment">#     b2 = input[now_num]</span></span><br><span class="line"><span class="comment">#     or_num = b1 | b2</span></span><br><span class="line"><span class="comment">#     not_1 = ~b1</span></span><br><span class="line"><span class="comment">#     not_2 = ~b2</span></span><br><span class="line"><span class="comment">#     or_not_num = not_2 | not_1</span></span><br><span class="line"><span class="comment">#     last[now_num - 1] = or_not_num &amp; or_num</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now_num = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(32):</span></span><br><span class="line"><span class="comment">#     save = last[now_num]</span></span><br><span class="line"><span class="comment">#     now_num+=1</span></span><br><span class="line"><span class="comment">#     last[now_num-1] = now_num + save - 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    last[i]-=i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    last[i]^=last[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">pl(last)</span><br><span class="line"><span class="comment">#NSSCTF&#123;H@ppy_Ch1ne5_NEwY3ar!1!1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="过年来下棋"><a href="#过年来下棋" class="headerlink" title="过年来下棋"></a>过年来下棋</h3><p>XXVAF AVXAX DXFVX DXDVA XAGV</p><p>很明显是棋盘密码ADFGVX</p><p>根据密文段数发现是key为5位</p><p>写脚本穷举：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">4h9343nse2r4</span>: abcde</span><br><span class="line"><span class="attribute">4gl393mgewr8</span>: abced</span><br><span class="line"><span class="attribute">4h9343ise2rf</span>: abdce</span><br><span class="line"><span class="attribute">44lz934mbwr2</span>: abdec</span><br><span class="line"><span class="attribute">4bl393cgd2r3</span>: abecd</span><br><span class="line"><span class="attribute">4fl3l3fmdkr2</span>: abedc</span><br><span class="line"><span class="attribute">5b98405sy2r4</span>: acbde</span><br><span class="line"><span class="attribute">5al8904gywr8</span>: acbed</span><br><span class="line"><span class="attribute">5g99y0ls2erf</span>: acdbe</span><br><span class="line"><span class="attribute">94fh8344nsq2</span>: acdeb</span><br><span class="line"><span class="attribute">5al930fg1er3</span>: acebd</span><br><span class="line"><span class="attribute">9fflk3f4pgq2</span>: acedb</span><br><span class="line"><span class="attribute">5b984z6sy2m9</span>: adbce</span><br><span class="line"><span class="attribute">9alk934mgwq8</span>: adbec</span><br><span class="line"><span class="attribute">5g99yzrs2em9</span>: adcbe</span><br><span class="line"><span class="attribute">94fh8344isq2</span>: adceb</span><br><span class="line"><span class="attribute">9all33fmjeq3</span>: adebc</span><br><span class="line"><span class="attribute">9fflk3f4jmq2</span>: adecb</span><br><span class="line"><span class="attribute">4bl89y6gs2q9</span>: aebcd</span><br><span class="line"><span class="attribute">4fl8ly9mskq8</span>: aebdc</span><br><span class="line"><span class="attribute">4gl93yrgweq9</span>: aecbd</span><br><span class="line"><span class="attribute">49f5ky94ugq2</span>: aecdb</span><br><span class="line"><span class="attribute">44l53y9mteq3</span>: aedbc</span><br><span class="line"><span class="attribute">49f5ky94tmq2</span>: aedcb</span><br><span class="line"><span class="attribute">fh8948nse264</span>: bacde</span><br><span class="line"><span class="attribute">fgk998mgew68</span>: baced</span><br><span class="line"><span class="attribute">fh8948ise26f</span>: badce</span><br><span class="line"><span class="attribute">f4k5984mbw62</span>: badec</span><br><span class="line"><span class="attribute">fbk998cgd263</span>: baecd</span><br><span class="line"><span class="attribute">ffk9l8fmdk62</span>: baedc</span><br><span class="line"><span class="attribute">b58946zsy29m</span>: bcade</span><br><span class="line"><span class="attribute">b4k996ygyw9q</span>: bcaed</span><br><span class="line"><span class="attribute">bl8946ks2e9c</span>: bcdae</span><br><span class="line"><span class="attribute">r44h9343nse2</span>: bcdea</span><br><span class="line"><span class="attribute">bfk996eg1e90</span>: bcead</span><br><span class="line"><span class="attribute">rf4ll3f3pge2</span>: bceda</span><br><span class="line"><span class="attribute">b589450sy24r</span>: bdace</span><br><span class="line"><span class="attribute">f4kl99ymgw8q</span>: bdaec</span><br><span class="line"><span class="attribute">bl8945qs2e46</span>: bdcae</span><br><span class="line"><span class="attribute">r44h9343ise2</span>: bdcea</span><br><span class="line"><span class="attribute">ffkl99emje80</span>: bdeac</span><br><span class="line"><span class="attribute">rf4ll3f3jme2</span>: bdeca</span><br><span class="line"><span class="attribute">a5k9940gs28r</span>: beacd</span><br><span class="line"><span class="attribute">a9k9l43msk8q</span>: beadc</span><br><span class="line"><span class="attribute">alk994qgwe86</span>: becad</span><br><span class="line"><span class="attribute">m945ly93uge2</span>: becda</span><br><span class="line"><span class="attribute">a9k5948mte80</span>: bedac</span><br><span class="line"><span class="attribute">m945ly93tme2</span>: bedca</span><br><span class="line"><span class="attribute">lb984q5wa264</span>: cabde</span><br><span class="line"><span class="attribute">lal89q4kaw68</span>: cabed</span><br><span class="line"><span class="attribute">lg99yqlwee6f</span>: cadbe</span><br><span class="line"><span class="attribute">94b58846bs02</span>: cadeb</span><br><span class="line"><span class="attribute">lal93qfkde63</span>: caebd</span><br><span class="line"><span class="attribute">9fb9k8f6dg02</span>: caedb</span><br><span class="line"><span class="attribute">g5934rzwa29m</span>: cbade</span><br><span class="line"><span class="attribute">g4l39rykaw9q</span>: cbaed</span><br><span class="line"><span class="attribute">gl934rkwee9c</span>: cbdae</span><br><span class="line"><span class="attribute">645b98405sy2</span>: cbdea</span><br><span class="line"><span class="attribute">gfl39rekde90</span>: cbead</span><br><span class="line"><span class="attribute">6f5fl8f07gy2</span>: cbeda</span><br><span class="line"><span class="attribute">h499yn3wye4r</span>: cdabe</span><br><span class="line"><span class="attribute">94bl89y6gs2q</span>: cdaeb</span><br><span class="line"><span class="attribute">hf984n8wye46</span>: cdbae</span><br><span class="line"><span class="attribute">9m5g99y0ls2e</span>: cdbea</span><br><span class="line"><span class="attribute">9fbl89e6ja20</span>: cdeab</span><br><span class="line"><span class="attribute">9c5lf9e0j42y</span>: cdeba</span><br><span class="line"><span class="attribute">g4l93m3kse8r</span>: ceabd</span><br><span class="line"><span class="attribute">49b9k436sg2q</span>: ceadb</span><br><span class="line"><span class="attribute">gfl89m8kse86</span>: cebad</span><br><span class="line"><span class="attribute">4r54l430xg2e</span>: cebda</span><br><span class="line"><span class="attribute">49b58486ta20</span>: cedab</span><br><span class="line"><span class="attribute">4655f480t42y</span>: cedba</span><br><span class="line"><span class="attribute">lb984k6wa2c9</span>: dabce</span><br><span class="line"><span class="attribute">9ah8984naw08</span>: dabec</span><br><span class="line"><span class="attribute">lg99ykrweec9</span>: dacbe</span><br><span class="line"><span class="attribute">94b58845cs02</span>: daceb</span><br><span class="line"><span class="attribute">9ah938fnde03</span>: daebc</span><br><span class="line"><span class="attribute">9fb9k8f5dm02</span>: daecb</span><br><span class="line"><span class="attribute">g5934l0wa2fr</span>: dbace</span><br><span class="line"><span class="attribute">44h399ynaw3q</span>: dbaec</span><br><span class="line"><span class="attribute">gl934lqweef6</span>: dbcae</span><br><span class="line"><span class="attribute">645b984z6sy2</span>: dbcea</span><br><span class="line"><span class="attribute">4fh399ende30</span>: dbeac</span><br><span class="line"><span class="attribute">6f5fl8fz7my2</span>: dbeca</span><br><span class="line"><span class="attribute">h499yi3wyefr</span>: dcabe</span><br><span class="line"><span class="attribute">94bl89y5ms2q</span>: dcaeb</span><br><span class="line"><span class="attribute">hf984i8wyef6</span>: dcbae</span><br><span class="line"><span class="attribute">9m5g99yzrs2e</span>: dcbea</span><br><span class="line"><span class="attribute">9fbl89e5pa20</span>: dceab</span><br><span class="line"><span class="attribute">9c5lf9ezp42y</span>: dceba</span><br><span class="line"><span class="attribute">44h9343nse2r</span>: deabc</span><br><span class="line"><span class="attribute">49b9k435sm2q</span>: deacb</span><br><span class="line"><span class="attribute">4fh8948nse26</span>: debac</span><br><span class="line"><span class="attribute">4r54l43zxm2e</span>: debca</span><br><span class="line"><span class="attribute">49b58485ua20</span>: decab</span><br><span class="line"><span class="attribute">4655f48zu42y</span>: decba</span><br><span class="line"><span class="attribute">fbl89e6ja209</span>: eabcd</span><br><span class="line"><span class="attribute">ffl8le9pak08</span>: eabdc</span><br><span class="line"><span class="attribute">fgl93erjee09</span>: eacbd</span><br><span class="line"><span class="attribute">f9f5ke97cg02</span>: eacdb</span><br><span class="line"><span class="attribute">f4l53e9pbe03</span>: eadbc</span><br><span class="line"><span class="attribute">f9f5ke97bm02</span>: eadcb</span><br><span class="line"><span class="attribute">a5l39f0ja23r</span>: ebacd</span><br><span class="line"><span class="attribute">a9l3lf3pak3q</span>: ebadc</span><br><span class="line"><span class="attribute">all39fqjee36</span>: ebcad</span><br><span class="line"><span class="attribute">c99ble916gy2</span>: ebcda</span><br><span class="line"><span class="attribute">a9lz9f8pbe30</span>: ebdac</span><br><span class="line"><span class="attribute">c99ble915my2</span>: ebdca</span><br><span class="line"><span class="attribute">b4l93c3jye3r</span>: ecabd</span><br><span class="line"><span class="attribute">f9flkf37mg2q</span>: ecadb</span><br><span class="line"><span class="attribute">bfl89c8jye36</span>: ecbad</span><br><span class="line"><span class="attribute">fr9glf31rg2e</span>: ecbda</span><br><span class="line"><span class="attribute">f9fh8f87na20</span>: ecdab</span><br><span class="line"><span class="attribute">f69hff81n42y</span>: ecdba</span><br><span class="line"><span class="attribute">f4ll3f3pge2r</span>: edabc</span><br><span class="line"><span class="attribute">f9flkf37gm2q</span>: edacb</span><br><span class="line"><span class="attribute">fflk9f8pge26</span>: edbac</span><br><span class="line"><span class="attribute">fr9glf31lm2e</span>: edbca</span><br><span class="line"><span class="attribute">f9fh8f87ia20</span>: edcab</span><br><span class="line"><span class="attribute">f69hff81i42y</span>: edcba</span><br></pre></td></tr></table></figure><p>总不可能让我一个一个输吧。。看到题目</p><blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">新年快乐呀！来一起下象棋吧！我都摆好咯~ 祝愿大家在新的一年里 lucky！flag格式：NSSCTF&#123;<span class="strong">**字母小写**</span>&#125;</span><br></pre></td></tr></table></figure></blockquote><p>唯一的五位key盲猜lucky，那么NSSCTF{h499yn3wye4r}</p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="温馨的酒吧"><a href="#温馨的酒吧" class="headerlink" title="温馨的酒吧"></a>温馨的酒吧</h3><p>看视频过完所有剧情即可拿flag</p><p>官方wp是遍历所有节点返回名字含flag的图片来得到的</p><p>注意有一段有5个乱码和中间正好一样，猜测：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">NSSCTF</span><span class="template-variable">&#123;新年快乐_不要停下来啊_CTFer!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="userssssssssss"><a href="#userssssssssss" class="headerlink" title="userssssssssss"></a>userssssssssss</h3><p>进入后按创建日期排序，最后是laminous，打开看到flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;f9d04fc8-<span class="number">77</span>a6-<span class="number">4700</span>-b114-<span class="number">2</span>a071ff76ceb&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">好难</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="wp" scheme="https://www.pri87.vip/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF_r17题目复现</title>
    <link href="https://www.pri87.vip/posts/b3e0bfc3.html"/>
    <id>https://www.pri87.vip/posts/b3e0bfc3.html</id>
    <published>2024-01-28T11:11:14.000Z</published>
    <updated>2024-01-30T05:51:31.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h3><p>这个题是游戏题，相当于通关就可以得到最后的flag，可惜当时被go的抽象给蒙蔽了双眼，没有想去动调</p><p>逻辑大概是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; <span class="number">10</span>; i = v65 + <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v65 = i;</span><br><span class="line">    snake_pkg_app_Run(<span class="number">20</span>, <span class="number">20</span>, v0, v1, (_DWORD)v2, v3, v4, v5, v6, v57, v58);</span><br><span class="line">    v74 = v8;</span><br><span class="line">    v15 = runtime_convT64(v65, <span class="number">20</span>, v10, v1, (_DWORD)v2, v11, v12, v13, v14, v57);</span><br><span class="line">    *(_QWORD *)&amp;v74 = &amp;RTYPE_int;</span><br><span class="line">    *((_QWORD *)&amp;v74 + <span class="number">1</span>) = v15;</span><br><span class="line">    v1 = <span class="number">19</span>;</span><br><span class="line">    v2 = &amp;v74;</span><br><span class="line">    fmt_Fprintf(</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)go_itab__os_File_io_Writer,</span><br><span class="line">      os_Stdout,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;%d Game round ends\n&quot;</span>,</span><br><span class="line">      <span class="number">19</span>,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v74,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      v16,</span><br><span class="line">      v17,</span><br><span class="line">      v57,</span><br><span class="line">      v58,</span><br><span class="line">      v59,</span><br><span class="line">      v60,</span><br><span class="line">      v61,</span><br><span class="line">      v62,</span><br><span class="line">      v63);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">10</span> &amp;&amp; qword_569E78 == <span class="number">400</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v73[<span class="number">0</span>] = &amp;RTYPE_string;</span><br><span class="line">    v73[<span class="number">1</span>] = &amp;off_4E5D98;</span><br><span class="line">    v18 = <span class="number">1</span>;</span><br><span class="line">    LODWORD(v19) = <span class="number">1</span>;</span><br><span class="line">    fmt_Fprintln(</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)go_itab__os_File_io_Writer,</span><br><span class="line">      os_Stdout,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)v73,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      v3,</span><br><span class="line">      v4,</span><br><span class="line">      v5,</span><br><span class="line">      v6,</span><br><span class="line">      v57,</span><br><span class="line">      v58,</span><br><span class="line">      v59,</span><br><span class="line">      v60,</span><br><span class="line">      v61);</span><br><span class="line">    v23 = snake_pkg_game_All_rand;</span><br><span class="line">    v71 = snake_pkg_game_All_rand;</span><br><span class="line">    v24 = qword_569E78;</span><br><span class="line">    v67 = qword_569E78;</span><br><span class="line">    v25 = <span class="number">0LL</span>;</span><br><span class="line">    v26 = <span class="number">0LL</span>;</span><br><span class="line">    v27 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v25 &lt; v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      v66 = v25;</span><br><span class="line">      v64 = v26;</span><br><span class="line">      v70 = v27;</span><br><span class="line">      v28 = *(_QWORD *)(v23 + <span class="number">8</span> * v25);</span><br><span class="line">      v75 = v8;</span><br><span class="line">      v29 = runtime_convT64(v28, v27, v28, v18, v19, v24, v20, v21, v22, v57);</span><br><span class="line">      *(_QWORD *)&amp;v75 = &amp;RTYPE_int;</span><br><span class="line">      *((_QWORD *)&amp;v75 + <span class="number">1</span>) = v29;</span><br><span class="line">      v18 = fmt_Sprintf((<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;%02x&quot;</span>, <span class="number">4</span>, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v75, <span class="number">1</span>, <span class="number">1</span>, v30, v31, v32, v33, v57, v58, v59, v60, v61);</span><br><span class="line">      v34 = v70;</span><br><span class="line">      v39 = runtime_concatstring2(<span class="number">0</span>, v70, v64, v18, <span class="number">4</span>, v35, v36, v37, v38, v57, v58, v59, v60, v61);</span><br><span class="line">      v23 = v71;</span><br><span class="line">      v24 = v67;</span><br><span class="line">      v19 = v39;</span><br><span class="line">      v25 = v66 + <span class="number">1</span>;</span><br><span class="line">      v26 = v34;</span><br><span class="line">      v27 = v19;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_OWORD *)v69.h = v8;</span><br><span class="line">    v40 = &amp;v57 + <span class="number">12</span>;</span><br><span class="line">    v56 = &amp;v76;</span><br><span class="line">    ((<span class="type">void</span> (__fastcall *)(__int64 *))loc_45F36B)(v40);</span><br><span class="line">    *(_QWORD *)v69.h = <span class="number">0xEFCDAB8967452301</span>LL;</span><br><span class="line">    *(_QWORD *)&amp;v69.h[<span class="number">2</span>] = <span class="number">0x1032547698BADCFE</span>LL;</span><br><span class="line">    v69.h[<span class="number">4</span>] = <span class="number">-1009589776</span>;</span><br><span class="line">    *(_OWORD *)&amp;v69.nx = v8;</span><br><span class="line">    v46 = (uint8 *)runtime_stringtoslicebyte(</span><br><span class="line">                     (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v68,</span><br><span class="line">                     v27,</span><br><span class="line">                     v41,</span><br><span class="line">                     (_DWORD)v40,</span><br><span class="line">                     v19,</span><br><span class="line">                     v42,</span><br><span class="line">                     v43,</span><br><span class="line">                     v44,</span><br><span class="line">                     v45,</span><br><span class="line">                     v57,</span><br><span class="line">                     v58,</span><br><span class="line">                     v59);</span><br><span class="line">    v77.cap = v47;</span><br><span class="line">    v77.len = v27;</span><br><span class="line">    v77.ptr = v46;</span><br><span class="line">    crypto_sha1__ptr_digest_Write(&amp;v69, v77);</span><br><span class="line">    v77.ptr = <span class="number">0LL</span>;</span><br><span class="line">    v77.len = <span class="number">0LL</span>;</span><br><span class="line">    v77.cap = <span class="number">0LL</span>;</span><br><span class="line">    v77 = crypto_sha1__ptr_digest_Sum(&amp;v69, v77);</span><br><span class="line">    v72 = v8;</span><br><span class="line">    v53 = runtime_convTslice(v48, v77.ptr, v77.len, <span class="number">0</span>, v19, v49, v50, v51, v52, v57, v58, v59);</span><br><span class="line">    *(_QWORD *)&amp;v72 = &amp;RTYPE__slice_uint8;</span><br><span class="line">    *((_QWORD *)&amp;v72 + <span class="number">1</span>) = v53;</span><br><span class="line">    fmt_Fprintf(</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)go_itab__os_File_io_Writer,</span><br><span class="line">      os_Stdout,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;flag&#123;%x&#125;\n&quot;</span>,</span><br><span class="line">      <span class="number">9</span>,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v72,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      v54,</span><br><span class="line">      v55,</span><br><span class="line">      v57,</span><br><span class="line">      v58,</span><br><span class="line">      v59,</span><br><span class="line">      v60,</span><br><span class="line">      v61,</span><br><span class="line">      v62,</span><br><span class="line">      v63);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>根据汇编，化简逻辑是</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">判断i <span class="operator">=</span><span class="operator">=</span> <span class="number">10</span></span><br><span class="line">不是 再来一轮</span><br><span class="line">是   判断qword_569E78 <span class="operator">=</span><span class="operator">=</span> <span class="number">400</span></span><br><span class="line">不是  结束</span><br><span class="line">是    输出flag</span><br></pre></td></tr></table></figure><p>以及网上有人说flag是根据输入变换的，但是我动态调试的时候试过不同的发现flag都一样，不过这个代码太抽象我也不知道flag怎么打出来的</p><p>最后就是在第一个判断0A的位置下断点，不断改变标志位，让程序到达输出success的位置，最后调用printf</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;da39a3ee5e6b4b0d3255bfef95601890afd80709&#125;</span></span><br></pre></td></tr></table></figure><h3 id="can-can-need-pxory"><a href="#can-can-need-pxory" class="headerlink" title="can_can_need_pxory"></a>can_can_need_pxory</h3><p>这个题完全不能理解（现在也是）</p><p>是py转exe，先反编译出pyc，然后再反编译成py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ccccccccccccccccccccccccccccccccccc!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;D0 U know C?&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n#include &lt;NSSCTF.h&gt;\nv01d bnssst(int FTC[], int lenggggggg) &#123;\n    int i, j, SSN;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;This is CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;6L+Z5piv5L2g6KaB55qEZmxhZ+WQl++8nwpOU1NDVEZ7YjVlMzlkMDktODg3Yy1hZGI0LTE4OWMtMWI0OGEwNWJmOTY2fQ==&#x27;</span>)</span><br><span class="line">A = &#123;</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span>: <span class="string">&#x27;NSSCTF&#123;a81c0d5e-ec6d-2b80&#x27;</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n                SSN = FTC[j];\n                printf(&quot;flag&quot;);\n            &#125;\n&#125;\nint mian() &#123;\n    int FTC[] = [ -,\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ccccccccccccccccccc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nb, 2, 6, 7, -, d, 5, 8, 4, -, 6, 8, 7, 4, -, f, 1, 2, 6, e, 3, a, 5, 1, 0, 6, 1, &#125;];\n    int lenggggggg = (int) sizeof(FTC) / sizeof(*FTC);\n    bnsScrt(FTC, lenggggggg);\n    int i;\n    for (i = 0; i &lt; lenggggggg; i++)\n        printf(&quot;%d &quot;, FTC[i]);\n    remake 0;\n&#125;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">flag = <span class="string">&#x27;************************************&#x27;</span></span><br><span class="line">r = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> (x + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">        res = <span class="built_in">str</span>(<span class="built_in">ord</span>(flag[x]) ^ <span class="number">2421</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="built_in">str</span>(<span class="built_in">ord</span>(flag[x]) &lt;&lt; <span class="number">6</span> &lt;&lt; <span class="number">7</span> &gt;&gt; <span class="number">2</span> &gt;&gt; <span class="number">1</span> ^ <span class="number">92</span>)</span><br><span class="line">    r = r + res + <span class="string">&#x27;,&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(base64.b16encode(base64.b32encode(r.encode(<span class="string">&#x27;utf-8&#x27;</span>)))).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>上面print出来的东西好像是一段c语言代码，但是语法很抽象，就算改完语法的错，我也不理解ccccccccc是啥玩意，根据后面正常的py语法，怀疑c代码是给最后的末值的，</p><p>之后有机会补</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level_1"></a>Level_1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">e1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">e2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = e1 * e2</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e1, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e2, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(e1)</span><br><span class="line"><span class="built_in">print</span>(e2)</span><br></pre></td></tr></table></figure><p>这里已知n，c1，c2，e1，e2，把e1，e2看成p，q</p><p>那么可以根据$c_1 = m^p \mod n$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">22517647586235353449147432825948355885962082318127038138351524894369583539246623545565501496312996556897362735789505076324197072008392656511657262430676945685471397862981216472634785622155317188784494912316440866051402627470561626691472280850273482836308002341429493460677206562201947000047718275995355772707947408688836667011206588727438261189233517003341094758634490421007907582147392858070623641389171229435187248184443645883661560636995548332475573072064240073037558031928639832259001407585962782698021735648128101459118863015844905452823095147248865104102562991382119836061161756978764495337874807458182581421229</span></span><br><span class="line">c1 = <span class="number">1432393096266401187029059077791766305797845826173887492889260179348416733820890797101745501984437201566364579129066414005659742104885321270122634155922766503333859812540068278962999824043206496595825886026095484801291802992082454776271149083516187121160475839108002133113254134626407840182541809478892306748590016896975053434021666376203540725254480252049443975835307793528287818262102688334515632062552114342619781840154202525919769192765621085008206581226486157149883898548933475155236509073675387541466324512294079413938239828341890576923100769181401944289365386552139418728492565319685207500539721582552448971814</span></span><br><span class="line">c2 = <span class="number">13299679392897297864252207869444022461237574801991239380909482153705185317634241850084078027230394830079554676426505967970943836811048777462696506309466535820372917756458083553031417406403895116557560548183674144457502601887632495739472178857537011190162283185735114683172731936834993707871636782206418680404006299140864001776588991141011500807549645227520128216130966268810165946959810884593793452437010902774726405217517557763322690215690606067996057037379898630878638483268362526985225092000670251641184960698506349245915816808028210142606700394584541282682338561482561343076218115042099753144875658666459825545602</span></span><br><span class="line">e1 = <span class="number">155861690390761931560700906834977917646203451142415617638229284868013723431003139974975998354830978765979365632120896717380895021936387027045347260400512396388028781862427862974453223157509702913026222541667006325100878113871620322023188372501930117363623076837619478555007555970810681502521309925774889678793</span></span><br><span class="line">e2 = <span class="number">144471983652821947847253052623701746810204736865723159569786739658583884214397562204788127484897909964898113250509653721265240138487697822089282456150238116811225975640330930854549232972314642221382625614304415750165289831040623741828600283778523993251940904896081111235859249916040849697146542311990869696453</span></span><br><span class="line"></span><br><span class="line">phi = (e1-<span class="number">1</span>)*(e2-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e1,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;NSSCTF&#123;Y0u_Hav3_S01v3d_Crypt0_Leve1_i&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>这就是标准的RSA解密流程</p><p>也可以用共模攻击</p><blockquote><p>共模是指：就是明文m,相同。用两个公钥e1,e2加密得到两个私钥d1,d2 和两个密文c1,c2（e不同，n同）<br>共模攻击，即当m不变的情况下，知道n,e1,e2,c1,c2, 可以在不知道d1,d2的情况下，解出m<br>利用条件为=&gt; gcd(e1,e2)=1</p></blockquote><p>若两个e互素，gcd(e1,e2)=1</p><p>那么一定存在x，y使得gcd(a,b) = ax+by</p><p>所以$e_1s_1+e_2s_2=1$</p><p>根据复杂的推导过程最后得到：</p><p>(c1^s1*c2^s2)%n=m%n=m</p><p>即：m = (pow(c_1,s_1,n)*pow(c_2,s_2,n)) % n</p><p>所以另一个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">155861690390761931560700906834977917646203451142415617638229284868013723431003139974975998354830978765979365632120896717380895021936387027045347260400512396388028781862427862974453223157509702913026222541667006325100878113871620322023188372501930117363623076837619478555007555970810681502521309925774889678793</span></span><br><span class="line">e2 = <span class="number">144471983652821947847253052623701746810204736865723159569786739658583884214397562204788127484897909964898113250509653721265240138487697822089282456150238116811225975640330930854549232972314642221382625614304415750165289831040623741828600283778523993251940904896081111235859249916040849697146542311990869696453</span></span><br><span class="line">n = <span class="number">22517647586235353449147432825948355885962082318127038138351524894369583539246623545565501496312996556897362735789505076324197072008392656511657262430676945685471397862981216472634785622155317188784494912316440866051402627470561626691472280850273482836308002341429493460677206562201947000047718275995355772707947408688836667011206588727438261189233517003341094758634490421007907582147392858070623641389171229435187248184443645883661560636995548332475573072064240073037558031928639832259001407585962782698021735648128101459118863015844905452823095147248865104102562991382119836061161756978764495337874807458182581421229</span></span><br><span class="line">c1 = <span class="number">1432393096266401187029059077791766305797845826173887492889260179348416733820890797101745501984437201566364579129066414005659742104885321270122634155922766503333859812540068278962999824043206496595825886026095484801291802992082454776271149083516187121160475839108002133113254134626407840182541809478892306748590016896975053434021666376203540725254480252049443975835307793528287818262102688334515632062552114342619781840154202525919769192765621085008206581226486157149883898548933475155236509073675387541466324512294079413938239828341890576923100769181401944289365386552139418728492565319685207500539721582552448971814</span></span><br><span class="line">c2 = <span class="number">13299679392897297864252207869444022461237574801991239380909482153705185317634241850084078027230394830079554676426505967970943836811048777462696506309466535820372917756458083553031417406403895116557560548183674144457502601887632495739472178857537011190162283185735114683172731936834993707871636782206418680404006299140864001776588991141011500807549645227520128216130966268810165946959810884593793452437010902774726405217517557763322690215690606067996057037379898630878638483268362526985225092000670251641184960698506349245915816808028210142606700394584541282682338561482561343076218115042099753144875658666459825545602</span></span><br><span class="line"></span><br><span class="line">s,s1,s2=gmpy2.gcdext(e1,e2)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n))%n</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)).decode())</span><br></pre></td></tr></table></figure><h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level_2"></a>Level_2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 猜猜我是谁 猜对了直接秒出flag喔</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">p = ***</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c=<span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>根据提示说e很常见，盲猜65537</p><p>p的取值在ps.txt文件中，遍历p直接求出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">q=<span class="number">145721736470529261146573065574028992352505611489859183763269215489708531333597694809923949026781460438320576519639268582565188719134157402292313959218961804213310847081787824780075530751842057663327444602428455144829447776271394663729996984613471623158126083062443634493708467568220146024273763894704649472957</span></span><br><span class="line">c=<span class="number">17441814714407189483380175736850663249578989775568187792928771544069162420510939242665830363276698262009780462912108642025299275146709817979705069095332726251759039923303627023610865046363171692163473939115438686877494878334016463787558794121885354719336139401336137097548305393030069499625065664884238710759260231321106291200849044147840392021931720902340003746946851806025722944795391356835342258387797980787437188976704677008092850181043891802072500430200735973581081228711070923822341261809453662427341958883142789220800541626034573952425948295446202775198692920613709157662831071515700549093766182579873408465779</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ps.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ps = [<span class="built_in">int</span>(line.strip()) <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> ps:</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e,phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,p*q)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flag = long_to_bytes(m).decode()</span><br><span class="line">        <span class="keyword">if</span> flag.startswith(<span class="string">&#x27;NSSCTF&#123;&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h3 id="Level-3"><a href="#Level-3" class="headerlink" title="Level_3"></a>Level_3</h3><p>当时没做出来，后来发现nc的时候应该输ip 空格 端口 而不是ip:端口</p><p>就很亏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">n,e1,e2,c1,c2</span>):</span><br><span class="line">t = gmpy2.gcd(e1,e2)</span><br><span class="line"><span class="keyword">if</span> t == <span class="number">1</span>:</span><br><span class="line">s,x,y = gmpy2.gcdext(e1,e2)</span><br><span class="line">m = (<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n))%n</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="keyword">return</span> flag</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">s,x,y = gmpy2.gcdext(e1,e2)</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">m = gmpy2.iroot((<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n)+k*n)%n,t)</span><br><span class="line"><span class="keyword">if</span> m[<span class="number">1</span>]:</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;IP&quot;</span>,端口号)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里需要666次，试了试665次打不出来</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">666</span>):</span><br><span class="line">data = sh.recvuntil(<span class="string">b&quot; y0u J01n In th3 NSS t3am?\n py?\n&quot;</span>)</span><br><span class="line">n = <span class="built_in">eval</span>(sh.recvline().decode().strip().split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">e1 = <span class="built_in">eval</span>(sh.recvline().decode().strip().split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">e2 = <span class="built_in">eval</span>(sh.recvline().decode().strip().split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">c1 = <span class="built_in">eval</span>(sh.recvline().decode().strip().split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>])</span><br><span class="line">c2 = <span class="built_in">eval</span>(sh.recvline().decode().strip().split(<span class="string">&quot;=&quot;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">flag = decode(n,e1,e2,c1,c2)</span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;[+] Pl Give Me flaag :&quot;</span>,flag)</span><br><span class="line">sh.interactive()</span><br><span class="line"><span class="comment">#转自https://www.cnblogs.com/mumuhhh/p/17993151#top</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">好难</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="wp" scheme="https://www.pri87.vip/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>春秋杯2023冬 复现</title>
    <link href="https://www.pri87.vip/posts/64aac72c.html"/>
    <id>https://www.pri87.vip/posts/64aac72c.html</id>
    <published>2024-01-23T13:58:58.000Z</published>
    <updated>2024-01-26T08:57:03.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="upx2023"><a href="#upx2023" class="headerlink" title="upx2023"></a>upx2023</h3><p>先脱upx壳，这是修改了标志，用010editor把upx修改成UPX然后用upx -d脱壳</p><p>进入主函数后，发现逻辑大概是</p><ol><li>读flag</li><li>变换flag</li><li>用随机数异或flag加密</li><li>和check数组检验</li></ol><p>那么可以直接拿到check数组<br>我们要找flag就要找到那个随机数，srand函数传入的是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Seed = time(<span class="number">0</span>i64);</span><br><span class="line">srand(Seed);</span><br></pre></td></tr></table></figure><p>同时动态调试可以得到：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;0123456789ABCDEFGHIGKLMNOPQRSTUVWXYZ&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">变成</span></span><br><span class="line"><span class="language-xml">f</span><span class="template-variable">&#123;37BFGNRVZlg02468ACEGIKMOQSUWY&#125;</span><span class="language-xml">a159DHLPTX</span></span><br></pre></td></tr></table></figure><p>因此我们可以找时间遍历，遍历去年的时间戳</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*unsigned int seed = time(0);</span></span><br><span class="line"><span class="comment">srand(seed);</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &#x27;[&#x27;;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 42; i++) &#123;</span></span><br><span class="line"><span class="comment">int r = rand() % 255;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; r;</span></span><br><span class="line"><span class="comment">if (i != 41) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &#x27;,&#x27;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &#x27;]&#x27;;*/</span></span><br><span class="line"><span class="type">int</span> check[<span class="number">6</span>];</span><br><span class="line">check[<span class="number">0</span>] = <span class="string">&#x27;f&#x27;</span> ^ <span class="number">0x9</span>;</span><br><span class="line">check[<span class="number">1</span>] = <span class="string">&#x27;&#123;&#x27;</span> ^ <span class="number">0x63</span>;</span><br><span class="line">check[<span class="number">2</span>] = <span class="string">&#x27;l&#x27;</span>^ <span class="number">0xC6</span>;</span><br><span class="line">check[<span class="number">3</span>] = <span class="string">&#x27;g&#x27;</span>^ <span class="number">0x65</span>;</span><br><span class="line">check[<span class="number">4</span>] = <span class="string">&#x27;&#125;&#x27;</span>^ <span class="number">0xFD</span>;</span><br><span class="line">check[<span class="number">5</span>] = <span class="string">&#x27;a&#x27;</span>^ <span class="number">0xFA</span>;</span><br><span class="line"><span class="type">int</span> r[<span class="number">42</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> time = <span class="number">1672416000</span>; time &lt; <span class="number">1706253391</span>; time++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">srand</span>(time);</span><br><span class="line"><span class="keyword">if</span> (check[<span class="number">0</span>] != (r[<span class="number">0</span>] = <span class="built_in">rand</span>() % <span class="number">255</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (check[<span class="number">1</span>] != (r[<span class="number">1</span>] = <span class="built_in">rand</span>() % <span class="number">255</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">r[i] = <span class="built_in">rand</span>() % <span class="number">255</span>;</span><br><span class="line"><span class="keyword">if</span> ((check[<span class="number">2</span>] != r[<span class="number">11</span>]) || (check[<span class="number">3</span>] != r[<span class="number">12</span>]) || (check[<span class="number">4</span>] != r[<span class="number">31</span>]) || (check[<span class="number">5</span>] != r[<span class="number">32</span>]))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (time &lt; <span class="number">1706253391</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;the seed is: &quot;</span> &lt;&lt; time&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">42</span>; j++) &#123;</span><br><span class="line">cout &lt;&lt; r[j];</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">41</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到seed:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">the seed is: <span class="number">1682145110</span></span><br><span class="line">[<span class="number">111,24,236,196</span>,<span class="number">58,186,93,97</span>,<span class="number">61,51,169,170</span>,<span class="number">2,17,113,139</span>,<span class="number">162,38,14,77</span>,<span class="number">131,66,112,202</span>,<span class="number">80,113,231,107</span>,<span class="number">15,50,159,128</span>,<span class="number">155,183,227,184</span>,<span class="number">224,28,16,180</span>,<span class="number">42</span>,<span class="number">57</span>]</span><br></pre></td></tr></table></figure><p>最后异或一下，发现是打乱的flag</p><p>根据这个对应写代码逆向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">check = [<span class="number">0x09</span>, <span class="number">0x63</span>, <span class="number">0xD9</span>, <span class="number">0xF6</span>, <span class="number">0x58</span>, <span class="number">0xDD</span>, <span class="number">0x3F</span>, <span class="number">0x4C</span>, </span><br><span class="line">         <span class="number">0x0F</span>, <span class="number">0x0B</span>, <span class="number">0x98</span>, <span class="number">0xC6</span>, <span class="number">0x65</span>, <span class="number">0x21</span>, <span class="number">0x41</span>, <span class="number">0xED</span>, </span><br><span class="line">         <span class="number">0xC4</span>, <span class="number">0x0B</span>, <span class="number">0x3A</span>, <span class="number">0x7B</span>, <span class="number">0xE5</span>, <span class="number">0x75</span>, <span class="number">0x5D</span>, <span class="number">0xA9</span>, </span><br><span class="line">         <span class="number">0x31</span>, <span class="number">0x41</span>, <span class="number">0xD7</span>, <span class="number">0x52</span>, <span class="number">0x6C</span>, <span class="number">0x0A</span>, <span class="number">0xFA</span>, <span class="number">0xFD</span>, </span><br><span class="line">         <span class="number">0xFA</span>, <span class="number">0x84</span>, <span class="number">0xDB</span>, <span class="number">0x89</span>, <span class="number">0xCD</span>, <span class="number">0x7E</span>, <span class="number">0x27</span>, <span class="number">0x85</span>, </span><br><span class="line">         <span class="number">0x13</span>, <span class="number">0x08</span>]</span><br><span class="line">rand = [<span class="number">111</span>,<span class="number">24</span>,<span class="number">236</span>,<span class="number">196</span>,<span class="number">58</span>,<span class="number">186</span>,<span class="number">93</span>,<span class="number">97</span>,<span class="number">61</span>,<span class="number">51</span>,<span class="number">169</span>,<span class="number">170</span>,<span class="number">2</span>,<span class="number">17</span>,<span class="number">113</span>,<span class="number">139</span>,<span class="number">162</span>,<span class="number">38</span>,<span class="number">14</span>,<span class="number">77</span>,<span class="number">131</span>,<span class="number">66</span>,<span class="number">112</span>,<span class="number">202</span>,<span class="number">80</span>,<span class="number">113</span>,<span class="number">231</span>,<span class="number">107</span>,<span class="number">15</span>,<span class="number">50</span>,<span class="number">159</span>,<span class="number">128</span>,<span class="number">155</span>,<span class="number">183</span>,<span class="number">227</span>,<span class="number">184</span>,<span class="number">224</span>,<span class="number">28</span>,<span class="number">16</span>,<span class="number">180</span>,<span class="number">42</span>,<span class="number">57</span>]</span><br><span class="line"></span><br><span class="line">miao =    <span class="string">&#x27;flag&#123;0123456789ABCDEFGHIGKLMNOPQRSTUVWXYZ&#125;&#x27;</span></span><br><span class="line">mia2 =    <span class="string">&#x27;f&#123;37BFGNRVZlg02468ACEGIKMOQSUWY&#125;a159DHLPTX&#x27;</span></span><br><span class="line"></span><br><span class="line">back = [<span class="number">0</span>]*<span class="number">42</span></span><br><span class="line"></span><br><span class="line">a = pxor(check,rand)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">        <span class="keyword">if</span> (miao[i]==mia2[j]):</span><br><span class="line">            back[i]=a[j]</span><br><span class="line"></span><br><span class="line">pl(back)</span><br><span class="line"><span class="comment">#flag&#123;0305f8f2-14b6-fg7b-7c7a-010299c881e1&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>一开始没看出来标志的大小写有问题TAT，于是直接调试找的main。。。</p><p>其次，由于srand随机的是当前时间，所以调试的时候值几乎不可能是当时的值，所以只有爆破才能找到真的seed，因此就要先把第一个变换通过动调看出来是打乱才可以（当然也不能验证）</p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="谁偷吃了我的外卖"><a href="#谁偷吃了我的外卖" class="headerlink" title="谁偷吃了我的外卖"></a>谁偷吃了我的外卖</h3><p>这道题是压缩包<br>先打开，看到小凯.jpg</p><p>继续打开，发现外卖箱.zip<br>继续打开，一个flag文件夹和一堆外卖，</p><p>结构是：用户xxx_yyyy的外卖，yyyy很明显可以看出是base64，根据hint（在信息中）：I can give you a hint: - = /<br>But there was a takeaway that was partially eaten.</p><p>可以知道这里的-就是/，那么先写一个脚本把文件中的yyyy提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_filenames</span>(<span class="params">zip_path</span>):</span><br><span class="line">    <span class="comment"># 打开压缩文件</span></span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(zip_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_ref:</span><br><span class="line">        <span class="comment"># 获取压缩文件中的所有文件名</span></span><br><span class="line">        all_files = zip_ref.namelist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对文件名进行解码</span></span><br><span class="line">        all_files = [filename.encode(<span class="string">&#x27;cp437&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>) <span class="keyword">for</span> filename <span class="keyword">in</span> all_files]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 提取每个文件名中的用户编号并按照编号排序文件名</span></span><br><span class="line">        all_files.sort(key=<span class="keyword">lambda</span> filename: <span class="built_in">int</span>(re.search(<span class="string">r&#x27;用户(\d+)&#x27;</span>, filename).group(<span class="number">1</span>)) <span class="keyword">if</span> re.search(<span class="string">r&#x27;用户(\d+)&#x27;</span>, filename) <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化一个空字符串用于存储字符</span></span><br><span class="line">        combined = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对每个文件名进行操作</span></span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> all_files:</span><br><span class="line">            <span class="comment"># 提取文件名中倒数第7到倒数第4的字符</span></span><br><span class="line">            part = filename[-<span class="number">7</span>:-<span class="number">3</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 将字符添加到 combined 中</span></span><br><span class="line">            combined += part</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> combined</span><br><span class="line"></span><br><span class="line">result = process_filenames(<span class="string">&#x27;外卖箱.zip&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>那么把他base64解码</p><p>解码的结果是一堆乱码，看最后可以看到有png，PK，.md的字样，也就是说这是一个压缩包</p><p>转换为hex，开头是04 14 00 00 00 08 00，再看上面的提示，补充前三个字符（50 4B 03），然后一起复制到新文件中，得到新压缩包，里面是之前加密的压缩包的flag文件夹中的两个文件，同时钥匙.png表示这是deflate+zipcrypyo，既然是zipcrypyo，就可以用明文攻击，使用archpr找到密钥（密钥是由密码生成，同时加密使用密钥）：</p><p>[ 48ff002a 56e00484 380c5c49 ]</p><p>然后用bkcrack解密压缩包</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bkcrack -C <span class="selector-tag">a</span><span class="selector-class">.zip</span> -k <span class="number">48</span>ff002a <span class="number">56</span>e00484 <span class="number">380</span>c5c49 -U new<span class="selector-class">.zip</span> ok</span><br></pre></td></tr></table></figure><p>将原始密码换成ok</p><p>然后解密即可</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;W<span class="number">1</span>sh_y<span class="number">0</span>u_AaaAaaaaaaaaaaa_w<span class="number">0</span><span class="symbol">nderfu1</span>_CTF_jour<span class="symbol">ne9</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">唯一做出来的题QAQ</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="misc" scheme="https://www.pri87.vip/tags/misc/"/>
    
    <category term="压缩包" scheme="https://www.pri87.vip/tags/%E5%8E%8B%E7%BC%A9%E5%8C%85/"/>
    
    <category term="upx" scheme="https://www.pri87.vip/tags/upx/"/>
    
    <category term="随机数" scheme="https://www.pri87.vip/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>CTF_RE_VM</title>
    <link href="https://www.pri87.vip/posts/670cb6e7.html"/>
    <id>https://www.pri87.vip/posts/670cb6e7.html</id>
    <published>2024-01-20T16:26:39.000Z</published>
    <updated>2024-03-08T18:18:41.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="伪虚拟机保护"><a href="#伪虚拟机保护" class="headerlink" title="伪虚拟机保护"></a>伪虚拟机保护</h2><blockquote><p><strong>虚拟机</strong>（英语：virtual machine），在计算机科学中的体系结构里，是指一种特殊的软件，可以在计算机平台和终端用户之间建立一种环境，而终端用户则是基于虚拟机这个软件所建立的环境来操作其它软件。虚拟机（VM）是计算机系统的仿真器，通过软件模拟具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统，能提供物理计算机的功能。</p></blockquote><p>很明显，ctf中的vm技术和虚拟机并不相同，却有一定关系</p><p>伪虚拟机保护是一种模拟，它将程序可执行代码转换为自定义的中间操作码(operationcode)，如果操作码是一个字节，将它称为(bytecode)。中间操作码通过模拟器执行，实现程序原来的功能，同时阻碍逆向。这也是大多数跨平台语言可以成立的原因，先将代码翻译成中间码，这个代码就可以在任何有对应虚拟机的地方执行。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>JVM</p><p>两个文件</p><p>JVM.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> p000;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* renamed from: JVM */</span></span><br><span class="line"><span class="comment">/* loaded from: JVM.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JVM</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* renamed from: program */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">byte</span>[] flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] strArr)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(strArr[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        flag = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">        fileInputStream.read(flag);</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        m0vm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* renamed from: vm */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m0vm</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] iArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span>[] iArr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; flag.length) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (flag[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> flag[i];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> iArr2[b];</span><br><span class="line">                    iArr2[b] = iArr2[b2];</span><br><span class="line">                    iArr2[b2] = i3;</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">n_next</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[n_next] = iArr2[n_next] + flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b3] = iArr2[b3] + iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b4</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b4] = iArr2[b4] - flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b5</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b5] = iArr2[b5] - iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b6</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b6] = iArr2[b6] * flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b7</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b7] = iArr2[b7] * iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b8</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b8] = iArr2[b8] / flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b9</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b9] = iArr2[b9] / iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b10</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b10] = iArr2[b10] % flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b11</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b11] = iArr2[b11] % iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">28</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b12</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b12] = iArr2[b12] &lt;&lt; flag[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">29</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b13</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    iArr2[b13] = iArr2[b13] &lt;&lt; iArr2[flag[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">31</span>:</span><br><span class="line">                    iArr2[flag[i + <span class="number">1</span>]] = bufferedReader.read();</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    iArr[i4] = bufferedReader.read();</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">33</span>:</span><br><span class="line">                    System.out.print((<span class="type">char</span>) iArr2[flag[i + <span class="number">1</span>]]);</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">34</span>:</span><br><span class="line">                    i2--;</span><br><span class="line">                    System.out.print((<span class="type">char</span>) iArr[i2]);</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">41</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b14</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b15</span> <span class="operator">=</span> flag[i + <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span> (iArr2[b14] == <span class="number">0</span>) &#123;</span><br><span class="line">                        i = b15;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        i += <span class="number">3</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">42</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b16</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b17</span> <span class="operator">=</span> flag[i + <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span> (iArr2[b16] != <span class="number">0</span>) &#123;</span><br><span class="line">                        i = b17;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        i += <span class="number">3</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">43</span>:</span><br><span class="line">                    i = flag[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">52</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i5</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    iArr[i5] = iArr2[flag[i + <span class="number">1</span>]];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">53</span>:</span><br><span class="line">                    i2--;</span><br><span class="line">                    iArr2[flag[i + <span class="number">1</span>]] = iArr[i2];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">54</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i6</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    iArr[i6] = flag[i + <span class="number">1</span>];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Byte.MAX_VALUE:</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b18</span> <span class="operator">=</span> flag[i];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b19</span> <span class="operator">=</span> flag[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b20</span> <span class="operator">=</span> flag[i + <span class="number">2</span>];</span><br><span class="line">                    flag[i] = (<span class="type">byte</span>) ((flag[i] ^ b19) ^ b20);</span><br><span class="line">                    flag[i + <span class="number">1</span>] = (<span class="type">byte</span>) ((flag[i] ^ b18) ^ b20);</span><br><span class="line">                    flag[i + <span class="number">2</span>] = (<span class="type">byte</span>) ((flag[i + <span class="number">1</span>] ^ b18) ^ b19);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>code.jvm(二进制文件)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">36</span> <span class="number">20</span> <span class="number">36</span> <span class="number">3</span>E <span class="number">22</span> <span class="number">22</span> <span class="number">08</span> <span class="number">00</span> <span class="number">0</span>A <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">08</span></span><br><span class="line"><span class="attribute">00</span> <span class="number">02</span> <span class="number">20</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">01</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">12</span> <span class="number">2</span>B <span class="number">2</span>C <span class="number">36</span> <span class="number">53</span> <span class="number">36</span> <span class="number">45</span> <span class="number">36</span></span><br><span class="line"><span class="attribute">59</span> <span class="number">22</span> <span class="number">22</span> <span class="number">22</span> <span class="number">7</span>F <span class="number">36</span> <span class="number">4</span>F <span class="number">36</span> <span class="number">4</span>E <span class="number">22</span> <span class="number">22</span> <span class="number">7</span>F <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span></span><br><span class="line"><span class="attribute">7D</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">09</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">36</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span></span><br><span class="line"><span class="attribute">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">0</span>A <span class="number">0</span>C <span class="number">02</span> <span class="number">63</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">15</span> <span class="number">0</span>C</span><br><span class="line"><span class="attribute">02</span> <span class="number">61</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">08</span></span><br><span class="line"><span class="attribute">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">01</span> <span class="number">09</span> <span class="number">01</span> <span class="number">01</span> <span class="number">08</span> <span class="number">02</span> <span class="number">07</span> <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">01</span></span><br><span class="line"><span class="attribute">2A</span> <span class="number">02</span> <span class="number">6</span>A <span class="number">08</span> <span class="number">00</span> <span class="number">02</span> <span class="number">0</span>D <span class="number">00</span> <span class="number">01</span> <span class="number">0</span>D <span class="number">01</span> <span class="number">01</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span></span><br><span class="line"><span class="attribute">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">73</span> <span class="number">2</span>A</span><br><span class="line"><span class="attribute">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">6</span>B <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C</span><br><span class="line"><span class="attribute">01</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">70</span> <span class="number">2</span>A <span class="number">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">07</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">62</span></span><br><span class="line"><span class="attribute">2A</span> <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">04</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">30</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">0</span>B <span class="number">0</span>C <span class="number">03</span> <span class="number">6</span>B <span class="number">2</span>A <span class="number">03</span></span><br><span class="line"><span class="attribute">25</span> <span class="number">35</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">04</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">30</span> <span class="number">2</span>A <span class="number">03</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span></span><br><span class="line"><span class="attribute">13</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">57</span> <span class="number">2</span>A <span class="number">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span></span><br><span class="line"><span class="attribute">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">1</span>A <span class="number">0</span>C <span class="number">02</span> <span class="number">54</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">04</span> <span class="number">0</span>C</span><br><span class="line"><span class="attribute">02</span> <span class="number">30</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">07</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">2</span>C <span class="number">2</span>A <span class="number">01</span> <span class="number">25</span></span><br><span class="line"><span class="attribute">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">0</span>F <span class="number">0</span>C <span class="number">01</span> <span class="number">5</span>E <span class="number">2</span>A <span class="number">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F</span><br><span class="line"><span class="attribute">2A</span> <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">29</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">2</span>C <span class="number">2</span>A <span class="number">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">02</span> <span class="number">27</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">48</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">2</span>D <span class="number">0</span>C <span class="number">02</span></span><br><span class="line"><span class="attribute">4C</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span></span><br><span class="line"><span class="attribute">07</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">29</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">01</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">23</span> <span class="number">0</span>C <span class="number">01</span> <span class="number">41</span> <span class="number">2</span>A</span><br><span class="line"><span class="attribute">01</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">5</span>F <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">02</span> <span class="number">2</span>C <span class="number">0</span>C</span><br><span class="line"><span class="attribute">02</span> <span class="number">48</span> <span class="number">2</span>A <span class="number">02</span> <span class="number">25</span> <span class="number">35</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">04</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">30</span> <span class="number">2</span>A <span class="number">03</span> <span class="number">25</span></span><br><span class="line"><span class="attribute">35</span> <span class="number">03</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">03</span> <span class="number">68</span> <span class="number">2</span>A <span class="number">03</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">1</span>C</span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">5</span>B <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">7</span>B <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">46</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">54</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">43</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">73</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">72</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">75</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">65</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">74</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">61</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span> <span class="number">0</span>C <span class="number">00</span> <span class="number">6</span>D <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">35</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">0C</span> <span class="number">00</span> <span class="number">61</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">25</span> <span class="number">2</span>B <span class="number">1</span>B</span><br></pre></td></tr></table></figure><p>可以看出vm的基本特征，即：</p><p>一个switch加一堆case<br>这是在判断这一个字节的指令是什么，然后执行相应指令</p><p>所以，给出了程序，我们需要逆向模拟器推出每一个指令是什么意思，然后把指令还原。同时，一般还会模拟寄存器和栈结构来读取数据，所以还要找到这两个结构才好理解。</p><p>所以，化简代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; code.length) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (code[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> code[i];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> reg[b];</span><br><span class="line">                    reg[b] = reg[b2];</span><br><span class="line">                    reg[b2] = i3;</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b3] = reg[b3] + code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b4</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b4] = reg[b4] + reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b5</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b5] = reg[b5] - code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b6</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b6] = reg[b6] - reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b7</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b7] = reg[b7] * code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b8</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b8] = reg[b8] * reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b9</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b9] = reg[b9] / code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b10</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b10] = reg[b10] / reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b11</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b11] = reg[b11] % code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b12</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b12] = reg[b12] % reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">28</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b13</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b13] = reg[b13] &lt;&lt; code[i + <span class="number">2</span>];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">29</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b14</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    reg[b14] = reg[b14] &lt;&lt; reg[code[i + <span class="number">2</span>]];</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">31</span>:</span><br><span class="line">                    reg[code[i + <span class="number">1</span>]] = bufferedReader.read();</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    stack[i4] = bufferedReader.read();</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">33</span>:</span><br><span class="line">                    System.out.print((<span class="type">char</span>) reg[code[i + <span class="number">1</span>]]);</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">34</span>:</span><br><span class="line">                    i2--;</span><br><span class="line">                    System.out.print((<span class="type">char</span>) stack[i2]);</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">41</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b15</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b16</span> <span class="operator">=</span> code[i + <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span> (reg[b15] == <span class="number">0</span>) &#123;</span><br><span class="line">                        i = b16;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        i += <span class="number">3</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">42</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b17</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b18</span> <span class="operator">=</span> code[i + <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span> (reg[b17] != <span class="number">0</span>) &#123;</span><br><span class="line">                        i = b18;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        i += <span class="number">3</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">43</span>:</span><br><span class="line">                    i = code[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">52</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i5</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    stack[i5] = reg[code[i + <span class="number">1</span>]];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">53</span>:</span><br><span class="line">                    i2--;</span><br><span class="line">                    reg[code[i + <span class="number">1</span>]] = stack[i2];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">54</span>:</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i6</span> <span class="operator">=</span> i2;</span><br><span class="line">                    i2++;</span><br><span class="line">                    stack[i6] = code[i + <span class="number">1</span>];</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Byte.MAX_VALUE:</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b19</span> <span class="operator">=</span> code[i];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b20</span> <span class="operator">=</span> code[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="type">byte</span> <span class="variable">b21</span> <span class="operator">=</span> code[i + <span class="number">2</span>];</span><br><span class="line">                    code[i] = (<span class="type">byte</span>) ((code[i] ^ b20) ^ b21);</span><br><span class="line">                    code[i + <span class="number">1</span>] = (<span class="type">byte</span>) ((code[i] ^ b19) ^ b21);</span><br><span class="line">                    code[i + <span class="number">2</span>] = (<span class="type">byte</span>) ((code[i + <span class="number">1</span>] ^ b19) ^ b20);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>改写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(code):</span><br><span class="line">b0 = code[i]</span><br><span class="line">b1 = code[i + <span class="number">1</span>] <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(code) <span class="keyword">else</span> <span class="number">0xff</span></span><br><span class="line">b2 = code[i + <span class="number">2</span>] <span class="keyword">if</span> i + <span class="number">2</span> &lt; <span class="built_in">len</span>(code) <span class="keyword">else</span> <span class="number">0xff</span></span><br><span class="line"><span class="keyword">if</span> b0 == <span class="number">0</span> <span class="keyword">or</span> b0 == <span class="number">1</span> <span class="keyword">or</span> b0 == <span class="number">2</span> <span class="keyword">or</span> b0 == <span class="number">3</span>:</span><br><span class="line">fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    swap r<span class="subst">&#123;b0&#125;</span> r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">i += <span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> b0 == <span class="number">8</span>:</span><br><span class="line">fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> += b2\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">9</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> += r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">12</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> -= <span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">13</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> -= r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">16</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> *= <span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">17</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> *= r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">20</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> /= <span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">21</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> /= r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">24</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> mod= <span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">25</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    r<span class="subst">&#123;b1&#125;</span> mod= r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">28</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    shl r<span class="subst">&#123;b1&#125;</span>, <span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">29</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    shl r<span class="subst">&#123;b1&#125;</span>, r<span class="subst">&#123;b2&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">31</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    read r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">32</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    rdpush\n&quot;</span>)<span class="comment">#i2为栈顶指针</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">33</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    print_write r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)<span class="comment">#只打印不改变栈</span></span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">34</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    print_pop\n&quot;</span>)<span class="comment">#打印加出栈</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">41</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    jmp <span class="subst">&#123;b2&#125;</span> if !r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)<span class="comment">#这里jmp通过修改i来跳转</span></span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">42</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    jmp <span class="subst">&#123;b2&#125;</span> if r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">43</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    jmp <span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">52</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    push r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">53</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    pop r<span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">54</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    push <span class="subst">&#123;b1&#125;</span>\n&quot;</span>)</span><br><span class="line">        i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> b0 == <span class="number">127</span>:</span><br><span class="line">        fq.write(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>    quit\n&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(code) <span class="keyword">and</span> i + <span class="number">2</span> &lt; <span class="built_in">len</span>(code):<span class="comment">#这是一个解密函数</span></span><br><span class="line">            code[i] = b0 ^ b1 ^ b2</span><br><span class="line">            code[i + <span class="number">1</span>] = b1</span><br><span class="line">            code[i + <span class="number">2</span>] = b0</span><br></pre></td></tr></table></figure><p>根据code.jvm生成正确的代码，然后人脑模拟运行得到flag</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>   push <span class="number">32</span></span><br><span class="line"><span class="symbol">2 </span>   push <span class="number">62</span></span><br><span class="line"><span class="symbol">4 </span>   print_pop</span><br><span class="line"><span class="symbol">5 </span>   print_pop</span><br><span class="line"><span class="symbol">6 </span>   r0 += b2</span><br><span class="line"><span class="symbol">9 </span>   r0 += r0</span><br><span class="line"><span class="symbol">12 </span>   r0 += r0</span><br><span class="line"><span class="symbol">15 </span>   r0 += b2</span><br><span class="line"><span class="symbol">18 </span>   rdpush</span><br><span class="line"><span class="symbol">19 </span>   r0 -= <span class="number">1</span></span><br><span class="line"><span class="symbol">22 </span>   jmp <span class="number">18</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">25 </span>   jmp <span class="number">44</span></span><br><span class="line"><span class="symbol">27 </span>   push <span class="number">83</span></span><br><span class="line"><span class="symbol">29 </span>   push <span class="number">69</span></span><br><span class="line"><span class="symbol">31 </span>   push <span class="number">89</span></span><br><span class="line"><span class="symbol">33 </span>   print_pop</span><br><span class="line"><span class="symbol">34 </span>   print_pop</span><br><span class="line"><span class="symbol">35 </span>   print_pop</span><br><span class="line"><span class="symbol">36 </span>   quit</span><br><span class="line"><span class="symbol">37 </span>   push <span class="number">79</span></span><br><span class="line"><span class="symbol">39 </span>   push <span class="number">78</span></span><br><span class="line"><span class="symbol">41 </span>   print_pop</span><br><span class="line"><span class="symbol">42 </span>   print_pop</span><br><span class="line"><span class="symbol">43 </span>   quit</span><br><span class="line"><span class="symbol">44 </span>   pop r0</span><br><span class="line"><span class="symbol">46 </span>   r0 -= <span class="number">125</span></span><br><span class="line"><span class="symbol">49 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">52 </span>   pop r0</span><br><span class="line"><span class="symbol">54 </span>   r0 -= <span class="number">9</span></span><br><span class="line"><span class="symbol">57 </span>   r0 -= <span class="number">54</span></span><br><span class="line"><span class="symbol">60 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">63 </span>   pop r2</span><br><span class="line"><span class="symbol">65 </span>   r2 -= <span class="number">10</span></span><br><span class="line"><span class="symbol">68 </span>   r2 -= <span class="number">99</span></span><br><span class="line"><span class="symbol">71 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">74 </span>   pop r2</span><br><span class="line"><span class="symbol">76 </span>   r2 -= <span class="number">21</span></span><br><span class="line"><span class="symbol">79 </span>   r2 -= <span class="number">97</span></span><br><span class="line"><span class="symbol">82 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">85 </span>   pop r0</span><br><span class="line"><span class="symbol">87 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">90 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">93 </span>   pop r0</span><br><span class="line"><span class="symbol">95 </span>   r1 += b2</span><br><span class="line"><span class="symbol">98 </span>   <span class="keyword">swap</span> r0 r1</span><br><span class="line"><span class="symbol">100 </span>   r1 += r1</span><br><span class="line"><span class="symbol">103 </span>   r2 += b2</span><br><span class="line"><span class="symbol">106 </span>   r0 += r0</span><br><span class="line"><span class="symbol">109 </span>   r2 -= <span class="number">1</span></span><br><span class="line"><span class="symbol">112 </span>   jmp <span class="number">106</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">115 </span>   r0 += b2</span><br><span class="line"><span class="symbol">118 </span>   r0 -= r1</span><br><span class="line"><span class="symbol">121 </span>   r1 -= r1</span><br><span class="line"><span class="symbol">124 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">127 </span>   pop r0</span><br><span class="line"><span class="symbol">129 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">132 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">135 </span>   pop r1</span><br><span class="line"><span class="symbol">137 </span>   r1 -= <span class="number">1</span></span><br><span class="line"><span class="symbol">140 </span>   r1 -= <span class="number">115</span></span><br><span class="line"><span class="symbol">143 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">146 </span>   pop r2</span><br><span class="line"><span class="symbol">148 </span>   r2 -= <span class="number">3</span></span><br><span class="line"><span class="symbol">151 </span>   r2 -= <span class="number">107</span></span><br><span class="line"><span class="symbol">154 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">157 </span>   pop r1</span><br><span class="line"><span class="symbol">159 </span>   r1 -= <span class="number">3</span></span><br><span class="line"><span class="symbol">162 </span>   r1 -= <span class="number">112</span></span><br><span class="line"><span class="symbol">165 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">168 </span>   pop r0</span><br><span class="line"><span class="symbol">170 </span>   r0 -= <span class="number">7</span></span><br><span class="line"><span class="symbol">173 </span>   r0 -= <span class="number">98</span></span><br><span class="line"><span class="symbol">176 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">179 </span>   pop r0</span><br><span class="line"><span class="symbol">181 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">184 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">187 </span>   pop r0</span><br><span class="line"><span class="symbol">189 </span>   r0 -= <span class="number">4</span></span><br><span class="line"><span class="symbol">192 </span>   r0 -= <span class="number">48</span></span><br><span class="line"><span class="symbol">195 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">198 </span>   pop r3</span><br><span class="line"><span class="symbol">200 </span>   r3 -= <span class="number">11</span></span><br><span class="line"><span class="symbol">203 </span>   r3 -= <span class="number">107</span></span><br><span class="line"><span class="symbol">206 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r3</span><br><span class="line"><span class="symbol">209 </span>   pop r3</span><br><span class="line"><span class="symbol">211 </span>   r3 -= <span class="number">4</span></span><br><span class="line"><span class="symbol">214 </span>   r3 -= <span class="number">48</span></span><br><span class="line"><span class="symbol">217 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r3</span><br><span class="line"><span class="symbol">220 </span>   pop r1</span><br><span class="line"><span class="symbol">222 </span>   r1 -= <span class="number">19</span></span><br><span class="line"><span class="symbol">225 </span>   r1 -= <span class="number">87</span></span><br><span class="line"><span class="symbol">228 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">231 </span>   pop r0</span><br><span class="line"><span class="symbol">233 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">236 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">239 </span>   pop r2</span><br><span class="line"><span class="symbol">241 </span>   r2 -= <span class="number">26</span></span><br><span class="line"><span class="symbol">244 </span>   r2 -= <span class="number">84</span></span><br><span class="line"><span class="symbol">247 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">250 </span>   pop r2</span><br><span class="line"><span class="symbol">252 </span>   r2 -= <span class="number">4</span></span><br><span class="line"><span class="symbol">255 </span>   r2 -= <span class="number">48</span></span><br><span class="line"><span class="symbol">258 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">261 </span>   pop r1</span><br><span class="line"><span class="symbol">263 </span>   r1 -= <span class="number">7</span></span><br><span class="line"><span class="symbol">266 </span>   r1 -= <span class="number">44</span></span><br><span class="line"><span class="symbol">269 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">272 </span>   pop r1</span><br><span class="line"><span class="symbol">274 </span>   r1 -= <span class="number">15</span></span><br><span class="line"><span class="symbol">277 </span>   r1 -= <span class="number">94</span></span><br><span class="line"><span class="symbol">280 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">283 </span>   pop r0</span><br><span class="line"><span class="symbol">285 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">288 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">291 </span>   pop r1</span><br><span class="line"><span class="symbol">293 </span>   r1 -= <span class="number">41</span></span><br><span class="line"><span class="symbol">296 </span>   r1 -= <span class="number">44</span></span><br><span class="line"><span class="symbol">299 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">302 </span>   pop r2</span><br><span class="line"><span class="symbol">304 </span>   r2 -= <span class="number">39</span></span><br><span class="line"><span class="symbol">307 </span>   r2 -= <span class="number">72</span></span><br><span class="line"><span class="symbol">310 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">313 </span>   pop r2</span><br><span class="line"><span class="symbol">315 </span>   r2 -= <span class="number">45</span></span><br><span class="line"><span class="symbol">318 </span>   r2 -= <span class="number">76</span></span><br><span class="line"><span class="symbol">321 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">324 </span>   pop r0</span><br><span class="line"><span class="symbol">326 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">329 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">332 </span>   pop r0</span><br><span class="line"><span class="symbol">334 </span>   r0 -= <span class="number">7</span></span><br><span class="line"><span class="symbol">337 </span>   r0 -= <span class="number">41</span></span><br><span class="line"><span class="symbol">340 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">343 </span>   pop r1</span><br><span class="line"><span class="symbol">345 </span>   r1 -= <span class="number">35</span></span><br><span class="line"><span class="symbol">348 </span>   r1 -= <span class="number">65</span></span><br><span class="line"><span class="symbol">351 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r1</span><br><span class="line"><span class="symbol">354 </span>   pop r0</span><br><span class="line"><span class="symbol">356 </span>   r0 -= <span class="number">95</span></span><br><span class="line"><span class="symbol">359 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">362 </span>   pop r2</span><br><span class="line"><span class="symbol">364 </span>   r2 -= <span class="number">44</span></span><br><span class="line"><span class="symbol">367 </span>   r2 -= <span class="number">72</span></span><br><span class="line"><span class="symbol">370 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r2</span><br><span class="line"><span class="symbol">373 </span>   pop r3</span><br><span class="line"><span class="symbol">375 </span>   r3 -= <span class="number">4</span></span><br><span class="line"><span class="symbol">378 </span>   r3 -= <span class="number">48</span></span><br><span class="line"><span class="symbol">381 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r3</span><br><span class="line"><span class="symbol">384 </span>   pop r3</span><br><span class="line"><span class="symbol">386 </span>   r3 -= <span class="number">0</span></span><br><span class="line"><span class="symbol">389 </span>   r3 -= <span class="number">104</span></span><br><span class="line"><span class="symbol">392 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r3</span><br><span class="line"><span class="symbol">395 </span>   pop r0</span><br><span class="line"><span class="symbol">397 </span>   r0 -= <span class="number">28</span></span><br><span class="line"><span class="symbol">400 </span>   r0 -= <span class="number">91</span></span><br><span class="line"><span class="symbol">403 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">406 </span>   pop r0</span><br><span class="line"><span class="symbol">408 </span>   r0 -= <span class="number">123</span></span><br><span class="line"><span class="symbol">411 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">414 </span>   pop r0</span><br><span class="line"><span class="symbol">416 </span>   r0 -= <span class="number">70</span></span><br><span class="line"><span class="symbol">419 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">422 </span>   pop r0</span><br><span class="line"><span class="symbol">424 </span>   r0 -= <span class="number">84</span></span><br><span class="line"><span class="symbol">427 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">430 </span>   pop r0</span><br><span class="line"><span class="symbol">432 </span>   r0 -= <span class="number">67</span></span><br><span class="line"><span class="symbol">435 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">438 </span>   pop r0</span><br><span class="line"><span class="symbol">440 </span>   r0 -= <span class="number">115</span></span><br><span class="line"><span class="symbol">443 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">446 </span>   pop r0</span><br><span class="line"><span class="symbol">448 </span>   r0 -= <span class="number">114</span></span><br><span class="line"><span class="symbol">451 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">454 </span>   pop r0</span><br><span class="line"><span class="symbol">456 </span>   r0 -= <span class="number">117</span></span><br><span class="line"><span class="symbol">459 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">462 </span>   pop r0</span><br><span class="line"><span class="symbol">464 </span>   r0 -= <span class="number">101</span></span><br><span class="line"><span class="symbol">467 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">470 </span>   pop r0</span><br><span class="line"><span class="symbol">472 </span>   r0 -= <span class="number">116</span></span><br><span class="line"><span class="symbol">475 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">478 </span>   pop r0</span><br><span class="line"><span class="symbol">480 </span>   r0 -= <span class="number">97</span></span><br><span class="line"><span class="symbol">483 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">486 </span>   pop r0</span><br><span class="line"><span class="symbol">488 </span>   r0 -= <span class="number">109</span></span><br><span class="line"><span class="symbol">491 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">494 </span>   pop r0</span><br><span class="line"><span class="symbol">496 </span>   r0 -= <span class="number">97</span></span><br><span class="line"><span class="symbol">499 </span>   jmp <span class="number">37</span> <span class="keyword">if</span> r0</span><br><span class="line"><span class="symbol">502 </span>   jmp <span class="number">27</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">q</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(a),end =<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#对应每一个循环条件</span></span><br><span class="line"></span><br><span class="line">q(<span class="number">97</span>)</span><br><span class="line">q(<span class="number">109</span>)</span><br><span class="line">q(<span class="number">97</span>)</span><br><span class="line">q(<span class="number">116</span>)</span><br><span class="line">q(<span class="number">101</span>)</span><br><span class="line">q(<span class="number">117</span>)</span><br><span class="line">q(<span class="number">114</span>)</span><br><span class="line">q(<span class="number">115</span>)</span><br><span class="line">q(<span class="number">67</span>)</span><br><span class="line">q(<span class="number">84</span>)</span><br><span class="line">q(<span class="number">70</span>)</span><br><span class="line">q(<span class="number">123</span>)</span><br><span class="line">q(<span class="number">28</span>+<span class="number">91</span>)</span><br><span class="line">q(<span class="number">104</span>)</span><br><span class="line">q(<span class="number">4</span>+<span class="number">48</span>)</span><br><span class="line">q(<span class="number">44</span>+<span class="number">72</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">35</span>+<span class="number">65</span>)</span><br><span class="line">q(<span class="number">7</span>+<span class="number">41</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">45</span>+<span class="number">76</span>)</span><br><span class="line">q(<span class="number">39</span>+<span class="number">72</span>)</span><br><span class="line">q(<span class="number">41</span>+<span class="number">44</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">15</span>+<span class="number">94</span>)</span><br><span class="line">q(<span class="number">7</span>+<span class="number">44</span>)</span><br><span class="line">q(<span class="number">4</span>+<span class="number">48</span>)</span><br><span class="line">q(<span class="number">26</span>+<span class="number">84</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">19</span>+<span class="number">87</span>)</span><br><span class="line">q(<span class="number">4</span>+<span class="number">48</span>)</span><br><span class="line">q(<span class="number">11</span>+<span class="number">107</span>)</span><br><span class="line">q(<span class="number">4</span>+<span class="number">48</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">7</span>+<span class="number">98</span>)</span><br><span class="line">q(<span class="number">115</span>)</span><br><span class="line">q(<span class="number">110</span>)</span><br><span class="line">q(<span class="number">116</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">65</span>)</span><br><span class="line">q(<span class="number">95</span>)</span><br><span class="line">q(<span class="number">97</span>+<span class="number">21</span>)</span><br><span class="line">q(<span class="number">10</span>+<span class="number">99</span>)</span><br><span class="line">q(<span class="number">9</span>+<span class="number">54</span>)</span><br><span class="line">q(<span class="number">125</span>)</span><br><span class="line"><span class="comment">#amateursCTF&#123;wh4t_d0_yoU_m34n_j4v4_isnt_A_vm?&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这篇介绍Re中的VM</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>z3基本语法</title>
    <link href="https://www.pri87.vip/posts/b4d67d75.html"/>
    <id>https://www.pri87.vip/posts/b4d67d75.html</id>
    <published>2024-01-17T05:31:24.000Z</published>
    <updated>2024-01-22T14:02:06.479Z</updated>
    
    <content type="html"><![CDATA[<p>z3是一个约束求解器，可以理解为解方程的工具，每一个约束都要写在x.add的语句中。</p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>z3一共有三种变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b = Int(<span class="string">&#x27;a b&#x27;</span>)<span class="comment">#声明多个整数型变量</span></span><br><span class="line">a = Real(<span class="string">&#x27;a&#x27;</span>)<span class="comment">#声明单个实型变量</span></span><br><span class="line">a,b = Bitvec(<span class="string">&#x27;a b&#x27;</span>,<span class="number">8</span>)<span class="comment">#声明多个8位的向量型变量</span></span><br></pre></td></tr></table></figure><h2 id="使用例"><a href="#使用例" class="headerlink" title="使用例"></a>使用例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b = Int(<span class="string">&#x27;a b&#x27;</span>)</span><br><span class="line">solve(a+b == <span class="number">10</span>,a + <span class="number">3</span> * b ==<span class="number">12</span>)<span class="comment">#条件少时可以直接用solve不用add</span></span><br><span class="line"><span class="comment">#result : [b = 1,a = 9]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=Int(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y=Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (simplify(x + y + <span class="number">2</span>*x + <span class="number">3</span>))<span class="comment">#simplify用于打印化简后的表达式</span></span><br><span class="line"><span class="built_in">print</span> (simplify(x &lt; y + x + <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span> (simplify(And(x + <span class="number">1</span> &gt;= <span class="number">3</span>, x**<span class="number">2</span> + x**<span class="number">2</span> + y**<span class="number">2</span> + <span class="number">2</span> &gt;= <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#3 + 3*x + y</span></span><br><span class="line"><span class="comment">#Not(y &lt;= -2)</span></span><br><span class="line"><span class="comment">#And(x &gt;= 2, 2*x**2 + y**2 &gt;= 3)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a,b = Ints(<span class="string">&#x27;a b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s=Solver()  <span class="comment">#创建一个解的对象s</span></span><br><span class="line">s.add(a + b == <span class="number">10</span>)<span class="comment">#添加约束条件</span></span><br><span class="line">s.add(a + <span class="number">3</span> * b == <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat: <span class="comment">#check() 检查解是否存在，存在会return &#x27;sat&#x27;</span></span><br><span class="line">result = s.model() <span class="comment">#输出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result[a])</span><br><span class="line"><span class="built_in">print</span>(result[b])</span><br></pre></td></tr></table></figure><h2 id="z3语法"><a href="#z3语法" class="headerlink" title="z3语法"></a>z3语法</h2><p>对于普通的自定义逻辑（带位移，异或之类的不好逆向），z3可以秒杀</p><p>比如这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">cmp = [<span class="number">0x66</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0xFD</span>, <span class="number">0x3C</span>, <span class="number">0x55</span>, <span class="number">0x90</span>, <span class="number">0x24</span>, <span class="number">0x57</span>, <span class="number">0xF6</span>, <span class="number">0x5D</span>, <span class="number">0xB1</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x81</span>, <span class="number">0xFD</span>, <span class="number">0x36</span>, <span class="number">0xA9</span>, <span class="number">0x1F</span>, <span class="number">0xA1</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x80</span>, <span class="number">0x8F</span>, <span class="number">0xCE</span>, <span class="number">0x77</span>, <span class="number">0xE8</span>, <span class="number">0x23</span>, <span class="number">0x9E</span>, <span class="number">0x27</span>, <span class="number">0x60</span>, <span class="number">0x2F</span>, <span class="number">0xA5</span>, <span class="number">0xCF</span>, <span class="number">0x1B</span>, <span class="number">0xBD</span>, <span class="number">0x32</span>, <span class="number">0xDB</span>, <span class="number">0xFF</span>, <span class="number">0x28</span>, <span class="number">0xA4</span>, <span class="number">0x5D</span>]</span><br><span class="line">f = Solver()</span><br><span class="line"></span><br><span class="line">flag,out = pini(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = n = a = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> pl(<span class="number">7</span>,<span class="number">6</span>):</span><br><span class="line">    a = <span class="number">6</span> * i + j</span><br><span class="line">    m = flag[a]</span><br><span class="line">    n = flag[a]</span><br><span class="line">    m = ~m</span><br><span class="line">    m &amp;= i * (j + <span class="number">2</span>)</span><br><span class="line">    n = n &amp; ~(i * (j + <span class="number">2</span>)) | m</span><br><span class="line">    a = <span class="number">7</span> * j + i</span><br><span class="line">    out[a] = n</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">42</span>):</span><br><span class="line">    <span class="keyword">if</span> ( i % <span class="number">2</span> == <span class="number">1</span> ):</span><br><span class="line">        out[i] *= <span class="number">107</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        out[i] += out[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    f.add(cmp[i]==out[i])</span><br><span class="line">isflag(f,flag)</span><br><span class="line">pcheck(f,flag)</span><br></pre></td></tr></table></figure><p>但是可能遇到要对z3型数据判断的情况，比如下面这个题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> flag[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-C0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> out2[<span class="number">64</span>]; <span class="comment">// [rsp+40h] [rbp-80h] BYREF</span></span><br><span class="line">  __int64 check[<span class="number">4</span>]; <span class="comment">// [rsp+80h] [rbp-40h]</span></span><br><span class="line">  __int16 v8; <span class="comment">// [rsp+A0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> len; <span class="comment">// [rsp+B0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+B4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+B8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+BCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  check[<span class="number">0</span>] = <span class="number">0x10C0105000D07</span>LL;</span><br><span class="line">  check[<span class="number">1</span>] = <span class="number">0xF0509000F050D00</span>LL;</span><br><span class="line">  check[<span class="number">2</span>] = <span class="number">0x701030305020003</span>LL;</span><br><span class="line">  check[<span class="number">3</span>] = <span class="number">0xC02070201020B07</span>LL;</span><br><span class="line">  v8 = <span class="number">514</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  len = <span class="number">17</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hi, PLZ input input&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">  <span class="built_in">memset</span>(out2, <span class="number">0</span>, <span class="keyword">sizeof</span>(out2));</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == len )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">16</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)flag[i] &gt; <span class="string">&#x27;`&#x27;</span> &amp;&amp; (<span class="type">unsigned</span> __int8)flag[i] &lt;= <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">        flag[i] = (flag[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)flag[i] &gt; <span class="string">&#x27;@&#x27;</span> &amp;&amp; (<span class="type">unsigned</span> __int8)flag[i] &lt;= <span class="string">&#x27;Z&#x27;</span> )</span><br><span class="line">        flag[i] = (flag[i] ^ <span class="number">0x4B</span>) - <span class="number">1</span>;</span><br><span class="line">      out2[<span class="number">2</span> * i] = (<span class="type">unsigned</span> __int8)flag[i] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">      out2[<span class="number">2</span> * i + <span class="number">1</span>] = flag[i] &amp; <span class="number">0xF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_BYTE *)check + <span class="number">2</span> * i) != out2[<span class="number">2</span> * (len - i) - <span class="number">2</span>]</span><br><span class="line">        &amp;&amp; *((_BYTE *)check + <span class="number">2</span> * i + <span class="number">1</span>) != out2[<span class="number">2</span> * (len - i) - <span class="number">2</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wrong wrong wrong&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;woc,you got it,flag is your input&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a Ha ? wrong1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数是这样的，这里它不止对flag进行分类讨论，还在讨论后进行计算：z3型可以直接进行计算，包括加和乘，对于位向量还可以左右移以及异或，但是都不能进行判断大小，如果要进行判断必须要在add中做判断，比如判断两个值是否相等：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.add(check[<span class="number">2</span> * i]==out3[<span class="number">2</span>*(<span class="built_in">len</span>-i-<span class="number">1</span>)])</span><br></pre></td></tr></table></figure><p>那么如果我们根据这道题写，还需要If函数（Z3自带）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If(condition,a,b)</span><br></pre></td></tr></table></figure><p>意思是：如果条件成立，语句视为a，否则视为b</p><p>那么和add结合起来看就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f.add(If(And(out[i] &gt; <span class="number">0x60</span>, out[i] &lt;= <span class="number">0x7a</span>), out2[i] == (out[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>, <span class="literal">True</span>))</span><br><span class="line">f.add(If(And(out[i] &gt; <span class="number">0x40</span>, out[i] &lt;= <span class="number">0x5a</span>), out2[i] == (out[i] ^ <span class="number">0x4b</span>) - <span class="number">1</span>, <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>如果条件成立，添加a约束，否则添加b约束，这里的b约束恒为真，表示如果条件不成立就跳过这个约束。可是问题来了，我们知道out[i]是由flag初始化的，也就是说out是z3位向量型，但是out2呢？如果把这里的out2视作一个普通列表，让out[i]计算后的值返回给out2，好像也没问题。但是！！这里的语句并不是赋值语句，而是判断语句，是一个<code>约束</code>，如果这里out2=34*[0],那么就是让out[i]运算后的值恒等于0的条件成立，显然这是无解的，也就是说，这里的两个变量都必须是位向量才可以，同时，不应该忘了如果两个条件均不成立，就要让out=out2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.add(out2[i] == If(And(out[i] &gt; <span class="number">0x40</span>, out[i] &lt;= <span class="number">0x5a</span>), (out[i] ^ <span class="number">0x4b</span>) - <span class="number">1</span>,If(And(out[i] &gt; <span class="number">0x60</span>, out[i] &lt;= <span class="number">0x7a</span>), (out[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>, out[i])))</span><br></pre></td></tr></table></figure><p>进行if的嵌套完成这个效果</p><p>之后还要对flag继续做变换变成最后的数组，且数组大小翻倍，如果后面的检查比较简单，可以直接在check==的时候写，但是由于这里的比较不是很直观，不如写出来变成单独的列表再比较，这时又要涉及到out2变成out3的问题了，由于这个是直接赋值，没有判断，所以方便起见，直接写赋值语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out3[<span class="number">2</span>*i] = LShR(out2[i], <span class="number">4</span>)</span><br><span class="line">out3[<span class="number">2</span>*i+<span class="number">1</span>] = out2[i] &amp; <span class="number">0xf</span></span><br></pre></td></tr></table></figure><p>通过这两个例子可以发现，当想要赋值时，如果要对z3型变量进行判断/比较，就必须用add表达式，在其中，为了达成赋值效果，必须新建一个z3量才可以成功，但是如果是直接赋值，则直接对列表赋值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">check = [<span class="number">0x07</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x02</span>]</span><br><span class="line">flag,out = pini(<span class="number">17</span>)</span><br><span class="line">out2 = [BitVec(<span class="string">&#x27;out2[%2d]&#x27;</span> % i , <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">34</span>)]</span><br><span class="line">out3 = [<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line"><span class="built_in">len</span> = <span class="number">17</span></span><br><span class="line">f = Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line"></span><br><span class="line">    f.add(out2[i] == If(And(out[i] &gt; <span class="number">0x40</span>, out[i] &lt;= <span class="number">0x5a</span>), (out[i] ^ <span class="number">0x4b</span>) - <span class="number">1</span>,</span><br><span class="line">                     If(And(out[i] &gt; <span class="number">0x60</span>, out[i] &lt;= <span class="number">0x7a</span>), (out[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>, out[i])))</span><br><span class="line"></span><br><span class="line">    out3[<span class="number">2</span>*i] = LShR(out2[i], <span class="number">4</span>)</span><br><span class="line">    out3[<span class="number">2</span>*i+<span class="number">1</span>] = out2[i] &amp; <span class="number">0xf</span></span><br><span class="line">isflag(f,flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    f.add(check[<span class="number">2</span> * i]==out3[<span class="number">2</span>*(<span class="built_in">len</span>-i-<span class="number">1</span>)])</span><br><span class="line">    f.add(check[<span class="number">2</span> * i + <span class="number">1</span>]==out3[<span class="number">2</span>*(<span class="built_in">len</span>-i-<span class="number">1</span>)+<span class="number">1</span>])</span><br><span class="line">pcheck(f,flag)</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span></span><br></pre></td></tr></table></figure><p>以上均是解</p><p>补充说明：</p><p>如果想约束某个值只能出现一次，比如{,}，可以用Sum：</p><p>Sum用于计算一系列表达式的和类似于加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(Sum([If(i == BitVecVal(<span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>), <span class="number">8</span>), <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag]) &lt;= <span class="number">1</span>)</span><br><span class="line">s.add(Sum([If(i == BitVecVal(<span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>), <span class="number">8</span>), <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag]) &lt;= <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>计算flag中等于括号的值的表达式个数，然后让其小于等于1</p>]]></content>
    
    
    <summary type="html">对z3使用的思考</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="符号执行" scheme="https://www.pri87.vip/tags/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/"/>
    
    <category term="z3" scheme="https://www.pri87.vip/tags/z3/"/>
    
  </entry>
  
  <entry>
    <title>内联钩子原理</title>
    <link href="https://www.pri87.vip/posts/23a55d41.html"/>
    <id>https://www.pri87.vip/posts/23a55d41.html</id>
    <published>2024-01-16T18:33:25.000Z</published>
    <updated>2024-01-22T07:59:25.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Inline-hook"><a href="#Inline-hook" class="headerlink" title="Inline hook"></a>Inline hook</h1><p>Inline hook(内联钩子)是一种再程序运行时<code>修改函数执行流程</code>的技术。通过修改函数原始代码 讲目标函数的执行路径重定向到自定义的代码段，从而实现对目标函数的拦截和修改。</p><p><img src="https://s2.loli.net/2024/01/11/AidLhJUkqP7NXRY.png" alt="image-20240111101326816"></p><p><img src="https://s2.loli.net/2024/01/11/LOXJnCdHrv5UzbA.png" alt="image-20240111103102751"></p><p>对一个函数hook的方法：</p><ol><li>从哪来到哪去</li><li>如何实现跳转<br>E9 + 四字节相对地址（E9是jmp的值）（相当于一共5字节）<br>修改时，如果指令长度大于5，则多余的值会和下一条代码结合为新代码，所以防止崩溃可以写成nop（90）<br>这个相对地址不算这条指令本身</li><li>如何修改代码<br>当已经有一个我们想要hook的函数时，需要先获得它的传入参数，并令hook函数的参数与想要hook的函数的参数类型，个数相同，以保证堆栈平衡<br>为了在运行时修改代码需要virtualprotect函数（windows下）来修改某处的访问权限</li></ol><p>注：实验环境为x86，因为在x64下相对地址的值大于4字节导致不能正常跳转</p><p>那么尝试修改并hook一个函数：</p><h2 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">hooker(MessageBoxW, mybox, <span class="number">5</span>);</span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;Hello&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数先调用hooker函数，修改messagebox的内容，然后执行被修改的messagebox函数</p><p>那么hooker函数就要传入messagebox函数的地址，和我们想要修改成的函数的地址，这里的长度可以是固定的，可以不写5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">hooker</span><span class="params">(<span class="type">void</span>* src, <span class="type">void</span>* dst, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">DWORD old;</span><br><span class="line">VirtualProtect(src, len, <span class="number">0x40</span>, &amp;old);</span><br><span class="line"><span class="built_in">memcpy</span>(back, src, len);</span><br><span class="line">*(BYTE*)src = <span class="number">0xE9</span>;</span><br><span class="line"><span class="type">uintptr_t</span> ra = (<span class="type">uintptr_t</span>)dst - (<span class="type">uintptr_t</span>)src - <span class="number">5</span>;</span><br><span class="line">*(DWORD*)((BYTE*)src + <span class="number">1</span>) = ra;</span><br><span class="line">VirtualProtect(src, len, old, &amp;old);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数外面创建一个备份BYTE back[5];用来保存原始数据，然后用VirtualProtect修改函数前5个字节变成可写属性(0x40),然后备份原始属性到old并修改，核心公式是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(BYTE*)src = <span class="number">0xE9</span>;</span><br><span class="line"><span class="type">uintptr_t</span> ra = (<span class="type">uintptr_t</span>)dst - (<span class="type">uintptr_t</span>)src - <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>然后改回去</p><p>最后就是实现自己的函数，一定要注意函数的传入参数必须要和原函数相同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> WINAPI <span class="title function_">mybox</span><span class="params">(_In_opt_ HWND hWnd, </span></span><br><span class="line"><span class="params"> _In_opt_ LPCWSTR lpText, </span></span><br><span class="line"><span class="params"> _In_opt_ LPCWSTR lpCaption, </span></span><br><span class="line"><span class="params"> _In_ UINT uType)</span></span><br><span class="line">&#123;</span><br><span class="line">lpText = <span class="string">L&quot;hooked&quot;</span>;<span class="comment">//想要修改的效果</span></span><br><span class="line">unhook(MessageBoxW, back, <span class="number">5</span>);</span><br><span class="line">MessageBoxW(hWnd, lpText, lpCaption, uType);</span><br><span class="line">hooker(MessageBoxW, mybox, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过去官网直接抄传入参数就可以直接得到参数名<br>同时注意要先解除钩子再调用原函数不然会陷入循环递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">unhook</span><span class="params">(<span class="type">void</span>* src, <span class="type">void</span>* back, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">DWORD old;</span><br><span class="line">VirtualProtect(src, len, <span class="number">0x40</span>, &amp;old);</span><br><span class="line"><span class="built_in">memcpy</span>(src, back, <span class="number">5</span>);</span><br><span class="line">VirtualProtect(src, len, old, &amp;old);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用完目标函数后，还要再次钩住函数，等待下一次调用</p><hr><h2 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h2><p>由于刚刚的hook函数，每次必须要先hook，然后再unhook，十分麻烦。同时，每次调用messagebox的效果都是一样的，如果想要实现显示其它东西，需要另一种方法。</p><p>对于第一个问题：如果不对hook过的函数unhook，那么就会陷入死循环，无限调用自己，如果现在有一个和messagebox的函数效果相同的函数，在hook后，不调用messagebox，而是调用这个函数，就不会内存溢出</p><p>对于第二个问题：如果有一个和messagebox函数相同的函数，那么直接调用那个函数并修改参数就可以显示其它东西。</p><p>因此，只要能构造出一个和我们想hook的函数功能相同的函数就可以解决上面两个问题。</p><p><img src="https://s2.loli.net/2024/01/22/qxNQeGt8BPVSALM.png" alt="hook前" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2024/01/22/3d5KXVOaSiGCMLx.png" alt="hook后" /></p><p>那么先构造trampoline函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">trampoline</span><span class="params">(<span class="type">void</span>* src, <span class="type">void</span>* dst, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">BYTE* boxin = (BYTE*)VirtualAlloc(<span class="number">0</span>, len + <span class="number">5</span>, <span class="number">0x00001000</span>, <span class="number">0x40</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(boxin, src, len);</span><br><span class="line">*(boxin + len) = <span class="number">0xe9</span>;</span><br><span class="line">*(DWORD*)(boxin + len + <span class="number">1</span>) = (BYTE*)src - boxin - <span class="number">5</span>;</span><br><span class="line"><span class="comment">//以下为原hooker的内容</span></span><br><span class="line">DWORD old;</span><br><span class="line">VirtualProtect(src, len, <span class="number">0x40</span>, &amp;old);</span><br><span class="line">*(BYTE*)src = <span class="number">0xE9</span>;</span><br><span class="line"><span class="type">uintptr_t</span> ra = (<span class="type">uintptr_t</span>)dst - (<span class="type">uintptr_t</span>)src - <span class="number">5</span>;</span><br><span class="line">*(DWORD*)((BYTE*)src + <span class="number">1</span>) = ra;</span><br><span class="line">VirtualProtect(src, len, old, &amp;old);</span><br><span class="line"><span class="keyword">return</span> boxin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前4句都是在创建功能相同函数，直接申请内存把messagebox前5个字节复制过来，然后jmp到messagebox里（偷懒）</p><p>第5句到10句的hooker和之前的hooker一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">hooker</span><span class="params">(<span class="type">void</span>* src, <span class="type">void</span>* dst, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">DWORD old;</span><br><span class="line">VirtualProtect(src, len, <span class="number">0x40</span>, &amp;old);</span><br><span class="line">*(BYTE*)src = <span class="number">0xE9</span>;</span><br><span class="line"><span class="type">uintptr_t</span> ra = (<span class="type">uintptr_t</span>)dst - (<span class="type">uintptr_t</span>)src - <span class="number">5</span>;</span><br><span class="line">*(DWORD*)((BYTE*)src + <span class="number">1</span>) = ra;</span><br><span class="line">VirtualProtect(src, len, old, &amp;old);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一句return是为了之后使用不被hook的函数</p><p>然后先把相同功能函数的调用写出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using PFUN = <span class="type">int</span> (WINAPI*)(</span><br><span class="line">_In_opt_ HWND hWnd,</span><br><span class="line">_In_opt_ LPCWSTR lpText,</span><br><span class="line">_In_opt_ LPCWSTR lpCaption,</span><br><span class="line">_In_ UINT uType);</span><br><span class="line">PFUN pfun = nullptr;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">pfun = (PFUN)trampoline(MessageBoxW, mybox, <span class="number">5</span>);</span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;Hello&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;Hello&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;Hello&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">pfun(<span class="number">0</span>, <span class="string">L&quot;123123&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后添上hook函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> WINAPI <span class="title function_">mybox</span><span class="params">(_In_opt_ HWND hWnd, </span></span><br><span class="line"><span class="params"> _In_opt_ LPCWSTR lpText, </span></span><br><span class="line"><span class="params"> _In_opt_ LPCWSTR lpCaption, </span></span><br><span class="line"><span class="params"> _In_ UINT uType)</span></span><br><span class="line">&#123;</span><br><span class="line">lpText = <span class="string">L&quot;hooked&quot;</span>;</span><br><span class="line">pfun(hWnd, lpText, lpCaption, uType);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样调用时，会先显示3个hook，在最后显示123123.</p><hr><p>完</p>]]></content>
    
    
    <summary type="html">内联钩子尝试</summary>
    
    
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="实践" scheme="https://www.pri87.vip/tags/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="hook" scheme="https://www.pri87.vip/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>密码学数学基础2</title>
    <link href="https://www.pri87.vip/posts/84e84aaa.html"/>
    <id>https://www.pri87.vip/posts/84e84aaa.html</id>
    <published>2024-01-16T07:42:45.000Z</published>
    <updated>2024-03-02T08:34:41.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h2><p>一：<br>二元关系”=”：</p><ul><li>自反性：对于所有$a\in R$,都有$a=a$</li><li>对称性：对于所有$a,b\in R$,都有$a=b\rightarrow b=a$</li><li>传递性：对于所有$a,b,c\in R$,都有$a=b,b=c\rightarrow a=c$</li></ul><p>二：</p><p>二元关系”$\cong$”:</p><p>同样有自反性，对称性，传递性</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>设集合S，以及一个定义在S上的二元关系R，若R满足以下性质，则称它为”等价关系”,以元组的形式表示</p><ul><li>自反性：对于所有$a\in S$,都有($a,a)\in R$</li><li>对称性：对于所有$a,b\in S$,都有$(a,a)\in R$</li><li>传递性：对于所有$a,b,c\in S$,都有$(a,b)\in R,(b,c)\in R\rightarrow (a,c)\in R$</li></ul><hr><h2 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>$a \equiv b(\mod n)$：设n为正整数，整数a，b分别模n，如果得到相同的余数(或n|(a-b))，就称a和b在模n的情况下满足同余关系，n被称为模数。同余是一种关系,而不是一种运算</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>$a \equiv b(\mod n)\iff a=qn+b,\exists q\in Z\rightarrow n|a-b$</p><p>同余是一种<code>等价关系</code>,以下性质可以逆推</p><ul><li>对于同一个除数，两个数的乘积与它们余数的乘积同余。</li><li>对于同一个除数，如果有两个整数同余，那么它们的差就一定能被这个除数整除。</li><li>对于同一个除数，如果两个数同余，那么他们的乘方仍然同余。</li><li>对于同一个除数，若三个数a≡b（mod m），b≡c（mod m），那么a,b,c三个数对于除数m都同余（传递性）。</li><li>对于同一个除数，若四个数a≡b（mod m），c≡d（mod m），那么a±c≡c±d（mod m），（可加减性）。</li><li>对于同一个除数，若四个数a≡b（mod m），c≡d（mod m），那么ac≡cd（mod m），（可乘性）</li></ul><p>同余的运算性质</p><p>若$a \equiv b(\mod n)$，则：</p><ul><li>$a\pm m \equiv b\pm m(\mod n),m\in Z$</li><li>$a<em> m \equiv b</em> m(\mod n),m\in Z$</li><li>$a^m \equiv b^m(\mod n),m\in N$</li></ul><p>若同时$c \equiv d(\mod n)$,则：</p><ul><li>$a\pm c \equiv b\pm d(\mod n)$</li><li>$a<em> c \equiv b</em> d(\mod n)$</li></ul><hr><h2 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h2><p>倒数：两个数的乘积为1，这两个数互为倒数</p><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>设$a\in Z,n\in N,如果az\equiv 1(\mod n)$,则称z是模n下a的乘法逆元，记作$a^{-1}=z$</p><p>在模运算下，所有的形如$a^{-1}$的值都可以直接被代换成a在某模数下的乘法逆元，然后继续运算</p><p>只有当一个整数和模数互素的时候，它才会有乘法逆元，即：</p><script type="math/tex; mode=display">gcd(a,n)=1\iff 模n下有乘法逆元</script><p>求乘法逆元：</p><p>扩展欧几里得算法</p><p>根据最大公约数表示定理：</p><script type="math/tex; mode=display">gcd(a,n)=1 \rightarrow as+tn = 1</script><p>等式两边同时mod n:</p><script type="math/tex; mode=display">as \equiv 1 (\mod n)</script><p>∴模n下a的逆元是s</p><p>∴调用gcd函数传入a和n算出的s即为乘法逆元</p><hr><h2 id="一次同余方程"><a href="#一次同余方程" class="headerlink" title="一次同余方程"></a>一次同余方程</h2><script type="math/tex; mode=display">a \equiv b(\mod n)</script><p>等价于下面这个形式，其中m是a，b，n的公因数</p><script type="math/tex; mode=display">a/m \equiv b/m(\mod n/m)</script><p>如果gcd(m,n)=1,那么</p><script type="math/tex; mode=display">a/m \equiv b/m(\mod n)</script><p>才是成立的</p><h3 id="同余下的消去律"><a href="#同余下的消去律" class="headerlink" title="同余下的消去律"></a>同余下的消去律</h3><p>设$a,n\in Z,n&gt;0$,如果$gcd(a,n)=d$,有</p><script type="math/tex; mode=display">az \equiv az'(\mod n)\rightarrow z \equiv z'(\mod n/d)</script><h3 id="同余方程的解"><a href="#同余方程的解" class="headerlink" title="同余方程的解"></a>同余方程的解</h3><p>$x \equiv b(\mod n)$的解集：{$b\pm nk$,其中$k=0,1,2,…$}</p><p>同时有规律:<br>原模数为n，终模数为m，设n/m = d,有0~n-1之间解的数量等于d</p><h3 id="一次同余方程有解的条件"><a href="#一次同余方程有解的条件" class="headerlink" title="一次同余方程有解的条件"></a>一次同余方程有解的条件</h3><p>若gcd(a,n)=d,则</p><script type="math/tex; mode=display">ax \equiv b(\mod n)有解 \iff d|b</script><hr><h2 id="剩余类"><a href="#剩余类" class="headerlink" title="剩余类"></a>剩余类</h2><h3 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h3><p>等价类是等价关系的一种性质，若~是S上的等价关系，对于$a\in S$,定义其等价类为{$x\in S|x\sim a$}</p><p>由于同余关系是等价关系，所以同余中也有等价类，被叫做剩余类</p><h3 id="剩余类-1"><a href="#剩余类-1" class="headerlink" title="剩余类"></a>剩余类</h3><p>设$a\in Z$,定义其剩余类为{$x\in Z|x\equiv a(\mod n)$}<br>记作$[a]_n$简记为$[a]$,最简可化为a(如果没有歧义)</p><p> 剩余类中每一个整数都叫做这个剩余类的代表元.<br>$Z_n$表示模n下所有剩余类的集合</p><p>定义剩余类之间的计算：</p><p>$[a]+[b]=[a+b]$</p><p>$[a]<em>[b]=[a</em>b]$</p><p>即：最后得到的是以a+b/ab为代表元的剩余类</p><p>设$u,v\in Z_n$（$Z_n$是包含所有剩余类的集合）,若uv=[1],则u，v互为乘法逆元</p><p>再定义$Z_n^*$为$Z_n$中有乘法逆元的剩余类</p><h3 id="Z-n-与-Z-n-的关系"><a href="#Z-n-与-Z-n-的关系" class="headerlink" title="$Z_n^*$与$Z_n$的关系"></a>$Z_n^*$与$Z_n$的关系</h3><ul><li>n为素数：$Z_n^*$=$Z_n$ \ {[0]}</li><li>n为合数：$Z_n^*<script type="math/tex">\subsetneq</script>Z_n$ \ {[0]}</li></ul><hr><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><h3 id="一次同余方程组"><a href="#一次同余方程组" class="headerlink" title="一次同余方程组"></a>一次同余方程组</h3><p>设两两互素的模数$n<em>1,…,n_m\in N$,及任意整数$a_1,…,a_m\in Z$,并设$n=\prod</em>{i=1}^mn_i$</p><script type="math/tex; mode=display">\begin{cases}x\equiv a_1(\mod n_1)\\...\\x\equiv a_m(\mod n_m)\end{cases}</script><p>为了求解这个方程，我们需要中国剩余定理CRT</p><h3 id="中国剩余定理-1"><a href="#中国剩余定理-1" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><p>设两两互素的模数$n<em>1,…,n_m\in N$,及任意整数$a_1,…,a_m\in Z$,并设$n=\prod</em>{i=1}^mn_i$，方程组</p><script type="math/tex; mode=display">\begin{cases}x\equiv a_1(\mod n_1)\\...\\x\equiv a_m(\mod n_m)\end{cases}</script><p>必有解，设解为$a\in Z$.并且对任意$a’\in Z$,都有</p><script type="math/tex; mode=display">a'是方程组的解 \iff a \equiv a'(\mod n)</script><p>求解方法：</p><ul><li>得到每个方程组的模数$n_1,n_2,…$</li><li>求$n  =\prod_{i=1}^mn_i$</li><li>求$n_i^*=n/n_i$</li><li>求$n_i^{<em>-1}$(在对应模数下$n_i^</em>$的乘法逆元)</li><li>求$e_i = n_i^{<em>-1} </em> n_i^*$</li><li>求$a = \sum_{i=1}^{m}e_ia_i$</li><li>求$a\mod n$为最后的结果</li></ul><hr><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p>如果已知集合$Z<em>{n}^*={Z</em>{n}中有乘法逆元的剩余类}={[a]|a=0,1,…,gcd(a,n)=1}$</p><p>那么，给定一个n，如何求$Z_{n}^*$中有多少个整数/剩余类呢</p><p>定义：欧拉函数，表示为$\phi (n)$，表示大于0，小于等于n的自然数和n互质的数的个数，<br>    即：$\phi (n):=\left|Z_{n}^*\right|$（特别地，$\phi (1)=1$）</p><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><p>设两两互素的正整数$n<em>1,…,n_m\in N$并设$n  =\prod</em>{i=1}^mn<em>i$，那么有：$\phi (n)=\prod\limits^m</em>{i=1}\phi (n_i)$<br>用中国剩余定理+中国剩余映射求证</p><p>若p是素数，<br>$\phi (p^k)=p^{k-1}\phi (p)$<br>$\phi (p)=p-1$</p><h2 id="欧拉定理和费马小定理"><a href="#欧拉定理和费马小定理" class="headerlink" title="欧拉定理和费马小定理"></a>欧拉定理和费马小定理</h2><h3 id="乘法阶"><a href="#乘法阶" class="headerlink" title="乘法阶"></a>乘法阶</h3><p>设$a\in Z_n^*$，使得$a^k\equiv 1(\mod n)$的最小正整数k称作a在模n下的乘法阶。简写为a的阶.</p><p>如果$a\in Z_n^*$，其阶为k，则$a^0,a^1,a^2,…,a^{k-1}$彼此不同(注意这里是剩余类，要取模)</p><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h4><script type="math/tex; mode=display">a^i\equiv1(\mod n)\iff k|i\\a^i\equiv a^j(\mod n) \iff i\equiv j (\mod k)</script><h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3>]]></content>
    
    
    <summary type="html">关于同余</summary>
    
    
    
    <category term="密码学" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="同余" scheme="https://www.pri87.vip/tags/%E5%90%8C%E4%BD%99/"/>
    
  </entry>
  
  <entry>
    <title>密码学数学基础1</title>
    <link href="https://www.pri87.vip/posts/1de11b10.html"/>
    <id>https://www.pri87.vip/posts/1de11b10.html</id>
    <published>2024-01-13T12:39:12.000Z</published>
    <updated>2024-01-17T08:03:21.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整除性"><a href="#整除性" class="headerlink" title="整除性"></a>整除性</h2><p>设$a,b\in Z$,如果存在一个$q\in Z$，使得$a=qb$,则称“b<code>整除</code>a”或”<code>b是a的因子</code>“,记为“$b|a$”,并用$b\not\mid a$表示b不整除a</p><p>则：</p><ul><li>$b|0$</li><li>$1|a$</li><li>$0|a \iff a=0$</li><li>$b|a \iff b|-a \iff -b|a$</li></ul><p>且：</p><p>自反性：$a|a$<br>传递性：$(b|a)\land (a|c) \rightarrow b|c$<br>相乘性：$b|a \rightarrow bc|ac$<br>消去性：$(bc|ac) \land (c\not=0) \rightarrow b|a$<br>线性性：$b|a \land b|c\rightarrow\forall s,t\in Z,b|(sa\pm tc)$<br>比较性：$a,b\in N,b|a \rightarrow b\leq a$</p><p>定理一：$设a,b \in Z,则(b|a \land a|b) \iff a=\pm b$</p><hr><h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><p>定义：设$n\in N\land n\geq2$,除了$1和n$以外,没有其它正整数整除n，则n称作“<code>素数</code>”（用p表示）；否则称为“合数”</p><p>注1：1既不是素数也不是合数<br>注2：若n为合数，则n=ab，其中$1&lt;a&lt;n,1&lt;b&lt;n$</p><p>引理2-1：任何大于1的整数必有素因子。<br>定理2-1：任何合数$n$都至少有一个不超过$\sqrt n$的素因子<br>定理2-2：(算数基本定理)</p><p>任何非零整数$n$，都可以表示成如下乘积形式：</p><script type="math/tex; mode=display">n=\pm p{_1}^{e_1}...p{_r}^{e_r}</script><p>其中，$p_1,…p_r$是互不相同的素数，$e_1,…e_r$是正整数。</p><p>定理2-3:素数有无穷多个(欧几里得定理)</p><hr><h2 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h2><p>设$a,b\in Z \land b&gt;0,若q,r\in Z满足a=qb +r,且0\leq r &lt; b,$则定义:</p><p>$a \mod b := r$</p><p>$a \mod n = a - n⌊a/n⌋(向下整除); a∈Z,n∈N*(正整数)$</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>$b|a \iff a \mod b = 0 $<br>$(a\pm b)\mod n =(a\mod n\pm b\mod n)\mod n $<br>$(a<em>b)\mod n =(a\mod n</em>b\mod n)\mod n $</p><hr><h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>设$a,b\in Z,如果d \in Z  \land d|a,d|b,$则称d是a和b的公因子(公约数)<br>如果$d\geq0$,且a和b的所有公因子都整除d,则称d是a和b的最大公约数,记作gcd(a,b)</p><p>公因数可以是任何整数<br>最大公因数只能是0或正整数，不能是负数</p><p>特别的，gcd(0,0)=1</p><h3 id="互素"><a href="#互素" class="headerlink" title="互素"></a>互素</h3><p>定义：设$a,b\in Z$,如果gcd(a,b)=1,则称a和b互素</p><p>设gcd(a,b)=d,则存在$q_1,q_2\in Z$,使得$a=q_1d,b=q_2d$,且$gcd(q_1,q_2)=1$,所以$q_1和q_2$互素。</p><h3 id="欧几里得算法-辗转相除法"><a href="#欧几里得算法-辗转相除法" class="headerlink" title="欧几里得算法/辗转相除法"></a>欧几里得算法/辗转相除法</h3><p>设$a\geq b\geq 0$,求gcd(a,b)<br>数学原理：</p><ul><li>b=0时，gcd(a,0)=a</li><li>b&gt;0时，gcd(a,b)=gcd(b,r)[a=qb+r]</li><li>最后gcd(b,r)=gcd($r,r_1$)=gcd($r_n,0$)=$r_n$</li></ul><h4 id="证明"><a href="#证明" class="headerlink" title="证明:"></a>证明:</h4><p>gcd递归定律：</p><p>$gcd(a,b)=gcd(b,a\mod b)$</p><p>要证:</p><script type="math/tex; mode=display">gcd(a,b)=gcd(b,a\mod b)</script><p>根据整除性定理一：即证:</p><script type="math/tex; mode=display">gcd(a,b)|gcd(b, a \mod b) \land gcd(b,a \mod b)|gcd(a,b)</script><p>对于前一项：</p><script type="math/tex; mode=display">gcd(a,b)|gcd(b, a \mod b)</script><p>设 d = gcd(a, b)<br>∴ d|a 且 d|b<br>∵根据模的定义：</p><script type="math/tex; mode=display">a \mod b是a,b的线性组合</script><p>∵根据整除性的线性性：</p><script type="math/tex; mode=display">d|(a和b的线性组合)</script><p>∴</p><script type="math/tex; mode=display">gcd(a,b)|gcd(b, a \mod b)</script><p>对于后一项：</p><script type="math/tex; mode=display">gcd(b,a \mod b)|gcd(a,b)</script><p>设 c = gcd(b, a mod b)<br>∴ c|b 且 c|(a mod b)<br>∵ a = qb +r<br>∵ r = a mod b<br>∴ a = qb + a mod b ,即:</p><script type="math/tex; mode=display">a 是 b 和 (a \mod b) 的线性组合</script><p>∴根据整除性的线性性： </p><script type="math/tex; mode=display">c | a</script><p>∵ c | a且c | b</p><p>∴</p><script type="math/tex; mode=display">c | gcd(a,b)</script><p>∴</p><script type="math/tex; mode=display">gcd(b,a \mod b)|gcd(a,b)</script><p>得证.</p><hr><h2 id="扩展欧几里得定理"><a href="#扩展欧几里得定理" class="headerlink" title="扩展欧几里得定理"></a>扩展欧几里得定理</h2><h3 id="定理5-1-最大公约数表示定理"><a href="#定理5-1-最大公约数表示定理" class="headerlink" title="定理5-1(最大公约数表示定理)"></a>定理5-1(最大公约数表示定理)</h3><p>设$a,b\in Z$,d=gcd(a,b),则存在$s,t\in Z$,使得$as+bt=d$</p><p>推论：$d|v \iff as+bt=v$</p><p>在欧几里得算法中，计算出的q，根据递推公式：</p><script type="math/tex; mode=display">s_{i+1}=s_{i-1}-s_iq_i</script><script type="math/tex; mode=display">t_{i+1}=t_{i-1}-t_iq_i</script><p>同时,$s_0=1,s_1=0,s_0=0,s_1=1$,可以计算出$s_n和t_n即是最后的s和t$</p><p>扩展欧几里得算法就是用来计算定理5-1中的s和t的。同时求出gcd</p><hr><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p>设$a,b\in Z$,若$m\in Z$分别是a,b的倍数，m称作a,b的公倍数</p><p>lcm(a,b):a,b的最小公倍数(可以是负数)</p><ul><li>若$a,b\not= 0$,m是a，b中所有正的公倍数中最小的，m叫作a和b的最小公倍数</li><li>若a或b有一个等于0,lam(a,b)=0</li></ul><p>设$m=lcm(a,b)$,如果$a|c,b|c$,则$m|c$</p><p>$gcd(a,b)=1\rightarrow lcm(a,b)=ab$</p><p>计算lcm：</p><ul><li>$lcm(a,b)=\frac{ab}{gcd(a,b)}$</li><li>两个数迭代加自己直到相等</li></ul>]]></content>
    
    
    <summary type="html">关于密码学的数学须知</summary>
    
    
    
    <category term="密码学" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="https://www.pri87.vip/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="数学" scheme="https://www.pri87.vip/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="知识" scheme="https://www.pri87.vip/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF_r16题目复现</title>
    <link href="https://www.pri87.vip/posts/6e766646.html"/>
    <id>https://www.pri87.vip/posts/6e766646.html</id>
    <published>2024-01-13T11:58:17.000Z</published>
    <updated>2024-01-19T05:34:08.088Z</updated>
    
    <content type="html"><![CDATA[<p>（好难，被薄纱了QAQ）</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="test-your-Debugger"><a href="#test-your-Debugger" class="headerlink" title="test your Debugger"></a>test your Debugger</h3><p>直接动态调试在提示的位置打断点</p><p>得结果</p><p>略</p><h3 id="CompileMe"><a href="#CompileMe" class="headerlink" title="CompileMe!!!"></a>CompileMe!!!</h3><p>文件打开以后是sln源代码文件？？甚至不用逆向？<br>打开之后：完型填空？</p><p>看起来是一个简单的XTEA，但是vs一开就崩溃，vscode也不知道为什么不能运行。。。那先看看题（补全后）：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">NSSCTF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> key = <span class="keyword">new</span> <span class="built_in">ulong</span>[] &#123; <span class="number">0x57656c636f6d6520</span>, <span class="number">0x746f204e53534354</span>, <span class="number">0x4620526f756e6423</span>, <span class="number">0x3136204261736963</span> &#125;;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">ulong</span>[] &#123; <span class="number">0xc60b34b2bff9d34a</span>, <span class="number">0xf50af3aa8fd96c6b</span>, <span class="number">0x680ed11f0c05c4f1</span>, <span class="number">0x6e83b0a4aaf7c1a3</span>, <span class="number">0xd69b3d568695c3c5</span>, <span class="number">0xa88f4ff50a351da2</span>, <span class="number">0x5cfa195968e1bb5b</span>, <span class="number">0xc4168018d92196d9</span> &#125;;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">ulong</span> e = <span class="number">0x9E3779B9</span>;</span><br><span class="line">            <span class="keyword">var</span> delta = Enumerable.Range(<span class="number">0</span>, <span class="number">32</span>).Select(index =&gt; e * (<span class="number">32</span> - (<span class="built_in">uint</span>)index)).ToArray();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> decryptedBlocks = c.Select((block, index) =&gt; <span class="keyword">new</span> &#123; Value = block, Index = index &#125;)</span><br><span class="line">                .GroupBy(item =&gt; item.I ndex / <span class="number">2</span>)</span><br><span class="line">                .Select(<span class="keyword">group</span> =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">ulong</span> b1 = <span class="keyword">group</span>.ElementAt(<span class="number">0</span>).Value;</span><br><span class="line">                    <span class="built_in">ulong</span> b2 = <span class="keyword">group</span>.ElementAt(<span class="number">1</span>).Value;</span><br><span class="line">                    <span class="built_in">ulong</span> sum = e * <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">                    delta.ToList().ForEach(currentDelta =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        b2 -= (((b1 &lt;&lt; <span class="number">4</span>) ^ (b1 &gt;&gt; <span class="number">5</span>)) + b1) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">                        sum -= e;</span><br><span class="line">                        b1 -= (((b2 &lt;&lt; <span class="number">4</span>) ^ (b2 &gt;&gt; <span class="number">5</span>)) + b2) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span>[] &#123; b1, b2 &#125;;</span><br><span class="line">                &#125;)</span><br><span class="line">                .SelectMany(block =&gt; block)</span><br><span class="line">                .ToArray();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">ulong</span>[] decryptedText = <span class="keyword">new</span> <span class="built_in">ulong</span>[decryptedBlocks.Length];</span><br><span class="line">            Array.Copy(decryptedBlocks, decryptedText, decryptedText.Length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            decryptedText.SelectMany(block =&gt; BitConverter.GetBytes(<span class="keyword">new</span> ZZZ(block).GetVal()).Reverse()).ToList().ForEach(byteValue =&gt; Console.Write(Encoding.ASCII.GetString(<span class="keyword">new</span>[] &#123; byteValue &#125;)));</span><br></pre></td></tr></table></figure><p>但是逻辑可以看懂，可以尝试用C重写一遍代码</p><p>但是后面有一个调用zzz</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ZZZ</span>(<span class="title">ulong</span> <span class="title">val</span>) : <span class="title">ZZY</span>(<span class="title">val</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">ulong</span> <span class="title">GetVal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.GetVal();</span><br><span class="line">        <span class="keyword">return</span> val + <span class="number">0x413FD584E295889</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而ZZZ到A的一万六千行代码都是类似这个的函数</p><p>（事后才发现这里调用的代码是base.GetVal()只是调用了继承自ZZY的getval函数然而没有返回值到确定的变量）</p><p>那么就需要用一个函数来读取并输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lines = <span class="built_in">open</span>(<span class="string">&#x27;Program.cs&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).readlines()</span><br><span class="line"> </span><br><span class="line">a = <span class="string">b&#x27;unsigned __int64 (unsigned __int64 val) &#123;\n&#x27;</span></span><br><span class="line">c = <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="keyword">if</span> line.startswith(<span class="string">b&#x27;            return val&#x27;</span>):</span><br><span class="line">        a += <span class="string">b&#x27;    val = &#x27;</span>+line[<span class="number">18</span>:]</span><br><span class="line">a += c</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;c.py&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(a)</span><br></pre></td></tr></table></figure><p>然后复制这个函数到解密里面并调用。</p><p>最后的代码是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> __int64 *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> __int64 b2; </span><br><span class="line">    <span class="type">unsigned</span> __int64 b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> e = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="type">unsigned</span> __int64 key[<span class="number">4</span>] = &#123; <span class="number">0x57656c636f6d6520</span>, <span class="number">0x746f204e53534354</span>, <span class="number">0x4620526f756e6423</span>, <span class="number">0x3136204261736963</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> __int64 sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line"></span><br><span class="line">        b2 -= (((b1 &lt;&lt; <span class="number">4</span>) ^ (b1 &gt;&gt; <span class="number">5</span>)) + b1) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= e;</span><br><span class="line">        b1 -= (((b2 &lt;&lt; <span class="number">4</span>) ^ (b2 &gt;&gt; <span class="number">5</span>)) + b2) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">ccc</span><span class="params">(<span class="type">unsigned</span> __int64 val)</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line"> &#125;<span class="comment">//写完就5万字了</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> __int64 Q[<span class="number">8</span>] = &#123;</span><br><span class="line">    <span class="number">0xc60b34b2bff9d34a</span>, <span class="number">0xf50af3aa8fd96c6b</span>, <span class="number">0x680ed11f0c05c4f1</span>, <span class="number">0x6e83b0a4aaf7c1a3</span>, </span><br><span class="line">    <span class="number">0xd69b3d568695c3c5</span>, <span class="number">0xa88f4ff50a351da2</span>, <span class="number">0x5cfa195968e1bb5b</span>, <span class="number">0xc4168018d92196d9</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;Q[k*<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//sdecrypt(&amp;Q[k * 2], &amp;Q[k * 2 + 1]);</span></span><br><span class="line"></span><br><span class="line">        Q[k * <span class="number">2</span>] = ccc(Q[k * <span class="number">2</span>]);</span><br><span class="line">        Q[k * <span class="number">2</span> +<span class="number">1</span>] = ccc(Q[k * <span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%#llx,\n&quot;</span>, Q[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, &amp;Q[i]);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x4e53534354467b35</span>,</span><br><span class="line"><span class="number">0x384d745534695478</span>,</span><br><span class="line"><span class="number">0x34754b7538505648</span>,</span><br><span class="line"><span class="number">0x4559795939613774</span>,</span><br><span class="line"><span class="number">0x5a30646171564966</span>,</span><br><span class="line"><span class="number">0x4a5656396b704d52</span>,</span><br><span class="line"><span class="number">0x5a37757644475948</span>,</span><br><span class="line"><span class="number">0x52754a35384d7a7d</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;<span class="number">58</span>MtU4iTx4uKu8PVHEYyY9a7tZ0daqVIfJVV9kpMRZ7uvDGYHRuJ58Mz&#125;</span><br></pre></td></tr></table></figure><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="pr"><a href="#pr" class="headerlink" title="pr"></a>pr</h3><p>打开题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag=plaintext = <span class="string">&#x27;NSSCTF&#123;****************&#125;&#x27;</span></span><br><span class="line">charset = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">padding_length = <span class="number">100</span> - <span class="built_in">len</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(padding_length):</span><br><span class="line">    plaintext += random.choice(charset)</span><br><span class="line"></span><br><span class="line">e = <span class="number">31413537523</span></span><br><span class="line">message = bytes_to_long(plaintext.encode())</span><br><span class="line"><span class="keyword">assert</span> message &gt; (<span class="number">1</span> &lt;&lt; <span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> message &lt; (<span class="number">1</span> &lt;&lt; <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">prime_p = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_q = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_r = getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = prime_p * prime_q</span><br><span class="line">n2 = prime_q * prime_r</span><br><span class="line">ciphertext1 = <span class="built_in">pow</span>(message, e, n1)</span><br><span class="line">ciphertext2 = <span class="built_in">pow</span>(message, e, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1=&#x27;</span>, ciphertext1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2=&#x27;</span>, ciphertext2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>, prime_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>, prime_r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1= 36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line"><span class="string">c2= 15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line"><span class="string">p= 12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line"><span class="string">r= 10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">过程:</span></span><br><span class="line">取质数p,q,r</span><br><span class="line">e = ...</span><br><span class="line">n1 = pq</span><br><span class="line">n2 = qr</span><br><span class="line">c1 = m^e mod n1</span><br><span class="line">c2 = m^e mod n2</span><br><span class="line">已知c1,c2,e,p,r求m</span><br></pre></td></tr></table></figure><p>根据</p><script type="math/tex; mode=display">\begin{cases}c_1\equiv m^e(\mod n_1)\\\\c_2\equiv m^e(\mod n_2)\end{cases}</script><p>和同余定理</p><script type="math/tex; mode=display">若a-b是n的倍数,那么a和b在\mod n下同余</script><p>因为原式可得</p><script type="math/tex; mode=display">\begin{cases}c_1-m^e=kpq\\\\c_2-m^e=kqr\end{cases}</script><p>所以</p><script type="math/tex; mode=display">\begin{cases}c_1\equiv m^e(\mod p)\\\\c_2\equiv m^e(\mod r)\end{cases}</script><p>所以</p><script type="math/tex; mode=display">\begin{cases}m^e\equiv c_1(\mod p)\\\\m^e\equiv c_2(\mod r)\end{cases}</script><p>根据中国剩余定理可以直接求m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的参数</span></span><br><span class="line">c1 = <span class="number">36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line">c2 = <span class="number">15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line">p = <span class="number">12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line">r = <span class="number">10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br><span class="line">e = <span class="number">31413537523</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#求n</span></span><br><span class="line">n = p*r</span><br><span class="line"></span><br><span class="line"><span class="comment">#求模逆元</span></span><br><span class="line">j1 = invert(r,p)</span><br><span class="line">j2 = invert(p,r)</span><br><span class="line"><span class="comment">#求a</span></span><br><span class="line">a = c1*j1*r+c2*j2*p</span><br><span class="line"><span class="comment">#开方</span></span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">last = <span class="built_in">pow</span>(a,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(last))</span><br><span class="line"><span class="comment">#b&#x27;NSSCTF&#123;yUanshEnx1ncHun2o23!&#125;FA3JmflIoai8BxgdIGUQumsNc5R0hpo53zICaiWZRfjBj59P36EwC4CSfJOsZ3LIOYnhUmsQ&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">新鲜的题，快来吃吧</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="wp" scheme="https://www.pri87.vip/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>逆核06-内嵌补丁</title>
    <link href="https://www.pri87.vip/posts/9b8c0cc4.html"/>
    <id>https://www.pri87.vip/posts/9b8c0cc4.html</id>
    <published>2024-01-10T02:41:05.000Z</published>
    <updated>2024-01-10T04:22:29.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内嵌代码补丁"><a href="#内嵌代码补丁" class="headerlink" title="内嵌代码补丁"></a>内嵌代码补丁</h2><p>区别于直接修改程序代码，内嵌补丁是专门作用于有加密，校验，压缩的程序，在程序中插入内嵌补丁，并在解密解压后执行补丁内容，最后跳转到OEP，比修改加密/压缩后的代码更方便。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>设置补丁的位置</p><ul><li>文件的空白区域（补丁代码少时）</li><li>扩展后的最后一个节区</li><li>添加的新节区</li></ul><p>注：添加补丁的节区一定要有可写权限，获得相应内存的可写权限</p><p>在解密后的位置（jmp OEP）写跳转语句跳到补丁位置，最后由补丁跳到OEP</p><hr><p>[施工中][QAQ]</p><hr><p>第二部分：完</p>]]></content>
    
    
    <summary type="html">只是讲一下原理</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="学习" scheme="https://www.pri87.vip/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PE" scheme="https://www.pri87.vip/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>加密02:TEA</title>
    <link href="https://www.pri87.vip/posts/d89283b5.html"/>
    <id>https://www.pri87.vip/posts/d89283b5.html</id>
    <published>2024-01-09T13:04:00.000Z</published>
    <updated>2024-01-09T14:19:02.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tiny-Encryption-Algorithm"><a href="#Tiny-Encryption-Algorithm" class="headerlink" title="Tiny Encryption Algorithm"></a>Tiny Encryption Algorithm</h1><p>（微型加密算法）</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>块加密，对称加密</p><ul><li>块加密：将明文按一定大小分组之后用确定的算法和对称密钥对魅族分别加密，一般来说加密和解密函数为反函数，一般会进行多轮加密</li><li>对称加密：加密解密双方使用同一个密钥加密解密或双方使用的是两个可以简单地相互推算的密钥</li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="定义与初始化"><a href="#定义与初始化" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = [a,b,c,d]<span class="comment">#一般是4个值</span></span><br><span class="line">delta = <span class="number">0x9E3779B9</span></span><br></pre></td></tr></table></figure><h3 id="轮加密"><a href="#轮加密" class="headerlink" title="轮加密"></a>轮加密</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>,<span class="built_in">len</span>(m),<span class="number">2</span>):</span><br><span class="line">x = m[i]</span><br><span class="line">y = m[i+<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">delta++</span><br><span class="line">x += ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + delta) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>])</span><br><span class="line">y += ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + delta) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>注：具体算法可能不同，但是一般都是x 由y和key改变，y由x和key改变，delta可能加可能减,但是一般情况不会把for i in (0,len(m),2)改成for i in (len-1)，这样就不是块加密了</p><p>此处省略了&amp;0xffffffff，需要让所有值都是int/dword，下面也是，之后不说了</p><hr><p>XTEA的加密部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x += (((y &lt;&lt; <span class="number">4</span>) ^ (y &gt;&gt; <span class="number">5</span>)) + y) ^ (delta + key[delta &amp; <span class="number">3</span>])</span><br><span class="line">    delta++</span><br><span class="line">    y += (((x &lt;&lt; <span class="number">4</span>) ^ (x &gt;&gt; <span class="number">5</span>)) + x) ^ (delta + key[(delta&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>注；相当于添加了与和位移,让key的取值不固定,但是框架没啥区别</p><hr><p>XXTEA的加密部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span> = <span class="number">6</span> + <span class="number">52</span> // n <span class="comment">#n为数据个数（输入数组长度）,长度可以不是4的倍数</span></span><br><span class="line">MX = <span class="keyword">lambda</span> <span class="built_in">sum</span>, y, z, p, e, k: ((z &gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span>) + (y &gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span>)) ^ ((<span class="built_in">sum</span> ^ y) + (k[p &amp; <span class="number">3</span> ^ e] ^ z))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">round</span>):</span><br><span class="line"><span class="built_in">sum</span> = (<span class="built_in">sum</span> + DELTA) &amp; <span class="number">0xffffffff</span></span><br><span class="line">e = <span class="built_in">sum</span> &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">y = m[(p + <span class="number">1</span>) % n]</span><br><span class="line">z = m[p] = (m[p] + MX(<span class="built_in">sum</span>, y, z, p, e, k)) &amp; <span class="number">0xffffffff</span></span><br></pre></td></tr></table></figure><p>贴一个c语言版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也不知道网上都写的啥，看都看不懂</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">xxtea</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span>* key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)             <span class="comment">// encrypt</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">// decrypt</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = rounds * DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 两个32位无符号整数，即待加密的64bit明文数据</span></span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>] = &#123;<span class="number">0x12345678</span>, <span class="number">0x78563412</span>&#125;;</span><br><span class="line">    <span class="comment">// 四个32位无符号整数，即128bit的key</span></span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>]= &#123;<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>&#125;;</span><br><span class="line">    <span class="comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    xxtea(v, n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Encrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    xxtea(v, -n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h2><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>[等待施工][QAQ]</p>]]></content>
    
    
    <summary type="html">TEA基本介绍</summary>
    
    
    
    <category term="密码" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81/"/>
    
    
    <category term="对称加密" scheme="https://www.pri87.vip/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="块加密" scheme="https://www.pri87.vip/tags/%E5%9D%97%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>加密01:RC4</title>
    <link href="https://www.pri87.vip/posts/ed8aa7e2.html"/>
    <id>https://www.pri87.vip/posts/ed8aa7e2.html</id>
    <published>2024-01-08T10:22:23.000Z</published>
    <updated>2024-01-16T07:39:14.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rivest-Cipher-4"><a href="#Rivest-Cipher-4" class="headerlink" title="Rivest Cipher 4"></a>Rivest Cipher 4</h1><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>串流加密，密钥长度可变，对称加密，加密解密使用同一套算法</p><ul><li>串流加密：即密钥是通过一个随机种子通过算法得到的伪随机密钥流，用这一串密钥加密或解密。使加密过程有完善保密性（密钥长度不短于明文长度）</li><li>对称加密：加密解密双方使用同一个密钥加密解密或双方使用的是两个可以简单地相互推算的密钥</li><li>加密解密使用同一套算法：RC4一般使用异或加密，由于异或的对合性（$f(f(x))=x$,对任意x均成立），可以使用相同算法加密</li></ul><hr><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="初始化（KSA）"><a href="#初始化（KSA）" class="headerlink" title="初始化（KSA）"></a>初始化（KSA）</h3><ol><li><p>初始化S盒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    S.append(i)</span><br></pre></td></tr></table></figure></li><li><p>打乱S盒(这个算法可以保证每一项都被换过)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key = ...</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">    swap(S[i],S[j])</span><br></pre></td></tr></table></figure></li></ol><h3 id="伪随机子密码生成（PRGA）"><a href="#伪随机子密码生成（PRGA）" class="headerlink" title="伪随机子密码生成（PRGA）"></a>伪随机子密码生成（PRGA）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    i,j = (i+<span class="number">1</span>)%<span class="number">256</span>,(j+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    swap(S[i],S[j])</span><br><span class="line">    c = m[i] ^ S[(S[i] + S[j]) % <span class="number">256</span>]</span><br></pre></td></tr></table></figure><p>注：最后的算法不一定是标准的，但是只要是原文和一个在过程中产生的值异<br>或，就可以算作RC4。</p><hr><h2 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h2><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>[等待施工][QAQ]</p>]]></content>
    
    
    <summary type="html">RC4基本介绍</summary>
    
    
    
    <category term="密码学" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码" scheme="https://www.pri87.vip/tags/%E5%AF%86%E7%A0%81/"/>
    
    <category term="加密方法" scheme="https://www.pri87.vip/tags/%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95/"/>
    
    <category term="对称加密" scheme="https://www.pri87.vip/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="流加密" scheme="https://www.pri87.vip/tags/%E6%B5%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>《逆核》05-Upack和PE结构</title>
    <link href="https://www.pri87.vip/posts/65cde422.html"/>
    <id>https://www.pri87.vip/posts/65cde422.html</id>
    <published>2024-01-04T18:37:58.000Z</published>
    <updated>2024-01-17T15:18:53.728Z</updated>
    
    <content type="html"><![CDATA[<p>upack是一个压缩器，用于压缩PE文件,跟随逆核一起深入学习PE文件结构</p><h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><p>PE文件经过upack之后有以下特点：</p><h2 id="重叠文件头"><a href="#重叠文件头" class="headerlink" title="重叠文件头"></a>重叠文件头</h2><ul><li><p>把MZ文件头(dos头)和PE头重合在一起</p></li><li><p>原理是dos头中的e_lfanew指向NT头但是并没有说NT头不能和DOS头重合,一般情况下:</p></li><li><p>```<br>e_fanew = MZ文件大小(40h)+DOS存根=E0</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 但是Upack后e_fanew值是<span class="number">10</span><span class="built_in">h</span>,所以hex方式打开后,第一排是<span class="number">4</span>D5A下一排就是<span class="number">5045</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在可选头中插入解码代码</span></span><br><span class="line"></span><br><span class="line">- 修改SizeOfOpionalHeader的值增加至<span class="number">148</span><span class="built_in">h</span>，这样在节区头和可选头中间就可以插入解码代码，此时节区头的起始偏移是</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  <span class="number">170</span><span class="built_in">h</span>=<span class="number">28</span><span class="built_in">h</span>(可选头起始偏移)+<span class="number">148</span><span class="built_in">h</span></span><br></pre></td></tr></table></figure></li><li><p>(SizeOfOpionalHeader的作用是想要根据PE文件形态更换和插入其它可选头形态的结构体)</p></li></ul><h2 id="在文件头插入解码代码"><a href="#在文件头插入解码代码" class="headerlink" title="在文件头插入解码代码"></a>在文件头插入解码代码</h2><ul><li>可选头中的NumberOfRvaAndSizes由10h变为Ah,使得DataDirectory只有前10个元素,,并把后面6个元素的位置改为自己的解码代码</li></ul><h2 id="在节区头中记录自身数据和重叠节区"><a href="#在节区头中记录自身数据和重叠节区" class="headerlink" title="在节区头中记录自身数据和重叠节区"></a>在节区头中记录自身数据和重叠节区</h2><ul><li>节区头中类似重定位节区是不需要的,所以这种节区可以用于记录自身数据</li><li>整个PE文件分为4个部分:PE头,第一节区,第二节区,第三节区.有以下几个特性:</li><li>内存中,PE头,第一节区,第三节区均由同一区域映射而来,即SizeOfRawData和RawOffset相同,但是VirtulSize不同<ul><li>源文件压缩于第二节区</li><li>第一节区的SizeOfImage与原PE文件相同,即原PE文件会解压到第一节区</li></ul></li></ul><hr><h2 id="RVA-to-RAW"><a href="#RVA-to-RAW" class="headerlink" title="RVA to RAW"></a>RVA to RAW</h2><p>标准操作是:</p><p><code>RAW=RVA-VA+PointerToRawData</code></p><p>但是经过upack后,第一节区的PointerToRawData值为10,然而不为FileAlignment(200h)的倍数,因此PE装载器强制识别为其整倍数(确保指向一页),令其等于0</p><p>所以正确值是:</p><p><code>RAW=RVA-VA</code></p><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><ul><li>通过存在在节区的末尾,省略最后的null结构体,映射到内存时,后面自然有null填充,这样可以节约空间</li></ul><h2 id="导入地址表"><a href="#导入地址表" class="headerlink" title="导入地址表"></a>导入地址表</h2><ul><li>在DOS存根中存放导入DLL的名称,查看FirstThunk可以找到对应加载的函数.</li></ul><hr><h1 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h1><ul><li>先是解码循环,再是设置IAT(和UPX差不多?),但是设置IAT的方法是用导入的函数LoadLibraryA和GetProcAddress一边循环一遍构建(先获取导入函数实际地址,再写入原函数)IAT</li></ul>]]></content>
    
    
    <summary type="html">本篇通过Upack压缩器进一步了解PE结构</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="学习" scheme="https://www.pri87.vip/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PE" scheme="https://www.pri87.vip/tags/PE/"/>
    
    <category term="壳" scheme="https://www.pri87.vip/tags/%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>2023安洵杯RE部分复现</title>
    <link href="https://www.pri87.vip/posts/a04e3508.html"/>
    <id>https://www.pri87.vip/posts/a04e3508.html</id>
    <published>2024-01-04T12:17:21.000Z</published>
    <updated>2024-01-17T07:48:52.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安洵杯RE"><a href="#安洵杯RE" class="headerlink" title="安洵杯RE"></a>安洵杯RE</h1><h2 id="mobilego"><a href="#mobilego" class="headerlink" title="mobilego"></a>mobilego</h2><p>现在模拟器中尝试输入，返回nonono</p><p>jadx打开mainactivity</p><p>发现判断函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> m141lambda$onCreate$<span class="number">0</span>$comexamplemobilegoMainActivity(View v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Game.checkflag(<span class="built_in">this</span>.editText.getText().toString()).equals(getResources().getString(C0569R.string.cmp))) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;yes your flag is right&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;No No No&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C0569R中有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">string</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">app_name</span> <span class="operator">=</span> <span class="number">2131689500</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> <span class="number">2131689512</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的cmp是它的id值而不是它的具体值</p><p>所以动态调试找到终值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>这里使用了Game.checkflag这个方法来加密</p><p>所以先看这个</p><p>根据game</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> game;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> p004go.Seq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">_init</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">checkflag</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Seq.touch();</span><br><span class="line">        _init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Game</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">touch</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怀疑checkflag是通过lib加载的</p><p>打开ida，反汇编so文件</p><p>搜索checkflag</p><p>找到5个函数</p><p><img src="https://s2.loli.net/2023/12/28/Z4TbAVSxCklJaOB.png" alt="image-20231228150946781"></p><p>函数是这几个</p><p>好复杂，看不懂。。</p><p>最后看了看wp，发现一个一直没注意的东西，如果输入</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234567890</span>变为<span class="number">6143580927</span>，</span><br><span class="line">&#123;qwertyuiopasdfghjklzxcvbnm&#125;变为bhgsruc&#123;iojqkdpwnezyvxa&#125;lfmt</span><br></pre></td></tr></table></figure><p>说明这个加密只是字符交换，交换之后是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>一共38个字符</p><p>那么尝试输入一个不重复的值，这样就可以直接找到映射表：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t<span class="number">2</span>F<span class="number">7</span>GTglISYL<span class="symbol">nMzc6</span>CqhD<span class="symbol">N5</span>OdX<span class="number">8</span>wPjsKufVbE&#125;</span><br></pre></td></tr></table></figure><p>变为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC</span><br></pre></td></tr></table></figure><p>根据这个对应关系，逆向解出原来的关系</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d1 = <span class="string">&#x27;t2F7GTglISYLnMzc6CqhDN5OdX8wPjsKufVbE&#125;&#x27;</span></span><br><span class="line">d2 = <span class="string">&#x27;NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC&#x27;</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="string">&#x27;49021&#125;5f919038b440139g74b7Dc88330e5d&#123;6&#x27;</span></span><br><span class="line">f1 = [<span class="number">0</span>]*<span class="number">38</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">        <span class="keyword">if</span> (d2[j] == d1[i]):</span><br><span class="line">            f1[i] = f2[j]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(f1))</span><br><span class="line"><span class="comment">#D0g3&#123;4c3b5903d11461f94478b7302980e958&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>猜测输入时尽量使用有规律的字符，更容易看清</p><p>如果不容易逆向可以尝试看或者猜</p><hr><h2 id="牢大想你了"><a href="#牢大想你了" class="headerlink" title="牢大想你了"></a>牢大想你了</h2><p>用dnspy打开Assembly-CSharp.dll后，可以看到主内容中不同类（没学过csharp，猜的），是以下几个类：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">AABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB</span></span><br><span class="line"><span class="attribute">ABBBBABABBAABABBBBBABBBBABABBBAAAABBBAABBBAABBA</span></span><br><span class="line"><span class="attribute">BBBBAAABABABABAAABABBBBBAAABBBAAAAABBBBAABAAABB</span></span><br><span class="line"><span class="attribute">GameManager</span></span><br><span class="line"><span class="attribute">UIManager</span></span><br></pre></td></tr></table></figure><p>上面三个的变量名和类名都被混淆了，需要先根据字符串找到逻辑代码</p><p>在GameManager找到多个：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br></pre></td></tr></table></figure><p>同时在这个语句上面均有</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeHelpers.InitializeArray(array, fieldof(&lt;PrivateImplementationDetails&gt;.BC42CACDF93A0A1981A27121FBDC9584A9570918).FieldHandle);</span><br></pre></td></tr></table></figure><p>相当于先把array先初始化为BC42CACDF93A0A1981A27121FBDC9584A9570918的值，这个字符不是值而是类似于变量名的东西</p><p>所以打开看看</p><p>结果向下看发现直接就有array的值，这样末值就有了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uint</span>[] array = <span class="keyword">new</span> <span class="built_in">uint</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">3363017039U</span>,</span><br><span class="line"><span class="number">1247970816U</span>,</span><br><span class="line"><span class="number">549943836U</span>,</span><br><span class="line"><span class="number">445086378U</span>,</span><br><span class="line"><span class="number">3606751618U</span>,</span><br><span class="line"><span class="number">1624361316U</span>,</span><br><span class="line"><span class="number">3112717362U</span>,</span><br><span class="line"><span class="number">705210466U</span>,</span><br><span class="line"><span class="number">3343515702U</span>,</span><br><span class="line"><span class="number">2402214294U</span>,</span><br><span class="line"><span class="number">4010321577U</span>,</span><br><span class="line"><span class="number">2743404694U</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="number">873914</span>f<span class="punctuation">,</span></span><br><span class="line"><span class="number">4</span>a<span class="number">628600</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">20</span><span class="keyword">c</span><span class="number">77</span>a<span class="number">1</span><span class="keyword">c</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">1</span>a<span class="number">877</span>aaa<span class="punctuation">,</span></span><br><span class="line">d<span class="number">6</span>faa<span class="number">982</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">60</span>d<span class="number">1</span><span class="keyword">c</span><span class="number">964</span><span class="punctuation">,</span></span><br><span class="line">b<span class="number">9884</span><span class="keyword">c</span><span class="number">32</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">2</span>a<span class="number">08</span>a<span class="number">862</span><span class="punctuation">,</span></span><br><span class="line"><span class="keyword">c</span><span class="number">74</span>a<span class="number">0036</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">8</span>f<span class="number">2</span>ee<span class="number">196</span><span class="punctuation">,</span></span><br><span class="line">ef<span class="number">08</span>a<span class="number">6</span>a<span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">a<span class="number">3850896</span></span><br></pre></td></tr></table></figure><p>然后就是找加密函数即encryptedData的来源</p><p>在上面一行：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Buffer.BlockCopy(paddedArray, <span class="number">0</span>, uintArray, <span class="number">0</span>, paddedArray.Length);</span><br><span class="line"><span class="built_in">uint</span>[] encryptedData = <span class="keyword">new</span> <span class="built_in">uint</span>[<span class="number">0</span>];</span><br><span class="line">AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB str2 = <span class="keyword">new</span> AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB(str);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; uintArray.Length; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">encryptedData = encryptedData.Concat(str2.BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA(uintArray[i], uintArray[i + <span class="number">1</span>])).ToArray&lt;<span class="built_in">uint</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA是一个方法，那么化简一下方法名：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; uintArray.Length; i += <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">encryptedData = encryptedData.Concat(str2.tea(uintArray[i], uintArray[i + <span class="number">0</span>])).ToArray&lt;<span class="built_in">uint</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>十分明显了，uintArray是输入，定义是</p><p>uint[] uintArray = new uint[paddedArray.Length / 0];</p><p>str2在前面是</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB str2 = <span class="keyword">new</span> AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB(str);</span><br></pre></td></tr></table></figure><p>一个抽象的定义，所以直接进tea看看</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">uint</span>[] <span class="title">tea</span>(<span class="params"><span class="built_in">uint</span> ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA, <span class="built_in">uint</span> BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uint</span> v0 = ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA;</span><br><span class="line"><span class="built_in">uint</span> v = BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA;</span><br><span class="line"><span class="built_in">uint</span> sum = <span class="number">1U</span>;</span><br><span class="line"><span class="built_in">uint</span> delta = <span class="number">4294967252U</span>;</span><br><span class="line"><span class="built_in">uint</span>[] str2 = <span class="keyword">this</span>.BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">-103</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += delta;</span><br><span class="line">v0 += ((v &lt;&lt; <span class="number">7</span>) + str2[<span class="number">1</span>] ^ v + sum ^ (v &gt;&gt; <span class="number">0</span>) + str2[<span class="number">1</span>]);</span><br><span class="line">v += ((v0 &lt;&lt; <span class="number">7</span>) + str2[<span class="number">5</span>] ^ v0 + sum ^ (v0 &gt;&gt; <span class="number">4</span>) + str2[<span class="number">8</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">uint</span>[] array = <span class="keyword">new</span> <span class="built_in">uint</span>[<span class="number">8</span>];</span><br><span class="line">array[<span class="number">0</span>] = v0;</span><br><span class="line">array[<span class="number">0</span>] = v;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里还需要str2的值，在GameManager的上面部分写了</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uint[] str = <span class="keyword">new</span> uint[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">286331153U,</span></span><br><span class="line"><span class="built_in">286331153U,</span></span><br><span class="line"><span class="built_in">286331153U,</span></span><br><span class="line"><span class="number">286331153</span>U</span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line">AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB str2 = <span class="keyword">new</span> AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB(str)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>可知，</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encryptedData = encryptedData.Concat(str2.BBBABAABAAABBAAABBBAABBAAAAAABABBBBBBABBABABAAB(<span class="built_in">uint</span>Array[i], <span class="built_in">uint</span>Array[i + <span class="number">0</span>])).ToArray&lt;<span class="built_in">uint</span>&gt;();</span><br></pre></td></tr></table></figure><p>这里的str2就是这四个值，key也就是这四个值</p><p>最后还要在加密的类里面看哪个是正确的加密函数（有一堆tea），检查i的值（不应该是无限循环）和key数组的个数（0到3）</p><p>最后只剩一个</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">uint</span>[] <span class="title">BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA</span>(<span class="params"><span class="built_in">uint</span> ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA, <span class="built_in">uint</span> BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uint</span> v0 = ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA;</span><br><span class="line"><span class="built_in">uint</span> v = BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA;</span><br><span class="line"><span class="built_in">uint</span> sum = <span class="number">0U</span>;</span><br><span class="line"><span class="built_in">uint</span> delta = <span class="number">2654435769U</span>;</span><br><span class="line"><span class="built_in">uint</span>[] str2 = <span class="keyword">this</span>.BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += delta;</span><br><span class="line">v0 += ((v &lt;&lt; <span class="number">4</span>) + str2[<span class="number">0</span>] ^ v + sum ^ (v &gt;&gt; <span class="number">5</span>) + str2[<span class="number">1</span>]);</span><br><span class="line">v += ((v0 &lt;&lt; <span class="number">4</span>) + str2[<span class="number">2</span>] ^ v0 + sum ^ (v0 &gt;&gt; <span class="number">5</span>) + str2[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">uint</span>[]</span><br><span class="line">&#123;</span><br><span class="line">v0,</span><br><span class="line">v</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么写tea解密函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b2; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> e = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tt[<span class="number">4</span>] = &#123; <span class="number">0x11111111</span>, <span class="number">0x11111111</span>, <span class="number">0x11111111</span>, <span class="number">0x11111111</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line">        </span><br><span class="line">        b2 -= ((b1 &lt;&lt; <span class="number">4</span>) + tt[<span class="number">2</span>] ^ b1 + sum ^ (b1 &gt;&gt; <span class="number">5</span>) + tt[<span class="number">3</span>]);</span><br><span class="line">        b1 -= ((b2 &lt;&lt; <span class="number">4</span>) + tt[<span class="number">0</span>] ^ b2 + sum ^ (b2 &gt;&gt; <span class="number">5</span>) + tt[<span class="number">1</span>]);</span><br><span class="line">        sum -= e;</span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Q[<span class="number">12</span>] = &#123; <span class="number">0xc873914f</span>,</span><br><span class="line">                            <span class="number">0x4a628600</span>,</span><br><span class="line">                            <span class="number">0x20c77a1c</span>,</span><br><span class="line">                            <span class="number">0x1a877aaa</span>,</span><br><span class="line">                            <span class="number">0xd6faa982</span>,</span><br><span class="line">                            <span class="number">0x60d1c964</span>,</span><br><span class="line">                            <span class="number">0xb9884c32</span>,</span><br><span class="line">                            <span class="number">0x2a08a862</span>,</span><br><span class="line">                            <span class="number">0xc74a0036</span>,</span><br><span class="line">                            <span class="number">0x8f2ee196</span>,</span><br><span class="line">                            <span class="number">0xef08a6a9</span>,</span><br><span class="line">                            <span class="number">0xa3850896</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;Q[k*<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//sdecrypt(&amp;Q[k * 2], &amp;Q[k * 2 + 1]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%#x,\n&quot;</span>, Q[i]);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0x695f7469,</span></span><br><span class="line"><span class="comment">//0x65625f73,</span></span><br><span class="line"><span class="comment">//0x615f6e65,</span></span><br><span class="line"><span class="comment">//0x6e6f6c5f,</span></span><br><span class="line"><span class="comment">//0x61645f67,</span></span><br><span class="line"><span class="comment">//0x69775f79,</span></span><br><span class="line"><span class="comment">//0x756f6874,</span></span><br><span class="line"><span class="comment">//0x6f795f74,</span></span><br><span class="line"><span class="comment">//0x796d5f75,</span></span><br><span class="line"><span class="comment">//0x6972665f,</span></span><br><span class="line"><span class="comment">//0x646e65,</span></span><br></pre></td></tr></table></figure><p>然后按行取反转hex再全取反得到结果：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it_is_been_<span class="built_in">a_long</span>_day_without_you_my_friend</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0g3&#123;it_is_been_<span class="built_in">a_long</span>_day_without_you_my_friend&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="感觉有点点简单"><a href="#感觉有点点简单" class="headerlink" title="感觉有点点简单"></a>感觉有点点简单</h2><p>这是一个sys文件，根据网上教程</p><blockquote><p>静态IDA<br>动态SICE 或者 Syser</p></blockquote><p>先尝试用ida打开</p><p>进入主要的检查函数</p><p>找到关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (_BYTE)v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( HIDWORD(v1) &lt;= <span class="number">0xC00</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        rc4(NumberOfBytes_4, HIDWORD(v1), <span class="string">&quot;the_key_&quot;</span>, <span class="number">8</span>i64, v1);</span><br><span class="line">        base64(P, NumberOfBytes_4, HIDWORD(v1));</span><br><span class="line">        LOBYTE(v1) = sub_140001560(P, <span class="number">56</span>i64);</span><br><span class="line">        v8 = <span class="string">&quot;tips: YES, RIGHT FLAG.   you got it!&quot;</span>;</span><br><span class="line">        v7 = <span class="string">&quot;tips: NO , WRONG ANSWER. try again !&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (_BYTE)v1 )</span><br><span class="line">          DbgPrint(<span class="string">&quot;tips: %s\n&quot;</span>, v8);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          DbgPrint(<span class="string">&quot;tips: %s\n&quot;</span>, v7);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;tips: file to long \n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NumberOfBytes_4</span> = ExAllocatePool(NonPagedPool, <span class="number">0</span>x1000ui64)<span class="comment">;</span></span><br><span class="line"><span class="attr">P</span> = ExAllocatePool(NonPagedPool, <span class="number">0</span>x1000ui64)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这两个指针的初始化用了ExAllocatePool函数</p><p>这是内核模式下的内存分配函数，意思是从非分页池中分配4096字节给两个指针</p><p>在最后有ExFreePoolWithTag释放这两个空间，这两个函数类似于malloc和free</p><p>在最后LOBYTE(v1) = sub_140001560(P, 56i64);   // 比较函数进行了比较</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">sub_140001560</span><span class="params">(__int64 a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a2 == <span class="number">56</span> &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)sub_1400019F0(a1, <span class="string">&quot;6zviISn2McHsa4b108v29tbKMtQQXQHA+2+sTYLlg9v2Q2Pq8SP24Uw=&quot;</span>, <span class="number">56</span>i64);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思是令a1等于后面的值，也就是说拿到P的终值了： </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>zviIS<span class="symbol">n2</span>McHsa<span class="number">4</span>b<span class="number">108</span>v<span class="number">29</span>tbKMtQQXQHA<span class="number">+2</span>+sTYLl<span class="name">g9</span>v<span class="number">2</span>Q<span class="number">2</span>Pq<span class="number">8</span>SP<span class="number">24</span>Uw=</span><br></pre></td></tr></table></figure><p>因为other通过自定义base64转换成P所以other终值直接放base64解码是</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">otherl = [<span class="number">0x70</span>,<span class="number">0x5c</span>,<span class="number">0x9e</span>,<span class="number">0xcc</span>,<span class="number">0x4d</span>,<span class="number">0x4c</span>,<span class="number">0xe2</span>,<span class="number">0x08</span>,</span><br><span class="line">          <span class="number">0x8e</span>,<span class="number">0xac</span>,<span class="number">0x00</span>,<span class="number">0xd0</span>,<span class="number">0x5b</span>,<span class="number">0x0c</span>,<span class="number">0x8c</span>,<span class="number">0x95</span>,</span><br><span class="line">          <span class="number">0x80</span>,<span class="number">0xc1</span>,<span class="number">0xe1</span>,<span class="number">0x85</span>,<span class="number">0x14</span>,<span class="number">0xf1</span>,<span class="number">0x48</span>,<span class="number">0x92</span>,</span><br><span class="line">          <span class="number">0x4c</span>,<span class="number">0xc4</span>,<span class="number">0xce</span>,<span class="number">0xee</span>,<span class="number">0x4d</span>,<span class="number">0x89</span>,<span class="number">0x36</span>,<span class="number">0x5c</span>,</span><br><span class="line">          <span class="number">0x8c</span>,<span class="number">0x50</span>,<span class="number">0xc8</span>,<span class="number">0xd1</span>,<span class="number">0xc0</span>,<span class="number">0x48</span>,<span class="number">0xcc</span>,<span class="number">0x03</span>,</span><br><span class="line">          <span class="number">0x11</span>]</span><br></pre></td></tr></table></figure><p>不对，这个base64不是常规的，要自己写解密函数，因为加密部分是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*(_BYTE *)(a1 + v5) = v6[*(_BYTE *)(a2 + v4) &amp; <span class="number">0x3F</span>];</span><br><span class="line">   *(_BYTE *)(a1 + v5 + <span class="number">1</span>) = v6[(<span class="number">4</span> * (*(_BYTE *)(a2 + v4 + <span class="number">1</span>) &amp; <span class="number">0xF</span>)) | ((*(_BYTE *)(a2 + v4) &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">   *(_BYTE *)(a1 + v5 + <span class="number">2</span>) = v6[(<span class="number">16</span> * (*(_BYTE *)(a2 + v4 + <span class="number">2</span>) &amp; <span class="number">3</span>)) | ((*(_BYTE *)(a2 + v4 + <span class="number">1</span>) &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">   *(_BYTE *)(a1 + v5 + <span class="number">3</span>) = v6[(*(_BYTE *)(a2 + v4 + <span class="number">2</span>) &amp; <span class="number">0xFC</span>) &gt;&gt; <span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>加密过程是：</p><p>a =0位后6个</p><p>b=0位前2和1位后4组合</p><p>c=2位后2和1位前4</p><p>d=2位前6</p><p>所以：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">0</span>]*<span class="number">42</span></span><br><span class="line"><span class="built_in">input</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">last = <span class="built_in">list</span>(<span class="string">&#x27;6zviISn2McHsa4b108v29tbKMtQQXQHA+2+sTYLlg9v2Q2Pq8SP24Uw&#x27;</span>)<span class="comment">#最后剩三个</span></span><br><span class="line">table = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;4KBbSzwWClkZ2gsr1qA+Qu0FtxOm6/iVcJHPY9GNp7EaRoDf8UvIjnL5MydTX3eh&#x27;</span>]</span><br><span class="line">tl = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">way</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="keyword">if</span> (table[i]==n):</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    tl.append(<span class="built_in">ord</span>(last[i]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(num),<span class="number">3</span>):</span><br><span class="line"></span><br><span class="line">    num[i] = ((way(tl[j])) | (((way(tl[j+<span class="number">1</span>])) &amp; <span class="number">3</span>)  &lt;&lt; <span class="number">6</span>))</span><br><span class="line">    num[i+<span class="number">1</span>] = (((way(tl[j+<span class="number">1</span>]) &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>) | ((way(tl[j+<span class="number">2</span>]) &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">if</span> ((j+<span class="number">3</span>) &lt; <span class="built_in">len</span>(num)):</span><br><span class="line">        num[i+<span class="number">2</span>] = ((way(tl[j+<span class="number">3</span>]) &lt;&lt; <span class="number">2</span>) | ((way(tl[j+<span class="number">2</span>]) &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num[i+<span class="number">2</span>] = ((way(tl[j+<span class="number">2</span>]) &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    j += <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">    <span class="built_in">input</span> += <span class="built_in">chr</span>(num[i])</span><br><span class="line">hnum = [<span class="built_in">hex</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> num]</span><br><span class="line"><span class="built_in">print</span>(hnum)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>)</span><br><span class="line"><span class="comment">#[&#x27;0x5c&#x27;, &#x27;0x21&#x27;, &#x27;0x7b&#x27;, &#x27;0x33&#x27;, &#x27;0x51&#x27;, &#x27;0x33&#x27;, &#x27;0x38&#x27;, &#x27;0x28&#x27;, &#x27;0x3a&#x27;, &#x27;0x2b&#x27;, &#x27;0x30&#x27;, &#x27;0x40&#x27;, &#x27;0x16&#x27;, &#x27;0x2c&#x27;, &#x27;0x33&#x27;, &#x27;0x25&#x27;, &#x27;0x36&#x27;, &#x27;0x4&#x27;, &#x27;0x38&#x27;, &#x27;0x46&#x27;, &#x27;0x51&#x27;, &#x27;0x3c&#x27;, &#x27;0x25&#x27;, &#x27;0x4a&#x27;, &#x27;0x13&#x27;, &#x27;0x33&#x27;, &#x27;0x39&#x27;, &#x27;0x3b&#x27;, &#x27;0x69&#x27;, &#x27;0x27&#x27;, &#x27;0x4d&#x27;, &#x27;0x29&#x27;, &#x27;0x3&#x27;, &#x27;0x14&#x27;, &#x27;0x33&#x27;, &#x27;0x2&#x27;, &#x27;0x30&#x27;, &#x27;0x31&#x27;, &#x27;0x2&#x27;, &#x27;0x40&#x27;, &#x27;0x6c&#x27;, &#x27;0x0&#x27;]</span></span><br><span class="line"><span class="comment">#[92, 33, 123, 51, 81, 51, 56, 40, 58, 43, 48, 64, 22, 44, 51, 37, 54, 4, 56, 70, 81, 60, 37, 74, 19, 51, 57, 59, 105, 39, 77, 41, 3, 20, 51, 2, 48, 49, 2, 64, 108, 0]</span></span><br><span class="line"><span class="comment">#\!&#123;3Q38(:+0@,3%68FQ&lt;%J39;i&#x27;M)301@l</span></span><br></pre></td></tr></table></figure><p>要注意：</p><ul><li>逆向时位数是6，左移右移和与的值要注意</li><li>py左移时不会溢出</li><li>最后剩了三个要分情况</li></ul><p>得到值</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[92, 33, 123, 51, 81, 51, 56, 40, 58, 43, 48, 64, 22, 44, 51, 37, 54, 4, 56, 70, 81, 60, 37, 74, 19, 51, 57, 59, 105, 39, 77, 41, 3, 20, 51, 2, 48, 49, 2, 64, 108, 0]</span></span><br></pre></td></tr></table></figure><p>最后在上面那个函数rc4</p><p>因为这里是对称加密，直接复制其实就可以了，或者如果会调试sys，直接输入密文就好了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">otherl = [<span class="number">92</span>, <span class="number">33</span>, <span class="number">123</span>, <span class="number">51</span>, <span class="number">81</span>, <span class="number">51</span>, <span class="number">56</span>, <span class="number">40</span>, <span class="number">58</span>, <span class="number">43</span>, <span class="number">48</span>, <span class="number">64</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">51</span>, <span class="number">37</span>, <span class="number">54</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">70</span>, <span class="number">81</span>, <span class="number">60</span>, <span class="number">37</span>, <span class="number">74</span>, <span class="number">19</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">105</span>, <span class="number">39</span>, <span class="number">77</span>, <span class="number">41</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">51</span>, <span class="number">2</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">108</span>]</span><br><span class="line">k = <span class="string">&#x27;&#x27;</span></span><br><span class="line">p = []</span><br><span class="line">inset = [<span class="number">0</span>]*<span class="number">64</span></span><br><span class="line">S = [<span class="number">0</span>]*<span class="number">64</span></span><br><span class="line">key = <span class="built_in">list</span>(<span class="string">&#x27;the_key_&#x27;</span>)</span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    inset[i] = i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    S[i] = <span class="built_in">ord</span>(key[i % <span class="number">8</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    a = (S[i] + inset[i] + a) % <span class="number">64</span></span><br><span class="line">    inset[i],inset[a] = inset[a],inset[i]</span><br><span class="line"></span><br><span class="line">b = c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(otherl)):</span><br><span class="line">    b = (b + <span class="number">1</span>) % <span class="number">64</span>;</span><br><span class="line">    c = (inset[b] + c) % <span class="number">64</span></span><br><span class="line">    inset[b],inset[c] = inset[c],inset[b]</span><br><span class="line">    otherl[i] ^= ((c ^ b) &amp; inset[(((c ^ b) + inset[c] + inset[b]) % <span class="number">64</span>)])</span><br><span class="line">    k += <span class="built_in">chr</span>(otherl[i])</span><br><span class="line">    p.append(otherl[i])</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment">#D0g3&#123;608292C4-15400BA4-B3299A5C-0429D&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="你好PE"><a href="#你好PE" class="headerlink" title="你好PE"></a>你好PE</h2><p>ida打开后搜索字符，找不到， 尝试动态调试找到主函数</p><p>最后找到主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_1005F820</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *v1; <span class="comment">// [esp+D0h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_1005B16F(&amp;unk_1014000F);</span><br><span class="line">  ((<span class="type">void</span> (__stdcall *)(_DWORD, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>))kernel32_VirtualAlloc)(<span class="number">0</span>, <span class="number">65548</span>, <span class="number">12288</span>, <span class="number">4</span>);</span><br><span class="line">  v1 = (_DWORD *)sub_1005A260();</span><br><span class="line">  <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v1[<span class="number">1</span>] = <span class="number">0x10000</span>;</span><br><span class="line">  *v1 = <span class="number">0</span>;</span><br><span class="line">  v1[<span class="number">2</span>] = v1 + <span class="number">3</span>;</span><br><span class="line">  sub_10059572(v1[<span class="number">2</span>], <span class="number">0</span>, v1[<span class="number">1</span>]);</span><br><span class="line">  sub_10058BC7(<span class="string">&quot;[out]: PLZ Input FLag \n&quot;</span>);</span><br><span class="line">  sub_10058BC7(<span class="string">&quot;[in ]: &quot;</span>);</span><br><span class="line">  sub_100581A4(&amp;unk_10114B68, v1[<span class="number">2</span>]);</span><br><span class="line">  *v1 = sub_1005B5BB(v1[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( *v1 == <span class="number">41</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *v1 = <span class="number">48</span>;</span><br><span class="line">    sub_1005A242(v1);</span><br><span class="line">    <span class="keyword">if</span> ( sub_10058AA0(v1[<span class="number">2</span>], &amp;unk_1013C008, <span class="number">48</span>) )</span><br><span class="line">      sub_10058BC7(<span class="string">&quot;[out]: WRONG FLAG\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sub_10058BC7(<span class="string">&quot;[out]: RIGHT FLAG\n&quot;</span>);</span><br><span class="line">    ((<span class="type">void</span> (__stdcall *)(_DWORD *, _DWORD, <span class="type">int</span>))kernel32_VirtualFree)(v1, <span class="number">0</span>, <span class="number">49152</span>);</span><br><span class="line">    sub_1005A260();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_10058BC7(<span class="string">&quot;[out]: len error\n&quot;</span>);</span><br><span class="line">    ((<span class="type">void</span> (__stdcall *)(_DWORD *, _DWORD, <span class="type">int</span>))kernel32_VirtualFree)(v1, <span class="number">0</span>, <span class="number">49152</span>);</span><br><span class="line">    sub_1005A260();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两个函数需要注意</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub_1005A242(v1);</span><br><span class="line"><span class="keyword">if</span> ( sub_10058AA0(v1[<span class="number">2</span>], &amp;unk_1013C008, <span class="number">48</span>) )</span><br></pre></td></tr></table></figure><p>第二个函数进去之后根据逻辑判断</p><p>先比较了前32个值，然后很麻烦的比较了后面的值，反正就是那两个值相等</p><p>也就是说末值就是unk_1013C008</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x4D</span>, <span class="number">0xB8</span>, <span class="number">0x76</span>, <span class="number">0x29</span>, <span class="number">0xF5</span>, <span class="number">0xA9</span>, <span class="number">0x9E</span>, <span class="number">0x59</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0xB1</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0x21</span>, <span class="number">0x2C</span>, <span class="number">0x30</span>, <span class="number">0xB3</span>, <span class="number">0x79</span>, <span class="number">0x78</span>, <span class="number">0x17</span>, <span class="number">0xA8</span>, <span class="number">0xED</span>, <span class="number">0xF7</span>, <span class="number">0xDB</span>, <span class="number">0xE1</span>, <span class="number">0x53</span>, <span class="number">0xF0</span>, <span class="number">0xDB</span>, <span class="number">0xE9</span>, <span class="number">0x03</span>, <span class="number">0x51</span>, <span class="number">0x5E</span>, <span class="number">0x09</span>, <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0xDF</span>, <span class="number">0xF0</span>, <span class="number">0x96</span>, <span class="number">0xFC</span>, <span class="number">0xC1</span>, <span class="number">0xB5</span>, <span class="number">0xE6</span>, <span class="number">0x62</span>, <span class="number">0x95</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br></pre></td></tr></table></figure><p>第一个应该是加密，用findcrypt搜索一下，搜不出来。。好像在调试的时候搜会很卡，那就直接分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">sub_1005F6F0</span><span class="params">(_DWORD *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+D0h] [ebp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-24h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [esp+E8h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> *v5; <span class="comment">// [esp+F8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_1005B16F(&amp;unk_1014000F);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; *a1 &gt;&gt; <span class="number">3</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (<span class="type">int</span> *)(a1[<span class="number">2</span>] + <span class="number">8</span> * i);</span><br><span class="line">    v1 = *v5;</span><br><span class="line">    v4 = *(_QWORD *)v5;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">64</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      LOBYTE(v1) = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">        v4 = qword_1013C000 ^ sub_10059F9F(v1, HIDWORD(v4));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v4 = sub_10059F9F(v1, HIDWORD(v4));</span><br><span class="line">    &#125;</span><br><span class="line">    *(_QWORD *)v5 = v4;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>这啥啊，看不懂。。。</del>最外层循环控制轮数，内层循环控制一轮的加密次数，根据这个来直接写逆向？？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __usercall <span class="symbol">sub_1005FDE0@<span class="keyword">&lt;eax&gt;</span></span>(__int64 <span class="symbol">pnum@<span class="keyword">&lt;edx:eax&gt;</span></span>, unsigned __int8 <span class="symbol">ahigh@<span class="keyword">&lt;cl&gt;</span></span>)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( ahigh &gt;= <span class="number">64</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v2) = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ahigh &gt;= <span class="number">32</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v2) = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> pnum &lt;&lt; (ahigh &amp; <span class="number">0x1F</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里似乎sub_10059F9F(v1, HIDWORD(v4))的位置有问题，是ida反编译的锅，应该是先执行这个再if else</p><p>看汇编窗口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debug033:1005FDE0 ; int __usercall sub_1005FDE0@&lt;eax&gt;(__int64 pnum@&lt;edx:eax&gt;, unsigned __int8 ahigh@&lt;cl&gt;)</span><br><span class="line">debug033:1005FDE0 sub_1005FDE0    proc near               ; CODE XREF: cal↑j</span><br><span class="line">debug033:1005FDE0                 cmp     cl, 40h ; &#x27;@&#x27;</span><br><span class="line">debug033:1005FDE3                 jnb     short loc_1005FDFA</span><br><span class="line">debug033:1005FDE5                 cmp     cl, 20h ; &#x27; &#x27;</span><br><span class="line">debug033:1005FDE8                 jnb     short loc_1005FDF0</span><br><span class="line">debug033:1005FDEA                 shld    edx, eax, cl</span><br><span class="line">debug033:1005FDED                 shl     eax, cl</span><br><span class="line">debug033:1005FDEF                 retn</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov     cl, 1  ;在调用cal之前</span><br></pre></td></tr></table></figure><p>这里的cl就是1，和传入无关，最后有一句shl     eax, cl</p><p>shl是<code>双精度左移</code>，这是类似循环左移的操作，即左移，右边的空值由左边溢出的值补充，类似还有shr双精度右移，并没有0x1f</p><p>因此，整体逻辑是：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先分组为<span class="number">8</span>字节<span class="built_in">x6</span>组</span><br><span class="line">如果是奇数：与key再左移</span><br><span class="line">如果是偶数：直接左移</span><br><span class="line">得到结果</span><br></pre></td></tr></table></figure><p>所以逆向是</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分组</span><br><span class="line">如果是奇数：与<span class="built_in">key</span>再右移</span><br><span class="line">如果是偶数：直接右移</span><br></pre></td></tr></table></figure><p>同时可以知道的是，</p><p>如果是奇数右移，左边应该补1</p><p>如果是偶数右移，左边不用补</p><p>那么逆向：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0x4D</span>, <span class="number">0xB8</span>, <span class="number">0x76</span>, <span class="number">0x29</span>, <span class="number">0xF5</span>, <span class="number">0xA9</span>, <span class="number">0x9E</span>, <span class="number">0x59</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0xB1</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0x21</span>, <span class="number">0x2C</span>, <span class="number">0x30</span>, <span class="number">0xB3</span>, <span class="number">0x79</span>, <span class="number">0x78</span>, <span class="number">0x17</span>, <span class="number">0xA8</span>, <span class="number">0xED</span>, <span class="number">0xF7</span>, <span class="number">0xDB</span>, <span class="number">0xE1</span>, <span class="number">0x53</span>, <span class="number">0xF0</span>, <span class="number">0xDB</span>, <span class="number">0xE9</span>, <span class="number">0x03</span>, <span class="number">0x51</span>, <span class="number">0x5E</span>, <span class="number">0x09</span>, <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0xDF</span>, <span class="number">0xF0</span>, <span class="number">0x96</span>, <span class="number">0xFC</span>, <span class="number">0xC1</span>, <span class="number">0xB5</span>, <span class="number">0xE6</span>, <span class="number">0x62</span>, <span class="number">0x95</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">q = [<span class="number">0x599EA9F52976B84D</span>, <span class="number">0x302C212FC4B15655</span>, <span class="number">0xDBF7EDA8177879B3</span>, <span class="number">0x5E5103E9DBF053E1</span>, <span class="number">0xC1FC96F0DF00C109</span>, <span class="number">0x000000019562E6B5</span>]</span><br><span class="line">key = <span class="number">0x54AA4A9</span></span><br><span class="line">k=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span> (q[i] &amp; <span class="number">1</span>):</span><br><span class="line">            q[i] = (q[i] ^ key) &gt;&gt; <span class="number">1</span></span><br><span class="line">            q[i] |= <span class="number">0x8000000000000000</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            q[i] = (q[i] &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    k.append(<span class="built_in">hex</span>(q[i]))</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment">#[&#x27;0x4530367b33673044&#x27;, &#x27;0x37352d4132374531&#x27;, &#x27;0x372d304642384136&#x27;, &#x27;0x2d39424243313037&#x27;, &#x27;0x4345353134323042&#x27;, &#x27;0x7d&#x27;]</span></span><br></pre></td></tr></table></figure><p>逆序，转hex，按字符逆序</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">D0g3</span>&#123;<span class="number">60</span>E1E72A-<span class="number">576</span>A8BF0-<span class="number">7701</span>CBB9-B02415EC&#125;</span><br></pre></td></tr></table></figure><h2 id="你见过蓝色的小鲸鱼吗"><a href="#你见过蓝色的小鲸鱼吗" class="headerlink" title="你见过蓝色的小鲸鱼吗"></a>你见过蓝色的小鲸鱼吗</h2><p>打开文件后，发现是win程序，说明进入主窗口程序和判断函数不一定在一个位置 </p><p>所以打开后需要找到判断代码，搜索string无效</p><p>根据弹窗函数是MessageBox，尝试搜索</p><p>然后找到判断函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __thiscall <span class="title function_">lastcall</span><span class="params">(<span class="type">void</span> *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> wrong[<span class="number">28</span>]; <span class="comment">// [esp+D0h] [ebp-54h] BYREF</span></span><br><span class="line">  CHAR yes[<span class="number">20</span>]; <span class="comment">// [esp+ECh] [ebp-38h] BYREF</span></span><br><span class="line">  CHAR Caption[<span class="number">24</span>]; <span class="comment">// [esp+100h] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+118h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = this;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52102F);</span><br><span class="line">  <span class="built_in">strcpy</span>(Caption, <span class="string">&quot;tip&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(yes, <span class="string">&quot;You Get It!&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(wrong, <span class="string">&quot;Wrong user/passwd&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)v5 + <span class="number">2</span>) != *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    || j__memcmp(*(<span class="type">const</span> <span class="type">void</span> **)v5, *((<span class="type">const</span> <span class="type">void</span> **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>)) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, wrong, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, yes, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的v5+2和v5+3一定指向一个是输入（可能加密了），另一个说不准，因为有一个密码一个用户名</p><p>由于需要进入else分支，所以条件必须为假</p><p>即：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*((_DWORD *)v5 + <span class="number">2</span>) == *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    &amp;&amp; ！j__memcmp<span class="comment">(*(const void **)</span>v5, *((<span class="keyword">const</span> void **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>既然如此，需要找出能改变v5+2和+3的地址的函数（修改了this），向上找：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *v6; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *lpString; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> WindowTextLengthA; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  WindowTextLengthA = GetWindowTextLengthA(hWnd);</span><br><span class="line">  v10 = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  lpString = (CHAR *)j__malloc(__CFADD__(WindowTextLengthA, <span class="number">16</span>) ? <span class="number">-1</span> : WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(v10, <span class="number">16</span>) ? <span class="number">-1</span> : v10 + <span class="number">16</span>);</span><br><span class="line">  v6 = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( lpString &amp;&amp; result )</span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, lpString, WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">    GetWindowTextA(DlgItem, v6, v10 + <span class="number">16</span>);</span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);</span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;unk_51D38C, <span class="number">0x10</span>u);</span><br><span class="line">    sub_45126F(lpString, WindowTextLengthA, (<span class="type">int</span>)v6, v10);</span><br><span class="line">    j_lastcall(v4);</span><br><span class="line">    j__free(lpString);</span><br><span class="line">    j__free(v6);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动调可知：第一个是用户名，第二个是密码</p><p>化简：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *password; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *username; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> lenOFpass; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> lenOFname; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  lenOFname = GetWindowTextLengthA(hWnd);</span><br><span class="line">  lenOFpass = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  username = (CHAR *)j__malloc(__CFADD__(lenOFname, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFname + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(lenOFpass, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFpass + <span class="number">16</span>);</span><br><span class="line">  password = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( username &amp;&amp; result )                     <span class="comment">// 检查空指针</span></span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, username, lenOFname + <span class="number">16</span>);<span class="comment">// 用户名</span></span><br><span class="line">    GetWindowTextA(DlgItem, password, lenOFpass + <span class="number">16</span>);<span class="comment">// 密码</span></span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);                        <span class="comment">// 分配内存</span></span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);              <span class="comment">// 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;specialloc, <span class="number">0x10</span>u);             <span class="comment">// 初始化对象</span></span><br><span class="line">    encode(username, lenOFname, (<span class="type">int</span>)password, lenOFpass);</span><br><span class="line">    j_lastcall(v4);                             <span class="comment">// 判断</span></span><br><span class="line">    j__free(username);</span><br><span class="line">    j__free(password);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面实在分析不出来了，里面有一些涉及c++的理解的,所以看看wp</p><p>在后面有加密函数，用插件findcrypt可以直接看出来是blowfish</p><p>在cmp时下断点buf1就是最后的值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11A51F049550E2508F17E16CF1632B47</span><br></pre></td></tr></table></figure><p>写blowfish的解密：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文（以十六进制表示）</span></span><br><span class="line">ciphertext_hex = <span class="string">&quot;11A51F049550E2508F17E16CF1632B47&quot;</span></span><br><span class="line">ciphertext = binascii.unhexlify(ciphertext_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥（简单字符串）</span></span><br><span class="line">key = <span class="string">&quot;UzBtZTBuZV9EMGcz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Blowfish ECB模式的解密器</span></span><br><span class="line">cipher = Blowfish.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), Blowfish.MODE_ECB)</span><br><span class="line"></span><br><span class="line">plaintext_bytes = cipher.decrypt(ciphertext)</span><br><span class="line">plaintext = plaintext_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"><span class="comment">#QHRoZWJsdWVmMXNo</span></span><br></pre></td></tr></table></figure><p>这个答案是个base64，解密后是@thebluef1sh</p><p>（和蓝鲸的唯一关系吗。。。）</p><p>所以</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">D0g3</span><span class="template-variable">&#123;UzBtZTBuZV9EMGczQHRoZWJsdWVmMXNo&#125;</span></span><br></pre></td></tr></table></figure><hr><p>写完啦，</p><p>如有错误，请在下方评论区写下您的想法。感谢！</p><details class="folding-tag" ><summary> 题目下载 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="(百度网盘)" href="https://pan.baidu.com/s/1XAZU4ED-xjuUVUno-Kx81Q?pwd=Game"><div class="left"><img src="/assets/coffee.png"/></div><div class="right"><p class="text">(百度网盘)</p><p class="url">https://pan.baidu.com/s/1XAZU4ED-xjuUVUno-Kx81Q?pwd=Game</p></div></a></div><p>解压密码:</p><p>pRism</p>              </div>            </details>]]></content>
    
    
    <summary type="html">在赛后对RE的题的分析</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="wp" scheme="https://www.pri87.vip/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>刷题记录(2)</title>
    <link href="https://www.pri87.vip/posts/8f76d0c7.html"/>
    <id>https://www.pri87.vip/posts/8f76d0c7.html</id>
    <published>2024-01-03T03:26:03.000Z</published>
    <updated>2024-01-03T03:30:07.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NSSCTF"><a href="#NSSCTF" class="headerlink" title="NSSCTF"></a>NSSCTF</h1><h2 id="NSSRound-4-SWPU-hide-and-seek"><a href="#NSSRound-4-SWPU-hide-and-seek" class="headerlink" title="[NSSRound#4 SWPU]hide_and_seek"></a>[NSSRound#4 SWPU]hide_and_seek</h2><p>打开调试后，发现有反调试，把一开始的exit给nop掉</p><p>然后调试跳到后面发现有flag：SCTF{wud3_0n@,34p}</p><p>但是结果不对？？</p><p>再次调试，在hex视图中alt+t搜索NSSCTF，发现flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">NSSCTF</span><span class="template-variable">&#123;h1d3_0n_h34p&#125;</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-X-Basic-ez-z3"><a href="#NSSRound-X-Basic-ez-z3" class="headerlink" title="[NSSRound#X Basic]ez_z3"></a>[NSSRound#X Basic]ez_z3</h2><p>先用die查壳，发现是upx，尝试用upx-d脱壳，然后失败，应该是改过什么东西，打开ida看看，结果发现节区名从UPX变成了XYU，所以尝试还原，还原后还是失败，在03E0处还需修改为UPX，这次UPX-d成功，参考<a href="https://www.52pojie.cn/thread-326995-1-1.html">UPX防脱壳机脱壳、去除特征码、添加花指令小探 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>打开ida查看main函数并尝试调试</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Please input the flag:<span class="number">1212121</span></span><br><span class="line">Can you calculated out z3?</span><br><span class="line">Please input z3:<span class="number">121212</span></span><br><span class="line">YOU are wrong</span><br><span class="line">oh no!!!!!your flag is wrong,try again</span><br></pre></td></tr></table></figure><p>main函数大致逻辑：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(std::cout, <span class="string">&quot;Please input the flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">getin</span>(std::cin, flag);</span><br><span class="line">  v3 = <span class="built_in">print</span>(std::cout, <span class="string">&quot;Can you calculated out z3?&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, guessNoUse);</span><br><span class="line">  <span class="built_in">print</span>(std::cout, <span class="string">&quot;Please input z3:&quot;</span>);</span><br><span class="line">  <span class="built_in">getin</span>(std::cin, z3num);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">j_strlen</span>(flag); ++i )</span><br><span class="line">    storn[i] = <span class="built_in">change</span>(flag[i], exenum[i]);</span><br><span class="line">  <span class="built_in">z3check1</span>(z3num);</span><br><span class="line">  <span class="built_in">z3check2</span>(z3num);</span><br><span class="line">  check = <span class="built_in">sub_7FF7CCBC10E6</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ( check == <span class="number">1</span> )</span><br><span class="line">    v4 = <span class="built_in">print</span>(std::cout, <span class="string">&quot;yeah!!!!!!you get the flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v4 = <span class="built_in">print</span>(std::cout, <span class="string">&quot;oh no!!!!!your flag is wrong,try again&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, guessNoUse);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据流程大致是先对flag变换为k，然后检测输入一个z3序列是否满足条件，然后让z3序列和k变换，检查最后结果</p><p>那么先找到z3num：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个求解器实例</span></span><br><span class="line">f = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个整数变量的数组，用于存储z3num中的值</span></span><br><span class="line">z3num = [Int(<span class="string">f&#x27;z3num[<span class="subst">&#123;i&#125;</span>]&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> z3num:</span><br><span class="line">    f.add(num &gt;= <span class="number">0</span>)</span><br><span class="line">    f.add(num &lt;= <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">2582239</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - (<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">      + <span class="number">17</span> * z3num[<span class="number">16</span>]) == <span class="number">2602741</span>)</span><br><span class="line">f.add(<span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>] * <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>] * <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>] * <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">2668123</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + (<span class="number">13</span> * z3num[<span class="number">12</span>] + <span class="number">11</span> * z3num[<span class="number">10</span>] - <span class="number">12</span> * z3num[<span class="number">11</span>]) * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">2520193</span>)</span><br><span class="line">f.add(<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>] * <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">8904587</span>)</span><br><span class="line">f.add(<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>] * <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * (<span class="number">13</span> * z3num[<span class="number">12</span>] + <span class="number">12</span> * z3num[<span class="number">11</span>] - <span class="number">14</span> * z3num[<span class="number">13</span>] - <span class="number">15</span> * z3num[<span class="number">14</span>])</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">1227620874</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>] * <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">1836606059</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">8720560</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span></span><br><span class="line">     * z3num[<span class="number">10</span>]</span><br><span class="line">     * (<span class="number">10</span> * z3num[<span class="number">9</span>] + <span class="number">30</span> * z3num[<span class="number">5</span>] + <span class="number">5</span> * z3num[<span class="number">4</span>] + <span class="number">4</span> * z3num[<span class="number">3</span>] - <span class="number">7</span> * z3num[<span class="number">6</span>] + <span class="number">8</span> * z3num[<span class="number">7</span>] - <span class="number">9</span> * z3num[<span class="number">8</span>])</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - (<span class="number">16</span> * z3num[<span class="number">15</span>] - <span class="number">17</span> * z3num[<span class="number">16</span>] - <span class="number">18</span> * z3num[<span class="number">17</span>]) * <span class="number">15</span> * z3num[<span class="number">14</span>] == <span class="number">11387045</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">7660269</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - (<span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">      - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">      - <span class="number">30</span> * z3num[<span class="number">5</span>])</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">2461883</span>)</span><br><span class="line">f.add(<span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>] * <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == -<span class="number">966296</span>)</span><br><span class="line">f.add(<span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + (<span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">      + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">      + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">      + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">      + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">      - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">      + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">      - <span class="number">9</span> * z3num[<span class="number">8</span>])</span><br><span class="line">     * <span class="number">2</span></span><br><span class="line">     * z3num[<span class="number">1</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>] == <span class="number">254500223</span>)</span><br><span class="line">f.add(<span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>] * <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">6022286</span>)</span><br><span class="line">f.add(<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>] * <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == -<span class="number">636956022</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">10631829</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">15</span> * z3num[<span class="number">14</span>] * <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + (<span class="number">4</span> * z3num[<span class="number">3</span>] - <span class="number">5</span> * z3num[<span class="number">4</span>] - <span class="number">30</span> * z3num[<span class="number">5</span>]) * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>] == <span class="number">6191333</span>)</span><br><span class="line">f.add(<span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>] * <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>] * <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] * <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>] == <span class="number">890415359</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>]</span><br><span class="line">     + <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>] == <span class="number">23493664</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>] * <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">1967260144</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.check())</span><br><span class="line"><span class="keyword">while</span> (f.check()==sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()</span><br><span class="line">    p =<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">20</span>):</span><br><span class="line">        p += <span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[z3num[i]])))</span><br><span class="line">        condition.append(z3num[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[z3num[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))</span><br><span class="line">    <span class="comment">#hahahathisisfackflag</span></span><br></pre></td></tr></table></figure><p>这里奇怪的是一开始用或逻辑解不出来正确值，但是把所有都与之后却可以得到正确的结果，同时这个不是flag是中间用做加密的值</p><p>又因为后来的算法是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_7FF7CCBC4830</span><span class="params">(<span class="type">char</span> *z3num)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7CCBDB069, v1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; j_strlen(flag); ++i )</span><br><span class="line">    last[i] = z3num[j_strlen(flag) - i - <span class="number">1</span>] ^ storn[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的检查是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">sub_7FF7CCBC4770</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">size_t</span> len; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7CCBDB069, v1);</span><br><span class="line">  zer0 = <span class="number">0</span>;</span><br><span class="line">  len = j_strlen(flag);</span><br><span class="line">  <span class="keyword">if</span> ( len )</span><br><span class="line">    <span class="keyword">return</span> last[zer0] == strange_num[zer0];     <span class="comment">// 前两位相等，因为是DWORD</span></span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个可能错了什么，可能前两位相等相当于全部相等。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0x00001207</span>, <span class="number">0</span>x00004CA0, <span class="number">0x00004F21</span>, <span class="number">0x00000039</span>, <span class="number">0</span>x<span class="number">0001A523</span>, <span class="number">0</span>x0000023A, <span class="number">0x00000926</span>, <span class="number">0</span>x00004CA7, <span class="number">0x00006560</span>, <span class="number">0x00000036</span>, <span class="number">0</span>x0001A99B, <span class="number">0</span>x00004CA8, <span class="number">0</span>x0001BBE0, <span class="number">0x00003705</span>, <span class="number">0x00000926</span>, <span class="number">0</span>x<span class="number">000077D3</span>, <span class="number">0x00009A98</span>, <span class="number">0</span>x0000657B, <span class="number">0x00000018</span>, <span class="number">0x00000B11</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br></pre></td></tr></table></figure><p>前面的变换是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">change2</span><span class="params">(<span class="type">int</span> flag, __int64 exenum)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> a; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">int</span> exei; <span class="comment">// [rsp+148h] [rbp+128h]</span></span><br><span class="line"></span><br><span class="line">  exei = exenum;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7CCBDB069, exenum);</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( exei )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (exei &amp; <span class="number">1</span>) != <span class="number">0</span> )                      <span class="comment">// exenum这一位是奇数</span></span><br><span class="line">      a *= flag;</span><br><span class="line">    flag = flag * flag % <span class="number">1000</span>;</span><br><span class="line">    exei &gt;&gt;= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">exe = [<span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x7</span>]</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x1207</span>, <span class="number">0x4CA0</span>, <span class="number">0x4F21</span>, <span class="number">0x0039</span>, <span class="number">0x1A523</span>, <span class="number">0x023A</span>, <span class="number">0x0926</span>, <span class="number">0x4CA7</span>, <span class="number">0x6560</span>, <span class="number">0x0036</span>, <span class="number">0x1A99B</span>, <span class="number">0x4CA8</span>, <span class="number">0x1BBE0</span>, <span class="number">0x3705</span>, <span class="number">0x0926</span>, <span class="number">0x77D3</span>, <span class="number">0x9A98</span>, <span class="number">0x657B</span>, <span class="number">0x0018</span>, <span class="number">0x0B11</span>]</span><br><span class="line"></span><br><span class="line">z3num = <span class="built_in">list</span>(<span class="string">&#x27;hahahathisisfackflag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stron = [<span class="number">0</span>]*<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range (<span class="number">20</span>):</span><br><span class="line">    stron[i] = ord(z3num[<span class="number">19</span> - i]) ^ last[i]</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">20</span></span><br><span class="line">def po(flag,b):</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (b):</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span> != <span class="number">0</span>):</span><br><span class="line">            a *= flag</span><br><span class="line">        flag = flag * flag % <span class="number">1000</span></span><br><span class="line">        b &gt;&gt;= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">20</span>): </span><br><span class="line">    <span class="keyword">for</span> chrr in range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">if</span> (po(chrr,exe[i]) == stron[i]):</span><br><span class="line">            flag[i] = chr(chrr)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;&#x27;.join(flag))</span></span><br><span class="line"><span class="string">#T1e_z3_1s_v1r9_3asy!</span></span><br></pre></td></tr></table></figure><p>爆破得出答案</p><p>总结：</p><p>z3遇到或时计算非常慢，用bitvec型或把或逻辑改成与加快速度</p><p>最后一步遇到不好逆向的也不好z3的，可以用爆破求解因为字符一定在32到127</p><p>一个疑问是：最后一步的b都是一位数，说明a一定是1或者flag的值，stron里面就应该是这个数为什么stron里不是呢</p><h2 id="NSSCTF-2nd-MyBase"><a href="#NSSCTF-2nd-MyBase" class="headerlink" title="[NSSCTF 2nd]MyBase"></a>[NSSCTF 2nd]MyBase</h2><p>打开ida后发现有tls，需要注意一下</p><p>ida打开之后</p><p>main函数有两个子函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _main();</span><br><span class="line">  test();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先调试看看有没有反调试，然后发现并没有</p><p>第一个_main看不懂，直接进test，里面有一个base64</p><p>打开后根据码表直接解密，但是解不出来。。</p><p>去data里面看看，发现还有码表，进交叉引用的函数发现有一个打乱的代码</p><p>是个c语言函数，有srand函数，所以调试把他找出来</p><p>真：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">YsVO0tvT2o4puZ38j1dwf7MArGPNeQLDRHUK</span>+SChbFanmklWEcgixXJIq6y5B/<span class="number">9</span>z</span><br></pre></td></tr></table></figure><p>一开始加密的：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+86420ywusqomkigecaYWUSQOMKIGECABDFHJLNPRTVXZbdfhjlnprtvxz13579/</span></span><br></pre></td></tr></table></figure><hr><p>然后发现这个打乱代码执行了很多次</p><p>感觉哪里漏了，最后查找交叉引用发现打乱代码在加密里面有一行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( !setjmp(env) )</span><br><span class="line">    exception_handler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过查阅：</p><p>setjmp和longjmp成对使用实现函数间跳转</p><p>setjmp将函数在此处的上下文保存在jmp_buf结构体中，以供longjmp从此结构体中恢复</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">setjmp</span><span class="params">(jmp_buf env)</span>;</span><br></pre></td></tr></table></figure><p>env为保存的结构体变量的位置，若直接调用返回0，否则返回非0（主要指通过longjmp跳转）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">longjmp</span><span class="params">(jmp_buf env, <span class="type">int</span> val)</span>;</span><br></pre></td></tr></table></figure><p>env为由setjmp保存的上下文，val表示longjmp传给setjmp的返回值，如果val=0，则setjmp返回1，否则返回val</p><p>longjmp 不直接返回，而是从 setjmp 函数中返回，longjmp 执行完之后，程序就像刚从 setjmp 函数返回一样。</p><p>所以；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !setjmp(env) )</span><br><span class="line">      exception_handler();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这段代码先执行setjmp(env)，返回0</p><p>进入exception_handler();</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">exception_handler</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  generate_base64_table(base64_table);</span><br><span class="line">  longjmp_0(env, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后更新base64码表</p><p>所以逻辑是：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对第一组加密</span><br><span class="line">更新</span><br><span class="line">对第二组加密</span><br><span class="line">更新</span><br><span class="line">对第三组加密</span><br><span class="line">更新</span><br><span class="line"><span class="meta prompt_">...</span></span><br></pre></td></tr></table></figure><p>所以密文</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">YkLY</span></span><br><span class="line"><span class="symbol">v1Xj</span></span><br><span class="line"><span class="number">23</span><span class="built_in">X7</span></span><br><span class="line"><span class="symbol">N0E5</span></span><br><span class="line"><span class="symbol">eoFg</span></span><br><span class="line"><span class="symbol">UveK</span></span><br><span class="line"><span class="symbol">eos1</span></span><br><span class="line"><span class="symbol">XS8K</span></span><br><span class="line"><span class="number">9</span>r4g</span><br></pre></td></tr></table></figure><p>码表</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+86420ywusqomkigecaYWUSQOMKIGECABDFHJLNPRTVXZbdfhjlnprtvxz13579/</span><br><span class="line">YsVO0tvT2o4puZ38j1dwf7MArGPNeQLDRHUK+SChbFanmklWEcgixXJIq6y5B/9z</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br><span class="line">YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br><span class="line">YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br><span class="line">YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br></pre></td></tr></table></figure><p>然后看了半天</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v10 = (bbb &lt;&lt; <span class="number">8</span>) + (aa &lt;&lt; <span class="number">16</span>) + cc;</span><br><span class="line">    basenum[v14] = base64_table[cc &amp; <span class="number">0x3F</span>];</span><br><span class="line">    basenum[v14 + <span class="number">1</span>] = base64_table[(v10 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">    basenum[v14 + <span class="number">2</span>] = base64_table[(v10 &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3F</span>];</span><br></pre></td></tr></table></figure><p>发现是倒序输出</p><p>那么就直接倒序解码：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">YLkY</span><br><span class="line">jX1v</span><br><span class="line"><span class="number">7</span>X32</span><br><span class="line"><span class="number">5E0</span>N</span><br><span class="line">gFoe</span><br><span class="line">KevU   T0_</span><br><span class="line"><span class="number">1</span>soe   Re_</span><br><span class="line">K8SX</span><br><span class="line">g4r9   <span class="keyword">ld</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">NSSCTF</span><span class="template-variable">&#123;Welc0me_T0_Re_World&#125;</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-3-Team-jump-by-jump-revenge"><a href="#NSSRound-3-Team-jump-by-jump-revenge" class="headerlink" title="[NSSRound#3 Team]jump_by_jump_revenge"></a>[NSSRound#3 Team]jump_by_jump_revenge</h2><p>打开后发现main函数不能反编译，感觉有花指令</p><p>然后nop掉两行代码</p><p>获得正确的main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">36</span>]; <span class="comment">// [esp+E8h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_411037(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)Str1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">29</span>; ++i )</span><br><span class="line">    Str1[i] = (Str1[i] + Str1[(i * i + <span class="number">123</span>) % <span class="number">21</span>]) % <span class="number">96</span> + <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !j_strcmp(Str1, <span class="string">&quot;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&quot;</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;right!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;nope!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法要注意要从后面往前，因为前面的已经被覆盖了</p><p>非常抽象（TAT）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">last = <span class="string">&quot;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&quot;</span></span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">29</span></span><br><span class="line">c = [<span class="number">0</span>]*<span class="number">29</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    c[i] = (i * i + <span class="number">123</span>) % <span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#flag[i] = (flag[i] + flag[c[i]]) % 96 + 32</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; c[i]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            uuk = (<span class="built_in">ord</span>(last[i])-<span class="number">32</span>)+ j * <span class="number">96</span> -<span class="built_in">ord</span>(last[c[i]])</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">31</span>&lt; uuk &lt; <span class="number">127</span>):</span><br><span class="line">                flag[i]=uuk</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            uuk = (<span class="built_in">ord</span>(last[i])-<span class="number">32</span>)+ j * <span class="number">96</span> -flag[c[i]]</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">31</span>&lt; uuk &lt; <span class="number">127</span>):</span><br><span class="line">                flag[i]=uuk</span><br><span class="line">u = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    u += <span class="built_in">chr</span>(flag[i])</span><br><span class="line"><span class="built_in">print</span>(u) </span><br><span class="line"><span class="comment">#NSSCTF&#123;Jump_b9_jump!_r3V3n9e&#125;</span></span><br></pre></td></tr></table></figure><p>总结：逆向加密算法时要注意是递推式的还是映射式的</p><p>看了看大佬的wp，好简洁：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ciper=<span class="string">&#x27;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(ciper)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    tmp=ord(ciper[i])<span class="number">-32</span>-ord(ciper[(i*i+<span class="number">123</span>)%<span class="number">21</span>])</span><br><span class="line">    <span class="keyword">while</span>(tmp&lt;<span class="number">33</span>):</span><br><span class="line">        tmp+=<span class="number">96</span></span><br><span class="line">    ciper=ciper[:i]+chr(tmp)+ciper[i+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">print(ciper)</span><br></pre></td></tr></table></figure><h2 id="NSSRound-2-Able-findxenny"><a href="#NSSRound-2-Able-findxenny" class="headerlink" title="[NSSRound#2 Able]findxenny"></a>[NSSRound#2 Able]findxenny</h2><p>打开main函数看看，对输入的flag的检查的函数返回值是本身？？没理解暂时跳过，看到最后的检查有三个check</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">check1</span>(*v14) || (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">check2</span>(*v15) || (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">check3</span>(*v16) )</span><br><span class="line">   &#123;</span><br><span class="line">     v10 = <span class="built_in">sub_7FF72A641262</span>(std::cout, <span class="string">&quot;Try harder&quot;</span>);</span><br><span class="line">     std::ostream::<span class="keyword">operator</span>&lt;&lt;(v10, sub_7FF72A6411FE);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">     v9 = <span class="built_in">sub_7FF72A641262</span>(std::cout, <span class="string">&quot;I can&#x27;t believe my golden doge eye! we are comarde!&quot;</span>);</span><br><span class="line">     std::ostream::<span class="keyword">operator</span>&lt;&lt;(v9, sub_7FF72A6411FE);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>打开之后是一组数，通过交叉引用查看这个数据是通过函数生成的，但是没看懂。。。</p><p>看了wp发现这个是SMC，三个check是函数，双击进入对应地址，发现都是数据，这时要c加p组合再f5进入反编译结果检查的值就在这里</p><p><img src="https://s2.loli.net/2023/12/27/o82P7AFzawI6l49.png" alt="image-20231227230725460"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_278FBE97370</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x665F756F795F686F</span>i64 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_278FBEA01C0</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v3[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="type">int</span> v4[<span class="number">12</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">0</span>] = a1;</span><br><span class="line">  qmemcpy(v4, <span class="string">&quot;ound_our&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  v1 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">while</span> ( *((_BYTE *)v3 + v1) == *((_BYTE *)v4 + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v1 &gt;= <span class="number">8</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_278FBE999B4</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x796E6E33785F</span>i64 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接得出结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh_you_fou<span class="symbol">nd_our_x3</span><span class="symbol">nny</span></span><br></pre></td></tr></table></figure><p>总结，如果看到virtulprotect和数据当作地址，尝试把数据改成代码</p><h2 id="NSSCTF-2nd-Bytecode"><a href="#NSSCTF-2nd-Bytecode" class="headerlink" title="[NSSCTF 2nd]Bytecode"></a>[NSSCTF 2nd]Bytecode</h2><p>打开后，是py字节码</p><p>反编译一下</p><h1 id="安洵杯"><a href="#安洵杯" class="headerlink" title="安洵杯"></a>安洵杯</h1><h2 id="mobilego"><a href="#mobilego" class="headerlink" title="mobilego"></a>mobilego</h2><p>jadx打开mainactivity</p><p>模拟器中尝试输入，返回nonono</p><p>发现判断函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> m141lambda$onCreate$<span class="number">0</span>$comexamplemobilegoMainActivity(View v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Game.checkflag(<span class="built_in">this</span>.editText.getText().toString()).equals(getResources().getString(C0569R.string.cmp))) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;yes your flag is right&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;No No No&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C0569R中有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">string</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">app_name</span> <span class="operator">=</span> <span class="number">2131689500</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> <span class="number">2131689512</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的cmp是它的id值而不是它的具体值</p><p>所以动态调试找到终值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>这里使用了Game.checkflag来加密</p><p>所以先看这个</p><p>根据game</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> game;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> p004go.Seq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">_init</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">checkflag</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Seq.touch();</span><br><span class="line">        _init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Game</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">touch</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怀疑checkflag是通过lib加载的</p><p>打开ida，反汇编so文件</p><p>搜索checkflag</p><p>找到5个函数</p><p><img src="https://s2.loli.net/2023/12/28/Z4TbAVSxCklJaOB.png" alt="image-20231228150946781"></p><p>函数是这几个</p><p>好复杂，看不懂。。</p><p>看了看wp，发现一个一直没注意的东西，如果输入</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234567890</span>变为<span class="number">6143580927</span>，</span><br><span class="line">&#123;qwertyuiopasdfghjklzxcvbnm&#125;变为bhgsruc&#123;iojqkdpwnezyvxa&#125;lfmt</span><br></pre></td></tr></table></figure><p>说明这只是字符交换，交换之后是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>一共38个字符</p><p>那么尝试输入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t<span class="number">2</span>F<span class="number">7</span>GTglISYL<span class="symbol">nMzc6</span>CqhD<span class="symbol">N5</span>OdX<span class="number">8</span>wPjsKufVbE&#125;</span><br></pre></td></tr></table></figure><p>变为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC</span><br></pre></td></tr></table></figure><p>根据这个对应关系，逆向解出原来的关系</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d1 = <span class="string">&#x27;t2F7GTglISYLnMzc6CqhDN5OdX8wPjsKufVbE&#125;&#x27;</span></span><br><span class="line">d2 = <span class="string">&#x27;NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC&#x27;</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="string">&#x27;49021&#125;5f919038b440139g74b7Dc88330e5d&#123;6&#x27;</span></span><br><span class="line">f1 = <span class="selector-attr">[0]</span>*<span class="number">38</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">        <span class="keyword">if</span> (d2<span class="selector-attr">[j]</span> == d1<span class="selector-attr">[i]</span>):</span><br><span class="line">            f1<span class="selector-attr">[i]</span> = f2<span class="selector-attr">[j]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&#x27;&#x27;</span>.join(f1)</span></span>)</span><br><span class="line">#D0g3&#123;<span class="number">4</span>c3b5903d11461f94478b7302980e958&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>猜测输入时尽量使用有规律的字符，更容易看清</p><p>如果不容易逆向可以尝试看或者猜</p><h2 id="你见过蓝色的小鲸鱼吗"><a href="#你见过蓝色的小鲸鱼吗" class="headerlink" title="你见过蓝色的小鲸鱼吗"></a>你见过蓝色的小鲸鱼吗</h2><p>打开文件后，发现是win程序，说明进入主窗口程序和判断函数不一定在一个位置 </p><p>所以打开后需要找到判断代码，搜索string无效</p><p>根据弹窗函数是MessageBox，尝试搜索</p><p>然后找到判断函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __thiscall <span class="title function_">lastcall</span><span class="params">(<span class="type">void</span> *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> wrong[<span class="number">28</span>]; <span class="comment">// [esp+D0h] [ebp-54h] BYREF</span></span><br><span class="line">  CHAR yes[<span class="number">20</span>]; <span class="comment">// [esp+ECh] [ebp-38h] BYREF</span></span><br><span class="line">  CHAR Caption[<span class="number">24</span>]; <span class="comment">// [esp+100h] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+118h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = this;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52102F);</span><br><span class="line">  <span class="built_in">strcpy</span>(Caption, <span class="string">&quot;tip&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(yes, <span class="string">&quot;You Get It!&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(wrong, <span class="string">&quot;Wrong user/passwd&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)v5 + <span class="number">2</span>) != *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    || j__memcmp(*(<span class="type">const</span> <span class="type">void</span> **)v5, *((<span class="type">const</span> <span class="type">void</span> **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>)) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, wrong, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, yes, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的v5+2和v5+3一定指向一个是输入（可能加密了），另一个说不准，因为有一个密码一个用户名</p><p>由于需要进入else分支，所以条件必须为假</p><p>即：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*((_DWORD *)v5 + <span class="number">2</span>) == *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    &amp;&amp; ！j__memcmp<span class="comment">(*(const void **)</span>v5, *((<span class="keyword">const</span> void **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>既然如此，需要找出能改变v5+2和+3的地址的函数（修改了this），向上找：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *v6; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *lpString; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> WindowTextLengthA; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  WindowTextLengthA = GetWindowTextLengthA(hWnd);</span><br><span class="line">  v10 = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  lpString = (CHAR *)j__malloc(__CFADD__(WindowTextLengthA, <span class="number">16</span>) ? <span class="number">-1</span> : WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(v10, <span class="number">16</span>) ? <span class="number">-1</span> : v10 + <span class="number">16</span>);</span><br><span class="line">  v6 = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( lpString &amp;&amp; result )</span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, lpString, WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">    GetWindowTextA(DlgItem, v6, v10 + <span class="number">16</span>);</span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);</span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;unk_51D38C, <span class="number">0x10</span>u);</span><br><span class="line">    sub_45126F(lpString, WindowTextLengthA, (<span class="type">int</span>)v6, v10);</span><br><span class="line">    j_lastcall(v4);</span><br><span class="line">    j__free(lpString);</span><br><span class="line">    j__free(v6);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动调可知：第一个是用户名，第二个是密码</p><p>化简：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *password; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *username; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> lenOFpass; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> lenOFname; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  lenOFname = GetWindowTextLengthA(hWnd);</span><br><span class="line">  lenOFpass = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  username = (CHAR *)j__malloc(__CFADD__(lenOFname, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFname + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(lenOFpass, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFpass + <span class="number">16</span>);</span><br><span class="line">  password = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( username &amp;&amp; result )                     <span class="comment">// 检查空指针</span></span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, username, lenOFname + <span class="number">16</span>);<span class="comment">// 用户名</span></span><br><span class="line">    GetWindowTextA(DlgItem, password, lenOFpass + <span class="number">16</span>);<span class="comment">// 密码</span></span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);                        <span class="comment">// 分配内存</span></span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);              <span class="comment">// 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;specialloc, <span class="number">0x10</span>u);             <span class="comment">// 初始化对象</span></span><br><span class="line">    encode(username, lenOFname, (<span class="type">int</span>)password, lenOFpass);</span><br><span class="line">    j_lastcall(v4);                             <span class="comment">// 判断</span></span><br><span class="line">    j__free(username);</span><br><span class="line">    j__free(password);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面实在分析不出来了，里面有一些涉及c++的理解的</p><p>在后面有加密函数是blowfish</p><p>在cmp时下断点buf1就是最后的值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11A51F049550E2508F17E16CF1632B47</span><br></pre></td></tr></table></figure><p>写blowfish的解密：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文（以十六进制表示）</span></span><br><span class="line">ciphertext_hex = <span class="string">&quot;11A51F049550E2508F17E16CF1632B47&quot;</span></span><br><span class="line">ciphertext = binascii.unhexlify(ciphertext_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥（简单字符串）</span></span><br><span class="line">key = <span class="string">&quot;UzBtZTBuZV9EMGcz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Blowfish ECB模式的解密器</span></span><br><span class="line">cipher = Blowfish.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), Blowfish.MODE_ECB)</span><br><span class="line"></span><br><span class="line">plaintext_bytes = cipher.decrypt(ciphertext)</span><br><span class="line">plaintext = plaintext_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"><span class="comment">#QHRoZWJsdWVmMXNo</span></span><br></pre></td></tr></table></figure><p>这个答案是个base64，解密后是@thebluef1sh</p><p>（和蓝鲸的唯一关系吗。。。）</p><p>所以</p><p>D0g3{UzBtZTBuZV9EMGczQHRoZWJsdWVmMXNo}</p>]]></content>
    
    
    <summary type="html">本周做题记录</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
</feed>
