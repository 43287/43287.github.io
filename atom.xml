<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pRism</title>
  
  
  <link href="https://www.pri87.vip/atom.xml" rel="self"/>
  
  <link href="https://www.pri87.vip/"/>
  <updated>2024-01-17T15:18:31.600Z</updated>
  <id>https://www.pri87.vip/</id>
  
  <author>
    <name>pRism</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>z3基本语法</title>
    <link href="https://www.pri87.vip/posts/b4d67d75.html"/>
    <id>https://www.pri87.vip/posts/b4d67d75.html</id>
    <published>2024-01-17T05:31:24.000Z</published>
    <updated>2024-01-17T15:18:31.600Z</updated>
    
    <content type="html"><![CDATA[<p>z3是一个约束求解器，可以理解为解方程的工具，每一个约束都要写在x.add的语句中。</p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>z3一共有三种变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b = Int(<span class="string">&#x27;a b&#x27;</span>)<span class="comment">#声明多个整数型变量</span></span><br><span class="line">a = Real(<span class="string">&#x27;a&#x27;</span>)<span class="comment">#声明单个实型变量</span></span><br><span class="line">a,b = Bitvec(<span class="string">&#x27;a b&#x27;</span>,<span class="number">8</span>)<span class="comment">#声明多个8位的向量型变量</span></span><br></pre></td></tr></table></figure><h2 id="使用例"><a href="#使用例" class="headerlink" title="使用例"></a>使用例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a,b = Int(<span class="string">&#x27;a b&#x27;</span>)</span><br><span class="line">solve(a+b == <span class="number">10</span>,a + <span class="number">3</span> * b ==<span class="number">12</span>)<span class="comment">#条件少时可以直接用solve不用add</span></span><br><span class="line"><span class="comment">#result : [b = 1,a = 9]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=Int(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y=Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (simplify(x + y + <span class="number">2</span>*x + <span class="number">3</span>))<span class="comment">#simplify用于打印化简后的表达式</span></span><br><span class="line"><span class="built_in">print</span> (simplify(x &lt; y + x + <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span> (simplify(And(x + <span class="number">1</span> &gt;= <span class="number">3</span>, x**<span class="number">2</span> + x**<span class="number">2</span> + y**<span class="number">2</span> + <span class="number">2</span> &gt;= <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#3 + 3*x + y</span></span><br><span class="line"><span class="comment">#Not(y &lt;= -2)</span></span><br><span class="line"><span class="comment">#And(x &gt;= 2, 2*x**2 + y**2 &gt;= 3)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">a,b = Ints(<span class="string">&#x27;a b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s=Solver()  <span class="comment">#创建一个解的对象s</span></span><br><span class="line">s.add(a + b == <span class="number">10</span>)<span class="comment">#添加约束条件</span></span><br><span class="line">s.add(a + <span class="number">3</span> * b == <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat: <span class="comment">#check() 检查解是否存在，存在会return &#x27;sat&#x27;</span></span><br><span class="line">result = s.model() <span class="comment">#输出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result[a])</span><br><span class="line"><span class="built_in">print</span>(result[b])</span><br></pre></td></tr></table></figure><h2 id="z3语法"><a href="#z3语法" class="headerlink" title="z3语法"></a>z3语法</h2><p>对于普通的自定义逻辑（带位移，异或之类的不好逆向），z3可以秒杀</p><p>比如这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">cmp = [<span class="number">0x66</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0xFD</span>, <span class="number">0x3C</span>, <span class="number">0x55</span>, <span class="number">0x90</span>, <span class="number">0x24</span>, <span class="number">0x57</span>, <span class="number">0xF6</span>, <span class="number">0x5D</span>, <span class="number">0xB1</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x81</span>, <span class="number">0xFD</span>, <span class="number">0x36</span>, <span class="number">0xA9</span>, <span class="number">0x1F</span>, <span class="number">0xA1</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x80</span>, <span class="number">0x8F</span>, <span class="number">0xCE</span>, <span class="number">0x77</span>, <span class="number">0xE8</span>, <span class="number">0x23</span>, <span class="number">0x9E</span>, <span class="number">0x27</span>, <span class="number">0x60</span>, <span class="number">0x2F</span>, <span class="number">0xA5</span>, <span class="number">0xCF</span>, <span class="number">0x1B</span>, <span class="number">0xBD</span>, <span class="number">0x32</span>, <span class="number">0xDB</span>, <span class="number">0xFF</span>, <span class="number">0x28</span>, <span class="number">0xA4</span>, <span class="number">0x5D</span>]</span><br><span class="line">f = Solver()</span><br><span class="line"></span><br><span class="line">flag,out = pini(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = n = a = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> pl(<span class="number">7</span>,<span class="number">6</span>):</span><br><span class="line">    a = <span class="number">6</span> * i + j</span><br><span class="line">    m = flag[a]</span><br><span class="line">    n = flag[a]</span><br><span class="line">    m = ~m</span><br><span class="line">    m &amp;= i * (j + <span class="number">2</span>)</span><br><span class="line">    n = n &amp; ~(i * (j + <span class="number">2</span>)) | m</span><br><span class="line">    a = <span class="number">7</span> * j + i</span><br><span class="line">    out[a] = n</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">42</span>):</span><br><span class="line">    <span class="keyword">if</span> ( i % <span class="number">2</span> == <span class="number">1</span> ):</span><br><span class="line">        out[i] *= <span class="number">107</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        out[i] += out[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">    f.add(cmp[i]==out[i])</span><br><span class="line">isflag(f,flag)</span><br><span class="line">pcheck(f,flag)</span><br></pre></td></tr></table></figure><p>但是可能遇到要对z3型数据判断的情况，比如下面这个题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> flag[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-C0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> out2[<span class="number">64</span>]; <span class="comment">// [rsp+40h] [rbp-80h] BYREF</span></span><br><span class="line">  __int64 check[<span class="number">4</span>]; <span class="comment">// [rsp+80h] [rbp-40h]</span></span><br><span class="line">  __int16 v8; <span class="comment">// [rsp+A0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> len; <span class="comment">// [rsp+B0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+B4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+B8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+BCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  check[<span class="number">0</span>] = <span class="number">0x10C0105000D07</span>LL;</span><br><span class="line">  check[<span class="number">1</span>] = <span class="number">0xF0509000F050D00</span>LL;</span><br><span class="line">  check[<span class="number">2</span>] = <span class="number">0x701030305020003</span>LL;</span><br><span class="line">  check[<span class="number">3</span>] = <span class="number">0xC02070201020B07</span>LL;</span><br><span class="line">  v8 = <span class="number">514</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  len = <span class="number">17</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hi, PLZ input input&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">  <span class="built_in">memset</span>(out2, <span class="number">0</span>, <span class="keyword">sizeof</span>(out2));</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == len )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">16</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)flag[i] &gt; <span class="string">&#x27;`&#x27;</span> &amp;&amp; (<span class="type">unsigned</span> __int8)flag[i] &lt;= <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">        flag[i] = (flag[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)flag[i] &gt; <span class="string">&#x27;@&#x27;</span> &amp;&amp; (<span class="type">unsigned</span> __int8)flag[i] &lt;= <span class="string">&#x27;Z&#x27;</span> )</span><br><span class="line">        flag[i] = (flag[i] ^ <span class="number">0x4B</span>) - <span class="number">1</span>;</span><br><span class="line">      out2[<span class="number">2</span> * i] = (<span class="type">unsigned</span> __int8)flag[i] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">      out2[<span class="number">2</span> * i + <span class="number">1</span>] = flag[i] &amp; <span class="number">0xF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_BYTE *)check + <span class="number">2</span> * i) != out2[<span class="number">2</span> * (len - i) - <span class="number">2</span>]</span><br><span class="line">        &amp;&amp; *((_BYTE *)check + <span class="number">2</span> * i + <span class="number">1</span>) != out2[<span class="number">2</span> * (len - i) - <span class="number">2</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wrong wrong wrong&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;woc,you got it,flag is your input&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a Ha ? wrong1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数是这样的，这里它不止对flag进行分类讨论，还在讨论后进行计算：z3型可以直接进行计算，包括加和乘，对于位向量还可以左右移以及异或，但是都不能进行判断大小，如果要进行判断必须要在add中做判断，比如判断两个值是否相等：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.add(check[<span class="number">2</span> * i]==out3[<span class="number">2</span>*(<span class="built_in">len</span>-i-<span class="number">1</span>)])</span><br></pre></td></tr></table></figure><p>那么如果我们根据这道题写，还需要If函数（Z3自带）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If(condition,a,b)</span><br></pre></td></tr></table></figure><p>意思是：如果条件成立，语句视为a，否则视为b</p><p>那么和add结合起来看就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f.add(If(And(out[i] &gt; <span class="number">0x60</span>, out[i] &lt;= <span class="number">0x7a</span>), out2[i] == (out[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>, <span class="literal">True</span>))</span><br><span class="line">f.add(If(And(out[i] &gt; <span class="number">0x40</span>, out[i] &lt;= <span class="number">0x5a</span>), out2[i] == (out[i] ^ <span class="number">0x4b</span>) - <span class="number">1</span>, <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>如果条件成立，添加a约束，否则添加b约束，这里的b约束恒为真，表示如果条件不成立就跳过这个约束。可是问题来了，我们知道out[i]是由flag初始化的，也就是说out是z3位向量型，但是out2呢？如果把这里的out2视作一个普通列表，让out[i]计算后的值返回给out2，好像也没问题。但是！！这里的语句并不是赋值语句，而是判断语句，是一个<code>约束</code>，如果这里out2&#x3D;34*[0],那么就是让out[i]运算后的值恒等于0的条件成立，显然这是无解的，也就是说，这里的两个变量都必须是位向量才可以，同时，不应该忘了如果两个条件均不成立，就要让out&#x3D;out2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.add(out2[i] == If(And(out[i] &gt; <span class="number">0x40</span>, out[i] &lt;= <span class="number">0x5a</span>), (out[i] ^ <span class="number">0x4b</span>) - <span class="number">1</span>,If(And(out[i] &gt; <span class="number">0x60</span>, out[i] &lt;= <span class="number">0x7a</span>), (out[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>, out[i])))</span><br></pre></td></tr></table></figure><p>进行if的嵌套完成这个效果</p><p>之后还要对flag继续做变换变成最后的数组，且数组大小翻倍，如果后面的检查比较简单，可以直接在check&#x3D;&#x3D;的时候写，但是由于这里的比较不是很直观，不如写出来变成单独的列表再比较，这时又要涉及到out2变成out3的问题了，由于这个是直接赋值，没有判断，所以方便起见，直接写赋值语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out3[<span class="number">2</span>*i] = LShR(out2[i], <span class="number">4</span>)</span><br><span class="line">out3[<span class="number">2</span>*i+<span class="number">1</span>] = out2[i] &amp; <span class="number">0xf</span></span><br></pre></td></tr></table></figure><p>通过这两个例子可以发现，当想要赋值时，如果要对z3型变量进行判断&#x2F;比较，就必须用add表达式，在其中，为了达成赋值效果，必须新建一个z3量才可以成功，但是如果是直接赋值，则直接对列表赋值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">check = [<span class="number">0x07</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x02</span>]</span><br><span class="line">flag,out = pini(<span class="number">17</span>)</span><br><span class="line">out2 = [BitVec(<span class="string">&#x27;out2[%2d]&#x27;</span> % i , <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">34</span>)]</span><br><span class="line">out3 = [<span class="number">0</span>]*<span class="number">34</span></span><br><span class="line"><span class="built_in">len</span> = <span class="number">17</span></span><br><span class="line">f = Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line"></span><br><span class="line">    f.add(out2[i] == If(And(out[i] &gt; <span class="number">0x40</span>, out[i] &lt;= <span class="number">0x5a</span>), (out[i] ^ <span class="number">0x4b</span>) - <span class="number">1</span>,</span><br><span class="line">                     If(And(out[i] &gt; <span class="number">0x60</span>, out[i] &lt;= <span class="number">0x7a</span>), (out[i] ^ <span class="number">0x47</span>) + <span class="number">1</span>, out[i])))</span><br><span class="line"></span><br><span class="line">    out3[<span class="number">2</span>*i] = LShR(out2[i], <span class="number">4</span>)</span><br><span class="line">    out3[<span class="number">2</span>*i+<span class="number">1</span>] = out2[i] &amp; <span class="number">0xf</span></span><br><span class="line">isflag(f,flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    f.add(check[<span class="number">2</span> * i]==out3[<span class="number">2</span>*(<span class="built_in">len</span>-i-<span class="number">1</span>)])</span><br><span class="line">    f.add(check[<span class="number">2</span> * i + <span class="number">1</span>]==out3[<span class="number">2</span>*(<span class="built_in">len</span>-i-<span class="number">1</span>)+<span class="number">1</span>])</span><br><span class="line">pcheck(f,flag)</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Su%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3%h_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Such_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3ch_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Su%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;Suc0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;la!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,a!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;,ag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;lag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&quot;l&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;g</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,ag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fla!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3c0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,a!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">f,&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">fl&#x27;!</span><span class="template-variable">&#123;S3%0_A_EZVM&#125;</span></span><br></pre></td></tr></table></figure><p>以上均是解</p><p>补充说明：</p><p>如果想约束某个值只能出现一次，比如{,}，可以用Sum：</p><p>Sum用于计算一系列表达式的和类似于加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(Sum([If(i == BitVecVal(<span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>), <span class="number">8</span>), <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag]) &lt;= <span class="number">1</span>)</span><br><span class="line">s.add(Sum([If(i == BitVecVal(<span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>), <span class="number">8</span>), <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag]) &lt;= <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>计算flag中等于括号的值的表达式个数，然后让其小于等于1</p>]]></content>
    
    
    <summary type="html">对z3使用的思考</summary>
    
    
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="符号执行" scheme="https://www.pri87.vip/tags/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/"/>
    
    <category term="z3" scheme="https://www.pri87.vip/tags/z3/"/>
    
  </entry>
  
  <entry>
    <title>内联钩子原理</title>
    <link href="https://www.pri87.vip/posts/23a55d41.html"/>
    <id>https://www.pri87.vip/posts/23a55d41.html</id>
    <published>2024-01-16T18:33:25.000Z</published>
    <updated>2024-01-17T15:46:38.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Inline-hook"><a href="#Inline-hook" class="headerlink" title="Inline hook"></a>Inline hook</h1><p>Inline hook(内联钩子)是一种再程序运行时<code>修改函数执行流程</code>的技术。通过修改函数原始代码 讲目标函数的执行路径重定向到自定义的代码段，从而实现对目标函数的拦截和修改。</p><p><img src="https://s2.loli.net/2024/01/11/AidLhJUkqP7NXRY.png" alt="image-20240111101326816"></p><p><img src="https://s2.loli.net/2024/01/11/LOXJnCdHrv5UzbA.png" alt="image-20240111103102751"></p><p>对一个函数hook的方法：</p><ol><li>从哪来到哪去</li><li>如何实现跳转<br>E9 + 四字节相对地址（E9是jmp的值）（相当于一共5字节）<br>修改时，如果指令长度大于5，则多余的值会和下一条代码结合为新代码，所以防止崩溃可以写成nop（90）<br>这个相对地址不算这条指令本身</li><li>如何修改代码<br>当已经有一个我们想要hook的函数时，需要先获得它的传入参数，并令hook函数的参数与想要hook的函数的参数类型，个数相同，以保证堆栈平衡<br>为了在运行时修改代码需要virtualprotect函数（windows下）来修改某处的访问权限</li></ol><p>注：实验环境为x86，因为在x64下相对地址的值大于4字节导致不能正常跳转</p><p>那么尝试修改并hook一个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">hooker(MessageBoxW, mybox, <span class="number">5</span>);</span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;Hello&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数先调用hooker函数，修改messagebox的内容，然后执行被修改的messagebox函数</p><p>那么hooker函数就要传入messagebox函数的地址，和我们想要修改成的函数的地址，这里的长度可以是固定的，可以不写5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">hooker</span><span class="params">(<span class="type">void</span>* src, <span class="type">void</span>* dst, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">DWORD old;</span><br><span class="line">VirtualProtect(src, len, <span class="number">0x40</span>, &amp;old);</span><br><span class="line"><span class="built_in">memcpy</span>(back, src, len);</span><br><span class="line">*(BYTE*)src = <span class="number">0xE9</span>;</span><br><span class="line"><span class="type">uintptr_t</span> ra = (<span class="type">uintptr_t</span>)dst - (<span class="type">uintptr_t</span>)src - <span class="number">5</span>;</span><br><span class="line">*(DWORD*)((BYTE*)src + <span class="number">1</span>) = ra;</span><br><span class="line">VirtualProtect(src, len, old, &amp;old);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数外面创建一个备份BYTE back[5];用来保存原始数据，然后用VirtualProtect修改函数前5个字节变成可写属性(0x40),然后备份原始属性到old并修改，核心公式是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(BYTE*)src = <span class="number">0xE9</span>;</span><br><span class="line"><span class="type">uintptr_t</span> ra = (<span class="type">uintptr_t</span>)dst - (<span class="type">uintptr_t</span>)src - <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>然后改回去</p><p>最后就是实现自己的函数，一定要注意函数的传入参数必须要和原函数相同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> WINAPI <span class="title function_">mybox</span><span class="params">(_In_opt_ HWND hWnd, </span></span><br><span class="line"><span class="params"> _In_opt_ LPCWSTR lpText, </span></span><br><span class="line"><span class="params"> _In_opt_ LPCWSTR lpCaption, </span></span><br><span class="line"><span class="params"> _In_ UINT uType)</span></span><br><span class="line">&#123;</span><br><span class="line">lpText = <span class="string">L&quot;hooked&quot;</span>;<span class="comment">//想要修改的效果</span></span><br><span class="line">unhook(MessageBoxW, back, <span class="number">5</span>);</span><br><span class="line">MessageBoxW(hWnd, lpText, lpCaption, uType);</span><br><span class="line">hooker(MessageBoxW, mybox, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过去官网直接抄传入参数就可以直接得到参数名<br>同时注意要先解除钩子再调用原函数不然会陷入循环递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">unhook</span><span class="params">(<span class="type">void</span>* src, <span class="type">void</span>* back, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">DWORD old;</span><br><span class="line">VirtualProtect(src, len, <span class="number">0x40</span>, &amp;old);</span><br><span class="line"><span class="built_in">memcpy</span>(src, back, <span class="number">5</span>);</span><br><span class="line">VirtualProtect(src, len, old, &amp;old);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用完目标函数后，还要再次钩住函数，等待下一次调用</p><hr><p>完</p>]]></content>
    
    
    <summary type="html">内联钩子尝试</summary>
    
    
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="实践" scheme="https://www.pri87.vip/tags/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="hook" scheme="https://www.pri87.vip/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>密码学数学基础2</title>
    <link href="https://www.pri87.vip/posts/84e84aaa.html"/>
    <id>https://www.pri87.vip/posts/84e84aaa.html</id>
    <published>2024-01-16T07:42:45.000Z</published>
    <updated>2024-01-17T08:02:09.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h2><p>一：<br>二元关系”&#x3D;”：</p><ul><li>自反性：对于所有$a\in R$,都有$a&#x3D;a$</li><li>对称性：对于所有$a,b\in R$,都有$a&#x3D;b\rightarrow b&#x3D;a$</li><li>传递性：对于所有$a,b,c\in R$,都有$a&#x3D;b,b&#x3D;c\rightarrow a&#x3D;c$</li></ul><p>二：</p><p>二元关系”$\cong$”:</p><p>同样有自反性，对称性，传递性</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>设集合S，以及一个定义在S上的二元关系R，若R满足以下性质，则称它为”等价关系”,以元组的形式表示</p><ul><li>自反性：对于所有$a\in S$,都有($a,a)\in R$</li><li>对称性：对于所有$a,b\in S$,都有$(a,a)\in R$</li><li>传递性：对于所有$a,b,c\in S$,都有$(a,b)\in R,(b,c)\in R\rightarrow (a,c)\in R$</li></ul><hr><h2 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>$a \equiv b(\mod n)$：设n为正整数，整数a，b分别模n，如果得到相同的余数(或n|(a-b))，就称a和b在模n的情况下满足同余关系，n被称为模数。同余是一种关系,而不是一种运算</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>$a \equiv b(\mod n)\iff a&#x3D;qn+b,\exists q\in Z\rightarrow n|a-b$</p><p>同余是一种<code>等价关系</code>,以下性质可以逆推</p><ul><li>对于同一个除数，两个数的乘积与它们余数的乘积同余。</li><li>对于同一个除数，如果有两个整数同余，那么它们的差就一定能被这个除数整除。</li><li>对于同一个除数，如果两个数同余，那么他们的乘方仍然同余。</li><li>对于同一个除数，若三个数a≡b（mod m），b≡c（mod m），那么a,b,c三个数对于除数m都同余（传递性）。</li><li>对于同一个除数，若四个数a≡b（mod m），c≡d（mod m），那么a±c≡c±d（mod m），（可加减性）。</li><li>对于同一个除数，若四个数a≡b（mod m），c≡d（mod m），那么ac≡cd（mod m），（可乘性）</li></ul><p>同余的运算性质</p><p>若$a \equiv b(\mod n)$，则：</p><ul><li>$a\pm m \equiv b\pm m(\mod n),m\in Z$</li><li>$a* m \equiv b* m(\mod n),m\in Z$</li><li>$a^m \equiv b^m(\mod n),m\in N$</li></ul><p>若同时$c \equiv d(\mod n)$,则：</p><ul><li>$a\pm c \equiv b\pm d(\mod n)$</li><li>$a* c \equiv b* d(\mod n)$</li></ul><hr><h2 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h2><p>倒数：两个数的乘积为1，这两个数互为倒数</p><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>设$a\in Z,n\in N,如果az\equiv 1(\mod n)$,则称z是模n下a的乘法逆元，记作$a^{-1}&#x3D;z$</p><p>在模运算下，所有的形如$a^{-1}$的值都可以直接被代换成a在某模数下的乘法逆元，然后继续运算</p><p>只有当一个整数和模数互素的时候，它才会有乘法逆元，即：<br>$$<br>gcd(a,n)&#x3D;1\iff 模n下有乘法逆元<br>$$<br>求乘法逆元：</p><p>扩展欧几里得算法</p><p>根据最大公约数表示定理：<br>$$<br>gcd(a,n)&#x3D;1 \rightarrow as+tn &#x3D; 1<br>$$<br>等式两边同时mod n:<br>$$<br>as \equiv 1 (\mod n)<br>$$<br>∴模n下a的逆元是s</p><p>∴调用gcd函数传入a和n算出的s即为乘法逆元</p><hr><h2 id="一次同余方程"><a href="#一次同余方程" class="headerlink" title="一次同余方程"></a>一次同余方程</h2><p>$$<br>a \equiv b(\mod n)<br>$$</p><p>等价于下面这个形式，其中m是a，b，n的公因数<br>$$<br>a&#x2F;m \equiv b&#x2F;m(\mod n&#x2F;m)<br>$$<br>如果gcd(m,n)&#x3D;1,那么<br>$$<br>a&#x2F;m \equiv b&#x2F;m(\mod n)<br>$$<br>才是成立的</p><h3 id="同余下的消去律"><a href="#同余下的消去律" class="headerlink" title="同余下的消去律"></a>同余下的消去律</h3><p>设$a,n\in Z,n&gt;0$,如果$gcd(a,n)&#x3D;d$,有<br>$$<br>az \equiv az’(\mod n)\rightarrow z \equiv z’(\mod n&#x2F;d)<br>$$</p><h3 id="同余方程的解"><a href="#同余方程的解" class="headerlink" title="同余方程的解"></a>同余方程的解</h3><p>$x \equiv b(\mod n)$的解集：{$b\pm nk$,其中$k&#x3D;0,1,2,…$}</p><p>同时有规律:<br>原模数为n，终模数为m，设n&#x2F;m &#x3D; d,有0~n-1之间解的数量等于d</p><h3 id="一次同余方程有解的条件"><a href="#一次同余方程有解的条件" class="headerlink" title="一次同余方程有解的条件"></a>一次同余方程有解的条件</h3><p>若gcd(a,n)&#x3D;d,则<br>$$<br>ax \equiv b(\mod n)有解 \iff d|b<br>$$</p><hr><h2 id="剩余类"><a href="#剩余类" class="headerlink" title="剩余类"></a>剩余类</h2><h3 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h3><p>等价类是等价关系的一种性质，若~是S上的等价关系，对于$a\in S$,定义其等价类为{$x\in S|x\sim a$}</p><p>由于同余关系是等价关系，所以同余中也有等价类，被叫做剩余类</p><h3 id="剩余类-1"><a href="#剩余类-1" class="headerlink" title="剩余类"></a>剩余类</h3><p>设$a\in Z$,定义其剩余类为{$x\in Z|x\equiv a(\mod n)$}<br>记作$[a]_n$简记为$[a]$,最简可化为a(如果没有歧义)</p><p> 剩余类中每一个整数都叫做这个剩余类的代表元.<br>$Z_n$表示模n下所有剩余类的集合</p><p>定义剩余类之间的计算：</p><p>$[a]+[b]&#x3D;[a+b]$</p><p>$[a]<em>[b]&#x3D;[a</em>+*b]$</p><p>设$u,v\in Z_n$,若uv&#x3D;[1],则u，v互为乘法逆元</p><p>再定义$Z_n^*$为$Z_n$中有乘法逆元的剩余类</p><h3 id="Z-n-与-Z-n-的关系"><a href="#Z-n-与-Z-n-的关系" class="headerlink" title="$Z_n^*$与$Z_n$的关系"></a>$Z_n^*$与$Z_n$的关系</h3><ul><li>n为素数：$Z_n^*$&#x3D;$Z_n$ \ {[0]}</li><li>n为合数：$Z_n^*$$\subsetneq$$Z_n$ \ {[0]}</li></ul><hr><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><h3 id="一次同余方程组"><a href="#一次同余方程组" class="headerlink" title="一次同余方程组"></a>一次同余方程组</h3><p>设两两互素的模数$n_1,…,n_m\in N$,及任意整数$a_1,…,a_m\in Z$,并设$n&#x3D;\prod_{i&#x3D;1}^mn_i$<br>$$<br>\begin{cases}<br>x\equiv a_1(\mod n_1)\<br>…\<br>x\equiv a_m(\mod n_m)<br>\end{cases}<br>$$<br>为了求解这个方程，我们需要中国剩余定理CRT</p><h3 id="中国剩余定理-1"><a href="#中国剩余定理-1" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><p>设两两互素的模数$n_1,…,n_m\in N$,及任意整数$a_1,…,a_m\in Z$,并设$n&#x3D;\prod_{i&#x3D;1}^mn_i$，方程组<br>$$<br>\begin{cases}<br>x\equiv a_1(\mod n_1)\<br>…\<br>x\equiv a_m(\mod n_m)<br>\end{cases}<br>$$<br>必有解，设解为$a\in Z$.并且对任意$a’\in Z$,都有<br>$$<br>a’是方程组的解 \iff a \equiv a’(\mod n)<br>$$<br>求解方法：</p><ul><li>得到每个方程组的模数$n_1,n_2,…$</li><li>求$n  &#x3D;\prod_{i&#x3D;1}^mn_i$</li><li>求$n_i^*&#x3D;n&#x2F;n_i$</li><li>求$n_i^{<em>-1}$(在对应模数下$n_i^</em>$的乘法逆元)</li><li>求$e_i &#x3D; n_i^{<em>-1} * n_i^</em>$</li><li>求$a &#x3D; \sum_{i&#x3D;1}^{m}e_ia_i$</li><li>求$a\mod n$为最后的结果</li></ul><hr><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p>施工中</p><h2 id="欧拉定理和费马小定理"><a href="#欧拉定理和费马小定理" class="headerlink" title="欧拉定理和费马小定理"></a>欧拉定理和费马小定理</h2><p>施工中</p>]]></content>
    
    
    <summary type="html">关于同余</summary>
    
    
    
    <category term="密码学" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="同余" scheme="https://www.pri87.vip/tags/%E5%90%8C%E4%BD%99/"/>
    
  </entry>
  
  <entry>
    <title>密码学数学基础1</title>
    <link href="https://www.pri87.vip/posts/1de11b10.html"/>
    <id>https://www.pri87.vip/posts/1de11b10.html</id>
    <published>2024-01-13T12:39:12.000Z</published>
    <updated>2024-01-17T08:03:21.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整除性"><a href="#整除性" class="headerlink" title="整除性"></a>整除性</h2><p>设$a,b\in Z$,如果存在一个$q\in Z$，使得$a&#x3D;qb$,则称“b<code>整除</code>a”或”<code>b是a的因子</code>“,记为“$b|a$”,并用$b\not\mid a$表示b不整除a</p><p>则：</p><ul><li>$b|0$</li><li>$1|a$</li><li>$0|a \iff a&#x3D;0$</li><li>$b|a \iff b|-a \iff -b|a$</li></ul><p>且：</p><p>自反性：$a|a$<br>传递性：$(b|a)\land (a|c) \rightarrow b|c$<br>相乘性：$b|a \rightarrow bc|ac$<br>消去性：$(bc|ac) \land (c\not&#x3D;0) \rightarrow b|a$<br>线性性：$b|a \land b|c\rightarrow\forall s,t\in Z,b|(sa\pm tc)$<br>比较性：$a,b\in N,b|a \rightarrow b\leq a$</p><p>定理一：$设a,b \in Z,则(b|a \land a|b) \iff a&#x3D;\pm b$</p><hr><h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><p>定义：设$n\in N\land n\geq2$,除了$1和n$以外,没有其它正整数整除n，则n称作“<code>素数</code>”（用p表示）；否则称为“合数”</p><p>注1：1既不是素数也不是合数<br>注2：若n为合数，则n&#x3D;ab，其中$1&lt;a&lt;n,1&lt;b&lt;n$</p><p>引理2-1：任何大于1的整数必有素因子。<br>定理2-1：任何合数$n$都至少有一个不超过$\sqrt n$的素因子<br>定理2-2：(算数基本定理)</p><p>任何非零整数$n$，都可以表示成如下乘积形式：<br>$$<br>n&#x3D;\pm p{_1}^{e_1}…p{_r}^{e_r}<br>$$<br>其中，$p_1,…p_r$是互不相同的素数，$e_1,…e_r$是正整数。</p><p>定理2-3:素数有无穷多个(欧几里得定理)</p><hr><h2 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h2><p>设$a,b\in Z \land b&gt;0,若q,r\in Z满足a&#x3D;qb +r,且0\leq r &lt; b,$则定义:</p><p>$a \mod b :&#x3D; r$</p><p>$a \mod n &#x3D; a - n⌊a&#x2F;n⌋(向下整除); a∈Z,n∈N*(正整数)$</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>$b|a \iff a \mod b &#x3D; 0 $<br>$(a\pm b)\mod n &#x3D;(a\mod n\pm b\mod n)\mod n $<br>$(a<em>b)\mod n &#x3D;(a\mod n</em>b\mod n)\mod n $</p><hr><h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>设$a,b\in Z,如果d \in Z  \land d|a,d|b,$则称d是a和b的公因子(公约数)<br>如果$d\geq0$,且a和b的所有公因子都整除d,则称d是a和b的最大公约数,记作gcd(a,b)</p><p>公因数可以是任何整数<br>最大公因数只能是0或正整数，不能是负数</p><p>特别的，gcd(0,0)&#x3D;1</p><h3 id="互素"><a href="#互素" class="headerlink" title="互素"></a>互素</h3><p>定义：设$a,b\in Z$,如果gcd(a,b)&#x3D;1,则称a和b互素</p><p>设gcd(a,b)&#x3D;d,则存在$q_1,q_2\in Z$,使得$a&#x3D;q_1d,b&#x3D;q_2d$,且$gcd(q_1,q_2)&#x3D;1$,所以$q_1和q_2$互素。</p><h3 id="欧几里得算法-辗转相除法"><a href="#欧几里得算法-辗转相除法" class="headerlink" title="欧几里得算法&#x2F;辗转相除法"></a>欧几里得算法&#x2F;辗转相除法</h3><p>设$a\geq b\geq 0$,求gcd(a,b)<br>数学原理：</p><ul><li>b&#x3D;0时，gcd(a,0)&#x3D;a</li><li>b&gt;0时，gcd(a,b)&#x3D;gcd(b,r)[a&#x3D;qb+r]</li><li>最后gcd(b,r)&#x3D;gcd($r,r_1$)&#x3D;gcd($r_n,0$)&#x3D;$r_n$</li></ul><h4 id="证明"><a href="#证明" class="headerlink" title="证明:"></a>证明:</h4><p>gcd递归定律：</p><p>$gcd(a,b)&#x3D;gcd(b,a\mod b)$</p><p>要证:<br>$$<br>gcd(a,b)&#x3D;gcd(b,a\mod b)<br>$$</p><p>根据整除性定理一：即证:<br>$$<br>gcd(a,b)|gcd(b, a \mod b) \land gcd(b,a \mod b)|gcd(a,b)<br>$$<br>对于前一项：<br>$$<br>gcd(a,b)|gcd(b, a \mod b)<br>$$<br>设 d &#x3D; gcd(a, b)<br>∴ d|a 且 d|b<br>∵根据模的定义：<br>$$<br>a \mod b是a,b的线性组合<br>$$</p><p>∵根据整除性的线性性：<br>$$<br>d|(a和b的线性组合)<br>$$<br>∴<br>$$<br>gcd(a,b)|gcd(b, a \mod b)<br>$$</p><p>对于后一项：<br>$$<br>gcd(b,a \mod b)|gcd(a,b)<br>$$<br>设 c &#x3D; gcd(b, a mod b)<br>∴ c|b 且 c|(a mod b)<br>∵ a &#x3D; qb +r<br>∵ r &#x3D; a mod b<br>∴ a &#x3D; qb + a mod b ,即:<br>$$<br>a 是 b 和 (a \mod b) 的线性组合<br>$$<br>∴根据整除性的线性性：<br>$$<br>c | a<br>$$<br>∵ c | a且c | b</p><p>∴<br>$$<br>c | gcd(a,b)<br>$$<br>∴<br>$$<br>gcd(b,a \mod b)|gcd(a,b)<br>$$<br>得证.</p><hr><h2 id="扩展欧几里得定理"><a href="#扩展欧几里得定理" class="headerlink" title="扩展欧几里得定理"></a>扩展欧几里得定理</h2><h3 id="定理5-1-最大公约数表示定理"><a href="#定理5-1-最大公约数表示定理" class="headerlink" title="定理5-1(最大公约数表示定理)"></a>定理5-1(最大公约数表示定理)</h3><p>设$a,b\in Z$,d&#x3D;gcd(a,b),则存在$s,t\in Z$,使得$as+bt&#x3D;d$</p><p>推论：$d|v \iff as+bt&#x3D;v$</p><p>在欧几里得算法中，计算出的q，根据递推公式：<br>$$<br>s_{i+1}&#x3D;s_{i-1}-s_iq_i<br>$$</p><p>$$<br>t_{i+1}&#x3D;t_{i-1}-t_iq_i<br>$$</p><p>同时,$s_0&#x3D;1,s_1&#x3D;0,s_0&#x3D;0,s_1&#x3D;1$,可以计算出$s_n和t_n即是最后的s和t$</p><p>扩展欧几里得算法就是用来计算定理5-1中的s和t的。同时求出gcd</p><hr><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p>设$a,b\in Z$,若$m\in Z$分别是a,b的倍数，m称作a,b的公倍数</p><p>lcm(a,b):a,b的最小公倍数(可以是负数)</p><ul><li>若$a,b\not&#x3D; 0$,m是a，b中所有正的公倍数中最小的，m叫作a和b的最小公倍数</li><li>若a或b有一个等于0,lam(a,b)&#x3D;0</li></ul><p>设$m&#x3D;lcm(a,b)$,如果$a|c,b|c$,则$m|c$</p><p>$gcd(a,b)&#x3D;1\rightarrow lcm(a,b)&#x3D;ab$</p><p>计算lcm：</p><ul><li>$lcm(a,b)&#x3D;\frac{ab}{gcd(a,b)}$</li><li>两个数迭代加自己直到相等</li></ul>]]></content>
    
    
    <summary type="html">关于密码学的数学须知</summary>
    
    
    
    <category term="密码学" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="https://www.pri87.vip/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="数学" scheme="https://www.pri87.vip/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="知识" scheme="https://www.pri87.vip/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF_r16题目复现</title>
    <link href="https://www.pri87.vip/posts/6e766646.html"/>
    <id>https://www.pri87.vip/posts/6e766646.html</id>
    <published>2024-01-13T11:58:17.000Z</published>
    <updated>2024-01-19T05:26:54.319Z</updated>
    
    <content type="html"><![CDATA[<p>（好难，被薄纱了QAQ）</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="test-your-Debugger"><a href="#test-your-Debugger" class="headerlink" title="test your Debugger"></a>test your Debugger</h3><p>直接动态调试在提示的位置打断点</p><p>得结果</p><p>略</p><h3 id="CompileMe"><a href="#CompileMe" class="headerlink" title="CompileMe!!!"></a>CompileMe!!!</h3><p>文件打开以后是sln源代码文件？？甚至不用逆向？<br>打开之后：完型填空？</p><p>看起来是一个简单的XTEA，但是vs一开就崩溃，vscode也不知道为什么不能运行。。。那先看看题（补全后）：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">NSSCTF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> key = <span class="keyword">new</span> <span class="built_in">ulong</span>[] &#123; <span class="number">0x57656c636f6d6520</span>, <span class="number">0x746f204e53534354</span>, <span class="number">0x4620526f756e6423</span>, <span class="number">0x3136204261736963</span> &#125;;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">ulong</span>[] &#123; <span class="number">0xc60b34b2bff9d34a</span>, <span class="number">0xf50af3aa8fd96c6b</span>, <span class="number">0x680ed11f0c05c4f1</span>, <span class="number">0x6e83b0a4aaf7c1a3</span>, <span class="number">0xd69b3d568695c3c5</span>, <span class="number">0xa88f4ff50a351da2</span>, <span class="number">0x5cfa195968e1bb5b</span>, <span class="number">0xc4168018d92196d9</span> &#125;;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">ulong</span> e = <span class="number">0x9E3779B9</span>;</span><br><span class="line">            <span class="keyword">var</span> delta = Enumerable.Range(<span class="number">0</span>, <span class="number">32</span>).Select(index =&gt; e * (<span class="number">32</span> - (<span class="built_in">uint</span>)index)).ToArray();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> decryptedBlocks = c.Select((block, index) =&gt; <span class="keyword">new</span> &#123; Value = block, Index = index &#125;)</span><br><span class="line">                .GroupBy(item =&gt; item.I ndex / <span class="number">2</span>)</span><br><span class="line">                .Select(<span class="keyword">group</span> =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">ulong</span> b1 = <span class="keyword">group</span>.ElementAt(<span class="number">0</span>).Value;</span><br><span class="line">                    <span class="built_in">ulong</span> b2 = <span class="keyword">group</span>.ElementAt(<span class="number">1</span>).Value;</span><br><span class="line">                    <span class="built_in">ulong</span> sum = e * <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">                    delta.ToList().ForEach(currentDelta =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        b2 -= (((b1 &lt;&lt; <span class="number">4</span>) ^ (b1 &gt;&gt; <span class="number">5</span>)) + b1) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">                        sum -= e;</span><br><span class="line">                        b1 -= (((b2 &lt;&lt; <span class="number">4</span>) ^ (b2 &gt;&gt; <span class="number">5</span>)) + b2) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span>[] &#123; b1, b2 &#125;;</span><br><span class="line">                &#125;)</span><br><span class="line">                .SelectMany(block =&gt; block)</span><br><span class="line">                .ToArray();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">ulong</span>[] decryptedText = <span class="keyword">new</span> <span class="built_in">ulong</span>[decryptedBlocks.Length];</span><br><span class="line">            Array.Copy(decryptedBlocks, decryptedText, decryptedText.Length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            decryptedText.SelectMany(block =&gt; BitConverter.GetBytes(<span class="keyword">new</span> ZZZ(block).GetVal()).Reverse()).ToList().ForEach(byteValue =&gt; Console.Write(Encoding.ASCII.GetString(<span class="keyword">new</span>[] &#123; byteValue &#125;)));</span><br></pre></td></tr></table></figure><p>但是逻辑可以看懂，可以尝试用C重写一遍代码</p><p>但是后面有一个调用zzz</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ZZZ</span>(<span class="title">ulong</span> <span class="title">val</span>) : <span class="title">ZZY</span>(<span class="title">val</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">ulong</span> <span class="title">GetVal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.GetVal();</span><br><span class="line">        <span class="keyword">return</span> val + <span class="number">0x413FD584E295889</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而ZZZ到A的一万六千行代码都是类似这个的函数</p><p>（事后才发现这里调用的代码是base.GetVal()只是调用了继承自ZZY的getval函数然而没有返回值到确定的变量）</p><p>那么就需要用一个函数来读取并输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lines = <span class="built_in">open</span>(<span class="string">&#x27;Program.cs&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).readlines()</span><br><span class="line"> </span><br><span class="line">a = <span class="string">b&#x27;unsigned __int64 (unsigned __int64 val) &#123;\n&#x27;</span></span><br><span class="line">c = <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="keyword">if</span> line.startswith(<span class="string">b&#x27;            return val&#x27;</span>):</span><br><span class="line">        a += <span class="string">b&#x27;    val = &#x27;</span>+line[<span class="number">18</span>:]</span><br><span class="line">a += c</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;c.py&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(a)</span><br></pre></td></tr></table></figure><p>然后复制这个函数到解密里面并调用。</p><p>最后的代码是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> __int64 *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> __int64 b2; </span><br><span class="line">    <span class="type">unsigned</span> __int64 b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> e = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="type">unsigned</span> __int64 key[<span class="number">4</span>] = &#123; <span class="number">0x57656c636f6d6520</span>, <span class="number">0x746f204e53534354</span>, <span class="number">0x4620526f756e6423</span>, <span class="number">0x3136204261736963</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> __int64 sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line"></span><br><span class="line">        b2 -= (((b1 &lt;&lt; <span class="number">4</span>) ^ (b1 &gt;&gt; <span class="number">5</span>)) + b1) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= e;</span><br><span class="line">        b1 -= (((b2 &lt;&lt; <span class="number">4</span>) ^ (b2 &gt;&gt; <span class="number">5</span>)) + b2) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">ccc</span><span class="params">(<span class="type">unsigned</span> __int64 val)</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line"> &#125;<span class="comment">//写完就5万字了</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> __int64 Q[<span class="number">8</span>] = &#123;</span><br><span class="line">    <span class="number">0xc60b34b2bff9d34a</span>, <span class="number">0xf50af3aa8fd96c6b</span>, <span class="number">0x680ed11f0c05c4f1</span>, <span class="number">0x6e83b0a4aaf7c1a3</span>, </span><br><span class="line">    <span class="number">0xd69b3d568695c3c5</span>, <span class="number">0xa88f4ff50a351da2</span>, <span class="number">0x5cfa195968e1bb5b</span>, <span class="number">0xc4168018d92196d9</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;Q[k*<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//sdecrypt(&amp;Q[k * 2], &amp;Q[k * 2 + 1]);</span></span><br><span class="line"></span><br><span class="line">        Q[k * <span class="number">2</span>] = ccc(Q[k * <span class="number">2</span>]);</span><br><span class="line">        Q[k * <span class="number">2</span> +<span class="number">1</span>] = ccc(Q[k * <span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%#llx,\n&quot;</span>, Q[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, &amp;Q[i]);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x4e53534354467b35</span>,</span><br><span class="line"><span class="number">0x384d745534695478</span>,</span><br><span class="line"><span class="number">0x34754b7538505648</span>,</span><br><span class="line"><span class="number">0x4559795939613774</span>,</span><br><span class="line"><span class="number">0x5a30646171564966</span>,</span><br><span class="line"><span class="number">0x4a5656396b704d52</span>,</span><br><span class="line"><span class="number">0x5a37757644475948</span>,</span><br><span class="line"><span class="number">0x52754a35384d7a7d</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;<span class="number">58</span>MtU4iTx4uKu8PVHEYyY9a7tZ0daqVIfJVV9kpMRZ7uvDGYHRuJ58Mz&#125;</span><br></pre></td></tr></table></figure><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="pr"><a href="#pr" class="headerlink" title="pr"></a>pr</h3><p>打开题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag=plaintext = <span class="string">&#x27;NSSCTF&#123;****************&#125;&#x27;</span></span><br><span class="line">charset = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">padding_length = <span class="number">100</span> - <span class="built_in">len</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(padding_length):</span><br><span class="line">    plaintext += random.choice(charset)</span><br><span class="line"></span><br><span class="line">e = <span class="number">31413537523</span></span><br><span class="line">message = bytes_to_long(plaintext.encode())</span><br><span class="line"><span class="keyword">assert</span> message &gt; (<span class="number">1</span> &lt;&lt; <span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> message &lt; (<span class="number">1</span> &lt;&lt; <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">prime_p = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_q = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_r = getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = prime_p * prime_q</span><br><span class="line">n2 = prime_q * prime_r</span><br><span class="line">ciphertext1 = <span class="built_in">pow</span>(message, e, n1)</span><br><span class="line">ciphertext2 = <span class="built_in">pow</span>(message, e, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1=&#x27;</span>, ciphertext1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2=&#x27;</span>, ciphertext2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>, prime_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>, prime_r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1= 36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line"><span class="string">c2= 15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line"><span class="string">p= 12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line"><span class="string">r= 10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">过程:</span></span><br><span class="line">取质数p,q,r</span><br><span class="line">e = ...</span><br><span class="line">n1 = pq</span><br><span class="line">n2 = qr</span><br><span class="line">c1 = m^e mod n1</span><br><span class="line">c2 = m^e mod n2</span><br><span class="line">已知c1,c2,e,p,r求m</span><br></pre></td></tr></table></figure><p>根据<br>$$<br>\begin{cases}<br>c_1\equiv m^e(\mod n_1)\\<br>c_2\equiv m^e(\mod n_2)<br>\end{cases}<br>$$<br>和同余定理<br>$$<br>若a-b是n的倍数,那么a和b在\mod n下同余<br>$$<br>因为原式可得<br>$$<br>c_1-m^e&#x3D;kpq\\<br>c_2-m^e&#x3D;kqr<br>$$<br>所以<br>$$<br>\begin{cases}<br>c_1\equiv m^e(\mod p)\\<br>c_2\equiv m^e(\mod r)<br>\end{cases}<br>$$<br>所以<br>$$<br>\begin{cases}<br>m^e\equiv c_1(\mod p)\\<br>m^e\equiv c_2(\mod r)<br>\end{cases}<br>$$<br>根据中国剩余定理可以直接求m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的参数</span></span><br><span class="line">c1 = <span class="number">36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line">c2 = <span class="number">15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line">p = <span class="number">12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line">r = <span class="number">10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br><span class="line">e = <span class="number">31413537523</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#求n</span></span><br><span class="line">n = p*r</span><br><span class="line"></span><br><span class="line"><span class="comment">#求模逆元</span></span><br><span class="line">j1 = invert(r,p)</span><br><span class="line">j2 = invert(p,r)</span><br><span class="line"><span class="comment">#求a</span></span><br><span class="line">a = c1*j1*r+c2*j2*p</span><br><span class="line"><span class="comment">#开方</span></span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">last = <span class="built_in">pow</span>(a,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(last))</span><br><span class="line"><span class="comment">#b&#x27;NSSCTF&#123;yUanshEnx1ncHun2o23!&#125;FA3JmflIoai8BxgdIGUQumsNc5R0hpo53zICaiWZRfjBj59P36EwC4CSfJOsZ3LIOYnhUmsQ&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">新鲜的题，快来吃吧</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="wp" scheme="https://www.pri87.vip/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>逆核06-内嵌补丁</title>
    <link href="https://www.pri87.vip/posts/9b8c0cc4.html"/>
    <id>https://www.pri87.vip/posts/9b8c0cc4.html</id>
    <published>2024-01-10T02:41:05.000Z</published>
    <updated>2024-01-10T04:22:29.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内嵌代码补丁"><a href="#内嵌代码补丁" class="headerlink" title="内嵌代码补丁"></a>内嵌代码补丁</h2><p>区别于直接修改程序代码，内嵌补丁是专门作用于有加密，校验，压缩的程序，在程序中插入内嵌补丁，并在解密解压后执行补丁内容，最后跳转到OEP，比修改加密&#x2F;压缩后的代码更方便。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>设置补丁的位置</p><ul><li>文件的空白区域（补丁代码少时）</li><li>扩展后的最后一个节区</li><li>添加的新节区</li></ul><p>注：添加补丁的节区一定要有可写权限，获得相应内存的可写权限</p><p>在解密后的位置（jmp OEP）写跳转语句跳到补丁位置，最后由补丁跳到OEP</p><hr><p>[施工中][QAQ]</p><hr><p>第二部分：完</p>]]></content>
    
    
    <summary type="html">只是讲一下原理</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="学习" scheme="https://www.pri87.vip/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PE" scheme="https://www.pri87.vip/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>加密02:TEA</title>
    <link href="https://www.pri87.vip/posts/d89283b5.html"/>
    <id>https://www.pri87.vip/posts/d89283b5.html</id>
    <published>2024-01-09T13:04:00.000Z</published>
    <updated>2024-01-09T14:19:02.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tiny-Encryption-Algorithm"><a href="#Tiny-Encryption-Algorithm" class="headerlink" title="Tiny Encryption Algorithm"></a>Tiny Encryption Algorithm</h1><p>（微型加密算法）</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>块加密，对称加密</p><ul><li>块加密：将明文按一定大小分组之后用确定的算法和对称密钥对魅族分别加密，一般来说加密和解密函数为反函数，一般会进行多轮加密</li><li>对称加密：加密解密双方使用同一个密钥加密解密或双方使用的是两个可以简单地相互推算的密钥</li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="定义与初始化"><a href="#定义与初始化" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = [a,b,c,d]<span class="comment">#一般是4个值</span></span><br><span class="line">delta = <span class="number">0x9E3779B9</span></span><br></pre></td></tr></table></figure><h3 id="轮加密"><a href="#轮加密" class="headerlink" title="轮加密"></a>轮加密</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>,<span class="built_in">len</span>(m),<span class="number">2</span>):</span><br><span class="line">x = m[i]</span><br><span class="line">y = m[i+<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">delta++</span><br><span class="line">x += ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + delta) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>])</span><br><span class="line">y += ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + delta) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>注：具体算法可能不同，但是一般都是x 由y和key改变，y由x和key改变，delta可能加可能减,但是一般情况不会把for i in (0,len(m),2)改成for i in (len-1)，这样就不是块加密了</p><p>此处省略了&amp;0xffffffff，需要让所有值都是int&#x2F;dword，下面也是，之后不说了</p><hr><p>XTEA的加密部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x += (((y &lt;&lt; <span class="number">4</span>) ^ (y &gt;&gt; <span class="number">5</span>)) + y) ^ (delta + key[delta &amp; <span class="number">3</span>])</span><br><span class="line">    delta++</span><br><span class="line">    y += (((x &lt;&lt; <span class="number">4</span>) ^ (x &gt;&gt; <span class="number">5</span>)) + x) ^ (delta + key[(delta&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>注；相当于添加了与和位移,让key的取值不固定,但是框架没啥区别</p><hr><p>XXTEA的加密部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span> = <span class="number">6</span> + <span class="number">52</span> // n <span class="comment">#n为数据个数（输入数组长度）,长度可以不是4的倍数</span></span><br><span class="line">MX = <span class="keyword">lambda</span> <span class="built_in">sum</span>, y, z, p, e, k: ((z &gt;&gt; <span class="number">5</span> ^ y &lt;&lt; <span class="number">2</span>) + (y &gt;&gt; <span class="number">3</span> ^ z &lt;&lt; <span class="number">4</span>)) ^ ((<span class="built_in">sum</span> ^ y) + (k[p &amp; <span class="number">3</span> ^ e] ^ z))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">round</span>):</span><br><span class="line"><span class="built_in">sum</span> = (<span class="built_in">sum</span> + DELTA) &amp; <span class="number">0xffffffff</span></span><br><span class="line">e = <span class="built_in">sum</span> &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">y = m[(p + <span class="number">1</span>) % n]</span><br><span class="line">z = m[p] = (m[p] + MX(<span class="built_in">sum</span>, y, z, p, e, k)) &amp; <span class="number">0xffffffff</span></span><br></pre></td></tr></table></figure><p>贴一个c语言版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也不知道网上都写的啥，看都看不懂</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">xxtea</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span>* key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)             <span class="comment">// encrypt</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">// decrypt</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = rounds * DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 两个32位无符号整数，即待加密的64bit明文数据</span></span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>] = &#123;<span class="number">0x12345678</span>, <span class="number">0x78563412</span>&#125;;</span><br><span class="line">    <span class="comment">// 四个32位无符号整数，即128bit的key</span></span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>]= &#123;<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>&#125;;</span><br><span class="line">    <span class="comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    xxtea(v, n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Encrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    xxtea(v, -n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h2><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>[等待施工][QAQ]</p>]]></content>
    
    
    <summary type="html">TEA基本介绍</summary>
    
    
    
    <category term="密码" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81/"/>
    
    
    <category term="对称加密" scheme="https://www.pri87.vip/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="块加密" scheme="https://www.pri87.vip/tags/%E5%9D%97%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>加密01:RC4</title>
    <link href="https://www.pri87.vip/posts/ed8aa7e2.html"/>
    <id>https://www.pri87.vip/posts/ed8aa7e2.html</id>
    <published>2024-01-08T10:22:23.000Z</published>
    <updated>2024-01-16T07:39:14.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rivest-Cipher-4"><a href="#Rivest-Cipher-4" class="headerlink" title="Rivest Cipher 4"></a>Rivest Cipher 4</h1><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>串流加密，密钥长度可变，对称加密，加密解密使用同一套算法</p><ul><li>串流加密：即密钥是通过一个随机种子通过算法得到的伪随机密钥流，用这一串密钥加密或解密。使加密过程有完善保密性（密钥长度不短于明文长度）</li><li>对称加密：加密解密双方使用同一个密钥加密解密或双方使用的是两个可以简单地相互推算的密钥</li><li>加密解密使用同一套算法：RC4一般使用异或加密，由于异或的对合性（$f(f(x))&#x3D;x$,对任意x均成立），可以使用相同算法加密</li></ul><hr><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="初始化（KSA）"><a href="#初始化（KSA）" class="headerlink" title="初始化（KSA）"></a>初始化（KSA）</h3><ol><li><p>初始化S盒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    S.append(i)</span><br></pre></td></tr></table></figure></li><li><p>打乱S盒(这个算法可以保证每一项都被换过)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key = ...</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">    swap(S[i],S[j])</span><br></pre></td></tr></table></figure></li></ol><h3 id="伪随机子密码生成（PRGA）"><a href="#伪随机子密码生成（PRGA）" class="headerlink" title="伪随机子密码生成（PRGA）"></a>伪随机子密码生成（PRGA）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    i,j = (i+<span class="number">1</span>)%<span class="number">256</span>,(j+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    swap(S[i],S[j])</span><br><span class="line">    c = m[i] ^ S[(S[i] + S[j]) % <span class="number">256</span>]</span><br></pre></td></tr></table></figure><p>注：最后的算法不一定是标准的，但是只要是原文和一个在过程中产生的值异<br>或，就可以算作RC4。</p><hr><h2 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h2><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>[等待施工][QAQ]</p>]]></content>
    
    
    <summary type="html">RC4基本介绍</summary>
    
    
    
    <category term="密码学" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码" scheme="https://www.pri87.vip/tags/%E5%AF%86%E7%A0%81/"/>
    
    <category term="加密方法" scheme="https://www.pri87.vip/tags/%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95/"/>
    
    <category term="对称加密" scheme="https://www.pri87.vip/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="流加密" scheme="https://www.pri87.vip/tags/%E6%B5%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>《逆核》05-Upack和PE结构</title>
    <link href="https://www.pri87.vip/posts/65cde422.html"/>
    <id>https://www.pri87.vip/posts/65cde422.html</id>
    <published>2024-01-04T18:37:58.000Z</published>
    <updated>2024-01-17T15:18:53.728Z</updated>
    
    <content type="html"><![CDATA[<p>upack是一个压缩器，用于压缩PE文件,跟随逆核一起深入学习PE文件结构</p><h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><p>PE文件经过upack之后有以下特点：</p><h2 id="重叠文件头"><a href="#重叠文件头" class="headerlink" title="重叠文件头"></a>重叠文件头</h2><ul><li><p>把MZ文件头(dos头)和PE头重合在一起</p></li><li><p>原理是dos头中的e_lfanew指向NT头但是并没有说NT头不能和DOS头重合,一般情况下:</p></li><li><pre><code>e_fanew = MZ文件大小(40h)+DOS存根=E0<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 但是Upack后e_fanew值是<span class="number">10</span><span class="built_in">h</span>,所以hex方式打开后,第一排是<span class="number">4</span>D5A下一排就是<span class="number">5045</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在可选头中插入解码代码</span></span><br><span class="line"></span><br><span class="line">- 修改SizeOfOpionalHeader的值增加至<span class="number">148</span><span class="built_in">h</span>，这样在节区头和可选头中间就可以插入解码代码，此时节区头的起始偏移是</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  <span class="number">170</span><span class="built_in">h</span>=<span class="number">28</span><span class="built_in">h</span>(可选头起始偏移)+<span class="number">148</span><span class="built_in">h</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p>(SizeOfOpionalHeader的作用是想要根据PE文件形态更换和插入其它可选头形态的结构体)</p></li></ul><h2 id="在文件头插入解码代码"><a href="#在文件头插入解码代码" class="headerlink" title="在文件头插入解码代码"></a>在文件头插入解码代码</h2><ul><li>可选头中的NumberOfRvaAndSizes由10h变为Ah,使得DataDirectory只有前10个元素,,并把后面6个元素的位置改为自己的解码代码</li></ul><h2 id="在节区头中记录自身数据和重叠节区"><a href="#在节区头中记录自身数据和重叠节区" class="headerlink" title="在节区头中记录自身数据和重叠节区"></a>在节区头中记录自身数据和重叠节区</h2><ul><li>节区头中类似重定位节区是不需要的,所以这种节区可以用于记录自身数据</li><li>整个PE文件分为4个部分:PE头,第一节区,第二节区,第三节区.有以下几个特性:</li><li>内存中,PE头,第一节区,第三节区均由同一区域映射而来,即SizeOfRawData和RawOffset相同,但是VirtulSize不同<ul><li>源文件压缩于第二节区</li><li>第一节区的SizeOfImage与原PE文件相同,即原PE文件会解压到第一节区</li></ul></li></ul><hr><h2 id="RVA-to-RAW"><a href="#RVA-to-RAW" class="headerlink" title="RVA to RAW"></a>RVA to RAW</h2><p>标准操作是:</p><p><code>RAW=RVA-VA+PointerToRawData</code></p><p>但是经过upack后,第一节区的PointerToRawData值为10,然而不为FileAlignment(200h)的倍数,因此PE装载器强制识别为其整倍数(确保指向一页),令其等于0</p><p>所以正确值是:</p><p><code>RAW=RVA-VA</code></p><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><ul><li>通过存在在节区的末尾,省略最后的null结构体,映射到内存时,后面自然有null填充,这样可以节约空间</li></ul><h2 id="导入地址表"><a href="#导入地址表" class="headerlink" title="导入地址表"></a>导入地址表</h2><ul><li>在DOS存根中存放导入DLL的名称,查看FirstThunk可以找到对应加载的函数.</li></ul><hr><h1 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h1><ul><li>先是解码循环,再是设置IAT(和UPX差不多?),但是设置IAT的方法是用导入的函数LoadLibraryA和GetProcAddress一边循环一遍构建(先获取导入函数实际地址,再写入原函数)IAT</li></ul>]]></content>
    
    
    <summary type="html">本篇通过Upack压缩器进一步了解PE结构</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="学习" scheme="https://www.pri87.vip/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PE" scheme="https://www.pri87.vip/tags/PE/"/>
    
    <category term="壳" scheme="https://www.pri87.vip/tags/%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>2023安洵杯RE部分复现</title>
    <link href="https://www.pri87.vip/posts/a04e3508.html"/>
    <id>https://www.pri87.vip/posts/a04e3508.html</id>
    <published>2024-01-04T12:17:21.000Z</published>
    <updated>2024-01-17T07:48:52.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安洵杯RE"><a href="#安洵杯RE" class="headerlink" title="安洵杯RE"></a>安洵杯RE</h1><h2 id="mobilego"><a href="#mobilego" class="headerlink" title="mobilego"></a>mobilego</h2><p>现在模拟器中尝试输入，返回nonono</p><p>jadx打开mainactivity</p><p>发现判断函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> m141lambda$onCreate$<span class="number">0</span>$comexamplemobilegoMainActivity(View v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Game.checkflag(<span class="built_in">this</span>.editText.getText().toString()).equals(getResources().getString(C0569R.string.cmp))) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;yes your flag is right&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;No No No&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C0569R中有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">string</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">app_name</span> <span class="operator">=</span> <span class="number">2131689500</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> <span class="number">2131689512</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的cmp是它的id值而不是它的具体值</p><p>所以动态调试找到终值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>这里使用了Game.checkflag这个方法来加密</p><p>所以先看这个</p><p>根据game</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> game;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> p004go.Seq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">_init</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">checkflag</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Seq.touch();</span><br><span class="line">        _init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Game</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">touch</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怀疑checkflag是通过lib加载的</p><p>打开ida，反汇编so文件</p><p>搜索checkflag</p><p>找到5个函数</p><p><img src="https://s2.loli.net/2023/12/28/Z4TbAVSxCklJaOB.png" alt="image-20231228150946781"></p><p>函数是这几个</p><p>好复杂，看不懂。。</p><p>最后看了看wp，发现一个一直没注意的东西，如果输入</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234567890</span>变为<span class="number">6143580927</span>，</span><br><span class="line">&#123;qwertyuiopasdfghjklzxcvbnm&#125;变为bhgsruc&#123;iojqkdpwnezyvxa&#125;lfmt</span><br></pre></td></tr></table></figure><p>说明这个加密只是字符交换，交换之后是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>一共38个字符</p><p>那么尝试输入一个不重复的值，这样就可以直接找到映射表：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t<span class="number">2</span>F<span class="number">7</span>GTglISYL<span class="symbol">nMzc6</span>CqhD<span class="symbol">N5</span>OdX<span class="number">8</span>wPjsKufVbE&#125;</span><br></pre></td></tr></table></figure><p>变为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC</span><br></pre></td></tr></table></figure><p>根据这个对应关系，逆向解出原来的关系</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d1 = <span class="string">&#x27;t2F7GTglISYLnMzc6CqhDN5OdX8wPjsKufVbE&#125;&#x27;</span></span><br><span class="line">d2 = <span class="string">&#x27;NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC&#x27;</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="string">&#x27;49021&#125;5f919038b440139g74b7Dc88330e5d&#123;6&#x27;</span></span><br><span class="line">f1 = [<span class="number">0</span>]*<span class="number">38</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">        <span class="keyword">if</span> (d2[j] == d1[i]):</span><br><span class="line">            f1[i] = f2[j]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(f1))</span><br><span class="line"><span class="comment">#D0g3&#123;4c3b5903d11461f94478b7302980e958&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>猜测输入时尽量使用有规律的字符，更容易看清</p><p>如果不容易逆向可以尝试看或者猜</p><hr><h2 id="牢大想你了"><a href="#牢大想你了" class="headerlink" title="牢大想你了"></a>牢大想你了</h2><p>用dnspy打开Assembly-CSharp.dll后，可以看到主内容中不同类（没学过csharp，猜的），是以下几个类：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">AABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB</span></span><br><span class="line"><span class="attribute">ABBBBABABBAABABBBBBABBBBABABBBAAAABBBAABBBAABBA</span></span><br><span class="line"><span class="attribute">BBBBAAABABABABAAABABBBBBAAABBBAAAAABBBBAABAAABB</span></span><br><span class="line"><span class="attribute">GameManager</span></span><br><span class="line"><span class="attribute">UIManager</span></span><br></pre></td></tr></table></figure><p>上面三个的变量名和类名都被混淆了，需要先根据字符串找到逻辑代码</p><p>在GameManager找到多个：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br><span class="line">if (<span class="name">array</span>.*SequenceEqual*(<span class="name">encryptedData</span>))</span><br></pre></td></tr></table></figure><p>同时在这个语句上面均有</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeHelpers.InitializeArray(array, fieldof(&lt;PrivateImplementationDetails&gt;.BC42CACDF93A0A1981A27121FBDC9584A9570918).FieldHandle);</span><br></pre></td></tr></table></figure><p>相当于先把array先初始化为BC42CACDF93A0A1981A27121FBDC9584A9570918的值，这个字符不是值而是类似于变量名的东西</p><p>所以打开看看</p><p>结果向下看发现直接就有array的值，这样末值就有了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uint</span>[] array = <span class="keyword">new</span> <span class="built_in">uint</span>[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">3363017039U</span>,</span><br><span class="line"><span class="number">1247970816U</span>,</span><br><span class="line"><span class="number">549943836U</span>,</span><br><span class="line"><span class="number">445086378U</span>,</span><br><span class="line"><span class="number">3606751618U</span>,</span><br><span class="line"><span class="number">1624361316U</span>,</span><br><span class="line"><span class="number">3112717362U</span>,</span><br><span class="line"><span class="number">705210466U</span>,</span><br><span class="line"><span class="number">3343515702U</span>,</span><br><span class="line"><span class="number">2402214294U</span>,</span><br><span class="line"><span class="number">4010321577U</span>,</span><br><span class="line"><span class="number">2743404694U</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="number">873914</span>f<span class="punctuation">,</span></span><br><span class="line"><span class="number">4</span>a<span class="number">628600</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">20</span><span class="keyword">c</span><span class="number">77</span>a<span class="number">1</span><span class="keyword">c</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">1</span>a<span class="number">877</span>aaa<span class="punctuation">,</span></span><br><span class="line">d<span class="number">6</span>faa<span class="number">982</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">60</span>d<span class="number">1</span><span class="keyword">c</span><span class="number">964</span><span class="punctuation">,</span></span><br><span class="line">b<span class="number">9884</span><span class="keyword">c</span><span class="number">32</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">2</span>a<span class="number">08</span>a<span class="number">862</span><span class="punctuation">,</span></span><br><span class="line"><span class="keyword">c</span><span class="number">74</span>a<span class="number">0036</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">8</span>f<span class="number">2</span>ee<span class="number">196</span><span class="punctuation">,</span></span><br><span class="line">ef<span class="number">08</span>a<span class="number">6</span>a<span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">a<span class="number">3850896</span></span><br></pre></td></tr></table></figure><p>然后就是找加密函数即encryptedData的来源</p><p>在上面一行：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Buffer.BlockCopy(paddedArray, <span class="number">0</span>, uintArray, <span class="number">0</span>, paddedArray.Length);</span><br><span class="line"><span class="built_in">uint</span>[] encryptedData = <span class="keyword">new</span> <span class="built_in">uint</span>[<span class="number">0</span>];</span><br><span class="line">AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB str2 = <span class="keyword">new</span> AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB(str);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; uintArray.Length; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">encryptedData = encryptedData.Concat(str2.BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA(uintArray[i], uintArray[i + <span class="number">1</span>])).ToArray&lt;<span class="built_in">uint</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA是一个方法，那么化简一下方法名：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; uintArray.Length; i += <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">encryptedData = encryptedData.Concat(str2.tea(uintArray[i], uintArray[i + <span class="number">0</span>])).ToArray&lt;<span class="built_in">uint</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>十分明显了，uintArray是输入，定义是</p><p>uint[] uintArray &#x3D; new uint[paddedArray.Length &#x2F; 0];</p><p>str2在前面是</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB str2 = <span class="keyword">new</span> AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB(str);</span><br></pre></td></tr></table></figure><p>一个抽象的定义，所以直接进tea看看</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">uint</span>[] <span class="title">tea</span>(<span class="params"><span class="built_in">uint</span> ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA, <span class="built_in">uint</span> BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uint</span> v0 = ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA;</span><br><span class="line"><span class="built_in">uint</span> v = BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA;</span><br><span class="line"><span class="built_in">uint</span> sum = <span class="number">1U</span>;</span><br><span class="line"><span class="built_in">uint</span> delta = <span class="number">4294967252U</span>;</span><br><span class="line"><span class="built_in">uint</span>[] str2 = <span class="keyword">this</span>.BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">-103</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += delta;</span><br><span class="line">v0 += ((v &lt;&lt; <span class="number">7</span>) + str2[<span class="number">1</span>] ^ v + sum ^ (v &gt;&gt; <span class="number">0</span>) + str2[<span class="number">1</span>]);</span><br><span class="line">v += ((v0 &lt;&lt; <span class="number">7</span>) + str2[<span class="number">5</span>] ^ v0 + sum ^ (v0 &gt;&gt; <span class="number">4</span>) + str2[<span class="number">8</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">uint</span>[] array = <span class="keyword">new</span> <span class="built_in">uint</span>[<span class="number">8</span>];</span><br><span class="line">array[<span class="number">0</span>] = v0;</span><br><span class="line">array[<span class="number">0</span>] = v;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里还需要str2的值，在GameManager的上面部分写了</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uint[] str = <span class="keyword">new</span> uint[]</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">286331153U,</span></span><br><span class="line"><span class="built_in">286331153U,</span></span><br><span class="line"><span class="built_in">286331153U,</span></span><br><span class="line"><span class="number">286331153</span>U</span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line">AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB str2 = <span class="keyword">new</span> AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB(str)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>可知，</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encryptedData = encryptedData.Concat(str2.BBBABAABAAABBAAABBBAABBAAAAAABABBBBBBABBABABAAB(<span class="built_in">uint</span>Array[i], <span class="built_in">uint</span>Array[i + <span class="number">0</span>])).ToArray&lt;<span class="built_in">uint</span>&gt;();</span><br></pre></td></tr></table></figure><p>这里的str2就是这四个值，key也就是这四个值</p><p>最后还要在加密的类里面看哪个是正确的加密函数（有一堆tea），检查i的值（不应该是无限循环）和key数组的个数（0到3）</p><p>最后只剩一个</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">uint</span>[] <span class="title">BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA</span>(<span class="params"><span class="built_in">uint</span> ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA, <span class="built_in">uint</span> BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uint</span> v0 = ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA;</span><br><span class="line"><span class="built_in">uint</span> v = BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA;</span><br><span class="line"><span class="built_in">uint</span> sum = <span class="number">0U</span>;</span><br><span class="line"><span class="built_in">uint</span> delta = <span class="number">2654435769U</span>;</span><br><span class="line"><span class="built_in">uint</span>[] str2 = <span class="keyword">this</span>.BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += delta;</span><br><span class="line">v0 += ((v &lt;&lt; <span class="number">4</span>) + str2[<span class="number">0</span>] ^ v + sum ^ (v &gt;&gt; <span class="number">5</span>) + str2[<span class="number">1</span>]);</span><br><span class="line">v += ((v0 &lt;&lt; <span class="number">4</span>) + str2[<span class="number">2</span>] ^ v0 + sum ^ (v0 &gt;&gt; <span class="number">5</span>) + str2[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">uint</span>[]</span><br><span class="line">&#123;</span><br><span class="line">v0,</span><br><span class="line">v</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么写tea解密函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b2; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> e = <span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tt[<span class="number">4</span>] = &#123; <span class="number">0x11111111</span>, <span class="number">0x11111111</span>, <span class="number">0x11111111</span>, <span class="number">0x11111111</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line">        </span><br><span class="line">        b2 -= ((b1 &lt;&lt; <span class="number">4</span>) + tt[<span class="number">2</span>] ^ b1 + sum ^ (b1 &gt;&gt; <span class="number">5</span>) + tt[<span class="number">3</span>]);</span><br><span class="line">        b1 -= ((b2 &lt;&lt; <span class="number">4</span>) + tt[<span class="number">0</span>] ^ b2 + sum ^ (b2 &gt;&gt; <span class="number">5</span>) + tt[<span class="number">1</span>]);</span><br><span class="line">        sum -= e;</span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Q[<span class="number">12</span>] = &#123; <span class="number">0xc873914f</span>,</span><br><span class="line">                            <span class="number">0x4a628600</span>,</span><br><span class="line">                            <span class="number">0x20c77a1c</span>,</span><br><span class="line">                            <span class="number">0x1a877aaa</span>,</span><br><span class="line">                            <span class="number">0xd6faa982</span>,</span><br><span class="line">                            <span class="number">0x60d1c964</span>,</span><br><span class="line">                            <span class="number">0xb9884c32</span>,</span><br><span class="line">                            <span class="number">0x2a08a862</span>,</span><br><span class="line">                            <span class="number">0xc74a0036</span>,</span><br><span class="line">                            <span class="number">0x8f2ee196</span>,</span><br><span class="line">                            <span class="number">0xef08a6a9</span>,</span><br><span class="line">                            <span class="number">0xa3850896</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;Q[k*<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//sdecrypt(&amp;Q[k * 2], &amp;Q[k * 2 + 1]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%#x,\n&quot;</span>, Q[i]);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0x695f7469,</span></span><br><span class="line"><span class="comment">//0x65625f73,</span></span><br><span class="line"><span class="comment">//0x615f6e65,</span></span><br><span class="line"><span class="comment">//0x6e6f6c5f,</span></span><br><span class="line"><span class="comment">//0x61645f67,</span></span><br><span class="line"><span class="comment">//0x69775f79,</span></span><br><span class="line"><span class="comment">//0x756f6874,</span></span><br><span class="line"><span class="comment">//0x6f795f74,</span></span><br><span class="line"><span class="comment">//0x796d5f75,</span></span><br><span class="line"><span class="comment">//0x6972665f,</span></span><br><span class="line"><span class="comment">//0x646e65,</span></span><br></pre></td></tr></table></figure><p>然后按行取反转hex再全取反得到结果：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it_is_been_<span class="built_in">a_long</span>_day_without_you_my_friend</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0g3&#123;it_is_been_<span class="built_in">a_long</span>_day_without_you_my_friend&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="感觉有点点简单"><a href="#感觉有点点简单" class="headerlink" title="感觉有点点简单"></a>感觉有点点简单</h2><p>这是一个sys文件，根据网上教程</p><blockquote><p>静态IDA<br>动态SICE 或者 Syser</p></blockquote><p>先尝试用ida打开</p><p>进入主要的检查函数</p><p>找到关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (_BYTE)v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( HIDWORD(v1) &lt;= <span class="number">0xC00</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        rc4(NumberOfBytes_4, HIDWORD(v1), <span class="string">&quot;the_key_&quot;</span>, <span class="number">8</span>i64, v1);</span><br><span class="line">        base64(P, NumberOfBytes_4, HIDWORD(v1));</span><br><span class="line">        LOBYTE(v1) = sub_140001560(P, <span class="number">56</span>i64);</span><br><span class="line">        v8 = <span class="string">&quot;tips: YES, RIGHT FLAG.   you got it!&quot;</span>;</span><br><span class="line">        v7 = <span class="string">&quot;tips: NO , WRONG ANSWER. try again !&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (_BYTE)v1 )</span><br><span class="line">          DbgPrint(<span class="string">&quot;tips: %s\n&quot;</span>, v8);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          DbgPrint(<span class="string">&quot;tips: %s\n&quot;</span>, v7);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        DbgPrint(<span class="string">&quot;tips: file to long \n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NumberOfBytes_4</span> = ExAllocatePool(NonPagedPool, <span class="number">0</span>x1000ui64)<span class="comment">;</span></span><br><span class="line"><span class="attr">P</span> = ExAllocatePool(NonPagedPool, <span class="number">0</span>x1000ui64)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这两个指针的初始化用了ExAllocatePool函数</p><p>这是内核模式下的内存分配函数，意思是从非分页池中分配4096字节给两个指针</p><p>在最后有ExFreePoolWithTag释放这两个空间，这两个函数类似于malloc和free</p><p>在最后LOBYTE(v1) &#x3D; sub_140001560(P, 56i64);   &#x2F;&#x2F; 比较函数进行了比较</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">sub_140001560</span><span class="params">(__int64 a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a2 == <span class="number">56</span> &amp;&amp; !(<span class="type">unsigned</span> <span class="type">int</span>)sub_1400019F0(a1, <span class="string">&quot;6zviISn2McHsa4b108v29tbKMtQQXQHA+2+sTYLlg9v2Q2Pq8SP24Uw=&quot;</span>, <span class="number">56</span>i64);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思是令a1等于后面的值，也就是说拿到P的终值了： </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>zviIS<span class="symbol">n2</span>McHsa<span class="number">4</span>b<span class="number">108</span>v<span class="number">29</span>tbKMtQQXQHA<span class="number">+2</span>+sTYLl<span class="name">g9</span>v<span class="number">2</span>Q<span class="number">2</span>Pq<span class="number">8</span>SP<span class="number">24</span>Uw=</span><br></pre></td></tr></table></figure><p>因为other通过自定义base64转换成P所以other终值直接放base64解码是</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">otherl = [<span class="number">0x70</span>,<span class="number">0x5c</span>,<span class="number">0x9e</span>,<span class="number">0xcc</span>,<span class="number">0x4d</span>,<span class="number">0x4c</span>,<span class="number">0xe2</span>,<span class="number">0x08</span>,</span><br><span class="line">          <span class="number">0x8e</span>,<span class="number">0xac</span>,<span class="number">0x00</span>,<span class="number">0xd0</span>,<span class="number">0x5b</span>,<span class="number">0x0c</span>,<span class="number">0x8c</span>,<span class="number">0x95</span>,</span><br><span class="line">          <span class="number">0x80</span>,<span class="number">0xc1</span>,<span class="number">0xe1</span>,<span class="number">0x85</span>,<span class="number">0x14</span>,<span class="number">0xf1</span>,<span class="number">0x48</span>,<span class="number">0x92</span>,</span><br><span class="line">          <span class="number">0x4c</span>,<span class="number">0xc4</span>,<span class="number">0xce</span>,<span class="number">0xee</span>,<span class="number">0x4d</span>,<span class="number">0x89</span>,<span class="number">0x36</span>,<span class="number">0x5c</span>,</span><br><span class="line">          <span class="number">0x8c</span>,<span class="number">0x50</span>,<span class="number">0xc8</span>,<span class="number">0xd1</span>,<span class="number">0xc0</span>,<span class="number">0x48</span>,<span class="number">0xcc</span>,<span class="number">0x03</span>,</span><br><span class="line">          <span class="number">0x11</span>]</span><br></pre></td></tr></table></figure><p>不对，这个base64不是常规的，要自己写解密函数，因为加密部分是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*(_BYTE *)(a1 + v5) = v6[*(_BYTE *)(a2 + v4) &amp; <span class="number">0x3F</span>];</span><br><span class="line">   *(_BYTE *)(a1 + v5 + <span class="number">1</span>) = v6[(<span class="number">4</span> * (*(_BYTE *)(a2 + v4 + <span class="number">1</span>) &amp; <span class="number">0xF</span>)) | ((*(_BYTE *)(a2 + v4) &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">   *(_BYTE *)(a1 + v5 + <span class="number">2</span>) = v6[(<span class="number">16</span> * (*(_BYTE *)(a2 + v4 + <span class="number">2</span>) &amp; <span class="number">3</span>)) | ((*(_BYTE *)(a2 + v4 + <span class="number">1</span>) &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">   *(_BYTE *)(a1 + v5 + <span class="number">3</span>) = v6[(*(_BYTE *)(a2 + v4 + <span class="number">2</span>) &amp; <span class="number">0xFC</span>) &gt;&gt; <span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>加密过程是：</p><p>a &#x3D;0位后6个</p><p>b&#x3D;0位前2和1位后4组合</p><p>c&#x3D;2位后2和1位前4</p><p>d&#x3D;2位前6</p><p>所以：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">0</span>]*<span class="number">42</span></span><br><span class="line"><span class="built_in">input</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">last = <span class="built_in">list</span>(<span class="string">&#x27;6zviISn2McHsa4b108v29tbKMtQQXQHA+2+sTYLlg9v2Q2Pq8SP24Uw&#x27;</span>)<span class="comment">#最后剩三个</span></span><br><span class="line">table = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;4KBbSzwWClkZ2gsr1qA+Qu0FtxOm6/iVcJHPY9GNp7EaRoDf8UvIjnL5MydTX3eh&#x27;</span>]</span><br><span class="line">tl = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">way</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="keyword">if</span> (table[i]==n):</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    tl.append(<span class="built_in">ord</span>(last[i]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(num),<span class="number">3</span>):</span><br><span class="line"></span><br><span class="line">    num[i] = ((way(tl[j])) | (((way(tl[j+<span class="number">1</span>])) &amp; <span class="number">3</span>)  &lt;&lt; <span class="number">6</span>))</span><br><span class="line">    num[i+<span class="number">1</span>] = (((way(tl[j+<span class="number">1</span>]) &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>) | ((way(tl[j+<span class="number">2</span>]) &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">if</span> ((j+<span class="number">3</span>) &lt; <span class="built_in">len</span>(num)):</span><br><span class="line">        num[i+<span class="number">2</span>] = ((way(tl[j+<span class="number">3</span>]) &lt;&lt; <span class="number">2</span>) | ((way(tl[j+<span class="number">2</span>]) &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num[i+<span class="number">2</span>] = ((way(tl[j+<span class="number">2</span>]) &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    j += <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num)):</span><br><span class="line">    <span class="built_in">input</span> += <span class="built_in">chr</span>(num[i])</span><br><span class="line">hnum = [<span class="built_in">hex</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> num]</span><br><span class="line"><span class="built_in">print</span>(hnum)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>)</span><br><span class="line"><span class="comment">#[&#x27;0x5c&#x27;, &#x27;0x21&#x27;, &#x27;0x7b&#x27;, &#x27;0x33&#x27;, &#x27;0x51&#x27;, &#x27;0x33&#x27;, &#x27;0x38&#x27;, &#x27;0x28&#x27;, &#x27;0x3a&#x27;, &#x27;0x2b&#x27;, &#x27;0x30&#x27;, &#x27;0x40&#x27;, &#x27;0x16&#x27;, &#x27;0x2c&#x27;, &#x27;0x33&#x27;, &#x27;0x25&#x27;, &#x27;0x36&#x27;, &#x27;0x4&#x27;, &#x27;0x38&#x27;, &#x27;0x46&#x27;, &#x27;0x51&#x27;, &#x27;0x3c&#x27;, &#x27;0x25&#x27;, &#x27;0x4a&#x27;, &#x27;0x13&#x27;, &#x27;0x33&#x27;, &#x27;0x39&#x27;, &#x27;0x3b&#x27;, &#x27;0x69&#x27;, &#x27;0x27&#x27;, &#x27;0x4d&#x27;, &#x27;0x29&#x27;, &#x27;0x3&#x27;, &#x27;0x14&#x27;, &#x27;0x33&#x27;, &#x27;0x2&#x27;, &#x27;0x30&#x27;, &#x27;0x31&#x27;, &#x27;0x2&#x27;, &#x27;0x40&#x27;, &#x27;0x6c&#x27;, &#x27;0x0&#x27;]</span></span><br><span class="line"><span class="comment">#[92, 33, 123, 51, 81, 51, 56, 40, 58, 43, 48, 64, 22, 44, 51, 37, 54, 4, 56, 70, 81, 60, 37, 74, 19, 51, 57, 59, 105, 39, 77, 41, 3, 20, 51, 2, 48, 49, 2, 64, 108, 0]</span></span><br><span class="line"><span class="comment">#\!&#123;3Q38(:+0@,3%68FQ&lt;%J39;i&#x27;M)301@l</span></span><br></pre></td></tr></table></figure><p>要注意：</p><ul><li>逆向时位数是6，左移右移和与的值要注意</li><li>py左移时不会溢出</li><li>最后剩了三个要分情况</li></ul><p>得到值</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[92, 33, 123, 51, 81, 51, 56, 40, 58, 43, 48, 64, 22, 44, 51, 37, 54, 4, 56, 70, 81, 60, 37, 74, 19, 51, 57, 59, 105, 39, 77, 41, 3, 20, 51, 2, 48, 49, 2, 64, 108, 0]</span></span><br></pre></td></tr></table></figure><p>最后在上面那个函数rc4</p><p>因为这里是对称加密，直接复制其实就可以了，或者如果会调试sys，直接输入密文就好了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">otherl = [<span class="number">92</span>, <span class="number">33</span>, <span class="number">123</span>, <span class="number">51</span>, <span class="number">81</span>, <span class="number">51</span>, <span class="number">56</span>, <span class="number">40</span>, <span class="number">58</span>, <span class="number">43</span>, <span class="number">48</span>, <span class="number">64</span>, <span class="number">22</span>, <span class="number">44</span>, <span class="number">51</span>, <span class="number">37</span>, <span class="number">54</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">70</span>, <span class="number">81</span>, <span class="number">60</span>, <span class="number">37</span>, <span class="number">74</span>, <span class="number">19</span>, <span class="number">51</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">105</span>, <span class="number">39</span>, <span class="number">77</span>, <span class="number">41</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">51</span>, <span class="number">2</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">108</span>]</span><br><span class="line">k = <span class="string">&#x27;&#x27;</span></span><br><span class="line">p = []</span><br><span class="line">inset = [<span class="number">0</span>]*<span class="number">64</span></span><br><span class="line">S = [<span class="number">0</span>]*<span class="number">64</span></span><br><span class="line">key = <span class="built_in">list</span>(<span class="string">&#x27;the_key_&#x27;</span>)</span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    inset[i] = i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    S[i] = <span class="built_in">ord</span>(key[i % <span class="number">8</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    a = (S[i] + inset[i] + a) % <span class="number">64</span></span><br><span class="line">    inset[i],inset[a] = inset[a],inset[i]</span><br><span class="line"></span><br><span class="line">b = c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(otherl)):</span><br><span class="line">    b = (b + <span class="number">1</span>) % <span class="number">64</span>;</span><br><span class="line">    c = (inset[b] + c) % <span class="number">64</span></span><br><span class="line">    inset[b],inset[c] = inset[c],inset[b]</span><br><span class="line">    otherl[i] ^= ((c ^ b) &amp; inset[(((c ^ b) + inset[c] + inset[b]) % <span class="number">64</span>)])</span><br><span class="line">    k += <span class="built_in">chr</span>(otherl[i])</span><br><span class="line">    p.append(otherl[i])</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment">#D0g3&#123;608292C4-15400BA4-B3299A5C-0429D&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="你好PE"><a href="#你好PE" class="headerlink" title="你好PE"></a>你好PE</h2><p>ida打开后搜索字符，找不到， 尝试动态调试找到主函数</p><p>最后找到主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_1005F820</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *v1; <span class="comment">// [esp+D0h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_1005B16F(&amp;unk_1014000F);</span><br><span class="line">  ((<span class="type">void</span> (__stdcall *)(_DWORD, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>))kernel32_VirtualAlloc)(<span class="number">0</span>, <span class="number">65548</span>, <span class="number">12288</span>, <span class="number">4</span>);</span><br><span class="line">  v1 = (_DWORD *)sub_1005A260();</span><br><span class="line">  <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v1[<span class="number">1</span>] = <span class="number">0x10000</span>;</span><br><span class="line">  *v1 = <span class="number">0</span>;</span><br><span class="line">  v1[<span class="number">2</span>] = v1 + <span class="number">3</span>;</span><br><span class="line">  sub_10059572(v1[<span class="number">2</span>], <span class="number">0</span>, v1[<span class="number">1</span>]);</span><br><span class="line">  sub_10058BC7(<span class="string">&quot;[out]: PLZ Input FLag \n&quot;</span>);</span><br><span class="line">  sub_10058BC7(<span class="string">&quot;[in ]: &quot;</span>);</span><br><span class="line">  sub_100581A4(&amp;unk_10114B68, v1[<span class="number">2</span>]);</span><br><span class="line">  *v1 = sub_1005B5BB(v1[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( *v1 == <span class="number">41</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *v1 = <span class="number">48</span>;</span><br><span class="line">    sub_1005A242(v1);</span><br><span class="line">    <span class="keyword">if</span> ( sub_10058AA0(v1[<span class="number">2</span>], &amp;unk_1013C008, <span class="number">48</span>) )</span><br><span class="line">      sub_10058BC7(<span class="string">&quot;[out]: WRONG FLAG\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sub_10058BC7(<span class="string">&quot;[out]: RIGHT FLAG\n&quot;</span>);</span><br><span class="line">    ((<span class="type">void</span> (__stdcall *)(_DWORD *, _DWORD, <span class="type">int</span>))kernel32_VirtualFree)(v1, <span class="number">0</span>, <span class="number">49152</span>);</span><br><span class="line">    sub_1005A260();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_10058BC7(<span class="string">&quot;[out]: len error\n&quot;</span>);</span><br><span class="line">    ((<span class="type">void</span> (__stdcall *)(_DWORD *, _DWORD, <span class="type">int</span>))kernel32_VirtualFree)(v1, <span class="number">0</span>, <span class="number">49152</span>);</span><br><span class="line">    sub_1005A260();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两个函数需要注意</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub_1005A242(v1);</span><br><span class="line"><span class="keyword">if</span> ( sub_10058AA0(v1[<span class="number">2</span>], &amp;unk_1013C008, <span class="number">48</span>) )</span><br></pre></td></tr></table></figure><p>第二个函数进去之后根据逻辑判断</p><p>先比较了前32个值，然后很麻烦的比较了后面的值，反正就是那两个值相等</p><p>也就是说末值就是unk_1013C008</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x4D</span>, <span class="number">0xB8</span>, <span class="number">0x76</span>, <span class="number">0x29</span>, <span class="number">0xF5</span>, <span class="number">0xA9</span>, <span class="number">0x9E</span>, <span class="number">0x59</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0xB1</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0x21</span>, <span class="number">0x2C</span>, <span class="number">0x30</span>, <span class="number">0xB3</span>, <span class="number">0x79</span>, <span class="number">0x78</span>, <span class="number">0x17</span>, <span class="number">0xA8</span>, <span class="number">0xED</span>, <span class="number">0xF7</span>, <span class="number">0xDB</span>, <span class="number">0xE1</span>, <span class="number">0x53</span>, <span class="number">0xF0</span>, <span class="number">0xDB</span>, <span class="number">0xE9</span>, <span class="number">0x03</span>, <span class="number">0x51</span>, <span class="number">0x5E</span>, <span class="number">0x09</span>, <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0xDF</span>, <span class="number">0xF0</span>, <span class="number">0x96</span>, <span class="number">0xFC</span>, <span class="number">0xC1</span>, <span class="number">0xB5</span>, <span class="number">0xE6</span>, <span class="number">0x62</span>, <span class="number">0x95</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br></pre></td></tr></table></figure><p>第一个应该是加密，用findcrypt搜索一下，搜不出来。。好像在调试的时候搜会很卡，那就直接分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">sub_1005F6F0</span><span class="params">(_DWORD *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+D0h] [ebp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+DCh] [ebp-24h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [esp+E8h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> *v5; <span class="comment">// [esp+F8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_1005B16F(&amp;unk_1014000F);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; *a1 &gt;&gt; <span class="number">3</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (<span class="type">int</span> *)(a1[<span class="number">2</span>] + <span class="number">8</span> * i);</span><br><span class="line">    v1 = *v5;</span><br><span class="line">    v4 = *(_QWORD *)v5;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">64</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      LOBYTE(v1) = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">        v4 = qword_1013C000 ^ sub_10059F9F(v1, HIDWORD(v4));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v4 = sub_10059F9F(v1, HIDWORD(v4));</span><br><span class="line">    &#125;</span><br><span class="line">    *(_QWORD *)v5 = v4;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>这啥啊，看不懂。。。</del>最外层循环控制轮数，内层循环控制一轮的加密次数，根据这个来直接写逆向？？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __usercall <span class="symbol">sub_1005FDE0@<span class="keyword">&lt;eax&gt;</span></span>(__int64 <span class="symbol">pnum@<span class="keyword">&lt;edx:eax&gt;</span></span>, unsigned __int8 <span class="symbol">ahigh@<span class="keyword">&lt;cl&gt;</span></span>)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( ahigh &gt;= <span class="number">64</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v2) = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ahigh &gt;= <span class="number">32</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v2) = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> pnum &lt;&lt; (ahigh &amp; <span class="number">0x1F</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里似乎sub_10059F9F(v1, HIDWORD(v4))的位置有问题，是ida反编译的锅，应该是先执行这个再if else</p><p>看汇编窗口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debug033:1005FDE0 ; int __usercall sub_1005FDE0@&lt;eax&gt;(__int64 pnum@&lt;edx:eax&gt;, unsigned __int8 ahigh@&lt;cl&gt;)</span><br><span class="line">debug033:1005FDE0 sub_1005FDE0    proc near               ; CODE XREF: cal↑j</span><br><span class="line">debug033:1005FDE0                 cmp     cl, 40h ; &#x27;@&#x27;</span><br><span class="line">debug033:1005FDE3                 jnb     short loc_1005FDFA</span><br><span class="line">debug033:1005FDE5                 cmp     cl, 20h ; &#x27; &#x27;</span><br><span class="line">debug033:1005FDE8                 jnb     short loc_1005FDF0</span><br><span class="line">debug033:1005FDEA                 shld    edx, eax, cl</span><br><span class="line">debug033:1005FDED                 shl     eax, cl</span><br><span class="line">debug033:1005FDEF                 retn</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov     cl, 1  ;在调用cal之前</span><br></pre></td></tr></table></figure><p>这里的cl就是1，和传入无关，最后有一句shl     eax, cl</p><p>shl是<code>双精度左移</code>，这是类似循环左移的操作，即左移，右边的空值由左边溢出的值补充，类似还有shr双精度右移，并没有0x1f</p><p>因此，整体逻辑是：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先分组为<span class="number">8</span>字节<span class="built_in">x6</span>组</span><br><span class="line">如果是奇数：与key再左移</span><br><span class="line">如果是偶数：直接左移</span><br><span class="line">得到结果</span><br></pre></td></tr></table></figure><p>所以逆向是</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分组</span><br><span class="line">如果是奇数：与<span class="built_in">key</span>再右移</span><br><span class="line">如果是偶数：直接右移</span><br></pre></td></tr></table></figure><p>同时可以知道的是，</p><p>如果是奇数右移，左边应该补1</p><p>如果是偶数右移，左边不用补</p><p>那么逆向：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0x4D</span>, <span class="number">0xB8</span>, <span class="number">0x76</span>, <span class="number">0x29</span>, <span class="number">0xF5</span>, <span class="number">0xA9</span>, <span class="number">0x9E</span>, <span class="number">0x59</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0xB1</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0x21</span>, <span class="number">0x2C</span>, <span class="number">0x30</span>, <span class="number">0xB3</span>, <span class="number">0x79</span>, <span class="number">0x78</span>, <span class="number">0x17</span>, <span class="number">0xA8</span>, <span class="number">0xED</span>, <span class="number">0xF7</span>, <span class="number">0xDB</span>, <span class="number">0xE1</span>, <span class="number">0x53</span>, <span class="number">0xF0</span>, <span class="number">0xDB</span>, <span class="number">0xE9</span>, <span class="number">0x03</span>, <span class="number">0x51</span>, <span class="number">0x5E</span>, <span class="number">0x09</span>, <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0xDF</span>, <span class="number">0xF0</span>, <span class="number">0x96</span>, <span class="number">0xFC</span>, <span class="number">0xC1</span>, <span class="number">0xB5</span>, <span class="number">0xE6</span>, <span class="number">0x62</span>, <span class="number">0x95</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">q = [<span class="number">0x599EA9F52976B84D</span>, <span class="number">0x302C212FC4B15655</span>, <span class="number">0xDBF7EDA8177879B3</span>, <span class="number">0x5E5103E9DBF053E1</span>, <span class="number">0xC1FC96F0DF00C109</span>, <span class="number">0x000000019562E6B5</span>]</span><br><span class="line">key = <span class="number">0x54AA4A9</span></span><br><span class="line">k=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span> (q[i] &amp; <span class="number">1</span>):</span><br><span class="line">            q[i] = (q[i] ^ key) &gt;&gt; <span class="number">1</span></span><br><span class="line">            q[i] |= <span class="number">0x8000000000000000</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            q[i] = (q[i] &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    k.append(<span class="built_in">hex</span>(q[i]))</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment">#[&#x27;0x4530367b33673044&#x27;, &#x27;0x37352d4132374531&#x27;, &#x27;0x372d304642384136&#x27;, &#x27;0x2d39424243313037&#x27;, &#x27;0x4345353134323042&#x27;, &#x27;0x7d&#x27;]</span></span><br></pre></td></tr></table></figure><p>逆序，转hex，按字符逆序</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">D0g3</span>&#123;<span class="number">60</span>E1E72A-<span class="number">576</span>A8BF0-<span class="number">7701</span>CBB9-B02415EC&#125;</span><br></pre></td></tr></table></figure><h2 id="你见过蓝色的小鲸鱼吗"><a href="#你见过蓝色的小鲸鱼吗" class="headerlink" title="你见过蓝色的小鲸鱼吗"></a>你见过蓝色的小鲸鱼吗</h2><p>打开文件后，发现是win程序，说明进入主窗口程序和判断函数不一定在一个位置 </p><p>所以打开后需要找到判断代码，搜索string无效</p><p>根据弹窗函数是MessageBox，尝试搜索</p><p>然后找到判断函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __thiscall <span class="title function_">lastcall</span><span class="params">(<span class="type">void</span> *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> wrong[<span class="number">28</span>]; <span class="comment">// [esp+D0h] [ebp-54h] BYREF</span></span><br><span class="line">  CHAR yes[<span class="number">20</span>]; <span class="comment">// [esp+ECh] [ebp-38h] BYREF</span></span><br><span class="line">  CHAR Caption[<span class="number">24</span>]; <span class="comment">// [esp+100h] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+118h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = this;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52102F);</span><br><span class="line">  <span class="built_in">strcpy</span>(Caption, <span class="string">&quot;tip&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(yes, <span class="string">&quot;You Get It!&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(wrong, <span class="string">&quot;Wrong user/passwd&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)v5 + <span class="number">2</span>) != *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    || j__memcmp(*(<span class="type">const</span> <span class="type">void</span> **)v5, *((<span class="type">const</span> <span class="type">void</span> **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>)) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, wrong, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, yes, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的v5+2和v5+3一定指向一个是输入（可能加密了），另一个说不准，因为有一个密码一个用户名</p><p>由于需要进入else分支，所以条件必须为假</p><p>即：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*((_DWORD *)v5 + <span class="number">2</span>) == *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    &amp;&amp; ！j__memcmp<span class="comment">(*(const void **)</span>v5, *((<span class="keyword">const</span> void **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>既然如此，需要找出能改变v5+2和+3的地址的函数（修改了this），向上找：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *v6; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *lpString; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> WindowTextLengthA; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  WindowTextLengthA = GetWindowTextLengthA(hWnd);</span><br><span class="line">  v10 = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  lpString = (CHAR *)j__malloc(__CFADD__(WindowTextLengthA, <span class="number">16</span>) ? <span class="number">-1</span> : WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(v10, <span class="number">16</span>) ? <span class="number">-1</span> : v10 + <span class="number">16</span>);</span><br><span class="line">  v6 = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( lpString &amp;&amp; result )</span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, lpString, WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">    GetWindowTextA(DlgItem, v6, v10 + <span class="number">16</span>);</span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);</span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;unk_51D38C, <span class="number">0x10</span>u);</span><br><span class="line">    sub_45126F(lpString, WindowTextLengthA, (<span class="type">int</span>)v6, v10);</span><br><span class="line">    j_lastcall(v4);</span><br><span class="line">    j__free(lpString);</span><br><span class="line">    j__free(v6);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动调可知：第一个是用户名，第二个是密码</p><p>化简：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *password; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *username; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> lenOFpass; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> lenOFname; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  lenOFname = GetWindowTextLengthA(hWnd);</span><br><span class="line">  lenOFpass = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  username = (CHAR *)j__malloc(__CFADD__(lenOFname, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFname + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(lenOFpass, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFpass + <span class="number">16</span>);</span><br><span class="line">  password = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( username &amp;&amp; result )                     <span class="comment">// 检查空指针</span></span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, username, lenOFname + <span class="number">16</span>);<span class="comment">// 用户名</span></span><br><span class="line">    GetWindowTextA(DlgItem, password, lenOFpass + <span class="number">16</span>);<span class="comment">// 密码</span></span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);                        <span class="comment">// 分配内存</span></span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);              <span class="comment">// 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;specialloc, <span class="number">0x10</span>u);             <span class="comment">// 初始化对象</span></span><br><span class="line">    encode(username, lenOFname, (<span class="type">int</span>)password, lenOFpass);</span><br><span class="line">    j_lastcall(v4);                             <span class="comment">// 判断</span></span><br><span class="line">    j__free(username);</span><br><span class="line">    j__free(password);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面实在分析不出来了，里面有一些涉及c++的理解的,所以看看wp</p><p>在后面有加密函数，用插件findcrypt可以直接看出来是blowfish</p><p>在cmp时下断点buf1就是最后的值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11A51F049550E2508F17E16CF1632B47</span><br></pre></td></tr></table></figure><p>写blowfish的解密：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文（以十六进制表示）</span></span><br><span class="line">ciphertext_hex = <span class="string">&quot;11A51F049550E2508F17E16CF1632B47&quot;</span></span><br><span class="line">ciphertext = binascii.unhexlify(ciphertext_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥（简单字符串）</span></span><br><span class="line">key = <span class="string">&quot;UzBtZTBuZV9EMGcz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Blowfish ECB模式的解密器</span></span><br><span class="line">cipher = Blowfish.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), Blowfish.MODE_ECB)</span><br><span class="line"></span><br><span class="line">plaintext_bytes = cipher.decrypt(ciphertext)</span><br><span class="line">plaintext = plaintext_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"><span class="comment">#QHRoZWJsdWVmMXNo</span></span><br></pre></td></tr></table></figure><p>这个答案是个base64，解密后是@thebluef1sh</p><p>（和蓝鲸的唯一关系吗。。。）</p><p>所以</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">D0g3</span><span class="template-variable">&#123;UzBtZTBuZV9EMGczQHRoZWJsdWVmMXNo&#125;</span></span><br></pre></td></tr></table></figure><hr><p>写完啦，</p><p>如有错误，请在下方评论区写下您的想法。感谢！</p><details class="folding-tag" ><summary> 题目下载 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="(百度网盘)" href="https://pan.baidu.com/s/1XAZU4ED-xjuUVUno-Kx81Q?pwd=Game"><div class="left"><img src="/assets/coffee.png"/></div><div class="right"><p class="text">(百度网盘)</p><p class="url">https://pan.baidu.com/s/1XAZU4ED-xjuUVUno-Kx81Q?pwd=Game</p></div></a></div><p>解压密码:</p><p>pRism</p>              </div>            </details>]]></content>
    
    
    <summary type="html">在赛后对RE的题的分析</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="wp" scheme="https://www.pri87.vip/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>刷题记录(2)</title>
    <link href="https://www.pri87.vip/posts/8f76d0c7.html"/>
    <id>https://www.pri87.vip/posts/8f76d0c7.html</id>
    <published>2024-01-03T03:26:03.000Z</published>
    <updated>2024-01-03T03:30:07.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NSSCTF"><a href="#NSSCTF" class="headerlink" title="NSSCTF"></a>NSSCTF</h1><h2 id="NSSRound-4-SWPU-hide-and-seek"><a href="#NSSRound-4-SWPU-hide-and-seek" class="headerlink" title="[NSSRound#4 SWPU]hide_and_seek"></a>[NSSRound#4 SWPU]hide_and_seek</h2><p>打开调试后，发现有反调试，把一开始的exit给nop掉</p><p>然后调试跳到后面发现有flag：SCTF{wud3_0n@,34p}</p><p>但是结果不对？？</p><p>再次调试，在hex视图中alt+t搜索NSSCTF，发现flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">NSSCTF</span><span class="template-variable">&#123;h1d3_0n_h34p&#125;</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-X-Basic-ez-z3"><a href="#NSSRound-X-Basic-ez-z3" class="headerlink" title="[NSSRound#X Basic]ez_z3"></a>[NSSRound#X Basic]ez_z3</h2><p>先用die查壳，发现是upx，尝试用upx-d脱壳，然后失败，应该是改过什么东西，打开ida看看，结果发现节区名从UPX变成了XYU，所以尝试还原，还原后还是失败，在03E0处还需修改为UPX，这次UPX-d成功，参考<a href="https://www.52pojie.cn/thread-326995-1-1.html">UPX防脱壳机脱壳、去除特征码、添加花指令小探 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>打开ida查看main函数并尝试调试</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Please input the flag:<span class="number">1212121</span></span><br><span class="line">Can you calculated out z3?</span><br><span class="line">Please input z3:<span class="number">121212</span></span><br><span class="line">YOU are wrong</span><br><span class="line">oh no!!!!!your flag is wrong,try again</span><br></pre></td></tr></table></figure><p>main函数大致逻辑：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(std::cout, <span class="string">&quot;Please input the flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">getin</span>(std::cin, flag);</span><br><span class="line">  v3 = <span class="built_in">print</span>(std::cout, <span class="string">&quot;Can you calculated out z3?&quot;</span>);</span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, guessNoUse);</span><br><span class="line">  <span class="built_in">print</span>(std::cout, <span class="string">&quot;Please input z3:&quot;</span>);</span><br><span class="line">  <span class="built_in">getin</span>(std::cin, z3num);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">j_strlen</span>(flag); ++i )</span><br><span class="line">    storn[i] = <span class="built_in">change</span>(flag[i], exenum[i]);</span><br><span class="line">  <span class="built_in">z3check1</span>(z3num);</span><br><span class="line">  <span class="built_in">z3check2</span>(z3num);</span><br><span class="line">  check = <span class="built_in">sub_7FF7CCBC10E6</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ( check == <span class="number">1</span> )</span><br><span class="line">    v4 = <span class="built_in">print</span>(std::cout, <span class="string">&quot;yeah!!!!!!you get the flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v4 = <span class="built_in">print</span>(std::cout, <span class="string">&quot;oh no!!!!!your flag is wrong,try again&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, guessNoUse);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据流程大致是先对flag变换为k，然后检测输入一个z3序列是否满足条件，然后让z3序列和k变换，检查最后结果</p><p>那么先找到z3num：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个求解器实例</span></span><br><span class="line">f = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个整数变量的数组，用于存储z3num中的值</span></span><br><span class="line">z3num = [Int(<span class="string">f&#x27;z3num[<span class="subst">&#123;i&#125;</span>]&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> z3num:</span><br><span class="line">    f.add(num &gt;= <span class="number">0</span>)</span><br><span class="line">    f.add(num &lt;= <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">2582239</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - (<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">      + <span class="number">17</span> * z3num[<span class="number">16</span>]) == <span class="number">2602741</span>)</span><br><span class="line">f.add(<span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>] * <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>] * <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>] * <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">2668123</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + (<span class="number">13</span> * z3num[<span class="number">12</span>] + <span class="number">11</span> * z3num[<span class="number">10</span>] - <span class="number">12</span> * z3num[<span class="number">11</span>]) * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">2520193</span>)</span><br><span class="line">f.add(<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>] * <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">8904587</span>)</span><br><span class="line">f.add(<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>] * <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * (<span class="number">13</span> * z3num[<span class="number">12</span>] + <span class="number">12</span> * z3num[<span class="number">11</span>] - <span class="number">14</span> * z3num[<span class="number">13</span>] - <span class="number">15</span> * z3num[<span class="number">14</span>])</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">1227620874</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>] * <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">1836606059</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">8720560</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span></span><br><span class="line">     * z3num[<span class="number">10</span>]</span><br><span class="line">     * (<span class="number">10</span> * z3num[<span class="number">9</span>] + <span class="number">30</span> * z3num[<span class="number">5</span>] + <span class="number">5</span> * z3num[<span class="number">4</span>] + <span class="number">4</span> * z3num[<span class="number">3</span>] - <span class="number">7</span> * z3num[<span class="number">6</span>] + <span class="number">8</span> * z3num[<span class="number">7</span>] - <span class="number">9</span> * z3num[<span class="number">8</span>])</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - (<span class="number">16</span> * z3num[<span class="number">15</span>] - <span class="number">17</span> * z3num[<span class="number">16</span>] - <span class="number">18</span> * z3num[<span class="number">17</span>]) * <span class="number">15</span> * z3num[<span class="number">14</span>] == <span class="number">11387045</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">7660269</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - (<span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">      - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">      - <span class="number">30</span> * z3num[<span class="number">5</span>])</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">2461883</span>)</span><br><span class="line">f.add(<span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>] * <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == -<span class="number">966296</span>)</span><br><span class="line">f.add(<span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + (<span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">      + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">      + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">      + <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">      + <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">      - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">      + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">      - <span class="number">9</span> * z3num[<span class="number">8</span>])</span><br><span class="line">     * <span class="number">2</span></span><br><span class="line">     * z3num[<span class="number">1</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>] == <span class="number">254500223</span>)</span><br><span class="line">f.add(<span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>] * <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == <span class="number">6022286</span>)</span><br><span class="line">f.add(<span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>] * <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] == -<span class="number">636956022</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">10631829</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">15</span> * z3num[<span class="number">14</span>] * <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>] * <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     - <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + (<span class="number">4</span> * z3num[<span class="number">3</span>] - <span class="number">5</span> * z3num[<span class="number">4</span>] - <span class="number">30</span> * z3num[<span class="number">5</span>]) * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>] == <span class="number">6191333</span>)</span><br><span class="line">f.add(<span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>] * <span class="number">9</span> * z3num[<span class="number">8</span>] * <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     + <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>]</span><br><span class="line">     + <span class="number">2</span> * z3num[<span class="number">1</span>] * z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>] * <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] * <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>] == <span class="number">890415359</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>]</span><br><span class="line">     + <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">18</span> * z3num[<span class="number">17</span>]</span><br><span class="line">     + <span class="number">16</span> * z3num[<span class="number">15</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     + <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     + <span class="number">4</span> * z3num[<span class="number">3</span>] * <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     - <span class="number">7</span> * z3num[<span class="number">6</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>]</span><br><span class="line">     - <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">15</span> * z3num[<span class="number">14</span>] == <span class="number">23493664</span>)</span><br><span class="line">f.add(<span class="number">20</span> * z3num[<span class="number">19</span>] * <span class="number">19</span> * z3num[<span class="number">18</span>]</span><br><span class="line">     + <span class="number">13</span> * z3num[<span class="number">12</span>]</span><br><span class="line">     + <span class="number">12</span> * z3num[<span class="number">11</span>]</span><br><span class="line">     + <span class="number">10</span> * z3num[<span class="number">9</span>]</span><br><span class="line">     + <span class="number">3</span> * z3num[<span class="number">2</span>] * <span class="number">2</span> * z3num[<span class="number">1</span>]</span><br><span class="line">     + z3num[<span class="number">0</span>]</span><br><span class="line">     - <span class="number">4</span> * z3num[<span class="number">3</span>]</span><br><span class="line">     - <span class="number">5</span> * z3num[<span class="number">4</span>]</span><br><span class="line">     + <span class="number">8</span> * z3num[<span class="number">7</span>] * <span class="number">7</span> * z3num[<span class="number">6</span>] * <span class="number">30</span> * z3num[<span class="number">5</span>]</span><br><span class="line">     - <span class="number">9</span> * z3num[<span class="number">8</span>]</span><br><span class="line">     - <span class="number">11</span> * z3num[<span class="number">10</span>]</span><br><span class="line">     - <span class="number">14</span> * z3num[<span class="number">13</span>]</span><br><span class="line">     - <span class="number">16</span> * z3num[<span class="number">15</span>] * <span class="number">15</span> * z3num[<span class="number">14</span>]</span><br><span class="line">     - <span class="number">17</span> * z3num[<span class="number">16</span>]</span><br><span class="line">     - <span class="number">18</span> * z3num[<span class="number">17</span>] == <span class="number">1967260144</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.check())</span><br><span class="line"><span class="keyword">while</span> (f.check()==sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = f.model()</span><br><span class="line">    p =<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">20</span>):</span><br><span class="line">        p += <span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[z3num[i]])))</span><br><span class="line">        condition.append(z3num[i]!=<span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[z3num[i]])))</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    f.add(Or(condition))</span><br><span class="line">    <span class="comment">#hahahathisisfackflag</span></span><br></pre></td></tr></table></figure><p>这里奇怪的是一开始用或逻辑解不出来正确值，但是把所有都与之后却可以得到正确的结果，同时这个不是flag是中间用做加密的值</p><p>又因为后来的算法是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_7FF7CCBC4830</span><span class="params">(<span class="type">char</span> *z3num)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7CCBDB069, v1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; j_strlen(flag); ++i )</span><br><span class="line">    last[i] = z3num[j_strlen(flag) - i - <span class="number">1</span>] ^ storn[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的检查是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">sub_7FF7CCBC4770</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">size_t</span> len; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7CCBDB069, v1);</span><br><span class="line">  zer0 = <span class="number">0</span>;</span><br><span class="line">  len = j_strlen(flag);</span><br><span class="line">  <span class="keyword">if</span> ( len )</span><br><span class="line">    <span class="keyword">return</span> last[zer0] == strange_num[zer0];     <span class="comment">// 前两位相等，因为是DWORD</span></span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个可能错了什么，可能前两位相等相当于全部相等。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0x00001207</span>, <span class="number">0</span>x00004CA0, <span class="number">0x00004F21</span>, <span class="number">0x00000039</span>, <span class="number">0</span>x<span class="number">0001A523</span>, <span class="number">0</span>x0000023A, <span class="number">0x00000926</span>, <span class="number">0</span>x00004CA7, <span class="number">0x00006560</span>, <span class="number">0x00000036</span>, <span class="number">0</span>x0001A99B, <span class="number">0</span>x00004CA8, <span class="number">0</span>x0001BBE0, <span class="number">0x00003705</span>, <span class="number">0x00000926</span>, <span class="number">0</span>x<span class="number">000077D3</span>, <span class="number">0x00009A98</span>, <span class="number">0</span>x0000657B, <span class="number">0x00000018</span>, <span class="number">0x00000B11</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br></pre></td></tr></table></figure><p>前面的变换是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">change2</span><span class="params">(<span class="type">int</span> flag, __int64 exenum)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> a; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">int</span> exei; <span class="comment">// [rsp+148h] [rbp+128h]</span></span><br><span class="line"></span><br><span class="line">  exei = exenum;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(&amp;unk_7FF7CCBDB069, exenum);</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( exei )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (exei &amp; <span class="number">1</span>) != <span class="number">0</span> )                      <span class="comment">// exenum这一位是奇数</span></span><br><span class="line">      a *= flag;</span><br><span class="line">    flag = flag * flag % <span class="number">1000</span>;</span><br><span class="line">    exei &gt;&gt;= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">exe = [<span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x7</span>]</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x1207</span>, <span class="number">0x4CA0</span>, <span class="number">0x4F21</span>, <span class="number">0x0039</span>, <span class="number">0x1A523</span>, <span class="number">0x023A</span>, <span class="number">0x0926</span>, <span class="number">0x4CA7</span>, <span class="number">0x6560</span>, <span class="number">0x0036</span>, <span class="number">0x1A99B</span>, <span class="number">0x4CA8</span>, <span class="number">0x1BBE0</span>, <span class="number">0x3705</span>, <span class="number">0x0926</span>, <span class="number">0x77D3</span>, <span class="number">0x9A98</span>, <span class="number">0x657B</span>, <span class="number">0x0018</span>, <span class="number">0x0B11</span>]</span><br><span class="line"></span><br><span class="line">z3num = <span class="built_in">list</span>(<span class="string">&#x27;hahahathisisfackflag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stron = [<span class="number">0</span>]*<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range (<span class="number">20</span>):</span><br><span class="line">    stron[i] = ord(z3num[<span class="number">19</span> - i]) ^ last[i]</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">20</span></span><br><span class="line">def po(flag,b):</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (b):</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span> != <span class="number">0</span>):</span><br><span class="line">            a *= flag</span><br><span class="line">        flag = flag * flag % <span class="number">1000</span></span><br><span class="line">        b &gt;&gt;= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">20</span>): </span><br><span class="line">    <span class="keyword">for</span> chrr in range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">if</span> (po(chrr,exe[i]) == stron[i]):</span><br><span class="line">            flag[i] = chr(chrr)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;&#x27;.join(flag))</span></span><br><span class="line"><span class="string">#T1e_z3_1s_v1r9_3asy!</span></span><br></pre></td></tr></table></figure><p>爆破得出答案</p><p>总结：</p><p>z3遇到或时计算非常慢，用bitvec型或把或逻辑改成与加快速度</p><p>最后一步遇到不好逆向的也不好z3的，可以用爆破求解因为字符一定在32到127</p><p>一个疑问是：最后一步的b都是一位数，说明a一定是1或者flag的值，stron里面就应该是这个数为什么stron里不是呢</p><h2 id="NSSCTF-2nd-MyBase"><a href="#NSSCTF-2nd-MyBase" class="headerlink" title="[NSSCTF 2nd]MyBase"></a>[NSSCTF 2nd]MyBase</h2><p>打开ida后发现有tls，需要注意一下</p><p>ida打开之后</p><p>main函数有两个子函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _main();</span><br><span class="line">  test();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先调试看看有没有反调试，然后发现并没有</p><p>第一个_main看不懂，直接进test，里面有一个base64</p><p>打开后根据码表直接解密，但是解不出来。。</p><p>去data里面看看，发现还有码表，进交叉引用的函数发现有一个打乱的代码</p><p>是个c语言函数，有srand函数，所以调试把他找出来</p><p>真：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">YsVO0tvT2o4puZ38j1dwf7MArGPNeQLDRHUK</span>+SChbFanmklWEcgixXJIq6y5B/<span class="number">9</span>z</span><br></pre></td></tr></table></figure><p>一开始加密的：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+86420ywusqomkigecaYWUSQOMKIGECABDFHJLNPRTVXZbdfhjlnprtvxz13579/</span></span><br></pre></td></tr></table></figure><hr><p>然后发现这个打乱代码执行了很多次</p><p>感觉哪里漏了，最后查找交叉引用发现打乱代码在加密里面有一行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( !setjmp(env) )</span><br><span class="line">    exception_handler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过查阅：</p><p>setjmp和longjmp成对使用实现函数间跳转</p><p>setjmp将函数在此处的上下文保存在jmp_buf结构体中，以供longjmp从此结构体中恢复</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">setjmp</span><span class="params">(jmp_buf env)</span>;</span><br></pre></td></tr></table></figure><p>env为保存的结构体变量的位置，若直接调用返回0，否则返回非0（主要指通过longjmp跳转）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">longjmp</span><span class="params">(jmp_buf env, <span class="type">int</span> val)</span>;</span><br></pre></td></tr></table></figure><p>env为由setjmp保存的上下文，val表示longjmp传给setjmp的返回值，如果val&#x3D;0，则setjmp返回1，否则返回val</p><p>longjmp 不直接返回，而是从 setjmp 函数中返回，longjmp 执行完之后，程序就像刚从 setjmp 函数返回一样。</p><p>所以；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !setjmp(env) )</span><br><span class="line">      exception_handler();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这段代码先执行setjmp(env)，返回0</p><p>进入exception_handler();</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">exception_handler</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  generate_base64_table(base64_table);</span><br><span class="line">  longjmp_0(env, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后更新base64码表</p><p>所以逻辑是：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对第一组加密</span><br><span class="line">更新</span><br><span class="line">对第二组加密</span><br><span class="line">更新</span><br><span class="line">对第三组加密</span><br><span class="line">更新</span><br><span class="line"><span class="meta prompt_">...</span></span><br></pre></td></tr></table></figure><p>所以密文</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">YkLY</span></span><br><span class="line"><span class="symbol">v1Xj</span></span><br><span class="line"><span class="number">23</span><span class="built_in">X7</span></span><br><span class="line"><span class="symbol">N0E5</span></span><br><span class="line"><span class="symbol">eoFg</span></span><br><span class="line"><span class="symbol">UveK</span></span><br><span class="line"><span class="symbol">eos1</span></span><br><span class="line"><span class="symbol">XS8K</span></span><br><span class="line"><span class="number">9</span>r4g</span><br></pre></td></tr></table></figure><p>码表</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+86420ywusqomkigecaYWUSQOMKIGECABDFHJLNPRTVXZbdfhjlnprtvxz13579/</span><br><span class="line">YsVO0tvT2o4puZ38j1dwf7MArGPNeQLDRHUK+SChbFanmklWEcgixXJIq6y5B/9z</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br><span class="line">YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br><span class="line">YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br><span class="line">YvHeOZECmTyg0Mw2i7PIGKblsfF59rzUk6p3hVdW1qaQ+xRANnXLj48BcJDotS/u</span><br><span class="line">xDfpNE4LYH5Tk+MRtrlv1oFbQm0gP37eqIajh2syUnZcSV8iBK6O/XWuzdCwA9GJ</span><br></pre></td></tr></table></figure><p>然后看了半天</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v10 = (bbb &lt;&lt; <span class="number">8</span>) + (aa &lt;&lt; <span class="number">16</span>) + cc;</span><br><span class="line">    basenum[v14] = base64_table[cc &amp; <span class="number">0x3F</span>];</span><br><span class="line">    basenum[v14 + <span class="number">1</span>] = base64_table[(v10 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">    basenum[v14 + <span class="number">2</span>] = base64_table[(v10 &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3F</span>];</span><br></pre></td></tr></table></figure><p>发现是倒序输出</p><p>那么就直接倒序解码：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">YLkY</span><br><span class="line">jX1v</span><br><span class="line"><span class="number">7</span>X32</span><br><span class="line"><span class="number">5E0</span>N</span><br><span class="line">gFoe</span><br><span class="line">KevU   T0_</span><br><span class="line"><span class="number">1</span>soe   Re_</span><br><span class="line">K8SX</span><br><span class="line">g4r9   <span class="keyword">ld</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">NSSCTF</span><span class="template-variable">&#123;Welc0me_T0_Re_World&#125;</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-3-Team-jump-by-jump-revenge"><a href="#NSSRound-3-Team-jump-by-jump-revenge" class="headerlink" title="[NSSRound#3 Team]jump_by_jump_revenge"></a>[NSSRound#3 Team]jump_by_jump_revenge</h2><p>打开后发现main函数不能反编译，感觉有花指令</p><p>然后nop掉两行代码</p><p>获得正确的main</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">36</span>]; <span class="comment">// [esp+E8h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_411037(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)Str1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">29</span>; ++i )</span><br><span class="line">    Str1[i] = (Str1[i] + Str1[(i * i + <span class="number">123</span>) % <span class="number">21</span>]) % <span class="number">96</span> + <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !j_strcmp(Str1, <span class="string">&quot;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&quot;</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;right!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;nope!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法要注意要从后面往前，因为前面的已经被覆盖了</p><p>非常抽象（TAT）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">last = <span class="string">&quot;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&quot;</span></span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">29</span></span><br><span class="line">c = [<span class="number">0</span>]*<span class="number">29</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    c[i] = (i * i + <span class="number">123</span>) % <span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#flag[i] = (flag[i] + flag[c[i]]) % 96 + 32</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; c[i]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            uuk = (<span class="built_in">ord</span>(last[i])-<span class="number">32</span>)+ j * <span class="number">96</span> -<span class="built_in">ord</span>(last[c[i]])</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">31</span>&lt; uuk &lt; <span class="number">127</span>):</span><br><span class="line">                flag[i]=uuk</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            uuk = (<span class="built_in">ord</span>(last[i])-<span class="number">32</span>)+ j * <span class="number">96</span> -flag[c[i]]</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">31</span>&lt; uuk &lt; <span class="number">127</span>):</span><br><span class="line">                flag[i]=uuk</span><br><span class="line">u = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    u += <span class="built_in">chr</span>(flag[i])</span><br><span class="line"><span class="built_in">print</span>(u) </span><br><span class="line"><span class="comment">#NSSCTF&#123;Jump_b9_jump!_r3V3n9e&#125;</span></span><br></pre></td></tr></table></figure><p>总结：逆向加密算法时要注意是递推式的还是映射式的</p><p>看了看大佬的wp，好简洁：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ciper=<span class="string">&#x27;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(len(ciper)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    tmp=ord(ciper[i])<span class="number">-32</span>-ord(ciper[(i*i+<span class="number">123</span>)%<span class="number">21</span>])</span><br><span class="line">    <span class="keyword">while</span>(tmp&lt;<span class="number">33</span>):</span><br><span class="line">        tmp+=<span class="number">96</span></span><br><span class="line">    ciper=ciper[:i]+chr(tmp)+ciper[i+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">print(ciper)</span><br></pre></td></tr></table></figure><h2 id="NSSRound-2-Able-findxenny"><a href="#NSSRound-2-Able-findxenny" class="headerlink" title="[NSSRound#2 Able]findxenny"></a>[NSSRound#2 Able]findxenny</h2><p>打开main函数看看，对输入的flag的检查的函数返回值是本身？？没理解暂时跳过，看到最后的检查有三个check</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">check1</span>(*v14) || (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">check2</span>(*v15) || (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">check3</span>(*v16) )</span><br><span class="line">   &#123;</span><br><span class="line">     v10 = <span class="built_in">sub_7FF72A641262</span>(std::cout, <span class="string">&quot;Try harder&quot;</span>);</span><br><span class="line">     std::ostream::<span class="keyword">operator</span>&lt;&lt;(v10, sub_7FF72A6411FE);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">     v9 = <span class="built_in">sub_7FF72A641262</span>(std::cout, <span class="string">&quot;I can&#x27;t believe my golden doge eye! we are comarde!&quot;</span>);</span><br><span class="line">     std::ostream::<span class="keyword">operator</span>&lt;&lt;(v9, sub_7FF72A6411FE);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>打开之后是一组数，通过交叉引用查看这个数据是通过函数生成的，但是没看懂。。。</p><p>看了wp发现这个是SMC，三个check是函数，双击进入对应地址，发现都是数据，这时要c加p组合再f5进入反编译结果检查的值就在这里</p><p><img src="https://s2.loli.net/2023/12/27/o82P7AFzawI6l49.png" alt="image-20231227230725460"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_278FBE97370</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x665F756F795F686F</span>i64 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_278FBEA01C0</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v3[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="type">int</span> v4[<span class="number">12</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">0</span>] = a1;</span><br><span class="line">  qmemcpy(v4, <span class="string">&quot;ound_our&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  v1 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">while</span> ( *((_BYTE *)v3 + v1) == *((_BYTE *)v4 + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v1 &gt;= <span class="number">8</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_278FBE999B4</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x796E6E33785F</span>i64 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接得出结果</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh_you_fou<span class="symbol">nd_our_x3</span><span class="symbol">nny</span></span><br></pre></td></tr></table></figure><p>总结，如果看到virtulprotect和数据当作地址，尝试把数据改成代码</p><h2 id="NSSCTF-2nd-Bytecode"><a href="#NSSCTF-2nd-Bytecode" class="headerlink" title="[NSSCTF 2nd]Bytecode"></a>[NSSCTF 2nd]Bytecode</h2><p>打开后，是py字节码</p><p>反编译一下</p><h1 id="安洵杯"><a href="#安洵杯" class="headerlink" title="安洵杯"></a>安洵杯</h1><h2 id="mobilego"><a href="#mobilego" class="headerlink" title="mobilego"></a>mobilego</h2><p>jadx打开mainactivity</p><p>模拟器中尝试输入，返回nonono</p><p>发现判断函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> m141lambda$onCreate$<span class="number">0</span>$comexamplemobilegoMainActivity(View v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Game.checkflag(<span class="built_in">this</span>.editText.getText().toString()).equals(getResources().getString(C0569R.string.cmp))) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;yes your flag is right&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;No No No&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C0569R中有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">string</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">app_name</span> <span class="operator">=</span> <span class="number">2131689500</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> <span class="number">2131689512</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的cmp是它的id值而不是它的具体值</p><p>所以动态调试找到终值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>这里使用了Game.checkflag来加密</p><p>所以先看这个</p><p>根据game</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> game;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> p004go.Seq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">_init</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">checkflag</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Seq.touch();</span><br><span class="line">        _init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Game</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">touch</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怀疑checkflag是通过lib加载的</p><p>打开ida，反汇编so文件</p><p>搜索checkflag</p><p>找到5个函数</p><p><img src="https://s2.loli.net/2023/12/28/Z4TbAVSxCklJaOB.png" alt="image-20231228150946781"></p><p>函数是这几个</p><p>好复杂，看不懂。。</p><p>看了看wp，发现一个一直没注意的东西，如果输入</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234567890</span>变为<span class="number">6143580927</span>，</span><br><span class="line">&#123;qwertyuiopasdfghjklzxcvbnm&#125;变为bhgsruc&#123;iojqkdpwnezyvxa&#125;lfmt</span><br></pre></td></tr></table></figure><p>说明这只是字符交换，交换之后是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">49021</span>&#125;<span class="number">5</span>f919038b440139g74b7Dc88330e5d&#123;<span class="number">6</span></span><br></pre></td></tr></table></figure><p>一共38个字符</p><p>那么尝试输入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t<span class="number">2</span>F<span class="number">7</span>GTglISYL<span class="symbol">nMzc6</span>CqhD<span class="symbol">N5</span>OdX<span class="number">8</span>wPjsKufVbE&#125;</span><br></pre></td></tr></table></figure><p>变为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC</span><br></pre></td></tr></table></figure><p>根据这个对应关系，逆向解出原来的关系</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d1 = <span class="string">&#x27;t2F7GTglISYLnMzc6CqhDN5OdX8wPjsKufVbE&#125;&#x27;</span></span><br><span class="line">d2 = <span class="string">&#x27;NVLjz&#125;ShscYPndXT62qlDFO5I8tgEKw7ufbMGC&#x27;</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="string">&#x27;49021&#125;5f919038b440139g74b7Dc88330e5d&#123;6&#x27;</span></span><br><span class="line">f1 = <span class="selector-attr">[0]</span>*<span class="number">38</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">        <span class="keyword">if</span> (d2<span class="selector-attr">[j]</span> == d1<span class="selector-attr">[i]</span>):</span><br><span class="line">            f1<span class="selector-attr">[i]</span> = f2<span class="selector-attr">[j]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&#x27;&#x27;</span>.join(f1)</span></span>)</span><br><span class="line">#D0g3&#123;<span class="number">4</span>c3b5903d11461f94478b7302980e958&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>猜测输入时尽量使用有规律的字符，更容易看清</p><p>如果不容易逆向可以尝试看或者猜</p><h2 id="你见过蓝色的小鲸鱼吗"><a href="#你见过蓝色的小鲸鱼吗" class="headerlink" title="你见过蓝色的小鲸鱼吗"></a>你见过蓝色的小鲸鱼吗</h2><p>打开文件后，发现是win程序，说明进入主窗口程序和判断函数不一定在一个位置 </p><p>所以打开后需要找到判断代码，搜索string无效</p><p>根据弹窗函数是MessageBox，尝试搜索</p><p>然后找到判断函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __thiscall <span class="title function_">lastcall</span><span class="params">(<span class="type">void</span> *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> wrong[<span class="number">28</span>]; <span class="comment">// [esp+D0h] [ebp-54h] BYREF</span></span><br><span class="line">  CHAR yes[<span class="number">20</span>]; <span class="comment">// [esp+ECh] [ebp-38h] BYREF</span></span><br><span class="line">  CHAR Caption[<span class="number">24</span>]; <span class="comment">// [esp+100h] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+118h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = this;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52102F);</span><br><span class="line">  <span class="built_in">strcpy</span>(Caption, <span class="string">&quot;tip&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(yes, <span class="string">&quot;You Get It!&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(wrong, <span class="string">&quot;Wrong user/passwd&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)v5 + <span class="number">2</span>) != *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    || j__memcmp(*(<span class="type">const</span> <span class="type">void</span> **)v5, *((<span class="type">const</span> <span class="type">void</span> **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>)) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, wrong, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, yes, Caption, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的v5+2和v5+3一定指向一个是输入（可能加密了），另一个说不准，因为有一个密码一个用户名</p><p>由于需要进入else分支，所以条件必须为假</p><p>即：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*((_DWORD *)v5 + <span class="number">2</span>) == *((_DWORD *)v5 + <span class="number">3</span>)</span><br><span class="line">    &amp;&amp; ！j__memcmp<span class="comment">(*(const void **)</span>v5, *((<span class="keyword">const</span> void **)v5 + <span class="number">1</span>), *((_DWORD *)v5 + <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>既然如此，需要找出能改变v5+2和+3的地址的函数（修改了this），向上找：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *v6; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *lpString; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> WindowTextLengthA; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  WindowTextLengthA = GetWindowTextLengthA(hWnd);</span><br><span class="line">  v10 = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  lpString = (CHAR *)j__malloc(__CFADD__(WindowTextLengthA, <span class="number">16</span>) ? <span class="number">-1</span> : WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(v10, <span class="number">16</span>) ? <span class="number">-1</span> : v10 + <span class="number">16</span>);</span><br><span class="line">  v6 = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( lpString &amp;&amp; result )</span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, lpString, WindowTextLengthA + <span class="number">16</span>);</span><br><span class="line">    GetWindowTextA(DlgItem, v6, v10 + <span class="number">16</span>);</span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);</span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;unk_51D38C, <span class="number">0x10</span>u);</span><br><span class="line">    sub_45126F(lpString, WindowTextLengthA, (<span class="type">int</span>)v6, v10);</span><br><span class="line">    j_lastcall(v4);</span><br><span class="line">    j__free(lpString);</span><br><span class="line">    j__free(v6);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动调可知：第一个是用户名，第二个是密码</p><p>化简：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [esp+10h] [ebp-154h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [esp+24h] [ebp-140h]</span></span><br><span class="line">  CHAR *password; <span class="comment">// [esp+114h] [ebp-50h]</span></span><br><span class="line">  CHAR *username; <span class="comment">// [esp+120h] [ebp-44h]</span></span><br><span class="line">  HWND DlgItem; <span class="comment">// [esp+12Ch] [ebp-38h]</span></span><br><span class="line">  HWND hWnd; <span class="comment">// [esp+138h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> lenOFpass; <span class="comment">// [esp+144h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> lenOFname; <span class="comment">// [esp+150h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_52105E);</span><br><span class="line">  hWnd = GetDlgItem((HWND)argc, <span class="number">1003</span>);</span><br><span class="line">  DlgItem = GetDlgItem((HWND)argc, <span class="number">1004</span>);</span><br><span class="line">  lenOFname = GetWindowTextLengthA(hWnd);</span><br><span class="line">  lenOFpass = GetWindowTextLengthA(DlgItem);</span><br><span class="line">  username = (CHAR *)j__malloc(__CFADD__(lenOFname, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFname + <span class="number">16</span>);</span><br><span class="line">  result = (<span class="type">int</span>)j__malloc(__CFADD__(lenOFpass, <span class="number">16</span>) ? <span class="number">-1</span> : lenOFpass + <span class="number">16</span>);</span><br><span class="line">  password = (CHAR *)result;</span><br><span class="line">  <span class="keyword">if</span> ( username &amp;&amp; result )                     <span class="comment">// 检查空指针</span></span><br><span class="line">  &#123;</span><br><span class="line">    GetWindowTextA(hWnd, username, lenOFname + <span class="number">16</span>);<span class="comment">// 用户名</span></span><br><span class="line">    GetWindowTextA(DlgItem, password, lenOFpass + <span class="number">16</span>);<span class="comment">// 密码</span></span><br><span class="line">    v5 = operator new(<span class="number">0x10</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_451B43(<span class="number">0x10</span>u);                        <span class="comment">// 分配内存</span></span><br><span class="line">      v4 = (<span class="type">void</span> *)sub_450CE3(v5);              <span class="comment">// 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_44FC2B(&amp;specialloc, <span class="number">0x10</span>u);             <span class="comment">// 初始化对象</span></span><br><span class="line">    encode(username, lenOFname, (<span class="type">int</span>)password, lenOFpass);</span><br><span class="line">    j_lastcall(v4);                             <span class="comment">// 判断</span></span><br><span class="line">    j__free(username);</span><br><span class="line">    j__free(password);</span><br><span class="line">    result = (<span class="type">int</span>)v4;</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      <span class="keyword">return</span> sub_44F77B(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面实在分析不出来了，里面有一些涉及c++的理解的</p><p>在后面有加密函数是blowfish</p><p>在cmp时下断点buf1就是最后的值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11A51F049550E2508F17E16CF1632B47</span><br></pre></td></tr></table></figure><p>写blowfish的解密：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文（以十六进制表示）</span></span><br><span class="line">ciphertext_hex = <span class="string">&quot;11A51F049550E2508F17E16CF1632B47&quot;</span></span><br><span class="line">ciphertext = binascii.unhexlify(ciphertext_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥（简单字符串）</span></span><br><span class="line">key = <span class="string">&quot;UzBtZTBuZV9EMGcz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Blowfish ECB模式的解密器</span></span><br><span class="line">cipher = Blowfish.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), Blowfish.MODE_ECB)</span><br><span class="line"></span><br><span class="line">plaintext_bytes = cipher.decrypt(ciphertext)</span><br><span class="line">plaintext = plaintext_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"><span class="comment">#QHRoZWJsdWVmMXNo</span></span><br></pre></td></tr></table></figure><p>这个答案是个base64，解密后是@thebluef1sh</p><p>（和蓝鲸的唯一关系吗。。。）</p><p>所以</p><p>D0g3{UzBtZTBuZV9EMGczQHRoZWJsdWVmMXNo}</p>]]></content>
    
    
    <summary type="html">本周做题记录</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>符号执行简介</title>
    <link href="https://www.pri87.vip/posts/54c80afd.html"/>
    <id>https://www.pri87.vip/posts/54c80afd.html</id>
    <published>2023-12-25T03:53:12.000Z</published>
    <updated>2024-01-03T03:30:07.550Z</updated>
    
    <content type="html"><![CDATA[<p>1</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p><strong>符号执行</strong>（英语：symbolic execution）是一种<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">计算机科学</a>领域的<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90">程序分析</a>技术，通过采用抽象的符号代替精确值作为程序输入变量，得出每个路径抽象的输出结果。这一技术在硬件、底层程序测试中有一定的应用，能够有效的发现程序中的漏洞。</p></blockquote><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>举例说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">  y = read();</span><br><span class="line">  z = y * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span>(z == <span class="number">12</span>)&#123;</span><br><span class="line">    fail();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码，如果实际执行，那么效果是：读入一个值到y，然后令z等于y的2倍。如果z等于6，调用fail(),反之打印ok。</p><p>对于符号执行来说，流程中不定的值会被赋为$\lambda$,一个符号值，这个值可以是任何值，在这个例子中，y会等于$\lambda$，z会等于2$\lambda$，当遇到分支时，会模拟执行所有分支，即当2$\lambda$等于12时调用fail(),当2$\lambda$不等于12时打印ok。在符号执行完所有的路径后，会计算出一个能完成这个路径的符号的变量实际值，该例中，调用fail()是$\lambda$&#x3D;&#x3D;6的结果，打印ok是$\lambda$！&#x3D;6时成立</p><p>上面这个过程中，每一个条件被叫做一个<code>约束</code>，每一个结果对应的所有约束被称为约束集，每一个结果经过的约束集被称为<code>路径</code>，路径可以由执行树表示。而符号执行的目的，就是让符号值遍历所有路径，找到所有对应的约束集。</p><p>为了完成以上工作，在整个流程中存在两个变量<code>符号状态</code>$\sigma$和<code>路径条件</code>$PC$，并根据读到的语句对约束进行添加（以下为例子）：</p><ul><li>若是输入语句，在$\sigma$中添加映射：$\sigma$&#x3D;{var$\rightarrow$$\lambda_0$},此时$\lambda_0$是var变量的符号值。</li><li>若是赋值语句，则把符号值代入计算，在$\sigma$中添加映射：$\sigma$&#x3D;{var$\rightarrow$$\lambda_0$,$var_2$$\rightarrow$$\lambda_0$+7}</li><li>当遇到条件语句if(e) a else b.PC会先更新为PC$\land$$\sigma$(e)表示then,然后创建PC$^&#96;$初始化为PC$\neg$$\land\sigma$(e)表示另一条路径</li><li>如果遇到exit，错误，前后约束矛盾，这一个路径会终止。</li></ul>]]></content>
    
    
    <summary type="html">简要介绍符号执行</summary>
    
    
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="概念" scheme="https://www.pri87.vip/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>第一支歌</title>
    <link href="https://www.pri87.vip/posts/465fc87e.html"/>
    <id>https://www.pri87.vip/posts/465fc87e.html</id>
    <published>2023-12-23T11:10:15.000Z</published>
    <updated>2023-12-23T12:15:54.620Z</updated>
    
    <content type="html"><![CDATA[<p>谁，的心灵</p><p>寒冷了重重风景</p><p>谁，的梦境</p><p>融化了大地阴翳</p><p>因一点雨滴，蝴蝶振翅而起</p><p>因熵增规律，从而渴望呼吸</p><p>因偏陂弯曲，于是祈求前进</p><p>一点一滴层层叠叠了时间的痕迹</p><p>一心一意夙夜忧叹是亡者的思虑</p><p>迷乱深林，远眺墓地</p><p>飘扬在十字底</p><p>忧郁气息，坠落谷底</p><p>几次血肉剥离</p><p>啊——是什么在呼唤</p><p>啊——是谁人在回答</p><p>啊——是什么在呼唤</p><p>啊——该如何去回答</p><p>所以浇灭吧</p><p>所以冷却吧</p><p>所以正好出发</p><p>抹杀了层层妄想</p><p>丢弃了梦幻的光</p><p>得到了唯一的哭泣</p><p>坚定了从前的理想</p><p>正是如此</p><p>绝望与漫长</p><p>但是我却</p><p>相信和祈祷</p><p>我绝对不会</p><p>甘愿自己是蓬蒿</p><p>我一定相信</p><p>雄鹰展翅后终会飞高</p>]]></content>
    
    
    <summary type="html">仅以此纪念过去的我</summary>
    
    
    
    <category term="随笔" scheme="https://www.pri87.vip/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="加油" scheme="https://www.pri87.vip/tags/%E5%8A%A0%E6%B2%B9/"/>
    
  </entry>
  
  <entry>
    <title>ollvm代码混淆</title>
    <link href="https://www.pri87.vip/posts/f1101757.html"/>
    <id>https://www.pri87.vip/posts/f1101757.html</id>
    <published>2023-12-21T11:39:55.000Z</published>
    <updated>2024-01-17T15:21:14.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>将高级语言编写的程序转换位目标语言(通常是机器语言)的程序叫做编译器.</code>这个转换的过程叫编译.不同于在执行解释性语言解释器总存在且逐行解释,编译器一次性把整个程序编译成二进制代码从而一般情况运行更快.但是由于解释器可以在不同平台上运作,兼容性,跨平台性更强.</p><h2 id="编译器构成"><a href="#编译器构成" class="headerlink" title="编译器构成"></a>编译器构成</h2><p>传统的编译器构成常分为三个部分:前端,优化器,后端.编译过程中,前端负责语法分析,将源代码转为其高级形式:抽象语法树(即把源代码的字符串转为内存中有意义的数据);优化器将经过前端处理的中间代码进行优化;后端将优化后的中间代码转换为对应的汇编语言.</p><h2 id="主要编译器"><a href="#主要编译器" class="headerlink" title="主要编译器"></a>主要编译器</h2><h3 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h3><blockquote><p>GCC（GNU Compiler Collection，GNU 编译器套装），是一套由 GNU 开发的编程语言编译器。GCC 原名为 GNU C 语言编译器，因为它原本只能处理 C语言。GCC 快速演进，变得可处理 C++、Fortran、Pascal、Objective-C、Java 以及 Ada 等他语言。</p></blockquote><h3 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h3><blockquote><p>LLVM （Low Level Virtual Machine，底层虚拟机)）提供了与编译器相关的支持，能够进行程序语言的编译期优化、链接优化、在线编译优化、代码生成。简而言之，可以作为多种编译器的后台来使用。</p><p>苹果公司一直使用 GCC 作为官方的编译器。GCC 作为一款开源的编译器，一直做得不错，但 Apple 对编译工具会提出更高的要求。原因主要有以下两点：</p><p>其一，是 Apple 对 Objective-C 语言（包括后来对 C 语言）新增很多特性，但 GCC 开发者并不买 Apple 的账——不给实现，因此索性后来两者分成两条分支分别开发，这也造成 Apple 的编译器版本远落后于 GCC 的官方版本。</p><p>其二，GCC 的代码耦合度太高，很难独立，而且越是后期的版本，代码质量越差，但 Apple 想做的很多功能（比如更好的 IDE 支持），需要模块化的方式来调用 GCC，但 GCC一直不给做。</p></blockquote><p>该编译器的特殊点在于中间表示(IR).这是前端将源代码生成为一种类机器码(各平台不同),并可以由LLVM后端解析的代码.用以扩展解释器的跨平台性.此前,一般是把源代码编译成C代码然后交由对应平台的C编译器编译成二进制文件(因为一般平台都有C编译器).在LLVM中,只需要把源文件编译成IR然后交由LLVM后端直接编译到对应平台.</p><h3 id="CLANG"><a href="#CLANG" class="headerlink" title="CLANG"></a>CLANG</h3><p>Clang 是 LLVM 的前端,于LLVM的后端组合可以当作另一个编译器,Clang是Apple研发的前端旨在代替GCC的前端</p><hr><h1 id="OLLVM"><a href="#OLLVM" class="headerlink" title="OLLVM"></a>OLLVM</h1><p>在LLVM基础上,Obfuscator-LLVM项目被研发了出来,通过三种混淆Pass(模块)完善代码的安全性.</p><ul><li>控制流平坦化</li><li>指令替换</li><li>伪造控制流(又叫混淆控制流)</li></ul><p>混淆Pass作用于IR,通过混淆IR使后端转换的文件被混淆,使逆向难度增大.</p><h2 id="控制流平坦化"><a href="#控制流平坦化" class="headerlink" title="控制流平坦化"></a>控制流平坦化</h2><p><img src="https://s2.loli.net/2023/12/21/RahxKGqA8B5OnCr.png" alt="104308x4cppkp5zjsfl8zy"></p><p>代码本身是真实块和retn块的组合,在进行控制流平坦化之后,程序的流程被分发器控制,所有真实块最后进行对标记的处理然后全部进入预处理器,根据标记的值不同由主分发器分发到副分发器再到真实块,从而混淆了整个执行流程,在反汇编视图中的特征是有很多while循环在后面有switch case语句.(以我的水平来看,控制流平坦化之后几乎不可读)</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>原始的条件一般会转化为CMOV条件传送指令,根据比较结果设置标记的值</p><h2 id="指令替换"><a href="#指令替换" class="headerlink" title="指令替换"></a>指令替换</h2><p>用多个表达式替换一个计算表达式</p><h3 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">原式子：</span><br><span class="line">a=b+c</span><br><span class="line">混淆后：</span><br><span class="line">a = b - (-c)</span><br><span class="line">a = -(-b + (-c))</span><br><span class="line">r = rand (); a = b + r; a = a + c; a = a - r</span><br><span class="line">r = rand (); a = b - r; a = a + b; a = a + r</span><br><span class="line"></span><br><span class="line">原式子：</span><br><span class="line">a = b-c</span><br><span class="line">混淆后：</span><br><span class="line">a = b + (-c)</span><br><span class="line">r = rand (); a = b + r; a = a - c; a = a - r</span><br><span class="line">r = rand (); a = b - r; a = a - c; a = a + r</span><br><span class="line"></span><br><span class="line">原指令：</span><br><span class="line">a = b &amp; c</span><br><span class="line">混淆后：</span><br><span class="line">a = (b ^ ~c) &amp; b</span><br><span class="line">a = ~(~a | ~b) &amp; (r | ~r)</span><br><span class="line"></span><br><span class="line">原指令：</span><br><span class="line">a = b | c</span><br><span class="line">混淆后：</span><br><span class="line">a = (b &amp; c) | (b ^ c)</span><br><span class="line">a = (((~a &amp; r) | (a &amp; ~r)) ^ ((~b &amp; r) | (b &amp; ~r))) | (~(~a | ~b) &amp; (r | ~r))</span><br><span class="line"></span><br><span class="line">原指令：</span><br><span class="line">a = a ^ b</span><br><span class="line">混淆后：</span><br><span class="line">a = (~a &amp; b) | (a &amp; ~b)</span><br><span class="line">a = ((~a &amp; r) | (a &amp; ~r)) ^ ((~b &amp; r) | (b &amp; ~r))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者</p><img src="https://ask.qcloudimg.com/http-save/yehe-8150619/9571bfa62d17b52593dff42fa4bd9a47.png" alt="[IDA F5 增强插件，还我源代码（一）-腾讯云开发者社区-腾讯云 (tencent.com)](https://cloud.tencent.com/developer/article/1845335)" /><h2 id="伪造控制流"><a href="#伪造控制流" class="headerlink" title="伪造控制流"></a>伪造控制流</h2><p>伪造控制流是在一开始设置一个变量&#x2F;表达式,这个变量&#x2F;表达式被称为<code>不透明谓词</code>,并为每一个基本块生成一个垃圾指令块,通过不透明谓词进行跳转到不同位置,但是实际上不会到达垃圾指令块处.</p><h3 id="特征图"><a href="#特征图" class="headerlink" title="特征图"></a>特征图</h3><img src="http://image.3001.net/images/20170323/14902545615701.png!small" alt="6.png" style="zoom:67%;" /><hr><h2 id="对于初学者的逆向方法"><a href="#对于初学者的逆向方法" class="headerlink" title="对于初学者的逆向方法"></a>对于初学者的逆向方法</h2><p>伪造控制流:见<a href="https://zhuanlan.zhihu.com/p/151853593">Hex-Rays: 十步杀一人，两步秒OLLVM-BCF(zhihu.com)</a></p><p>控制流平坦化和伪造控制流:见<a href="https://github.com/pcy190/deflat">pcy190&#x2F;deflat: Use angr to deflat the flat control flow. (github.com)</a></p><p>指令替换:见<a href="https://github.com/joydo/d810">joydo&#x2F;d810 (github.com)</a></p>]]></content>
    
    
    <summary type="html">本篇对ollvm进行简单介绍并对应反混淆方法</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="编译器" scheme="https://www.pri87.vip/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
    <category term="混淆" scheme="https://www.pri87.vip/tags/%E6%B7%B7%E6%B7%86/"/>
    
    <category term="反混淆" scheme="https://www.pri87.vip/tags/%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
  </entry>
  
  <entry>
    <title>目送</title>
    <link href="https://www.pri87.vip/posts/b6ee327c.html"/>
    <id>https://www.pri87.vip/posts/b6ee327c.html</id>
    <published>2023-12-20T14:05:46.000Z</published>
    <updated>2023-12-20T17:59:48.713Z</updated>
    
    <content type="html"><![CDATA[<p>–曾经，我仰望星空，然后知晓了光明的美好</p><p>​从下仰望着，不解确是存在的，从上俯瞰着，飘忽确是合理的。梦幻般的，也许并不是像镜中的爱丽丝，不是火柴中的美味，恰似我们的生活。超脱吧，远离吧，我所目送的，即是过往的，消融之后的，片甲不留的。也许唯一能看见的，是划开树丛的光，坚韧，有破坏性，把遮蔽“撕拉”一声划破，留下鸣笛，留下明月，留下我的悲怮。</p><p>​连续着昨天和明天的，是名为“今天”的存在，它是超越性的，今天的，而又不只是今天的，看着那道光，我也会想，昨天和明天又有什么不同呢，一边是左边，一边是右边，这里左转还是右转又有什么区别呢？</p><p>​回答我吧，如果有神的话：高歌一曲之后，一定会有掌声吗？莫比乌斯环一定不在一维吗？因果论是伪造的吧。平静，而又安详，富有创造性的格式，时而平稳时而波动，这也是可以知晓的吧。</p><p>​这样，算冷静吗？叽叽喳喳的世界可以劝我放松，却让我失去了痛苦的机会。冷静地在孤独中安详，莫不是是一种目送吧。平衡感从各种方向袭来，散乱的线有组织地组合，便能称为我的表达。析取出的，却是其它的情感吧！</p><p>​说到底，我根本不了解他，因而只能目送。我又有什么资格去道歉，安慰别人呢？还记得之前的时间，他几次来找过我，带过来一箱橘子，我拒绝了。原来飞舞盘旋着的，不仅是明天，还有未可知的过往。跟着偏离星空的星星，往往也会失去方向。盘旋，迂回着的，嘲笑的，观察着，只不过是幻梦，消耗着一页一页的纸张所到达的，也许只是童话的埋骨处。所以，我一直都是看着，目送只是我唯一的选择罢了。</p><p>​从未有人许给我们天堂，更不用妄想依靠信仰。碎裂的梦超越了天空，成为了星星，随时准备喷发，被人们寄托理想。</p><p>​好的，我理解了，这就是过去吧，然而未来确是更残酷的，破灭之后，还留下什么温存呢？能换掉烧完灰的眼睛吗？还是把眼睛洗一洗呢？忘了前面，忘了后面，留在现在的人一定不在现在吧。</p><p>​忧愁或是忧郁，景色总是一成不变的，况且我早已知晓。这样完成了任务也不会有什么改变，只期盼着倒是可行的，这就是仰望吧。跳过不合理，只追求合理，忽视现实，追求着，期盼着，这算是俯瞰吧。而又何时跳入水中，溺死之后又浮上来呢？</p><p>​我算是知道了，只有目送，只能目送，才能把自己刻在星空上，我所渴求的星空，即使回应我了，也只会把我变成悲伤之物吧，然而连牺牲自己，治愈他人的能力都没有，也只是徒劳吧。</p><p>——二零二三年十月二十一日，凌晨一点五十八分作。</p>]]></content>
    
    
    <summary type="html">一篇悼文</summary>
    
    
    
    <category term="随笔" scheme="https://www.pri87.vip/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>记一道题</title>
    <link href="https://www.pri87.vip/posts/2480ed19.html"/>
    <id>https://www.pri87.vip/posts/2480ed19.html</id>
    <published>2023-12-18T05:45:22.000Z</published>
    <updated>2024-01-17T07:49:13.368Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>info 本篇是为了复现了当时做题的步骤总结经验，所以会写的比较详细。如果您水平较高，只想看知识点可以直接跳到后面防止被气到脑溢血。同时本篇内容有错误的地方也请在评论区指出,感谢</p></div><details class="folding-tag" green><summary> 不重要的前言 </summary>              <div class='content'>              <p>这是我第一次参加强网杯，但是一道题都没做出来，看来还是要继续学习啊！两天啊两天，我一开始以为我可以解出来，但是失败了。后来经过询问和思考终于知道错在哪里了，所以写一篇记录一下解题过程和知识点。</p>              </div>            </details><p>那么开始吧！</p><h2 id="查看文件信息"><a href="#查看文件信息" class="headerlink" title="查看文件信息"></a>查看文件信息</h2><p><img src="https://s2.loli.net/2023/12/18/X9RCPSe2fQFygKq.png" alt="image-20231218091226849"></p><p>这一步是使用工具对文件头部进行分析，找出该文件的基本文件类型，为后面的反编译分析提供便利。</p><p>根据DIE的信息：</p><ol><li>普通64位PE文件</li><li>C或C++</li><li>没有加壳</li><li>注意在节区一行，有TLS字样是亮的，说明有TLS节(当时没注意)</li></ol><hr><h2 id="打开文件获取明显信息"><a href="#打开文件获取明显信息" class="headerlink" title="打开文件获取明显信息"></a>打开文件获取明显信息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">恭喜你进入了主函数里</span><br><span class="line">Please input your key:</span><br><span class="line"><span class="comment">//输入任意内容后自动退出</span></span><br></pre></td></tr></table></figure><p>这一步帮助我们定位关键代码</p><hr><h2 id="反编译器编译查看源代码"><a href="#反编译器编译查看源代码" class="headerlink" title="反编译器编译查看源代码"></a>反编译器编译查看源代码</h2><details class="folding-tag" ><summary> 化简后的主函数代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+20h] [rbp+0h] BYREF</span></span><br><span class="line">  _DWORD Q[<span class="number">15</span>]; <span class="comment">// [rsp+28h] [rbp+8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> k; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"></span><br><span class="line">  v3 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">34</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v3 = <span class="number">0xCCCCCCCC</span>;</span><br><span class="line">    v3 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  j___CheckForDebuggerJustMyCode((__int64)&amp;byte_7FF71EE840F4, (__int64)argv);</span><br><span class="line">  sub_7FF71EE711A9(byte_7FF71EE7AD78);</span><br><span class="line">  sub_7FF71EE7123F((__int64)aPleaseInputYou);</span><br><span class="line">  <span class="built_in">std</span>::istream::getline(<span class="built_in">std</span>::<span class="built_in">cin</span>, flag, <span class="number">33</span>i64);</span><br><span class="line">  <span class="keyword">if</span> ( j_strlen(flag) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(Q, <span class="number">0</span>, <span class="number">0x20</span>ui64);</span><br><span class="line">    bToD(Q, flag);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">      TEA(&amp;Q[<span class="number">2</span> * j], &amp;Q[<span class="number">2</span> * j + <span class="number">1</span>]);</span><br><span class="line">    dToB(Q, last);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; (<span class="type">int</span>)k &lt; <span class="number">32</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( check[k] != last[k] )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_7FF71EE7123F((__int64)aNoNoNo);</span><br><span class="line">        sub_7FF71EE711A9(<span class="string">&quot;%d&quot;</span>, k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_7FF71EE7123F((__int64)aYes);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF71EE711A9(<span class="string">&quot;Wrong Length!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>大致分为三个阶段：</p><ol><li>读入flag</li><li>校验flag</li><li>输出</li></ol><div class="tabs" id="main函数分析"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#main函数分析-1">读入flag</button></li><li class="tab"><button type="button" data-href="#main函数分析-2">校验flag</button></li><li class="tab"><button type="button" data-href="#main函数分析-3">输出</button></li><li class="tab"><button type="button" data-href="#main函数分析-4">其它</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="main函数分析-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub_7FF71EE711A9(byte_7FF71EE7AD78);</span><br><span class="line">sub_7FF71EE7123F((__int64)aPleaseInputYou);</span><br><span class="line"><span class="built_in">std</span>::istream::getline(<span class="built_in">std</span>::<span class="built_in">cin</span>, flag, <span class="number">33</span>i64);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="main函数分析-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( j_strlen(flag) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(Q, <span class="number">0</span>, <span class="number">0x20</span>ui64);</span><br><span class="line">    bToD(Q, flag);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">      TEA(&amp;Q[<span class="number">2</span> * j], &amp;Q[<span class="number">2</span> * j + <span class="number">1</span>]);</span><br><span class="line">    dToB(Q, last);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">32</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( check[k] != last[k] )</span><br><span class="line">      &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="main函数分析-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sub_7FF71EE7123F((__int64)aNoNoNo);</span><br><span class="line">sub_7FF71EE711A9(<span class="string">&quot;%d&quot;</span>, k);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    sub_7FF71EE7123F((__int64)aYes);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF71EE711A9(<span class="string">&quot;Wrong Length!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="main函数分析-4"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v3 = &amp;v5;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">34</span>i64; i; --i )</span><br><span class="line">&#123;</span><br><span class="line">  *(_DWORD *)v3 = <span class="number">0xCCCCCCCC</span>;</span><br><span class="line">  v3 += <span class="number">4</span>;</span><br><span class="line">&#125;<span class="comment">//看起来没有意义，在一开始初始化内存</span></span><br><span class="line">j___CheckForDebuggerJustMyCode((__int64)&amp;byte_7FF71EE840F4, (__int64)argv);<span class="comment">//看名字是反调试</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><p>读入和输出部分没什么好分析的，主要是检验flag部分，但是先试试可不可以调试，尝试之后果然不可以。那么开始分析检验flag部分：</p><div class="tabs" id="校验部分--1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#校验部分--1-1">长度检验</button></li><li class="tab"><button type="button" data-href="#校验部分--1-2">bToD函数</button></li><li class="tab"><button type="button" data-href="#校验部分--1-3">TEA函数</button></li><li class="tab"><button type="button" data-href="#校验部分--1-4">dToB函数</button></li><li class="tab"><button type="button" data-href="#校验部分--1-5">最终值检定</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="校验部分--1-1"><p>根据<wavy>if ( j_strlen(flag) &#x3D;&#x3D; 32 )</wavy></p><p>flag为32位</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="校验部分--1-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">bToD</span><span class="params">(_DWORD *Q, <span class="type">char</span> *flag)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">  <span class="type">int</span> a; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(byte_7FF71EE840F4);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">      a |= flag[<span class="number">4</span> * i + j] &lt;&lt; (<span class="number">8</span> * j);</span><br><span class="line">    Q[i] = a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到flag[4 * i + j]，立即想到把flag看作二维数组，一共8行一行4个元素，由于Q是DWORD型，flag是char型，让a异或等于一行flag(第i个要flag左移8i位)相当于让a等于一行flag反向排列组合的十六进制字符,那么Q也会变成8个元素刚好每个32位</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="校验部分--1-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">  TEA(&amp;Q[<span class="number">2</span> * j], &amp;Q[<span class="number">2</span> * j + <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">TEA</span><span class="params">(_DWORD *Q2j_, _DWORD *Q2j1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> det; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(byte_7FF71EE840F4);</span><br><span class="line">  det = <span class="number">0x90508D47</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">33</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      *Q2j_ += (((<span class="number">32</span> * *Q2j1) ^ (*Q2j1 &gt;&gt; <span class="number">4</span>)) + *Q2j1) ^ (det + tt[det &amp; <span class="number">3</span>]) ^ det;</span><br><span class="line">      *Q2j1 += (((<span class="number">32</span> * *Q2j_) ^ (*Q2j_ &gt;&gt; <span class="number">4</span>)) + *Q2j_) ^ (det + tt[(det &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">      det -= <span class="number">0x77BF7F99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tt数组的值是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tt              db 31h, 0B7h, 0B6h, 31h, 4 dup(0)</span><br></pre></td></tr></table></figure><p>这个函数是典型的TEA加密,它是分组加密,且使用异或,每一步都可逆,写出逆向代码就是:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b2; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> e = <span class="number">0x90508D47</span>;</span><br><span class="line">    <span class="type">int</span> tt[<span class="number">8</span>] = &#123; <span class="number">0x62</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">33</span>; ++j)</span><br><span class="line">            e -= <span class="number">0x77BF7F99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">33</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                e += <span class="number">0x77BF7F99</span>;</span><br><span class="line">                b2 -= (((b1 * <span class="number">32</span>) ^ (b1 &gt;&gt; <span class="number">4</span>)) + b1) ^ (e + tt[(e &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">                b1 -= (((<span class="number">32</span> * b2) ^ (b2 &gt;&gt; <span class="number">4</span>)) + b2) ^ (e + tt[e &amp; <span class="number">3</span>]) ^ e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;Q[k*<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>TEA基本解决步骤就是恢复det状态,相等循环长度,内容反向排列,加变减,减变加,异或不变</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="校验部分--1-4"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">dtob</span><span class="params">(_DWORD *Q, <span class="type">char</span> *last)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *p_spec; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> spec; <span class="comment">// [rsp+20h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> max; <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">  <span class="type">int</span> b[<span class="number">11</span>]; <span class="comment">// [rsp+48h] [rbp+28h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+74h] [rbp+54h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> a; <span class="comment">// [rsp+94h] [rbp+74h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+B4h] [rbp+94h]</span></span><br><span class="line"></span><br><span class="line">  p_spec = &amp;spec;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">46</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)p_spec = <span class="number">0xCCCCCCCC</span>;</span><br><span class="line">    p_spec += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  j___CheckForDebuggerJustMyCode((__int64)&amp;byte_7FF71EE840F4, (__int64)last);</span><br><span class="line">  b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  b[<span class="number">1</span>] = <span class="number">8</span>;</span><br><span class="line">  b[<span class="number">2</span>] = <span class="number">16</span>;</span><br><span class="line">  b[<span class="number">3</span>] = <span class="number">24</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    a = Q[j];</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k )</span><br><span class="line">      last[<span class="number">4</span> * j + k] = a &gt;&gt; b[k];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数把Qj右移的结果赋给last,把last看成二维char数组,,所以根据bk的值右移相当于每行逆向排序last</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="校验部分--1-5"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( k = <span class="number">0</span>; (<span class="type">int</span>)k &lt; <span class="number">32</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( check[k] != last[k] )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_7FF71EE7123F((__int64)aNoNoNo);</span><br><span class="line">        sub_7FF71EE711A9(<span class="string">&quot;%d&quot;</span>, k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_7FF71EE7123F((__int64)aYes);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.data:00007FF71EE7E040 check           db 0E0h, 0F3h, 21h, 96h, 97h, 0C7h, 0DEh, 89h, 9Bh, 0CAh</span><br><span class="line">.data:00007FF71EE7E040                                         ; DATA XREF: main_0+119↑o</span><br><span class="line">.data:00007FF71EE7E04A                 db 62h, 8Dh, 0B0h, 5Dh, 0FCh, 0D2h, 89h, 55h, 1Ch, 42h</span><br><span class="line">.data:00007FF71EE7E054                 db 50h, 0A8h, 76h, 9Bh, 0EAh, 0B2h, 0C6h, 2Fh, 7Ch, 0CFh</span><br><span class="line">.data:00007FF71EE7E05E                 db 11h, 0DEh</span><br></pre></td></tr></table></figure><p>所以只需要令last等于check然后逆向即可得到答案</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="写逆向代码然后得出答案"><a href="#写逆向代码然后得出答案" class="headerlink" title="写逆向代码然后得出答案"></a>写逆向代码然后得出答案</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_hex_groups</span>(<span class="params">hex_numbers, group_size</span>):</span><br><span class="line">    hex_numbers = hex_numbers.replace(<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    hex_numbers = [num.strip()[<span class="number">2</span>:] <span class="keyword">for</span> num <span class="keyword">in</span> hex_numbers]</span><br><span class="line">    grouped_numbers = [hex_numbers[i:i + group_size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_numbers), group_size)]</span><br><span class="line">    reversed_groups = [group[::-<span class="number">1</span>] <span class="keyword">for</span> group <span class="keyword">in</span> grouped_numbers]</span><br><span class="line">    reversed_hex = <span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join(group) <span class="keyword">for</span> group <span class="keyword">in</span> reversed_groups])</span><br><span class="line">    <span class="keyword">return</span> reversed_hex</span><br><span class="line"></span><br><span class="line">input_hex_numbers = <span class="built_in">input</span>(<span class="string">&quot;Enter hex numbers separated by commas (with optional surrounding brackets): &quot;</span>)</span><br><span class="line">input_group_size = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the group size: &quot;</span>))</span><br><span class="line"></span><br><span class="line">output = reverse_hex_groups(input_hex_numbers, input_group_size)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b2; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> e = <span class="number">0x90508D47</span>;</span><br><span class="line">    <span class="type">int</span> tt[<span class="number">8</span>] = &#123; <span class="number">0x62</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">33</span>; ++j)</span><br><span class="line">            e -= <span class="number">0x77BF7F99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">33</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                e += <span class="number">0x77BF7F99</span>;</span><br><span class="line">                b2 -= (((b1 * <span class="number">32</span>) ^ (b1 &gt;&gt; <span class="number">4</span>)) + b1) ^ (e + tt[(e &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">                b1 -= (((<span class="number">32</span> * b2) ^ (b2 &gt;&gt; <span class="number">4</span>)) + b2) ^ (e + tt[e &amp; <span class="number">3</span>]) ^ e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;Q[k*<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_hex</span>(<span class="params">hex_list</span>):</span><br><span class="line">    reversed_hex = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> hex_num <span class="keyword">in</span> hex_list:</span><br><span class="line">        <span class="comment"># 移除 &quot;0x&quot;，然后每两位反转</span></span><br><span class="line">        reversed_num = <span class="string">&quot;&quot;</span>.join(<span class="built_in">reversed</span>([hex_num[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(hex_num), <span class="number">2</span>)]))</span><br><span class="line">        reversed_hex += reversed_num</span><br><span class="line">    <span class="keyword">return</span> reversed_hex</span><br><span class="line"></span><br><span class="line">user_input = <span class="built_in">input</span>(<span class="string">&quot;请输入一组以0x开头，逗号间隔的十六进制数：&quot;</span>)</span><br><span class="line">hex_list = user_input.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(reverse_hex(hex_list))</span><br></pre></td></tr></table></figure><p>那么得出答案,答案是……???</p><p>第二步做完就发现问题了:</p><details class="folding-tag" ><summary> 错误的答案 </summary>              <div class='content'>              <img src="https://s2.loli.net/2023/12/18/I4YS71EPxvuor6k.png" alt="fake_answer" style="zoom:33%;" />              </div>            </details><p>这是为什么呢??</p><hr><h2 id="重回细节"><a href="#重回细节" class="headerlink" title="重回细节"></a>重回细节</h2><p>还有什么没有检查呢,只有反调试了吧……</p><p>那么打开j___CheckForDebuggerJustMyCode:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall _CheckForDebuggerJustMyCode(_BYTE *a1)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dword_7FF71EE7E9C4 )</span><br><span class="line">      GetCurrentThreadId();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个没有返回值的函数,并且唯一可能执行的副作用是GetCurrentThreadId(),然而这个函数是返回当前线程句柄,所以这个函数<code>只是名字叫检查debugger的函数</code>,实际上没有作用!!</p><p>但是我们调试的时候确实会闪退,那么我们再试一试</p><p>无论是下断点还是直接调试都会直接闪退,于是我尝试用remote windows debugger试一试点击调试:</p><details class="folding-tag" ><summary> 获得提示 </summary>              <div class='content'>              <img src="https://s2.loli.net/2023/12/18/ZILDtzsTNHidB2c.png" alt="image-20231218114708422" style="zoom: 67%;" />              </div>            </details><p>那么要是可以用这个提示把反调试破掉就可以调试了</p><p>在字符串列表查看这个文字,通过交叉引用来查看哪个函数使用了这个</p><p>找到了这个函数:</p><details class="folding-tag" ><summary> sub_7FF7AB081AE0 </summary>              <div class='content'>              <img src="https://s2.loli.net/2023/12/18/JOHgjAnfm2Vkqdo.png" alt="sub_7FF7AB081AE0" style="zoom:80%;" /><p>反编译之后是:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">sub_7FF7AB081AE0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  j___CheckForDebuggerJustMyCode(byte_7FF7AB0940F4);</span><br><span class="line">  sub_7FF7AB0811A9(<span class="string">&quot;SomeThing Go Wrong\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>那么继续找交叉引用,重复多次后定位到两个函数</p><details class="folding-tag" ><summary> 2个TlsCallBack </summary>              <div class='content'>              <p><img src="https://s2.loli.net/2023/12/18/zC6dkSba5EwcD97.png" alt="image-20231218121518231"></p>              </div>            </details><p>找到这两个函数</p><details class="folding-tag" ><summary> TlsCallBack </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">TlsCallback_0_0</span><span class="params">(__int64 a1, <span class="type">unsigned</span> __int16 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> *<span class="title">v2</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(byte_7FF7AB0940F4);</span><br><span class="line">  v2 = NtCurrentPeb();</span><br><span class="line">  LOBYTE(v2) = v2-&gt;BeingDebugged;</span><br><span class="line">  <span class="keyword">if</span> ( v2-&gt;BeingDebugged == <span class="number">4</span> )</span><br><span class="line">    sub_7FF7AB081AE0();</span><br><span class="line">  result = a2 &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (a2 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      j_oooo(off_7FF7AB08E008 + i + <span class="number">1</span>, a2);</span><br><span class="line">      result = (i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">TlsCallback_1_0</span><span class="params">(__int64 a1, <span class="type">char</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line"></span><br><span class="line">  j___CheckForDebuggerJustMyCode(byte_7FF7AB0940F4);</span><br><span class="line">  <span class="keyword">if</span> ( NtCurrentPeb()-&gt;BeingDebugged == <span class="number">1</span> )</span><br><span class="line">    sub_7FF7AB081AE0();</span><br><span class="line">  result = a2 &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (a2 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      *(off_7FF7AB08E060 + i + <span class="number">1</span>) ^= i;</span><br><span class="line">      result = (i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>这两个函数中的sub_7FF7AB081AE0()就是刚刚显示somethingwrong的函数,所以通过patch的方法(keypatch)把两个&#x3D;&#x3D;改成!&#x3D;这样就不会报错了,保存后打开patch过的文件,调试,果然没问题了,但是并没有解决刚刚的问题,所以继续执行看看哪里不对,于是发现:</p><p>tt数组和check数组的值被修改了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tt[<span class="number">8</span>] = &#123; <span class="number">0x62</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Q[<span class="number">8</span>] = &#123; <span class="number">0x9523F2E0</span>,<span class="number">0x8ED8C293</span>,<span class="number">0x8668C393</span>,<span class="number">0xDDF250BC</span>,<span class="number">0x510E4499</span>,<span class="number">0x8C60BD44</span>,<span class="number">0x34DCABF2</span>,<span class="number">0xC10FD260</span> &#125;;</span><br></pre></td></tr></table></figure><p>使用这个值去计算即可获得正确的答案</p><p>flag{W31com3_2_Th3_QwbS7_4nd_H4v3_Fun}</p><hr><h2 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h2><p>现在的问题是</p><p>为什么main函数没有调用那两个函数,但是那两个函数会先运行呢,这里要讲到之前提到的Tls节区了,TLS是线程局部储存的缩写,有一种函数叫TLS回调函数,这种函数在线程创建时和销毁时会执行一次</p><blockquote><p>TLS回调函数的设计目的是为了提供一种机制，使得每个线程都有自己的全局变量副本，从而避免了多线程同步问题。同时，它也提供了一种在每个线程的生命周期的开始和结束时执行特定代码的机制</p></blockquote><p>所以刚刚的反调试函数就是Tls函数存在特殊的节区Tls节区,详细内容可以看&lt;逆核&gt;p550.</p><p>然后再看看它是如何修改数据的</p><details class="folding-tag" ><summary> 修改处代码 </summary>              <div class='content'>              <div class="tabs" id="一共两处"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#一共两处-1">修改check</button></li><li class="tab"><button type="button" data-href="#一共两处-2">修改tt</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="一共两处-1"><img src="https://s2.loli.net/2023/12/18/FpAZCvdYrfTbEPh.png" alt="其一" style="zoom:67%;" /><p>off_14001E060在内存中的位置</p><img src="https://s2.loli.net/2023/12/18/Std51B2mhMzP6LX.png" alt="这里的值是一个偏移,偏移的位置是check上面一位" style="zoom:67%;" /><p>所以i+1就是check数组</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="一共两处-2"><img src="https://s2.loli.net/2023/12/18/E5zerdQqav2l9P7.png" alt="二号在这里" /><img src="https://s2.loli.net/2023/12/18/DVn6sjmElvOCUWe.png" alt="这个函数是上面的图里面的函数里面的函数" /><img src="https://s2.loli.net/2023/12/18/IuTFmv57Qjoe28s.png" alt="这里的方法一样但是看到偏移很抽象" /><p>这里是到1DFFF+1就是1E000就是tt的位置(我只能说很阴险)</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><p>实际上,这道题只要动态调试进入main就可以解决了</p><p>ok,完结撒花</p><hr><h2 id="另一种做法"><a href="#另一种做法" class="headerlink" title="另一种做法"></a>另一种做法</h2><p>ida有一种调试方式叫附加调试，即先打开文件，然后让ida附加到进程上，对于这道题来说，由于反调试代码只在Tls回调函数中，所以用附加调试可以直接跳过反调试，同时得到最后的值。</p>]]></content>
    
    
    <summary type="html">一道关于tls回调函数的题</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>刷题记录(1)</title>
    <link href="https://www.pri87.vip/posts/a45b8304.html"/>
    <id>https://www.pri87.vip/posts/a45b8304.html</id>
    <published>2023-12-17T12:14:32.000Z</published>
    <updated>2024-01-10T04:21:44.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h1><h2 id="NO-GFSJ0166"><a href="#NO-GFSJ0166" class="headerlink" title="NO.GFSJ0166"></a>NO.GFSJ0166</h2><p>先用die检查，发现是安卓，放到模拟器里面运行，要求一个密码</p><p>在mainactivity里面看到</p><p><img src="https://s2.loli.net/2023/12/17/qdvk6MLlsyTuPN5.png" alt="image-20231209203012868"></p><p>把这个字符串比较了，尝试输入这个字符串，得到</p><p><img src="https://s2.loli.net/2023/12/17/dFKuqcm4U8btaMe.png" alt="image-20231209203053644"></p><p>但是flag输入不对，在main中看到有flagactivity这个类，进去看看</p><p>有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlagActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(C0074R.layout.activity_flag);</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span>[] d = &#123;<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">119</span>, <span class="number">52</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">52</span>, <span class="number">95</span>, <span class="number">106</span>, <span class="number">52</span>, <span class="number">114</span>, <span class="number">95</span>, <span class="number">109</span>, <span class="number">121</span>, <span class="number">95</span>, <span class="number">100</span>, <span class="number">51</span>, <span class="number">120</span>, <span class="number">125</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">22</span>; i++) &#123;</span><br><span class="line">            flag = flag.concat(String.valueOf((<span class="type">char</span>) d[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">flagText</span> <span class="operator">=</span> (TextView) findViewById(C0074R.C0076id.flagText);</span><br><span class="line">        flagText.setText(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>感觉也没问题……最后发现flag不能加flag，直接w4nn4_j4r_my_d3x即可。</p><p>变换检验而不变换输入</p><hr><h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><h2 id="newstarctf2023reweek2：AndroDbgMe"><a href="#newstarctf2023reweek2：AndroDbgMe" class="headerlink" title="newstarctf2023reweek2：AndroDbgMe"></a>newstarctf2023reweek2：AndroDbgMe</h2><p>用jadx打开：</p><p><img src="https://s2.loli.net/2023/12/17/dptFY3Pk78Qq9V2.png" alt="image-20231210130908057"></p><p>这个字符串真是太抽象了！</p><p>用模拟器打开apk：</p><p><img src="https://s2.loli.net/2023/12/17/ikML3gJF2ofOP46.png" alt="image-20231210123339930"></p><p>发现它只是根据输入做变换然后输出，并没有校验？？？第一次遇到这种题</p><p>同时输出是以toast消息显示的，所以看看有没有和toast有关的：搜索后发现</p><p><img src="https://s2.loli.net/2023/12/17/yx6SLP1RB3N7AZk.png" alt="image-20231210123657945"></p><p>这个时候我发现静态分析太难了，看到题目名字：dbgme想到会不会要动态调试</p><p>（请教大佬安卓调试ing）</p><p>然后整理安卓调试流程如下：</p><p>前置流程：</p><ol><li>先下载adb（部分模拟器自带adb，在模拟器根目录）</li><li>打开模拟器的root和开发者模式，在开发者模式里面开usb调试</li></ol><p>然后：</p><ol><li>用adb连接模拟器：adb connect 127.0.0.1：xxxxx（xxxxx根据模拟器而定），不要关闭</li><li>打开jadx的debug功能，顶上的<img src="https://s2.loli.net/2023/12/17/KGJzYeBwxroNOgR.png" alt="image-20231210140413425" style="zoom:33%;" />，然后应该能看到下面的设备出现了各种线程</li><li>找到对应进程，开始调试</li></ol><p>然后来到这个界面，需要smali语法。。</p><p><img src="https://s2.loli.net/2023/12/17/YSyhVF8TGX6i2rz.png" alt="image-20231210140637472"></p><p>这时无论输入什么都会得到正确flag，原来是个教学题</p><p><img src="https://s2.loli.net/2023/12/17/RqtiSmFvVZcOC9a.png" alt="image-20231210140705572"></p><p>安卓调试</p><hr><h2 id="sctf2019-who-is-he"><a href="#sctf2019-who-is-he" class="headerlink" title="sctf2019 who is he"></a>sctf2019 who is he</h2><p>打开压缩包，发现是UNITY游戏，根据网上教程下载ILSpy分析assembly-CSharp.dll</p><p>找到<img src="https://s2.loli.net/2023/12/13/oQbqNEAxygl9aUV.png" alt="image-20231213165705074" style="zoom:25%;" />，打开函数查看：</p><img src="https://s2.loli.net/2023/12/13/etr1y6jVHvKFo9q.png" alt="image-20231213165841784" style="zoom:50%;" /><p>发现有一个初始字符串，一个加密函数，一个解密函数</p><p>start是空函数并且最后的onclick函数是检测输入是否正确：</p><p><img src="https://s2.loli.net/2023/12/13/Ns8qK23HGxnr1VS.png" alt="image-20231213170122579"></p><p>所以分析加密和解密的函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">Encrypt</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span>[] bytes = Encoding.Unicode.GetBytes(encryptKey);</span><br><span class="line"><span class="built_in">byte</span>[] bytes2 = Encoding.Unicode.GetBytes(str);</span><br><span class="line">DESCryptoServiceProvider dESCryptoServiceProvider = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">CryptoStream cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, dESCryptoServiceProvider.CreateEncryptor(bytes, bytes), CryptoStreamMode.Write);</span><br><span class="line">cryptoStream.Write(bytes2, <span class="number">0</span>, bytes2.Length);</span><br><span class="line">cryptoStream.FlushFinalBlock();</span><br><span class="line"><span class="built_in">byte</span>[] inArray = memoryStream.ToArray();</span><br><span class="line">cryptoStream.Close();</span><br><span class="line">memoryStream.Close();</span><br><span class="line"><span class="keyword">return</span> Convert.ToBase64String(inArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">Decrypt</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span>[] bytes = Encoding.Unicode.GetBytes(encryptKey);</span><br><span class="line"><span class="built_in">byte</span>[] array = Convert.FromBase64String(str);</span><br><span class="line">DESCryptoServiceProvider dESCryptoServiceProvider = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">CryptoStream cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, dESCryptoServiceProvider.CreateDecryptor(bytes, bytes), CryptoStreamMode.Write);</span><br><span class="line">cryptoStream.Write(array, <span class="number">0</span>, array.Length);</span><br><span class="line">cryptoStream.FlushFinalBlock();</span><br><span class="line"><span class="built_in">byte</span>[] bytes2 = memoryStream.ToArray();</span><br><span class="line">cryptoStream.Close();</span><br><span class="line">memoryStream.Close();</span><br><span class="line"><span class="keyword">return</span> Encoding.Unicode.GetString(bytes2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以加密和解密流程对应，加密是先DES然后base64，解密相反，那么根据观察str是加密后的字符，因此把解密函数和字符串，密钥放在一个类里面计算：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> encryptKey = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> EncryptData = <span class="string">&quot;1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA==&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">Decrypt</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = Encoding.Unicode.GetBytes(encryptKey);</span><br><span class="line">            <span class="built_in">byte</span>[] array = Convert.FromBase64String(str);</span><br><span class="line">            DESCryptoServiceProvider dESCryptoServiceProvider = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            CryptoStream cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, dESCryptoServiceProvider.CreateDecryptor(bytes, bytes), CryptoStreamMode.Write);</span><br><span class="line">            cryptoStream.Write(array, <span class="number">0</span>, array.Length);</span><br><span class="line">            cryptoStream.FlushFinalBlock();</span><br><span class="line">            <span class="built_in">byte</span>[] bytes2 = memoryStream.ToArray();</span><br><span class="line">            cryptoStream.Close();</span><br><span class="line">            memoryStream.Close();</span><br><span class="line">            <span class="keyword">return</span> Encoding.Unicode.GetString(bytes2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyClass myClass = <span class="keyword">new</span> MyClass();</span><br><span class="line">        <span class="built_in">string</span> decryptedData = myClass.Decrypt(myClass.EncryptData);</span><br><span class="line">        Console.WriteLine(decryptedData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#He_P1ay_Basketball_Very_We11!Hahahahaha!</span></span><br></pre></td></tr></table></figure><p>问题来了，结果不对，不是很能理解，去网上看wping</p><p>最后跟着教程做，一直都做不出来，在大佬指点之下，发现是因为电脑报毒把某个文件删了还不提醒，找到那个文件：，打开发现是二进制文件，放进die分析，是pe文件，加了UPX壳，用upx的官方程序脱壳</p><p>打开之后</p><p><img src="https://s2.loli.net/2023/12/13/9t4dPNYcOGzvWSq.png" alt="image-20231213231111411"></p><p>大致是加载了一个dll</p><p>终于点按钮有提示了：<img src="https://s2.loli.net/2023/12/13/hCZbXYD5cVGIT1K.png" alt="image-20231213231322058" style="zoom:25%;" /></p><p>根据网上博客，CE分析mono</p><p><img src="https://s2.loli.net/2023/12/13/pif5YAZkJ91rMOE.png" alt="image-20231213231845210"></p><p>发现和之前那个很类似，并且这个dll在恢复报毒文件之后才出现</p><p>用mono分析功能把main放到窗口下方，按按钮</p><p><img src="https://s2.loli.net/2023/12/13/LGKcgE3eMAdkuZW.png" alt="image-20231213233408953"></p><p><img src="https://s2.loli.net/2023/12/13/JkYizLnvWXbeK3S.png" alt="image-20231213233422155"></p><p>得到密钥test，然后<code>勾选上UTF-16</code>搜Emmmm提示词，发现出现了两次，第二次的位置打开内存窗口：</p><p><img src="https://s2.loli.net/2023/12/15/cNLMb7mnWEIsRwz.png" alt="image-20231215103737650"></p><p>这是第二组密文，下面也有密钥test，复制下来，解密</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">785A57445A614B4568574E4D43626947595042496C59332B61726F7A4F397A6F6E7772594C69564C346E6A53657A3252594D32577773476E736E6A43446E4873374E34336146764E4535346E6F53616450394638654570765473355150472B4B4C305444452F34306E62553D</span><br></pre></td></tr></table></figure><p>转为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">xZWDZaKEhWNMCbiGYPBIlY3</span>+arozO9zonwrYLiVL4njSez2RYM2WwsGnsnjCDnHs7N43aFvNE54noSadP9F8eEpvTs5QPG+KL0TDE/<span class="number">40</span>nbU=</span><br></pre></td></tr></table></figure><p>用密钥test和刚刚的算法得</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">She_P1ay_Black_Hole_Very_Wel1!LOL!XD!</span><br></pre></td></tr></table></figure><p>c#，假答案，DES，base64，CE，mono</p><hr><h1 id="NSSCTF"><a href="#NSSCTF" class="headerlink" title="NSSCTF"></a>NSSCTF</h1><h2 id="wordy"><a href="#wordy" class="headerlink" title="wordy"></a>wordy</h2><p>打开ida后发现没有main函数，start里面标红，怀疑有花指令，到汇编中查找main，用<code>alt+t</code>键，找到后：</p><p><img src="https://s2.loli.net/2023/12/15/542PxaSHyIoe3df.png" alt="image-20231215105547630"></p><p>发现确实是花指令，先u，再跳一个数据c，多来几次，就会发现垃圾数据是0EBh，同时每两个eb之间都有putchar指令输出一个字符，由于0XEB是不可见的所以，打开hex窗口只会留下putchar的字符：</p><p><img src="https://s2.loli.net/2023/12/15/MOCnBqmFXe4tGZu.png" alt="image-20231215110118700"></p><p>得flag:GFCTF{u_are2wordy}</p><p>花指令，hex，脚本</p><hr><h1 id="ganctf-2023"><a href="#ganctf-2023" class="headerlink" title="ganctf 2023"></a>ganctf 2023</h1><h2 id="py-python"><a href="#py-python" class="headerlink" title="py?python!"></a>py?python!</h2><p>打开文件：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    encrypted_data = []</span><br><span class="line">    key_len = <span class="built_in">len</span>(key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        encrypted_data.append(<span class="built_in">ord</span>(data[i]) ^ <span class="built_in">ord</span>(key[i % key_len]))</span><br><span class="line">    <span class="keyword">return</span> encrypted_data[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">19</span>, <span class="number">78</span>,<span class="number">6</span> , <span class="number">68</span>, <span class="number">17</span>, <span class="number">36</span>, <span class="number">23</span>,<span class="number">63</span>, <span class="number">55</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">15</span>, <span class="number">42</span>, <span class="number">32</span>, <span class="number">88</span>, <span class="number">51</span>, <span class="number">38</span>, <span class="number">41</span>, <span class="number">95</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">71</span>, <span class="number">43</span>, <span class="number">15</span>, <span class="number">93</span>, <span class="number">29</span>, <span class="number">40</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">96</span></span><br><span class="line">, <span class="number">55</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">21</span>,<span class="number">54</span>]</span><br><span class="line">key = <span class="string">&quot;Python&quot;</span></span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;请输入flag&quot;</span>)</span><br><span class="line">encrypted_data = encrypt(flag, key)</span><br><span class="line"><span class="keyword">if</span> encrypted_data == data:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Good!You find it&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sorry,Try again&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很简单的加密算法，直接逆向即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">19</span>, <span class="number">78</span>,<span class="number">6</span> , <span class="number">68</span>, <span class="number">17</span>, <span class="number">36</span>, <span class="number">23</span>,<span class="number">63</span>, <span class="number">55</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">15</span>, <span class="number">42</span>, <span class="number">32</span>, <span class="number">88</span>, <span class="number">51</span>, <span class="number">38</span>, <span class="number">41</span>, <span class="number">95</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">71</span>, <span class="number">43</span>, <span class="number">15</span>, <span class="number">93</span>, <span class="number">29</span>, <span class="number">40</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">96</span></span><br><span class="line">, <span class="number">55</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">21</span>,<span class="number">54</span>]</span><br><span class="line">key = <span class="string">&quot;Python&quot;</span></span><br><span class="line">last =last[::-<span class="number">1</span>]</span><br><span class="line">be = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">        be += (<span class="built_in">chr</span>((last[i]) ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])))</span><br><span class="line"><span class="built_in">print</span>(be)</span><br><span class="line"><span class="comment">#flag&#123;Y0u_@r3_R3@l1y_G0OD_@t_Pyth0n!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Ezmaze"><a href="#Ezmaze" class="headerlink" title="Ezmaze"></a>Ezmaze</h2><p>打开ida，检查main，化简后大概是：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="function">__fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> path[<span class="number">112</span>]; <span class="comment">// [rsp+20h] [rbp-B0h] BYREF</span></span><br><span class="line">  __int64 tab[<span class="number">5</span>]; <span class="comment">// [rsp+90h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// [rsp+B8h] [rbp-18h]</span></span><br><span class="line">  __int64 check; <span class="comment">// [rsp+BCh] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> b; <span class="comment">// [rsp+C4h] [rbp-Ch]</span></span><br><span class="line">  __int64 a; <span class="comment">// [rsp+C8h] [rbp-8h]</span></span><br><span class="line"><span class="keyword">int</span> ch1,ch2;</span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  qmemcpy(tab, <span class="string">&quot;@01111010110011110011110100#01&quot;</span>, <span class="number">30</span>);</span><br><span class="line">  a = <span class="number">0</span>i64;</span><br><span class="line">  <span class="comment">//puts(&amp;Buffer);                                // 可怜的猫猫在迷宫里迷路了,你能找到它在哪吗？</span></span><br><span class="line">  <span class="comment">//puts(&amp;byte_40402C);                           // 请输入路径,找到猫猫</span></span><br><span class="line">  gets(path);</span><br><span class="line">  len = strlen(path);</span><br><span class="line">  b = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    check = a;</span><br><span class="line">    c = path[b];</span><br><span class="line">    <span class="keyword">if</span> ( c == <span class="number">100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ch2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">( c &gt; <span class="number">100</span> )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ( c == <span class="number">115</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        ch1++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">( c == <span class="number">119</span> )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">        ch1--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">( c == <span class="number">97</span> )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      ch2--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( ++b &gt; len</span><br><span class="line">      || ch1 &gt; <span class="number">5</span></span><br><span class="line">      || (unsigned <span class="keyword">int</span>)check &gt; <span class="number">4</span></span><br><span class="line">      || (tab[<span class="number">5</span>*ch1+ch2]) != <span class="string">&#x27;0&#x27;</span></span><br><span class="line">      &amp;&amp; (tab[<span class="number">5</span>*ch1+ch2]) != <span class="string">&#x27;@&#x27;</span></span><br><span class="line">      &amp;&amp; (tab[<span class="number">5</span>*ch1+ch2]) != <span class="string">&#x27;#&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a = check;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *((_BYTE *)tab + <span class="number">5</span> * HIDWORD(a) + (<span class="keyword">int</span>)a) == <span class="string">&#x27;#&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//puts(&amp;byte_404040);</span></span><br><span class="line">    <span class="comment">//system(&quot;Pause&quot;);                            // 成功</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//printf(&amp;Format);                            // 失败</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//system(&quot;Pause&quot;);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析check的值可知它的高32位储存纵方向数值，低32位储存横方向数值，a,w为减sd为加。跳出循环条件表明至少s5次，d4次，把tab改成迷宫：</p><blockquote><p>@0111</p><p>10101</p><p>10011</p><p>11001</p><p>11101</p><p>00#01</p></blockquote><p>可得@为开始位置，#为末位置</p><p>dssdsdssa即可（但是d也没有4次呀？奇怪）</p><p>flag{dssdsdssa}</p><p>逆向分析，正向求解</p><hr><h2 id="easy-xor"><a href="#easy-xor" class="headerlink" title="easy_xor"></a>easy_xor</h2><p>这个题也很简单，ida分析后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">_main();</span><br><span class="line">*(_QWORD *)enc = <span class="number">0x6E6E717F64636D66</span>i64;</span><br><span class="line"><span class="built_in">strcpy</span>(&amp;enc[<span class="number">8</span>], <span class="string">&quot;&#123;V;xSLQi|pun&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the flag: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(flag) != <span class="number">20</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Invalid flag length! Exiting...&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(flag); ++j )</span><br><span class="line">  flag[j] ^= j;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(flag, enc) )</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>直接动态调试找enc的地址异或</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(get_wide_byte(<span class="number">0x62FDF0</span>+i)^i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)] ))</span><br><span class="line"><span class="comment">#flag&#123;this_1s_A_flag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="easy-upx"><a href="#easy-upx" class="headerlink" title="easy_upx"></a>easy_upx</h2><p>这个在upx官方的脱壳软件脱壳后打开main转换字符串即可，或直接打开hex视图：</p><p>flag{UXP_yyds!}</p><p>UPX，hex</p><hr><h2 id="try-reverse-it"><a href="#try-reverse-it" class="headerlink" title="try_reverse_it"></a>try_reverse_it</h2><p>有一个upx壳，先脱掉，然后进入main查看：</p><p>发现是rc4加密，之前没有学过，所以现学：</p><p>整个加密分为三个阶段：</p><ul><li>初始化，S盒初始化为顺序线性列表，用已知的key填满T盒如果key长度小于T盒大小，就一直重复直到填满</li><li>混乱化：在循环中，把第i位的S和一个由这个S和T盒生成的算法计算出的S[j]交换</li><li>用混乱化之后的S盒和flag进行加密i次每次取1位,由于rc4加密是对称的所以一般用异或,同时每次加密会同时交换由S[i]变换的来的S[j]交换,所以每次加密都是在上一次基础上完成的</li></ul><p>而这道题也只是把每一位flag和那一位计算的S异或,所以完全可以顺着先把S盒求出来,根据异或的性质直接把最后的值异或得到答案</p><p>补充一个细节:之前我写的脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    t.join(<span class="built_in">chr</span>(flag[i]))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    t=<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(flag[i]))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>这两个都是错误的,第一个的t.join(chr(flag[i]))意思是返回<code>把后方传入的列表变成一个字符串间隔字符是t</code>的字符串,但是我并没有用字符串接收这个返回值,导致没有改变</p><p>第二个是因为’’.join每次都会初始化t,改成+&#x3D;就好了</p><p>exp:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">0x6C</span>, <span class="number">0x65</span>, <span class="number">0x74</span>, <span class="number">0x27</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x72</span>, <span class="number">0x65</span>, </span><br><span class="line">       <span class="number">0x76</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x69</span>, <span class="number">0x74</span>]</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x6C</span>, <span class="number">0xF8</span>, <span class="number">0x90</span>, <span class="number">0xFF</span>, <span class="number">0x8B</span>, <span class="number">0x18</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0x76</span>, <span class="number">0xB5</span>, <span class="number">0xFB</span>, <span class="number">0x50</span>, <span class="number">0xF5</span>, </span><br><span class="line">        <span class="number">0x2C</span>, <span class="number">0x5F</span>, <span class="number">0xF3</span>, <span class="number">0x10</span>, <span class="number">0xCB</span>, <span class="number">0x3E</span>, </span><br><span class="line">        <span class="number">0xEA</span>, <span class="number">0x9A</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x2D</span>, <span class="number">0x4F</span>, </span><br><span class="line">        <span class="number">0xCC</span>, <span class="number">0x8F</span>, <span class="number">0x21</span>, <span class="number">0x29</span>, <span class="number">0x17</span>, <span class="number">0x06</span>, </span><br><span class="line">        <span class="number">0xCA</span>, <span class="number">0x67</span>]</span><br><span class="line"><span class="comment">#初始化T,S</span></span><br><span class="line">S = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">256</span>):</span><br><span class="line">    S[<span class="number">255</span>-i] = i</span><br><span class="line">T = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    T[i] = key[i % <span class="built_in">len</span>(key)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#打乱S</span></span><br><span class="line">a = b = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    a = S[i]</span><br><span class="line">    b = (a+T[i]+b) % <span class="number">256</span></span><br><span class="line">    S[i] = S[b]</span><br><span class="line">    S[b] = a</span><br><span class="line"><span class="comment">#S盒初始化成功,异或算法相同，所以相当于再来一次</span></span><br><span class="line">m = n = <span class="number">0</span></span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">32</span>):</span><br><span class="line">    m = (m + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    k = S[m]</span><br><span class="line">    n = (k+n) % <span class="number">256</span></span><br><span class="line">    S[m] = S[n]</span><br><span class="line">    S[n] = k</span><br><span class="line">    flag[i] = last[i] ^ S[(k + S[m]) % <span class="number">256</span>]</span><br><span class="line">t =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    t +=<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(flag[i]))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment">#flag&#123;Y0u_5eem_1ike4pro_revers3r&#125;</span></span><br></pre></td></tr></table></figure><p>UPX，RC4</p><h2 id="BrownFox"><a href="#BrownFox" class="headerlink" title="BrownFox"></a>BrownFox</h2><p>ida直接打开,先动态调试把improvefox函数之后的fox拿出来,再把最后的检测函数拿出来,变换全在tofox里面所以详细看tofox,化简之后:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i != num;i++ )</span><br><span class="line">  &#123;</span><br><span class="line">    k = flag[i] &gt;&gt; <span class="number">3</span>;<span class="comment">//k最大15得前4位</span></span><br><span class="line">    check[<span class="number">2</span> * i] = fox[flag[i] &amp; <span class="number">7</span>];<span class="comment">//最大7得后三位</span></span><br><span class="line">    check[<span class="number">2</span> * i+ <span class="number">1</span>] = fox[k]</span><br><span class="line">  &#125;</span><br><span class="line">check += <span class="number">2</span> * num;</span><br><span class="line">*check = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这里的变换是非连续性的所以k&lt;&lt;3+check[2*i]在fox中的位置可得flag</p><p>注:fox一开始是有重复字符的,但是在improvefox之后没有了</p><p>最后又被坑了,注意python中位移优先度低于+-,异或也是</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fox = [<span class="number">0x41</span>, <span class="number">0x71</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x63</span>, <span class="number">0x6B</span>, <span class="number">0x62</span>, <span class="number">0x72</span>, </span><br><span class="line">       <span class="number">0x6F</span>, <span class="number">0x77</span>, <span class="number">0x6E</span>, <span class="number">0x66</span>, <span class="number">0x30</span>, <span class="number">0x78</span>, <span class="number">0x6A</span>, <span class="number">0x31</span>, </span><br><span class="line">       <span class="number">0x6D</span>, <span class="number">0x70</span>, <span class="number">0x73</span>, <span class="number">0x32</span>, <span class="number">0x76</span>, <span class="number">0x65</span>, <span class="number">0x33</span>, <span class="number">0x74</span>, </span><br><span class="line">       <span class="number">0x68</span>, <span class="number">0x34</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x7A</span>, <span class="number">0x79</span>, <span class="number">0x64</span>, <span class="number">0x35</span>, </span><br><span class="line">       <span class="number">0x67</span>]</span><br><span class="line">sng = [<span class="number">0x62</span>, <span class="number">0x30</span>, <span class="number">0x63</span>, <span class="number">0x78</span>, <span class="number">0x71</span>, <span class="number">0x30</span>, <span class="number">0x72</span>, <span class="number">0x30</span>, </span><br><span class="line">       <span class="number">0x69</span>, <span class="number">0x31</span>, <span class="number">0x71</span>, <span class="number">0x66</span>, <span class="number">0x41</span>, <span class="number">0x62</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, </span><br><span class="line">       <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x69</span>, <span class="number">0x78</span>, <span class="number">0x62</span>, <span class="number">0x78</span>, <span class="number">0x72</span>, <span class="number">0x78</span>, </span><br><span class="line">       <span class="number">0x72</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6F</span>, <span class="number">0x41</span>, <span class="number">0x6F</span>, </span><br><span class="line">       <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x30</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x62</span>, <span class="number">0x6A</span>, </span><br><span class="line">       <span class="number">0x6B</span>, <span class="number">0x30</span>, <span class="number">0x75</span>, <span class="number">0x6A</span>, <span class="number">0x71</span>, <span class="number">0x31</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, </span><br><span class="line">       <span class="number">0x72</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x30</span>, <span class="number">0x71</span>, <span class="number">0x62</span>, <span class="number">0x71</span>, <span class="number">0x62</span>, </span><br><span class="line">       <span class="number">0x6B</span>, <span class="number">0x31</span>, <span class="number">0x41</span>, <span class="number">0x41</span>] <span class="comment">#60个值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">up</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="built_in">len</span>(fox)):</span><br><span class="line">        <span class="keyword">if</span> (fox[i] == x):</span><br><span class="line">            <span class="keyword">return</span> i </span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>,<span class="number">60</span>,<span class="number">2</span>):</span><br><span class="line">    t = up(sng[i])+((up(sng[i+<span class="number">1</span>]))&lt;&lt;<span class="number">3</span>)</span><br><span class="line">    flag += <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;Y0u_know_B@se_very_we11&#125;</span></span><br></pre></td></tr></table></figure><p>算法，c语言</p><hr><h2 id="find-flag"><a href="#find-flag" class="headerlink" title="find_flag"></a>find_flag</h2><p>先看一下程序：发现会输入两次flag，不知道什么用意</p><p>还是用ida打开，在判断函数之前看到了加密函数根据1640531527可知这是一个TAE加密，但是由于知道有输入了两个flag先看看之前的flag1怎么样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_401AB0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !strnum )</span><br><span class="line">  &#123;</span><br><span class="line">    strnum = <span class="number">1</span>;</span><br><span class="line">    check1();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">check1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> (**pfunc)(<span class="type">void</span>); <span class="comment">// rbx</span></span><br><span class="line">  __int64 *v1; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; bigq[i + <span class="number">1</span>]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i )</span><br><span class="line">  &#123;</span><br><span class="line">    pfunc = (<span class="type">void</span> (**)(<span class="type">void</span>))&amp;bigq[i];</span><br><span class="line">    v1 = &amp;bigq[i - (<span class="type">unsigned</span> __int64)(i - <span class="number">1</span>) - <span class="number">1</span>];<span class="comment">//就是首元素</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      (*pfunc--)();</span><br><span class="line">    <span class="keyword">while</span> ( pfunc != (<span class="type">void</span> (**)(<span class="type">void</span>))v1 );</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401510((<span class="type">int</span> (__cdecl *)())sub_401A00);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到check1中有一个指向函数指针的指针这个指针指向了bigq的地址，而打开可以看到bigq的地址后面跟着两个函数的地址，所以当pfunc这个指针指向这个地址的时候，它解引用就是这个函数地址在(*pfunc–)();处调用并减小，可以把bigq当作一个函数指针数组</p><p>注意for后面有;所以只增加了i，后面不在循环里，所以相当于从后向前执行那两个函数,那么先看那两个函数，第一个调用的函数(这个是func2)是一个退出函数？？暂时不管。</p><p>打开func1：</p><p>看到很多数组,在读取时动态调试下断点,发现这里是真的检查处</p><p>真的检查函数是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">4</span>; ++k )</span><br><span class="line">    sub_401550(&amp;flag1[<span class="number">2</span> * k]);</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(flag1, &amp;v3[<span class="number">3</span>], <span class="number">0x28</span>ui64) )</span><br><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_401550</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> e; <span class="comment">// [rsp+34h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> b2; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> b1; <span class="comment">// [rsp+3Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  b1 = *a1;</span><br><span class="line">  b2 = a1[<span class="number">1</span>];</span><br><span class="line">  e = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    e -= <span class="number">1640531527</span>;</span><br><span class="line">    b1 += (b2 + e) ^ (<span class="number">16</span> * b2 + <span class="number">137</span>) ^ ((b2 &gt;&gt; <span class="number">5</span>) + <span class="number">118</span>);</span><br><span class="line">    b2 += (b1 + e) ^ (<span class="number">16</span> * b1 + <span class="number">84</span>) ^ ((b1 &gt;&gt; <span class="number">5</span>) + <span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = b1;</span><br><span class="line">  a1[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是一个TEA</p><p>注意此处读取前40个值且取test数组的第四位开始,而flag是char类型,后面转成unint类型,鉴于不好python和c大数计算有差别,所以用c写:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b2; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b1; </span><br><span class="line">    b1 = *a;</span><br><span class="line">    b2 = a[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        e -= <span class="number">1640531527</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x1f</span>; ++i) &#123;</span><br><span class="line">        b2 -= (b1 + e) ^ (<span class="number">16</span> * b1 + <span class="number">84</span>) ^ ((b1 &gt;&gt; <span class="number">5</span>) + <span class="number">50</span>);</span><br><span class="line">        b1 -= (b2 + e) ^ (<span class="number">16</span> * b2 + <span class="number">137</span>) ^ ((b2 &gt;&gt; <span class="number">5</span>) + <span class="number">118</span>);</span><br><span class="line">        e += <span class="number">1640531527</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *a = b1;</span><br><span class="line">    a[<span class="number">1</span>] = b2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> data[<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="number">0x9F1F796B</span>, <span class="number">0xE4AF7378</span>, <span class="number">0x72FCDFD5</span>, <span class="number">0x4A57FFE0</span>, <span class="number">0x1672BA07</span>, <span class="number">0xAA057BE6</span>, <span class="number">0x9E171F8E</span>, <span class="number">0xDD153E4F</span>,</span><br><span class="line">    <span class="number">0x41079E59</span>, <span class="number">0x807578DD</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        dec(&amp;data[k*<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%#X&quot;</span>, data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0X67616C660X7730577B0X756F59210X6E31465F0X456D5F640X6F635F210X4072674E0X416C75740X6E6F31740X7D2173</span></span><br></pre></td></tr></table></figure><p>然后字符串转换:</p><p>666C61677B57307721596F755F46316E645F6D45215F636F4E67724074756C4174316F6E73217D</p><p>转string:flag{W0w!You_F1nd_mE!_coNgr@tulAt1ons!}</p><p>c语言，函数指针数组和指向函数指针数组的指针，TEA</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="RC4加密"><a href="#RC4加密" class="headerlink" title="RC4加密"></a>RC4加密</h2><p>详见专栏：<a href="ed8aa7e2.html">RC4</a></p><h2 id="TAE加密"><a href="#TAE加密" class="headerlink" title="TAE加密"></a>TAE加密</h2><p>详见专栏：<a href="d89283b5.html">TEA</a></p><h2 id="安卓调试流程"><a href="#安卓调试流程" class="headerlink" title="安卓调试流程"></a>安卓调试流程</h2><blockquote><p>前置流程：</p><ol><li>先下载adb（部分模拟器自带adb，在模拟器根目录）</li><li>打开模拟器的root和开发者模式，在开发者模式里面开usb调试</li></ol><p>然后：</p><ol><li>用adb连接模拟器：adb connect 127.0.0.1：xxxxx（xxxxx根据模拟器而定），不要关闭</li><li>打开jadx的debug功能，顶上的<img src="https://s2.loli.net/2023/12/17/KGJzYeBwxroNOgR.png" alt="image-20231210140413425" style="zoom:33%;" />，然后应该能看到下面的设备出现了各种线程</li><li>找到对应进程，开始调试</li></ol></blockquote><h2 id="CE的mono功能"><a href="#CE的mono功能" class="headerlink" title="CE的mono功能"></a>CE的mono功能</h2><p>mono是Novell开发的跨平台.NET运行环境,而Csharp是这个环境上的主要编程语言，Unity的使用的就是Csharp,所以CE的mono功能可以对大部分unity游戏使用</p><p>开启mono后，Ctrl+D打开反汇编程序窗口后可以直接看到类名和函数名，也可以在mono窗口查看DLL内容，相应类和方法，变量等，不仅可以方便写CElua脚本还能方便反编译器lispy或dnspy找DLL和方法名</p>]]></content>
    
    
    <summary type="html">本周做题记录</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>《逆核》04-基址重定位表</title>
    <link href="https://www.pri87.vip/posts/8430b536.html"/>
    <id>https://www.pri87.vip/posts/8430b536.html</id>
    <published>2023-12-13T03:17:19.000Z</published>
    <updated>2024-01-17T07:49:44.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基址重定位表"><a href="#基址重定位表" class="headerlink" title="基址重定位表"></a>基址重定位表</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>PE重定位指如果PE文件加载时(一般是DLL,SYS动态加载)已经有别的DLL或SYS文件加载到它的ImageBase处，PE装载器会将其加载到其它未被占用的空间。<strong>PE装载器把它装载到其它位置的一系列行为</strong>就叫做PE重定位。(如果不进行这个操作,程序无法运行,内存地址引用错误)</p><blockquote><p>要解决什么问题呢?<br>–即让DLL文件能加载到其它地方并可以被正确调用.</p></blockquote><p>对于exe文件来说,exe每次都会加载到随机地址(ASLR机制)</p><h2 id="操作原理"><a href="#操作原理" class="headerlink" title="操作原理"></a>操作原理</h2><ul><li>在程序中查找硬编码的地址位置(如指令指向的绝对地址)</li><li>读取值后,减去imagebase(VA-&gt;RVA)</li><li>加上实际加载的地址(RVA-&gt;VA)</li><li>注:这个是在加载时直接写入修改,而不是每次调用函数或指令时再计算</li></ul><p>那么,该如何查找硬编码地址呢?</p><h2 id="基址重定位表-1"><a href="#基址重定位表-1" class="headerlink" title="基址重定位表"></a>基址重定位表</h2><p>基址重定位表记录了程序加载时需要修正的值的相关信息,包括修正地址的位置,需要修正的字节数,需要修正的地址类型等.在.reloc节中.位于PE头的DataDirectory数组的索引为5的元素指向了这个表.该表中每个记录都被称为<strong>一项</strong>(entry),每个项包含了需要修正的地址的详细信息.项以可变长度数组的形式存在<strong>重定位块</strong>中,每个重定位块是如下的IMAGE_BASE_RELOCATION结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span> &#123;</span></span><br><span class="line">    DWORD VirtualAddress; <span class="comment">// 需要重定位的数据的RVA</span></span><br><span class="line">    DWORD SizeOfBlock;    <span class="comment">// 重定位块的长度(包括TypeOffset)</span></span><br><span class="line">    <span class="comment">//WORD TypeOffset[1];   // 重定位的偏移</span></span><br><span class="line">&#125; IMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    WORD Offset:<span class="number">12</span>;  <span class="comment">// 大小为12Bit的重定位偏移 </span></span><br><span class="line">    WORD Type  :<span class="number">4</span>;   <span class="comment">// 大小为4Bit的重定位信息类型值 </span></span><br><span class="line">&#125;TypeOffset;         <span class="comment">// 这个结构体是A1Pass总结的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每个IMAGE_BASE_RELOCATION结构体都表示一个重定位块,每块记录了0x1000页,记录方法是VirtualAddress表明基地址,每个TypeOffset的低12位表示偏移,基地址加偏移即是那个需要修改的地址.</p><p>其中SizeOfBlock的大小(块的长度)指明该重定位块中重定位项的个数</p><p>TypeOffset原则上不属于结构中,且元素个数 &#x3D; （SizeOfBlock - 8 ）&#x2F; 2,其中前4位的部分含义:</p><blockquote><ul><li>[<code>IMAGE_REL_BASED_ABSOLUTE (0)</code>：使块按照32位对齐，位置为0]</li><li>[<code>IMAGE_REL_BASED_HIGH (1)</code>：高16位必须应用于偏移量所指高字16位]</li><li>[<code>IMAGE_REL_BASED_LOW (2)</code>：低16位必须应用于偏移量所指低字16位]</li><li>[<code>IMAGE_REL_BASED_HIGHLOW (3)</code>：全部32位应用于所有32位]</li><li>[<code>IMAGE_REL_BASED_HIGHADJ (4)</code>：需要32位，高16位位于偏移量，低16位位于下一个偏移量数组元素，组合为一个带符号数，加上32位的一个数，然后加上8000然后把高16位保存在偏移量的16位域内]。</li></ul></blockquote><p>数组的最后一项以NULL填充结尾.</p>]]></content>
    
    
    <summary type="html">本篇介绍基址重定位和基址重定位表</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="学习" scheme="https://www.pri87.vip/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>《逆核》03-手脱UPX</title>
    <link href="https://www.pri87.vip/posts/d011918c.html"/>
    <id>https://www.pri87.vip/posts/d011918c.html</id>
    <published>2023-12-13T01:40:10.000Z</published>
    <updated>2023-12-13T08:04:29.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="UPX解码步骤"><a href="#UPX解码步骤" class="headerlink" title="UPX解码步骤"></a>UPX解码步骤</h2><blockquote><p>1.先初始化<br>2.进行代码还原<br>3.进行CALL修复<br>4.进行函数表还原<br>5.节表初始化<br>6.解码完毕飞向程序入口</p></blockquote></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>单步跟踪法</li><li>ESP定律法</li></ul><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>单步跟踪法：基于UPX解压缩的步骤，ep开头会先push所有寄存器到栈，然后执行三个循环（见前一节），然后pop弹出所有寄存器后，重建表，进入程序oep。因此，只要一直f8，遇到循环就f4跳过，直到看到pop，然后跳过小循环，进入最后一个就，jmp即可进入oep，基于以上原理，由于upx解压部分和跳转都是连在一起的，所以直接alt+t搜索pop指令找到最后的位置(push对应pop,pusha或pushad对应popa和popad)</p><p>ESP定律法：根据原理push之后是解压，解压完为了跳回oep要获得之前的寄存器值即栈一定会平衡，开始时的栈和最后进入oep的栈状态相同，因此开始调试后先f8，使ESP(RSP)下浮一个值创建栈,如果之后的指令需要这时栈底的寄存器值,一定会回到这里读取这个值.然后复制这时栈顶的地址,G跳到那个地址,在这里下硬件断点,点f9后运行到硬件断点就是pop的位置之后的指令,然后如上即可.</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="实例一-使用IDA"><a href="#实例一-使用IDA" class="headerlink" title="实例一(使用IDA)"></a>实例一(使用IDA)</h3><p>1,脱一个x64程序的UPX壳,使用ida:</p><p>初始对比:</p><img src="https://s2.loli.net/2023/12/13/rxZo9yn2kcEePSq.png" alt="a" /><p>可以看出加壳之后比源程序小了约四分之三.用ida打开加壳程序:</p><img src="https://s2.loli.net/2023/12/13/XcMx5TEzsZaekKR.png" alt="b" style="zoom:33%;" /><img src="https://s2.loli.net/2023/12/13/JVCxMTav3Pb5oqN.png" alt="c" style="zoom:33%;" /><p>可以看出,压缩后函数变得极少,可以作为判断是否有壳的方法.</p><p>在开始处点f2下断点并进行动态调试:</p><img src="https://s2.loli.net/2023/12/13/oKPZxGBQt1AvWXO.png" alt="d" style="zoom:33%;" /><img src="https://s2.loli.net/2023/12/13/h4OsAL3VNDYijWb.png" alt="e" style="zoom:80%;" /><p>f8单步调试并观察栈:</p><img src="https://s2.loli.net/2023/12/13/xmTjoiJuczEbXkH.png" alt="f" style="zoom:80%;" /><p>复制栈对应地址并g跳转然后下硬件断点:</p><img src="https://s2.loli.net/2023/12/13/fMiQDm8aeAJPIXC.png" alt="g" style="zoom:80%;" /><img src="https://s2.loli.net/2023/12/13/je9cyJPmXhFVCzp.png" alt="h" style="zoom:80%;" /><p>观察到栈已经下了断点,这时直接f9,弹出</p><img src="https://s2.loli.net/2023/12/13/gswat71T26xAXKQ.png" alt="i" style="zoom:50%;" /><p>跳转到</p><img src="https://s2.loli.net/2023/12/13/yS8JnoQ5D647LGu.png" alt="j" style="zoom:80%;" /><p>转换汇编视图可以发现</p><img src="https://s2.loli.net/2023/12/13/Q9LUcBgMjTPoqa5.png" alt="k" style="zoom:80%;" /><p>指针点击循环下面的位置点f4运行到对应位置,再几次f8进大跳转就进入oep了,这个地方注意要先把硬件断点删了,点击上面工具栏的断点列表del键删掉</p><h3 id="实例2-使用OD"><a href="#实例2-使用OD" class="headerlink" title="实例2(使用OD)"></a>实例2(使用OD)</h3><p>这是一个x32程序,使用od</p><p>进入后发现:</p><img src="https://s2.loli.net/2023/12/13/Q6BGY5ECRXzkfZV.png" alt="l" style="zoom:80%;" /><p>和上面方法一样,先f8,然后对寄存器下断点(右键sep值复制,在下面的命令窗口输入hr (对应的地址))这表示是硬件读取断点.回车</p><img src="https://s2.loli.net/2023/12/13/6UYmy4JF8NeqdDz.png" alt="m" style="zoom:80%;" /><p>然后直接f9,删掉硬件断点:调试-硬件断点-删除.就找到了pop,小循环,大跳转</p><img src="https://s2.loli.net/2023/12/13/ncliZFbTf6NDGtW.png" alt="n" style="zoom:80%;" /><p>之后与第一个写的相同</p><p>或者在开始的时候,ctrl+f搜索popad</p><img src="https://s2.loli.net/2023/12/13/umPHGU7vtcY5wEO.png" alt="o" style="zoom:80%;" /><p>然后找到对应位置:</p><img src="https://s2.loli.net/2023/12/13/XEZIDWQcYvMSk83.png" alt="p" style="zoom:80%;" /><p>然后直接f4即可</p>]]></content>
    
    
    <summary type="html">本篇尝试分析UPX壳，并通过调试找到OPE</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="实践" scheme="https://www.pri87.vip/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>《逆核》02-运行时压缩器01</title>
    <link href="https://www.pri87.vip/posts/264d914b.html"/>
    <id>https://www.pri87.vip/posts/264d914b.html</id>
    <published>2023-12-12T06:23:11.000Z</published>
    <updated>2024-01-17T07:48:25.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行时压缩器"><a href="#运行时压缩器" class="headerlink" title="运行时压缩器"></a>运行时压缩器</h1><p>定义：针对于PE文件而言，可执行文件内部含有解压缩代码，文件在运行瞬间于内存中解压后执行。</p><p>运行时压缩文件也是PE文件，含有原PE文件和解码程序。在程序的EP代码中执行解码程序，在程序入口（EP）处执行解码程序，同时在内存中解压缩后执行。  </p><h2 id="1分类"><a href="#1分类" class="headerlink" title="1分类"></a>1分类</h2><p>分为压缩器和保护器。</p><h3 id="1-1压缩器"><a href="#1-1压缩器" class="headerlink" title="1.1压缩器"></a>1.1压缩器</h3><p>目的：</p><p>减小PE文件大小，便于传输和保存</p><p>隐藏PE文件内部代码和资源</p><h3 id="1-2保护器"><a href="#1-2保护器" class="headerlink" title="1.2保护器"></a>1.2保护器</h3><p>目的：</p><p>保护PE文件免受代码逆向分析，应用多种防止代码逆向的技术（反调试，反模拟，代码混淆，多态代码，垃圾代码，调试器监视等）。压缩后比源文件大</p><p>防破解，保护代码与资源</p><h2 id="2UPX"><a href="#2UPX" class="headerlink" title="2UPX"></a>2UPX</h2><p>一种压缩器，比较主流</p><h3 id="2-1压缩后特点"><a href="#2-1压缩后特点" class="headerlink" title="2.1压缩后特点"></a>2.1压缩后特点</h3><ul><li>PE头和原来相同</li><li>节区名称改变(.text变为UPX0,.data变为UPX1)</li><li>第一个节区的RawDataSize&#x3D;0(空节区)</li><li>EP在第二个节区</li><li>资源节区大小<code>几乎</code>无变化</li><li>入口点改变</li></ul><h3 id="2-2补充"><a href="#2-2补充" class="headerlink" title="2.2补充"></a>2.2补充</h3><blockquote><p>为什么第一个节区是空节区</p><p>节区头中,第一个节区(UPX0)的RawDataSize为0,但是VirtualSize为10000.代码和数据都在UPX1中.UPX解压后,PE文件运行瞬间将解压的代码解压到第一个节区,解压结束后,运行源文件的EP代码.  </p></blockquote><blockquote><p>入口点的变化</p><p>修改后，程序入口点EP到了UPX1的末端，而真实入口点OEP在EP之前。压缩后EP处指令为PUSHAD(和PUSHA相同)，是将EAX~EDI的值保存到栈，然后为MOV ESI,x，x是UPX0的起始地址</p></blockquote><h3 id="2-3UPX额外执行的操作"><a href="#2-3UPX额外执行的操作" class="headerlink" title="2.3UPX额外执行的操作"></a>2.3UPX额外执行的操作</h3><ol><li>PUSHAD(和PUSHA相同)，将EAX~EDI的值压入栈</li><li>mov esi,x(或offset x),将x(一个地址,如果是offset则是x的地址)装入esi寄存器中,这是把UPX1的  起始地址放到ESI中</li><li>LEA EDI,DWORD PTR DS:[ESI+y]或lea edi, [esi-y]这个的作用是把UPX0的起始地址放到EDI中</li><li>PUSH EDI是把首地址入栈</li><li>解密循环:(从EDX中读取一个字节写入EDI??存疑)具体的解密算法按照加密来选择</li><li>解压缩循环:从ESI所指的UPX1中依次读值,经过LZMA解压缩填充到之前为NULL的EDI所指的UPX0中</li><li>重定位循环:把所有<code>基于地址的位置无关代码</code>(PIC)<a href="8430b536.html">重定位</a>,PIC是只使用相对位置的指令.如(CALL,JMP等),PIC在.data开头创建了全局偏移表(GOT)</li></ol><p>然后会进行IAT的建立。最后再开始执行源代码。</p>]]></content>
    
    
    <summary type="html">本篇介绍什么是压缩器并介绍UPX的原理</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="学习" scheme="https://www.pri87.vip/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="压缩器" scheme="https://www.pri87.vip/tags/%E5%8E%8B%E7%BC%A9%E5%99%A8/"/>
    
    <category term="壳" scheme="https://www.pri87.vip/tags/%E5%A3%B3/"/>
    
  </entry>
  
</feed>
