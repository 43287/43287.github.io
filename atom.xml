<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pRism</title>
  
  
  <link href="https://www.pri87.vip/atom.xml" rel="self"/>
  
  <link href="https://www.pri87.vip/"/>
  <updated>2025-06-29T18:18:29.356Z</updated>
  <id>https://www.pri87.vip/</id>
  
  <author>
    <name>pRism</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>qiling常见API</title>
    <link href="https://www.pri87.vip/posts/95eaa510.html"/>
    <id>https://www.pri87.vip/posts/95eaa510.html</id>
    <published>2025-06-29T14:28:04.000Z</published>
    <updated>2025-06-29T18:18:29.356Z</updated>
    
    <content type="html"><![CDATA[<p>破防了QAQ，刚刚写完了，但是没保存上。又要重新写一遍了，悲</p><h1>Qiling</h1><p><a href="https://github.com/qilingframework/qiling">qilingframework/qiling: A True Instrumentable Binary Emulation Framework</a></p><p><a href="https://docs.qiling.io/en/latest/">Qiling Framework Documentation</a></p><h2 id="打印和过滤">打印和过滤</h2><p>使用这个进行日志输出</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.<span class="keyword">log</span>.<span class="keyword">info</span>(<span class="string">&#x27;Hello from Qiling Framework!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>设定日志详细级别verbose：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line">ql = Qiling([<span class="string">r&#x27;/bin/ls&#x27;</span>], <span class="string">r&#x27;examples/rootfs/x86_linux&#x27;</span>, verbose=QL_VERBOSE.DEBUG)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">详细级别</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>QL_VERBOSE.DISABLED</code></td><td style="text-align:left">完全关闭</td></tr><tr><td style="text-align:left"><code>QL_VERBOSE.OFF</code></td><td style="text-align:left">仅记录warnings, errors和critical entries</td></tr><tr><td style="text-align:left"><code>QL_VERBOSE.DEFAULT</code></td><td style="text-align:left">除了上一级还记录info</td></tr><tr><td style="text-align:left"><code>QL_VERBOSE.DEBUG</code></td><td style="text-align:left">除了上一级还记录debug</td></tr><tr><td style="text-align:left"><code>QL_VERBOSE.DISASM</code></td><td style="text-align:left">除了上一级还记录每条指令的反汇编</td></tr><tr><td style="text-align:left"><code>QL_VERBOSE.DUMP</code></td><td style="text-align:left">除了上一级还记录CPU上下文</td></tr></tbody></table><h2 id="快照">快照</h2><h3 id="部分执行">部分执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ql = Qiling([<span class="string">&quot;../examples/rootfs/x8664_linux/bin/sleep_hello&quot;</span>], <span class="string">&quot;../examples/rootfs/x8664_linux&quot;</span>, verbose=QL_VERBOSE.DEBUG)</span><br><span class="line">X64BASE = <span class="built_in">int</span>(ql.profile.get(<span class="string">&quot;OS64&quot;</span>, <span class="string">&quot;load_address&quot;</span>), <span class="number">16</span>)</span><br><span class="line">ql.restore(snapshot=<span class="string">&quot;/tmp/snapshot.bin&quot;</span>)</span><br><span class="line">begin_point = X64BASE + <span class="number">0x109e</span></span><br><span class="line">end_point = X64BASE + <span class="number">0x10bc</span></span><br><span class="line">ql.run(begin = begin_point, end = begin_point)</span><br></pre></td></tr></table></figure><p>run时可以指定begin和end</p><h3 id="状态恢复与保存">状态恢复与保存</h3><h4 id="全局状态">全局状态</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ql_all = ql.save()</span><br><span class="line">ql.restore(ql_all)</span><br></pre></td></tr></table></figure><h4 id="文件描述符">文件描述符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_fd = ql.fd.save()</span><br><span class="line">ql.fd.restore(all_fd)</span><br></pre></td></tr></table></figure><h4 id="CPU">CPU</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_registers_context = ql.arch.regs.context_save()</span><br><span class="line">ql.arch.regs.context_restore(all_registers_context)</span><br></pre></td></tr></table></figure><h4 id="内存">内存</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all_mem = ql.mem.save()</span><br><span class="line">ql.mem.restore(all_mem)</span><br></pre></td></tr></table></figure><h4 id="寄存器">寄存器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all_registers = ql.arch.regs.save()</span><br><span class="line">all_registers[<span class="string">&quot;eip&quot;</span>] = <span class="number">0xaabbccdd</span></span><br><span class="line">ql.arch.regs.restore(all_registers)</span><br></pre></td></tr></table></figure><p>也可以直接修改</p><h2 id="寄存器-2">寄存器</h2><h3 id="读取和写入">读取和写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.read(<span class="string">&quot;EAX&quot;</span>) <span class="comment"># 使用字符串</span></span><br><span class="line">ql.arch.regs.read(UC_X86_REG_EAX) <span class="comment"># 使用UC常量</span></span><br><span class="line">eax = ql.arch.regs.eax <span class="comment"># 使用结构</span></span><br><span class="line"></span><br><span class="line">ql.arch.regs.write(<span class="string">&quot;EAX&quot;</span>, <span class="number">0xFF</span>)</span><br><span class="line">ql.arch.regs.write(UC_X86_REG_EAX, <span class="number">0xFF</span>)</span><br><span class="line">ql.arch.regs.eax =  <span class="number">0xFF</span></span><br></pre></td></tr></table></figure><h3 id="跨平台寄存器使用，仅支持pc和sp">跨平台寄存器使用，仅支持pc和sp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.arch_pc</span><br><span class="line">ql.arch.regs.arch_sp</span><br><span class="line"></span><br><span class="line">ql.arch.regs.arch_pc = <span class="number">0xFF</span></span><br><span class="line">ql.arch.regs.arch_sp = <span class="number">0xFF</span></span><br></pre></td></tr></table></figure><h3 id="获取寄存器列表">获取寄存器列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.regs.register_mapping()</span><br></pre></td></tr></table></figure><h3 id="按位获取寄存器：从64位获取32位">按位获取寄存器：从64位获取32位</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.arch.reg_bits(<span class="string">&quot;eax&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="内存-2">内存</h2><h3 id="栈操作">栈操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value = ql.arch.stack_pop() <span class="comment"># pop</span></span><br><span class="line">ql.arch.stack_push(value) <span class="comment"># push</span></span><br><span class="line">value = ql.arch.stack_read(offset) <span class="comment"># peek</span></span><br><span class="line">ql.arch.stack_write(offset, value) <span class="comment"># 直接写入</span></span><br></pre></td></tr></table></figure><h3 id="内存操作">内存操作</h3><h4 id="创建和销毁">创建和销毁</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.<span class="built_in">map</span>(addr: <span class="built_in">int</span>, size: <span class="built_in">int</span>, perms: <span class="built_in">int</span> = UC_PROT_ALL, info: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>) -&gt; <span class="literal">None</span></span><br><span class="line">ql.mem.map_anywhere(size: <span class="built_in">int</span>) <span class="comment"># 不关心地址</span></span><br><span class="line"></span><br><span class="line">ql.mem.unmap(addr: <span class="built_in">int</span>, size: <span class="built_in">int</span>) -&gt; <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>perms为权限，可以是如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UC_PROT_NONE = <span class="number">0</span></span><br><span class="line">UC_PROT_READ = <span class="number">1</span></span><br><span class="line">UC_PROT_WRITE = <span class="number">2</span></span><br><span class="line">UC_PROT_EXEC = <span class="number">4</span></span><br><span class="line">UC_PROT_ALL = <span class="number">7</span></span><br></pre></td></tr></table></figure><h4 id="读写">读写</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.read(addr: <span class="built_in">int</span>, size: <span class="built_in">int</span>) -&gt; <span class="built_in">bytearray</span></span><br><span class="line">ql.mem.read_ptr(addr: <span class="built_in">int</span>, size: <span class="built_in">int</span> = <span class="number">0</span>, *, signed = <span class="literal">False</span>) -&gt; <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">ql.mem.write(addr: <span class="built_in">int</span>, data: <span class="built_in">bytes</span>) -&gt; <span class="literal">None</span></span><br><span class="line">ql.mem.write_ptr(addr: <span class="built_in">int</span>, value: <span class="built_in">int</span>, size: <span class="built_in">int</span> = <span class="number">0</span>, *, signed = <span class="literal">False</span>) -&gt; <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">string(self, addr: <span class="built_in">int</span>, value=<span class="literal">None</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]</span><br></pre></td></tr></table></figure><p>read/write_ptr的size表示指针大小，可选1，2，4，8。read/write的size指读取长度。string无value则为读，否则为写，写则无返回。</p><h4 id="搜索">搜索</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.search(needle: <span class="type">Union</span>[<span class="built_in">bytes</span>, Pattern[<span class="built_in">bytes</span>]], begin: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>, end: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]</span><br></pre></td></tr></table></figure><p>needle为内存中想要搜索的字节组，begin和end为可选，表示搜索范围。</p><h4 id="内存管理">内存管理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ql.mem.get_formatted_mapinfo() <span class="comment"># 获取所有申请的地址列表</span></span><br><span class="line">ql.mem.find_free_space(size) <span class="comment"># 找一个未申请的地方</span></span><br><span class="line">ql.mem.is_available(addr, size) <span class="comment"># 判断某处是否可申请</span></span><br><span class="line">ql.mem.is_mapped(addr, size) <span class="comment"># 与上面的相反</span></span><br><span class="line">ql.mem.find_free_space(size, min_addr=<span class="number">0</span>, max_addr = <span class="number">0</span>, alignment=<span class="number">0x10000</span>) <span class="comment"># 带对齐的找申请</span></span><br></pre></td></tr></table></figure><h2 id="钩子">钩子</h2><h3 id="hook-address">hook_address</h3><p>在执行某个地址的指令之前触发hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">ql: Qiling</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ql.log.info(<span class="string">&#x27;killer switch found, stopping&#x27;</span>)</span><br><span class="line">    ql.emu_stop()</span><br><span class="line">ql = Qiling([<span class="string">r&#x27;examples/rootfs/x86_windows/bin/wannacry.bin&#x27;</span>], <span class="string">r&#x27;examples/rootfs/x86_windows&#x27;</span>)</span><br><span class="line"><span class="comment"># have &#x27;stop&#x27; called when execution reaches 0x40819a</span></span><br><span class="line">ql.hook_address(stop, <span class="number">0x40819a</span>)</span><br><span class="line">ql.run()</span><br></pre></td></tr></table></figure><h3 id="hook-code">hook_code</h3><p>每执行一条汇编前触发一次hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> Cs</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_diassembler</span>(<span class="params">ql: Qiling, address: <span class="built_in">int</span>, size: <span class="built_in">int</span>, md: Cs</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    buf = ql.mem.read(address, size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> insn <span class="keyword">in</span> md.disasm(buf, address):</span><br><span class="line">        ql.log.debug(<span class="string">f&#x27;:: <span class="subst">&#123;insn.address:#x&#125;</span> : <span class="subst">&#123;insn.mnemonic:24s&#125;</span> <span class="subst">&#123;insn.op_str&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;examples/rootfs/x8664_linux/bin/x8664_hello&#x27;</span>], <span class="string">r&#x27;examples/rootfs/x8664_linux&#x27;</span>, verbose=QL_VERBOSE.DEBUG)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># have &#x27;simple_disassembler&#x27; called on each instruction, passing a Capstone disassembler instance bound to</span></span><br><span class="line">    <span class="comment"># the underlying architecture as an optional argument</span></span><br><span class="line">    ql.hook_code(simple_diassembler, user_data=ql.arch.disassembler)</span><br><span class="line"></span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><h3 id="hook-block">hook_block</h3><p>每个基本块进入时执行hook回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ql_hook_block_disasm</span>(<span class="params">ql, address, size</span>):</span><br><span class="line">    ql.log.debug(<span class="string">&quot;\n[+] Tracing basic block at 0x%x&quot;</span> % (address))</span><br><span class="line"></span><br><span class="line">ql.hook_block(ql_hook_block_disasm)</span><br></pre></td></tr></table></figure><h3 id="hook-intno">hook_intno</h3><p>对中断向量表hook，下面的0x80是中断号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ql.hook_intno(hook_syscall, <span class="number">0x80</span>)</span><br></pre></td></tr></table></figure><h3 id="hook-insn">hook_insn</h3><p>对系统中断hook，比如syscall（UC_X86_INS_SYSCALL）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> UC_X86_INS_IN</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_in</span>(<span class="params">ql: Qiling, port: <span class="built_in">int</span>, size: <span class="built_in">int</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">    <span class="comment"># call some function to look up the value held in the specified port (not implemented by Qiling)</span></span><br><span class="line">    value = lookup_port_value(port, size)</span><br><span class="line">    ql.log.debug(<span class="string">f&#x27;reading from port <span class="subst">&#123;port:#x&#125;</span>, size <span class="subst">&#123;size:d&#125;</span> -&gt; <span class="subst">&#123;value:#<span class="number">0</span>&#123;size * <span class="number">2</span> + <span class="number">2</span>&#125;</span>x&#125;&#x27;</span>)</span><br><span class="line">    <span class="comment"># return a tuple indicating other hooks may be processed (0) and the read value (value)</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>, value)</span><br><span class="line">ql.hook_insn(handle_in, UC_X86_INS_IN)</span><br></pre></td></tr></table></figure><h3 id="其它hook">其它hook</h3><p>可以对内存的访问做hook来模拟硬件断点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ql.hook_int()</span><br><span class="line">ql.hook_mem_unmapped()</span><br><span class="line">ql.hook_mem_read_invalid()</span><br><span class="line">ql.hook_mem_write_invalid()</span><br><span class="line">ql.hook_mem_fetch_invalid()</span><br><span class="line">ql.hook_mem_invalid()</span><br><span class="line">ql.hook_mem_read(callback: <span class="type">Callable</span>, begin: <span class="built_in">int</span> = <span class="number">1</span>, end: <span class="built_in">int</span> = <span class="number">0</span>)</span><br><span class="line">ql.hook_mem_write(callback: <span class="type">Callable</span>, begin: <span class="built_in">int</span> = <span class="number">1</span>, end: <span class="built_in">int</span> = <span class="number">0</span>)</span><br><span class="line">ql.hook_mem_fetch()</span><br></pre></td></tr></table></figure><h3 id="hook管理">hook管理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ql.hook_del()</span><br><span class="line">ql.clear_hooks()</span><br></pre></td></tr></table></figure><h2 id="API劫持">API劫持</h2><h3 id="标准流">标准流</h3><p><code>from qiling.extensions import pipe</code>中有模拟流用的对象：SimpleInStream(fd)或SimpleOutStream(fd)替换掉标准输入流后可以直接write</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> </span><br><span class="line"><span class="keyword">from</span> qiling.extensions <span class="keyword">import</span> pipe</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force_call_dialog_func</span>(<span class="params">ql: Qiling</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># get DialogFunc address</span></span><br><span class="line">    lpDialogFunc = ql.mem.read_ptr(ql.arch.regs.esp - <span class="number">0x8</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup stack for DialogFunc</span></span><br><span class="line">    ql.stack_push(<span class="number">0</span>)</span><br><span class="line">    ql.stack_push(<span class="number">1001</span>)</span><br><span class="line">    ql.stack_push(<span class="number">273</span>)</span><br><span class="line">    ql.stack_push(<span class="number">0</span>)</span><br><span class="line">    ql.stack_push(<span class="number">0x0401018</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># force EIP to DialogFunc</span></span><br><span class="line">    ql.arch.regs.eip = lpDialogFunc</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># expected flag: Ea5yR3versing</span></span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/x86_windows/bin/Easy_CrackMe.exe&#x27;</span>], <span class="string">r&#x27;rootfs/x86_windows&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># hijack program&#x27;s stdin and feed it with the expected flag</span></span><br><span class="line">    ql.os.stdin = pipe.SimpleInStream(<span class="number">0</span>)</span><br><span class="line">    ql.os.stdin.write(<span class="string">b&#x27;Ea5yR3versing\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ql.hook_address(force_call_dialog_func, <span class="number">0x00401016</span>)</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>也有交互式的，类似pwntool：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.extensions <span class="keyword">import</span> pipe</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/x86_linux/bin/crackme_linux&#x27;</span>], <span class="string">r&#x27;rootfs/x86_linux&#x27;</span>)</span><br><span class="line">    ql.os.stdin = pipe.InteractiveInStream() <span class="comment"># you will want to type L1NUX when the program waits for input</span></span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><h3 id="文件系统">文件系统</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.os.mapper <span class="keyword">import</span> QlFsMappedObject</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FakeUrandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="comment"># return a constant value upon reading</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;\x04&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fstat</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># return -1 to let syscall fstat ignore it</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/x86_linux/bin/x86_fetch_urandom&#x27;</span>], <span class="string">r&#x27;rootfs/x86_linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ql.add_fs_mapper(<span class="string">r&#x27;/dev/urandom&#x27;</span>, FakeUrandom())</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>自定义文件系统类继承自QlFsMappedObject，自定义读和写以及关闭</p><p>同时也可以硬盘模拟，这里没看懂：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.os.disk <span class="keyword">import</span> QlDisk</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/8086_dos/petya/mbr.bin&#x27;</span>], <span class="string">r&#x27;rootfs/8086_dos&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Note that this image is only intended for PoC purposes since the core petya code</span></span><br><span class="line">    <span class="comment"># resides in the sepecific sectors of a hard disk. It doesn&#x27;t contain any data, either</span></span><br><span class="line">    <span class="comment"># encryted or unencrypted.</span></span><br><span class="line"></span><br><span class="line">    emu_path = <span class="number">0x80</span></span><br><span class="line">    emu_disk = QlDisk(<span class="string">r&#x27;rootfs/8086_dos/petya/out_1M.raw&#x27;</span>, emu_path)</span><br><span class="line"></span><br><span class="line">    ql.add_fs_mapper(emu_path, emu_disk)</span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><h3 id="系统调用">系统调用</h3><p>使用ql.os.set_syscall来实现系统调用劫持</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_INTERCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># customized system calls always use the same arguments list as the original</span></span><br><span class="line"><span class="comment"># ones, but with a Qiling instance on front. The Qiling instance may be used</span></span><br><span class="line"><span class="comment"># to interact with various subsystems, such as the memory or registers</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_syscall_write</span>(<span class="params">ql: Qiling, fd: <span class="built_in">int</span>, buf: <span class="built_in">int</span>, count: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># read data from emulated memory</span></span><br><span class="line">        data = ql.mem.read(buf, count)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># select the emulated file object that corresponds to the requested</span></span><br><span class="line">        <span class="comment"># file descriptor</span></span><br><span class="line">        fobj = ql.os.fd[fd]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># write the data into the file object, if it supports write operations</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(fobj, <span class="string">&#x27;write&#x27;</span>):</span><br><span class="line">            fobj.write(data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        ret = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret = count</span><br><span class="line"></span><br><span class="line">    ql.log.info(<span class="string">f&#x27;my_syscall_write(<span class="subst">&#123;fd&#125;</span>, <span class="subst">&#123;buf:#x&#125;</span>, <span class="subst">&#123;count&#125;</span>) = <span class="subst">&#123;ret&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return a value to the caller</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ql = Qiling([<span class="string">r&#x27;rootfs/arm_linux/bin/arm_hello&#x27;</span>], <span class="string">r&#x27;rootfs/arm_linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the following call to &#x27;set_syscall&#x27; sets &#x27;my_syscall_write&#x27; to execute whenever</span></span><br><span class="line">    <span class="comment"># the &#x27;write&#x27; system call is about to be called. that practically replaces the</span></span><br><span class="line">    <span class="comment"># existing implementation with the one in &#x27;my_syscall_write&#x27;.</span></span><br><span class="line">    ql.os.set_syscall(<span class="string">&#x27;write&#x27;</span>, my_syscall_write, QL_INTERCEPT.CALL)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># note that system calls may be referred to either by their name or number.</span></span><br><span class="line">    <span class="comment"># an equivalent alternative that replaces the write syscall by refering its number:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#ql.os.set_syscall(4, my_syscall_write)</span></span><br><span class="line"></span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>此处可以传：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QL_INTERCEPT.CALL <span class="comment"># 完全替代</span></span><br><span class="line">QL_INTERCEPT.ENTER <span class="comment"># 进入前hook</span></span><br><span class="line">QL_INTERCEPT.EXIT <span class="comment"># 结束后hook</span></span><br></pre></td></tr></table></figure><p>对于Windows：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qiling.os <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qiling.os.windows.api <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> qiling.os.windows.fncc <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="meta">@winsdkapi(<span class="params">cc=STDCALL,params=&#123;</span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&#x27;dest&#x27;</span>:POINTER,</span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&#x27;src&#x27;</span>:POINTER,</span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&#x27;count&#x27;</span>:UINT</span></span></span><br><span class="line"><span class="params"><span class="meta">&#125;</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_memcpy</span>(<span class="params">ql:Qiling, address, params</span>):</span><br><span class="line">    dest = params[<span class="string">&#x27;dest&#x27;</span>]</span><br><span class="line">    src = params[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">    count = params[<span class="string">&#x27;count&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    ql.mem.write(dest,<span class="string">b&#x27;Hello_Qiling&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> dest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__  == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = [<span class="string">&#x27;C:/qiling/rootfs/x8664_windows/QiLingAPIHijeckTest.exe&#x27;</span>]</span><br><span class="line">    rootfs = <span class="string">&quot;C:/qiling/rootfs/x8664_windows&quot;</span></span><br><span class="line">    ql = Qiling(path, rootfs)</span><br><span class="line">    ql.os.set_api(<span class="string">&#x27;memcpy&#x27;</span>, my_memcpy)</span><br><span class="line">    ql.verbose = <span class="number">0</span></span><br><span class="line">    ql.run()</span><br></pre></td></tr></table></figure><p>需要在回调函数前使用这个指定传参和调用约定，x64默认MS64。内部传参军用字典取参数</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@winsdkapi</span>(cc=<span class="title class_">MS64</span>,params=&#123;</span><br><span class="line">    <span class="string">&#x27;dest&#x27;</span><span class="symbol">:POINTER</span>,</span><br><span class="line">    <span class="string">&#x27;src&#x27;</span><span class="symbol">:POINTER</span>,</span><br><span class="line">    <span class="string">&#x27;count&#x27;</span><span class="symbol">:UINT</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="调试">调试</h2><p>指定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qiling.debugger = <span class="string">&quot;qdb&quot;</span></span><br></pre></td></tr></table></figure><p>可以开始调试，界面类似gdb</p>]]></content>
    
    
    <summary type="html">模拟执行十分好用</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="工具" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>win-进入内核</title>
    <link href="https://www.pri87.vip/posts/e84e3e46.html"/>
    <id>https://www.pri87.vip/posts/e84e3e46.html</id>
    <published>2025-06-18T04:21:49.000Z</published>
    <updated>2025-06-26T05:19:04.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统调用">系统调用</h2><h3 id="MSR寄存器">MSR寄存器</h3><p>MSR是一组用于控制CPU的寄存器。</p><blockquote><p>MSR（Model Specific Register，模型专用寄存器）是x86/x64架构中央处理器（CPU）中的一组64位寄存器，主要用于配置硬件参数、监控运行状态及支持特定功能。其操作需通过RDMSR和WRMSR指令执行，并依赖于ECX寄存器指定目标地址，通常在特权级别0或实模式下运行。<br>MSR涵盖温度控制、频率调节、电源管理（C State）、微码更新及缓存控制等核心模块，涉及14类功能特性。典型应用包括通过IA32_SYSENTER系列寄存器实现快速系统调用（sysenter/sysexit），以及借助EFER寄存器管理64位模式切换。不同厂商或型号CPU的MSR功能可能存在差异，具体定义需参考处理器手册。在ARM架构中，类似功能的系统寄存器也通过MSR/MRS指令访问，但在指令集和寄存器命名上存在差异。</p></blockquote><p>每一个MSR寄存器都有一个Index标识，当在rcx中写入index后，就可以用RDMSR和WRMSR来读取或写入某个MSR寄存器，目标或源均为EDX:EAX。仅r0可读可写</p><p>比较重要的有：</p><ul><li>MSR_LSTAR (0xC0000082)   保存 64 位系统调用入口地址。当用户态执行 syscall 指令时，CPU 会读取 MSR_LSTAR 的值跳转到内核的系统调用处理入口。</li><li>MSR_STAR (0xC0000081)   保存系统调用时使用的段描述符信息，包括用户态和内核态的代码段选择符。它在系统调用和返回时确保段选择符得到正确设置。</li><li>MSR_FMASK (0xC0000084)   保存着在从用户态进入内核态过程中需要屏蔽的 EFLAGS 位（比如中断标志等）。这可以防止在执行系统调用处理时出现不安全的中断或其他异常情况。</li><li>MSR_CSTAR (0xC0000083)   在一些系统上用于 32 位兼容系统调用的入口地址（针对 x86 模式下的系统调用）。但在纯64位环境下通常主要使用 MSR_LSTAR。</li></ul><p>windbg中可以使用rdmsr 0xC0000082来查看具体的值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kd</span>&gt; rdmsr <span class="number">0</span>xC0000082</span><br><span class="line"><span class="attribute">msr</span>[c0000082] = fffff803`ede8c040</span><br><span class="line"><span class="attribute">kd</span>&gt; u fffff803`ede8c040</span><br><span class="line"><span class="attribute">nt</span>!KiSystemCall64:</span><br><span class="line"><span class="attribute">fffff803</span>`ede8c040 <span class="number">0</span>f01f8          swapgs</span><br><span class="line"><span class="attribute">fffff803</span>`ede8c043 <span class="number">654889242510000000</span> mov   qword ptr gs:[<span class="number">10</span>h],rsp</span><br><span class="line"><span class="attribute">fffff803</span>`ede8c04c <span class="number">65488</span>b2425a8010000 mov   rsp,qword ptr gs:[<span class="number">1</span>A8h]</span><br><span class="line"><span class="attribute">fffff803</span>`ede8c055 <span class="number">6</span>a2b            push    <span class="number">2</span>Bh</span><br><span class="line"><span class="attribute">fffff803</span>`ede8c057 <span class="number">65</span>ff342510000000 push    qword ptr gs:[<span class="number">10</span>h]</span><br><span class="line"><span class="attribute">fffff803</span>`ede8c05f <span class="number">4153</span>            push    r11</span><br><span class="line"><span class="attribute">fffff803</span>`ede8c061 <span class="number">6</span>a33            push    <span class="number">33</span>h</span><br><span class="line"><span class="attribute">fffff803</span>`ede8c063 <span class="number">51</span>              push    rcx</span><br></pre></td></tr></table></figure><h3 id="syscall和sysret">syscall和sysret</h3><p>syscall是intel的快速调用指令，一般在x64使用，x86用sysenter。</p><p>基本的格式是：(ntdll.dll中的ZwTestAlert)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000001800A3DC0                     public ZwTestAlert</span><br><span class="line">.text:00000001800A3DC0     ZwTestAlert     proc near               ; CODE XREF: sub_18007455C+A7↑p</span><br><span class="line">.text:00000001800A3DC0                                             ; sub_1800A4260+D↓p</span><br><span class="line">.text:00000001800A3DC0                                             ; DATA XREF: ...</span><br><span class="line">.text:00000001800A3DC0 000                 mov     r10, rcx        ; NtTestAlert</span><br><span class="line">.text:00000001800A3DC3 000                 mov     eax, 1D0h</span><br><span class="line">.text:00000001800A3DC8 000                 test    byte ptr ds:7FFE0308h, 1</span><br><span class="line">.text:00000001800A3DD0 000                 jnz     short loc_1800A3DD5</span><br><span class="line">.text:00000001800A3DD2 000                 syscall                 ; Low latency system call</span><br><span class="line">.text:00000001800A3DD4 000                 retn</span><br><span class="line">.text:00000001800A3DD5     ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000001800A3DD5</span><br><span class="line">.text:00000001800A3DD5     loc_1800A3DD5:                          ; CODE XREF: ZwTestAlert+10↑j</span><br><span class="line">.text:00000001800A3DD5 000                 int     2Eh             ; DOS 2+ internal - EXECUTE COMMAND</span><br><span class="line">.text:00000001800A3DD5                                             ; DS:SI -&gt; counted CR-terminated command string</span><br><span class="line">.text:00000001800A3DD7 000                 retn</span><br><span class="line">.text:00000001800A3DD7     ZwTestAlert     endp</span><br></pre></td></tr></table></figure><p>这里将传参放入r10，将调用号放入eax，检测的地址是KiSystemCall64表的一位，它表明了用用int 2e中断进入或者syscall进入内核</p><p>syscall执行时，CPU将rflags放入r11，将下一条指令地址放入rcx。并以如下方式获取r0的上下文（代码段、指令指针、堆栈段和标志）：</p><ul><li>从MSR的IA32_LSTAR域中加载r0的RIP值</li><li>从MSR的IA32_FMASK域加载mask并对R11中的rflags进行掩码操作（清除IA32_FMASK置位的位），一般来说会把Interrupt flag清零，防止可屏蔽硬件中断插入执行</li><li>从MSR的IA32_STAR域的47:32派生值加载cs和ss段选择子。但是它们的段选择器caches不会由它们在gdt或ldt中指向的值获取，而是加载固定值。SYSCALL不保证这些内容的合理</li><li>SYSCALL不保存栈指针</li></ul><p>这样就实现了上下文的转换。</p><p>sysret从r0返回r3</p><p>从MSR的IA32_STAR域63:48加载cs和ss段选择子，其caches也是固定值，同时不修改栈指针</p><p>同时将rcx的值加载到rip，将r11的值加载到rflags</p><h3 id="KUSER-SHARED-DATA">KUSER_SHARED_DATA</h3><p>在刚刚的代码中看到了<code>test    byte ptr ds:7FFE0308h, 1</code>，其中7FFE0000存放了KUSER_SHARED_DATA结构，该结构有4kb，是内核和用户虚拟内存的共享区间，用户可读，内核可读可写。内核：0xFFFFF78000000000到  0xFFFFF78000000FFF。用户：0x7FFE0000到0x7FFE0FFF。</p><p>具体内容如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">6</span><span class="punctuation">:</span> <span class="string">kd&gt; dt _KUSER_SHARED_DATA 0xFFFFF78000000000</span></span><br><span class="line"><span class="attribute">Wdf01000!_KUSER_SHARED_DATA</span></span><br><span class="line"><span class="attribute">   +0x000 TickCountLowDeprecated</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x004 TickCountMultiplier</span><span class="punctuation"> :</span> <span class="string">0xfa00000</span></span><br><span class="line">   <span class="attribute">+0x008 InterruptTime</span><span class="punctuation">    :</span> <span class="string">_KSYSTEM_TIME</span></span><br><span class="line">   <span class="attribute">+0x014 SystemTime</span><span class="punctuation">       :</span> <span class="string">_KSYSTEM_TIME</span></span><br><span class="line">   <span class="attribute">+0x020 TimeZoneBias</span><span class="punctuation">     :</span> <span class="string">_KSYSTEM_TIME</span></span><br><span class="line">   <span class="attribute">+0x02c ImageNumberLow</span><span class="punctuation">   :</span> <span class="string">0x8664</span></span><br><span class="line">   <span class="attribute">+0x02e ImageNumberHigh</span><span class="punctuation">  :</span> <span class="string">0x8664</span></span><br><span class="line">   <span class="attribute">+0x030 NtSystemRoot</span><span class="punctuation">     :</span> <span class="string">[260]  &quot;C:\WINDOWS&quot;</span></span><br><span class="line">   <span class="attribute">+0x238 MaxStackTraceDepth</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x23c CryptoExponent</span><span class="punctuation">   :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x240 TimeZoneId</span><span class="punctuation">       :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x244 LargePageMinimum</span><span class="punctuation"> :</span> <span class="string">0x200000</span></span><br><span class="line">   <span class="attribute">+0x248 AitSamplingValue</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x24c AppCompatFlag</span><span class="punctuation">    :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x250 RNGSeedVersion</span><span class="punctuation">   :</span> <span class="string">0xb</span></span><br><span class="line">   <span class="attribute">+0x258 GlobalValidationRunlevel</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x25c TimeZoneBiasStamp</span><span class="punctuation"> :</span> <span class="string">0n4</span></span><br><span class="line">   <span class="attribute">+0x260 NtBuildNumber</span><span class="punctuation">    :</span> <span class="string">0x65f4</span></span><br><span class="line">   <span class="attribute">+0x264 NtProductType</span><span class="punctuation">    :</span> <span class="string">1 ( NtProductWinNt )</span></span><br><span class="line">   <span class="attribute">+0x268 ProductTypeIsValid</span><span class="punctuation"> :</span> <span class="string">0x1 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x269 Reserved0</span><span class="punctuation">        :</span> <span class="string">[1]  &quot;&quot;</span></span><br><span class="line">   <span class="attribute">+0x26a NativeProcessorArchitecture</span><span class="punctuation"> :</span> <span class="string">9</span></span><br><span class="line">   <span class="attribute">+0x26c NtMajorVersion</span><span class="punctuation">   :</span> <span class="string">0xa</span></span><br><span class="line">   <span class="attribute">+0x270 NtMinorVersion</span><span class="punctuation">   :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x274 ProcessorFeatures</span><span class="punctuation"> :</span> <span class="string">[64]  &quot;&quot;</span></span><br><span class="line">   <span class="attribute">+0x2b4 Reserved1</span><span class="punctuation">        :</span> <span class="string">0x7ffeffff</span></span><br><span class="line">   <span class="attribute">+0x2b8 Reserved3</span><span class="punctuation">        :</span> <span class="string">0x80000000</span></span><br><span class="line">   <span class="attribute">+0x2bc TimeSlip</span><span class="punctuation">         :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x2c0 AlternativeArchitecture</span><span class="punctuation"> :</span> <span class="string">0 ( StandardDesign )</span></span><br><span class="line">   <span class="attribute">+0x2c4 BootId</span><span class="punctuation">           :</span> <span class="string">0x33</span></span><br><span class="line">   <span class="attribute">+0x2c8 SystemExpirationDate</span><span class="punctuation"> :</span> <span class="string">_LARGE_INTEGER 0x0</span></span><br><span class="line">   <span class="attribute">+0x2d0 SuiteMask</span><span class="punctuation">        :</span> <span class="string">0x110</span></span><br><span class="line">   <span class="attribute">+0x2d4 KdDebuggerEnabled</span><span class="punctuation"> :</span> <span class="string">0x3 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x2d5 MitigationPolicies</span><span class="punctuation"> :</span> <span class="string">0xa &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x2d5 NXSupportPolicy</span><span class="punctuation">  :</span> <span class="string">0y10</span></span><br><span class="line">   <span class="attribute">+0x2d5 SEHValidationPolicy</span><span class="punctuation"> :</span> <span class="string">0y10</span></span><br><span class="line">   <span class="attribute">+0x2d5 CurDirDevicesSkippedForDlls</span><span class="punctuation"> :</span> <span class="string">0y00</span></span><br><span class="line">   <span class="attribute">+0x2d5 Reserved</span><span class="punctuation">         :</span> <span class="string">0y00</span></span><br><span class="line">   <span class="attribute">+0x2d6 CyclesPerYield</span><span class="punctuation">   :</span> <span class="string">0x1d</span></span><br><span class="line">   <span class="attribute">+0x2d8 ActiveConsoleId</span><span class="punctuation">  :</span> <span class="string">1</span></span><br><span class="line">   <span class="attribute">+0x2dc DismountCount</span><span class="punctuation">    :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x2e0 ComPlusPackage</span><span class="punctuation">   :</span> <span class="string">0xffffffff</span></span><br><span class="line">   <span class="attribute">+0x2e4 LastSystemRITEventTickCount</span><span class="punctuation"> :</span> <span class="string">0x24d89</span></span><br><span class="line">   <span class="attribute">+0x2e8 NumberOfPhysicalPages</span><span class="punctuation"> :</span> <span class="string">0xffe5f</span></span><br><span class="line">   <span class="attribute">+0x2ec SafeBootMode</span><span class="punctuation">     :</span> <span class="string">0 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x2ed VirtualizationFlags</span><span class="punctuation"> :</span> <span class="string">0x1 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x2ee Reserved12</span><span class="punctuation">       :</span> <span class="string">[2]  &quot;&quot;</span></span><br><span class="line">   <span class="attribute">+0x2f0 SharedDataFlags</span><span class="punctuation">  :</span> <span class="string">0x10e</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgErrorPortPresent</span><span class="punctuation"> :</span> <span class="string">0y0</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgElevationEnabled</span><span class="punctuation"> :</span> <span class="string">0y1</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgVirtEnabled</span><span class="punctuation">   :</span> <span class="string">0y1</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgInstallerDetectEnabled</span><span class="punctuation"> :</span> <span class="string">0y1</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgLkgEnabled</span><span class="punctuation">    :</span> <span class="string">0y0</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgDynProcessorEnabled</span><span class="punctuation"> :</span> <span class="string">0y0</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgConsoleBrokerEnabled</span><span class="punctuation"> :</span> <span class="string">0y0</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgSecureBootEnabled</span><span class="punctuation"> :</span> <span class="string">0y0</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgMultiSessionSku</span><span class="punctuation"> :</span> <span class="string">0y1</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgMultiUsersInSessionSku</span><span class="punctuation"> :</span> <span class="string">0y0</span></span><br><span class="line">   <span class="attribute">+0x2f0 DbgStateSeparationEnabled</span><span class="punctuation"> :</span> <span class="string">0y0</span></span><br><span class="line">   <span class="attribute">+0x2f0 SpareBits</span><span class="punctuation">        :</span> <span class="string">0y000000000000000000000 (0)</span></span><br><span class="line">   <span class="attribute">+0x2f4 DataFlagsPad</span><span class="punctuation">     :</span> <span class="string">[1] 0</span></span><br><span class="line">   <span class="attribute">+0x2f8 TestRetInstruction</span><span class="punctuation"> :</span> <span class="string">0xc3</span></span><br><span class="line">   <span class="attribute">+0x300 QpcFrequency</span><span class="punctuation">     :</span> <span class="string">0n10000000</span></span><br><span class="line">   <span class="attribute">+0x308 SystemCall</span><span class="punctuation">       :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x30c Reserved2</span><span class="punctuation">        :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x310 FullNumberOfPhysicalPages</span><span class="punctuation"> :</span> <span class="string">0xffe5f</span></span><br><span class="line">   <span class="attribute">+0x318 SystemCallPad</span><span class="punctuation">    :</span> <span class="string">[1] 0</span></span><br><span class="line">   <span class="attribute">+0x320 TickCount</span><span class="punctuation">        :</span> <span class="string">_KSYSTEM_TIME</span></span><br><span class="line">   <span class="attribute">+0x320 TickCountQuad</span><span class="punctuation">    :</span> <span class="string">0x33e4</span></span><br><span class="line">   <span class="attribute">+0x320 ReservedTickCountOverlay</span><span class="punctuation"> :</span> <span class="string">[3] 0x33e4</span></span><br><span class="line">   <span class="attribute">+0x32c TickCountPad</span><span class="punctuation">     :</span> <span class="string">[1] 0</span></span><br><span class="line">   <span class="attribute">+0x330 Cookie</span><span class="punctuation">           :</span> <span class="string">0x4c0dee</span></span><br><span class="line">   <span class="attribute">+0x334 CookiePad</span><span class="punctuation">        :</span> <span class="string">[1] 0</span></span><br><span class="line">   <span class="attribute">+0x338 ConsoleSessionForegroundProcessId</span><span class="punctuation"> :</span> <span class="string">0n6536</span></span><br><span class="line">   <span class="attribute">+0x340 TimeUpdateLock</span><span class="punctuation">   :</span> <span class="string">0x32410</span></span><br><span class="line">   <span class="attribute">+0x348 BaselineSystemTimeQpc</span><span class="punctuation"> :</span> <span class="string">0x00000001`ba5c0849</span></span><br><span class="line">   <span class="attribute">+0x350 BaselineInterruptTimeQpc</span><span class="punctuation"> :</span> <span class="string">0x00000001`ba5c0849</span></span><br><span class="line">   <span class="attribute">+0x358 QpcSystemTimeIncrement</span><span class="punctuation"> :</span> <span class="string">0x80000000`00000000</span></span><br><span class="line">   <span class="attribute">+0x360 QpcInterruptTimeIncrement</span><span class="punctuation"> :</span> <span class="string">0x80000000`00000000</span></span><br><span class="line">   <span class="attribute">+0x368 QpcSystemTimeIncrementShift</span><span class="punctuation"> :</span> <span class="string">0x1 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x369 QpcInterruptTimeIncrementShift</span><span class="punctuation"> :</span> <span class="string">0x1 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x36a UnparkedProcessorCount</span><span class="punctuation"> :</span> <span class="string">8</span></span><br><span class="line">   <span class="attribute">+0x36c EnclaveFeatureMask</span><span class="punctuation"> :</span> <span class="string">[4] 0</span></span><br><span class="line">   <span class="attribute">+0x37c TelemetryCoverageRound</span><span class="punctuation"> :</span> <span class="string">1</span></span><br><span class="line">   <span class="attribute">+0x380 UserModeGlobalLogger</span><span class="punctuation"> :</span> <span class="string">[16] 0</span></span><br><span class="line">   <span class="attribute">+0x3a0 ImageFileExecutionOptions</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x3a4 LangGenerationCount</span><span class="punctuation"> :</span> <span class="string">1</span></span><br><span class="line">   <span class="attribute">+0x3a8 Reserved4</span><span class="punctuation">        :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x3b0 InterruptTimeBias</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x3b8 QpcBias</span><span class="punctuation">          :</span> <span class="string">0xffffffff`e13b5ad0</span></span><br><span class="line">   <span class="attribute">+0x3c0 ActiveProcessorCount</span><span class="punctuation"> :</span> <span class="string">8</span></span><br><span class="line">   <span class="attribute">+0x3c4 ActiveGroupCount</span><span class="punctuation"> :</span> <span class="string">0x1 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x3c5 Reserved9</span><span class="punctuation">        :</span> <span class="string">0 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x3c6 QpcData</span><span class="punctuation">          :</span> <span class="string">0x83</span></span><br><span class="line">   <span class="attribute">+0x3c6 QpcBypassEnabled</span><span class="punctuation"> :</span> <span class="string">0x83 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x3c7 QpcReserved</span><span class="punctuation">      :</span> <span class="string">0 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x3c8 TimeZoneBiasEffectiveStart</span><span class="punctuation"> :</span> <span class="string">_LARGE_INTEGER 0x01dbe45f`c996b395</span></span><br><span class="line">   <span class="attribute">+0x3d0 TimeZoneBiasEffectiveEnd</span><span class="punctuation"> :</span> <span class="string">_LARGE_INTEGER 0x01dc7a6e`845dc000</span></span><br><span class="line">   <span class="attribute">+0x3d8 XState</span><span class="punctuation">           :</span> <span class="string">_XSTATE_CONFIGURATION</span></span><br><span class="line">   <span class="attribute">+0x720 FeatureConfigurationChangeStamp</span><span class="punctuation"> :</span> <span class="string">_KSYSTEM_TIME</span></span><br><span class="line">   <span class="attribute">+0x72c Spare</span><span class="punctuation">            :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x730 UserPointerAuthMask</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x738 Reserved10</span><span class="punctuation">       :</span> <span class="string">[210] 0</span></span><br></pre></td></tr></table></figure><p>308(SystemCall)这里指定了调用的方式，ProcessorFeatures指明了CPU支持的特性。KdDebuggerEnabled指明是否有内核调试器。</p><h3 id="trap-frame">trap frame</h3><p>trap frame是一个保存了R3进程内容的结构体，具体内容如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">6</span><span class="punctuation">:</span> <span class="string">kd&gt; dt nt!_KTRAP_FRAME ffffbd8d`acc674a0</span></span><br><span class="line">   <span class="attribute">+0x000 P1Home</span><span class="punctuation">           :</span> <span class="string">0xffff990e`d2559080</span></span><br><span class="line">   <span class="attribute">+0x008 P2Home</span><span class="punctuation">           :</span> <span class="string">0xffffbd8d`acc67520</span></span><br><span class="line">   <span class="attribute">+0x010 P3Home</span><span class="punctuation">           :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x018 P4Home</span><span class="punctuation">           :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x020 P5</span><span class="punctuation">               :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x028 PreviousMode</span><span class="punctuation">     :</span> <span class="string">1 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x028 InterruptRetpolineState</span><span class="punctuation"> :</span> <span class="string">0x1 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x029 PreviousIrql</span><span class="punctuation">     :</span> <span class="string">0 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x02a FaultIndicator</span><span class="punctuation">   :</span> <span class="string">0 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x02a NmiMsrIbrs</span><span class="punctuation">       :</span> <span class="string">0 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x02b ExceptionActive</span><span class="punctuation">  :</span> <span class="string">0x2 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x02c MxCsr</span><span class="punctuation">            :</span> <span class="string">0x1fa0</span></span><br><span class="line">   <span class="attribute">+0x030 Rax</span><span class="punctuation">              :</span> <span class="string">0x1004</span></span><br><span class="line">   <span class="attribute">+0x038 Rcx</span><span class="punctuation">              :</span> <span class="string">0x000000f0`786ff078</span></span><br><span class="line">   <span class="attribute">+0x040 Rdx</span><span class="punctuation">              :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x048 R8</span><span class="punctuation">               :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x050 R9</span><span class="punctuation">               :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x058 R10</span><span class="punctuation">              :</span> <span class="string">0x000000f0`786ff078</span></span><br><span class="line">   <span class="attribute">+0x060 R11</span><span class="punctuation">              :</span> <span class="string">0x000000f0`786ff078</span></span><br><span class="line">   <span class="attribute">+0x068 GsBase</span><span class="punctuation">           :</span> <span class="string">0x000000f0`784d6000</span></span><br><span class="line">   <span class="attribute">+0x068 GsSwap</span><span class="punctuation">           :</span> <span class="string">0x000000f0`784d6000</span></span><br><span class="line">   <span class="attribute">+0x070 Xmm0</span><span class="punctuation">             :</span> <span class="string">_M128A</span></span><br><span class="line">   <span class="attribute">+0x080 Xmm1</span><span class="punctuation">             :</span> <span class="string">_M128A</span></span><br><span class="line">   <span class="attribute">+0x090 Xmm2</span><span class="punctuation">             :</span> <span class="string">_M128A</span></span><br><span class="line">   <span class="attribute">+0x0a0 Xmm3</span><span class="punctuation">             :</span> <span class="string">_M128A</span></span><br><span class="line">   <span class="attribute">+0x0b0 Xmm4</span><span class="punctuation">             :</span> <span class="string">_M128A</span></span><br><span class="line">   <span class="attribute">+0x0c0 Xmm5</span><span class="punctuation">             :</span> <span class="string">_M128A</span></span><br><span class="line">   <span class="attribute">+0x0d0 FaultAddress</span><span class="punctuation">     :</span> <span class="string">0x00007fff`1adfc198</span></span><br><span class="line">   <span class="attribute">+0x0d0 ContextRecord</span><span class="punctuation">    :</span> <span class="string">0x00007fff`1adfc198</span></span><br><span class="line">   <span class="attribute">+0x0d8 Dr0</span><span class="punctuation">              :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x0e0 Dr1</span><span class="punctuation">              :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x0e8 Dr2</span><span class="punctuation">              :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x0f0 Dr3</span><span class="punctuation">              :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x0f8 Dr6</span><span class="punctuation">              :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x100 Dr7</span><span class="punctuation">              :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x0d8 ShadowStackFrame</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x0e0 Spare</span><span class="punctuation">            :</span> <span class="string">[5] 0</span></span><br><span class="line">   <span class="attribute">+0x108 DebugControl</span><span class="punctuation">     :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x110 LastBranchToRip</span><span class="punctuation">  :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x118 LastBranchFromRip</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x120 LastExceptionToRip</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x128 LastExceptionFromRip</span><span class="punctuation"> :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x130 SegDs</span><span class="punctuation">            :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x132 SegEs</span><span class="punctuation">            :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x134 SegFs</span><span class="punctuation">            :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x136 SegGs</span><span class="punctuation">            :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x138 TrapFrame</span><span class="punctuation">        :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x140 NmiPreviousSpecCtrl</span><span class="punctuation"> :</span> <span class="string">0x786ff078</span></span><br><span class="line">   <span class="attribute">+0x144 NmiPreviousSpecCtrlPad</span><span class="punctuation"> :</span> <span class="string">0xf0</span></span><br><span class="line">   <span class="attribute">+0x140 Rbx</span><span class="punctuation">              :</span> <span class="string">0x000000f0`786ff078</span></span><br><span class="line">   <span class="attribute">+0x148 Rdi</span><span class="punctuation">              :</span> <span class="string">0x00000242`c8c80a60</span></span><br><span class="line">   <span class="attribute">+0x150 Rsi</span><span class="punctuation">              :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x158 Rbp</span><span class="punctuation">              :</span> <span class="string">0x000000f0`786ff099</span></span><br><span class="line">   <span class="attribute">+0x160 ErrorCode</span><span class="punctuation">        :</span> <span class="string">4</span></span><br><span class="line">   <span class="attribute">+0x160 ExceptionFrame</span><span class="punctuation">   :</span> <span class="string">4</span></span><br><span class="line">   <span class="attribute">+0x168 Rip</span><span class="punctuation">              :</span> <span class="string">0x00007fff`1e1c1314</span></span><br><span class="line">   <span class="attribute">+0x170 SegCs</span><span class="punctuation">            :</span> <span class="string">0x33</span></span><br><span class="line">   <span class="attribute">+0x172 Fill0</span><span class="punctuation">            :</span> <span class="string">0 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x173 Logging</span><span class="punctuation">          :</span> <span class="string">0 &#x27;&#x27;</span></span><br><span class="line">   <span class="attribute">+0x174 Fill1</span><span class="punctuation">            :</span> <span class="string">[2] 0</span></span><br><span class="line">   <span class="attribute">+0x178 EFlags</span><span class="punctuation">           :</span> <span class="string">0x246</span></span><br><span class="line">   <span class="attribute">+0x17c Fill2</span><span class="punctuation">            :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x180 Rsp</span><span class="punctuation">              :</span> <span class="string">0x000000f0`786fef88</span></span><br><span class="line">   <span class="attribute">+0x188 SegSs</span><span class="punctuation">            :</span> <span class="string">0x2b</span></span><br><span class="line">   <span class="attribute">+0x18a Fill3</span><span class="punctuation">            :</span> <span class="string">0</span></span><br><span class="line">   <span class="attribute">+0x18c Fill4</span><span class="punctuation">            :</span> <span class="string">0</span></span><br></pre></td></tr></table></figure><p>它由R0维护</p><p>其作用看下一节</p><h3 id="KiSystemCall64">KiSystemCall64</h3><p>上面说到syscall和sysret不会保存栈指针，在intel-IA32手册中说：这个步骤由操作系统来实现，指令只是用来切换CPL。</p><p>使用syscall会固定进入KiSystemCall64函数（由IA32_LSTAR加载）,如果开启了内核页表隔离KPTI则会进入KiSystemCall64Shadow，其中Shadow函数在经过自己的检查和初始化（在这之中会进行对trap frame的读写）后进入KiSystemCall64的KiSystemServiceUser标签。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kd</span>&gt; rdmsr <span class="number">0</span>xc0000082</span><br><span class="line"><span class="attribute">msr</span>[c0000082] = fffff803`da88c040</span><br><span class="line"><span class="attribute">kd</span>&gt; u fffff803`da88c040</span><br><span class="line"><span class="attribute">nt</span>!KiSystemCall64:</span><br><span class="line"><span class="attribute">fffff803</span>`da88c040 <span class="number">0</span>f01f8          swapgs</span><br><span class="line"><span class="attribute">fffff803</span>`da88c043 <span class="number">654889242510000000</span> mov   qword ptr gs:[<span class="number">10</span>h],rsp</span><br><span class="line"><span class="attribute">fffff803</span>`da88c04c <span class="number">65488</span>b2425a8010000 mov   rsp,qword ptr gs:[<span class="number">1</span>A8h]</span><br><span class="line"><span class="attribute">fffff803</span>`da88c055 <span class="number">6</span>a2b            push    <span class="number">2</span>Bh</span><br><span class="line"><span class="attribute">fffff803</span>`da88c057 <span class="number">65</span>ff342510000000 push    qword ptr gs:[<span class="number">10</span>h]</span><br><span class="line"><span class="attribute">fffff803</span>`da88c05f <span class="number">4153</span>            push    r11</span><br><span class="line"><span class="attribute">fffff803</span>`da88c061 <span class="number">6</span>a33            push    <span class="number">33</span>h</span><br><span class="line"><span class="attribute">fffff803</span>`da88c063 <span class="number">51</span>              push    rcx</span><br></pre></td></tr></table></figure><p>KiSystemCall64可以在ntoskrnl.exe，也就是Windows内核实现文件中查看。ntoskrnl.exe也可能是ntkrpamp.exe这说明cpu支持多核</p><p>KiSystemCall64首先进行了栈切换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">swapgs</span><br><span class="line">mov gs:10h,rsp</span><br><span class="line">mov rsp,gs:1A8h</span><br><span class="line"></span><br><span class="line">000                 swapgs</span><br><span class="line">000                 mov     gs:10h, rsp</span><br><span class="line">000                 mov     rsp, gs:1A8h</span><br></pre></td></tr></table></figure><p>swapgs切换了gs寄存器指向的内容，在r3中，gs指向TEB，而在内核中，其需要指向KPCR。KPCR地址记录在MSR寄存器的IA32_GS_BASE域。</p><p>然后，在内核栈上构造trap frame结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">000                 push    2Bh ; &#x27;+&#x27;</span><br><span class="line">000                 push    qword ptr gs:10h</span><br><span class="line">000                 push    r11</span><br><span class="line">000                 push    33h ; &#x27;3&#x27;</span><br><span class="line">000                 push    rcx</span><br></pre></td></tr></table></figure><p>然后是和shadow stack有关的检查，其中<code>setssbsy</code>标记或设置与影子栈相关的状态，<code>rstorssp [rcx]</code>与<code>saveprevssp</code>恢复或保存影子栈指针。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">000                 mov     rcx, gs:95A8h</span><br><span class="line">000                 test    rcx, rcx</span><br><span class="line">000                 jz      short loc_140429A3E</span><br><span class="line">000                 setssbsy</span><br><span class="line">000                 rstorssp qword ptr [rcx]</span><br><span class="line">000                 saveprevssp</span><br></pre></td></tr></table></figure><p>然后继续填充_KTRAP_FRAME，似乎还等同于创建栈帧？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov     rcx, r10</span><br><span class="line">sub     rsp, 8</span><br><span class="line">push    rbp</span><br><span class="line">sub     rsp, 158h</span><br><span class="line">lea     rbp, [rsp+190h+var_110]</span><br><span class="line">mov     [rbp+0C0h], rbx</span><br><span class="line">mov     [rbp+0C8h], rdi</span><br><span class="line">mov     [rbp+0D0h], rsi</span><br></pre></td></tr></table></figure><p>然后是KeSmapEnabled检查，如果有，set AC flag，使得内核可以访问用户空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test    byte ptr cs:KeSmapEnabled, 0FFh</span><br><span class="line">jz      short loc_140429A7F</span><br><span class="line">test    byte ptr [rbp+0F0h], 1</span><br><span class="line">jz      short loc_140429A7F</span><br><span class="line">stac</span><br><span class="line">loc_140429A7F:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继续填充_KTRAP_FRAME</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mov     [rbp-50h], rax</span><br><span class="line">mov     [rbp-48h], rcx</span><br><span class="line">mov     [rbp-40h], rdx</span><br><span class="line">mov     rcx, gs:188h</span><br><span class="line">mov     rcx, [rcx+220h]</span><br><span class="line">mov     rcx, [rcx+9E0h]</span><br><span class="line">mov     gs:858h, rcx</span><br><span class="line">mov     cx, gs:850h</span><br><span class="line">mov     gs:852h, cx</span><br><span class="line">mov     cx, gs:860h</span><br><span class="line">mov     gs:854h, cx</span><br></pre></td></tr></table></figure><p>似乎和分支预测有关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">movzx   eax, word ptr gs:866h</span><br><span class="line">cmp     gs:864h, ax</span><br><span class="line">jz      short loc_140429AF5</span><br><span class="line">mov     gs:864h, ax</span><br><span class="line">mov     ecx, 48h ; &#x27;H&#x27;</span><br><span class="line">xor     edx, edx</span><br><span class="line">wrmsr</span><br><span class="line">loc_140429AF5:</span><br></pre></td></tr></table></figure><p>后面一堆add和call似乎是和硬件有关的东西</p><p>然后是shadow stack相关的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loc_140429C45:</span><br><span class="line">    add     rsp, 8</span><br><span class="line">    mov     eax, 0DADAh</span><br><span class="line">    test    byte ptr gs:862h, 8</span><br><span class="line">    jz      short loc_140429C60</span><br><span class="line">    mov     al, 20h ; &#x27; &#x27;</span><br><span class="line">    incsspq rax</span><br></pre></td></tr></table></figure><p>分支预测相关以及通过各种检查跳转到KiSystemServiceUser</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">loc_140429C60:</span><br><span class="line">    test    edx, 200h</span><br><span class="line">    jz      short loc_140429C6D</span><br><span class="line">    call    KiFlushBhbDuringTrapEntryOrExit</span><br><span class="line">loc_140429C6D:</span><br><span class="line">    lfence</span><br><span class="line">    mov     byte ptr gs:856h, 0</span><br><span class="line">    cmp     cs:KiUserCetPl3SspCanonicalizeUpperMask, 0</span><br><span class="line">    jz      short KiSystemServiceUser</span><br><span class="line">    mov     ecx, 6A7h</span><br><span class="line">    rdmsr</span><br><span class="line">    cmp     edx, 0</span><br><span class="line">    jz      short KiSystemServiceUser</span><br><span class="line">    mov     ecx, edx</span><br><span class="line">    and     edx, cs:KiUserCetPl3SspCanonicalizeUpperMask</span><br><span class="line">    cmp     edx, ecx</span><br><span class="line">    jz      short KiSystemServiceUser</span><br><span class="line">    mov     ecx, 6A7h</span><br><span class="line">    wrmsr</span><br></pre></td></tr></table></figure><p>然后就进入了KiSystemServiceUser，准备调用。在这里，大致进行了优化读写，保存MXCSR寄存器，判断异步扩展</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> KiSystemServiceUser:</span><br><span class="line">   mov     byte ptr [rbp-55h], 2</span><br><span class="line">   mov     rbx, gs:188h</span><br><span class="line">   prefetchw byte ptr [rbx+90h]</span><br><span class="line">   stmxcsr dword ptr [rbp-54h];sse处理</span><br><span class="line">   ldmxcsr dword ptr gs:180h;sse处理</span><br><span class="line">   cmp     byte ptr [rbx+3], 0</span><br><span class="line">   mov     word ptr [rbp+80h], 0</span><br><span class="line">   jz      short loc_140429D48</span><br><span class="line">   test    byte ptr [rbx+3], 3</span><br><span class="line">   mov     [rbp-38h], r8</span><br><span class="line">   mov     [rbp-30h], r9</span><br><span class="line">   jz      short loc_140429CE4;不确定检查了什么，可能是检查调试，如果是调试状态执行后面的内容</span><br><span class="line">   call    KiSaveDebugRegisterState</span><br><span class="line">   test    byte ptr [rbx+3], 24h</span><br><span class="line">   jz      short loc_140429D40;似乎是判断是否需要保存寄存器？不确定</span><br><span class="line">   mov     [rbp-20h], r10</span><br><span class="line">   mov     [rbp-28h], r10</span><br><span class="line">   movaps  xmmword ptr [rbp-10h], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+0], xmm1</span><br><span class="line">   movaps  xmmword ptr [rbp+10h], xmm2</span><br><span class="line">   movaps  xmmword ptr [rbp+20h], xmm3</span><br><span class="line">   movaps  xmmword ptr [rbp+30h], xmm4</span><br><span class="line">   movaps  xmmword ptr [rbp+40h], xmm5</span><br><span class="line">   sti ;该指令恢复中断，之前进入时通过mask与屏蔽了中断效果</span><br><span class="line">   mov     rcx, rsp</span><br><span class="line">   call    PsSyscallProviderDispatch</span><br><span class="line">   cmp     al, 1</span><br><span class="line">   jz      short loc_140429D40</span><br><span class="line">   mov     rax, [rbp-50h]</span><br><span class="line">   jl      short loc_140429D31</span><br><span class="line">   mov     ecx, 0C000001Ch</span><br><span class="line">   xor     edx, edx</span><br><span class="line">   mov     r8, [rbp+0E8h]</span><br><span class="line">   call    KiExceptionDispatch</span><br><span class="line">   int     3               ; 主动触发int 3断点</span><br><span class="line">   test    byte ptr [rbx+3], 4</span><br><span class="line">   jz      KiSystemServiceExit</span><br><span class="line">   jmp     KiSystemServiceExitPico</span><br><span class="line">loc_140429D40:</span><br><span class="line">   mov     r8, [rbp-38h]</span><br><span class="line">   mov     r9, [rbp-30h]</span><br><span class="line">loc_140429D48:</span><br><span class="line">   mov     rax, [rbp-50h]</span><br><span class="line">   mov     rcx, [rbp-48h]</span><br><span class="line">   mov     rdx, [rbp-40h]</span><br><span class="line">   sti ;该指令恢复中断，之前进入时通过mask与屏蔽了中断效果</span><br></pre></td></tr></table></figure><p>然后就是解析服务表了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">   mov     [rbx+88h], rcx</span><br><span class="line">   mov     [rbx+80h], eax</span><br><span class="line">   db      66h, 66h, 66h, 66h, 66h, 66h;疑似会被识别未冗余前缀跳过执行</span><br><span class="line">   nop     word ptr [rax+rax+00000000h]</span><br><span class="line">KiSystemServiceStart:                           ; .data:0000000140C02EF0↓o</span><br><span class="line">   mov     [rbx+90h], rsp</span><br><span class="line">   mov     edi, eax</span><br><span class="line">   shr     edi, 7</span><br><span class="line">   and     edi, 20h;右移7再and20相当于取第12位,但是这里是and，所以edi等于0x20或者0</span><br><span class="line">   and     eax, 0FFFh;取低三位</span><br><span class="line"></span><br><span class="line">KiSystemServiceRepeat:                  ; CODE XREF: KiSystemCall64+C84↓j</span><br><span class="line">   lea     r10, KeServiceDescriptorTable;非GUI线程使用</span><br><span class="line">   lea     r11, KeServiceDescriptorTableShadow;GUI线程使用</span><br><span class="line">   test    dword ptr [rbx+78h], 80h</span><br><span class="line">   jz      short loc_140429DAE;如果不是GUI线程</span><br><span class="line">   test    dword ptr [rbx+78h], 200000h</span><br><span class="line">   jz      short loc_140429DAB;如果不是受限制的GUI线程</span><br><span class="line">   lea     r11, KeServiceDescriptorTableFilter</span><br><span class="line"></span><br><span class="line">loc_140429DAB:                          ; CODE XREF: KiSystemCall64+3A2↑j</span><br><span class="line">   mov     r10, r11</span><br><span class="line"></span><br><span class="line">loc_140429DAE:                          ; CODE XREF: KiSystemCall64+399↑j</span><br><span class="line">   cmp     eax, [r10+rdi+10h]</span><br><span class="line">   jnb     loc_14042A64B;eax低三位是否小于table+edi+0x10，应该是判断长度是否小于表长，如果大于直接调用退出的代码</span><br><span class="line">   mov     r10, [r10+rdi]</span><br><span class="line">   movsxd  r11, dword ptr [r10+rax*4];解密运算？*(*(table+0x20/0x0)+code&amp;0xfff)</span><br><span class="line">   mov     rax, r11</span><br><span class="line">   sar     r11, 4</span><br><span class="line">   add     r10, r11;最后是*(table+0x20/0x0)[*(*(table+0x20/0x0)+code&amp;0xfff)&gt;&gt;4]的值，r10是例程地址</span><br><span class="line">   cmp     edi, 20h ;判断GUI</span><br><span class="line">   jnz     short loc_140429E20;如果不是，跳转</span><br><span class="line">   ;感觉上，r10一开始是基指针，加rdi之后才是服务表</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   mov     r11, [rbx+0F0h]</span><br><span class="line"></span><br><span class="line">KiSystemServiceGdiTebAccess:            ; DATA XREF: KiSystemServiceHandler+D↑o</span><br><span class="line">   cmp     dword ptr [r11+1740h], 0</span><br><span class="line">   jz      short loc_140429E20</span><br><span class="line">   mov     [rbp-50h], rax</span><br><span class="line">   mov     [rbp-48h], rcx</span><br><span class="line">   mov     [rbp-40h], rdx</span><br><span class="line">   mov     rbx, r8</span><br><span class="line">   mov     rdi, r9</span><br><span class="line">   mov     rsi, r10</span><br><span class="line">   mov     ecx, 7</span><br><span class="line">   xor     edx, edx</span><br><span class="line">   xor     r8, r8</span><br><span class="line">   xor     r9, r9</span><br><span class="line">   call    PsInvokeWin32Callout</span><br><span class="line">   mov     rax, [rbp-50h]</span><br><span class="line">   mov     rcx, [rbp-48h]</span><br><span class="line">   mov     rdx, [rbp-40h]</span><br><span class="line">   mov     r8, rbx</span><br><span class="line">   mov     r9, rdi</span><br><span class="line">   mov     r10, rsi</span><br><span class="line">   nop     dword ptr [rax]</span><br><span class="line"></span><br><span class="line">loc_140429E20:                     ; CODE XREF: KiSystemCall64+3CE↑j</span><br><span class="line">                           ; KiSystemCall64+3DF↑j</span><br><span class="line">   and     eax, 0Fh</span><br><span class="line">   jz      KiSystemServiceCopyEnd;如果低四位是0跳转，似乎表明参数个数</span><br><span class="line">   shl     eax, 3</span><br><span class="line">   lea     rsp, [rsp-70h];分配新空间存参数，最多14个qword</span><br><span class="line">   lea     rdi, [rsp+100h+var_E8]</span><br><span class="line">   mov     rsi, [rbp+100h]</span><br><span class="line">   lea     rsi, [rsi+20h]</span><br><span class="line">   test    byte ptr [rbp+0F0h], 1</span><br><span class="line">   jz      short loc_140429E60</span><br><span class="line">   cmp     rsi, cs:MmUserProbeAddress</span><br><span class="line">   cmovnb  rsi, cs:MmUserProbeAddress</span><br><span class="line">   nop     dword ptr [rax+00000000h]</span><br><span class="line"></span><br><span class="line">loc_140429E60:                          ; CODE XREF: KiSystemCall64+448↑j</span><br><span class="line">   lea     r11, KiSystemServiceCopyEnd</span><br><span class="line">   sub     r11, rax;减去参数个数左移3的值即*8,下面CopyStart里面每一个参数复制需要8字节</span><br><span class="line">   jmp     r11</span><br><span class="line">   align 10h</span><br><span class="line">KiSystemServiceCopyStart:</span><br><span class="line">   mov     rax, [rsi+70h]</span><br><span class="line">   mov     [rdi+70h], rax</span><br><span class="line">   mov     rax, [rsi+68h]</span><br><span class="line">   mov     [rdi+68h], rax</span><br><span class="line">   mov     rax, [rsi+60h]</span><br><span class="line">   mov     [rdi+60h], rax</span><br><span class="line">   mov     rax, [rsi+58h]</span><br><span class="line">   mov     [rdi+58h], rax</span><br><span class="line">   mov     rax, [rsi+50h]</span><br><span class="line">   mov     [rdi+50h], rax</span><br><span class="line">   mov     rax, [rsi+48h]</span><br><span class="line">   mov     [rdi+48h], rax</span><br><span class="line">   mov     rax, [rsi+40h]</span><br><span class="line">   mov     [rdi+40h], rax</span><br><span class="line">   mov     rax, [rsi+38h]</span><br><span class="line">   mov     [rdi+38h], rax</span><br><span class="line">   mov     rax, [rsi+30h]</span><br><span class="line">   mov     [rdi+30h], rax</span><br><span class="line">   mov     rax, [rsi+28h]</span><br><span class="line">   mov     [rdi+28h], rax</span><br><span class="line">   mov     rax, [rsi+20h]</span><br><span class="line">   mov     [rdi+20h], rax</span><br><span class="line">   mov     rax, [rsi+18h]</span><br><span class="line">   mov     [rdi+18h], rax</span><br><span class="line">   mov     rax, [rsi+10h]</span><br><span class="line">   mov     [rdi+10h], rax</span><br><span class="line">   mov     rax, [rsi+8]</span><br><span class="line">   mov     [rdi+8], rax</span><br><span class="line">KiSystemServiceCopyEnd:                 ; CODE XREF: KiSystemCall64+423↑j</span><br><span class="line">   test    cs:KiDynamicTraceMask, 1</span><br><span class="line">   jnz     loc_14042A6E9;和trance有关，会记录CallSystemEntry</span><br><span class="line">   test    dword ptr cs:PerfGlobalGroupMask+8, 40h</span><br><span class="line">   jnz     loc_14042A75D;和PerfInfoLog有关</span><br><span class="line">   mov     rax, r10</span><br><span class="line">   call    rax;调用例程函数</span><br><span class="line">   nop     dword ptr [rax]</span><br><span class="line">loc_140429F08:                          ; CODE XREF: KiSystemCall64+D58↓j</span><br><span class="line">   inc     dword ptr gs:2EB8h</span><br></pre></td></tr></table></figure><p>执行完之后就是恢复寄存器，中间还调用了USERAPC，好像基本都是反着写的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">loc_140429F08:                          ; CODE XREF: KiSystemCall64+D58↓j</span><br><span class="line">   inc     dword ptr gs:2EB8h</span><br><span class="line">KiSystemServiceExit:                    ; CODE XREF: KiSystemCall64+335↑j</span><br><span class="line">   mov     rbx, [rbp+0C0h]</span><br><span class="line">   mov     rdi, [rbp+0C8h]</span><br><span class="line">   mov     rsi, [rbp+0D0h]</span><br><span class="line">   mov     r11, gs:188h</span><br><span class="line"></span><br><span class="line">   test    byte ptr [rbp+0F0h], 1</span><br><span class="line">   jz      loc_14042A30F;如果是内核的直接调用</span><br><span class="line">   mov     rcx, cr8</span><br><span class="line">   or      cl, [r11+24Ah]</span><br><span class="line">   or      ecx, [r11+1E4h]</span><br><span class="line">   jnz     loc_14042A6B5</span><br><span class="line">   cli</span><br><span class="line">loc_140429F54:                          ; CODE XREF: KiSystemCall64+5BD↓j</span><br><span class="line">   mov     rcx, gs:188h</span><br><span class="line">   test    byte ptr [rcx+0C2h], 3</span><br><span class="line">   jz      short loc_140429FBF</span><br><span class="line">   mov     [rbp-50h], rax;将rax放入trap_frame.rax</span><br><span class="line">   xor     eax, eax</span><br><span class="line">   mov     [rbp-48h], rax</span><br><span class="line">   mov     [rbp-40h], rax</span><br><span class="line">   mov     [rbp-38h], rax</span><br><span class="line">   mov     [rbp-30h], rax</span><br><span class="line">   mov     [rbp-28h], rax</span><br><span class="line">   mov     [rbp-20h], rax</span><br><span class="line">   pxor    xmm0, xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp-10h], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+0], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+10h], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+20h], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+30h], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+40h], xmm0</span><br><span class="line">   mov     ecx, 1</span><br><span class="line">   mov     cr8, rcx</span><br><span class="line">   sti</span><br><span class="line">   call    KiInitiateUserApc</span><br><span class="line">   cli</span><br><span class="line">   mov     ecx, 0</span><br><span class="line">   mov     cr8, rcx</span><br><span class="line">   mov     rax, [rbp-50h]</span><br><span class="line">   jmp     short loc_140429F54</span><br><span class="line">loc_140429FBF:                          ; CODE XREF: KiSystemCall64+564↑j</span><br><span class="line">   test    byte ptr gs:86Ch, 2</span><br><span class="line">   jz      short loc_140429FD9</span><br><span class="line">   mov     [rbp-50h], rax</span><br><span class="line">   xor     ecx, ecx</span><br><span class="line">   call    KiUpdateStibpPairing</span><br><span class="line">   mov     rax, [rbp-50h]</span><br><span class="line">loc_140429FD9:                          ; CODE XREF: KiSystemCall64+5C8↑j</span><br><span class="line">   mov     rcx, gs:188h</span><br><span class="line"></span><br><span class="line">   test    dword ptr [rcx], 8000000h</span><br><span class="line">   jz      short loc_14042A029</span><br><span class="line">   mov     [rbp-50h], rax</span><br><span class="line">   xor     eax, eax</span><br><span class="line">   mov     [rbp-48h], rax</span><br><span class="line">   mov     [rbp-40h], rax</span><br><span class="line">   mov     [rbp-38h], rax</span><br><span class="line">   mov     [rbp-30h], rax</span><br><span class="line">   mov     [rbp-28h], rax</span><br><span class="line">   mov     [rbp-20h], rax</span><br><span class="line">   pxor    xmm0, xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp-10h], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+0], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+10h], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+20h], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+30h], xmm0</span><br><span class="line">   movaps  xmmword ptr [rbp+40h], xmm0</span><br><span class="line">   call    KiRestoreSetContextState</span><br><span class="line">loc_14042A029:                          ; CODE XREF: KiSystemCall64+5E8↑j</span><br><span class="line">   mov     rcx, gs:188h</span><br><span class="line"></span><br><span class="line">   test    dword ptr [rcx], 10000h</span><br><span class="line">   jz      short loc_14042A056</span><br><span class="line">   mov     [rbp-50h], rax</span><br><span class="line">   test    byte ptr [rcx+2], 1</span><br><span class="line">   jz      short loc_14042A052</span><br><span class="line">   call    KiCopyCounters</span><br><span class="line">   mov     rcx, gs:188h</span><br><span class="line"></span><br><span class="line">loc_14042A052:                          ; CODE XREF: KiSystemCall64+642↑j</span><br><span class="line">   mov     rax, [rbp-50h]</span><br><span class="line"></span><br><span class="line">loc_14042A056:                          ; CODE XREF: KiSystemCall64+638↑j</span><br><span class="line">   ldmxcsr dword ptr [rbp-54h]</span><br><span class="line">   xor     r10, r10</span><br><span class="line">   cmp     word ptr [rbp+80h], 0</span><br><span class="line">   jz      short loc_14042A0A8</span><br><span class="line">   mov     [rbp-50h], rax</span><br><span class="line">   call    KiRestoreDebugRegisterState</span><br><span class="line">   mov     rax, gs:188h</span><br><span class="line"></span><br><span class="line">   mov     rax, [rax+0B8h]</span><br><span class="line">   mov     rax, [rax+3D8h]</span><br><span class="line">   or      rax, rax</span><br><span class="line">   jz      short loc_14042A0A4</span><br><span class="line">   cmp     word ptr [rbp+0F0h], 33h ; &#x27;3&#x27;</span><br><span class="line">   jnz     short loc_14042A0A4</span><br><span class="line">   mov     r10, [rbp+0E8h]</span><br><span class="line">   mov     [rbp+0E8h], rax</span><br><span class="line"></span><br><span class="line">loc_14042A0A4:                          ; CODE XREF: KiSystemCall64+68A↑j</span><br><span class="line">   mov     rax, [rbp-50h]</span><br><span class="line"></span><br><span class="line">loc_14042A0A8:                          ; CODE XREF: KiSystemCall64+665↑j</span><br><span class="line">   mov     rcx, gs:188h</span><br><span class="line"></span><br><span class="line">   bt      dword ptr [rcx+74h], 16h</span><br><span class="line">   jnb     short loc_14042A0E2</span><br><span class="line">   xor     ecx, ecx</span><br><span class="line">   rdsspq  rcx</span><br><span class="line">   mov     r8, gs:95A8h</span><br><span class="line">   add     r8, 8</span><br><span class="line">   cmp     rcx, r8</span><br><span class="line">   jnz     short loc_14042A0E2</span><br><span class="line">   mov     rcx, gs:95A0h</span><br><span class="line">   rstorssp qword ptr [rcx]</span><br><span class="line">   saveprevssp</span><br><span class="line">loc_14042A0E2:                          ; CODE XREF: KiSystemCall64+6B6↑j</span><br><span class="line">    mov     [rbp-50h], rax</span><br><span class="line">    mov     byte ptr gs:856h, 0</span><br><span class="line">    movzx   eax, word ptr gs:86Ah</span><br><span class="line">    cmp     gs:864h, ax</span><br><span class="line">    jz      short loc_14042A115</span><br><span class="line">    mov     gs:864h, ax</span><br><span class="line">    mov     ecx, 48h ; &#x27;H&#x27;</span><br><span class="line">    xor     edx, edx</span><br><span class="line">    wrmsr</span><br><span class="line">loc_14042A115:                          ; CODE XREF: KiSystemCall64+701↑j</span><br><span class="line">    btr     word ptr gs:860h, 2</span><br><span class="line"> </span><br><span class="line">    jnb     short loc_14042A130</span><br><span class="line">    mov     eax, 1</span><br><span class="line">    xor     edx, edx</span><br><span class="line">    mov     ecx, 49h ; &#x27;I&#x27;</span><br><span class="line">    wrmsr</span><br><span class="line"> </span><br><span class="line">loc_14042A130:                          ; CODE XREF: KiSystemCall64+720↑j</span><br><span class="line">    btr     word ptr gs:860h, 5</span><br><span class="line">    jnb     loc_14042A278</span><br><span class="line">    call    loc_14042A254;硬件相关检查</span><br></pre></td></tr></table></figure><p>然后是结束部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">loc_14042A25D:                          ; CODE XREF: KiSystemCall64+74A↑p</span><br><span class="line">     add     rsp, 8</span><br><span class="line">     mov     eax, 0DADAh</span><br><span class="line">     test    byte ptr gs:862h, 8</span><br><span class="line"></span><br><span class="line">     jz      short loc_14042A278</span><br><span class="line">     mov     al, 20h ; &#x27; &#x27;</span><br><span class="line">     incsspq rax</span><br><span class="line"></span><br><span class="line">loc_14042A278:                          ; CODE XREF: KiSystemCall64+73B↑j</span><br><span class="line">                                        ; KiSystemCall64+86F↑j</span><br><span class="line">     test    word ptr gs:860h, 80h</span><br><span class="line">     jz      short loc_14042A291</span><br><span class="line">     xor     eax, eax</span><br><span class="line">     xor     edx, edx</span><br><span class="line">     mov     ecx, 1</span><br><span class="line">     div     rcx</span><br><span class="line"></span><br><span class="line">loc_14042A291:                          ; CODE XREF: KiSystemCall64+883↑j</span><br><span class="line">     mov     rax, [rbp-50h]</span><br><span class="line">     mov     r8, [rbp+100h];RSP</span><br><span class="line">     mov     r9, [rbp+0D8h];RBP</span><br><span class="line">     xor     edx, edx</span><br><span class="line">     pxor    xmm0, xmm0</span><br><span class="line">     pxor    xmm1, xmm1</span><br><span class="line">     pxor    xmm2, xmm2</span><br><span class="line">     pxor    xmm3, xmm3</span><br><span class="line">     pxor    xmm4, xmm4</span><br><span class="line">     pxor    xmm5, xmm5</span><br><span class="line">     mov     rcx, [rbp+0E8h];RIP</span><br><span class="line">     mov     r11, [rbp+0F8h];EFLAG</span><br><span class="line">     test    cs:KiKvaShadow, 1</span><br><span class="line">     jnz     KiKernelSysretExit;如果有内核页表隔离KPTI</span><br><span class="line">     mov     rbp, r9</span><br><span class="line">     mov     rsp, r8</span><br><span class="line">     xor     r9d, r9d</span><br><span class="line">     rdsspq  r9</span><br><span class="line">     test    r9, r9</span><br><span class="line">     jz      short loc_14042A2F3</span><br><span class="line">     clrssbsy qword ptr [r9]</span><br><span class="line">     xor     r9d, r9d</span><br><span class="line"></span><br><span class="line">loc_14042A2F3:                          ; CODE XREF: KiSystemCall64+8E9↑j</span><br><span class="line">     test    word ptr gs:860h, 100h</span><br><span class="line"></span><br><span class="line">     jz      short loc_14042A309</span><br><span class="line">     verw    word ptr gs:0A02Ah</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loc_14042A309:                          ; CODE XREF: KiSystemCall64+8FE↑j</span><br><span class="line">     swapgs ;切换gs寄存器</span><br><span class="line">     sysret ;退出内核</span><br><span class="line">     </span><br><span class="line">loc_14042A30F:                          ; CODE XREF: KiSystemCall64+535↑j</span><br><span class="line">;如果是内核的直接调用</span><br><span class="line">     mov     rdx, [rbp+0B8h]</span><br><span class="line">     mov     [r11+90h], rdx</span><br><span class="line">     mov     dl, [rbp-58h]</span><br><span class="line">     mov     [r11+232h], dl</span><br><span class="line">     cli</span><br><span class="line">     mov     rsp, rbp</span><br><span class="line">     mov     rbp, [rbp+0D8h]</span><br><span class="line">     mov     rsp, [rsp+90h+arg_68]</span><br><span class="line">     sti</span><br><span class="line">     retn</span><br></pre></td></tr></table></figure><h3 id="SSDT">SSDT</h3><p>KeServiceDescriptorTable是系统服务描述符表，具体结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SERVICE_DESCIPTOR_TABLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PULONG ServiceTableBase;        <span class="comment">// SSDT基址，8字节大小</span></span><br><span class="line">    PVOID ServiceCounterTableBase;  <span class="comment">// SSDT中服务被调用次数计数器，8字节大小</span></span><br><span class="line">    ULONGLONG NumberOfService;      <span class="comment">// SSDT服务函数的个数，8字节大小</span></span><br><span class="line">    PVOID ParamTableBase;           <span class="comment">// 系统服务参数表基址，8字节大小。实际指向的数组是以字节为单位的记录着对应服务函数的参数个数</span></span><br><span class="line">&#125;SSDTEntry, *PSSDTEntry;</span><br></pre></td></tr></table></figure><p>其表中ServiceTableBase每一项均为一个ULONG，但是里面存的不是地址（因为只有32位）而是相对于ServiceTableBase的偏移。</p><p>由上一节的计算过程可得：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PVOID <span class="title function_">getFunc</span><span class="params">(DWORD code)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(rdi==<span class="number">0</span>)&#123;</span><br><span class="line">        code &amp;= <span class="number">0xfff</span>;</span><br><span class="line">        DWORD64 pTableBase = KeServiceDescriptorTable[rdi];<span class="comment">//实际就是0</span></span><br><span class="line">        PBYTE pBaseByte = pTableBase</span><br><span class="line">        PVOID pTargetFunc = pBaseByte[pTableBase[code]&gt;&gt;<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">return</span> pTargetFunc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//GUI线程操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p><a href="https://blog.csdn.net/Rong_Toa/article/details/118313339">使用 SYSENTER 和 SYSEXIT 指令执行对系统过程的快速调用</a></p><p><a href="https://blog.csdn.net/qq_43147121/article/details/133618763">x64内核实验5-API进0环_kisystemcall64</a></p><p><a href="https://bbs.kanxue.com/thread-269253.htm">Windows内核逆向</a></p><p><a href="https://www.cnblogs.com/wf751620780/p/10460863.html">SSDT(系统服务描述符表 system services descriptor table)</a></p>]]></content>
    
    
    <summary type="html">本篇介绍通过syscall进入内核的流程</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="Win核心" scheme="https://www.pri87.vip/categories/Win%E6%A0%B8%E5%BF%83/"/>
    
    <category term="Win内核" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/Win%E5%86%85%E6%A0%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>visual studio基本操作</title>
    <link href="https://www.pri87.vip/posts/3e39c26.html"/>
    <id>https://www.pri87.vip/posts/3e39c26.html</id>
    <published>2025-06-17T14:22:49.000Z</published>
    <updated>2025-06-24T08:24:41.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义快捷键">自定义快捷键</h2><h2 id="代码片段管理器">代码片段管理器</h2><p>可以定义不同类型文件的快捷片段，比如asm：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$procName$ proc</span><br><span class="line"></span><br><span class="line">ret</span><br><span class="line">$procName$ endp</span><br></pre></td></tr></table></figure><p>快速输入时：prc即可创建</p><h2 id="导出为模板">导出为模板</h2><p>为了避免每次开一个项目都要配基本环境，在项目-导出为模板可以下次直接使用</p>]]></content>
    
    
    <summary type="html">记录一下vs的好用操作</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>驱动开发2-基础文件操作</title>
    <link href="https://www.pri87.vip/posts/de24dad0.html"/>
    <id>https://www.pri87.vip/posts/de24dad0.html</id>
    <published>2025-06-13T13:57:47.000Z</published>
    <updated>2025-06-24T08:24:41.088Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="Ntstrsafe-h">Ntstrsafe.h</h2><p>kernel中使用字符串最好使用Ntstrsafe.h中的操作函数，各种操作已经被封装好，可以直接使用。</p><p>包括判断开头是否含字符串，复制字符串，大写字母等</p></blockquote><h2 id="文件的创建读写删除">文件的创建读写删除</h2><p>文件路径必须用<code>\\??\\</code>的前缀</p><p>就是API：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">InitializeObjectAttributes(&amp;obja,&amp;filepath,OBJ_CASE_INSENSITIVE,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="comment">//初始化文件对象</span></span><br><span class="line">status = ZwDeleteFile(&amp;obja);<span class="comment">//删除对象</span></span><br><span class="line"></span><br><span class="line">InitializeObjectAttributes(&amp;obja,&amp;sourcefilepath,OBJ_CASE_INSENSITIVE|OBJ_KERNEL_HANDLE,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="comment">//初始化文件对象</span></span><br><span class="line">status = ZwOpenFile(&amp;hfile,FILE_READ_DATA,&amp;obja,&amp;iostack1,FILE_SHAR_READ|FILE_SHAR_WRITE,FILE_SYNCHRONOUS_NONALERT);</span><br><span class="line">status = ZwQueryInformationFile(&amp;hfile,&amp;iostack1,&amp;fbi,<span class="keyword">sizeof</span>(FILE_STANDARD_INFORMATION),FileStandInformation);</span><br><span class="line">filebuffer = ExAllocatePool(NonPagedPool,fbi.EndOfFile.QuadPart);</span><br><span class="line">RtlZeroMemory(filebuffer,fbi.EndOfFile.QuadPart);</span><br><span class="line">LARGE_INTEGER readoffset = &#123;&#125;;</span><br><span class="line">status = ZwReadFile(hfile,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;iostack,filebuffer,fbi.EndOfFile.QuadPart,&amp;readoffset,<span class="literal">NULL</span>);<span class="comment">//读取</span></span><br><span class="line"></span><br><span class="line">InitializeObjectAttributes(&amp;obja,&amp;sourcefilepath,OBJ_CASE_INSENSITIVE|OBJ_KERNEL_HANDLE,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="comment">//初始化文件对象</span></span><br><span class="line">status = ZwCreateFile(&amp;hfile2,GENERIC_ALL,&amp;obja2,&amp;iostack2,<span class="literal">NULL</span>,FILE_SHARE_WRITE,FILE_SUPERSEDE,FILE_SYNCHRONOUS_IO_NONALERT,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="comment">//创建文件</span></span><br><span class="line"></span><br><span class="line">status = ZwWriteFile(hfile2,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;iostack2,filebuffer,fbi.EndOfFile.QuadPart,&amp;writeoffset,<span class="literal">NULL</span>);<span class="comment">//写入文件</span></span><br><span class="line"></span><br><span class="line">ExFreePool(filebuffer);</span><br><span class="line">ZwClose(hfile2);<span class="comment">//关闭文件句柄</span></span><br></pre></td></tr></table></figure><h2 id="MiniFilter">MiniFilter</h2><p>MiniFilter驱动是相对与SFilter来说的</p><p>通过过滤管理器介入，实现IRP过滤操作的驱动程序。它可以为一个IRP请求定义pre事件和post事件，并在处理IRP前后的过程中执行这两个自定义的函数。默认情况下，其会对所有被定义的操作执行，所以需要在回调中判断是否是自己需要的IRP请求，然后执行处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fltKernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">PFLT_FILTER gFilterHandle = <span class="literal">NULL</span>; <span class="comment">// 全局过滤器句柄</span></span><br><span class="line"><span class="comment">// 回调函数集</span></span><br><span class="line">CONST FLT_OPERATION_REGISTRATION Callbacks[] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 创建时触发 PreOperation(之前回调函数) / PostOperation(之后回调函数)</span></span><br><span class="line">&#123; IRP_MJ_CREATE, <span class="number">0</span>, PreOperation, PostOperation &#125;,</span><br><span class="line"><span class="comment">// 读取时触发</span></span><br><span class="line">&#123; IRP_MJ_READ, <span class="number">0</span>, PreOperation, PostOperation &#125;,</span><br><span class="line"><span class="comment">// 写入触发</span></span><br><span class="line">&#123; IRP_MJ_WRITE, <span class="number">0</span>, PreOperation, PostOperation &#125;,</span><br><span class="line"><span class="comment">// 设置时触发</span></span><br><span class="line">&#123; IRP_MJ_SET_INFORMATION, <span class="number">0</span>, PreOperation, PostOperation &#125;,</span><br><span class="line"><span class="comment">// 结束标志</span></span><br><span class="line">&#123; IRP_MJ_OPERATION_END &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 过滤驱动数据结构</span></span><br><span class="line">CONST FLT_REGISTRATION FilterRegistration =</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">sizeof</span>(FLT_REGISTRATION),         <span class="comment">//  结构大小(默认)</span></span><br><span class="line">FLT_REGISTRATION_VERSION,           <span class="comment">//  结构版本(默认)</span></span><br><span class="line"><span class="number">0</span>,                                  <span class="comment">//  过滤器标志</span></span><br><span class="line"><span class="literal">NULL</span>,                               <span class="comment">//  上下文</span></span><br><span class="line">Callbacks,                          <span class="comment">//  注册回调函数集</span></span><br><span class="line">Unload,                             <span class="comment">//  驱动卸载函数</span></span><br><span class="line">InstanceSetup,                      <span class="comment">//  实例安装回调函数</span></span><br><span class="line">InstanceQueryTeardown,              <span class="comment">//  实例销毁回调函数</span></span><br><span class="line">InstanceTeardownStart,              <span class="comment">//  实例解除绑定时触发</span></span><br><span class="line">InstanceTeardownComplete,           <span class="comment">//  实例解绑完成时触发</span></span><br><span class="line"><span class="literal">NULL</span>,                               <span class="comment">//  GenerateFileName</span></span><br><span class="line"><span class="literal">NULL</span>,                               <span class="comment">//  GenerateDestinationFileName</span></span><br><span class="line"><span class="literal">NULL</span>                                <span class="comment">//  NormalizeNameComponent</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ PDRIVER_OBJECT DriverObject,</span></span><br><span class="line"><span class="params">    _In_ PUNICODE_STRING RegistryPath</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    NTSTATUS status;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册过滤器</span></span><br><span class="line">    status = FltRegisterFilter(</span><br><span class="line">        DriverObject,               <span class="comment">// 驱动对象</span></span><br><span class="line">        &amp;FilterRegistration,        <span class="comment">// 注册信息结构体</span></span><br><span class="line">        &amp;gFilterHandle              <span class="comment">// 返回的过滤器句柄</span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (NT_SUCCESS(status)) &#123;</span><br><span class="line">        <span class="comment">// 启动过滤</span></span><br><span class="line">        status = FltStartFiltering(gFilterHandle);</span><br><span class="line">        <span class="keyword">if</span> (!NT_SUCCESS(status)) &#123;</span><br><span class="line">            FltUnregisterFilter(gFilterHandle); <span class="comment">// 失败时卸载</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">DriverUnload</span><span class="params">(_In_ PDRIVER_OBJECT DriverObject)</span> &#123;</span><br><span class="line">    FltUnregisterFilter(gFilterHandle); <span class="comment">// 卸载过滤器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">内核的文件操作</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>驱动开发1-驱动与应用程序的通信</title>
    <link href="https://www.pri87.vip/posts/51d4b50a.html"/>
    <id>https://www.pri87.vip/posts/51d4b50a.html</id>
    <published>2025-06-06T18:36:06.000Z</published>
    <updated>2025-06-13T05:17:08.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>请先看前一篇博客，不然可能不理解这里面的部分内容</p><h2 id="目标">目标</h2><p>由于我们只用写一个驱动程序，且只有一个设备，所以devnode只有一个节点，因为没有下层总线驱动，所以直接由它实现IoComplite即可。</p><p>说到R0和R3通信，实际就是R3如何控制R0驱动的行为，为上层应用实现内核级别的操作。所以要实现数据交换。目前学到的通信均为IRP实现的通信（后面还有快速IO），而处理IRP的驱动（目前）只有两种交换数据的方式：</p><ul><li>缓冲IO</li><li>直接IO</li></ul><p>如果不使用默认的操作码，还可以用IRP_MJ_DEVICE_CONTROL来实现自定义操作码。所以这次使用以上三种方法来实现R0到R3的通信。</p><p>那么具体来说：</p><ul><li>创建设备对象后设置DO_BUFFER_IO或DO_DIRECT_IO</li><li>在对应的IRP回调中在AssociatedIrp.SystemBuffer/MmGetSystemAddressForMdlSafe中获取指针来读取/写入内容</li><li>进行一个自定义操作，使用IRP_MJ_DEVICE_CONTROL作为主码</li></ul><h2 id="具体实现">具体实现</h2><p>DO_BUFFER_IO的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wdm.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;ntddk.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICENAME <span class="string">L&quot;\\DEVICE\\DeviceTest&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMNAME <span class="string">L&quot;\\??\\SymboilcLinkTest&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DrvUnload</span><span class="params">(PDRIVER_OBJECT pdriver)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pdriver-&gt;DeviceObject)</span><br><span class="line">&#123;</span><br><span class="line">IoDeleteDevice(pdriver-&gt;DeviceObject);</span><br><span class="line">UNICODE_STRING symname = &#123;&#125;;</span><br><span class="line">RtlInitUnicodeString(&amp;symname, SYMNAME);</span><br><span class="line">IoDeleteSymbolicLink(&amp;symname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;Driver Unloaded\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">NTSTATUS <span class="title function_">myCreate</span><span class="params">(PDEVICE_OBJECT pdevice, PIRP pirp)</span></span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;my divice has be opened\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">pirp-&gt;IoStatus.Status = status;</span><br><span class="line">pirp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">IoCompleteRequest(pirp, IO_NO_INCREMENT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">NTSTATUS <span class="title function_">myClose</span><span class="params">(PDEVICE_OBJECT pdevice, PIRP pirp)</span></span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;my divice has be closed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">pirp-&gt;IoStatus.Status = status;</span><br><span class="line">pirp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">IoCompleteRequest(pirp, IO_NO_INCREMENT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">NTSTATUS <span class="title function_">myCleanup</span><span class="params">(PDEVICE_OBJECT pdevice, PIRP pirp)</span></span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;my divice has be cleaned\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">pirp-&gt;IoStatus.Status = status;</span><br><span class="line">pirp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">IoCompleteRequest(pirp, IO_NO_INCREMENT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现请求</span></span><br><span class="line">NTSTATUS <span class="title function_">myRead</span><span class="params">(PDEVICE_OBJECT pdevice, PIRP pirp)</span></span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;start reading\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前IO栈位置</span></span><br><span class="line">PIO_STACK_LOCATION pstack = IoGetCurrentIrpStackLocation(pirp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从参数域获得相关数据</span></span><br><span class="line">DWORD32 askdDataLen = pstack-&gt;Parameters.Read.Length;</span><br><span class="line">PCHAR pR0buffer = pirp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送的数据</span></span><br><span class="line"><span class="type">char</span> data[] = <span class="string">&quot;This is a data from kernel&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (askdDataLen &gt;= <span class="keyword">sizeof</span>(data))</span><br><span class="line">&#123;</span><br><span class="line">RtlCopyMemory(pR0buffer, data, <span class="keyword">sizeof</span>(data));</span><br><span class="line"><span class="comment">// info表明实际返回大小</span></span><br><span class="line">pirp-&gt;IoStatus.Information = <span class="keyword">sizeof</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">RtlCopyMemory(pR0buffer, data, askdDataLen);</span><br><span class="line">pirp-&gt;IoStatus.Information = askdDataLen;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pirp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不提升等待这个irp的其它线程的优先级，并完成</span></span><br><span class="line">IoCompleteRequest(pirp, IO_NO_INCREMENT);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">myWrite</span><span class="params">(PDEVICE_OBJECT pdevice, PIRP pirp)</span></span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;start writing\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前IO栈位置</span></span><br><span class="line">PIO_STACK_LOCATION pstack = IoGetCurrentIrpStackLocation(pirp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从参数域获得相关数据</span></span><br><span class="line">DWORD32 askdDataLen = pstack-&gt;Parameters.Write.Length;</span><br><span class="line">PCHAR pR0buffer = pirp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line">PCHAR deviceBuffer = pdevice-&gt;DeviceExtension;</span><br><span class="line"><span class="type">size_t</span> maxSize = <span class="number">0x100</span>;</span><br><span class="line"><span class="comment">//先清空数据</span></span><br><span class="line">RtlZeroMemory(deviceBuffer, maxSize);</span><br><span class="line"><span class="comment">// 读取的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (askdDataLen &lt;= maxSize)</span><br><span class="line">&#123;</span><br><span class="line">RtlCopyMemory(deviceBuffer, pR0buffer, askdDataLen);</span><br><span class="line"><span class="comment">// info表明实际返回大小</span></span><br><span class="line">pirp-&gt;IoStatus.Information = askdDataLen;</span><br><span class="line">DbgPrint(<span class="string">&quot;%p,%s,%d&quot;</span>, deviceBuffer, deviceBuffer, askdDataLen);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">RtlCopyMemory(deviceBuffer, pR0buffer, maxSize);</span><br><span class="line">pirp-&gt;IoStatus.Information = maxSize;</span><br><span class="line">DbgPrint(<span class="string">&quot;%p,%s,%d&quot;</span>, deviceBuffer, deviceBuffer, maxSize);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pirp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不提升等待这个irp的其它线程的优先级，并完成</span></span><br><span class="line">IoCompleteRequest(pirp, IO_NO_INCREMENT);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义操作码</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOCTL_MYFUNC1 CTL_CODE(FILE_DEVICE_UNKNOWN,0x901,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现对数据的异或</span></span><br><span class="line">NTSTATUS <span class="title function_">processMyFunc1</span><span class="params">(PDEVICE_OBJECT pdevice, PIRP pirp)</span></span><br><span class="line">&#123;</span><br><span class="line">PIO_STACK_LOCATION pstack = IoGetCurrentIrpStackLocation(pirp);</span><br><span class="line">DWORD32 inlen = pstack-&gt;Parameters.DeviceIoControl.InputBufferLength;</span><br><span class="line">DWORD32 outlen = pstack-&gt;Parameters.DeviceIoControl.OutputBufferLength;</span><br><span class="line">PCHAR pData = pirp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; inlen; ++i)</span><br><span class="line">&#123;</span><br><span class="line">pData[i] ^= <span class="number">0xaa</span>;</span><br><span class="line">&#125;</span><br><span class="line">pirp-&gt;IoStatus.Information = inlen;</span><br><span class="line">IoCompleteRequest(pirp, IO_NO_INCREMENT);</span><br><span class="line"><span class="keyword">return</span>  STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">myControl</span><span class="params">(PDEVICE_OBJECT pdevice, PIRP pirp)</span></span><br><span class="line">&#123;</span><br><span class="line">PIO_STACK_LOCATION pstack = IoGetCurrentIrpStackLocation(pirp);</span><br><span class="line">DWORD32 code = pstack-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class="line">NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line"><span class="keyword">switch</span> (code)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> IOCTL_MYFUNC1:</span><br><span class="line">status = processMyFunc1(pdevice, pirp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(</span></span><br><span class="line"><span class="params">PDRIVER_OBJECT driver,</span></span><br><span class="line"><span class="params">PUNICODE_STRING reg_path</span></span><br><span class="line"><span class="params">)</span></span><br><span class="line">&#123;</span><br><span class="line">driver-&gt;DriverUnload = DrvUnload;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UNICODE_STRING deviceName = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">RtlInitUnicodeString(&amp;deviceName, DEVICENAME);</span><br><span class="line">PDEVICE_OBJECT pdevice = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 为设备准备0x100字节的空间放数据</span></span><br><span class="line">NTSTATUS status = IoCreateDevice(driver, <span class="number">0x100</span>, &amp;deviceName, FILE_DEVICE_UNKNOWN, <span class="number">0</span>, TRUE, &amp;pdevice);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!NT_SUCCESS(status))</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;Create Device fail:%x\n&quot;</span>, status);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UNICODE_STRING symname = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">RtlInitUnicodeString(&amp;symname, SYMNAME);</span><br><span class="line">status = IoCreateSymbolicLink(&amp;symname, &amp;deviceName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!NT_SUCCESS(status))</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;Create symbolicLink fail:%x\n&quot;</span>, status);</span><br><span class="line">IoDeleteDevice(pdevice);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">DbgPrint(<span class="string">&quot;In DriverEntry!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置缓冲IO</span></span><br><span class="line">pdevice-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class="line"></span><br><span class="line">driver-&gt;MajorFunction[IRP_MJ_CREATE] = myCreate;</span><br><span class="line">driver-&gt;MajorFunction[IRP_MJ_CLOSE] = myClose;</span><br><span class="line">driver-&gt;MajorFunction[IRP_MJ_CLEANUP] = myCleanup;</span><br><span class="line">driver-&gt;MajorFunction[IRP_MJ_READ] = myRead;</span><br><span class="line">driver-&gt;MajorFunction[IRP_MJ_WRITE] = myWrite;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义IRP</span></span><br><span class="line">driver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = myControl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//R3</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMNAME <span class="string">L&quot;\\\\.\\SymboilcLinkTest&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOCTL_MYFUNC1 CTL_CODE(FILE_DEVICE_UNKNOWN,0x901,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HANDLE hDevice = <span class="built_in">CreateFile</span>(SYMNAME,</span><br><span class="line">GENERIC_READ | GENERIC_WRITE,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">OPEN_EXISTING,</span><br><span class="line">FILE_ATTRIBUTE_NORMAL,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hDevice == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Failed to open device: &quot;</span> &lt;&lt; <span class="built_in">GetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Device opened successfully!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">BYTE readBuffer[<span class="number">50</span>] = &#123;&#125;;</span><br><span class="line">DWORD dataLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从对应句柄中读取，可以通过在driver中修改偏移来实现读取不同的内容</span></span><br><span class="line"><span class="built_in">ReadFile</span>(hDevice, readBuffer, <span class="number">50</span>, &amp;dataLen, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p,%s,%d\n&quot;</span>, readBuffer, readBuffer, dataLen);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BYTE dataWattingForWrite[] = <span class="string">&quot;data from application&quot;</span>;</span><br><span class="line"><span class="built_in">WriteFile</span>(hDevice, dataWattingForWrite, <span class="built_in">sizeof</span>(dataWattingForWrite), &amp;dataLen, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现自定义函数</span></span><br><span class="line"></span><br><span class="line">DWORD32 x[] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line">DWORD32 y[<span class="number">4</span>] = &#123;&#125;;</span><br><span class="line"><span class="built_in">DeviceIoControl</span>(hDevice, IOCTL_MYFUNC1, x, <span class="built_in">sizeof</span>(x), &amp;y, <span class="number">4</span>, &amp;dataLen, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x %x %x %x&quot;</span>, y[<span class="number">0</span>], y[<span class="number">1</span>], y[<span class="number">2</span>], y[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hDevice);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本篇作为上一篇的实验，进行R0和R3的通信</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="R0" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/R0/"/>
    
    <category term="驱动" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/R0/%E9%A9%B1%E5%8A%A8/"/>
    
    
    <category term="驱动" scheme="https://www.pri87.vip/tags/%E9%A9%B1%E5%8A%A8/"/>
    
    <category term="通信" scheme="https://www.pri87.vip/tags/%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>win-IO系统(1)</title>
    <link href="https://www.pri87.vip/posts/c7a29cf0.html"/>
    <id>https://www.pri87.vip/posts/c7a29cf0.html</id>
    <published>2025-06-04T04:26:24.000Z</published>
    <updated>2025-06-24T12:59:11.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IO管理器">IO管理器</h2><p>Windows的IO系统中，最重要的是I/O管理器。</p><blockquote><p>I/O管理器定义了一种秩序框架（模型），借此将I/O请求传递给设备驱动程序。IO系统是数据包驱动的。大部分IO请求都可以用一种IO数据请求包(in/out request pakage)代表，IRP是一种数据结构，其中包含了用于完整描述一个IO请求所需的全部信息。IRP会从一个IO系统组件传递至另一个。(快速IO属于例外。)这样的设计方式使得每个应用程序可以并发地管理多个IO请求。</p><p>对于每个IO操作，IO管理器会在内存中创建一个IRP来代表，并会将该IRP的指针传递给相应的驱动程序，当IO操作完成后还会销毁该数据包。与之相应的，当驱动程序受到IRP后，会执行该IRP执行的操作，将IRP重新返回给IO管理器，这可能是因为所请求的IO操作已成功完成，或必须传递给另一个驱动程序以进一步处理。</p><p>…</p><p>虚拟文件可以是任何被当做文件来处理的IO来源或是目标（如设备，文件，目录，管道，邮件槽）。典型的用户模式客户端会调用CreateFile或CreateFile2函数获取道虚拟文件的句柄。该函数名称有点容易产生误导：它们并不是只能用于文件，而是用于对象管理器GLOBALL??目录下任何可被视作符号链接的东西。CreateFile*函数名称“File”后缀实际上意味着虚拟文件对象（FILE_OBJECT），即调用这些函数后执行体创建的实体。</p><p>类似C:这样的名称实际上是指向Device这个对象管理器目录下的一个内部名称的符号链接(\Device\HarddiskVolumeX)。</p><p>操作系统会将所有IO请求抽象为针对虚拟文件所执行的操作，因为IO管理器只“懂”文件，其它什么都“不懂”，所以要由驱动程序将面向文件的命令(打开，关闭，读取，写入)转换为与具体设备有关的命令。这样的抽象也就形成了供应用程序访问设备的接口。用户模式应用程序会调用已文档化的函数，由这些函数调用IO系统的内部函数读写文件或执行其它操作。IO管理器会动态地将这些虚拟文件请求引导至相应的设备驱动程序。</p></blockquote><h2 id="中断请求级别与延迟过程调用">中断请求级别与延迟过程调用</h2><h3 id="中断请求级别">中断请求级别</h3><p>为后面的延迟过程调用做铺垫。</p><p>IRQL(Interrupt Requset Level)有两个含义：</p><ol><li>为源自硬件设备的中断所分配的优先级，该数值由HAL(和对应的中断控制器)来设置</li><li>每颗CPU都有自己的IRQL值</li></ol><p>IRQL较低的代码无法干涉IRQL较高的代码，反之依然，但IRQL较高的代码可以抢占以较低IRQL运行的代码。</p><p>Windows x64中，等级一般为：</p><ul><li>Passive/Low(0)：内核调度器通常工作时所处的常规IRQL</li><li>APC(1)</li><li>Dispatch/DCP(2)：内核调度器大部分所处的IRQL。这意味着，如果当前线程IRQL提高到2或更高，该线程本质上将获得无限的量程，无法被其它线程抢占。导致内核调度器无法在当前CPU上唤醒，除非那个线程的IRQL降到2以下。<ul><li>对于2或更高的IRQL，针对内核调度对象（互斥体，信号量，事件）的任何等待都会让系统崩溃。因为等待意味着线程可能进入等待状态，而另一个线程会调度到这颗CPU上。然而调度器不在这个级别，系统会进行bug-check</li><li>无法处理任何页面错误。因为页面错误需要上下文切换至某一个已修改页面写出器。而此时无法进行上下文切换，系统将崩溃。也就是说，IRQL2或以上的代码只能访问非换页内存，通常指从非换页内存池分配的内存。这些内存会一直驻留在物理内存。</li></ul></li><li>Device IRQL(DIRQL) 3~12：硬件中断级别。中断抵达后，内核的陷阱调度程序会调用相应的中断服务例程(Interrupt Service Routine, ISR)，并将其IRQL提高至与相关中断一致。</li><li>Clock(13)</li><li>IPI/Power(14)</li><li>High/Profile(15)</li></ul><p>运行在特定的IRQL下，可以以该IRQL或更低的IRQL产生中断。</p><h3 id="延迟过程调用">延迟过程调用</h3><blockquote><p>延迟过程调用(DPC)是一种对象，它封装了对于DPC_Level(2)这个IRQL下运行的函数的调用。它一般用于中断的后处理，因为在DIRQL下运行会遮掩/拖延等待获得服务的其它中断。典型的ISR会尽可能少的只处理最少量的工作，绝大部分工作只是读取设备状态，然后告诉设备停止发送中断信号，随后请求一个DPC，借此将进一步地处理推迟至IRQL(2)</p></blockquote><p>ISR和DPC都是线程无关的，简单来说：假设当前某个CPU在运行一个用户模式/内核模式代码，处于IRQL0，现在，发生了一个硬件中断，假设为5，这颗CPU的状态会被保存，然后提高IRQL为5，并执行对应的ISR，如果本身在运行用户代码，则中断到达时还要切换至内核。处理完这个中断后，会把一个DPC插入DPC队列。当CPU想要回归IRQL0时，内核会检查队列是否还有DPC，如果还有，会优先降至IRQL2，然后处理这些DPC，先进先处理。最后回到IRQL0等级。这样，如果有多次中断，比如0到5到8，DPC的处理顺序是8，5。</p><h2 id="设备驱动程序">设备驱动程序</h2><h3 id="驱动程序的类型">驱动程序的类型</h3><p>WDM驱动主要分为以下三个类型</p><ul><li>总线驱动程序：用于管理逻辑或物理总线，例如PCMCIA，PCI，USB，IEEE1934。总线驱动程序负责检测附加到自己所控制的总线上的设备，并将这些情况通知PnP(即插即用设备)管理器，同时负责管理总线的电源设置。此类驱动通常是由微软默认提供的。</li><li>功能驱动程序：用于管理某一特定类型的驱动。总线驱动可以通过PnP管理器将设备呈现给功能驱动程序。功能驱动程序性负责将设备的可操作接口导出给操作系统。</li><li>筛选器驱动程序：位于功能驱动之上（叫做上层筛选器/功能筛选器），或总线驱动之上（下层筛选器/总线筛选器）的逻辑层。可以扩充或更改设备或其它驱动程序的行为。</li></ul><p>当 PnP 管理器枚举出一个设备时，会创建对应的设备节点(devnode)，并触发相应驱动的加载过程。加载过程中，驱动会为该设备实例建立一个设备堆栈，其每个节点（PDO、FDO、FiDO）都与 devnode 关联。每个Devnode都对应至少一个FDO和PDO，即功能驱动程序创建的逻辑设备对象和总线驱动程序创建的物理驱动对象。它们之间或FDO上层也可以存在筛选器(FiDO)，也可以没有。所有针对某一个设备的IRP请求都会由上层流向下层。</p><blockquote><p>在WDM中，并不会让一个驱动程序负责控制特定设备的所欲哦方面。总线驱动程序负责检测总线成员关系的变化（设备的添加或移除），并协助PnP管理器枚举总线上的所有设备，访问与总线有关的配置注册表，并在某些情况下负责控制总线上设备的电源使用。功能驱动通常是唯一需要访问设备硬件的驱动程序。</p></blockquote><h3 id="驱动程序的分层">驱动程序的分层</h3><blockquote><p>对特定硬件提供的支持通常由多个不同驱动程序负责，每个驱动程序提供了让设备正常工作所需的部分功能。除了WDM总线驱动程序，功能驱动程序以及筛选器驱动程序，对硬件的支持可能还会拆分到如下几个组件中：类驱动，小型类驱动，端口驱动，小型端口驱动。</p></blockquote><h3 id="驱动程序的结构">驱动程序的结构</h3><blockquote><ul><li>初始化例程IO：管理器会执行驱动程序的初始化例程，会将驱动程序载入操作系统时，该例程会被WDK设置为GSDriverEntry。GSDriverEntry会初始化编译器为防止栈溢出错误而设置的保护机制，随后调用DriverEntry。该例程由驱动程序的编写者实现。该例程可填充某些系统数据结构，借此向IO管理器注册驱动程序的其它例程，并执行必要的全局驱动程序初始化工作。</li><li>添加设备例程：支持即插即用的驱动程序需要实现添加设备例程。在检查到该驱动程序负责的设备后，PnP管理器会通过该例程向驱动程序发送通知。在这个例程中，驱动程序通常会创建用于代表该设备的设备对象。</li><li>一系列分发例程：分发例程是设备驱动程序提供的主要入口点，例如打开，关闭，读取，写入以及即插即用。当调用此类例程执行IO操作时，IO管理器会生成一个IRP并通过驱动程序的某个分发例程来调用驱动程序。</li><li>一个启动IO例程：驱动程序可以使用启动IO例程向设备（从设备）发起数据传输。只有需要依赖IO管理器将传入的IO请求加入队列的驱动程序才需要定义该例程。通过确保驱动程序一次只处理一个IRP, IO 管理器会对驱动程序的 IRP 进行连续化。驱动程序可以并发处理多个IRP ,但大部分设备通常都会需要连续化，因为它们无法并发处理多个IO请求。</li><li>一个中断服务例程（ISR）：当一个设备中断时，内核的中断调度程序会将控制权传递给例程。在Windows的IO模型中，ISR运行在设备中断请求级别（DIRQL）上，因此为避免阻塞更低IRQI的中断，它们只需要执行尽可能少的工作。ISR通常会对 DPC进行排队，由运行在更低 IRQL（DPC/Dispatch 级别）上的 DPC 执行中断处理过程的后续工作。只有中断驱动的设备驱动程序具备ISR，例如文件系统驱动程序就没有 ISR。</li><li>一个中断服务DPC例程：在执行 ISR后，将由 DPC 例程执行与设备中断处理有关的大部分工作。DPC例程在IRQL2下执行，这是较高的DIRQL和较低的Passive级别(0)之间的一种“妥协”。典型的DPC例程负责发起IO完成操作并启动设备上下一个正在排队的IO操作。</li><li>一个或多个IO完成例程：分层式驱动程序可能包含IO完成例程，该例程会在低层驱动程序完成IRP的处理工作后发出通知。例如，IO管理器会在设备驱动程序完成向文件或从文件传输数据的操作后，调用文件系统驱动程序的IO完成例程。该完成例程会通知文件系统驱动程序操作成功、失败或被取消，随后可让文件系统驱动程序执行清理操作。</li><li>一个取消 IO例程：如果某个 IO操作可以被取消，驱动程序即可定义一个或多个取消 IO。当驱动程序收到某个I/O请求的IRP，并且该请求可以取消时，便会向该IRP分配取消例程。随着 IRP经历处理过程的不同阶段，该例程可以更改，如果当前操作已<br>出，或者操作被取消（例如使用Windows的Cancello或CancelloEx函数），IO管理器会执行IRP的取消例程(如果分配了取消例程)。取消例程负责执行各种必要的步骤，借此释放该IRP在处理过程中已经获得的各种资源，并使用“已取消”的状态来完成该IRP。</li><li>快速分发例程：使用缓存管理器的驱动程序（例如文件系统驱动程序）通常会提供此类例程，借助内核在访问驱动程序时即可绕过典型的IO处理。例如，诸如读取或写入等操作可以直接访问缓存的数据，而非通过IO管理器的常规路径产生不连续的多个IO操作，借此即可加快操作速度。快速分发例程还可用于从内存管理器和缓存管理器到文件系统驱动程序的回调机制。例如在创建内存时，内存管理器可以回调文件系统驱动程序，并以独占的方式获得文件。</li><li>一个卸载例程：卸载例程可以释放驱动程序正在使用的任何系统资源，随后IO管理器即可从内存中移除驱动程序。任何初始化例程中获得的资源通常都需要在卸载历程中释放。如果驱动程序支持，即可在系统运行过程中随时加载或卸载，但卸载例程只有在到设备的所有文件句柄都关闭后才能调用。</li><li>一个系统关机通知例程。该例程可以让驱动程序在系统关机时进行清理。</li><li>错误记录例程：如果出现非预期错误（例如磁盘出现坏块），驱动程序的错误记录例程会注意到这种情况，并通知IO管理器。随后IO管理器会将相关信息写入错误日志文件。</li></ul></blockquote><h3 id="文件对象和设备对象">文件对象和设备对象</h3><p>文件对象是一种内核模式的数据结构，代表设备的句柄。文件对象为符合以IO为中心的接口资源提供了一种基于内存的表达方式。也就是说：句柄指向的就是这个句柄代表的文件对象（当然也可能有其它类型的对象，比如事件，目录）。这个文件对象是描述某个设备的数据。在</p><p>文件对象在VS中的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">FILE_OBJECT</span> &#123;</span></span><br><span class="line">    CSHORT Type;</span><br><span class="line">    CSHORT Size;</span><br><span class="line">    PDEVICE_OBJECT DeviceObject;<span class="comment">//指向设备对象的指针</span></span><br><span class="line">    PVPB Vpb;</span><br><span class="line">    PVOID FsContext;</span><br><span class="line">    PVOID FsContext2;</span><br><span class="line">    PSECTION_OBJECT_POINTERS SectionObjectPointer;</span><br><span class="line">    PVOID PrivateCacheMap;</span><br><span class="line">    NTSTATUS FinalStatus;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">FILE_OBJECT</span> *<span class="title">RelatedFileObject</span>;</span></span><br><span class="line">    BOOLEAN LockOperation;<span class="comment">//共享模式</span></span><br><span class="line">    BOOLEAN DeletePending;</span><br><span class="line">    BOOLEAN ReadAccess;<span class="comment">//打开模式标志</span></span><br><span class="line">    BOOLEAN WriteAccess;</span><br><span class="line">    BOOLEAN DeleteAccess;</span><br><span class="line">    BOOLEAN SharedRead;</span><br><span class="line">    BOOLEAN SharedWrite;</span><br><span class="line">    BOOLEAN SharedDelete;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    UNICODE_STRING FileName;</span><br><span class="line">    LARGE_INTEGER CurrentByteOffset;</span><br><span class="line">    __volatile ULONG Waiters;</span><br><span class="line">    __volatile ULONG Busy;</span><br><span class="line">    PVOID LastLock;</span><br><span class="line">    KEVENT Lock;</span><br><span class="line">    KEVENT Event;</span><br><span class="line">    __volatile PIO_COMPLETION_CONTEXT CompletionContext;<span class="comment">//IO请求上下文</span></span><br><span class="line">    KSPIN_LOCK IrpListLock;</span><br><span class="line">    LIST_ENTRY IrpList;<span class="comment">//如果是线程不可知IO，且文件对象关联至完成端口，这个列表将列出与该文件列表关联的所有IO操作</span></span><br><span class="line">    __volatile <span class="class"><span class="keyword">struct</span> _<span class="title">IOP_FILE_OBJECT_EXTENSION</span> *<span class="title">FileObjectExtension</span>;</span><span class="comment">//文件对象扩展</span></span><br><span class="line">&#125; FILE_OBJECT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">FILE_OBJECT</span> *<span class="title">PFILE_OBJECT</span>;</span> </span><br></pre></td></tr></table></figure><p>FileObjectExtension中有其它属性，但是vs中找不到定义了。其中比较重要的是重新解析路径的符号链接在这里</p><p>总而言之，文件对象表明了一个线程打开一个文件时，使用的句柄相关属性。例如，对于同步打开的文件，当前字节偏移属性值表明了下一次的读取和写入操作作用到文件的哪里。每一个句柄就对应了一个文件对象，然而，虽然文件句柄对进程来说是唯一的。但是底层的物理资源并不唯一。所以必须以同步的方式访问这个文件对象。</p><p>Windows中内部设备名在\Device中，必须要在\Global??目录中创建一个指向设备对象的符号链接，这些设备对象才能被Windows应用程序访问。</p><h3 id="驱动程序对象和设备对象">驱动程序对象和设备对象</h3><p>当线程尝试打开文件对象的句柄时，IO管理器必须通过文件对象名称决定需要调用哪一个驱动程序来处理该请求。下一次使用同样句柄时，IO管理器也要能定位此信息。为此需要用到驱动程序对象和设备对象。</p><p>驱动对象：系统中一个驱动程序对象结构，IO管理器会通过它取得驱动程序的分发例程地址。</p><p>设备对象：描述系统中的物理或逻辑设备特征的结构。例如需要缓冲区对齐特性和保存传入的IRP所需的设备队列位置。设备对象是所有IO操作的目标，因为该对象是句柄的通信目标。</p><p>下图为设备对象和驱动对象的关系。</p><p><img src="https://s2.loli.net/2025/06/05/zouElDJy6QgvnFs.png" alt="image-20250605175129510"></p><p>驱动对象包含一个指针，指向第一个设备对象结构，设备对象结构中的NextDevice指向下一个设备对象结构。它们的DriverObject域均指回驱动对象。</p><blockquote><p>可以这样理解：驱动对象代表驱动的行为，而每个设备对象代表一个通信端点(end point)。例如在包含4个串口设备的系统中，可能只有1个驱动对象，但会有4个设备对象实例，每个实例对应一个串口，每个串口可在不影响其它串口的情况下打开。对于硬件设备，每个设备都代表一组不同的硬件资源，例如IO端口，内存映射IO以及中断线。Windows以设备为中心，而不是以驱动程序为中心。</p></blockquote><p>和上一节说的一样，必须要在\Global??目录中创建一个指向设备对象的符号链接，Windows应用程序才能访问设备对象。使用IoCreateSymbolicLink函数实现这个操作。如果是PnP设备，则需要使用IoRegisterDeviceInterface函数。此时，设备对象指回驱动程序，IO管理器就可以知道受到IO请求后该调用哪个驱动程序例程。它会使用设备对象查找驱动程序对象，而这个驱动对象代表了为该设备提供服务的驱动程序。随后IO管理器会利用原始请求中提供的函数代码索引到驱动程序对象中。每个函数代码对应一个驱动程序分发例程。</p><h2 id="I-O的处理">I/O的处理</h2><p>上面的内容均是IO处理涉及的组件，这一节说明IO请求是如何流动的</p><h3 id="I-O的类型">I/O的类型</h3><p>应用程序在发出IO请求时可以选择多种类型：</p><ul><li>同步IO：默认的方式，ReadFile或WriteFile函数可以用同步的方式执行，在完成IO操作后，把控制权交回调用方。</li><li>异步IO：设备在执行IO操作时可以继续执行，也可以发出多个IO请求，使用异步IO必须要在CreateFile(2)中指定FILE_FLAG_OVERLAPPED标志。在设备驱动程序完成数据操作前，该线程不能访问来自该IO的任何数据。因此需要监视一个同步对象句柄，等待IO完成后自动发出信号，借此将执行过程与IO操作的完成保持同步。</li><li>快速IO：绕过生成IRP，直达驱动程序设备栈进而完成IO请求。需要驱动程序将快速IO入口点放入PFAST_IO_DISPATCH指针指向的结构中。如果调用失败，再使用标准的IRP流程。</li></ul><p>无论哪一种类型，IO操作在驱动中均以异步的方式执行。一旦成功发起请求，驱动必须尽可能快地返回IO系统。但IO系统是否可以立即返回到调用方，取决于使用的是同步IO还是异步IO。</p><ul><li>文件映射IO：文件映射IO是IO系统和内存管理器配合的参悟。它是指将磁盘上的文件看作进程虚拟内存的组成成分的能力。程序可以用大数组的形式访问文件，而无需缓冲数据或执行磁盘IO。程序访问内存时，内存管理器会使用换页机制从磁盘文件加载正确的页面，写入时，也会通过正常换页将改动写回文件。可以用CreateFileMapping或MapViewOfFile等函数来实现。</li><li>分散/聚集IO：通过ReadFileScatter和WriteFileGather函数，让应用程序只需要发出一个读取或写入请求，就可以再虚拟内存中多个缓冲区与磁盘文件的连续区域之间传输数据，而无需为每个文件发送单独的IO请求。</li></ul><h3 id="IO请求包">IO请求包</h3><p>IO请求包(IRP)是IO系统处理IO请求而存储必要信息的地方。当线程调用IO API时，IO管理器会构造一个IRP，并在IO系统进行处理的过程中使用IRP代表对应的请求。</p><p>结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title function_">DECLSPEC_ALIGN</span><span class="params">(MEMORY_ALLOCATION_ALIGNMENT)</span> _IRP &#123;</span><br><span class="line">    CSHORT Type;</span><br><span class="line">    USHORT Size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Define the common fields used to control the IRP.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Define a pointer to the Memory Descriptor List (MDL) for this I/O</span></span><br><span class="line">    <span class="comment">// request.  This field is only used if the I/O is &quot;direct I/O&quot;.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    PMDL MdlAddress;</span><br><span class="line">    <span class="comment">// 指向内存描述符列表(MDL)的可选指针。在直接IO中使用</span></span><br><span class="line">    <span class="comment">// MDL用来代表物理内存中缓冲区信息结构。不存在则为NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Flags word - used to remember various flags.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    ULONG Flags;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The following union is used for one of three purposes:</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//    1. This IRP is an associated IRP.  The field is a pointer to a master</span></span><br><span class="line">    <span class="comment">//       IRP.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//    2. This is the master IRP.  The field is the count of the number of</span></span><br><span class="line">    <span class="comment">//       IRPs which must complete (associated IRPs) before the master can</span></span><br><span class="line">    <span class="comment">//       complete.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//    3. This operation is being buffered and the field is the address of</span></span><br><span class="line">    <span class="comment">//       the system space buffer.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">IRP</span> *<span class="title">MasterIrp</span>;</span></span><br><span class="line">        __volatile LONG IrpCount;</span><br><span class="line">        PVOID SystemBuffer;</span><br><span class="line">    &#125; AssociatedIrp;</span><br><span class="line"><span class="comment">// 相关IRP，三个字段的总称：</span></span><br><span class="line">    <span class="comment">// SystemBuffer表明IO管理器是否使用有缓冲区的IO技术将用户的缓冲区传递给驱动程序。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Thread list entry - allows queuing the IRP to the thread pending I/O</span></span><br><span class="line">    <span class="comment">// request packet list.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    LIST_ENTRY ThreadListEntry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// I/O status - final status of operation.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    IO_STATUS_BLOCK IoStatus;</span><br><span class="line"><span class="comment">// 表示IRP的状态</span></span><br><span class="line">    <span class="comment">// 包含Status和Information</span></span><br><span class="line">    <span class="comment">// Status是实际代码</span></span><br><span class="line">    <span class="comment">// Information是某些情况有意义的多态值，比如读取/写入的字节数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Requester mode - mode of the original requester of this operation.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    KPROCESSOR_MODE RequestorMode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Pending returned - TRUE if pending was initially returned as the</span></span><br><span class="line">    <span class="comment">// status for this packet.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    BOOLEAN PendingReturned;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Stack state information.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    CHAR StackCount;</span><br><span class="line">    CHAR CurrentLocation;</span><br><span class="line"><span class="comment">// IO栈位置技术和当前IO栈位置</span></span><br><span class="line">    <span class="comment">// 分别存放了栈位置总数和当前的IO栈位置</span></span><br><span class="line">    <span class="comment">// 使用IoGetCurrentIrpStackLocation(pirp)来获取</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Cancel - packet has been canceled.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    BOOLEAN Cancel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Cancel Irql - Irql at which the cancel spinlock was acquired.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    KIRQL CancelIrql;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// ApcEnvironment - Used to save the APC environment at the time that the</span></span><br><span class="line">    <span class="comment">// packet was initialized.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    CCHAR ApcEnvironment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Allocation control flags.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    UCHAR AllocationFlags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// User parameters.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        PIO_STATUS_BLOCK UserIosb;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Context used when the Irp is managed by IoRing and is used by IoRing.</span></span><br><span class="line">        <span class="comment">// UserIosb is used to cancel an Irp, so sharing space with UserIosb</span></span><br><span class="line">        <span class="comment">// let IoRing cancel an Irp based on its context.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        PVOID IoRingContext;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    PKEVENT UserEvent;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">                PIO_APC_ROUTINE UserApcRoutine;</span><br><span class="line">                PVOID IssuingProcess;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">                PVOID UserApcContext;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// IoRing object that rolled this Irp, if any.  The completion</span></span><br><span class="line">                <span class="comment">// is processed through this IoRing object.  UserApcRoutine and</span></span><br><span class="line">                <span class="comment">// UserApcContext is not supported when issuing IOs through an</span></span><br><span class="line">                <span class="comment">// IoRing so we union this with UserApcContext.  We did not use</span></span><br><span class="line">                <span class="comment">// UserApcRoutine because IssuingProcess use the same location</span></span><br><span class="line">                <span class="comment">// and is used when an Irp is queued to FileObject and when the</span></span><br><span class="line">                <span class="comment">// Irp is managed by IoRing it is queued to the FileObject.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> _<span class="title">IORING_OBJECT</span>* <span class="title">IoRing</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; AsynchronousParameters;</span><br><span class="line">        LARGE_INTEGER AllocationSize;</span><br><span class="line">    &#125; Overlay;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// CancelRoutine - Used to contain the address of a cancel routine supplied</span></span><br><span class="line">    <span class="comment">// by a device driver when the IRP is in a cancelable state.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    __volatile PDRIVER_CANCEL CancelRoutine;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Note that the UserBuffer parameter is outside of the stack so that I/O</span></span><br><span class="line">    <span class="comment">// completion can copy data back into the user&#x27;s address space without</span></span><br><span class="line">    <span class="comment">// having to know exactly which service was being invoked.  The length</span></span><br><span class="line">    <span class="comment">// of the copy is stored in the second half of the I/O status block. If</span></span><br><span class="line">    <span class="comment">// the UserBuffer field is NULL, then no copy is performed.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    PVOID UserBuffer;</span><br><span class="line"><span class="comment">// 用户缓冲区</span></span><br><span class="line">    <span class="comment">// 指向发起该IO操作的客户端所提供的缓冲区</span></span><br><span class="line">    <span class="comment">// 例如ReadFile/WriteFile的缓冲区</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Kernel structures</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The following section contains kernel structures which the IRP needs</span></span><br><span class="line">    <span class="comment">// in order to place various work information in kernel controller system</span></span><br><span class="line">    <span class="comment">// queues.  Because the size and alignment cannot be controlled, they are</span></span><br><span class="line">    <span class="comment">// placed here at the end so they just hang off and do not affect the</span></span><br><span class="line">    <span class="comment">// alignment of other fields in the IRP.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// DeviceQueueEntry - The device queue entry field is used to</span></span><br><span class="line">                <span class="comment">// queue the IRP to the device driver device queue.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">                KDEVICE_QUEUE_ENTRY DeviceQueueEntry;</span><br><span class="line"></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="comment">// The following are available to the driver to use in</span></span><br><span class="line">                    <span class="comment">// whatever manner is desired, while the driver owns the</span></span><br><span class="line">                    <span class="comment">// packet.</span></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">                    PVOID DriverContext[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">                &#125; ;</span><br><span class="line"></span><br><span class="line">            &#125; ;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Thread - pointer to caller&#x27;s Thread Control Block.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            PETHREAD Thread;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Auxiliary buffer - pointer to any auxiliary buffer that is</span></span><br><span class="line">            <span class="comment">// required to pass information to a driver that is not contained</span></span><br><span class="line">            <span class="comment">// in a normal buffer.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            PCHAR AuxiliaryBuffer;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// The following unnamed structure must be exactly identical</span></span><br><span class="line">            <span class="comment">// to the unnamed structure used in the minipacket header used</span></span><br><span class="line">            <span class="comment">// for completion queue entries.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// List entry - used to queue the packet to completion queue, among</span></span><br><span class="line">                <span class="comment">// others.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">                LIST_ENTRY ListEntry;</span><br><span class="line"></span><br><span class="line">                <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="comment">// Current stack location - contains a pointer to the current</span></span><br><span class="line">                    <span class="comment">// IO_STACK_LOCATION structure in the IRP stack.  This field</span></span><br><span class="line">                    <span class="comment">// should never be directly accessed by drivers.  They should</span></span><br><span class="line">                    <span class="comment">// use the standard functions.</span></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">                    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_STACK_LOCATION</span> *<span class="title">CurrentStackLocation</span>;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="comment">// Minipacket type.</span></span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">                    ULONG PacketType;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Original file object - pointer to the original file object</span></span><br><span class="line">            <span class="comment">// that was used to open the file.  This field is owned by the</span></span><br><span class="line">            <span class="comment">// I/O system and should not be used by any other drivers.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            PFILE_OBJECT OriginalFileObject;</span><br><span class="line"></span><br><span class="line">        &#125; Overlay;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// APC - This APC control block is used for the special kernel APC as</span></span><br><span class="line">        <span class="comment">// well as for the caller&#x27;s APC, if one was specified in the original</span></span><br><span class="line">        <span class="comment">// argument list.  If so, then the APC is reused for the normal APC for</span></span><br><span class="line">        <span class="comment">// whatever mode the caller was in and the &quot;special&quot; routine that is</span></span><br><span class="line">        <span class="comment">// invoked before the APC gets control simply deallocates the IRP.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        KAPC Apc;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// CompletionKey - This is the key that is used to distinguish</span></span><br><span class="line">        <span class="comment">// individual I/O operations initiated on a single file handle.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        PVOID CompletionKey;</span><br><span class="line"></span><br><span class="line">    &#125; Tail;</span><br><span class="line"></span><br><span class="line">&#125; IRP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> IRP *PIRP;</span><br></pre></td></tr></table></figure><p>IRP之后是它所需要的IO栈位置，数量等于该IRP所应用到的设备节点中分层式驱动程序的数量。<br>具体结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_STACK_LOCATION</span> &#123;</span></span><br><span class="line">    UCHAR MajorFunction;</span><br><span class="line">    UCHAR MinorFunction;</span><br><span class="line">    <span class="comment">// 主操作码和次操作码</span></span><br><span class="line">    <span class="comment">// 主操作码是28个IRP_MJ_in的28个常量,IO管理器通过这个码直接找到驱动程序的对应例程</span></span><br><span class="line">    <span class="comment">// 次操作码是指在主操作码过于通用时为主操作码增加功能，比如主操作码为IRP_MJ_PNP</span></span><br><span class="line">    <span class="comment">// 次操作码就可能是IRP_MN_START_DEVICE或IRP_MN_REMOVE_DEVICE</span></span><br><span class="line">    </span><br><span class="line">    UCHAR Flags;</span><br><span class="line">    UCHAR Control;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The following user parameters are based on the service that is being</span></span><br><span class="line">    <span class="comment">// invoked.  Drivers and file systems can determine which set to use based</span></span><br><span class="line">    <span class="comment">// on the above major and minor function codes.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数，每个参数都对应一种特定操作，比如Read表示ReadFile操作中需要的内容</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtCreateFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PIO_SECURITY_CONTEXT SecurityContext;</span><br><span class="line">            ULONG Options;</span><br><span class="line">            USHORT POINTER_ALIGNMENT FileAttributes;</span><br><span class="line">            USHORT ShareAccess;</span><br><span class="line">            ULONG POINTER_ALIGNMENT EaLength;</span><br><span class="line">        &#125; Create;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtCreateNamedPipeFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Notice that the fields in the following parameter structure must</span></span><br><span class="line">        <span class="comment">// match those for the create structure other than the last longword.</span></span><br><span class="line">        <span class="comment">// This is so that no distinctions need be made by the I/O system&#x27;s</span></span><br><span class="line">        <span class="comment">// parse routine other than for the last longword.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PIO_SECURITY_CONTEXT SecurityContext;</span><br><span class="line">            ULONG Options;</span><br><span class="line">            USHORT POINTER_ALIGNMENT Reserved;</span><br><span class="line">            USHORT ShareAccess;</span><br><span class="line">            PNAMED_PIPE_CREATE_PARAMETERS Parameters;</span><br><span class="line">        &#125; CreatePipe;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtCreateMailslotFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Notice that the fields in the following parameter structure must</span></span><br><span class="line">        <span class="comment">// match those for the create structure other than the last longword.</span></span><br><span class="line">        <span class="comment">// This is so that no distinctions need be made by the I/O system&#x27;s</span></span><br><span class="line">        <span class="comment">// parse routine other than for the last longword.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PIO_SECURITY_CONTEXT SecurityContext;</span><br><span class="line">            ULONG Options;</span><br><span class="line">            USHORT POINTER_ALIGNMENT Reserved;</span><br><span class="line">            USHORT ShareAccess;</span><br><span class="line">            PMAILSLOT_CREATE_PARAMETERS Parameters;</span><br><span class="line">        &#125; CreateMailslot;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtReadFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            ULONG POINTER_ALIGNMENT Key;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_WIN64)</span></span><br><span class="line">            ULONG Flags;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            LARGE_INTEGER ByteOffset;</span><br><span class="line">        &#125; Read;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtWriteFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            ULONG POINTER_ALIGNMENT Key;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_WIN64)</span></span><br><span class="line">            ULONG Flags;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            LARGE_INTEGER ByteOffset;</span><br><span class="line">        &#125; Write;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtQueryDirectoryFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            PUNICODE_STRING FileName;</span><br><span class="line">            FILE_INFORMATION_CLASS FileInformationClass;</span><br><span class="line">            ULONG POINTER_ALIGNMENT FileIndex;</span><br><span class="line">        &#125; QueryDirectory;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtNotifyChangeDirectoryFile / NtNotifyChangeDirectoryFileEx</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            ULONG POINTER_ALIGNMENT CompletionFilter;</span><br><span class="line">        &#125; NotifyDirectory;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtNotifyChangeDirectoryFile / NtNotifyChangeDirectoryFileEx</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// For minor code IRP_MN_NOTIFY_CHANGE_DIRECTORY_EX</span></span><br><span class="line">        <span class="comment">// N.B. Keep Length and CompletionFilter aligned with NotifyDirectory.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            ULONG POINTER_ALIGNMENT CompletionFilter;</span><br><span class="line">            DIRECTORY_NOTIFY_INFORMATION_CLASS POINTER_ALIGNMENT DirectoryNotifyInformationClass;</span><br><span class="line">        &#125; NotifyDirectoryEx;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtQueryInformationFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            FILE_INFORMATION_CLASS POINTER_ALIGNMENT FileInformationClass;</span><br><span class="line">        &#125; QueryFile;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtSetInformationFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            FILE_INFORMATION_CLASS POINTER_ALIGNMENT FileInformationClass;</span><br><span class="line">            PFILE_OBJECT FileObject;</span><br><span class="line">            <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">                    BOOLEAN ReplaceIfExists;</span><br><span class="line">                    BOOLEAN AdvanceOnly;</span><br><span class="line">                &#125;;</span><br><span class="line">                ULONG ClusterCount;</span><br><span class="line">                HANDLE DeleteHandle;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; SetFile;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtQueryEaFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            PVOID EaList;</span><br><span class="line">            ULONG EaListLength;</span><br><span class="line">            ULONG POINTER_ALIGNMENT EaIndex;</span><br><span class="line">        &#125; QueryEa;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtSetEaFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">        &#125; SetEa;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtQueryVolumeInformationFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            FS_INFORMATION_CLASS POINTER_ALIGNMENT FsInformationClass;</span><br><span class="line">        &#125; QueryVolume;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtSetVolumeInformationFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            FS_INFORMATION_CLASS POINTER_ALIGNMENT FsInformationClass;</span><br><span class="line">        &#125; SetVolume;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtFsControlFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Note that the user&#x27;s output buffer is stored in the UserBuffer field</span></span><br><span class="line">        <span class="comment">// and the user&#x27;s input buffer is stored in the SystemBuffer field.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG OutputBufferLength;</span><br><span class="line">            ULONG POINTER_ALIGNMENT InputBufferLength;</span><br><span class="line">            ULONG POINTER_ALIGNMENT FsControlCode;</span><br><span class="line">            PVOID Type3InputBuffer;</span><br><span class="line">        &#125; FileSystemControl;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtLockFile/NtUnlockFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PLARGE_INTEGER Length;</span><br><span class="line">            ULONG POINTER_ALIGNMENT Key;</span><br><span class="line">            LARGE_INTEGER ByteOffset;</span><br><span class="line">        &#125; LockControl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtFlushBuffersFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// No extra user-supplied parameters.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtCancelIoFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// No extra user-supplied parameters.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtDeviceIoControlFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Note that the user&#x27;s output buffer is stored in the UserBuffer field</span></span><br><span class="line">        <span class="comment">// and the user&#x27;s input buffer is stored in the SystemBuffer field.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG OutputBufferLength;</span><br><span class="line">            ULONG POINTER_ALIGNMENT InputBufferLength;</span><br><span class="line">            ULONG POINTER_ALIGNMENT IoControlCode;</span><br><span class="line">            PVOID Type3InputBuffer;</span><br><span class="line">        &#125; DeviceIoControl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtQuerySecurityObject</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            SECURITY_INFORMATION SecurityInformation;</span><br><span class="line">            ULONG POINTER_ALIGNMENT Length;</span><br><span class="line">        &#125; QuerySecurity;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtSetSecurityObject</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            SECURITY_INFORMATION SecurityInformation;</span><br><span class="line">            PSECURITY_DESCRIPTOR SecurityDescriptor;</span><br><span class="line">        &#125; SetSecurity;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Non-system service parameters.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for MountVolume</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVPB Vpb;</span><br><span class="line">            PDEVICE_OBJECT DeviceObject;</span><br><span class="line">            ULONG OutputBufferLength;</span><br><span class="line">        &#125; MountVolume;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for VerifyVolume</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVPB Vpb;</span><br><span class="line">            PDEVICE_OBJECT DeviceObject;</span><br><span class="line">        &#125; VerifyVolume;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for Scsi with internal device control.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> _<span class="title">SCSI_REQUEST_BLOCK</span> *<span class="title">Srb</span>;</span></span><br><span class="line">        &#125; Scsi;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtQueryQuotaInformationFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">            PSID StartSid;</span><br><span class="line">            PFILE_GET_QUOTA_INFORMATION SidList;</span><br><span class="line">            ULONG SidListLength;</span><br><span class="line">        &#125; QueryQuota;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System service parameters for:  NtSetQuotaInformationFile</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG Length;</span><br><span class="line">        &#125; SetQuota;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_QUERY_DEVICE_RELATIONS</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            DEVICE_RELATION_TYPE Type;</span><br><span class="line">        &#125; QueryDeviceRelations;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_QUERY_INTERFACE</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            CONST GUID *InterfaceType;</span><br><span class="line">            USHORT Size;</span><br><span class="line">            USHORT Version;</span><br><span class="line">            PINTERFACE Interface;</span><br><span class="line">            PVOID InterfaceSpecificData;</span><br><span class="line">        &#125; QueryInterface;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_QUERY_CAPABILITIES</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PDEVICE_CAPABILITIES Capabilities;</span><br><span class="line">        &#125; DeviceCapabilities;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_FILTER_RESOURCE_REQUIREMENTS</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PIO_RESOURCE_REQUIREMENTS_LIST IoResourceRequirementList;</span><br><span class="line">        &#125; FilterResourceRequirements;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_READ_CONFIG and IRP_MN_WRITE_CONFIG</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG WhichSpace;</span><br><span class="line">            PVOID Buffer;</span><br><span class="line">            ULONG Offset;</span><br><span class="line">            ULONG POINTER_ALIGNMENT Length;</span><br><span class="line">        &#125; ReadWriteConfig;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_SET_LOCK</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            BOOLEAN Lock;</span><br><span class="line">        &#125; SetLock;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_QUERY_ID</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            BUS_QUERY_ID_TYPE IdType;</span><br><span class="line">        &#125; QueryId;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_QUERY_DEVICE_TEXT</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            DEVICE_TEXT_TYPE DeviceTextType;</span><br><span class="line">            LCID POINTER_ALIGNMENT LocaleId;</span><br><span class="line">        &#125; QueryDeviceText;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_DEVICE_USAGE_NOTIFICATION</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            BOOLEAN InPath;</span><br><span class="line">            BOOLEAN Reserved[<span class="number">3</span>];</span><br><span class="line">            DEVICE_USAGE_NOTIFICATION_TYPE POINTER_ALIGNMENT Type;</span><br><span class="line">        &#125; UsageNotification;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_WAIT_WAKE</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            SYSTEM_POWER_STATE PowerState;</span><br><span class="line">        &#125; WaitWake;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameter for IRP_MN_POWER_SEQUENCE</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PPOWER_SEQUENCE PowerSequence;</span><br><span class="line">        &#125; PowerSequence;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for IRP_MN_SET_POWER and IRP_MN_QUERY_POWER</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (NTDDI_VERSION &gt;= NTDDI_VISTA)</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">                ULONG SystemContext;</span><br><span class="line">                SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;</span><br><span class="line">            &#125;;</span><br><span class="line">            POWER_STATE_TYPE POINTER_ALIGNMENT Type;</span><br><span class="line">            POWER_STATE POINTER_ALIGNMENT State;</span><br><span class="line">            POWER_ACTION POINTER_ALIGNMENT ShutdownType;</span><br><span class="line">        &#125; Power;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG SystemContext;</span><br><span class="line">            POWER_STATE_TYPE POINTER_ALIGNMENT Type;</span><br><span class="line">            POWER_STATE POINTER_ALIGNMENT State;</span><br><span class="line">            POWER_ACTION POINTER_ALIGNMENT ShutdownType;</span><br><span class="line">        &#125; Power;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// (NTDDI_VERSION &gt;= NTDDI_VISTA)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for StartDevice</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PCM_RESOURCE_LIST AllocatedResources;</span><br><span class="line">            PCM_RESOURCE_LIST AllocatedResourcesTranslated;</span><br><span class="line">        &#125; StartDevice;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Parameters for Cleanup</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// No extra parameters supplied</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// WMI Irps</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG_PTR ProviderId;</span><br><span class="line">            PVOID DataPath;</span><br><span class="line">            ULONG BufferSize;</span><br><span class="line">            PVOID Buffer;</span><br><span class="line">        &#125; WMI;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Others - driver-specific</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID Argument1;</span><br><span class="line">            PVOID Argument2;</span><br><span class="line">            PVOID Argument3;</span><br><span class="line">            PVOID Argument4;</span><br><span class="line">        &#125; Others;</span><br><span class="line"></span><br><span class="line">    &#125; Parameters;</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Save a pointer to this device driver&#x27;s device object for this request</span></span><br><span class="line">    <span class="comment">// so it can be passed to the completion routine if needed.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="comment">// 对应的设备对象</span></span><br><span class="line">    PDEVICE_OBJECT DeviceObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The following location contains a pointer to the file object for this</span></span><br><span class="line">    <span class="comment">// request.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="comment">// 对应的文件对象</span></span><br><span class="line">    PFILE_OBJECT FileObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The following routine is invoked depending on the flags in the above</span></span><br><span class="line">    <span class="comment">// flags field.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="comment">// 完成例程，使用IoSetCompletionRoutine(Ex)来注册，当下层驱动完成IRP后即可调用</span></span><br><span class="line">    <span class="comment">// 借此，驱动程序可以查询IRP完成状况，并执行任何必要的后处理，也可以以撤销状态完成</span></span><br><span class="line">    <span class="comment">// 并将IRP修改后重新发送给设备节点，或发送给不同的设备节点</span></span><br><span class="line">    PIO_COMPLETION_ROUTINE CompletionRoutine;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The following is used to store the address of the context parameter</span></span><br><span class="line">    <span class="comment">// that should be passed to the CompletionRoutine.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="comment">// 上下文，由使用IoSetCompletionRoutine(Ex)调用为完成例程设置的任意值</span></span><br><span class="line">    PVOID Context;</span><br><span class="line"></span><br><span class="line">&#125; IO_STACK_LOCATION, *PIO_STACK_LOCATION;</span><br></pre></td></tr></table></figure><blockquote><p>将这些信息分散到IRP主体和其IO栈位置，这样的作法使得系统可以为设备栈中的下一个设备更改IO栈位置参数，同时可以保留原始请求包含的参数。例如，以USB设备为目标的读取IRP通常会被设备IO控制IRP函数驱动程序所更改，使得设备控制的输入缓冲区参数指向能被下层USB总线驱动程序理解的USB请求包。另外注意，任何层（除了最底层）都可以注册完成例程，且每一层都可以在IO栈位置中拥有自己的一席之地。</p></blockquote><p>如果可能，IO管理器会从下列3个每颗处理器的IRP非换页旁视列表之一中分配IRP：</p><ul><li>小IRP旁视列表：存储只有一个栈位置的IRP</li><li>中IRP旁视列表：存储只有二至四个栈位置的IRP</li><li>大IRP旁视列表：存储超过四个栈位置的IRP，一般包含14个，但是会根据当前所需栈位置数量每分钟调整一次分配的栈位置数量，最多20个</li></ul><p>有的列表会得到全局旁视列表的支持，从而实现更高效的跨CPU IRP流动。如果IRP需要的栈位置数量超过大旁视列表中IRP可包含的数量，该IRP会从非换页内存池中分配。</p><blockquote><p>在活跃时，每个IRP通常会在与请求该IO的线程相关的IRP列表中排队；而在执行与线程无关的IO时，它会被存储在文件对象中。借此，如果线程在IO请求完成之前终止，IO系统就可以找到并取消任何尚未处理的IRP。此外换页IO的IRP也会关联至导致页面错误的线程（不过这些IRP无法取消）。这样Windows就可以使用线程无关的IO优化机制：如果当前线程就是发起线程，则无需使用异步过程调用（APC）完成该IO。这意味着页面错误将在线程内部发生，无需传递APC。</p></blockquote><h3 id="IRP流程">IRP流程</h3><p><img src="https://s2.loli.net/2025/06/06/nk5BKgWiu2SRDmA.png" alt="image-20250606135211545"></p><p>IRP由对象管理器创建，随后被发送至目标设备节点中的第一个设备。并非只有IO管理器才可以创建IRP，即插即用设备和电源管理器也可以通过主要函数代码IRP_MJ_PNP和IRP_MJ_POWER创建IRP。</p><p>假设设备节点如上图所示，那么以这个设备节点为目标的IRP会创建6个IO栈位置，每层对应一个。IRP始终会被传递给最高层设备，哪怕对处于设备栈中较低的位置命名设备打开了句柄。</p><p>驱动接收到IRP后，可以执行以下操作：</p><blockquote><ul><li>可以完成此IRP随后调用IoCompleteRequest。这可能是因为该IRP包含一些无效参数（例如缓冲区大小不足，或包含出错的/0控制代码），或因为操作请求本身很快速，可以立即完成，例如获取与设备有关的某些状态，或从注册表读取一个值。驱动程序会调用IoGetCurrentIrpStackLocation获取自己需要引用的栈位置的指针。</li><li>进行过某些可选处理后，驱动程序可以将该IRP转发至下一层。例如上层筛选器可以对操作进行某些日志记录工作，随后向下传递该IRP以供正常执行。在向下发送该请求前，驱动程序必须准备好下一个IO栈位置，因为随后的下一个驱动程序可能需要查找该位置。如果不希望进行任何修改，可以使用IoSkipCurrentIrpStackLocation宏，或使用IoCopyIrpStackLocationToNext创建副本，使用IoGetNextIrpStackLocation获得指针，并酌情修改栈位置副本。下一个IO栈位置准备好后，驱动程序会调用IoCallDriver执行实际的IRP转发工作。</li><li>作为上一种方式的扩展，驱动程序还可以调用IoSetCompletionRoutine(Ex)例程注册一个完成例程，随后再向下传递IRP。除了最底层之外，其他任何一层都可以注册完成例程（最底层驱动程序注册完成例程的做法没有任何意义，因为驱动程序必须完成该IRP，所以无须回调）。当下层驱动程序调用IoCompleteRequest后，IRP会向上传递，按照注册顺序的倒序依次调用所有完成例程。实际上，IRP的发起者（IO管理器、PnP管理器或电源管理器）会使用这种机制执行任何IRP后处理操作并最终释放该IRP。</li></ul></blockquote><h3 id="针对单层硬件驱动程序的IO请求">针对单层硬件驱动程序的IO请求</h3><p><img src="https://s2.loli.net/2025/06/06/ugS2A4OLMvdfqxo.png" alt="image-20250606192347758"></p><blockquote><p>实线表示用户模式和内核模式之间的常规划分。虚线分个类在请求线程上下中运行以及在任意线程上下文中运行的代码。</p><p>大方框包裹的4个小方块（分别为分发例程、启动I/O例程、ISR和DPC例程）代表驱动程序提供的代码。所有其他小方块对应的内容均由系统提供。</p><p>（3）图6-18中会假设硬件设备可以一次处理一个操作，很多类型的设备属于这种情况。就算设备可以处理多个请求，操作的基本流程也是类似的。</p></blockquote><p>上图所示的事件处理顺序如下：</p><blockquote><ol><li>客户端应用程序调用一个 Windows API，如 ReadFile。ReadFile 调用原生NtReadFile（位于Ntdll.dll中），借此将该线程转换至执行体NtReadFile的内核模式</li><li>NtReadFile中实现的IO管理器针对该请求执行一些合理性检查，例如客户端提供的缓冲区是否可以通过正确的页面保护机制访问。随后，I/O管理器将（使用所提供的文件句柄）定位相关驱动程序、分配并初始化一个 IRP、为该 IRP使用 IoCallDriver，以及将驱动程序调用到相应的分发例程（本例中对应于IRP_MJ_READ索引）。</li><li>这是驱动程序首次看到该IRP。这个调用通常会涉及发出申请的线程，唯一可以不这样做的方法是由上层筛选器保存该IRP，并稍后通过另一个线程调用IoCallDriver。为了更全面地讨论，此处我们会假设实际情况并非如此（并且对于涉及硬件设备的大部分场景，也不会出现这种情况，哪怕存在上层筛选器，也会在同一个线程中执行某些处理工作并立即谓用下层驱动程序）。驱动程序中的分发读取回调承担两个任务：首先，负责执行I/O 管理器无法进行的更多检查，因为 IO管理器并不知道每个请求真正的实际含义。例如驱动程序可能会检查为读取或写入操作提供的缓冲区是否足够大，或者对于 DeviceloContol操作驱动程序会检查所提供的 IO控制代码是否可以得到支持。如果此类检查失败，驱动程序会使用失败状态完成该IRP(IoCompleteRequest）并立即返回。如果检查成功，驱动程序会调用自己的启动110例程来发起操作。然而，如果硬件设备当前正忙（忙于处理上一个IRP），那么该IRP会被插入由驱动程序管理的队列中，并在不完成该IRP的前提下返回一个STATUS_PENDING状态。IO管理器会通过IoStartPacket函数适应这样的场景，该函数会检查设备对象中的“忙碌”位，如果设备正忙，则会将IRP加入队列（该队列也是设备对象结构的一部分）。如果设备不忙，则会将设备位设置为忙碌，然后调用已注册的启动IO例程（别忘了，驱动程序对象中就有这样的成员，并且可能已经在DriverEnty中进行了初始化）。就算驱动程序选择不使用IoStartPacket，也可能会遵循类似的逻辑。</li><li>如果设备不忙，将直接从分发例程调用启动I/O例程，这意味着目前依然在发出该调用的请求方线程内执行。然而上图所示的启动/O例程是在任意线程上下文中调用的，当讨论到第（8）步的DPC 例程时就会知道，常规情况下确实会如此。这个启动IO例程的作用是获取与IRP有关的参数，并使用它们对硬件设备编程（例如使用WRITE_PORT_UCHAR、 WRITE_REGISTER_ULONG 等HAL 硬件访问例程写入其端口或寄存器）。当启动IO完成后，调用将会返回，驱动程序中不再运行特殊代码，硬件开始“执行自己的任务”。当硬件设备开始工作时，同一个线程可能向设备发出了更多请求（如果使用异步操作），或者其他线程打开了指向该设备的句柄。此时分发例程会意识到设备正忙，因此将IRP插入IRP队列（如上所述，实现这一目标的方式之一是调用IoStartPacket）。</li><li>设备完成当前操作后，将产生一个中断。内核陷阱处理程序会将被选中执行该中断的CPU上当前执行的任意线程的CPU上下文保存起来，然后将该CPU的IROL提升至中断所关联的IRQL（DIRQL），并跳转至该设备注册的ISR。</li><li>运行在设备IRQL（高于2）的ISR会执行尽可能少的工作，告诉设备停止中断信号，并获取硬件设备的状态或其他必要信息。在它最后一步的操作中，ISR会将需要在更低IRQL下进一步处理的DPC加入队列。使用DPC执行大部分设备服务，这种做法的优势在于在开始处理较低优先级DPC之前，IROL介于设备IRQL和DPC/分发IRQL（2）之间的、产生了阻塞的中断都是被允许的。因此中间优先级的中断可比不这样做时更迅速地得到服务，进而有助于降低系统延迟。</li><li>中断解除后，内核会注意到DPC队列非空，因此会在IRQL DPC_LEVEL(2)上使用软件中断跳转至DPC处理环路。</li><li>最终，DPC被从队列中移出，并在IRQL2下执行，通常会执行如下两个主要操作。<ul><li>获取队列中的下一个IRP（如果存在的话），并为设备启动新操作。为此，首先会防止设备闲置太长时间。如果分发例程使用了IoStartPacket，那么DPC例程将会调用对应的IoStartNextPacket，仅此而已。如果有IRP可用，将从DPC调用启动IO例程。因此一般情况下，启动I/O例程可以从任意线程上下文调用。如果队列中没有其他IRP，设备将被标记为不忙，也就是说已经准备好处理收到的下一个请求。</li><li>完成IRP，其操作已经由驱动程序调用IoCompleteRequest完成。随后驱动程序将不再负责处理该IRP，也不应再接触该IRP，因为这个IRP可能在调用完成后随时释放。IoCompleteRequest将调用已注册的任何完成例程。最后，1/O管理器将释放该IRP（实际上是使用它自己所拥有的一个完成例程来释放的）。</li></ul></li><li>操作完成后，最初发出请求的线程需要获得通知。由于执行DPC的当前线程是任意线程，而非使用初始进程地址空间的初始线程，为了能够在发出请求的线程上下文中执行代码，需要对该线程发出一个特殊的内核APC。APC是一种函数，可用于强制在特定线程的上下文中执行。当发出请求的线程得到CPU时间后，将优先执行这个特殊的内</li><li>核APC（位于IRQL APC_LEVEL=1下），进而执行所需的工作，例如解除线程的等待状态，为注册到异步操作的事件发送信号等。</li></ol></blockquote><p>关于IO完成还有一个问题需要注意：异步IO函数ReadFileEx和WriteFileEx允许调用方将回调函数作为参数提供。如果调用方这样做，IO管理器会将用户模式APC加入调用方的线程APC队列，并将其作为I/O完成前执行的最后一个步骤。该功能使得调用方可以指定1/O请求完成或取消之后要调用的子例程。用户模式APC完成例程是在发出请求的线程上下文中执行的，且只有在该线程进入可警告的等待状态后才会发出（通过调用诸如SleepEx、WaitForSingleObjectEx 或WaitForMultipleObjectsEx等函数）。</p><h4 id="用户地址空间缓冲区访问">用户地址空间缓冲区访问</h4><p>IRP的处理过程涉及4个主要驱动程序函数。这些例程中的部分或全部都可能需要访问客户端应用程序提供的位于用户空间的缓冲区。当应用程序或设备驱动程序使用NtReadFile，NtWriteFile或NtDeviceIoControlFile系统服务间接创建了IRP后，将通过IRP主体的UserBuffer成员提供指向用户缓冲区的指针。然而直接访问该缓冲区的做法只能在发出申请的线程上下文中及IRQL0中进行。但是只有分发例程满足上面的两个条件。另外三个例程，均在任意线程中执行且IRQL为2。这样的话，如果直接访问：</p><ul><li>IRQL大于等于2：无法换页，如果用户缓冲区换出，会导致崩溃。</li><li>可能是任意线程：访问到随机的进程的虚拟内存空间</li></ul><p>所以需要一种更加安全的方式去访问内存。IO管理器提供了三种方法来访问用户态缓冲区：</p><ul><li>缓冲的IO：IO管理器在内核分配一个镜像缓冲区，且从非换页池分配，大小和用户缓冲区在中的大小相同，其中（IRP）存储了指向IRP主体的AssociatedIrp.SystemBuffer成员内新建缓冲区的指针，写入时，在创建IRP的时候IO管理器会将调用方的缓冲区数据复制到已分配的缓冲区。读取时，IRP完成时会将已分配缓冲区中的数据复制到用户缓冲区，随后释放已分配的内存。</li><li>直接的IO：直接IO提供了一种不需要复制就可以直接访问用户缓冲区的能力。IO管理器创建IRP时，调用MmProbeAndLockPages函数将用户缓冲区锁定到内存（使其不可换页）。IO管理器会以内存描述符列表的形式存储有关内存的描述信息，MFL描述了被缓冲区使用的物理内存，其地址存储在IRP主体的MdlAddress成员中。驱动程序可以通过MmGetSystemAddressForMdlSafe函数将缓冲区映射至系统地址空间，并传入所提供的MDL。借此生成的指针可以在任何进程上下文和任何IRQL中安全的使用。这等于对用户缓冲区进行了双重映射。用户直接地址只能从原始进程上下文使用，而到系统空间的第二次映射使其可在任何上下文中使用。IRP完成后，IO管理器会是以哦那个MmUnlockPages解锁缓冲区。</li><li>两者皆非的IO：IO管理器不执行任何缓冲区管理工作，这些工作将留给设备驱动程序自行处理。</li></ul><p>驱动程序可以通过以下方式选择上面的方法：</p><p>读取和写入请求：为设备对象Flags成员设置DO_BUFFER_IO（缓冲的IO）或DO_DIRECT_IO（直接的IO）。如果都没有设置，则是两者皆非的IO。</p><p>对于IRP_MJ_DEVICE_CONTROL，可以使用CTL_CODE宏构造每个控制代码，通过其中某些位设置缓冲具体方法。</p><h4 id="同步">同步</h4><p>由于驱动程序的执行可能被其它高优先级线程抢占，进而时间片量程可能到期或被更高IRQL的中断所打断。同时，在多处理器系统中，Windows可以在多处理器上并行地运行驱动程序代码。如果不同步，分发例程运行在IRQL0时可能被设备中断打断，导致其ISR会在设备驱动正在运行的情况下执行，可能会导致它们都想修改一些数据从而导致错误。</p><p>在单CPU系统中，如果想要实现在不同IRQL等级的线程之间的同步，只需要在同步时把低IRQL等级的线程提升到它们中最高的即可（KeRaiseIrql）。如果是跨CPU同步，则需要旋转锁。</p><p>旋转锁是内存中的一个位，可以被原子测试和修改操作访问，且可用于大于等于IRQL2的场景。由于互斥体只能在IRQL1及以下的等级使用(需要调度器)，所以对旋转锁的等待是一种忙等待：线程无法进入常规等待状态，因为这需要调度器被唤醒并切换至该CPU上的其它线程。</p><p>获取旋转锁时，CPU的IRQL被提升至与同步对象相同（同上面单CPU系统）。然后旋转锁会通过原子测试的方式获取并设置旋转锁位。需要使用KeAcquireSpinLock和KeReleaseSpinLock函数来设置，释放锁。并用KeInitializeSpinLock来初始化。对于函数和ISR的同步，必须使用另一个函数。每个中断对象内部都保存了一个旋转锁，是ISR执行之前获得的，这说明同一个ISR无法在其它CPU上并发运行。该旋转锁可通过KeAcquireInterruptSpinLock间接获得并可使用KeReleaseInterruptSpinLock来释放；也可以用KeSynchronizeExecution函数，该函数可接受驱动程序提供的回调函数，并会在中断旋转锁的获取和释放之间调用。</p><p>尽管ISR需要特别注意，但是设备驱动程序所使用的任何数据都可接受驱动程序所访问，因此设备驱动程序代码在使用任何全局或共享数据，或对物理设备本身进行任何方式的访问时，必须以同步的形式进行访问。</p><hr><p>以上内容，绝大部分出自深入解析Windows操作系统第7版并融入了部分个人理解。</p><p>这是第一篇，尚未写完。还有2。通信实验放在下一篇博客吧。</p>]]></content>
    
    
    <summary type="html">本章介绍windows的IO系统，为第一部分</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="Win核心" scheme="https://www.pri87.vip/categories/Win%E6%A0%B8%E5%BF%83/"/>
    
    <category term="win内核" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/win%E5%86%85%E6%A0%B8/"/>
    
    
    <category term="IO" scheme="https://www.pri87.vip/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>WinUI3-简介与使用</title>
    <link href="https://www.pri87.vip/posts/779bcfa0.html"/>
    <id>https://www.pri87.vip/posts/779bcfa0.html</id>
    <published>2025-05-31T12:59:45.000Z</published>
    <updated>2025-05-31T14:23:52.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WinUI3">WinUI3</h2><p>WinUI3是当前微软开发的最新的UI框架，之前我只会win32的时候，需要处理令人讨厌的消息回调，如今，使用WinUI3和写前后端一样方便，甚至后端还是C#，好写，爽。不过缺点就是编译出来文件很大，而且并不是一个单独的exe。当然可以用MSIX打包就是了。</p><h2 id="使用教程">使用教程</h2><p><img src="https://s2.loli.net/2025/05/31/H6v9NbCQxmZoB4W.png" alt="image-20250531212907488"></p><p>选择这里面的空白应用，已打包（桌面版中的WinUI 3）</p><p><img src="https://s2.loli.net/2025/05/31/m6wf3HTI5KeSYB9.png" alt="image-20250531212950045"></p><p>左边的App.xaml是入口点，下面的MainWindows.xaml是主类</p><p>xaml中可以设置控件的基本属性，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;Grid&gt;</span><br><span class="line">    &lt;Grid Grid.Row=&quot;2&quot; Margin=&quot;12&quot;&gt;</span><br><span class="line">        &lt;Grid.ColumnDefinitions&gt;</span><br><span class="line">            &lt;ColumnDefinition Width=&quot;*&quot;/&gt;</span><br><span class="line">            &lt;ColumnDefinition x:Name=&quot;MiddlePaddingColumn&quot; Width=&quot;10&quot;/&gt;</span><br><span class="line">            &lt;ColumnDefinition Width=&quot;80&quot;/&gt;</span><br><span class="line">        &lt;/Grid.ColumnDefinitions&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextBox</span><br><span class="line">        x:Name=&quot;FileInputTextBox&quot;</span><br><span class="line">        Grid.Row=&quot;1&quot;</span><br><span class="line">        Height=&quot;32&quot;</span><br><span class="line">        Margin=&quot;12,8,12,8&quot;</span><br><span class="line">        VerticalContentAlignment=&quot;Center&quot;</span><br><span class="line">        PlaceholderText=&quot;拖曳文件或双击打开文件...&quot;</span><br><span class="line">        AllowDrop=&quot;True&quot;</span><br><span class="line">        Drop=&quot;FileInputTextBox_Drop&quot;/&gt;</span><br><span class="line">        &lt;Grid Grid.Column=&quot;2&quot;&gt;</span><br><span class="line">            &lt;Button Click=&quot;Button_Click&quot;&gt;点击&lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/Grid&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure><p>先创建了一个横向(ColumnDefinitions)的Grid，然后创建不同的控件放入，其中Drop事件绑定了FileInputTextBox_Drop函数，Click绑定了Button_Click这个函数，这个函数在该xaml所属的cs文件中定义，打开cs文件</p><p><img src="https://s2.loli.net/2025/05/31/6XdlWJv7tgFRjir.png" alt="image-20250531215705446"></p><p>可以看到入口点</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WinUItest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> An empty window that can be used on its own or navigated to within a Frame.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过在InitializeComponent之后添加更多内容实现窗口属性的修改，比如这样：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    DriverControl.DriverService.LogEvent += LogHandler;</span><br><span class="line">    <span class="comment">// 实现主题栏高亮</span></span><br><span class="line">    ExtendsContentIntoTitleBar = <span class="literal">true</span>;</span><br><span class="line">    Activated += MainWindow_Activated;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置大小</span></span><br><span class="line">    IntPtr hWnd = WindowNative.GetWindowHandle(<span class="keyword">this</span>);</span><br><span class="line">    WindowId windowId = Win32Interop.GetWindowIdFromWindow(hWnd);</span><br><span class="line">    AppWindow appWindow = AppWindow.GetFromWindowId(windowId);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">uint</span> dpi = DpiHelper.GetDpiForWindow(hWnd);</span><br><span class="line">    <span class="built_in">double</span> scaleFactor = dpi / <span class="number">96.0</span>;</span><br><span class="line">    <span class="built_in">int</span> logicalX = <span class="number">500</span>;</span><br><span class="line">    <span class="built_in">int</span> logicalY = <span class="number">500</span>;</span><br><span class="line">    <span class="built_in">int</span> logicalWidth = <span class="number">616</span>;</span><br><span class="line">    <span class="built_in">int</span> logicalHeight = <span class="number">248</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> physicalX = (<span class="built_in">int</span>)(logicalX * scaleFactor);</span><br><span class="line">    <span class="built_in">int</span> physicalY = (<span class="built_in">int</span>)(logicalY * scaleFactor);</span><br><span class="line">    <span class="built_in">int</span> physicalWidth = (<span class="built_in">int</span>)(logicalWidth * scaleFactor);</span><br><span class="line">    <span class="built_in">int</span> physicalHeight = (<span class="built_in">int</span>)(logicalHeight * scaleFactor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建物理像素的大小矩形</span></span><br><span class="line">    RectInt32 newSize = <span class="keyword">new</span> RectInt32(physicalX, physicalY, physicalWidth, physicalHeight);</span><br><span class="line">    appWindow.MoveAndResize(newSize);</span><br><span class="line">    <span class="keyword">if</span> (appWindow.Presenter <span class="keyword">is</span> OverlappedPresenter presenter)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 锁定大小</span></span><br><span class="line">        presenter.IsResizable = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将输入框双击事件重载</span></span><br><span class="line">    FileInputTextBox.AddHandler(TextBox.DoubleTappedEvent, <span class="keyword">new</span> DoubleTappedEventHandler(FileInputTextBox_DoubleTapped), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面绑定的函数直接定义即可</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> path;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">FileInputTextBox_Drop</span>(<span class="params"><span class="built_in">object</span> sender, DragEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 检查拖放进来的数据是否包含文件项</span></span><br><span class="line">    <span class="keyword">if</span> (e.DataView.Contains(StandardDataFormats.StorageItems))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取拖放进来的 StorageItems</span></span><br><span class="line">        <span class="keyword">var</span> items = <span class="keyword">await</span> e.DataView.GetStorageItemsAsync();</span><br><span class="line">        <span class="keyword">if</span> (items.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (items[<span class="number">0</span>] <span class="keyword">is</span> StorageFile file)</span><br><span class="line">            &#123;</span><br><span class="line">                FileInputTextBox.Text = file.Path;</span><br><span class="line">                path = file.Path;</span><br><span class="line">                name = Path.GetFileNameWithoutExtension(file.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    e.Handled = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FileInputTextBox_DragOver</span>(<span class="params"><span class="built_in">object</span> sender, DragEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 指定系统接受复制操作，否则拖放不会被允许</span></span><br><span class="line">    e.AcceptedOperation =</span><br><span class="line">        Windows.ApplicationModel.DataTransfer.DataPackageOperation.Copy;</span><br><span class="line"></span><br><span class="line">    e.Handled = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就好了</p><p>click同理</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ContentDialog dialog = <span class="keyword">new</span> ContentDialog</span><br><span class="line">    &#123;</span><br><span class="line">        Title = name,</span><br><span class="line">        Content = path,</span><br><span class="line">        CloseButtonText = <span class="string">&quot;关闭&quot;</span>,</span><br><span class="line">        XamlRoot = <span class="keyword">this</span>.Content.XamlRoot</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ContentDialogResult result = <span class="keyword">await</span> dialog.ShowAsync();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就是这样，总之就是写回调+系统API就好了</p>]]></content>
    
    
    <summary type="html">WinUI3,好！</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="开发" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/"/>
    
    <category term="UI应用" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/UI%E5%BA%94%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>驱动开发0</title>
    <link href="https://www.pri87.vip/posts/ce07a058.html"/>
    <id>https://www.pri87.vip/posts/ce07a058.html</id>
    <published>2025-05-29T09:54:23.000Z</published>
    <updated>2025-06-02T15:12:49.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WDM与KMDF">WDM与KMDF</h2><p>WDM是微软一开始发布的驱动开发模型，全都是底层内容。在开发时，既要处理硬件，也要处理驱动程序与操作系统内核的交互。</p><p>WDF模型，为了降低驱动的开发难度，WDF中对WDM进行了多次封装，比如实现了对象，事件，自动排队等等，同时封装了一下驱动程序中的共同行为。不用再关心IRP分发，调度等问题</p><p>KMDF和UMDF是基于WDF的模型，一个是内核模式，一个是用户模式。</p><h2 id="选择">选择</h2><p>虽然标题是开发，但是实际上是逆向，中断，服务例程之类的东西还是需要学的，所以这里还是用WDM开发</p><p>之前那篇博客疑似是用KMDF写的，所以从这里开始重来吧。</p><h2 id="推荐教程">推荐教程</h2><p><a href="https://space.bilibili.com/348612384">https://space.bilibili.com/348612384</a></p><h2 id="基本框架">基本框架</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wdm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICENAME <span class="string">L&quot;\\DEVICE\\DeviceTest&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMNAME <span class="string">L&quot;\\??\\SymboilcLinkTest&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DrvUnload</span><span class="params">(PDRIVER_OBJECT pdriver)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pdriver-&gt;DeviceObject)</span><br><span class="line">&#123;</span><br><span class="line">IoDeleteDevice(pdriver-&gt;DeviceObject);</span><br><span class="line">UNICODE_STRING symname = &#123;&#125;;</span><br><span class="line">RtlInitUnicodeString(&amp;symname, SYMNAME);</span><br><span class="line">IoDeleteSymbolicLink(&amp;symname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;Driver Unloaded\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义对应的回调函数</span></span><br><span class="line">NTSTATUS <span class="title function_">myCreate</span><span class="params">(PDEVICE_OBJECT pdevice, PIRP pirp)</span></span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;my divice has be opened\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">pirp-&gt;IoStatus.Status = status;</span><br><span class="line">pirp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">IoCompleteRequest(pirp, IO_NO_INCREMENT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">NTSTATUS <span class="title function_">myClose</span><span class="params">(PDEVICE_OBJECT pdevice, PIRP pirp)</span></span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;my divice has be closed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">pirp-&gt;IoStatus.Status = status;</span><br><span class="line">pirp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">IoCompleteRequest(pirp, IO_NO_INCREMENT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">NTSTATUS <span class="title function_">myCleanup</span><span class="params">(PDEVICE_OBJECT pdevice, PIRP pirp)</span></span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line">DbgPrint(<span class="string">&quot;my divice has be cleaned\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">pirp-&gt;IoStatus.Status = status;</span><br><span class="line">pirp-&gt;IoStatus.Information = <span class="number">0</span>;</span><br><span class="line">IoCompleteRequest(pirp, IO_NO_INCREMENT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 驱动入口</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">NTSTATUS <span class="title function_">DriverEntry</span><span class="params">(</span></span><br><span class="line"><span class="params">PDRIVER_OBJECT driver,<span class="comment">//驱动对象</span></span></span><br><span class="line"><span class="params">PUNICODE_STRING reg_path<span class="comment">//unicode字符串，指明注册表位置</span></span></span><br><span class="line"><span class="params">)</span></span><br><span class="line">&#123;</span><br><span class="line">driver-&gt;DriverUnload = DrvUnload;<span class="comment">//设置卸载函数，卸载时调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建设备对象</span></span><br><span class="line"><span class="comment">// 步骤为生成unicode字符串作为名字，然后使用IoCreateDevice来获取传出的pdevice</span></span><br><span class="line">UNICODE_STRING deviceName = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">RtlInitUnicodeString(&amp;deviceName, DEVICENAME);</span><br><span class="line">PDEVICE_OBJECT pdevice = <span class="literal">NULL</span>;</span><br><span class="line">NTSTATUS status = IoCreateDevice(driver, <span class="number">0</span>, &amp;deviceName, FILE_DEVICE_UNKNOWN, <span class="number">0</span>, TRUE, &amp;pdevice);</span><br><span class="line"><span class="keyword">if</span> (!NT_SUCCESS(status))</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;Create Device fail:%x\n&quot;</span>, status);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建符号链接</span></span><br><span class="line"><span class="comment">// 步骤同上</span></span><br><span class="line">UNICODE_STRING symname = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">RtlInitUnicodeString(&amp;symname, SYMNAME);</span><br><span class="line">status = IoCreateSymbolicLink(&amp;symname, &amp;deviceName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!NT_SUCCESS(status))</span><br><span class="line">&#123;</span><br><span class="line">DbgPrint(<span class="string">&quot;Create symbolicLink fail:%x\n&quot;</span>, status);</span><br><span class="line">IoDeleteDevice(pdevice);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为设备定义对应的回调函数，注意这里是以驱动的身份获取的</span></span><br><span class="line">driver-&gt;MajorFunction[IRP_MJ_CREATE] = myCreate;</span><br><span class="line">driver-&gt;MajorFunction[IRP_MJ_CLOSE] = myClose;</span><br><span class="line">driver-&gt;MajorFunction[IRP_MJ_CLEANUP] = myCleanup;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充之前的<a href="https://www.pri87.vip/posts/d2620136.html">驱动开发入门</a>这篇博客，这里需要说明一下对于驱动，设备对象，以及符号链接这三个东西的概念。</p><p>驱动：运行在操作系统OS内存中，作为补充操作系统功能的软件。类似于R3里的程序与DLL的关系。一般分为两种，一种是硬件驱动：用来实现接收硬件的数字信号并进行处理，或者实现操作系统对硬件的控制。这里的硬件可以是虚拟硬件，因为驱动是中间层，操作系统只会发送消息，让它执行某些操作，系统并不关心驱动如何完成这些任务。因此，虚拟硬盘(类似将内存当作硬盘用)驱动可以在系统要读取其控制的数据时，将地址转化为内存中的读取等等。另一种是和硬件无关的驱动，只是借助驱动的权限高的特点，来实现R3层不好实现的内容，一般叫它内核模块。</p><p>设备对象：操作系统控制硬件时，不是直接和硬件交互，而是中间间隔了硬件抽象层(hal.dll)，也就是虚拟设备。虚拟设备需要处理系统的irp请求，比如文件打开，文件关闭等等。这些内容都应该是函数/过程，r0也只能写在都写sys文件(驱动)里面。因此，驱动需要生成并绑定设备对象，之后所有的irp回调，都是由驱动来定义的，系统收到对这个对象的请求，都会先给驱动，在驱动中找到对应的irp回调并触发。</p><p>符号链接：操作系统需要一个指明设备对象的句柄才可以知道找哪个设备对象，同时，为了让R3也可以使用不同的硬件，设备对象需要绑定一个全局的符号链接，通过使用这个链接，表示了指向这个设备对象，符号链接是一个字符串。比如调用上面例子的设备，在R3需要使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateFile(<span class="string">&quot;\\\\.\\SymboilcLinkTest&quot;</span>,GENERIC_READ|GENERIC_WRITE,<span class="number">0</span>,<span class="literal">NULL</span>,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">介绍在windows下vs进行驱动开发的方法和系统模块的基本框架</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="R0" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/R0/"/>
    
    <category term="驱动" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/R0/%E9%A9%B1%E5%8A%A8/"/>
    
    
    <category term="驱动" scheme="https://www.pri87.vip/tags/%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Intel-pin动态二进制插桩工具</title>
    <link href="https://www.pri87.vip/posts/6811c218.html"/>
    <id>https://www.pri87.vip/posts/6811c218.html</id>
    <published>2025-05-22T16:43:05.000Z</published>
    <updated>2025-06-29T17:17:25.987Z</updated>
    
    <content type="html"><![CDATA[<h1>pin</h1><p>这是什么东西就不解释了，我也不是很清楚，网上的介绍也挺多的。</p><p>下面的演示以Windows为准</p><h2 id="安装">安装</h2><p><a href="https://www.intel.cn/content/www/cn/zh/developer/articles/tool/pin-a-binary-instrumentation-tool-downloads.html">Pin - A Dynamic Binary Instrumentation Tool</a></p><p>在其中找到Windows(MSVC)</p><p><img src="https://s2.loli.net/2025/05/23/kblyGYRrhd7HWME.png" alt="image-20250523004544183"></p><p>选择最新版下载</p><p>下载后解压，其中的pin.exe就是pin主程序了。</p><p>将本目录添加到path</p><p>然后安装<a href="https://cygwin.com/install.html">Cygwin</a>，在选择安装时额外添加make，gcc和g++，安装成功后，将bin目录添加到path</p><p>然后尝试编译pintool工具，看看有没有成功安装：</p><ul><li>打开x64 Native Tools Command Prompt for VS 2022/如果是32位使用32位的prompt</li><li>跳转到\source\tools\MyPinTool目录</li><li>执行make all TARGET=Intel64</li></ul><p>会生成obj-intel64文件夹及其中的dll文件，然后尝试执行验证一下能不能用</p><p>到ManualExamples中再次make，cd到obj-intel64中pin -t inscount2.dll -o inscount0.log – divide_by_zero.exe，查看输出文件是否存在和是否可以执行。</p><p><img src="https://s2.loli.net/2025/05/25/4jneEhY3taAIpDO.png" alt="image-20250525020741939"></p><p>十分合理。</p><p>参考：</p><p>[Intel Pin — Windows&amp;wsl 编译踩坑实录](<a href="https://hur1k.github.io/2023/02/26/Intel">https://hur1k.github.io/2023/02/26/Intel</a> Pin — Windows&amp;wsl 编译踩坑实录/)</p><p><a href="https://software.intel.com/sites/landingpage/pintool/docs/98484/Pin/html/index.html#BuildingExamples">Pin: Pin 3.21 User Guide</a></p><p><a href="https://www.cnblogs.com/mgdzy/p/13644475.html">Intel-Pin的windows安装</a></p><hr><h2 id="项目">项目</h2><h3 id="构建项目">构建项目</h3><p>在source/tools中新建一个文件夹PinTool1</p><p>在里面写一个cpp文件，我直接在ManualExample文件里面复制了，命名为pintool.cpp，然后同样复制一个makefile.rules和makefile文件，makefile.rule文件里面把TEST_TOOL_ROOTS后面的内容改为pintool：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TEST_TOOL_ROOTS := pintool</span><br></pre></td></tr></table></figure><p>并把后面的附加内容删掉</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(TARGET_OS)</span>,windows)</span><br><span class="line">    TEST_TOOL_ROOTS += w_malloctrace buffer_windows emudiv replacesigprobed dumpargv</span><br><span class="line">    APP_ROOTS += divide_by_zero</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>然后直接make tools，这里不知道为什么如果使用make TARGET=Intel64会报错不支持的架构，但是直接make也可以生成64位的dll</p><p>然后依旧任意找个exe测试</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pin -t obj-intel64/pintool.dll -o log.log -- divide_by_zero.exe</span><br></pre></td></tr></table></figure><p>成功。</p><h3 id="使用VS写代码">使用VS写代码</h3><p>创建新项目，但是修改编译环境：</p><p><a href="https://lzeroyuee.cn/2021/02/18/Intel-Pin%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/">Intel Pin的安装与配置 | lzeroyuee’s blog</a></p><p>在目录<code>%PinDir%\source\tools\MyPinTool</code>下有示例代码，使用VS编译即可，编译中可能存在错误，对照错误提示修改，主要的编译环境配置如下：</p><ul><li><p><code>C/C++ --&gt; 常规 --&gt; 附加包含目录</code>添加如下路径：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">..</span>\<span class="string">..</span>\include\pin</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\include\pin\gen</span><br><span class="line"><span class="string">..</span>\InstLib</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\components\include</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\stlport\include</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\libstdc++\include</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\crt\include</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\crt</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\crt\include\kernel\uapi</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\crt\include\kernel\uapi\asm-x86</span><br><span class="line"></span><br><span class="line">对x86需要额外添加：</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\crt\include\arch-x86</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\xed-ia32\include\xed</span><br><span class="line"></span><br><span class="line">对x64需要额外添加：</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\crt\include\arch-x86_64</span><br><span class="line"><span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\extras\xed-intel64\include\xed</span><br></pre></td></tr></table></figure></li><li><p><code>链接器 --&gt; 高级 --&gt; 映像具有安全异常处理程序</code>设置为<strong>否</strong></p></li><li><p><code>链接器 --&gt; 输入 --&gt; 附加依赖项</code>添加如下项目：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pin.<span class="keyword">lib</span></span><br><span class="line">xed.<span class="keyword">lib</span></span><br><span class="line">pinvm.<span class="keyword">lib</span></span><br><span class="line">pincrt.<span class="keyword">lib</span></span><br><span class="line">kernel32.<span class="keyword">lib</span></span><br><span class="line">crtbeginS.obj</span><br><span class="line"></span><br><span class="line">x86需要额外添加：</span><br><span class="line">ntdll-<span class="number">32</span>.<span class="keyword">lib</span></span><br><span class="line"></span><br><span class="line">x64需要额外添加：</span><br><span class="line">ntdll-<span class="number">64</span>.<span class="keyword">lib</span></span><br></pre></td></tr></table></figure></li></ul><p>然后就可以写代码了。编译的时候还是使用vs x64 native执行make指令来编译</p><h2 id="使用">使用</h2><h3 id="插桩粒度">插桩粒度</h3><h4 id="trace-instumentation">trace instumentation</h4><p>在一个代码序列(从某个指令开始到控制流语句)第一次执行前插桩，用<code>TRACE_AddInstrumentFunction</code>实现</p><h4 id="instruction-instrumentation">instruction instrumentation</h4><p>指令插桩，用<code>INS_AddInstrumentFunction</code>实现</p><h4 id="image-instrumentation">image instrumentation</h4><p>映像插桩，在映像加载时执行，使用<code>IMG_AddInstrumentFunction</code>实现，需要初始化符号信息：<code>PIN_InitSysmbols</code></p><h4 id="routine-instrumentation">routine instrumentation</h4><p>例程插桩，在映像加载时执行，使用<code>RTN_AddInstrumentFunction</code>实现</p><h3 id="例子">例子</h3><p>翻译来自<a href="https://bbs.kanxue.com/thread-269711.htm">有毒的学Pin记录</a>，部分例子省略，只摘抄了相对重要的部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pin.H&quot;</span></span></span><br><span class="line">FILE* trace;</span><br><span class="line"><span class="comment">// 在每条指令执行前都会被调用，打印出当前指令的地址</span></span><br><span class="line">VOID <span class="title function_">printip</span><span class="params">(VOID* ip)</span> &#123; <span class="built_in">fprintf</span>(trace, <span class="string">&quot;%p\n&quot;</span>, ip); &#125;</span><br><span class="line"><span class="comment">// 遇到一条新指令调用一次</span></span><br><span class="line">VOID <span class="title function_">Instruction</span><span class="params">(INS ins, VOID* v)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在每条指令前插入对 printip 函数的调用，并传递 ip 参数</span></span><br><span class="line">    INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)printip, IARG_INST_PTR, IARG_END);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结束函数</span></span><br><span class="line">VOID <span class="title function_">Fini</span><span class="params">(INT32 code, VOID* v)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(trace, <span class="string">&quot;#eof\n&quot;</span>);</span><br><span class="line">    fclose(trace);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"><span class="comment">/* Print Help Message                                                    */</span></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line">INT32 <span class="title function_">Usage</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    PIN_ERROR(<span class="string">&quot;This Pintool prints the IPs of every instruction executed\n&quot;</span> + KNOB_BASE::StringKnobSummary() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"><span class="comment">/* Main                                                                  */</span></span><br><span class="line"><span class="comment">/* ===================================================================== */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    trace = fopen(<span class="string">&quot;itrace.out&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">if</span> (PIN_Init(argc, argv)) <span class="keyword">return</span> Usage();</span><br><span class="line">    <span class="comment">// 桩指令注册</span></span><br><span class="line">    INS_AddInstrumentFunction(Instruction, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 结束逻辑注册</span></span><br><span class="line">    PIN_AddFiniFunction(Fini, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 开始执行，不返回</span></span><br><span class="line">    PIN_StartProgram();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>INS_AddInstrumentFunction注册了回调，PIN_AddFiniFunction作为程序退出时的处理函数</p><p>INS_InsertCall说明了插入的功能在什么时候触发，函数指针是什么，以及传参</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">VOID <span class="title">Instruction</span><span class="params">(INS ins, VOID* v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取指令中的内存操作数计数</span></span><br><span class="line">    UINT32 memOperands = <span class="built_in">INS_MemoryOperandCount</span>(ins);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 遍历指令中的每个内存操作数</span></span><br><span class="line">    <span class="keyword">for</span> (UINT32 memOp = <span class="number">0</span>; memOp &lt; memOperands; memOp++)</span><br><span class="line">    &#123;       </span><br><span class="line">          <span class="comment">// 如果是内存读</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">INS_MemoryOperandIsRead</span>(ins, memOp))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">INS_InsertPredicatedCall</span>(ins, IPOINT_BEFORE, (AFUNPTR)RecordMemRead, IARG_INST_PTR, IARG_MEMORYOP_EA, memOp,</span><br><span class="line">                                     IARG_END);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 在某些架构下，内存操作数可以同时用作读和写，例如 IA-32 的 %eax，这种情况下只记录一次</span></span><br><span class="line">        <span class="comment">// 如果是写</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">INS_MemoryOperandIsWritten</span>(ins, memOp))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">INS_InsertPredicatedCall</span>(ins, IPOINT_BEFORE, (AFUNPTR)RecordMemWrite, IARG_INST_PTR, IARG_MEMORYOP_EA, memOp,</span><br><span class="line">                                     IARG_END);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子使用了内存模块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pin 在 image 加载时调用该函数，在该例中没有进行插桩</span></span><br><span class="line"><span class="function">VOID <span class="title">ImageLoad</span><span class="params">(IMG img, VOID* v)</span> </span>&#123; TraceFile &lt;&lt; <span class="string">&quot;Loading &quot;</span> &lt;&lt; <span class="built_in">IMG_Name</span>(img) &lt;&lt; <span class="string">&quot;, Image id = &quot;</span> &lt;&lt; <span class="built_in">IMG_Id</span>(img) &lt;&lt; endl; &#125;</span><br><span class="line"><span class="comment">// Pin 在 image 卸载时调用该函数，对于将要卸载的image无法进行插桩</span></span><br><span class="line"><span class="function">VOID <span class="title">ImageUnload</span><span class="params">(IMG img, VOID* v)</span> </span>&#123; TraceFile &lt;&lt; <span class="string">&quot;Unloading &quot;</span> &lt;&lt; <span class="built_in">IMG_Name</span>(img) &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 符号初始化</span></span><br><span class="line">    <span class="built_in">PIN_InitSymbols</span>();</span><br><span class="line">    <span class="comment">// pin 初始化</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PIN_Init</span>(argc, argv)) <span class="keyword">return</span> <span class="built_in">Usage</span>();</span><br><span class="line">    TraceFile.<span class="built_in">open</span>(KnobOutputFile.<span class="built_in">Value</span>().<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="comment">// 注册加载桩函数</span></span><br><span class="line">    <span class="built_in">IMG_AddInstrumentFunction</span>(ImageLoad, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 注册卸载桩函数</span></span><br><span class="line">    <span class="built_in">IMG_AddUnloadFunction</span>(ImageUnload, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 注册退出函数</span></span><br><span class="line">    <span class="built_in">PIN_AddFiniFunction</span>(Fini, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 开始执行，无返回</span></span><br><span class="line">    <span class="built_in">PIN_StartProgram</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">VOID <span class="title">Trace</span><span class="params">(TRACE trace, VOID* v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 访问 trace 中的每个 bbl</span></span><br><span class="line">    <span class="keyword">for</span> (BBL bbl = <span class="built_in">TRACE_BblHead</span>(trace); <span class="built_in">BBL_Valid</span>(bbl); bbl = <span class="built_in">BBL_Next</span>(bbl))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 在每个 bbl 前插入对 docount 函数的调用，传入指令数量</span></span><br><span class="line">        <span class="built_in">BBL_InsertCall</span>(bbl, IPOINT_BEFORE, (AFUNPTR)docount, IARG_UINT32, <span class="built_in">BBL_NumIns</span>(bbl), IARG_END);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="表">表</h3><h4 id="时机">时机</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    IPOINT_INVALID,</span><br><span class="line"></span><br><span class="line">    IPOINT_BEFORE, <span class="comment">///&lt; 在被插桩对象的第一条指令之前插入一次调用。总是有效。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * 在被插桩对象最后一条指令的顺序执行路径上（如果存在该顺序执行路径）插入一次调用。</span></span><br><span class="line"><span class="comment">     * 对于例程 (RTN)：对所有返回路径都进行插桩。总是有效。</span></span><br><span class="line"><span class="comment">     * 对于指令 (INS)：仅当 INS_IsValidForIpointAfter() 返回 true 时才有效。</span></span><br><span class="line"><span class="comment">     * 对于基本块 (BBL)：仅当 BBL_HasFallThrough() 返回 true 时才有效。</span></span><br><span class="line"><span class="comment">     * 对于追踪 (TRACE)：仅当 TRACE_HasFallThrough() 返回 true 时才有效。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IPOINT_AFTER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * 在被插桩对象的任意位置插入一次调用。</span></span><br><span class="line"><span class="comment">     * 除了 INS_InsertIfCall() 和 INS_InsertThenCall() 之外，适用于所有插桩函数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IPOINT_ANYWHERE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * 在被插桩对象中控制流指令的被采取分支上插入一次调用。</span></span><br><span class="line"><span class="comment">     * 对于指令而言，仅当 INS_IsValidForIpointTakenBranch() 返回 true 时才有效。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IPOINT_TAKEN_BRANCH</span><br><span class="line">&#125; IPOINT;</span><br></pre></td></tr></table></figure><h4 id="类型">类型</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    IARG_INVALID,</span><br><span class="line">    IARG_ADDRINT, <span class="comment">///&lt; Type: ADDRINT. Constant value (additional arg required)</span></span><br><span class="line">    IARG_PTR,     <span class="comment">///&lt; Type: &quot;VOID *&quot;. Constant value (additional pointer arg required)</span></span><br><span class="line">    IARG_BOOL,    <span class="comment">///&lt; Type: BOOL. Constant (additional BOOL arg required)</span></span><br><span class="line">    IARG_UINT32,  <span class="comment">///&lt; Type: UINT32. Constant (additional integer arg required)</span></span><br><span class="line">    IARG_UINT64,  <span class="comment">///&lt; Type: UINT64. Constant (additional UINT64 arg required)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: ADDRINT. The address of the instrumented instruction. This value does not change at IPOINT_AFTER.</span></span><br><span class="line"><span class="comment">     * This is simply shorthand for &lt;tt&gt;IARG_ADDRINT, INS_Address(ins)&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_INST_PTR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: ADDRINT for integer registers. Value of a register (additional register arg required) @ref REG</span></span><br><span class="line"><span class="comment">     * Basically, this cannot be used to retrieve the value of registers whose size is larger than ADDRINT</span></span><br><span class="line"><span class="comment">     * (e.g. x87 FPU/XMM/YMM/ZMM/opmask) or registers which are not architectural (REG_PIN_*), but there are some</span></span><br><span class="line"><span class="comment">     * exceptions to this rule.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_REG_VALUE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: @ref UINT8*.</span></span><br><span class="line"><span class="comment">     *      Pointer to buffer holding the content of the requested register. buffer size is the size of the requested register.</span></span><br><span class="line"><span class="comment">     *      Register is specified in additional argument.</span></span><br><span class="line"><span class="comment">     * Register is updated back to the relevant application register (Meaning if you change values in the mentioned pointer they will</span></span><br><span class="line"><span class="comment">     * be propagated to the relevant application register). If you&#x27;re not interested in modifying the register value, but only read</span></span><br><span class="line"><span class="comment">     * its value use IARG_REG_CONST_REFERENCE instead.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Not supported in Probe mode or with the Buffering APIs.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @note additional REG arg required!!!</span></span><br><span class="line"><span class="comment">     * @note If the requested register is a tile register and AMX is in init state (i.e., not active) - a NULL pointer will be</span></span><br><span class="line"><span class="comment">     *       passed to the analysis routine as the reference argument.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_REG_REFERENCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: @ref UINT8*.</span></span><br><span class="line"><span class="comment">     *      Pointer to buffer holding the content of the requested register. buffer size is the size of the requested register.</span></span><br><span class="line"><span class="comment">     *      Register is specified in additional argument.</span></span><br><span class="line"><span class="comment">     * Registers are not updated back to the relevant application register (Meaning if you change values in the mentioned pointer</span></span><br><span class="line"><span class="comment">     * they will not be propagated to the relevant application register). If you&#x27;re interested in modifying the register value,</span></span><br><span class="line"><span class="comment">     * use IARG_REG_REFERENCE instead.</span></span><br><span class="line"><span class="comment">     * Not supported with the Buffering APIs.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @note additional REG arg required!!!</span></span><br><span class="line"><span class="comment">     * @note If the requested register is a tile register and AMX is in init state (i.e., not active) - a NULL pointer will be</span></span><br><span class="line"><span class="comment">     *       passed to the analysis routine as the reference argument.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_REG_CONST_REFERENCE,</span><br><span class="line"></span><br><span class="line">    IARG_MEMORYREAD_EA, <span class="comment">///&lt; Type: ADDRINT. Effective address of a memory read, only valid if INS_IsMemoryRead is true and at IPOINT_BEFORE</span></span><br><span class="line">    IARG_MEMORYREAD2_EA, <span class="comment">///&lt; Type: ADDRINT. Effective address of a 2nd memory read (e.g. 2nd operand in cmps on ia32), only valid at IPOINT_BEFORE</span></span><br><span class="line">    IARG_MEMORYWRITE_EA, <span class="comment">///&lt; Type: ADDRINT. Effective address of a memory write, only valid at IPOINT_BEFORE</span></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: UINT32. Size in bytes of memory read.</span></span><br><span class="line"><span class="comment">     * This IARG is applicable for all instructions for which @ref INS_hasKnownMemorySize returns TRUE.</span></span><br><span class="line"><span class="comment">     * For other instructions e.g. vgather/vscatter see @ref IARG_MULTI_ELEMENT_OPERAND.</span></span><br><span class="line"><span class="comment">     * For the varying memory size read instruction, XRSTOR, the size is based on the XSAVE area header. If the header</span></span><br><span class="line"><span class="comment">     * indicates compact mode it will provide the compact size. Otherwise it will provide the standard size.</span></span><br><span class="line"><span class="comment">     * The minimum size for the XRSTOR instruction (not including FXRSTOR) is 576 (i.e the XSAVE area size up</span></span><br><span class="line"><span class="comment">     * to and including the header).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_MEMORYREAD_SIZE,</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: UINT32. Size in bytes of memory write.</span></span><br><span class="line"><span class="comment">     * This IARG is applicable for all instructions for which @ref INS_hasKnownMemorySize returns TRUE.</span></span><br><span class="line"><span class="comment">     * For other instructions e.g. vgather/vscatter see @ref IARG_MULTI_ELEMENT_OPERAND.</span></span><br><span class="line"><span class="comment">     * For varying size memory write instructions, the supported instructions are the XSAVE family of instructions.</span></span><br><span class="line"><span class="comment">     * For XSAVE, the size of the XSAVE area used is based on user request and supported features in the machine. This will</span></span><br><span class="line"><span class="comment">     * provide the exact size used.</span></span><br><span class="line"><span class="comment">     * For XSAVEOPT, the size is calculated the same as if XSAVE was used. This may provide in some cases an upper</span></span><br><span class="line"><span class="comment">     * bound to the actual used memory.</span></span><br><span class="line"><span class="comment">     * For XSAVEC, in IPOINT_BEFORE the size is calculated based on user request only. This may provide in some cases</span></span><br><span class="line"><span class="comment">     * an upper bound to the actual size.</span></span><br><span class="line"><span class="comment">     * If used in IPOINT_AFTER it will provide the exact compact size as defined in the XSAVE area header.</span></span><br><span class="line"><span class="comment">     * The minimum size for the XSAVE family write instructions (not including FXSAVE) is 576 (i.e the XSAVE area</span></span><br><span class="line"><span class="comment">     * size up to and including the header).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_MEMORYWRITE_SIZE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IARG_MEMORY*_PTR argument represents actual address of the memory access, even if the operand is rewritten</span></span><br><span class="line">    <span class="comment">// or a memory translation callback is registered</span></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Actual address of the memory access; same as @ref IARG_MEMORYREAD_EA, unless the memory address is translated</span></span><br><span class="line"><span class="comment">     * by @ref MEMORY_ADDR_TRANS_CALLBACK, or the memory operand is rewritten by @ref INS_RewriteMemoryOperand</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_MEMORYREAD_PTR,</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Actual address of the memory access; same as @ref IARG_MEMORYREAD2_EA, unless the memory address is translated</span></span><br><span class="line"><span class="comment">     * by @ref MEMORY_ADDR_TRANS_CALLBACK, or the memory operand is rewritten by @ref INS_RewriteMemoryOperand</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_MEMORYREAD2_PTR,</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Actual address of the memory access. Same as @ref IARG_MEMORYWRITE_EA, unless the memory address is translated</span></span><br><span class="line"><span class="comment">     * by @ref MEMORY_ADDR_TRANS_CALLBACK, or the memory operand is rewritten by @ref INS_RewriteMemoryOperand</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_MEMORYWRITE_PTR,</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Actual address of the memory access. Same as @ref IARG_MEMORYOP_EA, unless the memory address is translated</span></span><br><span class="line"><span class="comment">     * by @ref MEMORY_ADDR_TRANS_CALLBACK, or the memory operand is rewritten by @ref INS_RewriteMemoryOperand. \n</span></span><br><span class="line"><span class="comment">     * When using @ref INS_RewriteMemoryOperand the value is valid only with IPOINT_AFTER.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_MEMORYOP_PTR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: PIN_MULTI_MEM_ACCESS_INFO* the addresses read by the various vgather* instructions,</span></span><br><span class="line"><span class="comment">     * Also available for regular memory instructions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_MULTI_MEMORYACCESS_EA,</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: @ref IMULTI_ELEMENT_OPERAND * . Information about a multi element operand (implemented for IPOINT_BEFORE).</span></span><br><span class="line"><span class="comment">     * The operand index is required as the next argument.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_MULTI_ELEMENT_OPERAND,   </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: @ref ISCATTERED_MEMORY_REWRITE * . Interface that allows rewriting elemenets addresses for instructions </span></span><br><span class="line"><span class="comment">     *       with scattered memory access (implemented for IPOINT_BEFORE).</span></span><br><span class="line"><span class="comment">     *       Only valid for instructions where @ref INS_IsValidForIarg for this IARG returns TRUE.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_REWRITE_SCATTERED_MEMOP,</span><br><span class="line"></span><br><span class="line">    IARG_EXPLICIT_MEMORY_EA, <span class="comment">///&lt; Type: ADDRINT. Effective address of the explicit memory operand. Useful for instrumenting LEA instructions</span></span><br><span class="line"></span><br><span class="line">    IARG_BRANCH_TAKEN, <span class="comment">///&lt; Type: BOOL. Non zero if a branch is taken. Argument is invalid for XBEGIN and XEND instructions.</span></span><br><span class="line">    <span class="comment">/*! Type: ADDRINT. Target address of branch instruction.\n</span></span><br><span class="line"><span class="comment">     *   In case of INS instrumentation, valid when @ref INS_IsControlFlow() is true.\n</span></span><br><span class="line"><span class="comment">     *   However, this argument is invalid if the instruction is XBEGIN or XEND.</span></span><br><span class="line"><span class="comment">     *   In Linux, for the case of branching into the vsyscall area (in kernel 5.3 or above), the target</span></span><br><span class="line"><span class="comment">     *   address that will be received in the analysis routine would be that of the vsyscall area. Note that</span></span><br><span class="line"><span class="comment">     *   this address is not readable (e.g. via PIN_SafeCopy() and PIN_FetchCode())</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_BRANCH_TARGET_ADDR,</span><br><span class="line">    <span class="comment">/*! Type: ADDRINT. Fall through address of the instrumented object.\n</span></span><br><span class="line"><span class="comment">     *  In case of INS instrumentation, valid only if @ref INS_HasFallThrough() is true.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_FALLTHROUGH_ADDR,</span><br><span class="line"></span><br><span class="line">    IARG_EXECUTING, <span class="comment">///&lt; Type: BOOL. False if the instruction will not be executed because of predication, otherwise true.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*! Type: BOOL. True if INS_HasRealRep(ins) and this the first iteration of the REP sequence, otherwise false.\n</span></span><br><span class="line"><span class="comment">     *  @note In case count register is 0 when calling analysis routine, the value of IARG_FIRST_REP_ITERATION is false.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_FIRST_REP_ITERATION,</span><br><span class="line">    IARG_PREDICATE, <span class="comment">///&lt; Reserved. Do not use</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// These are internal only</span></span><br><span class="line">    IARG_STACK_VALUE,      <span class="comment">///&lt; Reserved. Do not use</span></span><br><span class="line">    IARG_STACK_REFERENCE,  <span class="comment">///&lt; Reserved. Do not use</span></span><br><span class="line">    IARG_MEMORY_VALUE,     <span class="comment">///&lt; Reserved. IA32(e) only</span></span><br><span class="line">    IARG_MEMORY_REFERENCE, <span class="comment">///&lt; Reserved. IA32(e) only</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Syscall stuff</span></span><br><span class="line">    IARG_SYSCALL_NUMBER,   <span class="comment">///&lt; Type: ADDRINT. System call number. Valid for IPOINT_BEFORE at the system call instruction</span></span><br><span class="line">    IARG_SYSARG_REFERENCE, <span class="comment">///&lt; Type: &quot;ADDRINT *&quot;. Pointer to system call argument n. Valid for IPOINT_BEFORE at the system call instruction.  (First argument number is 0.)</span></span><br><span class="line"></span><br><span class="line">    IARG_SYSARG_VALUE, <span class="comment">///&lt; Type: ADDRINT. System call argument n. Valid for IPOINT_BEFORE at the system call instruction.  (First argument number is 0.)</span></span><br><span class="line">    IARG_SYSRET_VALUE, <span class="comment">///&lt; Type: ADDRINT. System call return value. On Linux and macOS* the value is -1 if the system call failed. (IPOINT_AFTER only)</span></span><br><span class="line">    IARG_SYSRET_ERRNO, <span class="comment">///&lt; Type: INT32. System call errno (IPOINT_AFTER_only).</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// function arguments</span></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: &quot;ADDRINT *&quot;. Pointer to integer argument n. Valid only at the call site.  (First argument number is 0.)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    IARG_FUNCARG_CALLSITE_REFERENCE,</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: ADDRINT. Integer argument n. Valid only at the call site.  (First argument number is 0.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_FUNCARG_CALLSITE_VALUE,</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: &quot;ADDRINT *&quot;. Pointer to integer argument n. Valid only at the entry point of a routine.  (First argument number is 0.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_FUNCARG_ENTRYPOINT_REFERENCE,</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: ADDRINT. Integer argument n. Valid only at the entry point of a routine.  (First argument number is 0.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_FUNCARG_ENTRYPOINT_VALUE,</span><br><span class="line">    IARG_FUNCRET_EXITPOINT_REFERENCE, <span class="comment">///&lt; Type: &quot;ADDRINT *&quot;. Pointer to function result. Valid only at return instruction.</span></span><br><span class="line">    IARG_FUNCRET_EXITPOINT_VALUE,     <span class="comment">///&lt; Type: ADDRINT. Function result. Valid only at return instruction.</span></span><br><span class="line"></span><br><span class="line">    IARG_RETURN_IP, <span class="comment">///&lt; Type: ADDRINT. Return address for function call, valid only at the function entry point.</span></span><br><span class="line"></span><br><span class="line">    IARG_ORIG_FUNCPTR, <span class="comment">///&lt; Type: AFUNPTR. Function pointer to the relocated entry of the original uninstrumented function.</span></span><br><span class="line"></span><br><span class="line">    IARG_PROTOTYPE, <span class="comment">///&lt; Type: PROTO.  The function prototype of the application function. See @ref PROTO</span></span><br><span class="line"></span><br><span class="line">    IARG_THREAD_ID, <span class="comment">///&lt; Type: THREADID. Application thread id.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: @ref CONTEXT *. Handle to access a context (architectural state).  When passed at</span></span><br><span class="line"><span class="comment">     * @ref IPOINT_AFTER or @ref IPOINT_TAKEN_BRANCH, PC points to the next instruction.  Upon return from</span></span><br><span class="line"><span class="comment">     * the analysis routine, Pin ignores any changes you&#x27;ve made to the @ref CONTEXT.  If you want</span></span><br><span class="line"><span class="comment">     * to change register values, use @ref IARG_REG_REFERENCE, @ref IARG_RETURN_REGS, or @ref PIN_ExecuteAt.</span></span><br><span class="line"><span class="comment">     * See @ref PROBE_IARGS for probe mode restrictions.  Not supported with the Buffering APIs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_CONTEXT,</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: @ref CONTEXT *.</span></span><br><span class="line"><span class="comment">     * Like @ref IARG_CONTEXT, but tool receives a read-only @ref CONTEXT*.</span></span><br><span class="line"><span class="comment">     * @ref PIN_SetContextReg, @ref PIN_SetContextRegval and @ref PIN_SetContextFPState will not work with</span></span><br><span class="line"><span class="comment">     * @ref IARG_CONST_CONTEXT.</span></span><br><span class="line"><span class="comment">     * The overhead of @ref IARG_CONST_CONTEXT is considerably lower than that of @ref IARG_CONTEXT.</span></span><br><span class="line"><span class="comment">     * Tools that need a @ref CONTEXT* and only read from it should use @ref IARG_CONST_CONTEXT.</span></span><br><span class="line"><span class="comment">     * Tools that need a @ref CONTEXT* and only occasionally write into it should also use @ref IARG_CONST_CONTEXT (by</span></span><br><span class="line"><span class="comment">     * using PIN_SaveContext() - see below).</span></span><br><span class="line"><span class="comment">     * One example of a tool that needs a @ref CONTEXT * and only occasionally writes into it, would be an</span></span><br><span class="line"><span class="comment">     * emulator that would need to write into the @ref CONTEXT * only when an exception occurs, and then</span></span><br><span class="line"><span class="comment">     * raise an exception with the @ref CONTEXT *.</span></span><br><span class="line"><span class="comment">     * @ref PIN_SaveContext can be used by the tool to get a writable copy of the @ref CONTEXT *.</span></span><br><span class="line"><span class="comment">     * @ref IARG_CONST_CONTEXT is available only in Jit mode.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_CONST_CONTEXT,</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: @ref CONTEXT *. Additional two @ref REGSET * arguments are needed &#x27;inSet&#x27; and &#x27;outSet&#x27;.</span></span><br><span class="line"><span class="comment">     * Like @ref IARG_CONTEXT, but tool needs to define also which registers set it needs to read (inSet)</span></span><br><span class="line"><span class="comment">     * and which registers set it may write (outSet).</span></span><br><span class="line"><span class="comment">     * @ref PIN_SetContextReg, @ref PIN_SetContextRegval and @ref PIN_SetContextFPState will work only on registers</span></span><br><span class="line"><span class="comment">     * that are in the outSet. These functions will change the actual application registers so there is no need</span></span><br><span class="line"><span class="comment">     * to perform @ref PIN_ExecuteAt as need to be done with @ref IARG_CONTEXT.</span></span><br><span class="line"><span class="comment">     * @ref PIN_GetContextReg, @ref PIN_GetContextRegval and @ref PIN_GetContextFPState will return unexpected values</span></span><br><span class="line"><span class="comment">     * for registers not defined in the &#x27;inSet&#x27;.</span></span><br><span class="line"><span class="comment">     * The overhead of @ref IARG_PARTIAL_CONTEXT may lower than that of @ref IARG_CONTEXT as there is no need to perform</span></span><br><span class="line"><span class="comment">     * @ref PIN_ExecuteAt to update registers.</span></span><br><span class="line"><span class="comment">     * Tools that know which application registers are needed to be read should use @ref IARG_PARTIAL_CONTEXT instead of</span></span><br><span class="line"><span class="comment">     * @ref IARG_CONST_CONTEXT. Thus may reduce the overhead as not fully updated context for read need to be provided.</span></span><br><span class="line"><span class="comment">     * Tools that know which application registers are needed to be written other than @ref REG_INST_PTR should use</span></span><br><span class="line"><span class="comment">     * @ref IARG_PARTIAL_CONTEXT instead of combination of @ref IARG_CONTEXT and the use of @ref PIN_ExecuteAt</span></span><br><span class="line"><span class="comment">     * for registers update.</span></span><br><span class="line"><span class="comment">     * If @ref REG_INST_PTR needs to be updated @ref PIN_ExecuteAt still needs to be used.</span></span><br><span class="line"><span class="comment">     * Any updates to a register from the outSet of an @ref IARG_PARTIAL_CONTEXT will be propagated to the application upon</span></span><br><span class="line"><span class="comment">     * return from the analysis routine. Tools that want to update @ref CONTEXT registers without affecting application</span></span><br><span class="line"><span class="comment">     * registers should use @ref IARG_CONTEXT.</span></span><br><span class="line"><span class="comment">     * @ref IARG_PARTIAL_CONTEXT is available only in Jit mode.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_PARTIAL_CONTEXT,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     * Type: @ref REGSET *.</span></span><br><span class="line"><span class="comment">     * Used to specify registers whose values will be the same upon return from the analysis routine.</span></span><br><span class="line"><span class="comment">     * Should be used to specify caller-saved registers which are preserved by the analysis routine.</span></span><br><span class="line"><span class="comment">     * When a non-inlinable analysis routine preserves caller-saved registers, Pin can avoid generating</span></span><br><span class="line"><span class="comment">     * code to preserve these registers, across the analysis call, if they are specified in the IARG_PRESERVE.</span></span><br><span class="line"><span class="comment">     * e.g. if a non-inlinable analysis routine preserves the values in the x87 registers, then Pin</span></span><br><span class="line"><span class="comment">     * can avoid generating code to preserve these registers, across the analysis call, if REG_X87 is specified in</span></span><br><span class="line"><span class="comment">     * the @ref IARG_PRESERVE</span></span><br><span class="line"><span class="comment">     * e.g. if a non-inlinable analysis routine preserves the values in XMM caller saved registers, then Pin</span></span><br><span class="line"><span class="comment">     * can avoid generating code to preserve these registers, across the analysis call, if those preserved XMM</span></span><br><span class="line"><span class="comment">     * registers are specified in the @ref IARG_PRESERVE</span></span><br><span class="line"><span class="comment">     * @ref IARG_PRESERVE must be followed by a @ref REGSET* that points to the @ref REGSET containing the registers preserved.</span></span><br><span class="line"><span class="comment">     * See the @ref REGSET_AddAll &quot;(REGSET_*)&quot; functions defined under @ref REG for @ref REGSET construction and manipulation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_PRESERVE,</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*! Type: BOOL.</span></span><br><span class="line"><span class="comment">     * Used to mark analysis routine that is expected to be inlined.</span></span><br><span class="line"><span class="comment">     * If the analysis ruotine is not inlinable and -assert_check_inline has been passed then Pin will assert.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IARG_CHECK_INLINE,</span><br><span class="line"></span><br><span class="line">    IARG_RETURN_REGS, <span class="comment">///&lt; Register to write analysis function return value (additional register arg required).  Not supported in Probe mode.</span></span><br><span class="line"></span><br><span class="line">    IARG_CALL_ORDER, <span class="comment">///&lt; Type: CALL_ORDER. Determine order of analysis calls. See @ref CALL_ORDER.</span></span><br><span class="line"></span><br><span class="line">    IARG_IARGLIST, <span class="comment">///&lt; Type: IARGLIST. List of IARGS which can be constructed one IARG at a time.</span></span><br><span class="line"></span><br><span class="line">    IARG_FAST_ANALYSIS_CALL, <span class="comment">///&lt; No type: Use a fast linkage to call the analysis function. See @ref PIN_FAST_ANALYSIS_CALL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">    * Type: @ref REGSET *.</span></span><br><span class="line"><span class="comment">    * The only supported register for now is REG_MXCSR. In case it is not included into the register set</span></span><br><span class="line"><span class="comment">    * then an error is issued.</span></span><br><span class="line"><span class="comment">    * . Upon entry to the analysis routine, the MXCSR physical register value is loaded with the application value.</span></span><br><span class="line"><span class="comment">    * . Upon termination of the routine the physical MXCSR register including the changes are visible by</span></span><br><span class="line"><span class="comment">    *   the application.</span></span><br><span class="line"><span class="comment">    * . As a side effect, the analysis routine will never be inlined.</span></span><br><span class="line"><span class="comment">    * @ref IARG_EXPOSE must be followed by a @ref REGSET* that points to the @ref REGSET containing the registers</span></span><br><span class="line"><span class="comment">    * exposed, REG_MXCSR must be included and be the only one.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    IARG_EXPOSE, </span><br><span class="line"></span><br><span class="line">    IARG_MEMORYOP_EA, <span class="comment">///&lt; Type: ADDRINT. Effective address of a memory op (memory op index is next arg); only valid at IPOINT_BEFORE</span></span><br><span class="line">    IARG_MEMORYOP_SIZE, <span class="comment">///&lt; Type: UINT32. Size of a memory op (memory op index is next arg)</span></span><br><span class="line">    IARG_MEMORYOP_MASKED_ON, <span class="comment">///&lt; Type: BOOL. TRUE if the this memory op (memory op index is next arg) is masked on; only valid at IPOINT_BEFORE</span></span><br><span class="line">    IARG_TSC,                <span class="comment">///&lt; Type: UINT64. Time Stamp Counter value at the point of entering the analysis call.</span></span><br><span class="line">    IARG_FILE_NAME, <span class="comment">///&lt; Reserved for internal use only.</span></span><br><span class="line">    IARG_LINE_NO,   <span class="comment">///&lt; Reserved for internal use only.</span></span><br><span class="line">    IARG_LAST       <span class="comment">///&lt; Reserved for internal use only.</span></span><br><span class="line"></span><br><span class="line">&#125; IARG_TYPE;</span><br></pre></td></tr></table></figure><p>这里类型是IARG_INST_PTR，表示当前指令地址，IARG_END表示参数列表结尾</p><h4 id="插桩函数">插桩函数</h4><p>这里的插桩函数是由AddFunction函数设置的函数中的CALL函数</p><p>具体有很多，可以vs双击直接看定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">INS_InsertPredicatedCall</span><br><span class="line">INS_InsertCall</span><br><span class="line">INS_InsertIfCall</span><br><span class="line">INS_InsertThenCall</span><br><span class="line">INS_InsertIfPredicatedCall</span><br><span class="line">INS_InsertThenPredicatedCall</span><br><span class="line"></span><br><span class="line">BBL_InsertCall</span><br><span class="line">BBL_InsertIfCall</span><br><span class="line">BBL_InsertThenCall</span><br><span class="line"></span><br><span class="line">TRACE_InsertCall</span><br><span class="line">TRACE_InsertIfCall</span><br><span class="line">TRACE_InsertThenCall</span><br><span class="line"></span><br><span class="line"><span class="comment">//IMAGE没有插桩函数，只有设置某个时机回调函数的AddFunction函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="注册函数">注册函数</h4><p>内容来自<a href="https://bbs.kanxue.com/thread-269836.htm">有毒的学Pin记录</a></p><ul><li>INS_AddInstrumentFunction (INSCALLBACK fun, VOID *val)：注册以指令粒度插桩的函数</li><li>TRACE_AddInstrumentFunction (TRACECALLBACK fun, VOID *val)：注册以trace粒度插桩的函数</li><li>RTN_AddInstrumentFunction (RTNCALLBACK fun, VOID *val)：注册以routine粒度插桩的函数</li><li>IMG_AddInstrumentFunction (IMGCALLBACK fun, VOID *val)：注册以image粒度插桩的函数</li><li>PIN_AddFiniFunction (FINICALLBACK fun, VOID *val)：注册在应用程序退出前执行的函数，该类函数不进行插桩，可以有多个。</li><li>PIN_AddDetachFunction (DETACHCALLBACK fun, VOID *val)：注册在Pin通过PIN_Detach()函数放弃对应用程序的控制权限之前执行的函数，一个进程只调用一次，可以被任何线程调用，此时Pin的内存并没有释放。</li></ul><h4 id="修改指令的代码">修改指令的代码</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INS_InsertDirectJump</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">INS_InsertIndirectJump</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">INS_RewriteMemoryOperand</span></span><br></pre></td></tr></table></figure><h3 id="注意">注意</h3><p>指令执行时，每条指令调用一次插桩函数，但是调用多次分析代码，所以尽量将大部分判断放到插桩函数中，然后再在插桩函数中执行精简后的分析代码，而不是把大部分操作放到分析代码中。</p><p>其它的优化性能内容见：<a href="https://bbs.kanxue.com/thread-269836.htm">有毒的学Pin记录</a></p><h2 id="有关链接">有关链接</h2><p><a href="https://anhkgg.com/pin-use-note-function-analysis/">pin使用小记-函数分析 | Anhkgg’Lab | Windows Kernel | Rootkit | Reverse Engineer | Expolit | 内核研究 | 逆向分析 | 漏洞分析挖掘</a></p><p><a href="https://bbs.kanxue.com/article-16660.htm">bbs.kanxue.com/article-16660.htm</a></p><p><a href="https://zhuanlan.zhihu.com/p/75456977">使用 Pin 来实现对 Windows 函数及其参数的追踪</a></p>]]></content>
    
    
    <summary type="html">不喜欢frida，只好学Windows上其它的插桩了QAQ</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="技能" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/"/>
    
    <category term="工具" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="模拟执行" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E5%B7%A5%E5%85%B7/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/"/>
    
    <category term="插桩" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/%E6%8F%92%E6%A1%A9/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="https://www.pri87.vip/posts/de7c53fe.html"/>
    <id>https://www.pri87.vip/posts/de7c53fe.html</id>
    <published>2025-05-22T02:58:12.000Z</published>
    <updated>2025-05-22T10:07:05.233Z</updated>
    
    <content type="html"><![CDATA[<h1>池</h1><p>池是一种以空间换时间的思想。对于内存，线程，连接这类资源，每次使用时都需要申请，申请完后都要释放。一旦内存块/线程/连接数变多，这之中的资源消耗就会变多，因此我们可以先申请一定数量的资源，等待需要使用时，可以直接在高层分配，而不需要向操作系统申请，在使用完后，也不直接销毁，而是清空，等待下一次循环使用，这就是池。</p><h2 id="线程池">线程池</h2><p>通过先在池中生成一定数量的线程，先令其挂起，等待有新的线程任务时再执行。结束后回归池，实现资源复用。</p><h3 id="具体结构">具体结构</h3><ul><li>池本身(逻辑结构，并不实际存在)：需要实现创建池，销毁池，和外部添加任务。</li><li>作业队列：外部添加的任务全部会按顺序加入这个队列，等待工作线程获取并执行。</li><li>工作线程：以一个循环包裹的线程，循环中无限等待作业队列是否有新任务并处理。</li></ul><p>作业队列需要在任务添加时立即通知所有的工作线程，让工作线程可以尝试获取新任务。<br>工作线程获取新任务时，要确保其它工作线程不能获取同一个任务。</p><h3 id="具体逻辑">具体逻辑</h3><p>内存池类：</p><ul><li>创建池：创建n个工作线程和一个作业队列，初始化上面需要的锁getwork和条件变量ispushing。</li><li>作业队列：一个队列，每个元素是作业结构，其中有函数CallBack和传参args。</li><li>添加任务的公开函数：传入一个CallBack生成一个作业结构push到队列末尾。并用WakeAllConditionVariable唤醒所有等待ispushing的工作线程。</li><li>工作线程：处于循环，先EnterCriticalSection getwork，如果没有任务，等待ispushing，否则取任务，并执行。</li><li>销毁线程池：设置一个flag标志，如果工作线程检测到flag，同时没有任务，立即return。然后销毁作业队列和线程池本身。</li></ul><h3 id="实现">实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadPool.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(*pCallBack)</span><span class="params">(PVOID args)</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Job</span></span><br><span class="line">&#123;</span><br><span class="line">pCallBack _callBack;</span><br><span class="line">PVOID _args;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::queue&lt;Job&gt; jobQueue;<span class="comment">//任务队列</span></span><br><span class="line">std::vector&lt;HANDLE&gt; threads; <span class="comment">// 线程句柄</span></span><br><span class="line">CRITICAL_SECTION cs; <span class="comment">// 互斥锁</span></span><br><span class="line">CONDITION_VARIABLE cv; <span class="comment">// 条件变量</span></span><br><span class="line"><span class="type">int</span> maxJob;</span><br><span class="line"><span class="type">int</span> threadNum;</span><br><span class="line"><span class="type">bool</span> stop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 线程函数</span></span><br><span class="line"><span class="function"><span class="type">static</span> DWORD WINAPI <span class="title">ThreadFunc</span><span class="params">(LPVOID lpParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ThreadPool* pool = <span class="built_in">static_cast</span>&lt;ThreadPool*&gt;(lpParam);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;pool-&gt;cs);</span><br><span class="line"><span class="keyword">while</span> (pool-&gt;jobQueue.<span class="built_in">empty</span>() &amp;&amp; !pool-&gt;stop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 等待时会释放互斥锁,如果被唤醒，又会得到互斥锁</span></span><br><span class="line"><span class="built_in">SleepConditionVariableCS</span>(&amp;pool-&gt;cv, &amp;pool-&gt;cs, INFINITE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pool-&gt;jobQueue.<span class="built_in">empty</span>() &amp;&amp; pool-&gt;stop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;pool-&gt;cs);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">Job job = pool-&gt;jobQueue.<span class="built_in">front</span>();</span><br><span class="line">pool-&gt;jobQueue.<span class="built_in">pop</span>();</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;pool-&gt;cs);</span><br><span class="line"><span class="keyword">if</span> (job._callBack)</span><br><span class="line">&#123;</span><br><span class="line">job._callBack(job._args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">allThreadExitIfStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WakeAllConditionVariable</span>(&amp;cv);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ithread : threads)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(ithread, INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(ithread);</span><br><span class="line">&#125;</span><br><span class="line">threads.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ThreadPool</span>(<span class="type">int</span> threadNum = <span class="number">4</span>, <span class="type">int</span> maxJob = <span class="number">100</span>)</span><br><span class="line">: <span class="built_in">maxJob</span>(maxJob), <span class="built_in">threadNum</span>(threadNum), <span class="built_in">stop</span>(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (maxJob &lt;= <span class="number">0</span> || threadNum &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;maxJob and threadNum must be greater than 0.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化互斥锁和条件变量</span></span><br><span class="line"><span class="built_in">InitializeCriticalSection</span>(&amp;cs);</span><br><span class="line"><span class="built_in">InitializeConditionVariable</span>(&amp;cv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建工作线程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; threadNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line">HANDLE thread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadFunc, <span class="keyword">this</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (thread == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">stop = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">allThreadExitIfStop</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">DeleteCriticalSection</span>(&amp;cs);</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;CreateThread failed.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">threads.<span class="built_in">push_back</span>(thread);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">ThreadPool</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 停止线程池</span></span><br><span class="line">stop = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">allThreadExitIfStop</span>();</span><br><span class="line"><span class="built_in">DeleteCriticalSection</span>(&amp;cs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">addWork</span><span class="params">(pCallBack callBack, PVOID args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//防止刚好有操作队列的线程</span></span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;cs);</span><br><span class="line"><span class="keyword">if</span> (jobQueue.<span class="built_in">size</span>() &gt;= maxJob)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;cs);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">jobQueue.<span class="built_in">push</span>(&#123; callBack, args &#125;);</span><br><span class="line"><span class="comment">//push完立即唤醒一个线程</span></span><br><span class="line"><span class="built_in">WakeConditionVariable</span>(&amp;cv);</span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;cs);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ThreadPool.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">myWork</span><span class="params">(PVOID i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Thread ID: &quot;</span> &lt;&lt; <span class="built_in">GetCurrentThreadId</span>() &lt;&lt; <span class="string">&quot; is working on task &quot;</span> &lt;&lt; *(PDWORD)i &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">500</span>); <span class="comment">// Simulate work</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> startTime = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">ThreadPool pool = <span class="built_in">ThreadPool</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">DWORD* arg = <span class="keyword">new</span> <span class="built_in">DWORD</span>(i);</span><br><span class="line">pool.<span class="built_in">addWork</span>(myWork, arg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本篇介绍如何实现线程池</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="数据结构与算法" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="池" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B1%A0/"/>
    
    
    <category term="多线程" scheme="https://www.pri87.vip/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="CPP" scheme="https://www.pri87.vip/tags/CPP/"/>
    
    <category term="池" scheme="https://www.pri87.vip/tags/%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>windows上的hook对抗</title>
    <link href="https://www.pri87.vip/posts/20ac0c84.html"/>
    <id>https://www.pri87.vip/posts/20ac0c84.html</id>
    <published>2025-05-19T11:23:09.000Z</published>
    <updated>2025-05-19T17:25:05.324Z</updated>
    
    <content type="html"><![CDATA[<h1>HOOK</h1><p>hook是逆向中一种基本操作，它的作用对象是函数(代码块)，作用效果是在执行某个函数之前/之时/之后立即执行用户定义的过程。我们将加载这个hook到这个函数的过程称为挂钩，将从函数取消这个hook的过程称为脱钩。</p><p>本文是hook原理的总结，没有涉及实践</p><h2 id="基于修改代码的Hook">基于修改代码的Hook</h2><h3 id="最简单的inlineHook">最简单的inlineHook</h3><ul><li>先获取目标函数的地址</li><li>将目标函数地址前x字节改为jmp跳转，跳转到自己函数的地址</li><li>最后执行刚刚被覆盖的指令，然后跳转回去</li></ul><p>简单，但是无法确定被覆盖的指令的长度，同时如果被覆盖的指令含有ip索引或短跳转，则会报错，需要手动脱钩</p><h3 id="trampolineHook">trampolineHook</h3><p>基于上面的缺点，通过构造一个新函数，在新函数中调用原函数，调用之前，调用之后都可以执行自己需要的操作。</p><ul><li>获取目标函数地址</li><li>将目标函数地址前x字节改为jmp跳转，跳转到下一步这个函数的地址，并保存前x字节</li><li>构造一个新函数，使得传入传出类型(调用约定)相同<ul><li>将前x字节还原</li><li>hook代码</li><li>执行原函数</li><li>hook代码</li><li>将前x字节重新设置为该函数开头</li><li>返回</li></ul></li></ul><p>这样，就不需要担心被覆盖的指令的执行问题，同时，这个hook可以自动恢复挂钩，如果是多线程，也许会出现挂钩不到的情况？</p><h3 id="CRC32检测Hook">CRC32检测Hook</h3><p>针对以上两种基于修改代码实现的hook，只需要通过实现一个CRC32校验函数去检查对应函数是否被修改即可。</p><p>需要已知目标的CRC32值，或者在很早的时候先执行，保存原始CRC32值，在某个时刻或开启新线程循环检查计算的CRC32值是否相同即可，这种方法也可以实现对断点的检测。</p><h3 id="更改页属性正面对抗CRC32检测">更改页属性正面对抗CRC32检测</h3><p>如果CRC32是先执行，然后保存，可以在进程启动时立即hook实现绕过，但是这样只能用基本inlinehook，否则trampolineHook还原代码时也会被检测到。</p><p>CRC32检测代码时，需要读取代码段数据，通过将代码段的页设为不可读或使用硬件断点为函数加上读断点，可以找到CRC32检测代码，然后hook这个代码即可令检测失效。</p><p>与此同时，如果还有n个CRC32检测代码，第i个检测第i+1个，第n个检测真实代码，那么就需要对所有的代码进行hook。在实际场景中，防不胜防，在游戏逆向时，往往可能导致封号造成损失，所以需要注意。这就是在量上的对抗升级？</p><h2 id="基于表的Hook">基于表的Hook</h2><h3 id="IAT-hook">IAT hook</h3><p>在hook外部导入函数时，可以对IAT进行hook，基本方法是：</p><ul><li>IAT初始化后，读取IAT对应的位置，找到jmp后面的offset，计算出正确的函数地址</li><li>实现一个hook函数，最后jmp到正确的函数地址</li><li>将offset设置为到hook函数的偏移</li></ul><p>对于kernel32函数和ntdll函数这样设置都比较方便</p><h3 id="API-Set-Map-Hook-DLL注入">API Set Map Hook(DLL注入)</h3><p>打开进程时，系统根据API Set Map设置导入的不同dll 函数的正确映射dll，因此，通过挂起创建的进程，先修改对应的map，实现对某个dll中全部函数的hook。</p><ul><li>用注入器进程创建目标进程</li><li>将目标peb的ApiSetMap拷贝出来，添加自己的dll到结构末尾</li><li>将上面的内容拷贝到目标的新地址空间</li><li>让目标ApiSetMap指针指向对应位置</li><li>执行进程</li></ul><h3 id="CPP虚函数表Hook">CPP虚函数表Hook</h3><p>CPP中实现子类调用父类虚函数(自己实现的函数)时，使用了虚函数表，通过修改虚函数表，实现调用hook的函数。类实例开头存放着虚函数表，其中有所有可调用的函数地址。它们有固定的顺序。通过修改这个来实现Hook一个类的成员方法</p><p>具体过程省略，和签名的IAThook相同</p><h3 id="SSDT-Hook">SSDT Hook</h3><p>SSDT是系统服务描述符表，在内核层。执行系统调用的时候，会在这个表中寻找对应的函数地址，从而执行。</p><ul><li>绕过写保护和Patchguard</li><li>写入SSDT表</li><li>后续过程与IAThook相同</li></ul><p><a href="https://www.cnblogs.com/revercc/p/14701592.html">HOOK技术之SSDT hook（x86/x64）</a></p><h3 id="IDT-Hook">IDT Hook</h3><p>IDT是中断描述符表，描述了CPU遇到中断/异常时该转向哪里去处理它们。IDT对应单个CPU核心，hook时，需要hook所有表。内核层。</p><p>[<a href="https://bbs.kanxue.com/thread-59867.htm">原创]rootkit hook之[四]-- IDT Hook</a></p><h3 id="对抗">对抗</h3><p>对于表，依旧是数据，因此对应层的CRC32检测依然有效，这就回到了上面的正面对抗</p><h2 id="基于消息分发的Hook">基于消息分发的Hook</h2><h3 id="IRP-hook">IRP hook</h3><p>依旧是内核层，不会。之后学。</p><p>[<a href="https://bbs.kanxue.com/thread-60022.htm">原创]rootkit hook 之[五] – IRP Hook全家福-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><h3 id="对抗-2">对抗</h3><p>hook都不会，还对抗？QAQ</p><h2 id="基于异常分发的Hook">基于异常分发的Hook</h2><p>hook本质上就是在程序运行的特定时机修改控制流执行一些代码，因此异常分发，中断，调用等等都可以实现hook。</p><p>在CPU遇到异常时会进入异常分发，在异常分发的流程中进行一些修改即可实现hook。</p><h3 id="R3层">R3层</h3><p>AddVectoredExceptionHandler可以为一个函数增加异常处理函数，如果遇到异常，会直接触发增加的函数。因此通过设置软/硬件断点，故意触发设置的函数即可实现hook。</p><p>过程略。</p><h3 id="VT层">VT层</h3><p>由于host(宿主机)可以接管guest(虚拟机)的所有错误触发，可以通过开启EPT扩展页表设置guest的某些页表属性为不可读不可写可执行，当guest试图读写时，触发EPT异常，将</p><ul><li>生成一个新页，内容是自己的hook函数</li><li>将原来的页前几字节设为jmp</li><li>将原来的页设为不可读不可写可执行</li><li>如果读写，则会触发EPT异常<ul><li>异常处理函数将页设为可读可写不可执行并恢复页的前几个字节</li></ul></li><li>如果执行，且当前是可读可写不可执行，触发EPT异常<ul><li>异常处理函数将页设为不可读不可写可执行，并设置jmp</li></ul></li></ul><p><a href="https://qi4l.github.io/2024/08/04/%E6%B5%85%E8%B0%88EPT%E6%97%A0%E7%97%95HOOK%E7%9A%84%E6%96%B9%E6%B3%95/">浅谈EPT无痕HOOK的方法 | QI4L的沉思录</a></p><h3 id="对抗-3">对抗</h3><p>R3层可以通过临时注册函数挤掉之前注册的异常处理函数</p><p>VT层可以通过优先VT(自己先成为host)，先设置不可读不可写来保护程序。但是一般也没用应该。。。</p>]]></content>
    
    
    <summary type="html">总结一下遇见的hook</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="技能" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/"/>
    
    <category term="Hook" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/Hook/"/>
    
    
    <category term="hook" scheme="https://www.pri87.vip/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>web开发入门</title>
    <link href="https://www.pri87.vip/posts/f9fc672b.html"/>
    <id>https://www.pri87.vip/posts/f9fc672b.html</id>
    <published>2025-05-17T11:18:19.000Z</published>
    <updated>2025-05-19T17:25:05.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这篇是我在学前端的时候做的笔记，可能比较混乱</p><p>大概分为四个部分：HTML，CSS，JS，Vue</p><p>任何一个页面的渲染，都是由 HTML 文件实现的，HTML 是一种超文本标记语言，类似于 markdown 语法，用它可以实现基本的不同文本的显示效果，比如：加粗，改颜色等等，同时引入了各种标签比如容器，针对一个段落来进行添加不同属性，但是其中最重要的，是表单，它是 HTML 前端代码和后端交流的核心组件</p><hr><h2 id="HTML">HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>一个标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html 的格式由 &lt;&gt; &lt;/&gt; 标签进行区分，一般分为 head 和 body，head 中可以设定这个 html 使用的基本字符集和标题等效果。body 中则可以添加各种内容实现文字/图片的渲染</p><h3 id="各种标签">各种标签</h3><h4 id="head-标签">head 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://myweb/imgaes/&quot;</span>&gt;</span><span class="comment">&lt;!--表示默认链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span><span class="comment">&lt;!--导入外部样式表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:blue</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="comment">&lt;!--内部样式表，一般不用，一般直接link外部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;元信息，不详细说明了&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>js脚本<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="body-标签">body 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签，可以将数字改大变为其它等级的标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    aaaa<span class="tag">&lt;<span class="name">br</span>&gt;</span>左边是一个换行，如果只有一个段落可以用这个换行</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span> <span class="comment">&lt;!-- 左边是水平分割线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://pri87.vip&quot;</span>&gt;</span>这是一个链接。在标签中有等号的是属性值，比如这个的href还有下面那个src等等<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://pri87.vip/a.pdf&quot;</span> <span class="attr">download</span>=<span class="string">&quot;example.pdf&quot;</span>&gt;</span>表明下载而不是跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/属性值必须用引号.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;11&quot;</span> <span class="attr">height</span>=<span class="string">&quot;11&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;如果没加载出来则显示&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;color_red fort_size_big&quot;</span>&gt;</span>class可以定义类,用于css样式选择器,用空格隔开定义两个类<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="comment">&lt;!-- 表格--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>列标题1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>列标题2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>列标题3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>行1，列1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>行1，列2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>行1，列3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>行2，列1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>行2，列2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>行2，列3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="comment">&lt;!-- 无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="comment">&lt;!-- 有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="格式化文本效果">格式化文本效果</h4><table><thead><tr><th style="text-align:left">标签</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><b></td><td style="text-align:left">定义粗体文本</td></tr><tr><td style="text-align:left"><em></td><td style="text-align:left">定义着重文字</td></tr><tr><td style="text-align:left"><i></td><td style="text-align:left">定义斜体字</td></tr><tr><td style="text-align:left"><small></td><td style="text-align:left">定义小号字</td></tr><tr><td style="text-align:left"><strong></td><td style="text-align:left">定义加重语气</td></tr><tr><td style="text-align:left"><sub></td><td style="text-align:left">定义下标字</td></tr><tr><td style="text-align:left"><sup></td><td style="text-align:left">定义上标字</td></tr><tr><td style="text-align:left"><ins></td><td style="text-align:left">定义插入字</td></tr><tr><td style="text-align:left"><del></td><td style="text-align:left">定义删除字</td></tr></tbody></table><h4 id="CSS">CSS</h4><h5 id="内联使用">内联使用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;margin-left:20px;&quot;</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;font-family:verdana;&quot;</span>&gt;</span>一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:arial;color:red;font-size:20px;&quot;</span>&gt;</span>一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span>居中对齐的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="内联样式表">内联样式表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:yellow;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:blue;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="外部样式表">外部样式表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="区块与布局">区块与布局</h3><p>区块用于分组内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        h1,p,ul,table等是块级元素，每个都会占一行</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        b,td,a,img是内联元素，下一个元素在这一个元素之后继续，而不会换行</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        区块可以将多个元素组合，是块级元素，用来对大的内容块进行样式设置</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>而span是内联元素，用来给少部分文本设置样式<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>布局用于分块整个页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:500px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFA500;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom:0;&quot;</span>&gt;</span>主要的网页标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFD700;height:200px;width:100px;float:left;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            HTML<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            CSS<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            JavaScript</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#EEEEEE;height:200px;width:400px;float:left;&quot;</span>&gt;</span></span><br><span class="line">        内容在这里</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFA500;clear:both;text-align:center;&quot;</span>&gt;</span></span><br><span class="line">        喵喵喵<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css 的 float 属性为不同 id 设置了不同位置取消了块级元素基本设定，通过不同的宽高来组合实现布局</p><p>布局十分重要，是好看的网站效果必须的内容</p><h3 id="表单">表单</h3><p>表单是收集用户输入，实现高级功能最重要的东西。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 密码输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 单选按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 复选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;subscribe&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subscribe&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;subscribe&quot;</span>&gt;</span>订阅推送信息<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 下拉列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;country&quot;</span>&gt;</span>国家:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;country&quot;</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;cn&quot;</span>&gt;</span>CN<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;usa&quot;</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;uk&quot;</span>&gt;</span>UK<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面是例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">action</span>=<span class="string">&quot;html_form_action.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入元素：<input> 标签，输入类型由 type 定义</p><p>具体类别见上</p><p>submit 中，定义了 action 传给的文件，method 是传递方式，post 和 get</p><p>post 是在报文体中发送，get 则是在 action 属性的 url 中用?作为分隔符发送</p><h2 id="CSS-2">CSS</h2><p>之后只会直接放在 css 文件中而不是直接内嵌在 html 代码中</p><h3 id="选择器">选择器</h3><p>格式：选择器+样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">默认选择器</span><br><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">元素选择器</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">类选择器,.开头</span><br><span class="line"><span class="selector-class">.oneclass</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line">id选择器,id是唯一的</span><br><span class="line"><span class="selector-id">#title1</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line">合并选择器</span><br><span class="line"><span class="selector-tag">h3</span>,<span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择器优先级：行内样式&gt;ID选择器&gt;类选择器&gt;元素选择器&gt;默认</p><hr><p>后代选择器：选择E中的所有F</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E F&#123;&#125;</span><br></pre></td></tr></table></figure><p>子代选择器：选择E下一级的F</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E&gt;F&#123;&#125;</span><br></pre></td></tr></table></figure><p>相邻兄弟选择器：选择E和后面相邻的P</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E+<span class="selector-tag">P</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>通用兄弟选择器：选择E和后面所有的P</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E~<span class="selector-tag">P</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="样式">样式</h3><h4 id="字体属性">字体属性</h4><h5 id="颜色">颜色</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:<span class="number">#ff0000</span>;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0.5</span>);&#125;</span><br></pre></td></tr></table></figure><h5 id="大小">大小</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br></pre></td></tr></table></figure><h5 id="粗细">粗细</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">font-weight</span>:bolder;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">font-weight</span>:lighter;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">font-weight</span>:<span class="number">100</span>;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">font-weight</span>:<span class="number">900</span>;&#125;</span><br></pre></td></tr></table></figure><h5 id="斜体">斜体</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">font-style</span>:italic;&#125;</span><br></pre></td></tr></table></figure><h5 id="字体">字体</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">font-family</span>:<span class="string">&quot;A字体&quot;</span>,<span class="string">&quot;B字体&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="背景属性">背景属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;1.jpg&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-position</span><span class="selector-pseudo">:left</span> <span class="attribute">top</span>;&#125;设置起始位置</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-position</span>:center bottom;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-position</span><span class="selector-pseudo">:right</span> center;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-repeat</span>:repeat&#125;平铺方式</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-repeat</span>:repeat-x&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-repeat</span>:repeat-y&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-repeat</span>:no-repeat&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-size</span>:<span class="number">1000px</span> <span class="number">1200px</span>&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-size</span>:<span class="number">50%</span> <span class="number">50%</span>&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-size</span>:cover&#125;最小填充满</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">background-size</span>:contain&#125;最大缩放满</span><br></pre></td></tr></table></figure><h4 id="文本属性">文本属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">text-align</span>:center&#125;水平对齐</span><br><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">text-align</span><span class="selector-pseudo">:left</span>&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">text-decoration</span>:overline&#125;加线</span><br><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">text-decoration</span>:line-through&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">text-decoration</span>:underline&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">text-transform</span>:captialize&#125;大小写</span><br><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">text-transform</span>:uppercase&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">text-transform</span>:lowercase&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">text-indent</span>:<span class="number">50px</span>&#125;首行缩进</span><br></pre></td></tr></table></figure><p>太多了，之后只放重点一点的</p><h4 id="表格属性">表格属性</h4><p>略</p><h3 id="盒子模型">盒子模型</h3><p>外边距，边框，内边距，实际内容</p><p>内边距：padding，使得内容靠中心</p><p>边框：border，就是边框</p><p>外边距：margin，元素和元素的间隔</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">50px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">5px</span> solid blue; </span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="弹性盒子">弹性盒子</h3><p>弹性盒子内默认横向摆放</p><p>略</p><h3 id="浮动">浮动</h3><p>脱离文档流，在新的层出现会覆盖底层，在浮动层可以让元素横向排放</p><p>略</p><h3 id="定位">定位</h3><p>绝对定位和固定定位会脱离文档流</p><p>略</p><h3 id="CSS3">CSS3</h3><h4 id="圆角">圆角</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">border-radius</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="阴影">阴影</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span></span><br></pre></td></tr></table></figure><h4 id="动画">动画</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name&#123;</span><br><span class="line">    <span class="selector-tag">from</span>|<span class="number">0%</span>&#123;</span><br><span class="line">        css样式</span><br><span class="line">    &#125;</span><br><span class="line">    percent&#123;</span><br><span class="line">        css样式</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>|<span class="number">100%</span>&#123;</span><br><span class="line">        css样式</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attribute">animation</span>: name duration timeing-function delay iteration-count direction;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鼠标划上的效果</p><h3 id="媒体查询">媒体查询</h3><p>根据设备及时修正大小，排布</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span><span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=l,maximum-scale=l,user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>略</p><h3 id="雪碧图">雪碧图</h3><p>略</p><h3 id="字体图标">字体图标</h3><p>略</p><h2 id="JavaScript">JavaScript</h2><h3 id="引入JS">引入JS</h3><h4 id="嵌入html">嵌入html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> age = <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="引入本地js">引入本地js</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./hello.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入网络js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;http://code.jquery.com/jquery1.2.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本篇介绍web浏览器页面显示的基础</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>编译器实现-1</title>
    <link href="https://www.pri87.vip/posts/1195dca5.html"/>
    <id>https://www.pri87.vip/posts/1195dca5.html</id>
    <published>2025-05-12T11:29:46.000Z</published>
    <updated>2025-05-19T17:25:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>这几周一直在研究怎么写编译器，算是这一年学花指令的最后学习了吧。这个写完之后，就专心学Win内核QAQ</p><p>目前还没有把编译器写完，所以现在只是先总结一下流程。</p><p>目前我遵循的流程是：</p><ul><li>输入文本</li><li>token流：将输入的文本解析为token字，它是最小的基本词汇，比如把+=视为1个符号，把abcd视为标识符。此处会进行词法检查。</li><li>抽象语法树(AST)：将token流解析为抽象语法树，以语句块(节点)为基本单位，装载在不同函数块(节点)中。生成结束后，再进行语法检查。</li><li>三地址码：将抽象语法树按自顶向下的(从块到句)解析为三地址码，三地址码类似汇编，比如：a += b + c这个AST，会变为tmp = b+c，a = a + tmp，这种方式可以很方便地在下一步映射中间变量为寄存器。</li><li>汇编代码：三地址码转化为汇编基本只用实现寄存器初始化，使用和销毁。这一步可以和三地址码一起使用，也就是说可以省略三地址码，直接从抽象语法树转换为汇编。</li></ul><h2 id="生成token流">生成token流</h2><p>这一步需要通过读取文本，解析文本结构来实现输出token流，可以先对输入的内容分类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字符:<span class="string">&#x27;&#x27;</span></span><br><span class="line">字符串：<span class="string">&quot;&quot;</span></span><br><span class="line">数字：数字开头纯数字，<span class="number">0</span>x开头且字母小于F的hex值</span><br><span class="line">关键字：控制流关键字(main,<span class="keyword">if</span>,<span class="keyword">continue</span>,<span class="keyword">break</span>,<span class="keyword">return</span>,等),类型关键字(<span class="keyword">void</span>,<span class="built_in">int</span>,dword,<span class="built_in">byte</span>,proc,<span class="keyword">struct</span>,等)</span><br><span class="line">符号：运算符：(+,-,*,%,/,等)，间隔符：((),&#123;&#125;,[],;)</span><br><span class="line">标识符：字母开头的不含运算符和间隔符的任意内容。且不与关键字重复。</span><br></pre></td></tr></table></figure><p>那么就可以对以上内容进行顺序判断实现生成token流，因为是第一次写，所以类型写的比较混乱，QAQ之后有机会改一改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Token</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::string originaldata;</span><br><span class="line">ttoken tokenData;</span><br><span class="line">TYPE tokenType;</span><br><span class="line"><span class="built_in">Token</span>(std::string data, ttoken type, TYPE type_)</span><br><span class="line">: <span class="built_in">originaldata</span>(data), <span class="built_in">tokenData</span>(type), <span class="built_in">tokenType</span>(type_) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ttoken <span class="title">type</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> tokenData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isType</span><span class="params">(ttoken type)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> tokenData == type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(Token a) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tokenData == a.tokenData;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parser</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;<span class="type">char</span>&gt; origalCode;</span><br><span class="line">std::vector&lt;Token&gt; TokenList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Parser</span>(std::string soureCodePath)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">file</span><span class="params">(soureCodePath, std::ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!file.<span class="built_in">is_open</span>())</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;文件打开失败&quot;</span>);</span><br><span class="line">file.<span class="built_in">seekg</span>(<span class="number">0</span>, std::ios::end);</span><br><span class="line">std::streamsize dataSize = file.<span class="built_in">tellg</span>();</span><br><span class="line">file.<span class="built_in">seekg</span>(<span class="number">0</span>, std::ios::beg);</span><br><span class="line">origalCode.<span class="built_in">resize</span>(dataSize);</span><br><span class="line"><span class="keyword">if</span> (!file.<span class="built_in">read</span>(origalCode.<span class="built_in">data</span>(), dataSize))</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;拷贝文件至缓冲区失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lexicalAnalysis</span><span class="params">()</span></span>;<span class="comment">//词法分析</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> pomnet</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">namespace</span> inner &#123;</span><br><span class="line"><span class="comment">//获得下一个值,不递增pdata</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">getNext</span><span class="params">(<span class="type">char</span>*&amp; pdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> pdata[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断字符是否为数字</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isDigit</span><span class="params">(<span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (data &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; data &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isHex</span><span class="params">(<span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isDigit</span>(data))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (data &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; data &lt;= <span class="string">&#x27;f&#x27;</span> || data &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; data &lt;= <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断字符是否为字母</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isAlpha</span><span class="params">(<span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (data &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; data &lt;= <span class="string">&#x27;z&#x27;</span> || data &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; data &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为非字母和数字</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">notDigitAlpha</span><span class="params">(<span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isAlpha</span>(data) || <span class="built_in">isDigit</span>(data))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">notDigitAlpha_</span><span class="params">(<span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="string">&#x27;_&#x27;</span> || <span class="built_in">isAlpha</span>(data) || <span class="built_in">isDigit</span>(data))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断结束</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEndSentence</span><span class="params">(<span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> data == <span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断块开始或结束</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isBlockStart</span><span class="params">(<span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> data == <span class="string">&#x27;&#123;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isBlockEnd</span><span class="params">(<span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> data == <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断数字是否正确闭合，当存在一个值是字母但是不是hex时说明数字输入错误</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isNumberEndHex</span><span class="params">(<span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isHex</span>(data) &amp;&amp; (<span class="built_in">isAlpha</span>(data) || data == <span class="string">&#x27;_&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断数字是否正确闭合，当存在一个值是字母时说明数字输入错误</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isNumberEnd</span><span class="params">(<span class="type">char</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isAlpha</span>(data) || data == <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最长可能串，字母开头,除了下划线和数字和字母以外的最长字符串,同时偏移到字符串结尾,如果是空，说明没有找到</span></span><br><span class="line"><span class="function">std::string <span class="title">getMostData</span><span class="params">(<span class="type">char</span>*&amp; pdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> inner;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isAlpha</span>(*pdata))</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">string</span>();</span><br><span class="line">std::string result;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">notDigitAlpha_</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line">result += *pdata;</span><br><span class="line">pdata++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取最长可能串，数字，如果是空，说明没有找到</span></span><br><span class="line"><span class="function">std::string <span class="title">getMostNumber</span><span class="params">(<span class="type">char</span>*&amp; pdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isDigit</span>(*pdata))</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">string</span>();</span><br><span class="line">std::string result;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是0x开头</span></span><br><span class="line"><span class="keyword">if</span> (pdata[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; <span class="built_in">getNext</span>(pdata) == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">pdata += <span class="number">2</span>;</span><br><span class="line">result += <span class="string">&quot;0x&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isHex</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line">result += *pdata;</span><br><span class="line">pdata++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isNumberEndHex</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;数字未闭合&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//标准数字</span></span><br><span class="line"><span class="keyword">if</span> (pdata[<span class="number">0</span>] != <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isDigit</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line">result += *pdata;</span><br><span class="line">pdata++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isNumberEnd</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;数字未闭合&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串为0</span></span><br><span class="line">pdata++;</span><br><span class="line"><span class="keyword">return</span> result = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最长可能字符串</span></span><br><span class="line"><span class="function">std::string <span class="title">getMostString</span><span class="params">(<span class="type">char</span>*&amp; pdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> inner;</span><br><span class="line">std::string result;</span><br><span class="line"><span class="keyword">if</span> (*pdata == <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">pdata++;</span><br><span class="line">result += <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> (*pdata != <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*pdata == <span class="string">&#x27;\\&#x27;</span> &amp;&amp; <span class="built_in">getNext</span>(pdata) == <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">pdata++;</span><br><span class="line">result += *pdata;</span><br><span class="line">pdata++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*pdata == <span class="string">&#x27;\\&#x27;</span> &amp;&amp; <span class="built_in">getNext</span>(pdata) == <span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">pdata++;</span><br><span class="line">result += *pdata;</span><br><span class="line">pdata++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += *pdata;</span><br><span class="line">pdata++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*pdata == <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result += <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">pdata++;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">string</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取字符</span></span><br><span class="line"><span class="function">std::string <span class="title">getChar</span><span class="params">(<span class="type">char</span>*&amp; pdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> inner;</span><br><span class="line">std::string result;</span><br><span class="line"><span class="keyword">if</span> (*pdata == <span class="string">&#x27;\&#x27;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">pdata++;</span><br><span class="line">result += <span class="string">&#x27;\&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (*pdata == <span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">pdata++;</span><br><span class="line">result += *pdata;</span><br><span class="line">pdata++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">result += *pdata;</span><br><span class="line">pdata++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*pdata != <span class="string">&#x27;\&#x27;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">string</span>();</span><br><span class="line">&#125;</span><br><span class="line">result += *pdata;</span><br><span class="line">pdata++;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取符号，如果是空，说明没有找到</span></span><br><span class="line"><span class="function">std::string <span class="title">getMostSymbol</span><span class="params">(<span class="type">char</span>*&amp; pdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> inner;</span><br><span class="line">std::string result;</span><br><span class="line"><span class="keyword">auto</span> targetKey = symbolMap.<span class="built_in">find</span>(result + *pdata);</span><br><span class="line"><span class="keyword">if</span> (targetKey == symbolMap.<span class="built_in">end</span>())</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"><span class="keyword">auto</span> targetKey2 = symbolMap.<span class="built_in">find</span>(result + *pdata + <span class="built_in">getNext</span>(pdata));</span><br><span class="line"><span class="keyword">if</span> (targetKey2 == symbolMap.<span class="built_in">end</span>())<span class="comment">//长度为1</span></span><br><span class="line">&#123;</span><br><span class="line">result += *pdata;</span><br><span class="line">pdata++;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//长度为2</span></span><br><span class="line">result += *pdata + <span class="built_in">getNext</span>(pdata);</span><br><span class="line">pdata += <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接返回对应类型对应源数据的Token类实例</span></span><br><span class="line"><span class="function">Token <span class="title">generateToken</span><span class="params">(std::string data, TYPE type_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (type_)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> identifier:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, ID_TOKEN, identifier);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> keyword:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> targetKey = keyWordMap.<span class="built_in">find</span>(data);</span><br><span class="line"><span class="keyword">if</span> (targetKey != keyWordMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, targetKey-&gt;second, keyword);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, BAD_TOKEN, keyword);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> type:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> targetKey = typeMap.<span class="built_in">find</span>(data);</span><br><span class="line"><span class="keyword">if</span> (targetKey != typeMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, targetKey-&gt;second, type);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, BAD_TOKEN, type);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> number:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, NUM_TOKEN, number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> string:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, STR_TOKEN, string);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> character:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, CHR_TOKEN, character);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> symbol:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> targetKey = symbolMap.<span class="built_in">find</span>(data);</span><br><span class="line"><span class="keyword">if</span> (targetKey != symbolMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, targetKey-&gt;second, symbol);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, BAD_TOKEN, symbol);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> separator:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="string">&quot;;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, SY_SEMI, separator);</span><br><span class="line"><span class="keyword">if</span> (data == <span class="string">&quot;&#123;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, SY_LBRACE, separator);</span><br><span class="line"><span class="keyword">if</span> (data == <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Token</span>(data, SY_RBRACE, separator);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Parser::lexicalAnalysis</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span>* pdata = origalCode.<span class="built_in">data</span>();</span><br><span class="line"><span class="keyword">auto</span> dataSize = origalCode.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (dataSize == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;源文件为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> pomnet;</span><br><span class="line"><span class="keyword">while</span> (pdata &lt; origalCode.<span class="built_in">data</span>() + dataSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果是数字</span></span><br><span class="line"><span class="keyword">if</span> (inner::<span class="built_in">isDigit</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line">std::string number = <span class="built_in">getMostNumber</span>(pdata);</span><br><span class="line"><span class="keyword">if</span> (number.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;数字未闭合&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">TokenList.<span class="built_in">push_back</span>(<span class="built_in">generateToken</span>(number, TYPE::number));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是字母开头，两种可能，标识符和关键字</span></span><br><span class="line"><span class="keyword">if</span> (inner::<span class="built_in">isAlpha</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::string str = <span class="built_in">getMostData</span>(pdata);</span><br><span class="line"><span class="comment">//如果字符串在map中，说明是关键字</span></span><br><span class="line"><span class="keyword">if</span> (keyWordMap.<span class="built_in">find</span>(str) != keyWordMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">TokenList.<span class="built_in">push_back</span>(<span class="built_in">generateToken</span>(str, TYPE::keyword));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (typeMap.<span class="built_in">find</span>(str) != typeMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">TokenList.<span class="built_in">push_back</span>(<span class="built_in">generateToken</span>(str, TYPE::type));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果不是关键字，说明是标识符</span></span><br><span class="line">TokenList.<span class="built_in">push_back</span>(<span class="built_in">generateToken</span>(str, TYPE::identifier));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是符号开头，分隔符，运算符，字符串或字符</span></span><br><span class="line"><span class="keyword">if</span> (inner::<span class="built_in">notDigitAlpha</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果是空格</span></span><br><span class="line"><span class="keyword">if</span> (*pdata == <span class="string">&#x27; &#x27;</span> || *pdata == <span class="string">&#x27;\t&#x27;</span> || *pdata == <span class="string">&#x27;\n&#x27;</span> || *pdata == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">pdata++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是字符或字符串</span></span><br><span class="line"><span class="keyword">if</span> (*pdata == <span class="string">&#x27;\&#x27;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::string chr = <span class="built_in">getChar</span>(pdata);</span><br><span class="line"><span class="keyword">if</span> (!chr.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">TokenList.<span class="built_in">push_back</span>(<span class="built_in">generateToken</span>(chr, TYPE::character));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*pdata == <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::string str = <span class="built_in">getMostString</span>(pdata);</span><br><span class="line"><span class="keyword">if</span> (!str.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">TokenList.<span class="built_in">push_back</span>(<span class="built_in">generateToken</span>(str, TYPE::string));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是分割符</span></span><br><span class="line"><span class="keyword">if</span> (inner::<span class="built_in">isEndSentence</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line">TokenList.<span class="built_in">push_back</span>(<span class="built_in">generateToken</span>(<span class="string">&quot;;&quot;</span>, TYPE::separator));</span><br><span class="line">pdata++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (inner::<span class="built_in">isBlockEnd</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line">TokenList.<span class="built_in">push_back</span>(<span class="built_in">generateToken</span>(<span class="string">&quot;&#125;&quot;</span>, TYPE::separator));</span><br><span class="line">pdata++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (inner::<span class="built_in">isBlockStart</span>(*pdata))</span><br><span class="line">&#123;</span><br><span class="line">TokenList.<span class="built_in">push_back</span>(<span class="built_in">generateToken</span>(<span class="string">&quot;&#123;&quot;</span>, TYPE::separator));</span><br><span class="line">pdata++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是符号</span></span><br><span class="line">std::string symbol = <span class="built_in">getMostSymbol</span>(pdata);</span><br><span class="line"><span class="keyword">if</span> (symbol.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;非符号&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">TokenList.<span class="built_in">push_back</span>(<span class="built_in">generateToken</span>(symbol, TYPE::symbol));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上内容，就可以生成token list</p><h2 id="生成AST">生成AST</h2><p>这一步主要进行语法解析，所以是要对每个函数块的内容实现抽象描述。</p><p>从最基本的抽象开始：表达式</p><p>这里使用partt表达式解析方法。</p><p>在一次解析中，先解析符号是否是前缀运算符，再解析符号是否是中缀运算符，最后判断是否是后缀运算符。</p><p>解析符号生成AST时，使用固定的getGenerateFunc解析函数传入不同的token类型返回生成对应节点的函数</p><p>因此只需要递归调用主函数并在getGenerateFunc返回的函数中实现生成AST即可。</p><p>[未完待续]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这几周一直在研究怎么写编译器，算是这一年学花指令的最后学习了吧。这个写完之后，就专心学Win内核QAQ&lt;/p&gt;
&lt;p&gt;目前还没有把编译器写完，所以现在只是先总结一下流程。&lt;/p&gt;
&lt;p&gt;目前我遵循的流程是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入文本&lt;/li&gt;
&lt;li&gt;token流</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PrattParsing解析表达式</title>
    <link href="https://www.pri87.vip/posts/d6331565.html"/>
    <id>https://www.pri87.vip/posts/d6331565.html</id>
    <published>2025-04-30T14:02:16.000Z</published>
    <updated>2025-05-31T12:50:34.873Z</updated>
    
    <content type="html"><![CDATA[<p>本文是一篇翻译，太悲伤了，不知道怎么翻，机翻还是太好用了，出处：</p><p><a href="https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html">Simple but Powerful Pratt Parsing</a></p><h1>简单强大的Pratt 解析</h1><p>这篇文章是一个语法解析的monad教程。关于Pratt解析的文章很多，甚至这里有一个<a href="https://www.oilshell.org/blog/2017/03/31.html">合集blog</a></p><p>我写这篇文章的目的是：</p><ul><li>说明左递归问题是容易解决的</li><li>用另一种方式代替不好识别中缀表达式的BNF</li><li>给出Pratt的算法描述和具体实现，并聚焦重点，不引入DSL-y的抽象</li><li>希望这是我最后一次理解这个算法，之前写过一次，但是写完之后就忘了QAQ</li></ul><p>本文假设读者对解析操作有基本的理解，知晓基本术语，比如上下文无关语法</p><h2 id="导入">导入</h2><p>解析(parser)是编译器将标记的序列转为语法树表示的过程：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                           Add</span><br><span class="line">                Parser     / <span class="string">\</span> </span><br><span class="line"><span class="string">&quot;1 + 2 * 3&quot;</span>    -------&gt;   <span class="number">1</span>  Mul</span><br><span class="line">                             / <span class="string">\</span></span><br><span class="line">                            <span class="number">2</span>   <span class="number">3</span></span><br></pre></td></tr></table></figure><p>实现这个过程有很多方式，我们一般分为两类：</p><ul><li>使用DSL定义一个语言的抽象语法</li><li>手动实现解析</li></ul><h2 id="BNF">BNF</h2><p>语法分析的作用就是将token流解析为树结构，其中最重要的方法就是使用上下文无关语法来记录（一般用BNF语法）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Item =</span><br><span class="line">    StructItem</span><br><span class="line">  <span class="string">| EnumItem</span></span><br><span class="line">  <span class="string">| ...</span></span><br><span class="line">StructItem =</span><br><span class="line">    &#x27;struct&#x27; Name &#x27;&#123;&#x27; FieldList &#x27;&#125;&#x27;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>自然语言和程序语言结构十分地相似，这让我很激动，BNF可以做到解析它们。但是当我尝试解析表达式的时候，BNF就不好用了。我们先看看自然语言表达式的表达：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Expr</span> =</span><br><span class="line">    <span class="built_in">Expr</span> <span class="string">&#x27;+&#x27;</span> <span class="built_in">Expr</span></span><br><span class="line">  | <span class="built_in">Expr</span> <span class="string">&#x27;*&#x27;</span> <span class="built_in">Expr</span></span><br><span class="line">  | <span class="string">&#x27;(&#x27;</span> <span class="built_in">Expr</span> <span class="string">&#x27;)&#x27;</span></span><br><span class="line">  | &#x27;number&#x27;</span><br></pre></td></tr></table></figure><p>这样写是没什么问题的，但是还需要考虑运算符的优先级和结合性，所以BNF会变成这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Expr =</span><br><span class="line">    Factor</span><br><span class="line">  | Expr <span class="string">&#x27;+&#x27;</span> <span class="type">Factor</span></span><br><span class="line"><span class="variable">Factor</span> <span class="operator">=</span></span><br><span class="line">    Atom</span><br><span class="line">  | Factor <span class="string">&#x27;*&#x27;</span> <span class="type">Atom</span></span><br><span class="line"><span class="variable">Atom</span> <span class="operator">=</span></span><br><span class="line">    <span class="string">&#x27;number&#x27;</span></span><br><span class="line">  | <span class="string">&#x27;(&#x27;</span> Expr <span class="string">&#x27;)&#x27;</span></span><br></pre></td></tr></table></figure><p>这样再看，就会感觉它很不“表达式”。而且很难写，在我能写出来这种语法之前，我多学了至少3，4课才学会。</p><p>这就是为什么我喜欢Pratt解析（基于递归下降而又比它强），它使用自然语言中的优先级和关联性来解析表达式，而不是语法混淆技术(存疑？)</p><h2 id="递归下降和左递归">递归下降和左递归</h2><p>下面是使用递归下降实现的上面那个例子的代码，它是用一组嵌套递归的函数来实现的，所以叫递归下降：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">item</span>(p: &amp;<span class="keyword">mut</span> Parser) &#123;</span><br><span class="line">    <span class="keyword">match</span> p.<span class="title function_ invoke__">peek</span>() &#123;</span><br><span class="line">        STRUCT_KEYWORD =&gt; <span class="title function_ invoke__">struct_item</span>(p),</span><br><span class="line">        ENUM_KEYWORD   =&gt; <span class="title function_ invoke__">enum_item</span>(p),</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">struct_item</span>(p: &amp;<span class="keyword">mut</span> Parser) &#123;</span><br><span class="line">    p.<span class="title function_ invoke__">expect</span>(STRUCT_KEYWORD);</span><br><span class="line">    <span class="title function_ invoke__">name</span>(p);</span><br><span class="line">    p.<span class="title function_ invoke__">expect</span>(L_CURLY);</span><br><span class="line">    <span class="title function_ invoke__">field_list</span>(p);</span><br><span class="line">    p.<span class="title function_ invoke__">expect</span>(R_CURLY);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>书上说这种方法有一个缺点，那就是左递归。因而它带来了更高级的LR解析技术。可以看看下面这个有问题的例子：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Sum</span> =</span><br><span class="line">    <span class="built_in">Sum</span> &#x27;+&#x27; <span class="built_in">Int</span></span><br><span class="line">  | <span class="built_in">Int</span></span><br></pre></td></tr></table></figure><p>写成代码呢：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">sum</span>(p: &amp;<span class="keyword">mut</span> Parser) &#123;</span><br><span class="line">    <span class="comment">// 第一个选项</span></span><br><span class="line">    <span class="title function_ invoke__">sum</span>(p); </span><br><span class="line">    p.<span class="title function_ invoke__">expect</span>(PLUS);</span><br><span class="line">    <span class="title function_ invoke__">int</span>(p);</span><br><span class="line">    <span class="comment">// 如果失败，选第二个选项</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第三行，sum§会无限递归导致栈溢出</p><p>所以我们一般在实践中用循环代替递归：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">sum</span>(p: &amp;<span class="keyword">mut</span> Parser) &#123;</span><br><span class="line">    <span class="title function_ invoke__">int</span>(p);</span><br><span class="line">    <span class="keyword">while</span> p.<span class="title function_ invoke__">eat</span>(PLUS) &#123;</span><br><span class="line">        <span class="title function_ invoke__">int</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pratt解析标准模板">Pratt解析标准模板</h2><p>如果只有循环，前缀表达式就不能解析。所以，Pratt用循环和递归一起实现解析操作：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">parse_expr</span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="title function_ invoke__">parse_expr</span>()</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它把表达式放进循环，还能解析优先级和关联性</p><h2 id="优先级与绑定能力">优先级与绑定能力</h2><p>我经常把高优先级和低优先级搞混。在a+b*c中加法的优先级较低，但是它在语法树的顶端。所以我们可以引入绑定能力这个概念：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表达式:   A       +       B       *       C</span><br><span class="line">绑定能力:    <span class="number"> 3 </span>     <span class="number"> 3 </span>     <span class="number"> 5 </span>      5</span><br></pre></td></tr></table></figure><p>在这个例子中，*更强，所以它绑定左右内容的能力更强，因此整个表达式先组合BC，然后组合A和BC</p><p>那相关性呢？如果是A+B+C，每个运算符都是一样的，那要怎么判断是(A+B)+C还是A+(B+C)，但是绑定能力也可以表示这个特性：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表达式:      A       +       B       +       C</span><br><span class="line">绑定能力:<span class="number"> 0 </span>    <span class="number"> 3 </span>     3.1     <span class="number"> 3 </span>     3.1     0</span><br></pre></td></tr></table></figure><p>这里我们把+的右侧的绑定能力增加了，这样可以让+运算符后面的数和+联系得更紧密。然后在左右加0说明两边没有操作符。对于B来说，左边的+比右边的+的绑定能力更强，所以它和左边的+优先结合，因此，可以化简为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">表达式:      (A + B)     +     C</span></span><br><span class="line"><span class="section">绑定能力:  0          3    3.1    0</span></span><br></pre></td></tr></table></figure><p>然后就顺理成章了，第二个+更喜欢后面那个数，所以在它连接C时，A和B被第一个+捕获了，这是很清晰的。</p><p>Pratt解析需要在读取从左到右的token流的同时来实现上面的过程。这无疑是比邻居搜索算法(存疑？)更好的。基本原理已经OK了，只剩写代码。但是我们还需要表示一个右结合的语法，我们用 . 来表示，假设数字为f，g和h：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attribute">f</span>     .    g     .    h</span><br><span class="line"><span class="attribute">0</span>   <span class="number">8</span>.<span class="number">5</span>    <span class="number">8</span>   <span class="number">8</span>.<span class="number">5</span>    <span class="number">8</span>   <span class="number">0</span></span><br></pre></td></tr></table></figure><p>它会被解析为：f . (g . h)</p><h2 id="最简Pratt解析器">最简Pratt解析器</h2><p>我们传入解析器的参数是单字符的数字和变量，并用标点符号作为运算符，实例如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug, Clone, Copy, PartialEq, Eq)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Token</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Atom</span>(<span class="type">char</span>),</span><br><span class="line">    <span class="title function_ invoke__">Op</span>(<span class="type">char</span>),</span><br><span class="line">    Eof,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Lexer</span> &#123;</span><br><span class="line">    tokens: <span class="type">Vec</span>&lt;Token&gt;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Lexer</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(input: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> Lexer &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">tokens</span> = input</span><br><span class="line">            .<span class="title function_ invoke__">chars</span>()</span><br><span class="line">            .<span class="title function_ invoke__">filter</span>(|it| !it.<span class="title function_ invoke__">is_ascii_whitespace</span>())</span><br><span class="line">            .<span class="title function_ invoke__">map</span>(|c| <span class="keyword">match</span> c &#123;</span><br><span class="line">                <span class="string">&#x27;0&#x27;</span>..=<span class="string">&#x27;9&#x27;</span> |</span><br><span class="line">                <span class="string">&#x27;a&#x27;</span>..=<span class="string">&#x27;z&#x27;</span> | <span class="string">&#x27;A&#x27;</span>..=<span class="string">&#x27;Z&#x27;</span> =&gt; Token::<span class="title function_ invoke__">Atom</span>(c),</span><br><span class="line">                _ =&gt; Token::<span class="title function_ invoke__">Op</span>(c),</span><br><span class="line">            &#125;)</span><br><span class="line">            .collect::&lt;<span class="type">Vec</span>&lt;_&gt;&gt;();</span><br><span class="line">        tokens.<span class="title function_ invoke__">reverse</span>();</span><br><span class="line">        Lexer &#123; tokens &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> Token &#123;</span><br><span class="line">        <span class="keyword">self</span>.tokens.<span class="title function_ invoke__">pop</span>().<span class="title function_ invoke__">unwrap_or</span>(Token::Eof)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">peek</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> Token &#123;</span><br><span class="line">        <span class="keyword">self</span>.tokens.<span class="title function_ invoke__">last</span>().<span class="title function_ invoke__">copied</span>().<span class="title function_ invoke__">unwrap_or</span>(Token::Eof)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了可以正确识别绑定能力，需要先将中缀表达式变为前缀表达式：</p><p><code>1 + 2 * 3 == (+ 1 (* 2 3))</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">S</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Atom</span>(<span class="type">char</span>),</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(<span class="type">char</span>, <span class="type">Vec</span>&lt;S&gt;),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">S</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter&lt;<span class="symbol">&#x27;_</span>&gt;) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            S::<span class="title function_ invoke__">Atom</span>(i) =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;&#123;&#125;&quot;</span>, i),</span><br><span class="line">            S::<span class="title function_ invoke__">Cons</span>(head, rest) =&gt; &#123;</span><br><span class="line">                <span class="built_in">write!</span>(f, <span class="string">&quot;(&#123;&#125;&quot;</span>, head)?;</span><br><span class="line">                <span class="keyword">for</span> <span class="variable">s</span> <span class="keyword">in</span> rest &#123;</span><br><span class="line">                    <span class="built_in">write!</span>(f, <span class="string">&quot; &#123;&#125;&quot;</span>, s)?</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">write!</span>(f, <span class="string">&quot;)&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们从+和*开始：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">expr</span>(input: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lexer</span> = Lexer::<span class="title function_ invoke__">new</span>(input);</span><br><span class="line">    <span class="title function_ invoke__">expr_bp</span>(&amp;<span class="keyword">mut</span> lexer)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">expr_bp</span>(lexer: &amp;<span class="keyword">mut</span> Lexer) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    todo!()</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">tests</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;1 + 2 * 3&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(+ 1 (* 2 3))&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以说，实际就是使用我们处理左递归的方法——解析数字，循环，然后consum操作符，然后做其它的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">expr_bp</span>(lexer: &amp;<span class="keyword">mut</span> Lexer) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">lhs</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        Token::<span class="title function_ invoke__">Atom</span>(it) =&gt; S::<span class="title function_ invoke__">Atom</span>(it),</span><br><span class="line">        t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">op</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">            Token::Eof =&gt; <span class="keyword">break</span>,</span><br><span class="line">            Token::<span class="title function_ invoke__">Op</span>(op) =&gt; op,</span><br><span class="line">            t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">        &#125;;</span><br><span class="line">        todo!()</span><br><span class="line">    &#125;</span><br><span class="line">    lhs</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">tests</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;1&quot;</span>); </span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已经可以正常执行了</p><p>我们添加上运算符的左右绑定能力，由于两侧都是0，所以运算符的至少为1，对于不同结合性的，可以在对应边+1</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">expr_bp</span>(lexer: &amp;<span class="keyword">mut</span> Lexer) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">lhs</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        Token::<span class="title function_ invoke__">Atom</span>(it) =&gt; S::<span class="title function_ invoke__">Atom</span>(it),</span><br><span class="line">        t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">op</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">peek</span>() &#123;</span><br><span class="line">            Token::Eof =&gt; <span class="keyword">break</span>,</span><br><span class="line">            Token::<span class="title function_ invoke__">Op</span>(op) =&gt; op,</span><br><span class="line">            t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> (l_bp, r_bp) = <span class="title function_ invoke__">infix_binding_power</span>(op);</span><br><span class="line">        todo!()</span><br><span class="line">    &#125;</span><br><span class="line">    lhs</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">infix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> (<span class="type">u8</span>, <span class="type">u8</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span> | <span class="string">&#x27;/&#x27;</span> =&gt; (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad op: &#123;:?&#125;&quot;</span>, op)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在是最棘手的地方，引入递归，假设下面这个例子：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>   +   b   *   c   *   d   +   e</span><br><span class="line">  <span class="attribute">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">1</span>   <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这里，开始执行时，将a放入lhs，然后呢？很明显不能直接将b和a组合，那是b*c吗？也不是，应该是b*c*d，一共应该分为三个部分：A+B+C，这是因为+的结合性更低，所以，我们引入递归：从b开始，找到比b左边结合性还低的结合性即可，在这里就是e，因此要向main函数添加min_bp参数。bp就是bind power</p><p>最后，就是这样：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">expr</span>(input: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lexer</span> = Lexer::<span class="title function_ invoke__">new</span>(input);</span><br><span class="line">    <span class="title function_ invoke__">expr_bp</span>(&amp;<span class="keyword">mut</span> lexer, <span class="number">0</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">expr_bp</span>(lexer: &amp;<span class="keyword">mut</span> Lexer, min_bp: <span class="type">u8</span>) <span class="punctuation">-&gt;</span> S &#123; </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lhs</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        Token::<span class="title function_ invoke__">Atom</span>(it) =&gt; S::<span class="title function_ invoke__">Atom</span>(it),</span><br><span class="line">        t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">op</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">peek</span>() &#123;</span><br><span class="line">            Token::Eof =&gt; <span class="keyword">break</span>,</span><br><span class="line">            Token::<span class="title function_ invoke__">Op</span>(op) =&gt; op,</span><br><span class="line">            t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> (l_bp, r_bp) = <span class="title function_ invoke__">infix_binding_power</span>(op);</span><br><span class="line">        <span class="keyword">if</span> l_bp &lt; min_bp &#123; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lexer.<span class="title function_ invoke__">next</span>(); </span><br><span class="line">        <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">        lhs = S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs, rhs]); </span><br><span class="line">    &#125;</span><br><span class="line">    lhs</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">infix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> (<span class="type">u8</span>, <span class="type">u8</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span> | <span class="string">&#x27;/&#x27;</span> =&gt; (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad op: &#123;:?&#125;&quot;</span>, op),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">tests</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;1 + 2 * 3&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(+ 1 (* 2 3))&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;a + b * c * d + e&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(+ (+ a (* (* b c) d)) e)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第5行：min_bp十分重要，expr_bp在它的控制下可以解析比它绑定能力大的所有表达式，当看到比它小的表达式时，就会停止。</li><li>第17行：停止条件</li><li>第20行：这里我们跳过操作符本身，进行递归调用。我们使用l_bp来检测min_bp，r_bp作为递归调用的新min_bp。因此min_bp可以视为当前表达式左侧操作符的绑定能力。</li><li>第22行：解析完右侧的表达式后，组合成当前表达式</li><li>第3行：开始时，使用0的绑定能力，0表示没有运算符</li></ul><p>上面的40行代码就是Pratt核心的解析算法。如果你能理解它，那么其它的内容就是单纯的加法罢了。</p><h2 id="额外内容">额外内容</h2><p>好了，我们现在可以添加一些奇怪的表达式来展示Pratt算法的强大。首先添加一个高优先的，右结合的成员函数调用运算符 . ：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">infix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> (<span class="type">u8</span>, <span class="type">u8</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span> | <span class="string">&#x27;/&#x27;</span> =&gt; (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">        <span class="string">&#x27;.&#x27;</span> =&gt; (<span class="number">6</span>, <span class="number">5</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad op: &#123;:?&#125;&quot;</span>, op),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很不错：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;f . g . h&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(. f (. g h))&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot; 1 + 2 + f . g . h * 3 * 4&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(+ (+ 1 2) (* (* (. f (. g h)) 3) 4))&quot;</span>);</span><br></pre></td></tr></table></figure><p>好的，现在添加负号，也就是一元 - ，它比比特运算符绑定更强，但是比二元的绑定弱，同时如果它是第一个出现的token，那上面的代码就需要修改为先处理一元运算符的版本。由于一元运算符只和右边结合所以只有右结合性。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">prefix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> ((), <span class="type">u8</span>) &#123; </span><br><span class="line">    <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; ((), <span class="number">5</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad op: &#123;:?&#125;&quot;</span>, op),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">infix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> (<span class="type">u8</span>, <span class="type">u8</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span> | <span class="string">&#x27;/&#x27;</span> =&gt; (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">        <span class="string">&#x27;.&#x27;</span> =&gt; (<span class="number">8</span>, <span class="number">7</span>), </span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad op: &#123;:?&#125;&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第1行：使用()表明这是一个前缀运算符而不是后缀或中缀，所以只能把其它东西放在这个符号后。</li><li>第11行：由于我们要在.和*中添加一元减，所以需要修正.的优先级，一般来说，如果运算符是二元的，设置它的优先级为一个奇数，并用这个数+1表示它的结合性。对于一元减来说，则都可以，但是最好设置一个原则。</li></ul><p>加到expr_bp之后，得到：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">expr_bp</span>(lexer: &amp;<span class="keyword">mut</span> Lexer, min_bp: <span class="type">u8</span>) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lhs</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        Token::<span class="title function_ invoke__">Atom</span>(it) =&gt; S::<span class="title function_ invoke__">Atom</span>(it),</span><br><span class="line">        Token::<span class="title function_ invoke__">Op</span>(op) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> ((), r_bp) = <span class="title function_ invoke__">prefix_binding_power</span>(op);</span><br><span class="line">            todo!()</span><br><span class="line">        &#125;</span><br><span class="line">        t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，我们现在有r_bp了，还没有l_bp，所以直接复制main的一段代码修改出来吧？记住，r_bp是用来递归的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">expr_bp</span>(lexer: &amp;<span class="keyword">mut</span> Lexer, min_bp: <span class="type">u8</span>) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lhs</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        Token::<span class="title function_ invoke__">Atom</span>(it) =&gt; S::<span class="title function_ invoke__">Atom</span>(it),</span><br><span class="line">        Token::<span class="title function_ invoke__">Op</span>(op) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> ((), r_bp) = <span class="title function_ invoke__">prefix_binding_power</span>(op);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">            S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[rhs])</span><br><span class="line">        &#125;</span><br><span class="line">        t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">op</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">peek</span>() &#123;</span><br><span class="line">            Token::Eof =&gt; <span class="keyword">break</span>,</span><br><span class="line">            Token::<span class="title function_ invoke__">Op</span>(op) =&gt; op,</span><br><span class="line">            t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> (l_bp, r_bp) = <span class="title function_ invoke__">infix_binding_power</span>(op);</span><br><span class="line">        <span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lexer.<span class="title function_ invoke__">next</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">        lhs = S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs, rhs]);</span><br><span class="line">    &#125;</span><br><span class="line">    lhs</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">tests</span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;--1 * 2&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(* (- (- 1)) 2)&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;--f . g&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(- (- (. f g)))&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有趣，它直接生效了，你可以想一下为什么会这样。因为操作数被绑定程度更高的运算符结合了，而这里正好有一个解析指定绑定能力更高的表达式的函数。</p><p>OK，((), u8) 可以解决前缀式，那后缀式可以用(u8, ()) 来解决吗？现在加个阶乘：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (l_bp, ()) = <span class="title function_ invoke__">postfix_binding_power</span>(op);</span><br><span class="line"><span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> (l_bp, r_bp) = <span class="title function_ invoke__">infix_binding_power</span>(op);</span><br><span class="line"><span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>e，不对，解析前缀表达式时，我们能看到后缀或中缀运算符。但是传递没有识别到的运算符时，就不能正常运行了。所以，让postfix_binding_power 返回一个指明是不是后缀的选项：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">expr_bp</span>(lexer: &amp;<span class="keyword">mut</span> Lexer, min_bp: <span class="type">u8</span>) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lhs</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        Token::<span class="title function_ invoke__">Atom</span>(it) =&gt; S::<span class="title function_ invoke__">Atom</span>(it),</span><br><span class="line">        Token::<span class="title function_ invoke__">Op</span>(op) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> ((), r_bp) = <span class="title function_ invoke__">prefix_binding_power</span>(op);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">            S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[rhs])</span><br><span class="line">        &#125;</span><br><span class="line">        t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">op</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">peek</span>() &#123;</span><br><span class="line">            Token::Eof =&gt; <span class="keyword">break</span>,</span><br><span class="line">            Token::<span class="title function_ invoke__">Op</span>(op) =&gt; op,</span><br><span class="line">            t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>((l_bp, ())) = <span class="title function_ invoke__">postfix_binding_power</span>(op) &#123;</span><br><span class="line">            <span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lexer.<span class="title function_ invoke__">next</span>();</span><br><span class="line">            lhs = S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> (l_bp, r_bp) = <span class="title function_ invoke__">infix_binding_power</span>(op);</span><br><span class="line">        <span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lexer.<span class="title function_ invoke__">next</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">        lhs = S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs, rhs]);</span><br><span class="line">    &#125;</span><br><span class="line">    lhs</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">prefix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> ((), <span class="type">u8</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; ((), <span class="number">5</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad op: &#123;:?&#125;&quot;</span>, op),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">postfix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;(<span class="type">u8</span>, ())&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;!&#x27;</span> =&gt; (<span class="number">7</span>, ()),</span><br><span class="line">        _ =&gt; <span class="keyword">return</span> <span class="literal">None</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">infix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> (<span class="type">u8</span>, <span class="type">u8</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span> | <span class="string">&#x27;/&#x27;</span> =&gt; (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">        <span class="string">&#x27;.&#x27;</span> =&gt; (<span class="number">10</span>, <span class="number">9</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad op: &#123;:?&#125;&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">tests</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;-9!&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(- (! 9))&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;f . g !&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(! (. f g))&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>太好了，这样就都通过了。</p><p>现在，我们需要添加括号。这很简单，我们本可以在一开始做，但是这里再处理更有意义。括号表达式只是一个基础表达式，它的处理方式类似于基本的数字标识符等组成的原子表达式：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lhs</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">    Token::<span class="title function_ invoke__">Atom</span>(it) =&gt; S::<span class="title function_ invoke__">Atom</span>(it),</span><br><span class="line">    Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;(&#x27;</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">lhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">assert_eq!</span>(lexer.<span class="title function_ invoke__">next</span>(), Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;)&#x27;</span>));</span><br><span class="line">        lhs</span><br><span class="line">    &#125;</span><br><span class="line">    Token::<span class="title function_ invoke__">Op</span>(op) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> ((), r_bp) = <span class="title function_ invoke__">prefix_binding_power</span>(op);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">        S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[rhs])</span><br><span class="line">    &#125;</span><br><span class="line">    t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可惜，失败了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;(((0)))&quot;</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;0&quot;</span>);</span><br></pre></td></tr></table></figure><p>报错来自于下面的循环，我们的终止条件是达到eof，而不是)，所以解决方法是在遇到未知的标识符是返回None</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">expr_bp</span>(lexer: &amp;<span class="keyword">mut</span> Lexer, min_bp: <span class="type">u8</span>) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lhs</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        Token::<span class="title function_ invoke__">Atom</span>(it) =&gt; S::<span class="title function_ invoke__">Atom</span>(it),</span><br><span class="line">        Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;(&#x27;</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">lhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">assert_eq!</span>(lexer.<span class="title function_ invoke__">next</span>(), Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;)&#x27;</span>));</span><br><span class="line">            lhs</span><br><span class="line">        &#125;</span><br><span class="line">        Token::<span class="title function_ invoke__">Op</span>(op) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> ((), r_bp) = <span class="title function_ invoke__">prefix_binding_power</span>(op);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">            S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[rhs])</span><br><span class="line">        &#125;</span><br><span class="line">        t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">op</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">peek</span>() &#123;</span><br><span class="line">            Token::Eof =&gt; <span class="keyword">break</span>,</span><br><span class="line">            Token::<span class="title function_ invoke__">Op</span>(op) =&gt; op,</span><br><span class="line">            t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>((l_bp, ())) = <span class="title function_ invoke__">postfix_binding_power</span>(op) &#123;</span><br><span class="line">            <span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lexer.<span class="title function_ invoke__">next</span>();</span><br><span class="line">            lhs = S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>((l_bp, r_bp)) = <span class="title function_ invoke__">infix_binding_power</span>(op) &#123;</span><br><span class="line">            <span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lexer.<span class="title function_ invoke__">next</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">            lhs = S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs, rhs]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lhs</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">prefix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> ((), <span class="type">u8</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; ((), <span class="number">5</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad op: &#123;:?&#125;&quot;</span>, op),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">postfix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;(<span class="type">u8</span>, ())&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;!&#x27;</span> =&gt; (<span class="number">7</span>, ()),</span><br><span class="line">        _ =&gt; <span class="keyword">return</span> <span class="literal">None</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">infix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;(<span class="type">u8</span>, <span class="type">u8</span>)&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span> | <span class="string">&#x27;/&#x27;</span> =&gt; (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">        <span class="string">&#x27;.&#x27;</span> =&gt; (<span class="number">10</span>, <span class="number">9</span>),</span><br><span class="line">        _ =&gt; <span class="keyword">return</span> <span class="literal">None</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后继续，我们来添加数组索引操作符：a[i]。它属于什么缀呢？环绕型？如果只有a[]那就是后缀，如果是[i]，则可以像括号一样。我们可以发现i并没有参与优先级的计算，所以可以这样：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">expr_bp</span>(lexer: &amp;<span class="keyword">mut</span> Lexer, min_bp: <span class="type">u8</span>) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lhs</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        Token::<span class="title function_ invoke__">Atom</span>(it) =&gt; S::<span class="title function_ invoke__">Atom</span>(it),</span><br><span class="line">        Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;(&#x27;</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">lhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">assert_eq!</span>(lexer.<span class="title function_ invoke__">next</span>(), Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;)&#x27;</span>));</span><br><span class="line">            lhs</span><br><span class="line">        &#125;</span><br><span class="line">        Token::<span class="title function_ invoke__">Op</span>(op) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> ((), r_bp) = <span class="title function_ invoke__">prefix_binding_power</span>(op);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">            S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[rhs])</span><br><span class="line">        &#125;</span><br><span class="line">        t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">op</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">peek</span>() &#123;</span><br><span class="line">            Token::Eof =&gt; <span class="keyword">break</span>,</span><br><span class="line">            Token::<span class="title function_ invoke__">Op</span>(op) =&gt; op,</span><br><span class="line">            t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>((l_bp, ())) = <span class="title function_ invoke__">postfix_binding_power</span>(op) &#123;</span><br><span class="line">            <span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lexer.<span class="title function_ invoke__">next</span>();</span><br><span class="line">            lhs = <span class="keyword">if</span> op == <span class="string">&#x27;[&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">assert_eq!</span>(lexer.<span class="title function_ invoke__">next</span>(), Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;]&#x27;</span>));</span><br><span class="line">                S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs, rhs])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs])</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>((l_bp, r_bp)) = <span class="title function_ invoke__">infix_binding_power</span>(op) &#123;</span><br><span class="line">            <span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lexer.<span class="title function_ invoke__">next</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">            lhs = S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs, rhs]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lhs</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">prefix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> ((), <span class="type">u8</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; ((), <span class="number">5</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad op: &#123;:?&#125;&quot;</span>, op),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">postfix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;(<span class="type">u8</span>, ())&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;!&#x27;</span> | <span class="string">&#x27;[&#x27;</span> =&gt; (<span class="number">7</span>, ()), </span><br><span class="line">        _ =&gt; <span class="keyword">return</span> <span class="literal">None</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">infix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;(<span class="type">u8</span>, <span class="type">u8</span>)&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span> | <span class="string">&#x27;/&#x27;</span> =&gt; (<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">        <span class="string">&#x27;.&#x27;</span> =&gt; (<span class="number">10</span>, <span class="number">9</span>),</span><br><span class="line">        _ =&gt; <span class="keyword">return</span> <span class="literal">None</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">tests</span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;x[0][1]&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;([ ([ x 0) 1)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第57行：我们这里把!和[用作相同优先级。一般来说，优先级是不能相等的，否则可能的候选项就有2个或以上。而这里，我们比较的是右绑定能力和左绑定能力，而它们都只是右结合，不会出现多种可能，所以可以这样用。</li></ul><p>最后的boss是这个，三元表达式：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c ? e1 : <span class="type">e2</span></span><br></pre></td></tr></table></figure><p>如果这样就很好看了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c <span class="selector-attr">[ e1 ]</span> e2</span><br></pre></td></tr></table></figure><p>这和a[i]差不多，所以把它当作奇怪的括号也未尝不可。既然如此，直接用我们之前解决括号的方法来解决它。那结合性和优先级呢？</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a ? b : <span class="type">c</span> ? d : <span class="type">e</span></span><br></pre></td></tr></table></figure><p>就像刚刚说的，尝试把b和d看作括号的内容，而它不参与优先级的考虑：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a <span class="string">?:</span> c <span class="string">?:</span> e</span><br></pre></td></tr></table></figure><p>最后就变成这样：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a <span class="string">?:</span> c) <span class="string">?:</span> e</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a <span class="string">?:</span> (c <span class="string">?:</span> e)</span><br></pre></td></tr></table></figure><p>哪一个更有用呢？？链像这样：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a ? b :</span><br><span class="line"><span class="type">c</span> ? d :</span><br><span class="line"><span class="type">e</span></span><br></pre></td></tr></table></figure><p>右结合的方式更有用，就优先级而言，三元运算符优先级较低。C语言中，只有=和，的优先级比它低。那么，也添加一个=吧。</p><p>现在，得到了最后的版本：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;fmt, io::BufRead&#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">S</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Atom</span>(<span class="type">char</span>),</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(<span class="type">char</span>, <span class="type">Vec</span>&lt;S&gt;),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">S</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter&lt;<span class="symbol">&#x27;_</span>&gt;) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            S::<span class="title function_ invoke__">Atom</span>(i) =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;&#123;&#125;&quot;</span>, i),</span><br><span class="line">            S::<span class="title function_ invoke__">Cons</span>(head, rest) =&gt; &#123;</span><br><span class="line">                <span class="built_in">write!</span>(f, <span class="string">&quot;(&#123;&#125;&quot;</span>, head)?;</span><br><span class="line">                <span class="keyword">for</span> <span class="variable">s</span> <span class="keyword">in</span> rest &#123;</span><br><span class="line">                    <span class="built_in">write!</span>(f, <span class="string">&quot; &#123;&#125;&quot;</span>, s)?</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">write!</span>(f, <span class="string">&quot;)&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[derive(Debug, Clone, Copy, PartialEq, Eq)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Token</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Atom</span>(<span class="type">char</span>),</span><br><span class="line">    <span class="title function_ invoke__">Op</span>(<span class="type">char</span>),</span><br><span class="line">    Eof,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Lexer</span> &#123;</span><br><span class="line">    tokens: <span class="type">Vec</span>&lt;Token&gt;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Lexer</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(input: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> Lexer &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">tokens</span> = input</span><br><span class="line">            .<span class="title function_ invoke__">chars</span>()</span><br><span class="line">            .<span class="title function_ invoke__">filter</span>(|it| !it.<span class="title function_ invoke__">is_ascii_whitespace</span>())</span><br><span class="line">            .<span class="title function_ invoke__">map</span>(|c| <span class="keyword">match</span> c &#123;</span><br><span class="line">                <span class="string">&#x27;0&#x27;</span>..=<span class="string">&#x27;9&#x27;</span></span><br><span class="line">                | <span class="string">&#x27;a&#x27;</span>..=<span class="string">&#x27;z&#x27;</span> | <span class="string">&#x27;A&#x27;</span>..=<span class="string">&#x27;Z&#x27;</span> =&gt; Token::<span class="title function_ invoke__">Atom</span>(c),</span><br><span class="line">                _ =&gt; Token::<span class="title function_ invoke__">Op</span>(c),</span><br><span class="line">            &#125;)</span><br><span class="line">            .collect::&lt;<span class="type">Vec</span>&lt;_&gt;&gt;();</span><br><span class="line">        tokens.<span class="title function_ invoke__">reverse</span>();</span><br><span class="line">        Lexer &#123; tokens &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> Token &#123;</span><br><span class="line">        <span class="keyword">self</span>.tokens.<span class="title function_ invoke__">pop</span>().<span class="title function_ invoke__">unwrap_or</span>(Token::Eof)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">peek</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> Token &#123;</span><br><span class="line">        <span class="keyword">self</span>.tokens.<span class="title function_ invoke__">last</span>().<span class="title function_ invoke__">copied</span>().<span class="title function_ invoke__">unwrap_or</span>(Token::Eof)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">expr</span>(input: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lexer</span> = Lexer::<span class="title function_ invoke__">new</span>(input);</span><br><span class="line">    <span class="title function_ invoke__">expr_bp</span>(&amp;<span class="keyword">mut</span> lexer, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">expr_bp</span>(lexer: &amp;<span class="keyword">mut</span> Lexer, min_bp: <span class="type">u8</span>) <span class="punctuation">-&gt;</span> S &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lhs</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">        Token::<span class="title function_ invoke__">Atom</span>(it) =&gt; S::<span class="title function_ invoke__">Atom</span>(it),</span><br><span class="line">        Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;(&#x27;</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">lhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">assert_eq!</span>(lexer.<span class="title function_ invoke__">next</span>(), Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;)&#x27;</span>));</span><br><span class="line">            lhs</span><br><span class="line">        &#125;</span><br><span class="line">        Token::<span class="title function_ invoke__">Op</span>(op) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> ((), r_bp) = <span class="title function_ invoke__">prefix_binding_power</span>(op);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">            S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[rhs])</span><br><span class="line">        &#125;</span><br><span class="line">        t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">op</span> = <span class="keyword">match</span> lexer.<span class="title function_ invoke__">peek</span>() &#123;</span><br><span class="line">            Token::Eof =&gt; <span class="keyword">break</span>,</span><br><span class="line">            Token::<span class="title function_ invoke__">Op</span>(op) =&gt; op,</span><br><span class="line">            t =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad token: &#123;:?&#125;&quot;</span>, t),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>((l_bp, ())) = <span class="title function_ invoke__">postfix_binding_power</span>(op) &#123;</span><br><span class="line">            <span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lexer.<span class="title function_ invoke__">next</span>();</span><br><span class="line">            lhs = <span class="keyword">if</span> op == <span class="string">&#x27;[&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">assert_eq!</span>(lexer.<span class="title function_ invoke__">next</span>(), Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;]&#x27;</span>));</span><br><span class="line">                S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs, rhs])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs])</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>((l_bp, r_bp)) = <span class="title function_ invoke__">infix_binding_power</span>(op) &#123;</span><br><span class="line">            <span class="keyword">if</span> l_bp &lt; min_bp &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lexer.<span class="title function_ invoke__">next</span>();</span><br><span class="line">            lhs = <span class="keyword">if</span> op == <span class="string">&#x27;?&#x27;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">mhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">assert_eq!</span>(lexer.<span class="title function_ invoke__">next</span>(), Token::<span class="title function_ invoke__">Op</span>(<span class="string">&#x27;:&#x27;</span>));</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">                S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs, mhs, rhs])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">rhs</span> = <span class="title function_ invoke__">expr_bp</span>(lexer, r_bp);</span><br><span class="line">                S::<span class="title function_ invoke__">Cons</span>(op, <span class="built_in">vec!</span>[lhs, rhs])</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lhs</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">prefix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> ((), <span class="type">u8</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; ((), <span class="number">9</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;bad op: &#123;:?&#125;&quot;</span>, op),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">postfix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;(<span class="type">u8</span>, ())&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;!&#x27;</span> =&gt; (<span class="number">11</span>, ()),</span><br><span class="line">        <span class="string">&#x27;[&#x27;</span> =&gt; (<span class="number">11</span>, ()),</span><br><span class="line">        _ =&gt; <span class="keyword">return</span> <span class="literal">None</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">infix_binding_power</span>(op: <span class="type">char</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;(<span class="type">u8</span>, <span class="type">u8</span>)&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">res</span> = <span class="keyword">match</span> op &#123;</span><br><span class="line">        <span class="string">&#x27;=&#x27;</span> =&gt; (<span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">        <span class="string">&#x27;?&#x27;</span> =&gt; (<span class="number">4</span>, <span class="number">3</span>),</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> | <span class="string">&#x27;-&#x27;</span> =&gt; (<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span> | <span class="string">&#x27;/&#x27;</span> =&gt; (<span class="number">7</span>, <span class="number">8</span>),</span><br><span class="line">        <span class="string">&#x27;.&#x27;</span> =&gt; (<span class="number">14</span>, <span class="number">13</span>),</span><br><span class="line">        _ =&gt; <span class="keyword">return</span> <span class="literal">None</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">tests</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;1 + 2 * 3&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(+ 1 (* 2 3))&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;a + b * c * d + e&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(+ (+ a (* (* b c) d)) e)&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;f . g . h&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(. f (. g h))&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot; 1 + 2 + f . g . h * 3 * 4&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(</span><br><span class="line">        s.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">        <span class="string">&quot;(+ (+ 1 2) (* (* (. f (. g h)) 3) 4))&quot;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;--1 * 2&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(* (- (- 1)) 2)&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;--f . g&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(- (- (. f g)))&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;-9!&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(- (! 9))&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;f . g !&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(! (. f g))&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;(((0)))&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;x[0][1]&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;([ ([ x 0) 1)&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(</span><br><span class="line">        <span class="string">&quot;a ? b :</span></span><br><span class="line"><span class="string">         c ? d</span></span><br><span class="line"><span class="string">         : e&quot;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(? a b (? c d e))&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(<span class="string">&quot;a = 0 ? b : c = d&quot;</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(s.<span class="title function_ invoke__">to_string</span>(), <span class="string">&quot;(= a (= (? 0 b c) d))&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">line</span> <span class="keyword">in</span> std::io::<span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">lines</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">line</span> = line.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">expr</span>(&amp;line);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码也可以在<a href="https://github.com/matklad/minipratt">这个仓库</a>中找到。</p><p>Eof :-)</p>]]></content>
    
    
    <summary type="html">非原创，翻译</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="数据结构与算法" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Pratt" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/Pratt/"/>
    
    
    <category term="算法" scheme="https://www.pri87.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="解析" scheme="https://www.pri87.vip/tags/%E8%A7%A3%E6%9E%90/"/>
    
    <category term="字符串" scheme="https://www.pri87.vip/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="递归" scheme="https://www.pri87.vip/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>病毒分析基本流程</title>
    <link href="https://www.pri87.vip/posts/8d9e4631.html"/>
    <id>https://www.pri87.vip/posts/8d9e4631.html</id>
    <published>2025-04-17T13:18:49.000Z</published>
    <updated>2025-05-04T15:10:53.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预分析">预分析</h2><p>这个阶段主要在于收集样本信息。</p><h3 id="静态分析">静态分析</h3><p>分析样本是由什么语言编译的，分析出对应的调用约定，有无现成的符号表，签名文件等，为后续分析减少困难。</p><p>如果有壳，要知道是什么壳，一般病毒的壳都是强壳，我还不会分析。</p><p>分析导入表，如果壳隐藏了，只有后续看。大致看出有没有干文件操作，有没有干网络操作，有没有干驻留操作（注册表和服务）。判断出病毒类型。之后在对应的逻辑中仔细分析。</p><h3 id="动态分析">动态分析</h3><p>在线沙箱中检测/虚拟机中检测。沙箱可以直接分析，如果是自己的虚拟机，则需要打开一个可以检测进程的(ARK)工具，获取样本的所有操作，尤其是：是否有文件创建和写入？网络连接的ip是多少？网络中读取的内容是什么？注册了哪些服务和注册表？Hook了哪些模块，用了哪些API等等。</p><h2 id="分析">分析</h2><p>打开程序，根据预分析的内容定位关键位置然后具体分析。</p><p>跟CTF的逆向题差不多。</p>]]></content>
    
    
    <summary type="html">基本的病毒分析流程总结</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ida基本使用操作</title>
    <link href="https://www.pri87.vip/posts/dc1142ef.html"/>
    <id>https://www.pri87.vip/posts/dc1142ef.html</id>
    <published>2025-04-12T07:07:46.000Z</published>
    <updated>2025-05-01T05:50:32.981Z</updated>
    
    <content type="html"><![CDATA[<ul><li></li></ul><h2 id="自定义调用约定">自定义调用约定</h2><p>ida支持用户显式指定参数和返回值所使用的寄存器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall func@&lt;ebx&gt;(<span class="type">int</span> x, <span class="type">int</span> y@&lt;esi&gt;);</span><br></pre></td></tr></table></figure><p>这表明x用堆栈传递，y用esi传递，返回值用ebx传递</p><p>返回值必须位于寄存器中<br>如果返回值类型是void，不能指定返回值的位置<br>如果参数的位置没有指定，假设参数通过堆栈传递<br>可以允许嵌套声明，如: int **__usercall func16@&lt;eax&gt;(int *(__usercall *x)@&lt;ebx&gt; (int, long@&lt;ecx&gt;, int)@&lt;esi&gt;);<br>用于指定位置名的寄存器必须在当前处理器中有效<br>寄存器对可以像这样 &lt;edx:eax&gt; 用冒号的形式指定</p><p>__usercall 调用者清理堆栈</p><p>__userpurge 被调用者清理堆栈</p><p>__spoils指定函数破坏的寄存器列表，比如int __spoils&lt;eax, bh&gt; func(int x);</p><h2 id="汇编下寄存器命名指定范围">汇编下寄存器命名指定范围</h2><p>很多时候一个寄存器在同个函数中作用不同，按n后，可以在start address和end addres中指定寄存器在某个范围中的名字从而更方便地重命名</p>]]></content>
    
    
    <summary type="html">本篇介绍部分基本ida使用操作</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>自动化代码混淆</title>
    <link href="https://www.pri87.vip/posts/e00631f.html"/>
    <id>https://www.pri87.vip/posts/e00631f.html</id>
    <published>2025-04-08T01:34:00.000Z</published>
    <updated>2025-05-01T05:50:32.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近在写shellcode。发现shellcode生成的代码十分简单，也没有绝对跳转或者之类的需要重定位的东西，所以我感觉用这个来练手自动化加花还是很不错的</p><h2 id="使用的库">使用的库</h2><p>Zydis和keystone</p><p>前者作为反汇编工具，后者作为从字符串生成机器码的工具。</p><h2 id="原理">原理</h2><p>通过Zydis对代码进行解析，装入一个list中，然后执行混淆，这里我干了两个事：</p><ol><li>判断是否有直接字符串数据压栈，有的话加密原内容，然后解密再压栈</li><li>打乱整个代码结构</li></ol><p>1的话，通过Zydis生成字符串来检测，keystone生成机器码然后创建对应代码插入/修改list即可</p><p>2的话，通过分块每个块最后加jmp然后交换块的位置即可，但是好像cpp原生的list交换会导致一些bug，所以我准备之后重新写一下</p><h2 id="实现">实现</h2><p>见github</p>]]></content>
    
    
    <summary type="html">本篇是进行代码混淆的练习</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向，自动化逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%80%86%E5%90%91/"/>
    
    
    <category term="代码混淆" scheme="https://www.pri87.vip/tags/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
    
  </entry>
  
  <entry>
    <title>X86-64汇编机器码格式</title>
    <link href="https://www.pri87.vip/posts/47eb1508.html"/>
    <id>https://www.pri87.vip/posts/47eb1508.html</id>
    <published>2025-03-31T07:29:42.000Z</published>
    <updated>2025-04-01T01:14:01.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本结构">基本结构</h2><p><img src="https://s2.loli.net/2025/03/31/vEYwI5kGshboazd.png" alt="image-20250331153157959"></p><p><img src="https://s2.loli.net/2025/03/31/r9fHQj3BgMu1mDL.png" alt="image-20250331155123077"></p><p>该图说明：主操作码一定有，由于其它内容不一定在一条指令中，所以指令长度不固定</p><h3 id="符号说明">符号说明</h3><p>G：寄存器<br>E：寄存器/内存<br>b：单字节<br>v：根据操作系统判断位数，一般数默认32位，地址默认64位</p><p>MOV Gv Ev：意思是把一个内存或寄存器的值放到一个寄存器中，大小根据操作系统决定</p><p>现在依次介绍这几个</p><h2 id="指令前缀（Instruction-Prefixes）">指令前缀（Instruction Prefixes）</h2><p>前缀分为 4 类，使用时，不区分前后顺序，且每组最多出现一个：</p><p>1.锁定和重复前缀</p><table><thead><tr><th>前缀</th><th>效果</th></tr></thead><tbody><tr><td>F0</td><td>使操作变为原子操作</td></tr><tr><td>F2</td><td>REPNE/REPNZ，重复前缀，用于串和 IO</td></tr><tr><td>F3</td><td>REP 或 REPE/REPZ，用于串和 IO</td></tr></tbody></table><p>2.段重载</p><table><thead><tr><th>前缀</th><th>效果</th></tr></thead><tbody><tr><td>2E</td><td>CS 段重载</td></tr><tr><td>36</td><td>SS 段重载</td></tr><tr><td>3E</td><td>DS 段重载</td></tr><tr><td>26</td><td>ES 段重载</td></tr><tr><td>64</td><td>FS 段重载</td></tr><tr><td>65</td><td>GS 段重载</td></tr><tr><td>2E</td><td>分支一般不跳转，用于提示 CPU 进行预测</td></tr><tr><td>3E</td><td>分支一般跳转，用于提示 CPU 进行预测</td></tr></tbody></table><p>3.操作数大小重载</p><table><thead><tr><th>前缀</th><th>效果</th></tr></thead><tbody><tr><td>66</td><td>将默认操作数大小从 32 位转为 16 位</td></tr></tbody></table><p>4.操作地址大小重载</p><table><thead><tr><th>前缀</th><th>效果</th></tr></thead><tbody><tr><td>67</td><td>将默认的 64 位地址大小转为 32 位</td></tr></tbody></table><h2 id="REX-前缀">REX 前缀</h2><p>REX 用来扩展指令从 32 位到 64 位，这一部分的内容需要先看后面的几个部分才能看懂</p><p>占一字节，可以没有</p><p><img src="https://s2.loli.net/2025/03/31/uBJv1dEkf8NXGpD.png" alt="image-20250331160405462"></p><p>将对应域置 1 就可以使目标扩展</p><p>其中经常使用的就是 48，让操作数变为 64 位大小</p><h2 id="操作码">操作码</h2><p>一般来说，主操作码长度为 1 到 3 字节，ModR/M 可能编码附加的 3 位操作码</p><p>双字节：0F+第二个操作码字节 或 一个前缀(66H, F2H, 或 F3H)+0F+第二个操作码字节<br>三字节：0F+后两个操作码字节 或 一个前缀(66H, F2H, 或 F3H)+0F+后两个操作码字节</p><p>部分内容需要先看后面的</p><p>下面为 1 到 3 字节指令的查表</p><p><img src="https://s2.loli.net/2025/03/31/JqnVpF7uomvaj4L.png" alt="image-20250331161314311"></p><p><img src="https://s2.loli.net/2025/03/31/LFVOx9YB4whqlIG.png" alt="image-20250331161329868"></p><p><img src="https://s2.loli.net/2025/03/31/y35PrtfsOdVNcZi.png" alt="image-20250331161339920"></p><p><img src="https://s2.loli.net/2025/03/31/MRiwKW1ZmSj83GQ.png" alt="image-20250331161350193"></p><p><img src="https://s2.loli.net/2025/03/31/hTMljvS2V6nPRXW.png" alt="image-20250331161359418"></p><p><img src="https://s2.loli.net/2025/03/31/rogQINylSKYHLJ3.png" alt="image-20250331161408747"></p><p><img src="https://s2.loli.net/2025/03/31/Ax95rqsP4VI3fNc.png" alt="image-20250331161419001"></p><p><img src="https://s2.loli.net/2025/03/31/LhElcWowv7MtYCi.png" alt="image-20250331161429738"></p><p><img src="https://s2.loli.net/2025/03/31/dDWFZ32bXHqLgQr.png" alt="image-20250331161439214"></p><p><img src="https://s2.loli.net/2025/03/31/sOSoX6rl5MiTzPf.png" alt="image-20250331161448469"></p><blockquote><p>以上截取自 IA32 手册 2024-12 版的 2929 页至 2938 页</p></blockquote><p>除了上面的查表方式，x86-64 指令还有另一种方式：通过组来查询，这种方式使用了一张新表，叫做单双字节操作码的操作码扩展</p><p>先附表</p><p><img src="https://s2.loli.net/2025/03/31/v3guPoV9xBY4HcI.png" alt="image-20250331163515951"></p><p><img src="https://s2.loli.net/2025/03/31/PflMsu9DHAa65Sg.png" alt="image-20250331163526702"></p><p><img src="https://s2.loli.net/2025/03/31/AWFud91GmSMNsYQ.png" alt="image-20250331165953065"></p><p><img src="https://s2.loli.net/2025/03/31/QaphGj7wUt8bKYs.png" alt="image-20250331170007852"></p><p><img src="https://s2.loli.net/2025/03/31/qKaURr7v9ew54cm.png" alt="image-20250331170031403"></p><p><img src="https://s2.loli.net/2025/03/31/ijDMHZgbCTVLUoQ.png" alt="image-20250331170044132"></p><p><img src="https://s2.loli.net/2025/03/31/glzF7n1DKhGYrE5.png" alt="image-20250331170056390"></p><p><img src="https://s2.loli.net/2025/03/31/tmDh75EdeKa93TC.png" alt="image-20250331170105301"></p><p><img src="https://s2.loli.net/2025/03/31/8ygvpfUW5sFHcMC.png" alt="image-20250331170116327"></p><p><img src="https://s2.loli.net/2025/03/31/9lIOjfepRrqGBLm.png" alt="image-20250331170126623"></p><p><img src="https://s2.loli.net/2025/03/31/2vhJ5iNDqRBG8bK.png" alt="image-20250331170135362"></p><p><img src="https://s2.loli.net/2025/03/31/STFlRIhLdAKUjnQ.png" alt="image-20250331170145112"></p><p><img src="https://s2.loli.net/2025/03/31/Mb8p9NrtxkF6imv.png" alt="image-20250331170154414"></p><p><img src="https://s2.loli.net/2025/03/31/2xaMiUDeQIPEln6.png" alt="image-20250331170205007"></p><p><img src="https://s2.loli.net/2025/03/31/2ICDLpAyMuXohHZ.png" alt="image-20250331170213809"></p><p><img src="https://s2.loli.net/2025/03/31/zChIJxtd6SDjqVQ.png" alt="image-20250331170226577"></p><p><img src="https://s2.loli.net/2025/03/31/ws6iqjJzf127Ktm.png" alt="image-20250331170241767"></p><p><img src="https://s2.loli.net/2025/03/31/v8ltPzSd52j1CxF.png" alt="image-20250331170254243"></p><blockquote><p>这里是 2940 到 2950</p></blockquote><p>考虑 80 C0 05</p><p>80 在表 A-6 中是 Group 1，然后看 ModR/M 字段的 5，4，3 位<br>C0:11000000，5，4，3 位为 000，即 0，查纵列得 ADD，根据之后的内容可以知道 ModR/M 指定了对应的内存和寄存器，所以得到 add al,5，这和第一种直接查表得到的 0405 的指令相同</p><h2 id="ModR-M">ModR/M</h2><p>如果一个操作码涉及内存，后面一般就会有一个寻址格式说明字节即 ModR/M，而如果 ModR/M 中提到了需要内存寻址，那么就需要 SIB 字节去进一步解释</p><p>ModR/M和SIB各涉及三个域：<br><img src="https://s2.loli.net/2025/03/31/RadXi6T4VHcKSOJ.png" alt="image-20250331171513102"></p><p><img src="https://s2.loli.net/2025/03/31/ZY7RDy4MJorbdUv.png" alt="image-20250331172923245"></p><h3 id="Mod寻址模式">Mod寻址模式</h3><p>指明操作码中的E是寄存器还是内存，11是内存，其它都是寄存器</p><table><thead><tr><th>Mod值</th><th>描述</th><th>偏移量</th></tr></thead><tbody><tr><td>00</td><td>内存，无偏移量(除非 R/M=101)</td><td>无或32</td></tr><tr><td>01</td><td>内存，有8位偏移</td><td>[base+8位偏移]</td></tr><tr><td>10</td><td>内存，有32位偏移</td><td>[base+32 位偏移]</td></tr><tr><td>11</td><td>寄存器操作数</td><td>寄存器</td></tr></tbody></table><p>前三个为内存，后一个为数</p><h3 id="Reg-Opcode寄存器或操作码扩展">Reg/Opcode寄存器或操作码扩展</h3><p>指定使用的reg或opcode扩展：</p><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">32 位寄存器</th><th style="text-align:left">16 位寄存器</th><th style="text-align:left">8 位寄存器</th><th style="text-align:left">用途 (操作码扩展)</th></tr></thead><tbody><tr><td style="text-align:left">000</td><td style="text-align:left">EAX</td><td style="text-align:left">AX</td><td style="text-align:left">AL</td><td style="text-align:left">ADD</td></tr><tr><td style="text-align:left">001</td><td style="text-align:left">ECX</td><td style="text-align:left">CX</td><td style="text-align:left">CL</td><td style="text-align:left">OR</td></tr><tr><td style="text-align:left">010</td><td style="text-align:left">EDX</td><td style="text-align:left">DX</td><td style="text-align:left">DL</td><td style="text-align:left">ADC</td></tr><tr><td style="text-align:left">011</td><td style="text-align:left">EBX</td><td style="text-align:left">BX</td><td style="text-align:left">BL</td><td style="text-align:left">SBB</td></tr><tr><td style="text-align:left">100</td><td style="text-align:left">ESP</td><td style="text-align:left">SP</td><td style="text-align:left">AH</td><td style="text-align:left">AND</td></tr><tr><td style="text-align:left">101</td><td style="text-align:left">EBP</td><td style="text-align:left">BP</td><td style="text-align:left">CH</td><td style="text-align:left">SUB</td></tr><tr><td style="text-align:left">110</td><td style="text-align:left">ESI</td><td style="text-align:left">SI</td><td style="text-align:left">DH</td><td style="text-align:left">XOR</td></tr><tr><td style="text-align:left">111</td><td style="text-align:left">EDI</td><td style="text-align:left">DI</td><td style="text-align:left">BH</td><td style="text-align:left">CMP</td></tr></tbody></table><h3 id="R-M寄存器或内存">R/M寄存器或内存</h3><table><thead><tr><th style="text-align:left">R/M 值</th><th style="text-align:left">Mod = 11（寄存器）</th><th style="text-align:left">Mod ≠ 11（内存基址/索引）</th></tr></thead><tbody><tr><td style="text-align:left">000</td><td style="text-align:left">EAX</td><td style="text-align:left">[RAX]</td></tr><tr><td style="text-align:left">001</td><td style="text-align:left">ECX</td><td style="text-align:left">[RCX]</td></tr><tr><td style="text-align:left">010</td><td style="text-align:left">EDX</td><td style="text-align:left">[RDX]</td></tr><tr><td style="text-align:left">011</td><td style="text-align:left">EBX</td><td style="text-align:left">[RBX]</td></tr><tr><td style="text-align:left">100</td><td style="text-align:left">ESP</td><td style="text-align:left">[SIB]（需要 SIB 字节）</td></tr><tr><td style="text-align:left">101</td><td style="text-align:left">EBP</td><td style="text-align:left">[RBP] 或无偏移/disp32</td></tr><tr><td style="text-align:left">110</td><td style="text-align:left">ESI</td><td style="text-align:left">[RSI]</td></tr><tr><td style="text-align:left">111</td><td style="text-align:left">EDI</td><td style="text-align:left">[RDI]</td></tr></tbody></table><p>内存索引的标准格式：<code>base+index*scale+disp</code></p><h2 id="SIB">SIB</h2><p>SIB用来确定具体的地址格式<br>如果ModR/M中Mod不为11，且R/M的值为100，则后一个字节为SIB</p><p>ModR/M和SIB各涉及三个域：<br><img src="https://s2.loli.net/2025/03/31/RadXi6T4VHcKSOJ.png" alt="image-20250331171513102"></p><p><img src="https://s2.loli.net/2025/03/31/bTHXZd9BnIeYQMw.png" alt="image-20250331190129120"></p><h3 id="Scale比例因子">Scale比例因子</h3><p>决定索引寄存器值的倍数</p><table><thead><tr><th>值</th><th>比例因子 (Scale)</th></tr></thead><tbody><tr><td>00</td><td>1</td></tr><tr><td>01</td><td>2</td></tr><tr><td>10</td><td>4</td></tr><tr><td>11</td><td>8</td></tr></tbody></table><h3 id="Index索引寄存器">Index索引寄存器</h3><table><thead><tr><th>值</th><th>寄存器 (64 位模式)</th><th>寄存器 (32 位模式)</th></tr></thead><tbody><tr><td>000</td><td>RAX</td><td>EAX</td></tr><tr><td>001</td><td>RCX</td><td>ECX</td></tr><tr><td>010</td><td>RDX</td><td>EDX</td></tr><tr><td>011</td><td>RBX</td><td>EBX</td></tr><tr><td>100</td><td>无索引寄存器</td><td>无索引寄存器</td></tr><tr><td>101</td><td>RBP</td><td>EBP</td></tr><tr><td>110</td><td>RSI</td><td>ESI</td></tr><tr><td>111</td><td>RDI</td><td>EDI</td></tr></tbody></table><h3 id="Base基址寄存器">Base基址寄存器</h3><table><thead><tr><th>值</th><th>寄存器 (64 位模式)</th><th>寄存器 (32 位模式)</th></tr></thead><tbody><tr><td>000</td><td>RAX</td><td>EAX</td></tr><tr><td>001</td><td>RCX</td><td>ECX</td></tr><tr><td>010</td><td>RDX</td><td>EDX</td></tr><tr><td>011</td><td>RBX</td><td>EBX</td></tr><tr><td>100</td><td>RSP（需 SIB 扩展）</td><td>ESP（需 SIB 扩展）</td></tr><tr><td>101</td><td>RBP 或 disp32(Mod=00)</td><td>EBP 或 disp32(Mod=00)</td></tr><tr><td>110</td><td>RSI</td><td>ESI</td></tr><tr><td>111</td><td>RDI</td><td>EDI</td></tr></tbody></table><h2 id="练习">练习</h2><p>8B 41 10</p><p>8B对应MOV Gv Ev</p><p>Gv说明目标操作数是寄存器，Ev表示源操作数为寄存器或地址<br>41是ModR/M<br>01 000 001<br>01说明这个指令的地址Ev为内存地址且有8bit偏移，000说明Gv为AX类，001说明目标操作数为CX类<br>由于没有SIB，10为立即数</p><p>所以指令为：MOV EAX, [RCX+0x10]</p><hr><p>04 FF</p><p>04对应ADD AL,Lb</p><p>已经指定寄存器，后面直接跟立即数，Lb表明是一个byte，所以是ADD AL ,0xff</p><hr><p>67 FF 34 88</p><p>67为指令前缀，表明把之后的地址值转为32位<br>FF表明要去Grp $5^{1A}$<br>34为ModR/M：00 110 100得到指令是PUSH Ev<br>00表明为使用地址无偏移，100表示根据SIB确定地址的值</p><p>SIB：10 001 000</p><p>10表明比例因子为4，001表明索引寄存器为RCX，000表明基址寄存器为RAX</p><p>根据指令前缀，将地址相关寄存器大小转为32位：push qword ptr [eax+ecx*4]</p>]]></content>
    
    
    <summary type="html">本篇介绍x86-64下指令结构</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="基础" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="机器码" scheme="https://www.pri87.vip/tags/%E6%9C%BA%E5%99%A8%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Zydis反编译库编译及使用方式</title>
    <link href="https://www.pri87.vip/posts/cbdd2395.html"/>
    <id>https://www.pri87.vip/posts/cbdd2395.html</id>
    <published>2025-03-28T13:27:56.000Z</published>
    <updated>2025-03-29T03:28:09.613Z</updated>
    
    <content type="html"><![CDATA[<p>Zydis是一个反汇编库，可以解析机器指令将其转为汇编代码，下面是使用方法</p><h2 id="下载">下载</h2><p><a href="https://github.com/zyantific/zydis">zyantific/zydis: Fast and lightweight x86/x86-64 disassembler and code generation library</a></p><p>可以直接下载releases也可以直接clone</p><h2 id="编译">编译</h2><p>标准的编译方法：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone </span>--recursive <span class="string">&#x27;https://github.com/zyantific/zydis.git&#x27;</span></span><br><span class="line">cd zydis</span><br><span class="line">cmake -<span class="keyword">B </span><span class="keyword">build</span></span><br><span class="line"><span class="keyword"></span>cmake --<span class="keyword">build </span><span class="keyword">build </span>-<span class="keyword">j4</span></span><br></pre></td></tr></table></figure><h2 id="配置">配置</h2><p>如果使用的是msvc，可以直接进入msvc目录使用vs编译，配置为release MT，直接生成。</p><p>如果是上面的方法，输出文件在build文件的debug目录下和Zycore\debug目录，如果是下面的方法，输出文件在bin\releaseX64下</p><p>取得生成的Zydis.lib和Zycore.lib，放在项目目录的lib文件夹下(新建)，然后在最外面的zydis目录下找到include复制到项目文件夹，在dependencies\zycore下找到include文件夹复制到项目文件夹</p><p>在项目属性中：</p><ul><li>C/C++<ul><li>常规：附加包含目录添加：$(ProjectDir)include</li><li>预处理器：预处理器定义添加：ZYDIS_STATIC_DEFINE</li></ul></li><li>链接器<ul><li>常规：附加库目录包含添加：$(ProjectDir)lib</li><li>输入：附加依赖项添加：Zycore.lib;Zydis.lib</li></ul></li></ul><h2 id="写代码">写代码</h2><p>引用头文件：<code>#include &lt;Zydis/Zydis.h&gt;</code></p><h2 id="解析器">解析器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ZydisDecoderDecodeFull</span>(&amp;decoder, buffer.<span class="built_in">data</span>() + offset, length - offset,&amp;instruction, operands)</span><br></pre></td></tr></table></figure><p>decoder是ZydisDecoder类型<br>instruction是ZydisDecodedInstruction保存基本指令数据<br>operands是ZydisDecodedOperand类型数组，保存一条指令的操作数</p><p>data是存放机器码的缓冲区</p><p>每次执行一次这个指令，就会对instruction和operands赋值，表示一条指令的解析</p><ul><li>instruction.mnemonic   助记符</li><li>instruction.length    指令总长度</li><li>instruction.opcode    机器码</li><li>instruction.operand_count_visible    显式操作数数量</li><li>operand.type    这个操作数的类型<ul><li>立即数(ZYDIS_OPERAND_TYPE_IMMEDIATE):<br>operand.imm.value数值</li><li>寄存器(ZYDIS_OPERAND_TYPE_REGISTER):<br>operand.reg.value寄存器名称</li><li>内存地址(ZYDIS_OPERAND_TYPE_MEMORY):<br>operand.mem.base表示内存的基址寄存器<br>operand.mem.index表示索引寄存器<br>operand.mem.disp地址偏移值</li></ul></li></ul><p>使用模板可以参考example和下面这个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Zydis/Zydis.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">readFileToBuffer</span><span class="params">(<span class="type">const</span> std::string&amp; filepath, std::vector&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt;&amp; buffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">file</span><span class="params">(filepath, std::ios::binary | std::ios::ate)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!file.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Failed to open file: &quot;</span> &lt;&lt; filepath &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::streamsize fSize = file.<span class="built_in">tellg</span>();</span><br><span class="line">file.<span class="built_in">seekg</span>(<span class="number">0</span>, std::ios::beg);</span><br><span class="line">buffer.<span class="built_in">resize</span>(fSize);</span><br><span class="line"><span class="keyword">if</span> (!file.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(buffer.<span class="built_in">data</span>()), fSize))</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Failed to read file: &quot;</span> &lt;&lt; filepath &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printInstructionStructure</span><span class="params">(<span class="type">const</span> ZydisDecodedInstruction&amp; instruction, <span class="type">const</span> ZydisDecodedOperand operands[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Instruction Structure:\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Mnemonic: &quot;</span> &lt;&lt; <span class="built_in">ZydisMnemonicGetString</span>(instruction.mnemonic) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Length: &quot;</span> &lt;&lt; <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(instruction.length) &lt;&lt; <span class="string">&quot; bytes\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Opcode: 0x&quot;</span> &lt;&lt; std::hex &lt;&lt; <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(instruction.opcode) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Operand Count Visible: &quot;</span> &lt;&lt; <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(instruction.operand_count_visible) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ZyanU8 i = <span class="number">0</span>; i &lt; instruction.operand_count_visible; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> ZydisDecodedOperand&amp; operand = operands[i];</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Operand &quot;</span> &lt;&lt; <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(i) &lt;&lt; <span class="string">&quot;: \n&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (operand.type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> ZYDIS_OPERAND_TYPE_REGISTER:</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;  Type: Register\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;  Register: &quot;</span> &lt;&lt; <span class="built_in">ZydisRegisterGetString</span>(operand.reg.value) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ZYDIS_OPERAND_TYPE_IMMEDIATE:</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;  Type: Immediate\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;  Value: 0x&quot;</span> &lt;&lt; std::hex &lt;&lt; operand.imm.value.u &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ZYDIS_OPERAND_TYPE_MEMORY:</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;  Type: Memory\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;  Base: &quot;</span> &lt;&lt; <span class="built_in">ZydisRegisterGetString</span>(operand.mem.base) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;  Index: &quot;</span> &lt;&lt; <span class="built_in">ZydisRegisterGetString</span>(operand.mem.index) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;  Displacement: 0x&quot;</span> &lt;&lt; std::hex &lt;&lt; operand.mem.disp.value &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; (operand.mem.disp.value &gt;= <span class="number">0</span> ? operand.mem.disp.value : -operand.mem.disp.value) &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;  Type: Unknown\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;-----------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ZydisDecoder decoder;</span><br><span class="line"><span class="built_in">ZydisDecoderInit</span>(&amp;decoder, ZYDIS_MACHINE_MODE_LONG_64, ZYDIS_STACK_WIDTH_64);</span><br><span class="line"></span><br><span class="line">ZydisFormatter formatter;</span><br><span class="line"><span class="built_in">ZydisFormatterInit</span>(&amp;formatter, ZYDIS_FORMATTER_STYLE_INTEL);</span><br><span class="line"></span><br><span class="line">std::string filePath = <span class="string">&quot;shellcode.bin&quot;</span>;</span><br><span class="line">std::vector&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt; buffer;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">readFileToBuffer</span>(filePath, buffer))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZyanU64 runtime_address = <span class="number">0</span>;</span><br><span class="line">ZyanUSize offset = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> ZyanUSize length = buffer.<span class="built_in">size</span>();</span><br><span class="line">ZydisDecodedInstruction instruction;</span><br><span class="line">ZydisDecodedOperand operands[ZYDIS_MAX_OPERAND_COUNT];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">ZYAN_SUCCESS</span>(<span class="built_in">ZydisDecoderDecodeFull</span>(&amp;decoder, buffer.<span class="built_in">data</span>() + offset, length - offset,</span><br><span class="line">&amp;instruction, operands)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%016&quot;</span> PRIX64 <span class="string">&quot;  &quot;</span>, runtime_address);</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">ZydisFormatterFormatInstruction</span>(&amp;formatter, &amp;instruction, operands,</span><br><span class="line">instruction.operand_count_visible, tmp, <span class="built_in">sizeof</span>(tmp),</span><br><span class="line">runtime_address, ZYAN_NULL);</span><br><span class="line"><span class="built_in">puts</span>(tmp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printInstructionStructure</span>(instruction, operands);</span><br><span class="line"></span><br><span class="line">offset += instruction.length;</span><br><span class="line">runtime_address += instruction.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Zydis是一个反汇编库，可以解析机器指令将其转为汇编代码，下面是使用方法&lt;/p&gt;
&lt;h2 id=&quot;下载&quot;&gt;下载&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zyantific/zydis&quot;&gt;zyantific/zydis: Fast and l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GO逆向入门</title>
    <link href="https://www.pri87.vip/posts/356e98d9.html"/>
    <id>https://www.pri87.vip/posts/356e98d9.html</id>
    <published>2025-03-23T14:40:56.000Z</published>
    <updated>2025-03-29T03:28:09.612Z</updated>
    
    <content type="html"><![CDATA[<h1>Golang</h1><p>golang 是谷歌开发的一个静态语言，现在有很多恶意程序使用Go语言开发</p><p><a href="https://www.anquanke.com/post/id/214940">Go二进制文件逆向分析从基础到进阶——综述-安全KER - 安全资讯平台</a></p><h2 id="Go语言基本结构">Go语言基本结构</h2><p>Go语言中有些信息会一直保留在程序中，用于实现单文件直接运行而不需要环境，同时由于反射和stack trace，所以保留的信息非常多，如果找到了这些信息，就可以直接恢复符号表</p><p><a href="https://github.com/0xjiayu/go_parser/blob/master/README_cn.md">go_parser/README_cn.md at master · 0xjiayu/go_parser</a></p><p>用这里的介绍来说，基本信息如下：</p><ul><li>Meta information<ul><li>Go version</li><li>Build ID</li><li>GOROOT</li></ul></li><li>strings and string pointer（字符串指针）</li><li>runtime symbol infomation(pclntab)<ul><li>函数名称表</li><li>源代码路径表</li></ul></li><li>runtime type infomation</li><li>interface table<ul><li>接口类型</li><li>真实类型与绑定方法</li></ul></li></ul><h3 id="pclntab">pclntab</h3><p>Program Counter Line Table程序计数器行数映射表/运行时符号表。程序出错时，runtime将从中得到对应的包名，文件名，方法或函数以及出错的行，最后才能输出出来，所以这里有很多有用的信息</p><p>这里最重要的函数表和函数名称表，它们的偏移都是相对于pclntab进行的</p><h2 id="恢复符号表">恢复符号表</h2><p><a href="https://github.com/mandiant/GoReSym">mandiant/GoReSym: Go symbol recovery tool</a></p><p><a href="https://cloud.google.com/blog/topics/threat-intelligence/golang-internals-symbol-recovery/">Ready， Set， Go — Golang 内部原理和符号恢复 |Google Cloud 博客</a></p><p><a href="https://github.com/0xjiayu/go_parser">0xjiayu/go_parser: Yet Another Golang binary parser for IDAPro</a></p><p>一般来说，这几个就够了，但是如果加了混淆，把符号表和符号名称表的内容(偏移)删了，那就得手动还原了，就很麻烦，所以这种还是用bindiff和sig文件吧</p><h2 id="调用约定">调用约定</h2><p><a href="QAQ">施工中</a></p><h2 id="技巧">技巧</h2><p>对于这种根本看不懂的代码，对函数测试还是用黑盒吧，一般来说一个用户函数后面就有一个库调用函数，用汇编流程图反而好看一点</p>]]></content>
    
    
    <summary type="html">Go的笔记</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="语言" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Go" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E8%AF%AD%E8%A8%80/Go/"/>
    
    
    <category term="Go" scheme="https://www.pri87.vip/tags/Go/"/>
    
  </entry>
  
</feed>
