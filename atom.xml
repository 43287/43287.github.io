<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pRism</title>
  
  
  <link href="https://www.pri87.vip/atom.xml" rel="self"/>
  
  <link href="https://www.pri87.vip/"/>
  <updated>2024-11-27T17:16:58.128Z</updated>
  <id>https://www.pri87.vip/</id>
  
  <author>
    <name>pRism</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《逆核》08-DLL卸载</title>
    <link href="https://www.pri87.vip/posts/382e9cc4.html"/>
    <id>https://www.pri87.vip/posts/382e9cc4.html</id>
    <published>2024-11-27T03:26:46.000Z</published>
    <updated>2024-11-27T17:16:58.128Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇拖了比较久，因为之前不理解进程的权限令牌的作用，看逆向工程核心原理的时候发现注入不需要权限但是卸载却需要，书里面还没详细说，就一直搁置了，前几周学了APC注入，才知道进程权限完全就是试的，如果遇到0x5访问权限冲突，那就提升权限就好了。</p><h2 id="DLL卸载"><a href="#DLL卸载" class="headerlink" title="DLL卸载"></a>DLL卸载</h2><p>DLL之前注入后，再次注入就不会触发attch效果了，如果不想重开进程就需要先卸载之后再注入。另一方面，如果想要让DLL执行完之后就立即卸载（即时效果）也许要卸载它。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>找到进程-&gt;找进程模块-&gt;匹配相同的模块名-&gt;执行FreeLibrary</p><p>看书的时候发现FreeLibrary没有W且需要传入对应的句柄而不是指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">Injector::isLoaded</span><span class="params">(DWORD pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hModule = <span class="literal">nullptr</span>;</span><br><span class="line">HANDLE hSnapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPMODULE, pid);</span><br><span class="line"><span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE || hSnapshot == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;创建快照失败&quot;</span>);</span><br><span class="line">MODULEENTRY32 me;</span><br><span class="line">me.dwSize = <span class="built_in">sizeof</span>(MODULEENTRY32);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Module32First</span>(hSnapshot, &amp;me)) &#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!_wcsicmp(<span class="built_in">PathFindFileNameW</span>(DLLpath), me.szModule) &amp;&amp;</span><br><span class="line">!_wcsicmp(DLLpath, me.szExePath)) &#123;</span><br><span class="line">hModule = me.hModule;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Module32Next</span>(hSnapshot, &amp;me));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hSnapshot);</span><br><span class="line"><span class="keyword">return</span> hModule;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Injector::eject</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> pfreelibrary = (LPTHREAD_START_ROUTINE)<span class="built_in">ModuleFuncLoader</span>(<span class="string">&quot;kernel32&quot;</span>, <span class="string">&quot;FreeLibrary&quot;</span>).<span class="built_in">func</span>();</span><br><span class="line">std::string findMode;</span><br><span class="line">std::cin &gt;&gt; findMode;</span><br><span class="line"><span class="built_in">toLowerCase</span>(findMode);</span><br><span class="line">HANDLE hProcess = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (findMode == <span class="string">&quot;pid&quot;</span>) &#123;</span><br><span class="line">DWORD pid;</span><br><span class="line">std::cin &gt;&gt; pid;</span><br><span class="line">hProcess = <span class="built_in">findtargetHandle</span>(pid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (findMode == <span class="string">&quot;name&quot;</span>) &#123;</span><br><span class="line">std::wstring name;</span><br><span class="line">std::wcin &gt;&gt; name;</span><br><span class="line">LPCWSTR lname = name.<span class="built_in">c_str</span>();</span><br><span class="line">hProcess = <span class="built_in">findtargetHandle</span>(lname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!hProcess)</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;模式匹配失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">DWORD pid = <span class="built_in">GetProcessId</span>(hProcess);</span><br><span class="line">HANDLE hModule = <span class="built_in">isLoaded</span>(pid);</span><br><span class="line"><span class="keyword">if</span> (hModule == INVALID_HANDLE_VALUE || hModule == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;目标进程 &quot;</span> &lt;&lt; pid &lt;&lt; <span class="string">&quot; 没有该模块&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pfreelibrary, hModule, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;远程线程创建失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hModule);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">拖了好久</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="技能" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/"/>
    
    <category term="DLL注入" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/DLL%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="windows" scheme="https://www.pri87.vip/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>CPP-lambda表达式</title>
    <link href="https://www.pri87.vip/posts/10c328b5.html"/>
    <id>https://www.pri87.vip/posts/10c328b5.html</id>
    <published>2024-11-25T07:06:08.000Z</published>
    <updated>2024-11-25T16:54:06.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><p>在面向对象中用表达式声明和定义一个函数，使其可以捕获上层函数的变量，实现闭包。或是定义只能在某个函数中使用的匿名函数</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[capture list] (parameter list) [mutable/<span class="keyword">exception</span>/attribute] -&gt; <span class="keyword">return</span> <span class="keyword">type</span> <span class="type">&#123; </span><span class="keyword">function</span> <span class="title">body</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>capture list：捕获列表<ul><li>值捕获，定义时直接传值</li><li>引用捕获，内部使用的是对应变量的引用</li><li>隐式捕获，捕获所有外部变量，&#x3D;表示值捕获，&amp;表示引用捕获</li><li>初始化捕获，捕获列表中可以定义变量，且可以自动auto</li></ul></li><li>parameter list：传入参数列表，同普通的函数</li><li>[mutable&#x2F;exception&#x2F;attribute]：不加mutable会自动给按值捕获的变量加const</li><li>type：返回类型，省略后自动推导</li><li>function body：函数体</li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>自定义排序算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(arr,[](<span class="type">int</span> a,<span class="type">int</span> b)&#123;<span class="keyword">return</span> a&gt;b;&#125;);</span><br></pre></td></tr></table></figure><p>auto泛型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = [] (<span class="keyword">auto</span> x) -&gt; <span class="keyword">auto</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_integral&lt;<span class="keyword">decltype</span>(x)&gt;::value)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (is_floating_point&lt;<span class="keyword">decltype</span>(x)&gt;::value)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>捕获类中的成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> func = [*<span class="keyword">this</span>]()&#123;<span class="keyword">return</span> <span class="number">2</span>*num;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/m0_60134435/article/details/136151698">深入浅出 C++ Lambda表达式：语法、特点和应用_c++ lamda 参数-CSDN博客</a></p><p>Lambda表达式虽然是一种语法糖，但它本质上也是一种函数对象，也就是重载了 <code>operator()</code> 的类的对象。每一个 Lambda表达式都对应一个唯一的匿名类，这个类的名称由编译器自动生成，因此我们无法直接获取或使用。Lambda表达式的捕获列表实际上是匿名类的数据成员，Lambda表达式的参数列表和返回值类型实际上是匿名类的 <code>operator()</code> 的参数列表和返回值类型，Lambda表达式的函数体实际上是匿名类的 <code>operator()</code> 的函数体。例如，下面的 Lambda表达式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [x] (<span class="type">int</span> y) -&gt; <span class="type">int</span> &#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>相当于定义了一个匿名类，类似于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__lambda_1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    __lambda_1(<span class="type">int</span> x) : __x(x) &#123;&#125; <span class="comment">// 构造函数，用于初始化捕获的变量</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> y)</span> <span class="type">const</span> <span class="comment">// 重载的 operator()，用于调用 Lambda表达式</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __x + y; <span class="comment">// 函数体，与 Lambda表达式的函数体相同</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> __x; <span class="comment">// 数据成员，用于存储捕获的变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> f = __lambda_1(x); <span class="comment">// 创建一个匿名类的对象，相当于 Lambda表达式</span></span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure><p>由于 Lambda表达式是一种函数对象，因此它可以赋值给一个合适的函数指针或函数引用，也可以作为模板参数传递给一个泛型函数或类。</p><p>参考</p><p><a href="https://zhuanlan.zhihu.com/p/150554945">现代 C++：Lambda 表达式 - 知乎</a></p>]]></content>
    
    
    <summary type="html">CPP学习</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="开发" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/"/>
    
    <category term="语言学习" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CPP" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/CPP/"/>
    
    <category term="语法" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/CPP/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="cpp" scheme="https://www.pri87.vip/tags/cpp/"/>
    
    <category term="闭包" scheme="https://www.pri87.vip/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>基本排序算法</title>
    <link href="https://www.pri87.vip/posts/981a96f7.html"/>
    <id>https://www.pri87.vip/posts/981a96f7.html</id>
    <published>2024-11-19T02:19:38.000Z</published>
    <updated>2024-11-23T16:39:32.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p> 插入排序是指每次排序的元素插入到已排序的列表中，和洗扑克牌一样。对于顺序表，插入所花时间很多。</p><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>从左到右选择元素插入到已排序列表，插入时保证使已排序列表依然有序。初始已排序列表为空</p><p>基本算法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> j = i;</span><br><span class="line"><span class="keyword">auto</span> tmp = arr[i];</span><br><span class="line"><span class="keyword">while</span> (j != <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; tmp) &#123;<span class="comment">//找到该插入的位置，并同时后一一位</span></span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] = tmp;<span class="comment">//插入</span></span><br><span class="line"><span class="built_in">pArr</span>(arr, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insertionSort</span><span class="params">(Container&amp; container)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> first = std::<span class="built_in">begin</span>(container);</span><br><span class="line"><span class="keyword">auto</span> end = std::<span class="built_in">end</span>(container);</span><br><span class="line"><span class="keyword">if</span> (first == end) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = std::<span class="built_in">next</span>(first); i != end; i++) &#123;</span><br><span class="line"><span class="keyword">auto</span> key = *i;</span><br><span class="line"><span class="keyword">auto</span> j = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (j != first &amp;&amp; (*std::<span class="built_in">prev</span>(j) &gt; key)) &#123;</span><br><span class="line">*j = *std::<span class="built_in">prev</span>(j);</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">*j = key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00060332</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">6</span>.<span class="number">03324770</span></span><br></pre></td></tr></table></figure><p>直接插入排序有两个循环，所以一般情况下时间复杂度是$O(n)*O(n)&#x3D;O(n^2)$，最坏的情况是完全逆序，与平均相同，最好情况为顺序，内循环不需要比较，所以时间复杂度为$O(n)$<br>对于空间复杂度，需要额外空间存放一个元素，所以是$O(1)$</p><h2 id="二分插入排序"><a href="#二分插入排序" class="headerlink" title="二分插入排序"></a>二分插入排序</h2><p>也叫折半插入排序，直接插入排序使用了顺序查找，效率较低，所以把顺序查找换成二分查找能提高内循环效率，然而还是插入，感觉没有提高多少效率</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">binaryInsertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> high = i;</span><br><span class="line"><span class="keyword">auto</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> tmp = arr[i];</span><br><span class="line"><span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &lt; tmp) &#123;</span><br><span class="line">low = mid + <span class="number">1</span>;<span class="comment">//防止len=2时卡死？</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &gt; tmp) &#123;</span><br><span class="line">high = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] == tmp) &#123;</span><br><span class="line">high = low = mid;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt; low; --j)<span class="comment">//只移动</span></span><br><span class="line">&#123;</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[low] = tmp;<span class="comment">//插入</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">pArr</span>(arr, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">binaryInsertionSort</span><span class="params">(Container&amp; container)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> first = std::<span class="built_in">begin</span>(container);</span><br><span class="line"><span class="keyword">auto</span> end = std::<span class="built_in">end</span>(container);</span><br><span class="line"><span class="keyword">if</span> (first == end) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = std::<span class="built_in">next</span>(first); i != end; ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> high = i;</span><br><span class="line"><span class="keyword">auto</span> low = first;</span><br><span class="line"><span class="keyword">auto</span> mid = first;</span><br><span class="line"><span class="keyword">auto</span> tmp = *i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">mid = low;</span><br><span class="line">std::<span class="built_in">advance</span>(mid, std::<span class="built_in">distance</span>(low, high) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (*mid &lt; tmp) &#123;</span><br><span class="line">low = std::<span class="built_in">next</span>(mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">high = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j = i; j &gt; low; --j) &#123;</span><br><span class="line">*j = *std::<span class="built_in">prev</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">*low = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00054250</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">5</span>.<span class="number">42496460</span></span><br></pre></td></tr></table></figure><p>我多试了几次(20长度)，发现比直接插入的速度慢，难道是我写错了？QAQ，可能是算法太菜了。</p><p>外循环$O(n)$，内循环查找+插入$O(log_2n)+O(n)$，所以总体时间复杂度：$O(nlog_2n)+O(n^2)&#x3D;O(n^2)$，对于最好时间，已排序完成，$O(n)$，最差时间，倒序$O(n^2)$</p><p>这么一看在n小时用直接插入，n大时用二分插入更好。<br>对于空间复杂度，由于有4个额外空间，所以是$O(4)$</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>又叫缩小增量排序。直接插入排序有两个性质，在快排序好时，效率高，大概能到O(n)，但是插入操作十分低效因为每次都只能移动一位。所以希尔排序先划分小块分别插入排序，然后再总体插入排序。</p><p>那么选取H，即间隔就很重要了，这里有两篇文章</p><p><a href="https://oi-wiki.org/basic/shell-sort/">希尔排序 - OI Wiki</a><br><a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F#.E6.AD.A5.E9.95.BF.E5.BA.8F.E5.88.97">希尔排序 - 维基百科，自由的百科全书</a></p><p>都提到了比较好的H选择，因为Sedgewick步长有点不好写，这里直接就用原作者的排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">shellSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">std::deque&lt;<span class="type">int</span>&gt; gap = &#123;&#125;;</span><br><span class="line"><span class="keyword">auto</span> gapinit = [&amp;gap](<span class="type">int</span> len, <span class="keyword">auto</span> function)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;; i++) &#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">function</span>(i);</span><br><span class="line"><span class="keyword">if</span> (x &gt; len)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">gap.<span class="built_in">insert</span>(gap.<span class="built_in">begin</span>(), x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> sort = [](<span class="type">int</span> arr[], <span class="type">int</span> gap, <span class="type">const</span> <span class="type">int</span> len) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = i;</span><br><span class="line"><span class="keyword">auto</span> tmp = arr[i];<span class="comment">//防止j=i时arr[i]被修改</span></span><br><span class="line"><span class="keyword">while</span> (j - gap &gt; <span class="number">0</span> &amp;&amp; arr[j - gap] &gt; tmp) &#123;</span><br><span class="line">arr[j] = arr[j - gap];</span><br><span class="line">j -= gap;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">gapinit</span>(len, [](<span class="type">int</span> i) &#123;</span><br><span class="line"><span class="built_in">return</span> (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> g : gap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sort</span>(arr, g, len);</span><br><span class="line"><span class="built_in">pArr</span>(arr, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">shellSort</span><span class="params">(Container&amp; arr)</span> </span>&#123;</span><br><span class="line">std::deque&lt;<span class="type">int</span>&gt;gap = &#123;&#125;;</span><br><span class="line"><span class="keyword">auto</span> first = std::<span class="built_in">begin</span>(arr);</span><br><span class="line"><span class="keyword">auto</span> end = std::<span class="built_in">end</span>(arr);</span><br><span class="line"><span class="keyword">auto</span> len = std::<span class="built_in">distance</span>(first, end);</span><br><span class="line"><span class="keyword">auto</span> gapinit = [&amp;gap](<span class="type">int</span> len, std::function&lt;<span class="built_in">int</span>(<span class="type">int</span>)&gt; func)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;; i++) &#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">func</span>(i);</span><br><span class="line"><span class="keyword">if</span> (x &gt; len)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">gap.<span class="built_in">insert</span>(gap.<span class="built_in">begin</span>(), x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> sort = [first, end](Container&amp; container, <span class="type">int</span> gap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> len = std::<span class="built_in">distance</span>(first, end);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> tmp = (*(first + i));</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; *(first + j - gap) &gt; tmp; j -= gap)</span><br><span class="line">&#123;</span><br><span class="line">*(first + j) = *(first + j - gap);</span><br><span class="line">&#125;</span><br><span class="line">*(first + j) = (tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">gapinit</span>(len, [](<span class="type">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> g : gap) &#123;</span><br><span class="line"><span class="built_in">sort</span>(arr, g);</span><br><span class="line"><span class="built_in">pArr</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间测试</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00008865</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">0</span>.<span class="number">88646020</span></span><br></pre></td></tr></table></figure><p>可以看出，速度相较之前的两个提升了5倍不止。</p><p>对于希尔算法的时间复杂度，需要额外考虑gap的值，不同的值对应不同的复杂度，比如说增量为2的倍数，那么同一个组中2的倍数会多次比较，改成<code>pow(3,i)</code>后</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00007897</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">0</span>.<span class="number">78967320</span></span><br></pre></td></tr></table></figure><p>很稳定地提高了大约0.1s。所以只能说大致来看时间复杂度在$O(nlog(n))$，对于以2的平方为间隔的，在完全倒序的情况下最差会退化到$O(n^2)$。查资料的时候发现，这是世界上第一个突破$O(n^2)$的排序算法，真强。<br>对于空间复杂度，由于额外占用一个tmp，所以为$O(1)$</p><h1 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h1><p>交换排序是指这一次排序的元素与其它元素交换最后实现的排序</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>稳定的排序</p><p>经典老熟人，就不多说了，直接上代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = len; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> sorted = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; j - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">sorted = <span class="literal">false</span>;</span><br><span class="line">std::<span class="built_in">swap</span>(arr[i], arr[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pArr(arr, 20);</span></span><br><span class="line"><span class="keyword">if</span> (sorted)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bubbleSort</span><span class="params">(Container&amp; container)</span> </span>&#123;</span><br><span class="line"><span class="type">bool</span> sorted = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> end = std::<span class="built_in">end</span>(container); !sorted &amp;&amp; end != std::<span class="built_in">begin</span>(container); --end) &#123;</span><br><span class="line">sorted = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = std::<span class="built_in">begin</span>(container); std::<span class="built_in">next</span>(it) != end; ++it) &#123;</span><br><span class="line"><span class="keyword">if</span> (*it &gt; *std::<span class="built_in">next</span>(it)) &#123;</span><br><span class="line">std::<span class="built_in">swap</span>(*it, *std::<span class="built_in">next</span>(it));</span><br><span class="line">sorted = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pArr</span>(container);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00132296</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">13</span>.<span class="number">22964510</span></span><br></pre></td></tr></table></figure><p>很慢，可能只适合小数组，定死的两重循环让它只能在$O(n^2)$上，除了运气很好刚好有序，则只需$O(n)$</p><p>空间复杂度$O(1)$</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><del>顾名思义，很快的排序</del>。每次排序时，定义一个基准值（一般是开头元素或结尾元素）然后从左和右分别引出指针，基准远离的那个指针开始向中心移动，遇到小于基准值的就复制到离基准近的位置，然后近的指针移动找大于基准值的，复制到远离基准的指针位置，两个指针相遇后，将基准赋值到这里。然后分别对左边和右边执行这个操作。因此要使用递归。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">const</span> <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">di</span> &#123;</span><br><span class="line">left,</span><br><span class="line">right</span><br><span class="line">&#125;;</span><br><span class="line">std::function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; sort;</span><br><span class="line">sort = [&amp;arr, &amp;sort](<span class="type">int</span> is, <span class="type">int</span> ie) &#123;</span><br><span class="line"><span class="built_in">pArr</span>(arr, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span> (is == ie)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (is + <span class="number">1</span> == ie) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[is] &gt; arr[ie])</span><br><span class="line">std::<span class="built_in">swap</span>(arr[is], arr[ie]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">di diriction = right;</span><br><span class="line"><span class="type">int</span> ieb = ie;</span><br><span class="line"><span class="type">int</span> isb = is;</span><br><span class="line"><span class="keyword">auto</span> base = arr[is];</span><br><span class="line"><span class="keyword">while</span> (is &lt; ie) &#123;</span><br><span class="line"><span class="keyword">if</span> (diriction == right) &#123;</span><br><span class="line"><span class="keyword">while</span> (base &lt;= arr[ie] &amp;&amp; is &lt; ie)</span><br><span class="line">ie--;</span><br><span class="line">arr[is] = arr[ie];</span><br><span class="line">diriction = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (base &gt; arr[is] &amp;&amp; is &lt; ie)</span><br><span class="line">&#123;</span><br><span class="line">is++;</span><br><span class="line">&#125;</span><br><span class="line">arr[ie] = arr[is];</span><br><span class="line">diriction = right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[is] = base;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; base &lt;&lt; std::endl;</span></span><br><span class="line"><span class="keyword">if</span> (is &gt; isb)</span><br><span class="line"><span class="built_in">sort</span>(isb, is - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (is &lt; ieb)</span><br><span class="line"><span class="built_in">sort</span>(is + <span class="number">1</span>, ieb);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">sort</span>(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面就不写模板了QAQ</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Average</span> time for <span class="number">10000</span> runs and <span class="number">1000</span> elements: <span class="number">0</span>.<span class="number">00006714</span> seconds</span><br><span class="line"><span class="attribute">Total</span> time:<span class="number">0</span>.<span class="number">67141270</span></span><br></pre></td></tr></table></figure><p>可以看出确实很快，比希尔又少了0.1s左右。由于每次是折半,所以速度是$O(nlog(n))$，对应的，由于有折半次的递归，所以空间复杂度是$O(logn)$</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><h2 id="树形选择排序"><a href="#树形选择排序" class="headerlink" title="树形选择排序"></a>树形选择排序</h2><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><h1 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h1>]]></content>
    
    
    <summary type="html">数据结构要挂科了，赶紧复习一下</summary>
    
    
    
    <category term="实践" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="数据结构与算法" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>win-并发与同步</title>
    <link href="https://www.pri87.vip/posts/e563aa6c.html"/>
    <id>https://www.pri87.vip/posts/e563aa6c.html</id>
    <published>2024-11-18T05:13:57.000Z</published>
    <updated>2024-11-24T06:03:08.282Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇学习了基本的进程和线程，这里继续学习Windows的并发与同步<br>《Windows内核原理与实现》</p><h2 id="并发与同步"><a href="#并发与同步" class="headerlink" title="并发与同步"></a>并发与同步</h2><p>为了保证操作系统和应用有序地执行，它们读取和访问的数据应当是有效的。如果A线程使用了资源甲，进行了修改，同时B线程也对资源甲进行了修改，保存时就会产生冲突，所以我们需要一种(多种)机制去控制各个线程的顺序使得它们对资源的使用是协调的、合理的、安全的。</p><p><img src="https://s2.loli.net/2024/11/18/Ti2DFcLhquH8Qov.png" alt="并发的来源"></p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>理想情况下,如果所有进程都具有执行条件,系统会直接根据优先级顺序将处理器资源分配给各个线程。因而唯一可能的线程冲突就是优先级的冲突。这很好解决，只要让高优先级的优先执行就好了。但是很有可能有的线程依赖另一个线程，或者依赖系统的某个信号和状态。</p><p>看下面这个书中的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_nCount;</span><br><span class="line">DWORD <span class="title function_">ComputeThreadProc</span><span class="params">(PLVOID pParam)</span>&#123;</span><br><span class="line">    g_nCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(g_nCount++&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_nCount;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ControlThreadProc</span><span class="params">(PLVOID pRaram)</span>&#123;</span><br><span class="line">    CreateThread(ComputeThreadProc);</span><br><span class="line">    g_nCount=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果执行ControlThreadProc函数，可能发生什么，ComputeThreadProc中的汇编可能把g_nCount保存在两个寄存器中，用RCX来循环，用RAX来执行每一轮最后的判断，那么如果主线程内执行了g_nCount&#x3D;100;，却被RCX赋值了，那么它就不会停止</p><p><img src="https://s2.loli.net/2024/11/18/cqb9BgR38V61SOC.png" alt="image-20241118135849061"></p><p>所以，多线程通信时，必须保证对变量的操作为原子操作或者对变量的访问是互斥的。</p><p>处理器中有些自带的原子操作命令，基本的指令前加lock即是原子操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LONG FASTCALL InterlockerIncrement(IN OUT LONG volatile *addr)</span><br><span class="line">&#123;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">        mov eax,1</span><br><span class="line">        mov ecx,addr</span><br><span class="line">        lock xadd [ecx],eax</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，通过lock xadd，这组指令就会变成原子操作，其它线程的操作不能插入到这个过程中</p><h3 id="通讯与同步"><a href="#通讯与同步" class="headerlink" title="通讯与同步"></a>通讯与同步</h3><p>正如上面所说，为了使程序以正常的顺序进行，我们需要一种机制去协调进程&#x2F;线程对某些数据的操作，以通讯为基础的同步机制就这样诞生了。下面的操作均为原子操作</p><h4 id="互斥和互斥体"><a href="#互斥和互斥体" class="headerlink" title="互斥和互斥体"></a>互斥和互斥体</h4><p>互斥指一个共享资源，任何时刻只能有一个主体可以访问。Windows中可以通过互斥体实现跨进程的访问</p><h5 id="互斥体同步对象"><a href="#互斥体同步对象" class="headerlink" title="互斥体同步对象"></a>互斥体同步对象</h5><p>该对象有两种状态，有信号和无信号，有信号表示该对象当前无人访问。无信号表示其已被某线程拥有，只有当该线程释放所有权后它才会变为有信号状态。</p><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p> 对于一个资源，有一个标识值说明当前有多少对象在使用这个资源，这个值是信号量，当值为x时，表示还可以有x个对象访问它，访问叫做DOWN，每次访问使x-1，如果x本身为0，当前线程阻塞。当对象访问结束时，执行UP操作，使x+1然后令一个阻塞的线程执行DOWN获得资源的操作权限</p><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><p>和前面的类似，如果值为1，则不可访问并被阻塞，如果为0则可以访问，同时有局部和全局之分，如果是局部锁，它只控制一个小区域，反之是全局的控制。</p><h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><p>对于一段临界区代码，同一时刻只有一个线程在其中执行。如果一个数据只在临界区中被访问，那么这个数据也是线程安全的。</p><p>临界区可以不连续，但是在进入时必须触发enter函数，离开时触发leave函数以用上面几种方法防止同时访问</p><h4 id="自旋锁和忙等待"><a href="#自旋锁和忙等待" class="headerlink" title="自旋锁和忙等待"></a>自旋锁和忙等待</h4><p>忙等待：不断重复检查以第一时间获得信息。<br>自旋锁通过忙等待实现一个CPU在一段时间内对一个资源的同时拥有，即其它CPU会在这时重复检查是否可以使用这个资源，直到所有权释放</p><h4 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h4><p>接收和发送。两个进程可以相互接收和发送消息，具体实现需要依赖其它同步原语</p><h3 id="同步问题"><a href="#同步问题" class="headerlink" title="同步问题"></a>同步问题</h3><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><blockquote><p>如果一组线程中的每个线程都在等待只能由其他线程才能满足的条件，那 么这组线程是死锁的，所有的线程都将继续等待，无法前进。 </p></blockquote><p>银行家算法</p><h4 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h4><blockquote><p>饥饿是指一个进程或线程满足执行的条件，但一直得不到执行，甚至 永远得不到执行（“饿死”）。饥饿通常是由资源分配策略引起的，比如由于策略而导 致不公平，有些资源请求在特定的情形下永远得不到满足。</p></blockquote><h4 id="优先级反转"><a href="#优先级反转" class="headerlink" title="优先级反转"></a>优先级反转</h4><blockquote><p>优先级反转是指这样的问题：在线程调度时，一个低优先级的线程占有一个共享资源， 从而导致高优先级的线程虽然其他运行条件都满足，但因为得不到该资源而无法运行。在 采用抢占式调度算法的操作系统中，当低优先级的线程占有了资源时，它有可能被中等优 先级的其他线程抢占，从而导致高优先级的线程在更长时间内无法运行，实际的效果就是， 相当于把高优先级的线程降到低优先级了。</p></blockquote><h3 id="中断与异常"><a href="#中断与异常" class="headerlink" title="中断与异常"></a>中断与异常</h3><h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><p>其它设备（比如IO）需要CPU响应时，会发送硬件中断给CPU，令其执行那个设备需要执行的内容。内核中的代码也可以发送软件中断，比如执行线程调度。CPU可以屏蔽中断用来专注执行一段指令，也就是使其变为原子操作。</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>异常也分为软件异常和硬件异常。它和当前的代码&#x2F;线程有关。硬件异常有：除零错误，缺页错误等。软件异常有：软件断点陷阱等。当触发异常时，会按照固定流程执行处理异常的代码，并导致不同的结果(崩溃&#x2F;继续执行)</p>]]></content>
    
    
    <summary type="html">winwinwin</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="Win核心" scheme="https://www.pri87.vip/categories/Win%E6%A0%B8%E5%BF%83/"/>
    
    <category term="Win内核" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/Win%E5%86%85%E6%A0%B8/"/>
    
    
    <category term="多线程" scheme="https://www.pri87.vip/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="锁" scheme="https://www.pri87.vip/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>APC注入</title>
    <link href="https://www.pri87.vip/posts/5fe10d5b.html"/>
    <id>https://www.pri87.vip/posts/5fe10d5b.html</id>
    <published>2024-11-18T04:28:51.000Z</published>
    <updated>2024-11-27T17:32:53.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步过程调用"><a href="#异步过程调用" class="headerlink" title="异步过程调用"></a>异步过程调用</h2><p>Windows内核原理与实现一书：</p><p><img src="https://s2.loli.net/2024/11/18/MYfU1hFZHWbRvGV.png" alt="image-20241118124618497"></p><p><img src="https://s2.loli.net/2024/11/18/Zlq4GQ8nECaWxvi.png" alt="image-20241118124635696"></p><blockquote><p>APC（Asynchronous Procedure Call）异步过程调用是一种<code>Windows</code>操作系统的核心机制，它允许在进程上下文中执行用户定义的函数，而无需创建线程或等待OS执行完成。该机制适用于一些频繁的、短暂的或非常细微的操作，例如改变线程优先级或通知线程处理任务。在<code>APC机制</code>中，当某些事件发生时（例如文件IO，网络IO或定时器触发），这些事件将被操作系统添加到一个<code>APC队列</code>中，该队列绑定到执行线程。在下一次发生<code>ALERTABLE</code>的事件时（例如调用SleepEx或SignalObjectAndWait时），OS将弹出<code>APC函数</code>并在执行线程上下文中调用该函数，并在执行完毕后恢复线程执行。</p></blockquote><p>简要来说，一旦进程&#x2F;线程请求某些操作（比如文件操作），操作系统会将它们加入到对应线程的APC队列，当线程恢复执行时，就会依次执行队列里的函数过程。APC队列分为内核APC队列和用户APC队列，同时两种又分为普通和特殊。对于内核队列，其中的APC会优先于用户队列执行完，等到从R0回到R3，就会执行一个用户普通APC。由于特殊用户APC会直接挂到队列开头，所以特殊APC总会优先执行，且一次性执行全部。</p><p>详见：<br>[<a href="https://bbs.kanxue.com/thread-276036.htm">原创]Win10 x64 APC的分析与玩法-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><h2 id="APC注入"><a href="#APC注入" class="headerlink" title="APC注入"></a>APC注入</h2><p>通过向目标进程加入APC就可以实现让它读取DLL的操作，由于我没有R0权限(没学提权)，只能在R3下尝试添加用户APC。</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>必须处于可唤醒状态，可以使用以下函数达成效果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SleepEx</span>(xxx,True);</span><br><span class="line"><span class="built_in">MsgWaitForMultipleObjectsEx</span>(xxx,xxx,xxx,xxx,True);</span><br><span class="line"><span class="built_in">WaitForSingleObjectEx</span>(xxx,xxx,True);</span><br><span class="line"><span class="built_in">WaitForMultipleObjectEx</span>(xxx,xxx,xxx,xxx,True);</span><br><span class="line"><span class="built_in">SignalObjectAndWait</span>(xxx,xxx,xxx,True);</span><br></pre></td></tr></table></figure><p>具体流程为：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取目标pid-&gt;申请空间-&gt;写入DLL路径-&gt;获取LoadLibrary地址-&gt;用APC挂钩函数挂上LoadLibrary函数，传参DLL路径</span><br></pre></td></tr></table></figure><p>直接写代码即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(*NtQueueApcThreadEx)</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE thread,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG64 flag,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG64 NormalRoutine,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG64 NormalContext,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG64 s1,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG64 s2</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="built_in">NTSTATUS</span>(*pNtQueueApcThreadEx)</span><br><span class="line">(</span><br><span class="line">HANDLE thread,</span><br><span class="line">ULONG64 flag,</span><br><span class="line">ULONG64 NormalRoutine,</span><br><span class="line">ULONG64 NormalContext,</span><br><span class="line">ULONG64 s1,</span><br><span class="line">ULONG64 s2</span><br><span class="line">) = <span class="literal">NULL</span>;</span><br><span class="line">LPTHREAD_START_ROUTINE pLoadLibrary = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function">BOOL <span class="title">EnableDebugPrivilege</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HANDLE hToken;</span><br><span class="line">TOKEN_PRIVILEGES tp;</span><br><span class="line">LUID luid;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开当前进程的访问令牌</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">OpenProcessToken</span>(<span class="built_in">GetCurrentProcess</span>(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken)) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;无法打开进程令牌。错误: &quot;</span> &lt;&lt; <span class="built_in">GetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找调试特权的LUID</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">LookupPrivilegeValue</span>(<span class="literal">NULL</span>, SE_DEBUG_NAME, &amp;luid)) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;无法查找调试特权的LUID。错误: &quot;</span> &lt;&lt; <span class="built_in">GetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hToken);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置特权</span></span><br><span class="line">tp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">tp.Privileges[<span class="number">0</span>].Luid = luid;</span><br><span class="line">tp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调整特权</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">AdjustTokenPrivileges</span>(hToken, FALSE, &amp;tp, <span class="built_in">sizeof</span>(TOKEN_PRIVILEGES), <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;无法调整令牌特权。错误: &quot;</span> &lt;&lt; <span class="built_in">GetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hToken);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查调整特权的结果</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetLastError</span>() == ERROR_NOT_ALL_ASSIGNED) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;令牌不具有指定的特权。错误: &quot;</span> &lt;&lt; <span class="built_in">GetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hToken);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hToken);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取目标pid-&gt;申请空间-&gt;写入DLL路径-&gt;获取LoadLibrary地址-&gt;用APC挂钩函数挂上LoadLibrary函数，传参DLL路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">PVOID <span class="title">getFunction</span><span class="params">(LPCSTR ModuleName, LPCSTR funcName, HMODULE&amp; hMoule)</span> </span>&#123;</span><br><span class="line">hMoule = <span class="built_in">GetModuleHandleA</span>(ModuleName);</span><br><span class="line"><span class="keyword">if</span> (!hMoule) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;模块打开失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">PVOID pfunc = <span class="built_in">GetProcAddress</span>(hMoule, funcName);</span><br><span class="line"><span class="keyword">if</span> (!pfunc) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;函数查找失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pfunc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">//防止访问权限不够，使用令牌提高权限</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">EnableDebugPrivilege</span>()) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;调整权限失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Ntdll和NtQueueApcThreadEx</span></span><br><span class="line">HMODULE hNtdll;</span><br><span class="line">pNtQueueApcThreadEx = (NtQueueApcThreadEx)<span class="built_in">getFunction</span>(<span class="string">&quot;Ntdll&quot;</span>, <span class="string">&quot;NtQueueApcThreadEx&quot;</span>, hNtdll);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取kernal32和LoadLibrary</span></span><br><span class="line">HMODULE hKernel32;</span><br><span class="line">pLoadLibrary = (LPTHREAD_START_ROUTINE)<span class="built_in">getFunction</span>(<span class="string">&quot;kernel32&quot;</span>, <span class="string">&quot;LoadLibraryW&quot;</span>, hKernel32);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取PID</span></span><br><span class="line">DWORD dwPid = <span class="number">0</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;请输入进程PID：&quot;</span>;</span><br><span class="line">std::cin &gt;&gt; dwPid;</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//申请空间</span></span><br><span class="line">WCHAR dllpath[] = <span class="string">L&quot;C:\\Users\\a2879\\source\\repos\\valentForAPCinject\\x64\\Debug\\messageboxDLL.dll&quot;</span>;</span><br><span class="line">LPVOID lpDLLpath = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, <span class="built_in">sizeof</span>(dllpath) + <span class="number">1</span>, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (!lpDLLpath) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;内存分配失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入dll路径</span></span><br><span class="line">SIZE_T bytesWritten;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProcess, lpDLLpath, dllpath, <span class="built_in">sizeof</span>(dllpath) + <span class="number">1</span>, &amp;bytesWritten)) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;写入失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取线程</span></span><br><span class="line">DWORD dwThreadID;</span><br><span class="line">THREADENTRY32 te32 = &#123;&#125;;</span><br><span class="line">te32.dwSize = <span class="built_in">sizeof</span>(THREADENTRY32);</span><br><span class="line">HANDLE hSnapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPTHREAD, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">std::vector&lt;DWORD&gt; Vthread = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Thread32First</span>(hSnapshot, &amp;te32)) &#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (te32.th32OwnerProcessID == dwPid) &#123;</span><br><span class="line">Vthread.<span class="built_in">push_back</span>(te32.th32ThreadID);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Thread32Next</span>(hSnapshot, &amp;te32));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = Vthread.<span class="built_in">rbegin</span>(); it != Vthread.<span class="built_in">rend</span>(); it++) &#123;</span><br><span class="line">HANDLE hThread = <span class="built_in">OpenThread</span>(THREAD_ALL_ACCESS, FALSE, te32.th32ThreadID);</span><br><span class="line"><span class="keyword">if</span> (hThread) &#123;</span><br><span class="line"><span class="built_in">pNtQueueApcThreadEx</span>(hThread, <span class="number">1</span>, (ULONG64)pLoadLibrary, (ULONG64)lpDLLpath, <span class="literal">NULL</span>, <span class="literal">NULL</span>);<span class="comment">//特殊用户APC</span></span><br><span class="line"><span class="comment">//QueueUserAPC((PAPCFUNC)pLoadLibrary, hThread, (ULONG_PTR)lpDLLpath);//普通用户APC</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;成功执行:&quot;</span> &lt;&lt; *it &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;无法打开线程\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;执行结束&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代码通过在管理员权限下运行，然后创建一个带窗口的程序进行测试。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (uMsg) &#123;</span><br><span class="line"><span class="keyword">case</span> WM_CREATE: &#123;</span><br><span class="line"><span class="built_in">CreateWindow</span>(</span><br><span class="line"><span class="string">L&quot;BUTTON&quot;</span>, <span class="string">L&quot;test&quot;</span>,</span><br><span class="line">WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,</span><br><span class="line"><span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>,</span><br><span class="line">hwnd, (HMENU)<span class="number">1</span>, <span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_COMMAND: &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOWORD</span>(wParam) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">SleepEx</span>(<span class="number">1000</span>, TRUE);<span class="comment">//调用会进行APC执行的函数，true表明会被APC执行打断，从而产生效果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> WM_DESTROY: &#123;</span><br><span class="line"><span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="type">int</span> nCmdShow)</span> </span>&#123;</span><br><span class="line">WNDCLASS wc = &#123;&#125;;</span><br><span class="line">wc.lpfnWndProc = WindowProc;</span><br><span class="line">wc.hInstance = hInstance;</span><br><span class="line">wc.lpszClassName = <span class="string">L&quot;testForAPC&quot;</span>;</span><br><span class="line"><span class="built_in">RegisterClass</span>(&amp;wc);</span><br><span class="line"></span><br><span class="line">HWND hwnd = <span class="built_in">CreateWindowEx</span>(</span><br><span class="line"><span class="number">0</span>, <span class="string">L&quot;testForAPC&quot;</span>, <span class="string">L&quot;testForAPC&quot;</span>,</span><br><span class="line">WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, <span class="number">640</span>, <span class="number">480</span>,</span><br><span class="line"><span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">ShowWindow</span>(hwnd, nCmdShow);</span><br><span class="line"></span><br><span class="line">MSG msg = &#123;&#125;;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line"><span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像是概率成功，和APC执行靠概率有联系。同时好像必须用窗口程序，如果是命令行就一定不会触发。经过实测，注入后会直接成功而不需要触发SleepEx或者WaitingForSingleObject之类的函数,怀疑是窗口本身因素的影响</p><hr><h2 id="没解决的问题"><a href="#没解决的问题" class="headerlink" title="没解决的问题"></a>没解决的问题</h2><p>其它程序注入后没有效果，<br>不知道为什么要逆序注入才不会崩溃</p>]]></content>
    
    
    <summary type="html">一种注入的方式</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="技能" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/"/>
    
    <category term="DLL注入" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/DLL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="shellcode注入" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/shellcode%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="DLL注入" scheme="https://www.pri87.vip/tags/DLL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>当我又想起-本站一周年纪念</title>
    <link href="https://www.pri87.vip/posts/bdf313e6.html"/>
    <id>https://www.pri87.vip/posts/bdf313e6.html</id>
    <published>2024-11-17T14:43:06.000Z</published>
    <updated>2024-11-25T17:25:09.838Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="认证失败，未授权。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e3ae305d37b282dfdec4f1a2f3a44710a63dee7c3ea92b4c6ca45d44b8cd7179">5c94f0abf490bb3ff3c66e82473cb99fa82c360312b8599a0edc1c2457e4a9837262584ac13973f7370d06fa4eb4be24586f16cf925fcaa63ec1cf41ba22fe222255ee9b8c3e8ec5d98fc29a713138b4f28fcf97e1007716c4b78ed4247f4f82e9d34ba606c43baa702bcaa1c46b996f45ba1be840c53bece24d7cac36523e88c6e66e79f44d014d71c924aef4abf488ee5052f71b8c752ef8525c355de779775e109540819ae47aa34034b657eef4e7d69984248bd63538db02ffe6dbcc54188525da50b2f31752f979e9323d2071efe93deabda143825a54c6e009d6fca194afbc0970f64e6aa73688a28acb85634dc6026938dc71f3b03187f9cd34172a90d8d423d26b0a92d265c78a07a5630bb701781248e3490d1b2dd066c0762e5f1e37d6dc4b98faadc83137f186587b93718be127a80ca7c860a718bbcf40eb87ff587fc0505ab3cedfb16245c34f45e3fb5976c765ee5854cb19332405bd75d7262c304390d74b8903f6c3986c6746e344af8e9117ef14c2f0b2267081f283e91417fce2cd5a87de1d9427521e9b352044fe1ffe7d12d15a6f3aa50335821c6cf5b6829e8ddaee49d4e505c7873f2951e7428fb56c4c18ba965296e6a46f50da082f881ad2bff1b5e6831e1727e9c37080ea914a2b91b9356ff4cbf01437e5bf940e926c65b9b81e233101d98f421e6cab5033230e7f3caf04259d120dd39ee2a7e89ccd5610ede717588dc1d5a290c1d016aa9f5db61c902574f887d061cdd8ec53ac6745a7892d462bccff01e115a68c2a312ae0324fb8367ce801e2c3edb2d91e2c361b6a1308839d1977ab53ba5379fcdc9f58b0012707e1660fc5feee85f61bac8b91dec149e89e673dd1a124d9f5703404377fd46f6d734fbbc7d9181abe1e0562cf50866f325276cb24326641cc4c798a92b7c8fd729ce8fd8c184272505fce5bac7c17905090a0ec6e53a7309c72c8868054402ed2bf20092ed4fff3cbff67eb5dab25a6b4fda30b587871b3bb0b6057b4c14bea8a8c76c3ab5c05e4b1337ed46b7bc87da3f9e96f0a70c855f0feedd79a84c9c9425cb0067eca422689d7387bcd100b861707632d2b60d0f8d20b76331da1f49028649e73394503c02ff16f910b2480564327d3fafc82825e9251e41c165514dbc51f11ed210a69ece66e359422c1b82b8173b8279c35042b5cefbf983f67dbeae70807f336c8dc2fea3d1126b4a450fbe987e9d40ccc4d09592054d8be2e6661470128c77d1cf0224f6c873806ccecf1fedd8b95180efb8c14ad6b739a17c66339025bacd53470c29c300ed7f4e825003fca878f1f78a477a22261925d89320f1952dca3f38254719c4a7c2eceb90f97dab21d3c047b30dd322cf29438b197f3b6c51b0b6d6cf31938afce074c67fde12b6a16b82c16ebff306a4a7bab07ae2270f8b2b464329cac6a867b93bfcdd591798bff02bdbf5d1c07bf8c39eec7aae9169d43405c4c92c959713dea68942ee806d28ee12e008afbf0517d8dcc7301ba127d963cd9cbcb758af2c41adc80417cb7a70db32a655f6ce46818cb40d0769286fd993b71d03073200ae159ebdc53bb0e82731b5b5712be0e4cffb549b6ad36174b9e6f60a4e10c1f4c1ceb6db8069e96c0d9cddf5766b6359bcc9b0809135818509122c15148b026b0afb1ffefbfa8a999c9e6228b8a925bda5ec6869ae3172cec9470d3f2f6605947e0fd28a4a024ed74d53cc99fe17c77d25202de69536133e1d6cb920535062e8cdbf8d77e730b9da12f60ecac6488f48b11574e520078e33de719d935c1f69b959bdd87b80e5a5e7fd62c7fafea15c192371c04bedb68d9350d8c3301d26501ce52e4f0d82d83361659091d5d19eac736f2b85ec1b6dc1d8aa92c91a48db94479be82b0f4c12c1d17246c43ec8eb1867f5db1bebad2cc4cd711a84e04d78d7c24dfcf64c5dc05c211f47a8eead5b85679c1463a3c2fca411d4b2827d8a5e968021613328ced5ae7ee0802622237200065c3d54ab404ae59f0d98116d3089ad8d22bdfe0402bc3423e04c5e44ccea65bc4ae695cc1efb17ab4a85baf6c205b26ecb170fc910ceffc0b744ad18c64031e4bee9b2c2a80b6e534a444cf4a58938f1038d053d7cd78b62f644f1da7c5b38b65a5445f7e7d3e4008d524d960c285ce406ed25de9d1842ad48eee8d1760600cad539b01de25903674e26b250a54899d3d4b35c38a3c3d1d258a9e3bd370042c65ce9de30093d069f415e41b2ef48bf05ca861f6b62c303b23a927227321b31411acd1ea0b4fdfc5c708fd67d8f2e7359d2a18017fcef8e5cf6e7ff65c58bf155feed7bfe7436f6df1294d327fa285034f285d61f3501f08b8600210c5a34d56b9627f5ac4e24e43ea533e2c9dc63fa1b3576d2df09c85be78aa8219d584f85016783d6b5ce6d8b13dd375531d3e6da5d6b74afb738201a89f5fe0fc37c5c3ca3fb5d9fef66726f44b471bd40b7579864104e1e9fd18bdc7355bf6009737e3871ea8c69a1b5f3eceed0f7fc96d11232519950b38e66c7e94fa3849e4fcd2b6b13d5b7afd99630a9a9d6f4fb47f8dd6b27d9cd66b137d6c4006bd2559da8cfabfd08b729426c43f80b66af03d3f0295c500cd5d321f61a7f17fb65217b90b69f1136d435c2f9b81889d47f890ee5dc4575d1cef6b892e9e5a101f412e4344a4f1a9487858d238390868a036adeb55c42f5a29bfc9ac407e12265b5293dbac8e1ea74c6f67b923ecc870d6e9b400d2860137d18b8bd89bbc1c8efa5945e64ebad418969a60277d3d23d79caf835a58ac013e68904d3f8407a632d9581eb7b2abb7a32b58bcfba19ef7dac99500bf22dc71fb5a89b68e327d2311d34a27c869e8e67b8be4eccadd3c855c955bb269f855afcc8b19d59a6a789ee445b8c86d6554ca0984342b1843c93980e6469235e4ca05bb096063a23d044917d9d25828156417e0cdaf2bc207a5a763815cc6ce3d70270ffbadeaadb97b2aca8930e410377e6c69c4048a3abe2d0ca6f6e6e19aaa07ad5d2b6b897651b2338fc38bbb8ca3febd385bdbf1956077866eac38fba1d7233edead6dd04b3a5d37fb84d7fb95a8c6f0d14d5500722676d8027f71127b169759</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">识别到用户访问</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">xxx</summary>
    
    
    
    <category term="实践" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="记录" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="日常" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/%E8%AE%B0%E5%BD%95/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="一周年纪念" scheme="https://www.pri87.vip/tags/%E4%B8%80%E5%91%A8%E5%B9%B4%E7%BA%AA%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Hexo学习</title>
    <link href="https://www.pri87.vip/posts/915c044a.html"/>
    <id>https://www.pri87.vip/posts/915c044a.html</id>
    <published>2024-11-16T08:43:15.000Z</published>
    <updated>2024-11-16T10:30:19.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多级分类"><a href="#多级分类" class="headerlink" title="多级分类"></a>多级分类</h2><p>Hexo的多级分类是：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">categories</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">a</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">b</span></span><br></pre></td></tr></table></figure><p>表示分类为a下的b</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">categories</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">CSS</span></span><br></pre></td></tr></table></figure><p>表示文章位于前端的CSS中</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">categories</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[http]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[html]</span></span><br></pre></td></tr></table></figure><p>表示文章既在http分类中，又在html分类中</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">categories</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[学习,http]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[学习,html]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[务必注意]</span></span><br></pre></td></tr></table></figure><p>表示文章既在学习的子分类http中，又在子分类html中，同时也在务必注意中</p><p>而tag则都是平等的，没有层级</p>]]></content>
    
    
    <summary type="html">分类和其它我在意的地方</summary>
    
    
    
    <category term="实践" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="记录" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="hexo" scheme="https://www.pri87.vip/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>win-系统调用</title>
    <link href="https://www.pri87.vip/posts/7df42b75.html"/>
    <id>https://www.pri87.vip/posts/7df42b75.html</id>
    <published>2024-11-14T04:47:20.000Z</published>
    <updated>2024-11-16T10:59:23.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>R3函数执行底层操作时，需要调用可以syscall的位于Ntdll或User32的dll里的系统函数。</p><p>调试时跟踪系统函数，以creatreThread为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00007FFA5FEB1990  mov         r10,rcx  </span><br><span class="line">00007FFA5FEB1993  mov         eax,0C7h  </span><br><span class="line">00007FFA5FEB1998  test        byte ptr [7FFE0308h],1  </span><br><span class="line">00007FFA5FEB19A0  jne         00007FFA5FEB19A5  </span><br><span class="line">00007FFA5FEB19A2  syscall</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ntdll.dll:00007FFA5FEB1990 loc_7FFA5FEB1990:                       ; CODE XREF: kernelbase_CreateRemoteThreadEx+298↑p</span><br><span class="line">ntdll.dll:00007FFA5FEB1990                                         ; DATA XREF: KERNELBASE.dll:off_7FFA5D9EF8A0↑o</span><br><span class="line">ntdll.dll:00007FFA5FEB1990                 mov     r10, rcx</span><br><span class="line">ntdll.dll:00007FFA5FEB1993                 mov     eax, 0C7h</span><br><span class="line">ntdll.dll:00007FFA5FEB1998                 test    byte_7FFE0308, 1</span><br><span class="line">ntdll.dll:00007FFA5FEB19A0                 jnz     short loc_7FFA5FEB19A5</span><br><span class="line">ntdll.dll:00007FFA5FEB19A2                 syscall                 ; Low latency system call</span><br><span class="line">ntdll.dll:00007FFA5FEB19A4                 retn</span><br><span class="line">ntdll.dll:00007FFA5FEB19A5 ; ---------------------------------------------------------------------------</span><br><span class="line">ntdll.dll:00007FFA5FEB19A5</span><br><span class="line">ntdll.dll:00007FFA5FEB19A5 loc_7FFA5FEB19A5:                       ; CODE XREF: ntdll.dll:00007FFA5FEB19A0↑j</span><br><span class="line">ntdll.dll:00007FFA5FEB19A5                 int     2Eh             ; DOS 2+ internal - EXECUTE COMMAND</span><br><span class="line">ntdll.dll:00007FFA5FEB19A5                                         ; DS:SI -&gt; counted CR-terminated command string</span><br><span class="line">ntdll.dll:00007FFA5FEB19A7                 retn</span><br></pre></td></tr></table></figure><p>我的系统版本是23H2，说明在23H2中NtCreateThreadEx系统调用号为C7</p><p>代码执行完之后，新线程就被创建了。但是控制权还没在新线程里，先把当前线程sleep或者getchar阻塞强制转换一下就可以看到输出</p><p>基本调用格式：(x64(x86还没看QAQ))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov r10,x</span><br><span class="line">mov r9,x</span><br><span class="line">mov r8,x</span><br><span class="line">mov rdx,x   ;上面都是参数</span><br><span class="line">mov rax, callNum   ;系统调用号</span><br><span class="line">syscall   ;进入系统调用，汇编为 0F 05</span><br></pre></td></tr></table></figure><p>上面也能看到int 2E是x32和dos的syscall进入方式</p>]]></content>
    
    
    <summary type="html">系统调用号及相关知识点</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="Win核心" scheme="https://www.pri87.vip/categories/Win%E6%A0%B8%E5%BF%83/"/>
    
    <category term="Win内核" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/Win%E5%86%85%E6%A0%B8/"/>
    
    
    <category term="权限" scheme="https://www.pri87.vip/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>栈/函数调用约定</title>
    <link href="https://www.pri87.vip/posts/b1cf25a9.html"/>
    <id>https://www.pri87.vip/posts/b1cf25a9.html</id>
    <published>2024-11-06T15:03:00.000Z</published>
    <updated>2024-11-16T10:27:25.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈的调用约定"><a href="#栈的调用约定" class="headerlink" title="栈的调用约定"></a>栈的调用约定</h2><blockquote><p>(1)函数参数的压栈顺序，(2)由调用者还是被调用者把参数弹出栈，(3)以及产生函数修饰名的方法。</p></blockquote><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><p><a href="https://zhuanlan.zhihu.com/p/170134539#:~:text=__cdecl%E3%80%81__">函数调用的三种约定，你都清楚吗 - 知乎 (zhihu.com)</a></p><h4 id="cdecl"><a href="#cdecl" class="headerlink" title="__cdecl"></a>__cdecl</h4><p>C&#x2F;CPP默认方式，参数从右向左入栈，主调函数负责栈平衡</p><h4 id="stdcall"><a href="#stdcall" class="headerlink" title="__stdcall"></a>__stdcall</h4><p>WIN API默认方式，参数从右向左入栈，被调函数负责栈平衡</p><h4 id="fastacll"><a href="#fastacll" class="headerlink" title="__fastacll"></a>__fastacll</h4><p>参数优先传给寄存器然后剩下的参数从右向左入栈传送</p><p>写测试代码观察反汇编结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __stdcall <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">func3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">func1(a, b);</span><br><span class="line">func2(a, b);</span><br><span class="line">func3(a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VS:</p><p>发现64位没有任何区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">00007FF615301880  push        rbp  </span><br><span class="line">00007FF615301882  push        rdi  </span><br><span class="line">00007FF615301883  sub         rsp,128h  </span><br><span class="line">00007FF61530188A  lea         rbp,[rsp+20h]  </span><br><span class="line">00007FF61530188F  lea         rcx,[__CC37DA75_a@c (07FF615311008h)]  </span><br><span class="line">00007FF615301896  call        __CheckForDebuggerJustMyCode (07FF615301361h)  </span><br><span class="line">00007FF61530189B  nop  </span><br><span class="line">int a, b;</span><br><span class="line">a = 2;</span><br><span class="line">00007FF61530189C  mov         dword ptr [a],2  </span><br><span class="line">b = 3;</span><br><span class="line">00007FF6153018A3  mov         dword ptr [b],3  </span><br><span class="line"></span><br><span class="line">func1(a, b);</span><br><span class="line">00007FF6153018AA  mov         edx,dword ptr [b]  </span><br><span class="line">00007FF6153018AD  mov         ecx,dword ptr [a]  </span><br><span class="line">00007FF6153018B0  call        func1 (07FF61530114Fh)  </span><br><span class="line">00007FF6153018B5  nop  </span><br><span class="line">func2(a, b);</span><br><span class="line">00007FF6153018B6  mov         edx,dword ptr [b]  </span><br><span class="line">00007FF6153018B9  mov         ecx,dword ptr [a]  </span><br><span class="line">00007FF6153018BC  call        func2 (07FF61530102Dh)  </span><br><span class="line">00007FF6153018C1  nop  </span><br><span class="line">func3(a, b);</span><br><span class="line">00007FF6153018C2  mov         edx,dword ptr [b]  </span><br><span class="line">00007FF6153018C5  mov         ecx,dword ptr [a]  </span><br><span class="line">00007FF6153018C8  call        func3 (07FF61530129Eh)  </span><br><span class="line">00007FF6153018CD  nop  </span><br><span class="line">return 0;</span><br><span class="line">00007FF6153018CE  xor         eax,eax  </span><br><span class="line">&#125;</span><br><span class="line">00007FF6153018D0  lea         rsp,[rbp+108h]  </span><br><span class="line">00007FF6153018D7  pop         rdi  </span><br><span class="line">00007FF6153018D8  pop         rbp  </span><br><span class="line">00007FF6153018D9  ret  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">00CD1890  push        ebp  </span><br><span class="line">00CD1891  mov         ebp,esp  </span><br><span class="line">00CD1893  sub         esp,0D8h  </span><br><span class="line">00CD1899  push        ebx  </span><br><span class="line">00CD189A  push        esi  </span><br><span class="line">00CD189B  push        edi  </span><br><span class="line">00CD189C  lea         edi,[ebp-18h]  </span><br><span class="line">00CD189F  mov         ecx,6  </span><br><span class="line">00CD18A4  mov         eax,0CCCCCCCCh  </span><br><span class="line">00CD18A9  rep stos    dword ptr es:[edi]  </span><br><span class="line">00CD18AB  mov         ecx,offset _CC37DA75_a@c (0CDC008h)  </span><br><span class="line">00CD18B0  call        @__CheckForDebuggerJustMyCode@4 (0CD1325h)  </span><br><span class="line">00CD18B5  nop  </span><br><span class="line">int a, b;</span><br><span class="line">a = 2;</span><br><span class="line">00CD18B6  mov         dword ptr [a],2  </span><br><span class="line">b = 3;</span><br><span class="line">00CD18BD  mov         dword ptr [b],3  </span><br><span class="line"></span><br><span class="line">func1(a, b);</span><br><span class="line">00CD18C4  mov         eax,dword ptr [b]  </span><br><span class="line">00CD18C7  push        eax  </span><br><span class="line">00CD18C8  mov         ecx,dword ptr [a]  </span><br><span class="line">00CD18CB  push        ecx  </span><br><span class="line">00CD18CC  call        _func1 (0CD1366h)  </span><br><span class="line">00CD18D1  add         esp,8  </span><br><span class="line">func2(a, b);</span><br><span class="line">00CD18D4  mov         eax,dword ptr [b]  </span><br><span class="line">00CD18D7  push        eax  </span><br><span class="line">00CD18D8  mov         ecx,dword ptr [a]  </span><br><span class="line">00CD18DB  push        ecx  </span><br><span class="line">00CD18DC  call        _func2@8 (0CD105Fh)  </span><br><span class="line">00CD18E1  nop  </span><br><span class="line">func3(a, b);</span><br><span class="line">00CD18E2  mov         edx,dword ptr [b]  </span><br><span class="line">00CD18E5  mov         ecx,dword ptr [a]  </span><br><span class="line">00CD18E8  call        @func3@8 (0CD105Ah)  </span><br><span class="line">00CD18ED  nop  </span><br><span class="line">return 0;</span><br><span class="line">00CD18EE  xor         eax,eax  </span><br><span class="line">&#125;</span><br><span class="line">00CD18F0  pop         edi  </span><br><span class="line">00CD18F1  pop         esi  </span><br><span class="line">00CD18F2  pop         ebx  </span><br><span class="line">00CD18F3  add         esp,0D8h  </span><br><span class="line">00CD18F9  cmp         ebp,esp  </span><br><span class="line">00CD18FB  call        __RTC_CheckEsp (0CD1249h)  </span><br><span class="line">00CD1900  mov         esp,ebp  </span><br><span class="line">00CD1902  pop         ebp  </span><br><span class="line">00CD1903  ret  </span><br></pre></td></tr></table></figure><p>可以看出对于cdecl的func1，它push了两次4字节后，在主调函数add了回来(栈是反的)<br>而func2和func3都没有这个步骤，说明cdecl使得主调函数去保持栈平衡。<br>同时func3会先把参数传给寄存器。说明fastcall的目的是先不使用栈而是寄存器传参。</p><p>在func2内部：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int __stdcall func2(int a, int b) &#123;</span><br><span class="line">00CD1840  push        ebp  </span><br><span class="line">00CD1841  mov         ebp,esp  </span><br><span class="line">00CD1843  sub         esp,0C0h  </span><br><span class="line">00CD1849  push        ebx  </span><br><span class="line">00CD184A  push        esi  </span><br><span class="line">00CD184B  push        edi  </span><br><span class="line">00CD184C  mov         edi,ebp  </span><br><span class="line">00CD184E  xor         ecx,ecx  </span><br><span class="line">00CD1850  mov         eax,0CCCCCCCCh  </span><br><span class="line">00CD1855  rep stos    dword ptr es:[edi]  </span><br><span class="line">00CD1857  mov         ecx,offset _CC37DA75_a@c (0CDC008h)  </span><br><span class="line">00CD185C  call        @__CheckForDebuggerJustMyCode@4 (0CD1325h)  </span><br><span class="line">00CD1861  nop  </span><br><span class="line">return a + b;</span><br><span class="line">00CD1862  mov         eax,dword ptr [a]  </span><br><span class="line">00CD1865  add         eax,dword ptr [b]  </span><br><span class="line">&#125;</span><br><span class="line">00CD1868  pop         edi  </span><br><span class="line">00CD1869  pop         esi  </span><br><span class="line">00CD186A  pop         ebx  </span><br><span class="line">00CD186B  add         esp,0C0h  </span><br><span class="line">00CD1871  cmp         ebp,esp  </span><br><span class="line">00CD1873  call        __RTC_CheckEsp (0CD1249h)  </span><br><span class="line">00CD1878  mov         esp,ebp  </span><br><span class="line">00CD187A  pop         ebp  </span><br><span class="line">00CD187B  ret         8  </span><br></pre></td></tr></table></figure><p>这个ret 8表示返回时弹出栈顶8字节:     C3 xx xx</p><p>然后是研究fastcall前几个参数都是给哪些寄存器存放的<br>x86：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">func3(a, b, a, b, b, a, b, a, a, b, a, a, b, a);</span><br><span class="line">00B618D2  mov         eax,dword ptr [a]  </span><br><span class="line">00B618D5  push        eax  </span><br><span class="line">00B618D6  mov         ecx,dword ptr [b]  </span><br><span class="line">00B618D9  push        ecx  </span><br><span class="line">00B618DA  mov         edx,dword ptr [a]  </span><br><span class="line">00B618DD  push        edx  </span><br><span class="line">00B618DE  mov         eax,dword ptr [a]  </span><br><span class="line">00B618E1  push        eax  </span><br><span class="line">00B618E2  mov         ecx,dword ptr [b]  </span><br><span class="line">00B618E5  push        ecx  </span><br><span class="line">00B618E6  mov         edx,dword ptr [a]  </span><br><span class="line">00B618E9  push        edx  </span><br><span class="line">00B618EA  mov         eax,dword ptr [a]  </span><br><span class="line">00B618ED  push        eax  </span><br><span class="line">00B618EE  mov         ecx,dword ptr [b]  </span><br><span class="line">00B618F1  push        ecx  </span><br><span class="line">00B618F2  mov         edx,dword ptr [a]  </span><br><span class="line">00B618F5  push        edx  </span><br><span class="line">00B618F6  mov         eax,dword ptr [b]  </span><br><span class="line">00B618F9  push        eax  </span><br><span class="line">00B618FA  mov         ecx,dword ptr [b]  </span><br><span class="line">00B618FD  push        ecx  </span><br><span class="line">00B618FE  mov         edx,dword ptr [a]  </span><br><span class="line">00B61901  push        edx  </span><br><span class="line">00B61902  mov         edx,dword ptr [b]  </span><br><span class="line">00B61905  mov         ecx,dword ptr [a]  </span><br><span class="line">00B61908  call        @func3@56 (0B613C0h)  </span><br><span class="line">00B6190D  nop  </span><br></pre></td></tr></table></figure><p>参数先从右至左依次压栈，然后最左侧两个参数分别存在ecx和edx<br>在x64下，依然是从左至右依次压栈，最左侧4个参数分别存在rcx，rdx，r8，r9寄存器中</p><p>linux下：</p><p>分别为rdi,rsi,rdx,rcx,r8,r9</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>在<a href="https://blog.csdn.net/a3192048/article/details/82084374">调用约定__cdecl、__stdcall和__fastcall的区别_win call stdcall-CSDN博客</a>这篇上看到了这些说法：</p><blockquote><h2 id="cdecl的特点"><a href="#cdecl的特点" class="headerlink" title="__cdecl的特点"></a>__cdecl的特点</h2><p>__cdecl 是 C Declaration 的缩写，表示 C 和 C++ 默认的函数调用约定。是C&#x2F;C++和MFCX的默认调用约定。</p><ul><li>按从右至左的顺序压参数入栈、。</li><li>由调用者把参数弹出栈。切记：对于传送参数的内存栈是由调用者来维护的，返回值在EAX中。因此对于像printf这样可变参数的函数必须用这种约定。</li><li>编译器在编译的时候对这种调用规则的函数生成修饰名的时候，在输出函数名前加上一个下划线前缀，格式为_function。如函数int add(int a, int b)的修饰名是_add。</li></ul><p>(1).为了验证参数是从右至左的顺序压栈的，我们可以看下面这段代码，Debug进行单步调试,可以看到我们的调用栈会先进入GetC()，再进入GetB()，最后进入GetA()。 </p><p>(2).第二点“调用者把参数弹出栈”，这是编译器的工作，暂时没办法验证。要深入了解这部分，需要学习汇编语言相关的知识。</p><p>(3).函数的修饰名，这个可以通过对编译出的dll使用VS的”dumpbin &#x2F;exports <em>ProjectName</em>.dll”命令进行查看(后面章节会进行详细介绍)，或直接打开.obj文件查找对应的方法名(如搜索add)。</p><p>从代码和程序调试的层面考虑，参数的压栈顺序和栈的清理我们都不用太观注，因为这是编译器的决定的，我们改变不了。但第三点却常常困扰我们，因为如果不弄清楚这点，在多个库之间(如dll、lib、exe)相互调用、依赖时常常出出现莫名其妙的错误。</p></blockquote><blockquote><h2 id="stdcall的特点"><a href="#stdcall的特点" class="headerlink" title="__stdcall的特点"></a>__stdcall的特点</h2><p>__stdcall是Standard Call的缩写，是C++的标准调用方式,当然这是微软定义的标准，__stdcall通常用于Win32 API中(可查看WINAPI的定义)。  <strong>microsoft的vc默认的是__cdecl方式，而windows API则是__stdcall，如果用vc开发dll给其他语言用，则应该指定__stdcall方式。堆栈由谁清除这个很重要，如果是要写汇编函数给C调用，一定要小心堆栈的清除工作，如果是__cdecl方式的函数，则函数本身（如果不用汇编写）则不需要关心保存参数的堆栈的清除，但是如果是__stdcall的规则，一定要在函数退出(ret)前恢复堆栈。</strong></p><ul><li>按从右至左的顺序压参数入栈。</li><li>由被调用者把参数弹出栈。切记：函数自己在退出时清空堆栈，返回值在EAX中。</li><li>__stdcall调用约定在输出函数名前加上一个下划线前缀，后面加上一个“@”符号和其参数的字节数，格式为_function@number。如函数int sub(int a, int b)的修饰名是_sub@8。</li></ul></blockquote><blockquote><h2 id="fastcall的特点"><a href="#fastcall的特点" class="headerlink" title="__fastcall的特点"></a>__fastcall的特点</h2><p>__fastcall调用的主要特点就是快，因为它是通过寄存器来传送参数的。</p><ul><li>实际上__fastcall用ECX和EDX传送前两个DWORD或更小的参数，剩下的参数仍自右向左压栈传送，被调用的函数在返回前清理传送参数的内存栈。</li><li>__fastcall调用约定在输出函数名前加上一个“@”符号，后面也是一个“@”符号和其参数的字节数，格式为@function@number,如double multi(double a, double b)的修饰名是@multi@16。</li><li>__fastcall和__stdcall很象，唯一差别就是头两个参数通过寄存器传送。注意通过寄存器传送的两个参数是从左向右的，即第1个参数进ECX，第2个进EDX，其他参数是从右向左的入栈，返回仍然通过EAX。</li></ul></blockquote><blockquote><h2 id="thiscall"><a href="#thiscall" class="headerlink" title="__thiscall"></a>__thiscall</h2><p>__thiscall是C++类成员函数缺省的调用约定，但它没有显示的声明形式。因为在C++类中，成员函数调用还有一个this指针参数，因此必须特殊处理，thiscall调用约定的特点：</p><ul><li>参数入栈：参数从右向左入栈</li><li>this指针入栈：如果参数个数确定，this指针通过ecx传递给被调用者；如果参数个数不确定，this指针在所有参数压栈后被压入栈。</li><li>栈恢复：对参数个数不定的，调用者清理栈，否则函数自己清理栈。</li></ul></blockquote><h3 id="SYSCALL"><a href="#SYSCALL" class="headerlink" title="SYSCALL"></a>SYSCALL</h3><p>系统调用是用户层调用内核层函数的接口<br>使用系统调用需要遵循一定格式。</p><p>内核中有一个系统调用表，是内核函数的指针数组。对应函数在数组中的下标为系统调用号。使用SYSCALL时</p><p>rax寄存器中存放调用号，参数放在：ebx，ecx，edx，esi，edi</p><p>windows上触发为int 2E;Linux上为int 80;</p><p>尝试在windows上调用，失败。</p><h2 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h2><p>通过ROP即面向返回的编程可以实现对NX保护的绕过。ROPgadget是一个用来寻找gadgets的工具</p><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-capstone</span><br><span class="line">git clone https://github.com/JonathanSalwan/ROPgadget.git</span><br><span class="line">cd ROPgadget</span><br><span class="line">sudo python setup.py install</span><br><span class="line">ROPgadget --help</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary 程序名称 | grep &quot;汇编指令&quot;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary 文件名 | grep rdi</span><br></pre></td></tr></table></figure><p>获得所有和rdi有关的指令地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary 文件名 --only &quot;pop|ret&quot;</span><br></pre></td></tr></table></figure><p>获得所有和pop或者retrdi有关的地址</p><p><a href="https://leeyuxun.github.io/ROPgadget%E4%BB%8B%E7%BB%8D.html#:~:text=ROPgadget">ROPgadget 介绍 | Leeyuxun の note</a><br>这篇很不错，怕丢了，复制一下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">usage: ROPgadget <span class="comment">[-h]</span> <span class="comment">[-v]</span> <span class="comment">[-c]</span> <span class="comment">[--binary &lt;binary&gt;]</span> <span class="comment">[--opcode &lt;opcodes&gt;]</span></span><br><span class="line">                 <span class="comment">[--string &lt;string&gt;]</span> <span class="comment">[--memstr &lt;string&gt;]</span> <span class="comment">[--depth &lt;nbyte&gt;]</span></span><br><span class="line">                 <span class="comment">[--only &lt;key&gt;]</span> <span class="comment">[--filter &lt;key&gt;]</span> <span class="comment">[--range &lt;start-end&gt;]</span></span><br><span class="line">                 <span class="comment">[--badbytes &lt;byte&gt;]</span> <span class="comment">[--rawArch &lt;arch&gt;]</span> <span class="comment">[--rawMode &lt;mode&gt;]</span></span><br><span class="line">                 <span class="comment">[--rawEndian &lt;endian&gt;]</span> <span class="comment">[--re &lt;re&gt;]</span> <span class="comment">[--offset &lt;hexaddr&gt;]</span></span><br><span class="line">                 <span class="comment">[--ropchain]</span> <span class="comment">[--thumb]</span> <span class="comment">[--console]</span> <span class="comment">[--norop]</span> <span class="comment">[--nojop]</span></span><br><span class="line">                 <span class="comment">[--callPreceded]</span> <span class="comment">[--nosys]</span> <span class="comment">[--multibr]</span> <span class="comment">[--all]</span> <span class="comment">[--noinstr]</span></span><br><span class="line">                 <span class="comment">[--dump]</span> <span class="comment">[--silent]</span> <span class="comment">[--align ALIGN]</span> <span class="comment">[--mipsrop &lt;rtype&gt;]</span></span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-h, <span class="comment">--help           显示帮助文档</span></span><br><span class="line">-v, <span class="comment">--version        版本号</span></span><br><span class="line">-c, <span class="comment">--checkUpdate    检测新版本是否可用</span></span><br><span class="line"><span class="comment">--binary &lt;binary&gt;    指定二进制文件进行分析</span></span><br><span class="line"><span class="comment">--opcode &lt;opcodes&gt;   在可执行段中查找opcode</span></span><br><span class="line"><span class="comment">--string &lt;string&gt;    在可读的段中查找字符串</span></span><br><span class="line"><span class="comment">--memstr &lt;string&gt;    查找单个byte在所有的可执行段中</span></span><br><span class="line"><span class="comment">--depth &lt;nbyte&gt;      搜索引擎的深度(默认10)</span></span><br><span class="line"><span class="comment">--only &lt;key&gt;         只显示特别的指令</span></span><br><span class="line"><span class="comment">--filter &lt;key&gt;       过滤特定指令</span></span><br><span class="line"><span class="comment">--range &lt;start-end&gt;  在地址之间寻找(0x...-0x...)</span></span><br><span class="line"><span class="comment">--badbytes &lt;byte&gt;    拒绝特定指令在gadget的地址下</span></span><br><span class="line"><span class="comment">--rawArch &lt;arch&gt;     指定文件架构: x86|arm|arm64|sparc|mips|ppc</span></span><br><span class="line"><span class="comment">--rawMode &lt;mode&gt;     指定源文件的mode: 32|64|arm|thumb</span></span><br><span class="line"><span class="comment">--rawEndian &lt;endian&gt; 指定源文件的字节顺序: little|big</span></span><br><span class="line"><span class="comment">--re &lt;re&gt;            正则表达式</span></span><br><span class="line"><span class="comment">--offset &lt;hexaddr&gt;   指定gadget的地址偏移</span></span><br><span class="line"><span class="comment">--ropchain           ROP链的生成</span></span><br><span class="line"><span class="comment">--thumb              在ARM架构下使用搜索引擎thumb 模式</span></span><br><span class="line"><span class="comment">--console            使用交互终端对于搜索引擎</span></span><br><span class="line"><span class="comment">--norop              禁止ROP搜索引擎</span></span><br><span class="line"><span class="comment">--nojop              禁止JOP搜索引擎</span></span><br><span class="line"><span class="comment">--callPreceded       仅显示call-preceded的gadgets</span></span><br><span class="line"><span class="comment">--nosys              禁止SYS搜索引擎</span></span><br><span class="line"><span class="comment">--multibr            允许多分枝gadgets</span></span><br><span class="line"><span class="comment">--all                禁止删除重复的gadgets，即显示所有</span></span><br><span class="line"><span class="comment">--noinstr            禁止gadget指令终端打印</span></span><br><span class="line"><span class="comment">--dump               输出gadget bytes</span></span><br><span class="line"><span class="comment">--align ALIGN        对齐gadget地址（以字节为单位）</span></span><br><span class="line"><span class="comment">--mipsrop &lt;rtype&gt;    MIPSj架构下有用的gadget查找器: stackfinder|system|tails|lia0|registers</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86</span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--ropchain</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--depth</span> <span class="number">3</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--string</span> <span class="string">&quot;main&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--string</span> <span class="string">&quot;m..n&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--opcode</span> c9c3</span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--only</span> <span class="string">&quot;mov|ret&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--only</span> <span class="string">&quot;mov|pop|xor|ret&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--filter</span> <span class="string">&quot;xchg|add|sub|cmov.*&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--norop</span> <span class="attr">--nosys</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--range</span> <span class="number">0</span>x08041000-<span class="number">0</span>x08042000</span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--string</span> <span class="selector-tag">main</span> <span class="attr">--range</span> <span class="number">0</span>x080c9aaa-<span class="number">0</span>x080c9aba</span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--memstr</span> <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--console</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-Linux-x86 <span class="attr">--badbytes</span> <span class="string">&quot;00|01-1f|7f|42&quot;</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/Linux_lib64<span class="selector-class">.so</span> <span class="attr">--offset</span> <span class="number">0</span>xdeadbeef00000000</span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-ARMv7-ls <span class="attr">--depth</span> <span class="number">5</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/elf-ARM64-bash <span class="attr">--depth</span> <span class="number">5</span></span><br><span class="line">ROPgadget<span class="selector-class">.py</span> <span class="attr">--binary</span> ./test-suite-binaries/raw-x86<span class="selector-class">.raw</span> <span class="attr">--rawArch</span>=x86 <span class="attr">--rawMode</span>=<span class="number">32</span></span><br></pre></td></tr></table></figure><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><p>pwntool中用来检查程序开启了什么保护的指令</p><p>直接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e = ELF(“xxx”)</span><br><span class="line">e.checksec()</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Arch:</span>     <span class="string">amd64-64-little</span></span><br><span class="line"><span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line"><span class="attr">Stack:</span>    <span class="literal">No</span> <span class="string">canary</span> <span class="string">found</span></span><br><span class="line"><span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line"><span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x400000)</span></span><br></pre></td></tr></table></figure><h2 id="栈的字节对齐"><a href="#栈的字节对齐" class="headerlink" title="栈的字节对齐"></a>栈的字节对齐</h2><p>这里有一篇写的很好<br><a href="https://www.cnblogs.com/tcctw/p/11333743.html#:~:text=%E6%97%A0%E8%AE%BA%E6%95%B0%E6%8D%AE%E6%98%AF%E5%90%A6%E5%AF%B9%E9%BD%90%EF%BC%8Cx">x86_64 Linux 运行时栈的字节对齐 - 一川official - 博客园 (cnblogs.com)</a></p><blockquote><p>栈的字节对齐，实际是指栈顶指针必须是16字节的整数倍。栈对齐使得在尽可能少的内存访问周期内读取数据，不对齐堆栈指针可能导致严重的性能下降。</p><p>上文我们说，即使数据没有对齐，我们的程序也是可以执行的，只是效率有点低而已，但是某些型号的Intel和AMD处理器，在执行某些实现多媒体操作的SSE指令时，如果数据没有对齐，将无法正确执行。这些指令对16字节内存进行操作，在SSE单元和内存之间传送数据的指令要求内存地址必须是16的倍数。</p><p>因此，任何针对x86_64处理器的编译器和运行时系统都必须保证， 它们分配内存将来可能会被SSE指令使用，所以必须是16字节对齐的，这也就形成了一种标准：</p><ul><li>任何内存分配函数（<code>alloca</code>, <code>malloc</code>, <code>calloc</code>或<code>realloc</code>）生成的块的起始地址都必须是16的倍数。</li><li>大多数函数的栈帧的边界都必须是16字节的倍数。</li></ul><p>如上，在运行时栈中，不仅传递的参数和局部变量要满足字节对齐，我们的栈指针（<code>rsp</code>）也必须是16的倍数。</p></blockquote>]]></content>
    
    
    <summary type="html">学习pwn入门知识</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="pwn" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/pwn/"/>
    
    <category term="基础" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/pwn/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="pwn" scheme="https://www.pri87.vip/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>强网杯2024复现</title>
    <link href="https://www.pri87.vip/posts/a234fc27.html"/>
    <id>https://www.pri87.vip/posts/a234fc27.html</id>
    <published>2024-11-04T14:59:24.000Z</published>
    <updated>2024-11-16T10:27:04.554Z</updated>
    
    <content type="html"><![CDATA[<p>这个题好难QAQ，整个比赛都是被打，我要裂开了</p><h2 id="mips"><a href="#mips" class="headerlink" title="mips"></a>mips</h2><p>纯复现，这里先讲一下我的之前的做题流程</p><p>在代码中，是开辟了一块区域，然后放置加密后的代码，然后再解密，<br>可以直接dump然后修改，确实可以得到正确的输出</p><p>但是输出是假flag，所以它肯定修改了加密的内容，我尝试调试-g但是emu不允许调试，patch了也没用，然后我尝试使用了原本的qemu，倒是可以调试了，但是只能检测假flag。至此，大概能判断真flag在修改过的emu中。然后我尝试了bindiff，但是由于版本不对，有一堆不一样的不好找。</p><p>然后就看wp了，网上一位佬的做法：</p><p><a href="https://www.ctfiot.com/213409.html">强网杯 2024 初赛 Writeup | CTF导航</a></p><p>mmap函数分配的内存地址是固定的，也就是说如果要修改流程，那必然需要直接寻址，直接搜索立即数0x23000可以找到唯一一个调用它的函数</p><p>结果这个还没有调用</p><p>有花，去了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_33D48E</span><span class="params">(_BYTE *input)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [rsp+15h] [rbp-17Bh]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-178h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-174h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+20h] [rbp-170h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+24h] [rbp-16Ch]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+28h] [rbp-168h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+2Ch] [rbp-164h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+30h] [rbp-160h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+34h] [rbp-15Ch]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+3Ch] [rbp-154h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *key1; <span class="comment">// [rsp+40h] [rbp-150h]</span></span><br><span class="line">  _BYTE *out; <span class="comment">// [rsp+48h] [rbp-148h]</span></span><br><span class="line">  _BYTE S[<span class="number">256</span>]; <span class="comment">// [rsp+80h] [rbp-110h] BYREF</span></span><br><span class="line">  __int16 v15; <span class="comment">// [rsp+180h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+188h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(S, <span class="number">0</span>, <span class="keyword">sizeof</span>(S));</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">    S[i] = i;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  key1 = <span class="string">&quot;6105t3&quot;</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = (<span class="type">unsigned</span> __int8)S[v5];</span><br><span class="line">    v10 = (<span class="type">unsigned</span> __int8)(key1++)[(<span class="type">int</span>)(<span class="number">2</span> * (v5 / <span class="number">6</span> - (((<span class="number">2863311531u</span> * (<span class="type">unsigned</span> __int64)v5) &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFC</span>)))];</span><br><span class="line">    v4 += v9 + v10;</span><br><span class="line">    v1 = v5++;</span><br><span class="line">    S[v1] = S[(<span class="type">unsigned</span> __int8)v4];</span><br><span class="line">    S[(<span class="type">unsigned</span> __int8)v4] = v9;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v5 != <span class="number">256</span> );</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  out = (_BYTE *)mallocLike(<span class="number">256LL</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">22</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = (<span class="type">unsigned</span> __int8)S[(<span class="type">unsigned</span> __int8)++v6];</span><br><span class="line">    v7 += v11;</span><br><span class="line">    S[(<span class="type">unsigned</span> __int8)v6] = S[(<span class="type">unsigned</span> __int8)v7];</span><br><span class="line">    S[(<span class="type">unsigned</span> __int8)v7] = v11;</span><br><span class="line">    v2 = ((((<span class="type">unsigned</span> __int8)(input[j + <span class="number">5</span>] &lt;&lt; <span class="number">7</span>) | (input[j + <span class="number">5</span>] &gt;&gt; <span class="number">1</span>)) &lt;&lt; <span class="number">6</span>) ^ <span class="number">0xC0</span> | ((<span class="type">unsigned</span> __int8)((input[j + <span class="number">5</span>] &lt;&lt; <span class="number">7</span>) | (input[j + <span class="number">5</span>] &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) ^ <span class="number">0x3B</span>) ^ <span class="number">0xBE</span>;</span><br><span class="line">    out[j] = S[(<span class="type">unsigned</span> __int8)(S[(<span class="type">unsigned</span> __int8)v6] + v11)] ^ key2[j &amp; <span class="number">3</span>] ^ (((<span class="type">unsigned</span> __int8)(((<span class="number">16</span> * (((<span class="number">32</span> * v2) | (v2 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>)) | ((<span class="type">unsigned</span> __int8)(((<span class="number">32</span> * v2) | (v2 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>) &gt;&gt; <span class="number">4</span>)) ^ <span class="number">0xDE</span>) &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * (((<span class="number">16</span> * (((<span class="number">32</span> * v2) | (v2 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>)) | ((<span class="type">unsigned</span> __int8)(((<span class="number">32</span> * v2) | (v2 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>) &gt;&gt; <span class="number">4</span>)) ^ <span class="number">0xDE</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v16 != __readfsqword(<span class="number">0x28</span>u) )</span><br><span class="line">    sub_616930();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很明显是加密函数</p><p>上面异或的地方用的是一个地址，但是不会调，找交叉引用发现模了255，那就爆破</p><p>像这种抽象的反编译的代码就直接抄吧QAQ</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">int</span> v1; <span class="comment">// edx</span></span><br><span class="line"><span class="type">unsigned</span> __int8 v2; <span class="comment">// [rsp+15h] [rbp-17Bh]</span></span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-178h]</span></span><br><span class="line"><span class="type">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-174h]</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+20h] [rbp-170h]</span></span><br><span class="line"><span class="type">int</span> k; <span class="comment">// [rsp+24h] [rbp-16Ch]</span></span><br><span class="line"><span class="type">int</span> l; <span class="comment">// [rsp+28h] [rbp-168h]</span></span><br><span class="line"><span class="comment">//int j; // [rsp+2Ch] [rbp-164h]</span></span><br><span class="line"><span class="type">int</span> v9; <span class="comment">// [rsp+30h] [rbp-160h]</span></span><br><span class="line"><span class="type">int</span> v10; <span class="comment">// [rsp+34h] [rbp-15Ch]</span></span><br><span class="line"><span class="type">int</span> m; <span class="comment">// [rsp+3Ch] [rbp-154h]</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* key1; <span class="comment">// [rsp+40h] [rbp-150h]</span></span><br><span class="line">BYTE out[<span class="number">24</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// [rsp+48h] [rbp-148h]</span></span><br><span class="line"><span class="comment">//BYTE S[256]; // [rsp+80h] [rbp-110h] BYREF</span></span><br><span class="line">BYTE Sbak[<span class="number">256</span>];</span><br><span class="line">BYTE Sbak2[<span class="number">256</span>];</span><br><span class="line">__int16 v15; <span class="comment">// [rsp+180h] [rbp-10h]</span></span><br><span class="line"><span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+188h] [rbp-8h]</span></span><br><span class="line"><span class="type">char</span>* key = <span class="string">&quot;6105t3&quot;</span>;</span><br><span class="line"><span class="type">int</span> i_1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">S[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">key = <span class="string">&quot;6105t3&quot;</span>;</span><br><span class="line">v5 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v10 = (<span class="type">unsigned</span> __int8)S[i_1];</span><br><span class="line">BYTE v11 = (<span class="type">unsigned</span> __int8)(key++)[(<span class="type">int</span>)(<span class="number">2</span> * (i_1 / <span class="number">6</span> - (((<span class="number">0xAAAAAAAB</span> * (<span class="type">unsigned</span> __int64)i_1) &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFC</span>)))];</span><br><span class="line">v5 += v10 + v11;</span><br><span class="line">v1 = i_1++;</span><br><span class="line">S[v1] = S[(<span class="type">unsigned</span> __int8)v5];</span><br><span class="line">S[(<span class="type">unsigned</span> __int8)v5] = v10;</span><br><span class="line">&#125; <span class="keyword">while</span> (i_1 != <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key2[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0xDE</span>, <span class="number">0xAD</span>, <span class="number">0xBE</span>, <span class="number">0xEF</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> input[<span class="number">21</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> last[<span class="number">256</span>][<span class="number">24</span>] =</span><br><span class="line">&#123;</span><br><span class="line">  &#123;<span class="number">0xc4</span>, <span class="number">0xee</span>, <span class="number">0x3c</span>, <span class="number">0xbb</span>, <span class="number">0xe7</span>, <span class="number">0xfd</span>, <span class="number">0x67</span>, <span class="number">0x9d</span>, <span class="number">0xf8</span>, <span class="number">0x97</span>, <span class="number">0x68</span>, <span class="number">0x1d</span>, <span class="number">0xdf</span>, <span class="number">0x7f</span>, <span class="number">0xc7</span>, <span class="number">0x80</span>, <span class="number">0x0b</span>, <span class="number">0xf9</span>, <span class="number">0x4b</span>, <span class="number">0xa0</span>, <span class="number">0x46</span>, <span class="number">0x91</span>&#125;,</span><br><span class="line">&#123; <span class="number">0xc5</span>, <span class="number">0xef</span>, <span class="number">0x3d</span>, <span class="number">0xba</span>, <span class="number">0xe6</span>, <span class="number">0xfc</span>, <span class="number">0x66</span>, <span class="number">0x9c</span>, <span class="number">0xf9</span>, <span class="number">0x96</span>, <span class="number">0x69</span>, <span class="number">0x1c</span>, <span class="number">0xde</span>, <span class="number">0x7e</span>, <span class="number">0xc6</span>, <span class="number">0x81</span>, <span class="number">0x0a</span>, <span class="number">0xf8</span>, <span class="number">0x4a</span>, <span class="number">0xa1</span>, <span class="number">0x47</span>, <span class="number">0x90</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc6</span>, <span class="number">0xec</span>, <span class="number">0x3e</span>, <span class="number">0xb9</span>, <span class="number">0xe5</span>, <span class="number">0xff</span>, <span class="number">0x65</span>, <span class="number">0x9f</span>, <span class="number">0xfa</span>, <span class="number">0x95</span>, <span class="number">0x6a</span>, <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0x7d</span>, <span class="number">0xc5</span>, <span class="number">0x82</span>, <span class="number">0x09</span>, <span class="number">0xfb</span>, <span class="number">0x49</span>, <span class="number">0xa2</span>, <span class="number">0x44</span>, <span class="number">0x93</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc7</span>, <span class="number">0xed</span>, <span class="number">0x3f</span>, <span class="number">0xb8</span>, <span class="number">0xe4</span>, <span class="number">0xfe</span>, <span class="number">0x64</span>, <span class="number">0x9e</span>, <span class="number">0xfb</span>, <span class="number">0x94</span>, <span class="number">0x6b</span>, <span class="number">0x1e</span>, <span class="number">0xdc</span>, <span class="number">0x7c</span>, <span class="number">0xc4</span>, <span class="number">0x83</span>, <span class="number">0x08</span>, <span class="number">0xfa</span>, <span class="number">0x48</span>, <span class="number">0xa3</span>, <span class="number">0x45</span>, <span class="number">0x92</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc0</span>, <span class="number">0xea</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0xe3</span>, <span class="number">0xf9</span>, <span class="number">0x63</span>, <span class="number">0x99</span>, <span class="number">0xfc</span>, <span class="number">0x93</span>, <span class="number">0x6c</span>, <span class="number">0x19</span>, <span class="number">0xdb</span>, <span class="number">0x7b</span>, <span class="number">0xc3</span>, <span class="number">0x84</span>, <span class="number">0x0f</span>, <span class="number">0xfd</span>, <span class="number">0x4f</span>, <span class="number">0xa4</span>, <span class="number">0x42</span>, <span class="number">0x95</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc1</span>, <span class="number">0xeb</span>, <span class="number">0x39</span>, <span class="number">0xbe</span>, <span class="number">0xe2</span>, <span class="number">0xf8</span>, <span class="number">0x62</span>, <span class="number">0x98</span>, <span class="number">0xfd</span>, <span class="number">0x92</span>, <span class="number">0x6d</span>, <span class="number">0x18</span>, <span class="number">0xda</span>, <span class="number">0x7a</span>, <span class="number">0xc2</span>, <span class="number">0x85</span>, <span class="number">0x0e</span>, <span class="number">0xfc</span>, <span class="number">0x4e</span>, <span class="number">0xa5</span>, <span class="number">0x43</span>, <span class="number">0x94</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc2</span>, <span class="number">0xe8</span>, <span class="number">0x3a</span>, <span class="number">0xbd</span>, <span class="number">0xe1</span>, <span class="number">0xfb</span>, <span class="number">0x61</span>, <span class="number">0x9b</span>, <span class="number">0xfe</span>, <span class="number">0x91</span>, <span class="number">0x6e</span>, <span class="number">0x1b</span>, <span class="number">0xd9</span>, <span class="number">0x79</span>, <span class="number">0xc1</span>, <span class="number">0x86</span>, <span class="number">0x0d</span>, <span class="number">0xff</span>, <span class="number">0x4d</span>, <span class="number">0xa6</span>, <span class="number">0x40</span>, <span class="number">0x97</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc3</span>, <span class="number">0xe9</span>, <span class="number">0x3b</span>, <span class="number">0xbc</span>, <span class="number">0xe0</span>, <span class="number">0xfa</span>, <span class="number">0x60</span>, <span class="number">0x9a</span>, <span class="number">0xff</span>, <span class="number">0x90</span>, <span class="number">0x6f</span>, <span class="number">0x1a</span>, <span class="number">0xd8</span>, <span class="number">0x78</span>, <span class="number">0xc0</span>, <span class="number">0x87</span>, <span class="number">0x0c</span>, <span class="number">0xfe</span>, <span class="number">0x4c</span>, <span class="number">0xa7</span>, <span class="number">0x41</span>, <span class="number">0x96</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xcc</span>, <span class="number">0xe6</span>, <span class="number">0x34</span>, <span class="number">0xb3</span>, <span class="number">0xef</span>, <span class="number">0xf5</span>, <span class="number">0x6f</span>, <span class="number">0x95</span>, <span class="number">0xf0</span>, <span class="number">0x9f</span>, <span class="number">0x60</span>, <span class="number">0x15</span>, <span class="number">0xd7</span>, <span class="number">0x77</span>, <span class="number">0xcf</span>, <span class="number">0x88</span>, <span class="number">0x03</span>, <span class="number">0xf1</span>, <span class="number">0x43</span>, <span class="number">0xa8</span>, <span class="number">0x4e</span>, <span class="number">0x99</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xcd</span>, <span class="number">0xe7</span>, <span class="number">0x35</span>, <span class="number">0xb2</span>, <span class="number">0xee</span>, <span class="number">0xf4</span>, <span class="number">0x6e</span>, <span class="number">0x94</span>, <span class="number">0xf1</span>, <span class="number">0x9e</span>, <span class="number">0x61</span>, <span class="number">0x14</span>, <span class="number">0xd6</span>, <span class="number">0x76</span>, <span class="number">0xce</span>, <span class="number">0x89</span>, <span class="number">0x02</span>, <span class="number">0xf0</span>, <span class="number">0x42</span>, <span class="number">0xa9</span>, <span class="number">0x4f</span>, <span class="number">0x98</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xce</span>, <span class="number">0xe4</span>, <span class="number">0x36</span>, <span class="number">0xb1</span>, <span class="number">0xed</span>, <span class="number">0xf7</span>, <span class="number">0x6d</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0x9d</span>, <span class="number">0x62</span>, <span class="number">0x17</span>, <span class="number">0xd5</span>, <span class="number">0x75</span>, <span class="number">0xcd</span>, <span class="number">0x8a</span>, <span class="number">0x01</span>, <span class="number">0xf3</span>, <span class="number">0x41</span>, <span class="number">0xaa</span>, <span class="number">0x4c</span>, <span class="number">0x9b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xcf</span>, <span class="number">0xe5</span>, <span class="number">0x37</span>, <span class="number">0xb0</span>, <span class="number">0xec</span>, <span class="number">0xf6</span>, <span class="number">0x6c</span>, <span class="number">0x96</span>, <span class="number">0xf3</span>, <span class="number">0x9c</span>, <span class="number">0x63</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0x74</span>, <span class="number">0xcc</span>, <span class="number">0x8b</span>, <span class="number">0x00</span>, <span class="number">0xf2</span>, <span class="number">0x40</span>, <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x9a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc8</span>, <span class="number">0xe2</span>, <span class="number">0x30</span>, <span class="number">0xb7</span>, <span class="number">0xeb</span>, <span class="number">0xf1</span>, <span class="number">0x6b</span>, <span class="number">0x91</span>, <span class="number">0xf4</span>, <span class="number">0x9b</span>, <span class="number">0x64</span>, <span class="number">0x11</span>, <span class="number">0xd3</span>, <span class="number">0x73</span>, <span class="number">0xcb</span>, <span class="number">0x8c</span>, <span class="number">0x07</span>, <span class="number">0xf5</span>, <span class="number">0x47</span>, <span class="number">0xac</span>, <span class="number">0x4a</span>, <span class="number">0x9d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xc9</span>, <span class="number">0xe3</span>, <span class="number">0x31</span>, <span class="number">0xb6</span>, <span class="number">0xea</span>, <span class="number">0xf0</span>, <span class="number">0x6a</span>, <span class="number">0x90</span>, <span class="number">0xf5</span>, <span class="number">0x9a</span>, <span class="number">0x65</span>, <span class="number">0x10</span>, <span class="number">0xd2</span>, <span class="number">0x72</span>, <span class="number">0xca</span>, <span class="number">0x8d</span>, <span class="number">0x06</span>, <span class="number">0xf4</span>, <span class="number">0x46</span>, <span class="number">0xad</span>, <span class="number">0x4b</span>, <span class="number">0x9c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xca</span>, <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0xb5</span>, <span class="number">0xe9</span>, <span class="number">0xf3</span>, <span class="number">0x69</span>, <span class="number">0x93</span>, <span class="number">0xf6</span>, <span class="number">0x99</span>, <span class="number">0x66</span>, <span class="number">0x13</span>, <span class="number">0xd1</span>, <span class="number">0x71</span>, <span class="number">0xc9</span>, <span class="number">0x8e</span>, <span class="number">0x05</span>, <span class="number">0xf7</span>, <span class="number">0x45</span>, <span class="number">0xae</span>, <span class="number">0x48</span>, <span class="number">0x9f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xcb</span>, <span class="number">0xe1</span>, <span class="number">0x33</span>, <span class="number">0xb4</span>, <span class="number">0xe8</span>, <span class="number">0xf2</span>, <span class="number">0x68</span>, <span class="number">0x92</span>, <span class="number">0xf7</span>, <span class="number">0x98</span>, <span class="number">0x67</span>, <span class="number">0x12</span>, <span class="number">0xd0</span>, <span class="number">0x70</span>, <span class="number">0xc8</span>, <span class="number">0x8f</span>, <span class="number">0x04</span>, <span class="number">0xf6</span>, <span class="number">0x44</span>, <span class="number">0xaf</span>, <span class="number">0x49</span>, <span class="number">0x9e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd4</span>, <span class="number">0xfe</span>, <span class="number">0x2c</span>, <span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0xed</span>, <span class="number">0x77</span>, <span class="number">0x8d</span>, <span class="number">0xe8</span>, <span class="number">0x87</span>, <span class="number">0x78</span>, <span class="number">0x0d</span>, <span class="number">0xcf</span>, <span class="number">0x6f</span>, <span class="number">0xd7</span>, <span class="number">0x90</span>, <span class="number">0x1b</span>, <span class="number">0xe9</span>, <span class="number">0x5b</span>, <span class="number">0xb0</span>, <span class="number">0x56</span>, <span class="number">0x81</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd5</span>, <span class="number">0xff</span>, <span class="number">0x2d</span>, <span class="number">0xaa</span>, <span class="number">0xf6</span>, <span class="number">0xec</span>, <span class="number">0x76</span>, <span class="number">0x8c</span>, <span class="number">0xe9</span>, <span class="number">0x86</span>, <span class="number">0x79</span>, <span class="number">0x0c</span>, <span class="number">0xce</span>, <span class="number">0x6e</span>, <span class="number">0xd6</span>, <span class="number">0x91</span>, <span class="number">0x1a</span>, <span class="number">0xe8</span>, <span class="number">0x5a</span>, <span class="number">0xb1</span>, <span class="number">0x57</span>, <span class="number">0x80</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd6</span>, <span class="number">0xfc</span>, <span class="number">0x2e</span>, <span class="number">0xa9</span>, <span class="number">0xf5</span>, <span class="number">0xef</span>, <span class="number">0x75</span>, <span class="number">0x8f</span>, <span class="number">0xea</span>, <span class="number">0x85</span>, <span class="number">0x7a</span>, <span class="number">0x0f</span>, <span class="number">0xcd</span>, <span class="number">0x6d</span>, <span class="number">0xd5</span>, <span class="number">0x92</span>, <span class="number">0x19</span>, <span class="number">0xeb</span>, <span class="number">0x59</span>, <span class="number">0xb2</span>, <span class="number">0x54</span>, <span class="number">0x83</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd7</span>, <span class="number">0xfd</span>, <span class="number">0x2f</span>, <span class="number">0xa8</span>, <span class="number">0xf4</span>, <span class="number">0xee</span>, <span class="number">0x74</span>, <span class="number">0x8e</span>, <span class="number">0xeb</span>, <span class="number">0x84</span>, <span class="number">0x7b</span>, <span class="number">0x0e</span>, <span class="number">0xcc</span>, <span class="number">0x6c</span>, <span class="number">0xd4</span>, <span class="number">0x93</span>, <span class="number">0x18</span>, <span class="number">0xea</span>, <span class="number">0x58</span>, <span class="number">0xb3</span>, <span class="number">0x55</span>, <span class="number">0x82</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd0</span>, <span class="number">0xfa</span>, <span class="number">0x28</span>, <span class="number">0xaf</span>, <span class="number">0xf3</span>, <span class="number">0xe9</span>, <span class="number">0x73</span>, <span class="number">0x89</span>, <span class="number">0xec</span>, <span class="number">0x83</span>, <span class="number">0x7c</span>, <span class="number">0x09</span>, <span class="number">0xcb</span>, <span class="number">0x6b</span>, <span class="number">0xd3</span>, <span class="number">0x94</span>, <span class="number">0x1f</span>, <span class="number">0xed</span>, <span class="number">0x5f</span>, <span class="number">0xb4</span>, <span class="number">0x52</span>, <span class="number">0x85</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd1</span>, <span class="number">0xfb</span>, <span class="number">0x29</span>, <span class="number">0xae</span>, <span class="number">0xf2</span>, <span class="number">0xe8</span>, <span class="number">0x72</span>, <span class="number">0x88</span>, <span class="number">0xed</span>, <span class="number">0x82</span>, <span class="number">0x7d</span>, <span class="number">0x08</span>, <span class="number">0xca</span>, <span class="number">0x6a</span>, <span class="number">0xd2</span>, <span class="number">0x95</span>, <span class="number">0x1e</span>, <span class="number">0xec</span>, <span class="number">0x5e</span>, <span class="number">0xb5</span>, <span class="number">0x53</span>, <span class="number">0x84</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd2</span>, <span class="number">0xf8</span>, <span class="number">0x2a</span>, <span class="number">0xad</span>, <span class="number">0xf1</span>, <span class="number">0xeb</span>, <span class="number">0x71</span>, <span class="number">0x8b</span>, <span class="number">0xee</span>, <span class="number">0x81</span>, <span class="number">0x7e</span>, <span class="number">0x0b</span>, <span class="number">0xc9</span>, <span class="number">0x69</span>, <span class="number">0xd1</span>, <span class="number">0x96</span>, <span class="number">0x1d</span>, <span class="number">0xef</span>, <span class="number">0x5d</span>, <span class="number">0xb6</span>, <span class="number">0x50</span>, <span class="number">0x87</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd3</span>, <span class="number">0xf9</span>, <span class="number">0x2b</span>, <span class="number">0xac</span>, <span class="number">0xf0</span>, <span class="number">0xea</span>, <span class="number">0x70</span>, <span class="number">0x8a</span>, <span class="number">0xef</span>, <span class="number">0x80</span>, <span class="number">0x7f</span>, <span class="number">0x0a</span>, <span class="number">0xc8</span>, <span class="number">0x68</span>, <span class="number">0xd0</span>, <span class="number">0x97</span>, <span class="number">0x1c</span>, <span class="number">0xee</span>, <span class="number">0x5c</span>, <span class="number">0xb7</span>, <span class="number">0x51</span>, <span class="number">0x86</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xdc</span>, <span class="number">0xf6</span>, <span class="number">0x24</span>, <span class="number">0xa3</span>, <span class="number">0xff</span>, <span class="number">0xe5</span>, <span class="number">0x7f</span>, <span class="number">0x85</span>, <span class="number">0xe0</span>, <span class="number">0x8f</span>, <span class="number">0x70</span>, <span class="number">0x05</span>, <span class="number">0xc7</span>, <span class="number">0x67</span>, <span class="number">0xdf</span>, <span class="number">0x98</span>, <span class="number">0x13</span>, <span class="number">0xe1</span>, <span class="number">0x53</span>, <span class="number">0xb8</span>, <span class="number">0x5e</span>, <span class="number">0x89</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xdd</span>, <span class="number">0xf7</span>, <span class="number">0x25</span>, <span class="number">0xa2</span>, <span class="number">0xfe</span>, <span class="number">0xe4</span>, <span class="number">0x7e</span>, <span class="number">0x84</span>, <span class="number">0xe1</span>, <span class="number">0x8e</span>, <span class="number">0x71</span>, <span class="number">0x04</span>, <span class="number">0xc6</span>, <span class="number">0x66</span>, <span class="number">0xde</span>, <span class="number">0x99</span>, <span class="number">0x12</span>, <span class="number">0xe0</span>, <span class="number">0x52</span>, <span class="number">0xb9</span>, <span class="number">0x5f</span>, <span class="number">0x88</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xde</span>, <span class="number">0xf4</span>, <span class="number">0x26</span>, <span class="number">0xa1</span>, <span class="number">0xfd</span>, <span class="number">0xe7</span>, <span class="number">0x7d</span>, <span class="number">0x87</span>, <span class="number">0xe2</span>, <span class="number">0x8d</span>, <span class="number">0x72</span>, <span class="number">0x07</span>, <span class="number">0xc5</span>, <span class="number">0x65</span>, <span class="number">0xdd</span>, <span class="number">0x9a</span>, <span class="number">0x11</span>, <span class="number">0xe3</span>, <span class="number">0x51</span>, <span class="number">0xba</span>, <span class="number">0x5c</span>, <span class="number">0x8b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xdf</span>, <span class="number">0xf5</span>, <span class="number">0x27</span>, <span class="number">0xa0</span>, <span class="number">0xfc</span>, <span class="number">0xe6</span>, <span class="number">0x7c</span>, <span class="number">0x86</span>, <span class="number">0xe3</span>, <span class="number">0x8c</span>, <span class="number">0x73</span>, <span class="number">0x06</span>, <span class="number">0xc4</span>, <span class="number">0x64</span>, <span class="number">0xdc</span>, <span class="number">0x9b</span>, <span class="number">0x10</span>, <span class="number">0xe2</span>, <span class="number">0x50</span>, <span class="number">0xbb</span>, <span class="number">0x5d</span>, <span class="number">0x8a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd8</span>, <span class="number">0xf2</span>, <span class="number">0x20</span>, <span class="number">0xa7</span>, <span class="number">0xfb</span>, <span class="number">0xe1</span>, <span class="number">0x7b</span>, <span class="number">0x81</span>, <span class="number">0xe4</span>, <span class="number">0x8b</span>, <span class="number">0x74</span>, <span class="number">0x01</span>, <span class="number">0xc3</span>, <span class="number">0x63</span>, <span class="number">0xdb</span>, <span class="number">0x9c</span>, <span class="number">0x17</span>, <span class="number">0xe5</span>, <span class="number">0x57</span>, <span class="number">0xbc</span>, <span class="number">0x5a</span>, <span class="number">0x8d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xd9</span>, <span class="number">0xf3</span>, <span class="number">0x21</span>, <span class="number">0xa6</span>, <span class="number">0xfa</span>, <span class="number">0xe0</span>, <span class="number">0x7a</span>, <span class="number">0x80</span>, <span class="number">0xe5</span>, <span class="number">0x8a</span>, <span class="number">0x75</span>, <span class="number">0x00</span>, <span class="number">0xc2</span>, <span class="number">0x62</span>, <span class="number">0xda</span>, <span class="number">0x9d</span>, <span class="number">0x16</span>, <span class="number">0xe4</span>, <span class="number">0x56</span>, <span class="number">0xbd</span>, <span class="number">0x5b</span>, <span class="number">0x8c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xda</span>, <span class="number">0xf0</span>, <span class="number">0x22</span>, <span class="number">0xa5</span>, <span class="number">0xf9</span>, <span class="number">0xe3</span>, <span class="number">0x79</span>, <span class="number">0x83</span>, <span class="number">0xe6</span>, <span class="number">0x89</span>, <span class="number">0x76</span>, <span class="number">0x03</span>, <span class="number">0xc1</span>, <span class="number">0x61</span>, <span class="number">0xd9</span>, <span class="number">0x9e</span>, <span class="number">0x15</span>, <span class="number">0xe7</span>, <span class="number">0x55</span>, <span class="number">0xbe</span>, <span class="number">0x58</span>, <span class="number">0x8f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xdb</span>, <span class="number">0xf1</span>, <span class="number">0x23</span>, <span class="number">0xa4</span>, <span class="number">0xf8</span>, <span class="number">0xe2</span>, <span class="number">0x78</span>, <span class="number">0x82</span>, <span class="number">0xe7</span>, <span class="number">0x88</span>, <span class="number">0x77</span>, <span class="number">0x02</span>, <span class="number">0xc0</span>, <span class="number">0x60</span>, <span class="number">0xd8</span>, <span class="number">0x9f</span>, <span class="number">0x14</span>, <span class="number">0xe6</span>, <span class="number">0x54</span>, <span class="number">0xbf</span>, <span class="number">0x59</span>, <span class="number">0x8e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe4</span>, <span class="number">0xce</span>, <span class="number">0x1c</span>, <span class="number">0x9b</span>, <span class="number">0xc7</span>, <span class="number">0xdd</span>, <span class="number">0x47</span>, <span class="number">0xbd</span>, <span class="number">0xd8</span>, <span class="number">0xb7</span>, <span class="number">0x48</span>, <span class="number">0x3d</span>, <span class="number">0xff</span>, <span class="number">0x5f</span>, <span class="number">0xe7</span>, <span class="number">0xa0</span>, <span class="number">0x2b</span>, <span class="number">0xd9</span>, <span class="number">0x6b</span>, <span class="number">0x80</span>, <span class="number">0x66</span>, <span class="number">0xb1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe5</span>, <span class="number">0xcf</span>, <span class="number">0x1d</span>, <span class="number">0x9a</span>, <span class="number">0xc6</span>, <span class="number">0xdc</span>, <span class="number">0x46</span>, <span class="number">0xbc</span>, <span class="number">0xd9</span>, <span class="number">0xb6</span>, <span class="number">0x49</span>, <span class="number">0x3c</span>, <span class="number">0xfe</span>, <span class="number">0x5e</span>, <span class="number">0xe6</span>, <span class="number">0xa1</span>, <span class="number">0x2a</span>, <span class="number">0xd8</span>, <span class="number">0x6a</span>, <span class="number">0x81</span>, <span class="number">0x67</span>, <span class="number">0xb0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe6</span>, <span class="number">0xcc</span>, <span class="number">0x1e</span>, <span class="number">0x99</span>, <span class="number">0xc5</span>, <span class="number">0xdf</span>, <span class="number">0x45</span>, <span class="number">0xbf</span>, <span class="number">0xda</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x3f</span>, <span class="number">0xfd</span>, <span class="number">0x5d</span>, <span class="number">0xe5</span>, <span class="number">0xa2</span>, <span class="number">0x29</span>, <span class="number">0xdb</span>, <span class="number">0x69</span>, <span class="number">0x82</span>, <span class="number">0x64</span>, <span class="number">0xb3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe7</span>, <span class="number">0xcd</span>, <span class="number">0x1f</span>, <span class="number">0x98</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0x44</span>, <span class="number">0xbe</span>, <span class="number">0xdb</span>, <span class="number">0xb4</span>, <span class="number">0x4b</span>, <span class="number">0x3e</span>, <span class="number">0xfc</span>, <span class="number">0x5c</span>, <span class="number">0xe4</span>, <span class="number">0xa3</span>, <span class="number">0x28</span>, <span class="number">0xda</span>, <span class="number">0x68</span>, <span class="number">0x83</span>, <span class="number">0x65</span>, <span class="number">0xb2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe0</span>, <span class="number">0xca</span>, <span class="number">0x18</span>, <span class="number">0x9f</span>, <span class="number">0xc3</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0xb9</span>, <span class="number">0xdc</span>, <span class="number">0xb3</span>, <span class="number">0x4c</span>, <span class="number">0x39</span>, <span class="number">0xfb</span>, <span class="number">0x5b</span>, <span class="number">0xe3</span>, <span class="number">0xa4</span>, <span class="number">0x2f</span>, <span class="number">0xdd</span>, <span class="number">0x6f</span>, <span class="number">0x84</span>, <span class="number">0x62</span>, <span class="number">0xb5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe1</span>, <span class="number">0xcb</span>, <span class="number">0x19</span>, <span class="number">0x9e</span>, <span class="number">0xc2</span>, <span class="number">0xd8</span>, <span class="number">0x42</span>, <span class="number">0xb8</span>, <span class="number">0xdd</span>, <span class="number">0xb2</span>, <span class="number">0x4d</span>, <span class="number">0x38</span>, <span class="number">0xfa</span>, <span class="number">0x5a</span>, <span class="number">0xe2</span>, <span class="number">0xa5</span>, <span class="number">0x2e</span>, <span class="number">0xdc</span>, <span class="number">0x6e</span>, <span class="number">0x85</span>, <span class="number">0x63</span>, <span class="number">0xb4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe2</span>, <span class="number">0xc8</span>, <span class="number">0x1a</span>, <span class="number">0x9d</span>, <span class="number">0xc1</span>, <span class="number">0xdb</span>, <span class="number">0x41</span>, <span class="number">0xbb</span>, <span class="number">0xde</span>, <span class="number">0xb1</span>, <span class="number">0x4e</span>, <span class="number">0x3b</span>, <span class="number">0xf9</span>, <span class="number">0x59</span>, <span class="number">0xe1</span>, <span class="number">0xa6</span>, <span class="number">0x2d</span>, <span class="number">0xdf</span>, <span class="number">0x6d</span>, <span class="number">0x86</span>, <span class="number">0x60</span>, <span class="number">0xb7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe3</span>, <span class="number">0xc9</span>, <span class="number">0x1b</span>, <span class="number">0x9c</span>, <span class="number">0xc0</span>, <span class="number">0xda</span>, <span class="number">0x40</span>, <span class="number">0xba</span>, <span class="number">0xdf</span>, <span class="number">0xb0</span>, <span class="number">0x4f</span>, <span class="number">0x3a</span>, <span class="number">0xf8</span>, <span class="number">0x58</span>, <span class="number">0xe0</span>, <span class="number">0xa7</span>, <span class="number">0x2c</span>, <span class="number">0xde</span>, <span class="number">0x6c</span>, <span class="number">0x87</span>, <span class="number">0x61</span>, <span class="number">0xb6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xec</span>, <span class="number">0xc6</span>, <span class="number">0x14</span>, <span class="number">0x93</span>, <span class="number">0xcf</span>, <span class="number">0xd5</span>, <span class="number">0x4f</span>, <span class="number">0xb5</span>, <span class="number">0xd0</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0x35</span>, <span class="number">0xf7</span>, <span class="number">0x57</span>, <span class="number">0xef</span>, <span class="number">0xa8</span>, <span class="number">0x23</span>, <span class="number">0xd1</span>, <span class="number">0x63</span>, <span class="number">0x88</span>, <span class="number">0x6e</span>, <span class="number">0xb9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xed</span>, <span class="number">0xc7</span>, <span class="number">0x15</span>, <span class="number">0x92</span>, <span class="number">0xce</span>, <span class="number">0xd4</span>, <span class="number">0x4e</span>, <span class="number">0xb4</span>, <span class="number">0xd1</span>, <span class="number">0xbe</span>, <span class="number">0x41</span>, <span class="number">0x34</span>, <span class="number">0xf6</span>, <span class="number">0x56</span>, <span class="number">0xee</span>, <span class="number">0xa9</span>, <span class="number">0x22</span>, <span class="number">0xd0</span>, <span class="number">0x62</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xee</span>, <span class="number">0xc4</span>, <span class="number">0x16</span>, <span class="number">0x91</span>, <span class="number">0xcd</span>, <span class="number">0xd7</span>, <span class="number">0x4d</span>, <span class="number">0xb7</span>, <span class="number">0xd2</span>, <span class="number">0xbd</span>, <span class="number">0x42</span>, <span class="number">0x37</span>, <span class="number">0xf5</span>, <span class="number">0x55</span>, <span class="number">0xed</span>, <span class="number">0xaa</span>, <span class="number">0x21</span>, <span class="number">0xd3</span>, <span class="number">0x61</span>, <span class="number">0x8a</span>, <span class="number">0x6c</span>, <span class="number">0xbb</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xef</span>, <span class="number">0xc5</span>, <span class="number">0x17</span>, <span class="number">0x90</span>, <span class="number">0xcc</span>, <span class="number">0xd6</span>, <span class="number">0x4c</span>, <span class="number">0xb6</span>, <span class="number">0xd3</span>, <span class="number">0xbc</span>, <span class="number">0x43</span>, <span class="number">0x36</span>, <span class="number">0xf4</span>, <span class="number">0x54</span>, <span class="number">0xec</span>, <span class="number">0xab</span>, <span class="number">0x20</span>, <span class="number">0xd2</span>, <span class="number">0x60</span>, <span class="number">0x8b</span>, <span class="number">0x6d</span>, <span class="number">0xba</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe8</span>, <span class="number">0xc2</span>, <span class="number">0x10</span>, <span class="number">0x97</span>, <span class="number">0xcb</span>, <span class="number">0xd1</span>, <span class="number">0x4b</span>, <span class="number">0xb1</span>, <span class="number">0xd4</span>, <span class="number">0xbb</span>, <span class="number">0x44</span>, <span class="number">0x31</span>, <span class="number">0xf3</span>, <span class="number">0x53</span>, <span class="number">0xeb</span>, <span class="number">0xac</span>, <span class="number">0x27</span>, <span class="number">0xd5</span>, <span class="number">0x67</span>, <span class="number">0x8c</span>, <span class="number">0x6a</span>, <span class="number">0xbd</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xe9</span>, <span class="number">0xc3</span>, <span class="number">0x11</span>, <span class="number">0x96</span>, <span class="number">0xca</span>, <span class="number">0xd0</span>, <span class="number">0x4a</span>, <span class="number">0xb0</span>, <span class="number">0xd5</span>, <span class="number">0xba</span>, <span class="number">0x45</span>, <span class="number">0x30</span>, <span class="number">0xf2</span>, <span class="number">0x52</span>, <span class="number">0xea</span>, <span class="number">0xad</span>, <span class="number">0x26</span>, <span class="number">0xd4</span>, <span class="number">0x66</span>, <span class="number">0x8d</span>, <span class="number">0x6b</span>, <span class="number">0xbc</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xea</span>, <span class="number">0xc0</span>, <span class="number">0x12</span>, <span class="number">0x95</span>, <span class="number">0xc9</span>, <span class="number">0xd3</span>, <span class="number">0x49</span>, <span class="number">0xb3</span>, <span class="number">0xd6</span>, <span class="number">0xb9</span>, <span class="number">0x46</span>, <span class="number">0x33</span>, <span class="number">0xf1</span>, <span class="number">0x51</span>, <span class="number">0xe9</span>, <span class="number">0xae</span>, <span class="number">0x25</span>, <span class="number">0xd7</span>, <span class="number">0x65</span>, <span class="number">0x8e</span>, <span class="number">0x68</span>, <span class="number">0xbf</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xeb</span>, <span class="number">0xc1</span>, <span class="number">0x13</span>, <span class="number">0x94</span>, <span class="number">0xc8</span>, <span class="number">0xd2</span>, <span class="number">0x48</span>, <span class="number">0xb2</span>, <span class="number">0xd7</span>, <span class="number">0xb8</span>, <span class="number">0x47</span>, <span class="number">0x32</span>, <span class="number">0xf0</span>, <span class="number">0x50</span>, <span class="number">0xe8</span>, <span class="number">0xaf</span>, <span class="number">0x24</span>, <span class="number">0xd6</span>, <span class="number">0x64</span>, <span class="number">0x8f</span>, <span class="number">0x69</span>, <span class="number">0xbe</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf4</span>, <span class="number">0xde</span>, <span class="number">0x0c</span>, <span class="number">0x8b</span>, <span class="number">0xd7</span>, <span class="number">0xcd</span>, <span class="number">0x57</span>, <span class="number">0xad</span>, <span class="number">0xc8</span>, <span class="number">0xa7</span>, <span class="number">0x58</span>, <span class="number">0x2d</span>, <span class="number">0xef</span>, <span class="number">0x4f</span>, <span class="number">0xf7</span>, <span class="number">0xb0</span>, <span class="number">0x3b</span>, <span class="number">0xc9</span>, <span class="number">0x7b</span>, <span class="number">0x90</span>, <span class="number">0x76</span>, <span class="number">0xa1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf5</span>, <span class="number">0xdf</span>, <span class="number">0x0d</span>, <span class="number">0x8a</span>, <span class="number">0xd6</span>, <span class="number">0xcc</span>, <span class="number">0x56</span>, <span class="number">0xac</span>, <span class="number">0xc9</span>, <span class="number">0xa6</span>, <span class="number">0x59</span>, <span class="number">0x2c</span>, <span class="number">0xee</span>, <span class="number">0x4e</span>, <span class="number">0xf6</span>, <span class="number">0xb1</span>, <span class="number">0x3a</span>, <span class="number">0xc8</span>, <span class="number">0x7a</span>, <span class="number">0x91</span>, <span class="number">0x77</span>, <span class="number">0xa0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf6</span>, <span class="number">0xdc</span>, <span class="number">0x0e</span>, <span class="number">0x89</span>, <span class="number">0xd5</span>, <span class="number">0xcf</span>, <span class="number">0x55</span>, <span class="number">0xaf</span>, <span class="number">0xca</span>, <span class="number">0xa5</span>, <span class="number">0x5a</span>, <span class="number">0x2f</span>, <span class="number">0xed</span>, <span class="number">0x4d</span>, <span class="number">0xf5</span>, <span class="number">0xb2</span>, <span class="number">0x39</span>, <span class="number">0xcb</span>, <span class="number">0x79</span>, <span class="number">0x92</span>, <span class="number">0x74</span>, <span class="number">0xa3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf7</span>, <span class="number">0xdd</span>, <span class="number">0x0f</span>, <span class="number">0x88</span>, <span class="number">0xd4</span>, <span class="number">0xce</span>, <span class="number">0x54</span>, <span class="number">0xae</span>, <span class="number">0xcb</span>, <span class="number">0xa4</span>, <span class="number">0x5b</span>, <span class="number">0x2e</span>, <span class="number">0xec</span>, <span class="number">0x4c</span>, <span class="number">0xf4</span>, <span class="number">0xb3</span>, <span class="number">0x38</span>, <span class="number">0xca</span>, <span class="number">0x78</span>, <span class="number">0x93</span>, <span class="number">0x75</span>, <span class="number">0xa2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf0</span>, <span class="number">0xda</span>, <span class="number">0x08</span>, <span class="number">0x8f</span>, <span class="number">0xd3</span>, <span class="number">0xc9</span>, <span class="number">0x53</span>, <span class="number">0xa9</span>, <span class="number">0xcc</span>, <span class="number">0xa3</span>, <span class="number">0x5c</span>, <span class="number">0x29</span>, <span class="number">0xeb</span>, <span class="number">0x4b</span>, <span class="number">0xf3</span>, <span class="number">0xb4</span>, <span class="number">0x3f</span>, <span class="number">0xcd</span>, <span class="number">0x7f</span>, <span class="number">0x94</span>, <span class="number">0x72</span>, <span class="number">0xa5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf1</span>, <span class="number">0xdb</span>, <span class="number">0x09</span>, <span class="number">0x8e</span>, <span class="number">0xd2</span>, <span class="number">0xc8</span>, <span class="number">0x52</span>, <span class="number">0xa8</span>, <span class="number">0xcd</span>, <span class="number">0xa2</span>, <span class="number">0x5d</span>, <span class="number">0x28</span>, <span class="number">0xea</span>, <span class="number">0x4a</span>, <span class="number">0xf2</span>, <span class="number">0xb5</span>, <span class="number">0x3e</span>, <span class="number">0xcc</span>, <span class="number">0x7e</span>, <span class="number">0x95</span>, <span class="number">0x73</span>, <span class="number">0xa4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf2</span>, <span class="number">0xd8</span>, <span class="number">0x0a</span>, <span class="number">0x8d</span>, <span class="number">0xd1</span>, <span class="number">0xcb</span>, <span class="number">0x51</span>, <span class="number">0xab</span>, <span class="number">0xce</span>, <span class="number">0xa1</span>, <span class="number">0x5e</span>, <span class="number">0x2b</span>, <span class="number">0xe9</span>, <span class="number">0x49</span>, <span class="number">0xf1</span>, <span class="number">0xb6</span>, <span class="number">0x3d</span>, <span class="number">0xcf</span>, <span class="number">0x7d</span>, <span class="number">0x96</span>, <span class="number">0x70</span>, <span class="number">0xa7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf3</span>, <span class="number">0xd9</span>, <span class="number">0x0b</span>, <span class="number">0x8c</span>, <span class="number">0xd0</span>, <span class="number">0xca</span>, <span class="number">0x50</span>, <span class="number">0xaa</span>, <span class="number">0xcf</span>, <span class="number">0xa0</span>, <span class="number">0x5f</span>, <span class="number">0x2a</span>, <span class="number">0xe8</span>, <span class="number">0x48</span>, <span class="number">0xf0</span>, <span class="number">0xb7</span>, <span class="number">0x3c</span>, <span class="number">0xce</span>, <span class="number">0x7c</span>, <span class="number">0x97</span>, <span class="number">0x71</span>, <span class="number">0xa6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xfc</span>, <span class="number">0xd6</span>, <span class="number">0x04</span>, <span class="number">0x83</span>, <span class="number">0xdf</span>, <span class="number">0xc5</span>, <span class="number">0x5f</span>, <span class="number">0xa5</span>, <span class="number">0xc0</span>, <span class="number">0xaf</span>, <span class="number">0x50</span>, <span class="number">0x25</span>, <span class="number">0xe7</span>, <span class="number">0x47</span>, <span class="number">0xff</span>, <span class="number">0xb8</span>, <span class="number">0x33</span>, <span class="number">0xc1</span>, <span class="number">0x73</span>, <span class="number">0x98</span>, <span class="number">0x7e</span>, <span class="number">0xa9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xfd</span>, <span class="number">0xd7</span>, <span class="number">0x05</span>, <span class="number">0x82</span>, <span class="number">0xde</span>, <span class="number">0xc4</span>, <span class="number">0x5e</span>, <span class="number">0xa4</span>, <span class="number">0xc1</span>, <span class="number">0xae</span>, <span class="number">0x51</span>, <span class="number">0x24</span>, <span class="number">0xe6</span>, <span class="number">0x46</span>, <span class="number">0xfe</span>, <span class="number">0xb9</span>, <span class="number">0x32</span>, <span class="number">0xc0</span>, <span class="number">0x72</span>, <span class="number">0x99</span>, <span class="number">0x7f</span>, <span class="number">0xa8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xfe</span>, <span class="number">0xd4</span>, <span class="number">0x06</span>, <span class="number">0x81</span>, <span class="number">0xdd</span>, <span class="number">0xc7</span>, <span class="number">0x5d</span>, <span class="number">0xa7</span>, <span class="number">0xc2</span>, <span class="number">0xad</span>, <span class="number">0x52</span>, <span class="number">0x27</span>, <span class="number">0xe5</span>, <span class="number">0x45</span>, <span class="number">0xfd</span>, <span class="number">0xba</span>, <span class="number">0x31</span>, <span class="number">0xc3</span>, <span class="number">0x71</span>, <span class="number">0x9a</span>, <span class="number">0x7c</span>, <span class="number">0xab</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x07</span>, <span class="number">0x80</span>, <span class="number">0xdc</span>, <span class="number">0xc6</span>, <span class="number">0x5c</span>, <span class="number">0xa6</span>, <span class="number">0xc3</span>, <span class="number">0xac</span>, <span class="number">0x53</span>, <span class="number">0x26</span>, <span class="number">0xe4</span>, <span class="number">0x44</span>, <span class="number">0xfc</span>, <span class="number">0xbb</span>, <span class="number">0x30</span>, <span class="number">0xc2</span>, <span class="number">0x70</span>, <span class="number">0x9b</span>, <span class="number">0x7d</span>, <span class="number">0xaa</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf8</span>, <span class="number">0xd2</span>, <span class="number">0x00</span>, <span class="number">0x87</span>, <span class="number">0xdb</span>, <span class="number">0xc1</span>, <span class="number">0x5b</span>, <span class="number">0xa1</span>, <span class="number">0xc4</span>, <span class="number">0xab</span>, <span class="number">0x54</span>, <span class="number">0x21</span>, <span class="number">0xe3</span>, <span class="number">0x43</span>, <span class="number">0xfb</span>, <span class="number">0xbc</span>, <span class="number">0x37</span>, <span class="number">0xc5</span>, <span class="number">0x77</span>, <span class="number">0x9c</span>, <span class="number">0x7a</span>, <span class="number">0xad</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xf9</span>, <span class="number">0xd3</span>, <span class="number">0x01</span>, <span class="number">0x86</span>, <span class="number">0xda</span>, <span class="number">0xc0</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0xc5</span>, <span class="number">0xaa</span>, <span class="number">0x55</span>, <span class="number">0x20</span>, <span class="number">0xe2</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xbd</span>, <span class="number">0x36</span>, <span class="number">0xc4</span>, <span class="number">0x76</span>, <span class="number">0x9d</span>, <span class="number">0x7b</span>, <span class="number">0xac</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xfa</span>, <span class="number">0xd0</span>, <span class="number">0x02</span>, <span class="number">0x85</span>, <span class="number">0xd9</span>, <span class="number">0xc3</span>, <span class="number">0x59</span>, <span class="number">0xa3</span>, <span class="number">0xc6</span>, <span class="number">0xa9</span>, <span class="number">0x56</span>, <span class="number">0x23</span>, <span class="number">0xe1</span>, <span class="number">0x41</span>, <span class="number">0xf9</span>, <span class="number">0xbe</span>, <span class="number">0x35</span>, <span class="number">0xc7</span>, <span class="number">0x75</span>, <span class="number">0x9e</span>, <span class="number">0x78</span>, <span class="number">0xaf</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xfb</span>, <span class="number">0xd1</span>, <span class="number">0x03</span>, <span class="number">0x84</span>, <span class="number">0xd8</span>, <span class="number">0xc2</span>, <span class="number">0x58</span>, <span class="number">0xa2</span>, <span class="number">0xc7</span>, <span class="number">0xa8</span>, <span class="number">0x57</span>, <span class="number">0x22</span>, <span class="number">0xe0</span>, <span class="number">0x40</span>, <span class="number">0xf8</span>, <span class="number">0xbf</span>, <span class="number">0x34</span>, <span class="number">0xc6</span>, <span class="number">0x74</span>, <span class="number">0x9f</span>, <span class="number">0x79</span>, <span class="number">0xae</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x84</span>, <span class="number">0xae</span>, <span class="number">0x7c</span>, <span class="number">0xfb</span>, <span class="number">0xa7</span>, <span class="number">0xbd</span>, <span class="number">0x27</span>, <span class="number">0xdd</span>, <span class="number">0xb8</span>, <span class="number">0xd7</span>, <span class="number">0x28</span>, <span class="number">0x5d</span>, <span class="number">0x9f</span>, <span class="number">0x3f</span>, <span class="number">0x87</span>, <span class="number">0xc0</span>, <span class="number">0x4b</span>, <span class="number">0xb9</span>, <span class="number">0x0b</span>, <span class="number">0xe0</span>, <span class="number">0x06</span>, <span class="number">0xd1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x85</span>, <span class="number">0xaf</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0xa6</span>, <span class="number">0xbc</span>, <span class="number">0x26</span>, <span class="number">0xdc</span>, <span class="number">0xb9</span>, <span class="number">0xd6</span>, <span class="number">0x29</span>, <span class="number">0x5c</span>, <span class="number">0x9e</span>, <span class="number">0x3e</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x4a</span>, <span class="number">0xb8</span>, <span class="number">0x0a</span>, <span class="number">0xe1</span>, <span class="number">0x07</span>, <span class="number">0xd0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x86</span>, <span class="number">0xac</span>, <span class="number">0x7e</span>, <span class="number">0xf9</span>, <span class="number">0xa5</span>, <span class="number">0xbf</span>, <span class="number">0x25</span>, <span class="number">0xdf</span>, <span class="number">0xba</span>, <span class="number">0xd5</span>, <span class="number">0x2a</span>, <span class="number">0x5f</span>, <span class="number">0x9d</span>, <span class="number">0x3d</span>, <span class="number">0x85</span>, <span class="number">0xc2</span>, <span class="number">0x49</span>, <span class="number">0xbb</span>, <span class="number">0x09</span>, <span class="number">0xe2</span>, <span class="number">0x04</span>, <span class="number">0xd3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x87</span>, <span class="number">0xad</span>, <span class="number">0x7f</span>, <span class="number">0xf8</span>, <span class="number">0xa4</span>, <span class="number">0xbe</span>, <span class="number">0x24</span>, <span class="number">0xde</span>, <span class="number">0xbb</span>, <span class="number">0xd4</span>, <span class="number">0x2b</span>, <span class="number">0x5e</span>, <span class="number">0x9c</span>, <span class="number">0x3c</span>, <span class="number">0x84</span>, <span class="number">0xc3</span>, <span class="number">0x48</span>, <span class="number">0xba</span>, <span class="number">0x08</span>, <span class="number">0xe3</span>, <span class="number">0x05</span>, <span class="number">0xd2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x80</span>, <span class="number">0xaa</span>, <span class="number">0x78</span>, <span class="number">0xff</span>, <span class="number">0xa3</span>, <span class="number">0xb9</span>, <span class="number">0x23</span>, <span class="number">0xd9</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x2c</span>, <span class="number">0x59</span>, <span class="number">0x9b</span>, <span class="number">0x3b</span>, <span class="number">0x83</span>, <span class="number">0xc4</span>, <span class="number">0x4f</span>, <span class="number">0xbd</span>, <span class="number">0x0f</span>, <span class="number">0xe4</span>, <span class="number">0x02</span>, <span class="number">0xd5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x81</span>, <span class="number">0xab</span>, <span class="number">0x79</span>, <span class="number">0xfe</span>, <span class="number">0xa2</span>, <span class="number">0xb8</span>, <span class="number">0x22</span>, <span class="number">0xd8</span>, <span class="number">0xbd</span>, <span class="number">0xd2</span>, <span class="number">0x2d</span>, <span class="number">0x58</span>, <span class="number">0x9a</span>, <span class="number">0x3a</span>, <span class="number">0x82</span>, <span class="number">0xc5</span>, <span class="number">0x4e</span>, <span class="number">0xbc</span>, <span class="number">0x0e</span>, <span class="number">0xe5</span>, <span class="number">0x03</span>, <span class="number">0xd4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x82</span>, <span class="number">0xa8</span>, <span class="number">0x7a</span>, <span class="number">0xfd</span>, <span class="number">0xa1</span>, <span class="number">0xbb</span>, <span class="number">0x21</span>, <span class="number">0xdb</span>, <span class="number">0xbe</span>, <span class="number">0xd1</span>, <span class="number">0x2e</span>, <span class="number">0x5b</span>, <span class="number">0x99</span>, <span class="number">0x39</span>, <span class="number">0x81</span>, <span class="number">0xc6</span>, <span class="number">0x4d</span>, <span class="number">0xbf</span>, <span class="number">0x0d</span>, <span class="number">0xe6</span>, <span class="number">0x00</span>, <span class="number">0xd7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x83</span>, <span class="number">0xa9</span>, <span class="number">0x7b</span>, <span class="number">0xfc</span>, <span class="number">0xa0</span>, <span class="number">0xba</span>, <span class="number">0x20</span>, <span class="number">0xda</span>, <span class="number">0xbf</span>, <span class="number">0xd0</span>, <span class="number">0x2f</span>, <span class="number">0x5a</span>, <span class="number">0x98</span>, <span class="number">0x38</span>, <span class="number">0x80</span>, <span class="number">0xc7</span>, <span class="number">0x4c</span>, <span class="number">0xbe</span>, <span class="number">0x0c</span>, <span class="number">0xe7</span>, <span class="number">0x01</span>, <span class="number">0xd6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8c</span>, <span class="number">0xa6</span>, <span class="number">0x74</span>, <span class="number">0xf3</span>, <span class="number">0xaf</span>, <span class="number">0xb5</span>, <span class="number">0x2f</span>, <span class="number">0xd5</span>, <span class="number">0xb0</span>, <span class="number">0xdf</span>, <span class="number">0x20</span>, <span class="number">0x55</span>, <span class="number">0x97</span>, <span class="number">0x37</span>, <span class="number">0x8f</span>, <span class="number">0xc8</span>, <span class="number">0x43</span>, <span class="number">0xb1</span>, <span class="number">0x03</span>, <span class="number">0xe8</span>, <span class="number">0x0e</span>, <span class="number">0xd9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8d</span>, <span class="number">0xa7</span>, <span class="number">0x75</span>, <span class="number">0xf2</span>, <span class="number">0xae</span>, <span class="number">0xb4</span>, <span class="number">0x2e</span>, <span class="number">0xd4</span>, <span class="number">0xb1</span>, <span class="number">0xde</span>, <span class="number">0x21</span>, <span class="number">0x54</span>, <span class="number">0x96</span>, <span class="number">0x36</span>, <span class="number">0x8e</span>, <span class="number">0xc9</span>, <span class="number">0x42</span>, <span class="number">0xb0</span>, <span class="number">0x02</span>, <span class="number">0xe9</span>, <span class="number">0x0f</span>, <span class="number">0xd8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8e</span>, <span class="number">0xa4</span>, <span class="number">0x76</span>, <span class="number">0xf1</span>, <span class="number">0xad</span>, <span class="number">0xb7</span>, <span class="number">0x2d</span>, <span class="number">0xd7</span>, <span class="number">0xb2</span>, <span class="number">0xdd</span>, <span class="number">0x22</span>, <span class="number">0x57</span>, <span class="number">0x95</span>, <span class="number">0x35</span>, <span class="number">0x8d</span>, <span class="number">0xca</span>, <span class="number">0x41</span>, <span class="number">0xb3</span>, <span class="number">0x01</span>, <span class="number">0xea</span>, <span class="number">0x0c</span>, <span class="number">0xdb</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8f</span>, <span class="number">0xa5</span>, <span class="number">0x77</span>, <span class="number">0xf0</span>, <span class="number">0xac</span>, <span class="number">0xb6</span>, <span class="number">0x2c</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0xdc</span>, <span class="number">0x23</span>, <span class="number">0x56</span>, <span class="number">0x94</span>, <span class="number">0x34</span>, <span class="number">0x8c</span>, <span class="number">0xcb</span>, <span class="number">0x40</span>, <span class="number">0xb2</span>, <span class="number">0x00</span>, <span class="number">0xeb</span>, <span class="number">0x0d</span>, <span class="number">0xda</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x88</span>, <span class="number">0xa2</span>, <span class="number">0x70</span>, <span class="number">0xf7</span>, <span class="number">0xab</span>, <span class="number">0xb1</span>, <span class="number">0x2b</span>, <span class="number">0xd1</span>, <span class="number">0xb4</span>, <span class="number">0xdb</span>, <span class="number">0x24</span>, <span class="number">0x51</span>, <span class="number">0x93</span>, <span class="number">0x33</span>, <span class="number">0x8b</span>, <span class="number">0xcc</span>, <span class="number">0x47</span>, <span class="number">0xb5</span>, <span class="number">0x07</span>, <span class="number">0xec</span>, <span class="number">0x0a</span>, <span class="number">0xdd</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x89</span>, <span class="number">0xa3</span>, <span class="number">0x71</span>, <span class="number">0xf6</span>, <span class="number">0xaa</span>, <span class="number">0xb0</span>, <span class="number">0x2a</span>, <span class="number">0xd0</span>, <span class="number">0xb5</span>, <span class="number">0xda</span>, <span class="number">0x25</span>, <span class="number">0x50</span>, <span class="number">0x92</span>, <span class="number">0x32</span>, <span class="number">0x8a</span>, <span class="number">0xcd</span>, <span class="number">0x46</span>, <span class="number">0xb4</span>, <span class="number">0x06</span>, <span class="number">0xed</span>, <span class="number">0x0b</span>, <span class="number">0xdc</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8a</span>, <span class="number">0xa0</span>, <span class="number">0x72</span>, <span class="number">0xf5</span>, <span class="number">0xa9</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xd3</span>, <span class="number">0xb6</span>, <span class="number">0xd9</span>, <span class="number">0x26</span>, <span class="number">0x53</span>, <span class="number">0x91</span>, <span class="number">0x31</span>, <span class="number">0x89</span>, <span class="number">0xce</span>, <span class="number">0x45</span>, <span class="number">0xb7</span>, <span class="number">0x05</span>, <span class="number">0xee</span>, <span class="number">0x08</span>, <span class="number">0xdf</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x8b</span>, <span class="number">0xa1</span>, <span class="number">0x73</span>, <span class="number">0xf4</span>, <span class="number">0xa8</span>, <span class="number">0xb2</span>, <span class="number">0x28</span>, <span class="number">0xd2</span>, <span class="number">0xb7</span>, <span class="number">0xd8</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x90</span>, <span class="number">0x30</span>, <span class="number">0x88</span>, <span class="number">0xcf</span>, <span class="number">0x44</span>, <span class="number">0xb6</span>, <span class="number">0x04</span>, <span class="number">0xef</span>, <span class="number">0x09</span>, <span class="number">0xde</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x94</span>, <span class="number">0xbe</span>, <span class="number">0x6c</span>, <span class="number">0xeb</span>, <span class="number">0xb7</span>, <span class="number">0xad</span>, <span class="number">0x37</span>, <span class="number">0xcd</span>, <span class="number">0xa8</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>, <span class="number">0x4d</span>, <span class="number">0x8f</span>, <span class="number">0x2f</span>, <span class="number">0x97</span>, <span class="number">0xd0</span>, <span class="number">0x5b</span>, <span class="number">0xa9</span>, <span class="number">0x1b</span>, <span class="number">0xf0</span>, <span class="number">0x16</span>, <span class="number">0xc1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x95</span>, <span class="number">0xbf</span>, <span class="number">0x6d</span>, <span class="number">0xea</span>, <span class="number">0xb6</span>, <span class="number">0xac</span>, <span class="number">0x36</span>, <span class="number">0xcc</span>, <span class="number">0xa9</span>, <span class="number">0xc6</span>, <span class="number">0x39</span>, <span class="number">0x4c</span>, <span class="number">0x8e</span>, <span class="number">0x2e</span>, <span class="number">0x96</span>, <span class="number">0xd1</span>, <span class="number">0x5a</span>, <span class="number">0xa8</span>, <span class="number">0x1a</span>, <span class="number">0xf1</span>, <span class="number">0x17</span>, <span class="number">0xc0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x96</span>, <span class="number">0xbc</span>, <span class="number">0x6e</span>, <span class="number">0xe9</span>, <span class="number">0xb5</span>, <span class="number">0xaf</span>, <span class="number">0x35</span>, <span class="number">0xcf</span>, <span class="number">0xaa</span>, <span class="number">0xc5</span>, <span class="number">0x3a</span>, <span class="number">0x4f</span>, <span class="number">0x8d</span>, <span class="number">0x2d</span>, <span class="number">0x95</span>, <span class="number">0xd2</span>, <span class="number">0x59</span>, <span class="number">0xab</span>, <span class="number">0x19</span>, <span class="number">0xf2</span>, <span class="number">0x14</span>, <span class="number">0xc3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x97</span>, <span class="number">0xbd</span>, <span class="number">0x6f</span>, <span class="number">0xe8</span>, <span class="number">0xb4</span>, <span class="number">0xae</span>, <span class="number">0x34</span>, <span class="number">0xce</span>, <span class="number">0xab</span>, <span class="number">0xc4</span>, <span class="number">0x3b</span>, <span class="number">0x4e</span>, <span class="number">0x8c</span>, <span class="number">0x2c</span>, <span class="number">0x94</span>, <span class="number">0xd3</span>, <span class="number">0x58</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xf3</span>, <span class="number">0x15</span>, <span class="number">0xc2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x90</span>, <span class="number">0xba</span>, <span class="number">0x68</span>, <span class="number">0xef</span>, <span class="number">0xb3</span>, <span class="number">0xa9</span>, <span class="number">0x33</span>, <span class="number">0xc9</span>, <span class="number">0xac</span>, <span class="number">0xc3</span>, <span class="number">0x3c</span>, <span class="number">0x49</span>, <span class="number">0x8b</span>, <span class="number">0x2b</span>, <span class="number">0x93</span>, <span class="number">0xd4</span>, <span class="number">0x5f</span>, <span class="number">0xad</span>, <span class="number">0x1f</span>, <span class="number">0xf4</span>, <span class="number">0x12</span>, <span class="number">0xc5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x91</span>, <span class="number">0xbb</span>, <span class="number">0x69</span>, <span class="number">0xee</span>, <span class="number">0xb2</span>, <span class="number">0xa8</span>, <span class="number">0x32</span>, <span class="number">0xc8</span>, <span class="number">0xad</span>, <span class="number">0xc2</span>, <span class="number">0x3d</span>, <span class="number">0x48</span>, <span class="number">0x8a</span>, <span class="number">0x2a</span>, <span class="number">0x92</span>, <span class="number">0xd5</span>, <span class="number">0x5e</span>, <span class="number">0xac</span>, <span class="number">0x1e</span>, <span class="number">0xf5</span>, <span class="number">0x13</span>, <span class="number">0xc4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x92</span>, <span class="number">0xb8</span>, <span class="number">0x6a</span>, <span class="number">0xed</span>, <span class="number">0xb1</span>, <span class="number">0xab</span>, <span class="number">0x31</span>, <span class="number">0xcb</span>, <span class="number">0xae</span>, <span class="number">0xc1</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0x89</span>, <span class="number">0x29</span>, <span class="number">0x91</span>, <span class="number">0xd6</span>, <span class="number">0x5d</span>, <span class="number">0xaf</span>, <span class="number">0x1d</span>, <span class="number">0xf6</span>, <span class="number">0x10</span>, <span class="number">0xc7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x93</span>, <span class="number">0xb9</span>, <span class="number">0x6b</span>, <span class="number">0xec</span>, <span class="number">0xb0</span>, <span class="number">0xaa</span>, <span class="number">0x30</span>, <span class="number">0xca</span>, <span class="number">0xaf</span>, <span class="number">0xc0</span>, <span class="number">0x3f</span>, <span class="number">0x4a</span>, <span class="number">0x88</span>, <span class="number">0x28</span>, <span class="number">0x90</span>, <span class="number">0xd7</span>, <span class="number">0x5c</span>, <span class="number">0xae</span>, <span class="number">0x1c</span>, <span class="number">0xf7</span>, <span class="number">0x11</span>, <span class="number">0xc6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9c</span>, <span class="number">0xb6</span>, <span class="number">0x64</span>, <span class="number">0xe3</span>, <span class="number">0xbf</span>, <span class="number">0xa5</span>, <span class="number">0x3f</span>, <span class="number">0xc5</span>, <span class="number">0xa0</span>, <span class="number">0xcf</span>, <span class="number">0x30</span>, <span class="number">0x45</span>, <span class="number">0x87</span>, <span class="number">0x27</span>, <span class="number">0x9f</span>, <span class="number">0xd8</span>, <span class="number">0x53</span>, <span class="number">0xa1</span>, <span class="number">0x13</span>, <span class="number">0xf8</span>, <span class="number">0x1e</span>, <span class="number">0xc9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9d</span>, <span class="number">0xb7</span>, <span class="number">0x65</span>, <span class="number">0xe2</span>, <span class="number">0xbe</span>, <span class="number">0xa4</span>, <span class="number">0x3e</span>, <span class="number">0xc4</span>, <span class="number">0xa1</span>, <span class="number">0xce</span>, <span class="number">0x31</span>, <span class="number">0x44</span>, <span class="number">0x86</span>, <span class="number">0x26</span>, <span class="number">0x9e</span>, <span class="number">0xd9</span>, <span class="number">0x52</span>, <span class="number">0xa0</span>, <span class="number">0x12</span>, <span class="number">0xf9</span>, <span class="number">0x1f</span>, <span class="number">0xc8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9e</span>, <span class="number">0xb4</span>, <span class="number">0x66</span>, <span class="number">0xe1</span>, <span class="number">0xbd</span>, <span class="number">0xa7</span>, <span class="number">0x3d</span>, <span class="number">0xc7</span>, <span class="number">0xa2</span>, <span class="number">0xcd</span>, <span class="number">0x32</span>, <span class="number">0x47</span>, <span class="number">0x85</span>, <span class="number">0x25</span>, <span class="number">0x9d</span>, <span class="number">0xda</span>, <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x11</span>, <span class="number">0xfa</span>, <span class="number">0x1c</span>, <span class="number">0xcb</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9f</span>, <span class="number">0xb5</span>, <span class="number">0x67</span>, <span class="number">0xe0</span>, <span class="number">0xbc</span>, <span class="number">0xa6</span>, <span class="number">0x3c</span>, <span class="number">0xc6</span>, <span class="number">0xa3</span>, <span class="number">0xcc</span>, <span class="number">0x33</span>, <span class="number">0x46</span>, <span class="number">0x84</span>, <span class="number">0x24</span>, <span class="number">0x9c</span>, <span class="number">0xdb</span>, <span class="number">0x50</span>, <span class="number">0xa2</span>, <span class="number">0x10</span>, <span class="number">0xfb</span>, <span class="number">0x1d</span>, <span class="number">0xca</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x98</span>, <span class="number">0xb2</span>, <span class="number">0x60</span>, <span class="number">0xe7</span>, <span class="number">0xbb</span>, <span class="number">0xa1</span>, <span class="number">0x3b</span>, <span class="number">0xc1</span>, <span class="number">0xa4</span>, <span class="number">0xcb</span>, <span class="number">0x34</span>, <span class="number">0x41</span>, <span class="number">0x83</span>, <span class="number">0x23</span>, <span class="number">0x9b</span>, <span class="number">0xdc</span>, <span class="number">0x57</span>, <span class="number">0xa5</span>, <span class="number">0x17</span>, <span class="number">0xfc</span>, <span class="number">0x1a</span>, <span class="number">0xcd</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x99</span>, <span class="number">0xb3</span>, <span class="number">0x61</span>, <span class="number">0xe6</span>, <span class="number">0xba</span>, <span class="number">0xa0</span>, <span class="number">0x3a</span>, <span class="number">0xc0</span>, <span class="number">0xa5</span>, <span class="number">0xca</span>, <span class="number">0x35</span>, <span class="number">0x40</span>, <span class="number">0x82</span>, <span class="number">0x22</span>, <span class="number">0x9a</span>, <span class="number">0xdd</span>, <span class="number">0x56</span>, <span class="number">0xa4</span>, <span class="number">0x16</span>, <span class="number">0xfd</span>, <span class="number">0x1b</span>, <span class="number">0xcc</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9a</span>, <span class="number">0xb0</span>, <span class="number">0x62</span>, <span class="number">0xe5</span>, <span class="number">0xb9</span>, <span class="number">0xa3</span>, <span class="number">0x39</span>, <span class="number">0xc3</span>, <span class="number">0xa6</span>, <span class="number">0xc9</span>, <span class="number">0x36</span>, <span class="number">0x43</span>, <span class="number">0x81</span>, <span class="number">0x21</span>, <span class="number">0x99</span>, <span class="number">0xde</span>, <span class="number">0x55</span>, <span class="number">0xa7</span>, <span class="number">0x15</span>, <span class="number">0xfe</span>, <span class="number">0x18</span>, <span class="number">0xcf</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x9b</span>, <span class="number">0xb1</span>, <span class="number">0x63</span>, <span class="number">0xe4</span>, <span class="number">0xb8</span>, <span class="number">0xa2</span>, <span class="number">0x38</span>, <span class="number">0xc2</span>, <span class="number">0xa7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x42</span>, <span class="number">0x80</span>, <span class="number">0x20</span>, <span class="number">0x98</span>, <span class="number">0xdf</span>, <span class="number">0x54</span>, <span class="number">0xa6</span>, <span class="number">0x14</span>, <span class="number">0xff</span>, <span class="number">0x19</span>, <span class="number">0xce</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa4</span>, <span class="number">0x8e</span>, <span class="number">0x5c</span>, <span class="number">0xdb</span>, <span class="number">0x87</span>, <span class="number">0x9d</span>, <span class="number">0x07</span>, <span class="number">0xfd</span>, <span class="number">0x98</span>, <span class="number">0xf7</span>, <span class="number">0x08</span>, <span class="number">0x7d</span>, <span class="number">0xbf</span>, <span class="number">0x1f</span>, <span class="number">0xa7</span>, <span class="number">0xe0</span>, <span class="number">0x6b</span>, <span class="number">0x99</span>, <span class="number">0x2b</span>, <span class="number">0xc0</span>, <span class="number">0x26</span>, <span class="number">0xf1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa5</span>, <span class="number">0x8f</span>, <span class="number">0x5d</span>, <span class="number">0xda</span>, <span class="number">0x86</span>, <span class="number">0x9c</span>, <span class="number">0x06</span>, <span class="number">0xfc</span>, <span class="number">0x99</span>, <span class="number">0xf6</span>, <span class="number">0x09</span>, <span class="number">0x7c</span>, <span class="number">0xbe</span>, <span class="number">0x1e</span>, <span class="number">0xa6</span>, <span class="number">0xe1</span>, <span class="number">0x6a</span>, <span class="number">0x98</span>, <span class="number">0x2a</span>, <span class="number">0xc1</span>, <span class="number">0x27</span>, <span class="number">0xf0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa6</span>, <span class="number">0x8c</span>, <span class="number">0x5e</span>, <span class="number">0xd9</span>, <span class="number">0x85</span>, <span class="number">0x9f</span>, <span class="number">0x05</span>, <span class="number">0xff</span>, <span class="number">0x9a</span>, <span class="number">0xf5</span>, <span class="number">0x0a</span>, <span class="number">0x7f</span>, <span class="number">0xbd</span>, <span class="number">0x1d</span>, <span class="number">0xa5</span>, <span class="number">0xe2</span>, <span class="number">0x69</span>, <span class="number">0x9b</span>, <span class="number">0x29</span>, <span class="number">0xc2</span>, <span class="number">0x24</span>, <span class="number">0xf3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x5f</span>, <span class="number">0xd8</span>, <span class="number">0x84</span>, <span class="number">0x9e</span>, <span class="number">0x04</span>, <span class="number">0xfe</span>, <span class="number">0x9b</span>, <span class="number">0xf4</span>, <span class="number">0x0b</span>, <span class="number">0x7e</span>, <span class="number">0xbc</span>, <span class="number">0x1c</span>, <span class="number">0xa4</span>, <span class="number">0xe3</span>, <span class="number">0x68</span>, <span class="number">0x9a</span>, <span class="number">0x28</span>, <span class="number">0xc3</span>, <span class="number">0x25</span>, <span class="number">0xf2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa0</span>, <span class="number">0x8a</span>, <span class="number">0x58</span>, <span class="number">0xdf</span>, <span class="number">0x83</span>, <span class="number">0x99</span>, <span class="number">0x03</span>, <span class="number">0xf9</span>, <span class="number">0x9c</span>, <span class="number">0xf3</span>, <span class="number">0x0c</span>, <span class="number">0x79</span>, <span class="number">0xbb</span>, <span class="number">0x1b</span>, <span class="number">0xa3</span>, <span class="number">0xe4</span>, <span class="number">0x6f</span>, <span class="number">0x9d</span>, <span class="number">0x2f</span>, <span class="number">0xc4</span>, <span class="number">0x22</span>, <span class="number">0xf5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa1</span>, <span class="number">0x8b</span>, <span class="number">0x59</span>, <span class="number">0xde</span>, <span class="number">0x82</span>, <span class="number">0x98</span>, <span class="number">0x02</span>, <span class="number">0xf8</span>, <span class="number">0x9d</span>, <span class="number">0xf2</span>, <span class="number">0x0d</span>, <span class="number">0x78</span>, <span class="number">0xba</span>, <span class="number">0x1a</span>, <span class="number">0xa2</span>, <span class="number">0xe5</span>, <span class="number">0x6e</span>, <span class="number">0x9c</span>, <span class="number">0x2e</span>, <span class="number">0xc5</span>, <span class="number">0x23</span>, <span class="number">0xf4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa2</span>, <span class="number">0x88</span>, <span class="number">0x5a</span>, <span class="number">0xdd</span>, <span class="number">0x81</span>, <span class="number">0x9b</span>, <span class="number">0x01</span>, <span class="number">0xfb</span>, <span class="number">0x9e</span>, <span class="number">0xf1</span>, <span class="number">0x0e</span>, <span class="number">0x7b</span>, <span class="number">0xb9</span>, <span class="number">0x19</span>, <span class="number">0xa1</span>, <span class="number">0xe6</span>, <span class="number">0x6d</span>, <span class="number">0x9f</span>, <span class="number">0x2d</span>, <span class="number">0xc6</span>, <span class="number">0x20</span>, <span class="number">0xf7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa3</span>, <span class="number">0x89</span>, <span class="number">0x5b</span>, <span class="number">0xdc</span>, <span class="number">0x80</span>, <span class="number">0x9a</span>, <span class="number">0x00</span>, <span class="number">0xfa</span>, <span class="number">0x9f</span>, <span class="number">0xf0</span>, <span class="number">0x0f</span>, <span class="number">0x7a</span>, <span class="number">0xb8</span>, <span class="number">0x18</span>, <span class="number">0xa0</span>, <span class="number">0xe7</span>, <span class="number">0x6c</span>, <span class="number">0x9e</span>, <span class="number">0x2c</span>, <span class="number">0xc7</span>, <span class="number">0x21</span>, <span class="number">0xf6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xac</span>, <span class="number">0x86</span>, <span class="number">0x54</span>, <span class="number">0xd3</span>, <span class="number">0x8f</span>, <span class="number">0x95</span>, <span class="number">0x0f</span>, <span class="number">0xf5</span>, <span class="number">0x90</span>, <span class="number">0xff</span>, <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0xb7</span>, <span class="number">0x17</span>, <span class="number">0xaf</span>, <span class="number">0xe8</span>, <span class="number">0x63</span>, <span class="number">0x91</span>, <span class="number">0x23</span>, <span class="number">0xc8</span>, <span class="number">0x2e</span>, <span class="number">0xf9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xad</span>, <span class="number">0x87</span>, <span class="number">0x55</span>, <span class="number">0xd2</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x0e</span>, <span class="number">0xf4</span>, <span class="number">0x91</span>, <span class="number">0xfe</span>, <span class="number">0x01</span>, <span class="number">0x74</span>, <span class="number">0xb6</span>, <span class="number">0x16</span>, <span class="number">0xae</span>, <span class="number">0xe9</span>, <span class="number">0x62</span>, <span class="number">0x90</span>, <span class="number">0x22</span>, <span class="number">0xc9</span>, <span class="number">0x2f</span>, <span class="number">0xf8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xae</span>, <span class="number">0x84</span>, <span class="number">0x56</span>, <span class="number">0xd1</span>, <span class="number">0x8d</span>, <span class="number">0x97</span>, <span class="number">0x0d</span>, <span class="number">0xf7</span>, <span class="number">0x92</span>, <span class="number">0xfd</span>, <span class="number">0x02</span>, <span class="number">0x77</span>, <span class="number">0xb5</span>, <span class="number">0x15</span>, <span class="number">0xad</span>, <span class="number">0xea</span>, <span class="number">0x61</span>, <span class="number">0x93</span>, <span class="number">0x21</span>, <span class="number">0xca</span>, <span class="number">0x2c</span>, <span class="number">0xfb</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xaf</span>, <span class="number">0x85</span>, <span class="number">0x57</span>, <span class="number">0xd0</span>, <span class="number">0x8c</span>, <span class="number">0x96</span>, <span class="number">0x0c</span>, <span class="number">0xf6</span>, <span class="number">0x93</span>, <span class="number">0xfc</span>, <span class="number">0x03</span>, <span class="number">0x76</span>, <span class="number">0xb4</span>, <span class="number">0x14</span>, <span class="number">0xac</span>, <span class="number">0xeb</span>, <span class="number">0x60</span>, <span class="number">0x92</span>, <span class="number">0x20</span>, <span class="number">0xcb</span>, <span class="number">0x2d</span>, <span class="number">0xfa</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa8</span>, <span class="number">0x82</span>, <span class="number">0x50</span>, <span class="number">0xd7</span>, <span class="number">0x8b</span>, <span class="number">0x91</span>, <span class="number">0x0b</span>, <span class="number">0xf1</span>, <span class="number">0x94</span>, <span class="number">0xfb</span>, <span class="number">0x04</span>, <span class="number">0x71</span>, <span class="number">0xb3</span>, <span class="number">0x13</span>, <span class="number">0xab</span>, <span class="number">0xec</span>, <span class="number">0x67</span>, <span class="number">0x95</span>, <span class="number">0x27</span>, <span class="number">0xcc</span>, <span class="number">0x2a</span>, <span class="number">0xfd</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xa9</span>, <span class="number">0x83</span>, <span class="number">0x51</span>, <span class="number">0xd6</span>, <span class="number">0x8a</span>, <span class="number">0x90</span>, <span class="number">0x0a</span>, <span class="number">0xf0</span>, <span class="number">0x95</span>, <span class="number">0xfa</span>, <span class="number">0x05</span>, <span class="number">0x70</span>, <span class="number">0xb2</span>, <span class="number">0x12</span>, <span class="number">0xaa</span>, <span class="number">0xed</span>, <span class="number">0x66</span>, <span class="number">0x94</span>, <span class="number">0x26</span>, <span class="number">0xcd</span>, <span class="number">0x2b</span>, <span class="number">0xfc</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xaa</span>, <span class="number">0x80</span>, <span class="number">0x52</span>, <span class="number">0xd5</span>, <span class="number">0x89</span>, <span class="number">0x93</span>, <span class="number">0x09</span>, <span class="number">0xf3</span>, <span class="number">0x96</span>, <span class="number">0xf9</span>, <span class="number">0x06</span>, <span class="number">0x73</span>, <span class="number">0xb1</span>, <span class="number">0x11</span>, <span class="number">0xa9</span>, <span class="number">0xee</span>, <span class="number">0x65</span>, <span class="number">0x97</span>, <span class="number">0x25</span>, <span class="number">0xce</span>, <span class="number">0x28</span>, <span class="number">0xff</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xab</span>, <span class="number">0x81</span>, <span class="number">0x53</span>, <span class="number">0xd4</span>, <span class="number">0x88</span>, <span class="number">0x92</span>, <span class="number">0x08</span>, <span class="number">0xf2</span>, <span class="number">0x97</span>, <span class="number">0xf8</span>, <span class="number">0x07</span>, <span class="number">0x72</span>, <span class="number">0xb0</span>, <span class="number">0x10</span>, <span class="number">0xa8</span>, <span class="number">0xef</span>, <span class="number">0x64</span>, <span class="number">0x96</span>, <span class="number">0x24</span>, <span class="number">0xcf</span>, <span class="number">0x29</span>, <span class="number">0xfe</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb4</span>, <span class="number">0x9e</span>, <span class="number">0x4c</span>, <span class="number">0xcb</span>, <span class="number">0x97</span>, <span class="number">0x8d</span>, <span class="number">0x17</span>, <span class="number">0xed</span>, <span class="number">0x88</span>, <span class="number">0xe7</span>, <span class="number">0x18</span>, <span class="number">0x6d</span>, <span class="number">0xaf</span>, <span class="number">0x0f</span>, <span class="number">0xb7</span>, <span class="number">0xf0</span>, <span class="number">0x7b</span>, <span class="number">0x89</span>, <span class="number">0x3b</span>, <span class="number">0xd0</span>, <span class="number">0x36</span>, <span class="number">0xe1</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb5</span>, <span class="number">0x9f</span>, <span class="number">0x4d</span>, <span class="number">0xca</span>, <span class="number">0x96</span>, <span class="number">0x8c</span>, <span class="number">0x16</span>, <span class="number">0xec</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x19</span>, <span class="number">0x6c</span>, <span class="number">0xae</span>, <span class="number">0x0e</span>, <span class="number">0xb6</span>, <span class="number">0xf1</span>, <span class="number">0x7a</span>, <span class="number">0x88</span>, <span class="number">0x3a</span>, <span class="number">0xd1</span>, <span class="number">0x37</span>, <span class="number">0xe0</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb6</span>, <span class="number">0x9c</span>, <span class="number">0x4e</span>, <span class="number">0xc9</span>, <span class="number">0x95</span>, <span class="number">0x8f</span>, <span class="number">0x15</span>, <span class="number">0xef</span>, <span class="number">0x8a</span>, <span class="number">0xe5</span>, <span class="number">0x1a</span>, <span class="number">0x6f</span>, <span class="number">0xad</span>, <span class="number">0x0d</span>, <span class="number">0xb5</span>, <span class="number">0xf2</span>, <span class="number">0x79</span>, <span class="number">0x8b</span>, <span class="number">0x39</span>, <span class="number">0xd2</span>, <span class="number">0x34</span>, <span class="number">0xe3</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb7</span>, <span class="number">0x9d</span>, <span class="number">0x4f</span>, <span class="number">0xc8</span>, <span class="number">0x94</span>, <span class="number">0x8e</span>, <span class="number">0x14</span>, <span class="number">0xee</span>, <span class="number">0x8b</span>, <span class="number">0xe4</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0xac</span>, <span class="number">0x0c</span>, <span class="number">0xb4</span>, <span class="number">0xf3</span>, <span class="number">0x78</span>, <span class="number">0x8a</span>, <span class="number">0x38</span>, <span class="number">0xd3</span>, <span class="number">0x35</span>, <span class="number">0xe2</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb0</span>, <span class="number">0x9a</span>, <span class="number">0x48</span>, <span class="number">0xcf</span>, <span class="number">0x93</span>, <span class="number">0x89</span>, <span class="number">0x13</span>, <span class="number">0xe9</span>, <span class="number">0x8c</span>, <span class="number">0xe3</span>, <span class="number">0x1c</span>, <span class="number">0x69</span>, <span class="number">0xab</span>, <span class="number">0x0b</span>, <span class="number">0xb3</span>, <span class="number">0xf4</span>, <span class="number">0x7f</span>, <span class="number">0x8d</span>, <span class="number">0x3f</span>, <span class="number">0xd4</span>, <span class="number">0x32</span>, <span class="number">0xe5</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb1</span>, <span class="number">0x9b</span>, <span class="number">0x49</span>, <span class="number">0xce</span>, <span class="number">0x92</span>, <span class="number">0x88</span>, <span class="number">0x12</span>, <span class="number">0xe8</span>, <span class="number">0x8d</span>, <span class="number">0xe2</span>, <span class="number">0x1d</span>, <span class="number">0x68</span>, <span class="number">0xaa</span>, <span class="number">0x0a</span>, <span class="number">0xb2</span>, <span class="number">0xf5</span>, <span class="number">0x7e</span>, <span class="number">0x8c</span>, <span class="number">0x3e</span>, <span class="number">0xd5</span>, <span class="number">0x33</span>, <span class="number">0xe4</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb2</span>, <span class="number">0x98</span>, <span class="number">0x4a</span>, <span class="number">0xcd</span>, <span class="number">0x91</span>, <span class="number">0x8b</span>, <span class="number">0x11</span>, <span class="number">0xeb</span>, <span class="number">0x8e</span>, <span class="number">0xe1</span>, <span class="number">0x1e</span>, <span class="number">0x6b</span>, <span class="number">0xa9</span>, <span class="number">0x09</span>, <span class="number">0xb1</span>, <span class="number">0xf6</span>, <span class="number">0x7d</span>, <span class="number">0x8f</span>, <span class="number">0x3d</span>, <span class="number">0xd6</span>, <span class="number">0x30</span>, <span class="number">0xe7</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb3</span>, <span class="number">0x99</span>, <span class="number">0x4b</span>, <span class="number">0xcc</span>, <span class="number">0x90</span>, <span class="number">0x8a</span>, <span class="number">0x10</span>, <span class="number">0xea</span>, <span class="number">0x8f</span>, <span class="number">0xe0</span>, <span class="number">0x1f</span>, <span class="number">0x6a</span>, <span class="number">0xa8</span>, <span class="number">0x08</span>, <span class="number">0xb0</span>, <span class="number">0xf7</span>, <span class="number">0x7c</span>, <span class="number">0x8e</span>, <span class="number">0x3c</span>, <span class="number">0xd7</span>, <span class="number">0x31</span>, <span class="number">0xe6</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xbc</span>, <span class="number">0x96</span>, <span class="number">0x44</span>, <span class="number">0xc3</span>, <span class="number">0x9f</span>, <span class="number">0x85</span>, <span class="number">0x1f</span>, <span class="number">0xe5</span>, <span class="number">0x80</span>, <span class="number">0xef</span>, <span class="number">0x10</span>, <span class="number">0x65</span>, <span class="number">0xa7</span>, <span class="number">0x07</span>, <span class="number">0xbf</span>, <span class="number">0xf8</span>, <span class="number">0x73</span>, <span class="number">0x81</span>, <span class="number">0x33</span>, <span class="number">0xd8</span>, <span class="number">0x3e</span>, <span class="number">0xe9</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xbd</span>, <span class="number">0x97</span>, <span class="number">0x45</span>, <span class="number">0xc2</span>, <span class="number">0x9e</span>, <span class="number">0x84</span>, <span class="number">0x1e</span>, <span class="number">0xe4</span>, <span class="number">0x81</span>, <span class="number">0xee</span>, <span class="number">0x11</span>, <span class="number">0x64</span>, <span class="number">0xa6</span>, <span class="number">0x06</span>, <span class="number">0xbe</span>, <span class="number">0xf9</span>, <span class="number">0x72</span>, <span class="number">0x80</span>, <span class="number">0x32</span>, <span class="number">0xd9</span>, <span class="number">0x3f</span>, <span class="number">0xe8</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xbe</span>, <span class="number">0x94</span>, <span class="number">0x46</span>, <span class="number">0xc1</span>, <span class="number">0x9d</span>, <span class="number">0x87</span>, <span class="number">0x1d</span>, <span class="number">0xe7</span>, <span class="number">0x82</span>, <span class="number">0xed</span>, <span class="number">0x12</span>, <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0x05</span>, <span class="number">0xbd</span>, <span class="number">0xfa</span>, <span class="number">0x71</span>, <span class="number">0x83</span>, <span class="number">0x31</span>, <span class="number">0xda</span>, <span class="number">0x3c</span>, <span class="number">0xeb</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xbf</span>, <span class="number">0x95</span>, <span class="number">0x47</span>, <span class="number">0xc0</span>, <span class="number">0x9c</span>, <span class="number">0x86</span>, <span class="number">0x1c</span>, <span class="number">0xe6</span>, <span class="number">0x83</span>, <span class="number">0xec</span>, <span class="number">0x13</span>, <span class="number">0x66</span>, <span class="number">0xa4</span>, <span class="number">0x04</span>, <span class="number">0xbc</span>, <span class="number">0xfb</span>, <span class="number">0x70</span>, <span class="number">0x82</span>, <span class="number">0x30</span>, <span class="number">0xdb</span>, <span class="number">0x3d</span>, <span class="number">0xea</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb8</span>, <span class="number">0x92</span>, <span class="number">0x40</span>, <span class="number">0xc7</span>, <span class="number">0x9b</span>, <span class="number">0x81</span>, <span class="number">0x1b</span>, <span class="number">0xe1</span>, <span class="number">0x84</span>, <span class="number">0xeb</span>, <span class="number">0x14</span>, <span class="number">0x61</span>, <span class="number">0xa3</span>, <span class="number">0x03</span>, <span class="number">0xbb</span>, <span class="number">0xfc</span>, <span class="number">0x77</span>, <span class="number">0x85</span>, <span class="number">0x37</span>, <span class="number">0xdc</span>, <span class="number">0x3a</span>, <span class="number">0xed</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xb9</span>, <span class="number">0x93</span>, <span class="number">0x41</span>, <span class="number">0xc6</span>, <span class="number">0x9a</span>, <span class="number">0x80</span>, <span class="number">0x1a</span>, <span class="number">0xe0</span>, <span class="number">0x85</span>, <span class="number">0xea</span>, <span class="number">0x15</span>, <span class="number">0x60</span>, <span class="number">0xa2</span>, <span class="number">0x02</span>, <span class="number">0xba</span>, <span class="number">0xfd</span>, <span class="number">0x76</span>, <span class="number">0x84</span>, <span class="number">0x36</span>, <span class="number">0xdd</span>, <span class="number">0x3b</span>, <span class="number">0xec</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xba</span>, <span class="number">0x90</span>, <span class="number">0x42</span>, <span class="number">0xc5</span>, <span class="number">0x99</span>, <span class="number">0x83</span>, <span class="number">0x19</span>, <span class="number">0xe3</span>, <span class="number">0x86</span>, <span class="number">0xe9</span>, <span class="number">0x16</span>, <span class="number">0x63</span>, <span class="number">0xa1</span>, <span class="number">0x01</span>, <span class="number">0xb9</span>, <span class="number">0xfe</span>, <span class="number">0x75</span>, <span class="number">0x87</span>, <span class="number">0x35</span>, <span class="number">0xde</span>, <span class="number">0x38</span>, <span class="number">0xef</span> &#125;,</span><br><span class="line">&#123; <span class="number">0xbb</span>, <span class="number">0x91</span>, <span class="number">0x43</span>, <span class="number">0xc4</span>, <span class="number">0x98</span>, <span class="number">0x82</span>, <span class="number">0x18</span>, <span class="number">0xe2</span>, <span class="number">0x87</span>, <span class="number">0xe8</span>, <span class="number">0x17</span>, <span class="number">0x62</span>, <span class="number">0xa0</span>, <span class="number">0x00</span>, <span class="number">0xb8</span>, <span class="number">0xff</span>, <span class="number">0x74</span>, <span class="number">0x86</span>, <span class="number">0x34</span>, <span class="number">0xdf</span>, <span class="number">0x39</span>, <span class="number">0xee</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x44</span>, <span class="number">0x6e</span>, <span class="number">0xbc</span>, <span class="number">0x3b</span>, <span class="number">0x67</span>, <span class="number">0x7d</span>, <span class="number">0xe7</span>, <span class="number">0x1d</span>, <span class="number">0x78</span>, <span class="number">0x17</span>, <span class="number">0xe8</span>, <span class="number">0x9d</span>, <span class="number">0x5f</span>, <span class="number">0xff</span>, <span class="number">0x47</span>, <span class="number">0x00</span>, <span class="number">0x8b</span>, <span class="number">0x79</span>, <span class="number">0xcb</span>, <span class="number">0x20</span>, <span class="number">0xc6</span>, <span class="number">0x11</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x45</span>, <span class="number">0x6f</span>, <span class="number">0xbd</span>, <span class="number">0x3a</span>, <span class="number">0x66</span>, <span class="number">0x7c</span>, <span class="number">0xe6</span>, <span class="number">0x1c</span>, <span class="number">0x79</span>, <span class="number">0x16</span>, <span class="number">0xe9</span>, <span class="number">0x9c</span>, <span class="number">0x5e</span>, <span class="number">0xfe</span>, <span class="number">0x46</span>, <span class="number">0x01</span>, <span class="number">0x8a</span>, <span class="number">0x78</span>, <span class="number">0xca</span>, <span class="number">0x21</span>, <span class="number">0xc7</span>, <span class="number">0x10</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x46</span>, <span class="number">0x6c</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x65</span>, <span class="number">0x7f</span>, <span class="number">0xe5</span>, <span class="number">0x1f</span>, <span class="number">0x7a</span>, <span class="number">0x15</span>, <span class="number">0xea</span>, <span class="number">0x9f</span>, <span class="number">0x5d</span>, <span class="number">0xfd</span>, <span class="number">0x45</span>, <span class="number">0x02</span>, <span class="number">0x89</span>, <span class="number">0x7b</span>, <span class="number">0xc9</span>, <span class="number">0x22</span>, <span class="number">0xc4</span>, <span class="number">0x13</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x47</span>, <span class="number">0x6d</span>, <span class="number">0xbf</span>, <span class="number">0x38</span>, <span class="number">0x64</span>, <span class="number">0x7e</span>, <span class="number">0xe4</span>, <span class="number">0x1e</span>, <span class="number">0x7b</span>, <span class="number">0x14</span>, <span class="number">0xeb</span>, <span class="number">0x9e</span>, <span class="number">0x5c</span>, <span class="number">0xfc</span>, <span class="number">0x44</span>, <span class="number">0x03</span>, <span class="number">0x88</span>, <span class="number">0x7a</span>, <span class="number">0xc8</span>, <span class="number">0x23</span>, <span class="number">0xc5</span>, <span class="number">0x12</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x40</span>, <span class="number">0x6a</span>, <span class="number">0xb8</span>, <span class="number">0x3f</span>, <span class="number">0x63</span>, <span class="number">0x79</span>, <span class="number">0xe3</span>, <span class="number">0x19</span>, <span class="number">0x7c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x99</span>, <span class="number">0x5b</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x04</span>, <span class="number">0x8f</span>, <span class="number">0x7d</span>, <span class="number">0xcf</span>, <span class="number">0x24</span>, <span class="number">0xc2</span>, <span class="number">0x15</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x41</span>, <span class="number">0x6b</span>, <span class="number">0xb9</span>, <span class="number">0x3e</span>, <span class="number">0x62</span>, <span class="number">0x78</span>, <span class="number">0xe2</span>, <span class="number">0x18</span>, <span class="number">0x7d</span>, <span class="number">0x12</span>, <span class="number">0xed</span>, <span class="number">0x98</span>, <span class="number">0x5a</span>, <span class="number">0xfa</span>, <span class="number">0x42</span>, <span class="number">0x05</span>, <span class="number">0x8e</span>, <span class="number">0x7c</span>, <span class="number">0xce</span>, <span class="number">0x25</span>, <span class="number">0xc3</span>, <span class="number">0x14</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0xba</span>, <span class="number">0x3d</span>, <span class="number">0x61</span>, <span class="number">0x7b</span>, <span class="number">0xe1</span>, <span class="number">0x1b</span>, <span class="number">0x7e</span>, <span class="number">0x11</span>, <span class="number">0xee</span>, <span class="number">0x9b</span>, <span class="number">0x59</span>, <span class="number">0xf9</span>, <span class="number">0x41</span>, <span class="number">0x06</span>, <span class="number">0x8d</span>, <span class="number">0x7f</span>, <span class="number">0xcd</span>, <span class="number">0x26</span>, <span class="number">0xc0</span>, <span class="number">0x17</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x43</span>, <span class="number">0x69</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x60</span>, <span class="number">0x7a</span>, <span class="number">0xe0</span>, <span class="number">0x1a</span>, <span class="number">0x7f</span>, <span class="number">0x10</span>, <span class="number">0xef</span>, <span class="number">0x9a</span>, <span class="number">0x58</span>, <span class="number">0xf8</span>, <span class="number">0x40</span>, <span class="number">0x07</span>, <span class="number">0x8c</span>, <span class="number">0x7e</span>, <span class="number">0xcc</span>, <span class="number">0x27</span>, <span class="number">0xc1</span>, <span class="number">0x16</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4c</span>, <span class="number">0x66</span>, <span class="number">0xb4</span>, <span class="number">0x33</span>, <span class="number">0x6f</span>, <span class="number">0x75</span>, <span class="number">0xef</span>, <span class="number">0x15</span>, <span class="number">0x70</span>, <span class="number">0x1f</span>, <span class="number">0xe0</span>, <span class="number">0x95</span>, <span class="number">0x57</span>, <span class="number">0xf7</span>, <span class="number">0x4f</span>, <span class="number">0x08</span>, <span class="number">0x83</span>, <span class="number">0x71</span>, <span class="number">0xc3</span>, <span class="number">0x28</span>, <span class="number">0xce</span>, <span class="number">0x19</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4d</span>, <span class="number">0x67</span>, <span class="number">0xb5</span>, <span class="number">0x32</span>, <span class="number">0x6e</span>, <span class="number">0x74</span>, <span class="number">0xee</span>, <span class="number">0x14</span>, <span class="number">0x71</span>, <span class="number">0x1e</span>, <span class="number">0xe1</span>, <span class="number">0x94</span>, <span class="number">0x56</span>, <span class="number">0xf6</span>, <span class="number">0x4e</span>, <span class="number">0x09</span>, <span class="number">0x82</span>, <span class="number">0x70</span>, <span class="number">0xc2</span>, <span class="number">0x29</span>, <span class="number">0xcf</span>, <span class="number">0x18</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4e</span>, <span class="number">0x64</span>, <span class="number">0xb6</span>, <span class="number">0x31</span>, <span class="number">0x6d</span>, <span class="number">0x77</span>, <span class="number">0xed</span>, <span class="number">0x17</span>, <span class="number">0x72</span>, <span class="number">0x1d</span>, <span class="number">0xe2</span>, <span class="number">0x97</span>, <span class="number">0x55</span>, <span class="number">0xf5</span>, <span class="number">0x4d</span>, <span class="number">0x0a</span>, <span class="number">0x81</span>, <span class="number">0x73</span>, <span class="number">0xc1</span>, <span class="number">0x2a</span>, <span class="number">0xcc</span>, <span class="number">0x1b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4f</span>, <span class="number">0x65</span>, <span class="number">0xb7</span>, <span class="number">0x30</span>, <span class="number">0x6c</span>, <span class="number">0x76</span>, <span class="number">0xec</span>, <span class="number">0x16</span>, <span class="number">0x73</span>, <span class="number">0x1c</span>, <span class="number">0xe3</span>, <span class="number">0x96</span>, <span class="number">0x54</span>, <span class="number">0xf4</span>, <span class="number">0x4c</span>, <span class="number">0x0b</span>, <span class="number">0x80</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>, <span class="number">0x2b</span>, <span class="number">0xcd</span>, <span class="number">0x1a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x48</span>, <span class="number">0x62</span>, <span class="number">0xb0</span>, <span class="number">0x37</span>, <span class="number">0x6b</span>, <span class="number">0x71</span>, <span class="number">0xeb</span>, <span class="number">0x11</span>, <span class="number">0x74</span>, <span class="number">0x1b</span>, <span class="number">0xe4</span>, <span class="number">0x91</span>, <span class="number">0x53</span>, <span class="number">0xf3</span>, <span class="number">0x4b</span>, <span class="number">0x0c</span>, <span class="number">0x87</span>, <span class="number">0x75</span>, <span class="number">0xc7</span>, <span class="number">0x2c</span>, <span class="number">0xca</span>, <span class="number">0x1d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x49</span>, <span class="number">0x63</span>, <span class="number">0xb1</span>, <span class="number">0x36</span>, <span class="number">0x6a</span>, <span class="number">0x70</span>, <span class="number">0xea</span>, <span class="number">0x10</span>, <span class="number">0x75</span>, <span class="number">0x1a</span>, <span class="number">0xe5</span>, <span class="number">0x90</span>, <span class="number">0x52</span>, <span class="number">0xf2</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x86</span>, <span class="number">0x74</span>, <span class="number">0xc6</span>, <span class="number">0x2d</span>, <span class="number">0xcb</span>, <span class="number">0x1c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4a</span>, <span class="number">0x60</span>, <span class="number">0xb2</span>, <span class="number">0x35</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0xe9</span>, <span class="number">0x13</span>, <span class="number">0x76</span>, <span class="number">0x19</span>, <span class="number">0xe6</span>, <span class="number">0x93</span>, <span class="number">0x51</span>, <span class="number">0xf1</span>, <span class="number">0x49</span>, <span class="number">0x0e</span>, <span class="number">0x85</span>, <span class="number">0x77</span>, <span class="number">0xc5</span>, <span class="number">0x2e</span>, <span class="number">0xc8</span>, <span class="number">0x1f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x4b</span>, <span class="number">0x61</span>, <span class="number">0xb3</span>, <span class="number">0x34</span>, <span class="number">0x68</span>, <span class="number">0x72</span>, <span class="number">0xe8</span>, <span class="number">0x12</span>, <span class="number">0x77</span>, <span class="number">0x18</span>, <span class="number">0xe7</span>, <span class="number">0x92</span>, <span class="number">0x50</span>, <span class="number">0xf0</span>, <span class="number">0x48</span>, <span class="number">0x0f</span>, <span class="number">0x84</span>, <span class="number">0x76</span>, <span class="number">0xc4</span>, <span class="number">0x2f</span>, <span class="number">0xc9</span>, <span class="number">0x1e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x54</span>, <span class="number">0x7e</span>, <span class="number">0xac</span>, <span class="number">0x2b</span>, <span class="number">0x77</span>, <span class="number">0x6d</span>, <span class="number">0xf7</span>, <span class="number">0x0d</span>, <span class="number">0x68</span>, <span class="number">0x07</span>, <span class="number">0xf8</span>, <span class="number">0x8d</span>, <span class="number">0x4f</span>, <span class="number">0xef</span>, <span class="number">0x57</span>, <span class="number">0x10</span>, <span class="number">0x9b</span>, <span class="number">0x69</span>, <span class="number">0xdb</span>, <span class="number">0x30</span>, <span class="number">0xd6</span>, <span class="number">0x01</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x55</span>, <span class="number">0x7f</span>, <span class="number">0xad</span>, <span class="number">0x2a</span>, <span class="number">0x76</span>, <span class="number">0x6c</span>, <span class="number">0xf6</span>, <span class="number">0x0c</span>, <span class="number">0x69</span>, <span class="number">0x06</span>, <span class="number">0xf9</span>, <span class="number">0x8c</span>, <span class="number">0x4e</span>, <span class="number">0xee</span>, <span class="number">0x56</span>, <span class="number">0x11</span>, <span class="number">0x9a</span>, <span class="number">0x68</span>, <span class="number">0xda</span>, <span class="number">0x31</span>, <span class="number">0xd7</span>, <span class="number">0x00</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x56</span>, <span class="number">0x7c</span>, <span class="number">0xae</span>, <span class="number">0x29</span>, <span class="number">0x75</span>, <span class="number">0x6f</span>, <span class="number">0xf5</span>, <span class="number">0x0f</span>, <span class="number">0x6a</span>, <span class="number">0x05</span>, <span class="number">0xfa</span>, <span class="number">0x8f</span>, <span class="number">0x4d</span>, <span class="number">0xed</span>, <span class="number">0x55</span>, <span class="number">0x12</span>, <span class="number">0x99</span>, <span class="number">0x6b</span>, <span class="number">0xd9</span>, <span class="number">0x32</span>, <span class="number">0xd4</span>, <span class="number">0x03</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x57</span>, <span class="number">0x7d</span>, <span class="number">0xaf</span>, <span class="number">0x28</span>, <span class="number">0x74</span>, <span class="number">0x6e</span>, <span class="number">0xf4</span>, <span class="number">0x0e</span>, <span class="number">0x6b</span>, <span class="number">0x04</span>, <span class="number">0xfb</span>, <span class="number">0x8e</span>, <span class="number">0x4c</span>, <span class="number">0xec</span>, <span class="number">0x54</span>, <span class="number">0x13</span>, <span class="number">0x98</span>, <span class="number">0x6a</span>, <span class="number">0xd8</span>, <span class="number">0x33</span>, <span class="number">0xd5</span>, <span class="number">0x02</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x50</span>, <span class="number">0x7a</span>, <span class="number">0xa8</span>, <span class="number">0x2f</span>, <span class="number">0x73</span>, <span class="number">0x69</span>, <span class="number">0xf3</span>, <span class="number">0x09</span>, <span class="number">0x6c</span>, <span class="number">0x03</span>, <span class="number">0xfc</span>, <span class="number">0x89</span>, <span class="number">0x4b</span>, <span class="number">0xeb</span>, <span class="number">0x53</span>, <span class="number">0x14</span>, <span class="number">0x9f</span>, <span class="number">0x6d</span>, <span class="number">0xdf</span>, <span class="number">0x34</span>, <span class="number">0xd2</span>, <span class="number">0x05</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x51</span>, <span class="number">0x7b</span>, <span class="number">0xa9</span>, <span class="number">0x2e</span>, <span class="number">0x72</span>, <span class="number">0x68</span>, <span class="number">0xf2</span>, <span class="number">0x08</span>, <span class="number">0x6d</span>, <span class="number">0x02</span>, <span class="number">0xfd</span>, <span class="number">0x88</span>, <span class="number">0x4a</span>, <span class="number">0xea</span>, <span class="number">0x52</span>, <span class="number">0x15</span>, <span class="number">0x9e</span>, <span class="number">0x6c</span>, <span class="number">0xde</span>, <span class="number">0x35</span>, <span class="number">0xd3</span>, <span class="number">0x04</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x52</span>, <span class="number">0x78</span>, <span class="number">0xaa</span>, <span class="number">0x2d</span>, <span class="number">0x71</span>, <span class="number">0x6b</span>, <span class="number">0xf1</span>, <span class="number">0x0b</span>, <span class="number">0x6e</span>, <span class="number">0x01</span>, <span class="number">0xfe</span>, <span class="number">0x8b</span>, <span class="number">0x49</span>, <span class="number">0xe9</span>, <span class="number">0x51</span>, <span class="number">0x16</span>, <span class="number">0x9d</span>, <span class="number">0x6f</span>, <span class="number">0xdd</span>, <span class="number">0x36</span>, <span class="number">0xd0</span>, <span class="number">0x07</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x53</span>, <span class="number">0x79</span>, <span class="number">0xab</span>, <span class="number">0x2c</span>, <span class="number">0x70</span>, <span class="number">0x6a</span>, <span class="number">0xf0</span>, <span class="number">0x0a</span>, <span class="number">0x6f</span>, <span class="number">0x00</span>, <span class="number">0xff</span>, <span class="number">0x8a</span>, <span class="number">0x48</span>, <span class="number">0xe8</span>, <span class="number">0x50</span>, <span class="number">0x17</span>, <span class="number">0x9c</span>, <span class="number">0x6e</span>, <span class="number">0xdc</span>, <span class="number">0x37</span>, <span class="number">0xd1</span>, <span class="number">0x06</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5c</span>, <span class="number">0x76</span>, <span class="number">0xa4</span>, <span class="number">0x23</span>, <span class="number">0x7f</span>, <span class="number">0x65</span>, <span class="number">0xff</span>, <span class="number">0x05</span>, <span class="number">0x60</span>, <span class="number">0x0f</span>, <span class="number">0xf0</span>, <span class="number">0x85</span>, <span class="number">0x47</span>, <span class="number">0xe7</span>, <span class="number">0x5f</span>, <span class="number">0x18</span>, <span class="number">0x93</span>, <span class="number">0x61</span>, <span class="number">0xd3</span>, <span class="number">0x38</span>, <span class="number">0xde</span>, <span class="number">0x09</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5d</span>, <span class="number">0x77</span>, <span class="number">0xa5</span>, <span class="number">0x22</span>, <span class="number">0x7e</span>, <span class="number">0x64</span>, <span class="number">0xfe</span>, <span class="number">0x04</span>, <span class="number">0x61</span>, <span class="number">0x0e</span>, <span class="number">0xf1</span>, <span class="number">0x84</span>, <span class="number">0x46</span>, <span class="number">0xe6</span>, <span class="number">0x5e</span>, <span class="number">0x19</span>, <span class="number">0x92</span>, <span class="number">0x60</span>, <span class="number">0xd2</span>, <span class="number">0x39</span>, <span class="number">0xdf</span>, <span class="number">0x08</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5e</span>, <span class="number">0x74</span>, <span class="number">0xa6</span>, <span class="number">0x21</span>, <span class="number">0x7d</span>, <span class="number">0x67</span>, <span class="number">0xfd</span>, <span class="number">0x07</span>, <span class="number">0x62</span>, <span class="number">0x0d</span>, <span class="number">0xf2</span>, <span class="number">0x87</span>, <span class="number">0x45</span>, <span class="number">0xe5</span>, <span class="number">0x5d</span>, <span class="number">0x1a</span>, <span class="number">0x91</span>, <span class="number">0x63</span>, <span class="number">0xd1</span>, <span class="number">0x3a</span>, <span class="number">0xdc</span>, <span class="number">0x0b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5f</span>, <span class="number">0x75</span>, <span class="number">0xa7</span>, <span class="number">0x20</span>, <span class="number">0x7c</span>, <span class="number">0x66</span>, <span class="number">0xfc</span>, <span class="number">0x06</span>, <span class="number">0x63</span>, <span class="number">0x0c</span>, <span class="number">0xf3</span>, <span class="number">0x86</span>, <span class="number">0x44</span>, <span class="number">0xe4</span>, <span class="number">0x5c</span>, <span class="number">0x1b</span>, <span class="number">0x90</span>, <span class="number">0x62</span>, <span class="number">0xd0</span>, <span class="number">0x3b</span>, <span class="number">0xdd</span>, <span class="number">0x0a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x58</span>, <span class="number">0x72</span>, <span class="number">0xa0</span>, <span class="number">0x27</span>, <span class="number">0x7b</span>, <span class="number">0x61</span>, <span class="number">0xfb</span>, <span class="number">0x01</span>, <span class="number">0x64</span>, <span class="number">0x0b</span>, <span class="number">0xf4</span>, <span class="number">0x81</span>, <span class="number">0x43</span>, <span class="number">0xe3</span>, <span class="number">0x5b</span>, <span class="number">0x1c</span>, <span class="number">0x97</span>, <span class="number">0x65</span>, <span class="number">0xd7</span>, <span class="number">0x3c</span>, <span class="number">0xda</span>, <span class="number">0x0d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x59</span>, <span class="number">0x73</span>, <span class="number">0xa1</span>, <span class="number">0x26</span>, <span class="number">0x7a</span>, <span class="number">0x60</span>, <span class="number">0xfa</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x0a</span>, <span class="number">0xf5</span>, <span class="number">0x80</span>, <span class="number">0x42</span>, <span class="number">0xe2</span>, <span class="number">0x5a</span>, <span class="number">0x1d</span>, <span class="number">0x96</span>, <span class="number">0x64</span>, <span class="number">0xd6</span>, <span class="number">0x3d</span>, <span class="number">0xdb</span>, <span class="number">0x0c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5a</span>, <span class="number">0x70</span>, <span class="number">0xa2</span>, <span class="number">0x25</span>, <span class="number">0x79</span>, <span class="number">0x63</span>, <span class="number">0xf9</span>, <span class="number">0x03</span>, <span class="number">0x66</span>, <span class="number">0x09</span>, <span class="number">0xf6</span>, <span class="number">0x83</span>, <span class="number">0x41</span>, <span class="number">0xe1</span>, <span class="number">0x59</span>, <span class="number">0x1e</span>, <span class="number">0x95</span>, <span class="number">0x67</span>, <span class="number">0xd5</span>, <span class="number">0x3e</span>, <span class="number">0xd8</span>, <span class="number">0x0f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x5b</span>, <span class="number">0x71</span>, <span class="number">0xa3</span>, <span class="number">0x24</span>, <span class="number">0x78</span>, <span class="number">0x62</span>, <span class="number">0xf8</span>, <span class="number">0x02</span>, <span class="number">0x67</span>, <span class="number">0x08</span>, <span class="number">0xf7</span>, <span class="number">0x82</span>, <span class="number">0x40</span>, <span class="number">0xe0</span>, <span class="number">0x58</span>, <span class="number">0x1f</span>, <span class="number">0x94</span>, <span class="number">0x66</span>, <span class="number">0xd4</span>, <span class="number">0x3f</span>, <span class="number">0xd9</span>, <span class="number">0x0e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x64</span>, <span class="number">0x4e</span>, <span class="number">0x9c</span>, <span class="number">0x1b</span>, <span class="number">0x47</span>, <span class="number">0x5d</span>, <span class="number">0xc7</span>, <span class="number">0x3d</span>, <span class="number">0x58</span>, <span class="number">0x37</span>, <span class="number">0xc8</span>, <span class="number">0xbd</span>, <span class="number">0x7f</span>, <span class="number">0xdf</span>, <span class="number">0x67</span>, <span class="number">0x20</span>, <span class="number">0xab</span>, <span class="number">0x59</span>, <span class="number">0xeb</span>, <span class="number">0x00</span>, <span class="number">0xe6</span>, <span class="number">0x31</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x65</span>, <span class="number">0x4f</span>, <span class="number">0x9d</span>, <span class="number">0x1a</span>, <span class="number">0x46</span>, <span class="number">0x5c</span>, <span class="number">0xc6</span>, <span class="number">0x3c</span>, <span class="number">0x59</span>, <span class="number">0x36</span>, <span class="number">0xc9</span>, <span class="number">0xbc</span>, <span class="number">0x7e</span>, <span class="number">0xde</span>, <span class="number">0x66</span>, <span class="number">0x21</span>, <span class="number">0xaa</span>, <span class="number">0x58</span>, <span class="number">0xea</span>, <span class="number">0x01</span>, <span class="number">0xe7</span>, <span class="number">0x30</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x66</span>, <span class="number">0x4c</span>, <span class="number">0x9e</span>, <span class="number">0x19</span>, <span class="number">0x45</span>, <span class="number">0x5f</span>, <span class="number">0xc5</span>, <span class="number">0x3f</span>, <span class="number">0x5a</span>, <span class="number">0x35</span>, <span class="number">0xca</span>, <span class="number">0xbf</span>, <span class="number">0x7d</span>, <span class="number">0xdd</span>, <span class="number">0x65</span>, <span class="number">0x22</span>, <span class="number">0xa9</span>, <span class="number">0x5b</span>, <span class="number">0xe9</span>, <span class="number">0x02</span>, <span class="number">0xe4</span>, <span class="number">0x33</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x67</span>, <span class="number">0x4d</span>, <span class="number">0x9f</span>, <span class="number">0x18</span>, <span class="number">0x44</span>, <span class="number">0x5e</span>, <span class="number">0xc4</span>, <span class="number">0x3e</span>, <span class="number">0x5b</span>, <span class="number">0x34</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x7c</span>, <span class="number">0xdc</span>, <span class="number">0x64</span>, <span class="number">0x23</span>, <span class="number">0xa8</span>, <span class="number">0x5a</span>, <span class="number">0xe8</span>, <span class="number">0x03</span>, <span class="number">0xe5</span>, <span class="number">0x32</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x60</span>, <span class="number">0x4a</span>, <span class="number">0x98</span>, <span class="number">0x1f</span>, <span class="number">0x43</span>, <span class="number">0x59</span>, <span class="number">0xc3</span>, <span class="number">0x39</span>, <span class="number">0x5c</span>, <span class="number">0x33</span>, <span class="number">0xcc</span>, <span class="number">0xb9</span>, <span class="number">0x7b</span>, <span class="number">0xdb</span>, <span class="number">0x63</span>, <span class="number">0x24</span>, <span class="number">0xaf</span>, <span class="number">0x5d</span>, <span class="number">0xef</span>, <span class="number">0x04</span>, <span class="number">0xe2</span>, <span class="number">0x35</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x61</span>, <span class="number">0x4b</span>, <span class="number">0x99</span>, <span class="number">0x1e</span>, <span class="number">0x42</span>, <span class="number">0x58</span>, <span class="number">0xc2</span>, <span class="number">0x38</span>, <span class="number">0x5d</span>, <span class="number">0x32</span>, <span class="number">0xcd</span>, <span class="number">0xb8</span>, <span class="number">0x7a</span>, <span class="number">0xda</span>, <span class="number">0x62</span>, <span class="number">0x25</span>, <span class="number">0xae</span>, <span class="number">0x5c</span>, <span class="number">0xee</span>, <span class="number">0x05</span>, <span class="number">0xe3</span>, <span class="number">0x34</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x62</span>, <span class="number">0x48</span>, <span class="number">0x9a</span>, <span class="number">0x1d</span>, <span class="number">0x41</span>, <span class="number">0x5b</span>, <span class="number">0xc1</span>, <span class="number">0x3b</span>, <span class="number">0x5e</span>, <span class="number">0x31</span>, <span class="number">0xce</span>, <span class="number">0xbb</span>, <span class="number">0x79</span>, <span class="number">0xd9</span>, <span class="number">0x61</span>, <span class="number">0x26</span>, <span class="number">0xad</span>, <span class="number">0x5f</span>, <span class="number">0xed</span>, <span class="number">0x06</span>, <span class="number">0xe0</span>, <span class="number">0x37</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x63</span>, <span class="number">0x49</span>, <span class="number">0x9b</span>, <span class="number">0x1c</span>, <span class="number">0x40</span>, <span class="number">0x5a</span>, <span class="number">0xc0</span>, <span class="number">0x3a</span>, <span class="number">0x5f</span>, <span class="number">0x30</span>, <span class="number">0xcf</span>, <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0xd8</span>, <span class="number">0x60</span>, <span class="number">0x27</span>, <span class="number">0xac</span>, <span class="number">0x5e</span>, <span class="number">0xec</span>, <span class="number">0x07</span>, <span class="number">0xe1</span>, <span class="number">0x36</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6c</span>, <span class="number">0x46</span>, <span class="number">0x94</span>, <span class="number">0x13</span>, <span class="number">0x4f</span>, <span class="number">0x55</span>, <span class="number">0xcf</span>, <span class="number">0x35</span>, <span class="number">0x50</span>, <span class="number">0x3f</span>, <span class="number">0xc0</span>, <span class="number">0xb5</span>, <span class="number">0x77</span>, <span class="number">0xd7</span>, <span class="number">0x6f</span>, <span class="number">0x28</span>, <span class="number">0xa3</span>, <span class="number">0x51</span>, <span class="number">0xe3</span>, <span class="number">0x08</span>, <span class="number">0xee</span>, <span class="number">0x39</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6d</span>, <span class="number">0x47</span>, <span class="number">0x95</span>, <span class="number">0x12</span>, <span class="number">0x4e</span>, <span class="number">0x54</span>, <span class="number">0xce</span>, <span class="number">0x34</span>, <span class="number">0x51</span>, <span class="number">0x3e</span>, <span class="number">0xc1</span>, <span class="number">0xb4</span>, <span class="number">0x76</span>, <span class="number">0xd6</span>, <span class="number">0x6e</span>, <span class="number">0x29</span>, <span class="number">0xa2</span>, <span class="number">0x50</span>, <span class="number">0xe2</span>, <span class="number">0x09</span>, <span class="number">0xef</span>, <span class="number">0x38</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6e</span>, <span class="number">0x44</span>, <span class="number">0x96</span>, <span class="number">0x11</span>, <span class="number">0x4d</span>, <span class="number">0x57</span>, <span class="number">0xcd</span>, <span class="number">0x37</span>, <span class="number">0x52</span>, <span class="number">0x3d</span>, <span class="number">0xc2</span>, <span class="number">0xb7</span>, <span class="number">0x75</span>, <span class="number">0xd5</span>, <span class="number">0x6d</span>, <span class="number">0x2a</span>, <span class="number">0xa1</span>, <span class="number">0x53</span>, <span class="number">0xe1</span>, <span class="number">0x0a</span>, <span class="number">0xec</span>, <span class="number">0x3b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6f</span>, <span class="number">0x45</span>, <span class="number">0x97</span>, <span class="number">0x10</span>, <span class="number">0x4c</span>, <span class="number">0x56</span>, <span class="number">0xcc</span>, <span class="number">0x36</span>, <span class="number">0x53</span>, <span class="number">0x3c</span>, <span class="number">0xc3</span>, <span class="number">0xb6</span>, <span class="number">0x74</span>, <span class="number">0xd4</span>, <span class="number">0x6c</span>, <span class="number">0x2b</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0xe0</span>, <span class="number">0x0b</span>, <span class="number">0xed</span>, <span class="number">0x3a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x68</span>, <span class="number">0x42</span>, <span class="number">0x90</span>, <span class="number">0x17</span>, <span class="number">0x4b</span>, <span class="number">0x51</span>, <span class="number">0xcb</span>, <span class="number">0x31</span>, <span class="number">0x54</span>, <span class="number">0x3b</span>, <span class="number">0xc4</span>, <span class="number">0xb1</span>, <span class="number">0x73</span>, <span class="number">0xd3</span>, <span class="number">0x6b</span>, <span class="number">0x2c</span>, <span class="number">0xa7</span>, <span class="number">0x55</span>, <span class="number">0xe7</span>, <span class="number">0x0c</span>, <span class="number">0xea</span>, <span class="number">0x3d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x69</span>, <span class="number">0x43</span>, <span class="number">0x91</span>, <span class="number">0x16</span>, <span class="number">0x4a</span>, <span class="number">0x50</span>, <span class="number">0xca</span>, <span class="number">0x30</span>, <span class="number">0x55</span>, <span class="number">0x3a</span>, <span class="number">0xc5</span>, <span class="number">0xb0</span>, <span class="number">0x72</span>, <span class="number">0xd2</span>, <span class="number">0x6a</span>, <span class="number">0x2d</span>, <span class="number">0xa6</span>, <span class="number">0x54</span>, <span class="number">0xe6</span>, <span class="number">0x0d</span>, <span class="number">0xeb</span>, <span class="number">0x3c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6a</span>, <span class="number">0x40</span>, <span class="number">0x92</span>, <span class="number">0x15</span>, <span class="number">0x49</span>, <span class="number">0x53</span>, <span class="number">0xc9</span>, <span class="number">0x33</span>, <span class="number">0x56</span>, <span class="number">0x39</span>, <span class="number">0xc6</span>, <span class="number">0xb3</span>, <span class="number">0x71</span>, <span class="number">0xd1</span>, <span class="number">0x69</span>, <span class="number">0x2e</span>, <span class="number">0xa5</span>, <span class="number">0x57</span>, <span class="number">0xe5</span>, <span class="number">0x0e</span>, <span class="number">0xe8</span>, <span class="number">0x3f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x6b</span>, <span class="number">0x41</span>, <span class="number">0x93</span>, <span class="number">0x14</span>, <span class="number">0x48</span>, <span class="number">0x52</span>, <span class="number">0xc8</span>, <span class="number">0x32</span>, <span class="number">0x57</span>, <span class="number">0x38</span>, <span class="number">0xc7</span>, <span class="number">0xb2</span>, <span class="number">0x70</span>, <span class="number">0xd0</span>, <span class="number">0x68</span>, <span class="number">0x2f</span>, <span class="number">0xa4</span>, <span class="number">0x56</span>, <span class="number">0xe4</span>, <span class="number">0x0f</span>, <span class="number">0xe9</span>, <span class="number">0x3e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x74</span>, <span class="number">0x5e</span>, <span class="number">0x8c</span>, <span class="number">0x0b</span>, <span class="number">0x57</span>, <span class="number">0x4d</span>, <span class="number">0xd7</span>, <span class="number">0x2d</span>, <span class="number">0x48</span>, <span class="number">0x27</span>, <span class="number">0xd8</span>, <span class="number">0xad</span>, <span class="number">0x6f</span>, <span class="number">0xcf</span>, <span class="number">0x77</span>, <span class="number">0x30</span>, <span class="number">0xbb</span>, <span class="number">0x49</span>, <span class="number">0xfb</span>, <span class="number">0x10</span>, <span class="number">0xf6</span>, <span class="number">0x21</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x75</span>, <span class="number">0x5f</span>, <span class="number">0x8d</span>, <span class="number">0x0a</span>, <span class="number">0x56</span>, <span class="number">0x4c</span>, <span class="number">0xd6</span>, <span class="number">0x2c</span>, <span class="number">0x49</span>, <span class="number">0x26</span>, <span class="number">0xd9</span>, <span class="number">0xac</span>, <span class="number">0x6e</span>, <span class="number">0xce</span>, <span class="number">0x76</span>, <span class="number">0x31</span>, <span class="number">0xba</span>, <span class="number">0x48</span>, <span class="number">0xfa</span>, <span class="number">0x11</span>, <span class="number">0xf7</span>, <span class="number">0x20</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x76</span>, <span class="number">0x5c</span>, <span class="number">0x8e</span>, <span class="number">0x09</span>, <span class="number">0x55</span>, <span class="number">0x4f</span>, <span class="number">0xd5</span>, <span class="number">0x2f</span>, <span class="number">0x4a</span>, <span class="number">0x25</span>, <span class="number">0xda</span>, <span class="number">0xaf</span>, <span class="number">0x6d</span>, <span class="number">0xcd</span>, <span class="number">0x75</span>, <span class="number">0x32</span>, <span class="number">0xb9</span>, <span class="number">0x4b</span>, <span class="number">0xf9</span>, <span class="number">0x12</span>, <span class="number">0xf4</span>, <span class="number">0x23</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x77</span>, <span class="number">0x5d</span>, <span class="number">0x8f</span>, <span class="number">0x08</span>, <span class="number">0x54</span>, <span class="number">0x4e</span>, <span class="number">0xd4</span>, <span class="number">0x2e</span>, <span class="number">0x4b</span>, <span class="number">0x24</span>, <span class="number">0xdb</span>, <span class="number">0xae</span>, <span class="number">0x6c</span>, <span class="number">0xcc</span>, <span class="number">0x74</span>, <span class="number">0x33</span>, <span class="number">0xb8</span>, <span class="number">0x4a</span>, <span class="number">0xf8</span>, <span class="number">0x13</span>, <span class="number">0xf5</span>, <span class="number">0x22</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x70</span>, <span class="number">0x5a</span>, <span class="number">0x88</span>, <span class="number">0x0f</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0xd3</span>, <span class="number">0x29</span>, <span class="number">0x4c</span>, <span class="number">0x23</span>, <span class="number">0xdc</span>, <span class="number">0xa9</span>, <span class="number">0x6b</span>, <span class="number">0xcb</span>, <span class="number">0x73</span>, <span class="number">0x34</span>, <span class="number">0xbf</span>, <span class="number">0x4d</span>, <span class="number">0xff</span>, <span class="number">0x14</span>, <span class="number">0xf2</span>, <span class="number">0x25</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x71</span>, <span class="number">0x5b</span>, <span class="number">0x89</span>, <span class="number">0x0e</span>, <span class="number">0x52</span>, <span class="number">0x48</span>, <span class="number">0xd2</span>, <span class="number">0x28</span>, <span class="number">0x4d</span>, <span class="number">0x22</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x6a</span>, <span class="number">0xca</span>, <span class="number">0x72</span>, <span class="number">0x35</span>, <span class="number">0xbe</span>, <span class="number">0x4c</span>, <span class="number">0xfe</span>, <span class="number">0x15</span>, <span class="number">0xf3</span>, <span class="number">0x24</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x72</span>, <span class="number">0x58</span>, <span class="number">0x8a</span>, <span class="number">0x0d</span>, <span class="number">0x51</span>, <span class="number">0x4b</span>, <span class="number">0xd1</span>, <span class="number">0x2b</span>, <span class="number">0x4e</span>, <span class="number">0x21</span>, <span class="number">0xde</span>, <span class="number">0xab</span>, <span class="number">0x69</span>, <span class="number">0xc9</span>, <span class="number">0x71</span>, <span class="number">0x36</span>, <span class="number">0xbd</span>, <span class="number">0x4f</span>, <span class="number">0xfd</span>, <span class="number">0x16</span>, <span class="number">0xf0</span>, <span class="number">0x27</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x73</span>, <span class="number">0x59</span>, <span class="number">0x8b</span>, <span class="number">0x0c</span>, <span class="number">0x50</span>, <span class="number">0x4a</span>, <span class="number">0xd0</span>, <span class="number">0x2a</span>, <span class="number">0x4f</span>, <span class="number">0x20</span>, <span class="number">0xdf</span>, <span class="number">0xaa</span>, <span class="number">0x68</span>, <span class="number">0xc8</span>, <span class="number">0x70</span>, <span class="number">0x37</span>, <span class="number">0xbc</span>, <span class="number">0x4e</span>, <span class="number">0xfc</span>, <span class="number">0x17</span>, <span class="number">0xf1</span>, <span class="number">0x26</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7c</span>, <span class="number">0x56</span>, <span class="number">0x84</span>, <span class="number">0x03</span>, <span class="number">0x5f</span>, <span class="number">0x45</span>, <span class="number">0xdf</span>, <span class="number">0x25</span>, <span class="number">0x40</span>, <span class="number">0x2f</span>, <span class="number">0xd0</span>, <span class="number">0xa5</span>, <span class="number">0x67</span>, <span class="number">0xc7</span>, <span class="number">0x7f</span>, <span class="number">0x38</span>, <span class="number">0xb3</span>, <span class="number">0x41</span>, <span class="number">0xf3</span>, <span class="number">0x18</span>, <span class="number">0xfe</span>, <span class="number">0x29</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7d</span>, <span class="number">0x57</span>, <span class="number">0x85</span>, <span class="number">0x02</span>, <span class="number">0x5e</span>, <span class="number">0x44</span>, <span class="number">0xde</span>, <span class="number">0x24</span>, <span class="number">0x41</span>, <span class="number">0x2e</span>, <span class="number">0xd1</span>, <span class="number">0xa4</span>, <span class="number">0x66</span>, <span class="number">0xc6</span>, <span class="number">0x7e</span>, <span class="number">0x39</span>, <span class="number">0xb2</span>, <span class="number">0x40</span>, <span class="number">0xf2</span>, <span class="number">0x19</span>, <span class="number">0xff</span>, <span class="number">0x28</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7e</span>, <span class="number">0x54</span>, <span class="number">0x86</span>, <span class="number">0x01</span>, <span class="number">0x5d</span>, <span class="number">0x47</span>, <span class="number">0xdd</span>, <span class="number">0x27</span>, <span class="number">0x42</span>, <span class="number">0x2d</span>, <span class="number">0xd2</span>, <span class="number">0xa7</span>, <span class="number">0x65</span>, <span class="number">0xc5</span>, <span class="number">0x7d</span>, <span class="number">0x3a</span>, <span class="number">0xb1</span>, <span class="number">0x43</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0xfc</span>, <span class="number">0x2b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7f</span>, <span class="number">0x55</span>, <span class="number">0x87</span>, <span class="number">0x00</span>, <span class="number">0x5c</span>, <span class="number">0x46</span>, <span class="number">0xdc</span>, <span class="number">0x26</span>, <span class="number">0x43</span>, <span class="number">0x2c</span>, <span class="number">0xd3</span>, <span class="number">0xa6</span>, <span class="number">0x64</span>, <span class="number">0xc4</span>, <span class="number">0x7c</span>, <span class="number">0x3b</span>, <span class="number">0xb0</span>, <span class="number">0x42</span>, <span class="number">0xf0</span>, <span class="number">0x1b</span>, <span class="number">0xfd</span>, <span class="number">0x2a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x78</span>, <span class="number">0x52</span>, <span class="number">0x80</span>, <span class="number">0x07</span>, <span class="number">0x5b</span>, <span class="number">0x41</span>, <span class="number">0xdb</span>, <span class="number">0x21</span>, <span class="number">0x44</span>, <span class="number">0x2b</span>, <span class="number">0xd4</span>, <span class="number">0xa1</span>, <span class="number">0x63</span>, <span class="number">0xc3</span>, <span class="number">0x7b</span>, <span class="number">0x3c</span>, <span class="number">0xb7</span>, <span class="number">0x45</span>, <span class="number">0xf7</span>, <span class="number">0x1c</span>, <span class="number">0xfa</span>, <span class="number">0x2d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x79</span>, <span class="number">0x53</span>, <span class="number">0x81</span>, <span class="number">0x06</span>, <span class="number">0x5a</span>, <span class="number">0x40</span>, <span class="number">0xda</span>, <span class="number">0x20</span>, <span class="number">0x45</span>, <span class="number">0x2a</span>, <span class="number">0xd5</span>, <span class="number">0xa0</span>, <span class="number">0x62</span>, <span class="number">0xc2</span>, <span class="number">0x7a</span>, <span class="number">0x3d</span>, <span class="number">0xb6</span>, <span class="number">0x44</span>, <span class="number">0xf6</span>, <span class="number">0x1d</span>, <span class="number">0xfb</span>, <span class="number">0x2c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7a</span>, <span class="number">0x50</span>, <span class="number">0x82</span>, <span class="number">0x05</span>, <span class="number">0x59</span>, <span class="number">0x43</span>, <span class="number">0xd9</span>, <span class="number">0x23</span>, <span class="number">0x46</span>, <span class="number">0x29</span>, <span class="number">0xd6</span>, <span class="number">0xa3</span>, <span class="number">0x61</span>, <span class="number">0xc1</span>, <span class="number">0x79</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x47</span>, <span class="number">0xf5</span>, <span class="number">0x1e</span>, <span class="number">0xf8</span>, <span class="number">0x2f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x7b</span>, <span class="number">0x51</span>, <span class="number">0x83</span>, <span class="number">0x04</span>, <span class="number">0x58</span>, <span class="number">0x42</span>, <span class="number">0xd8</span>, <span class="number">0x22</span>, <span class="number">0x47</span>, <span class="number">0x28</span>, <span class="number">0xd7</span>, <span class="number">0xa2</span>, <span class="number">0x60</span>, <span class="number">0xc0</span>, <span class="number">0x78</span>, <span class="number">0x3f</span>, <span class="number">0xb4</span>, <span class="number">0x46</span>, <span class="number">0xf4</span>, <span class="number">0x1f</span>, <span class="number">0xf9</span>, <span class="number">0x2e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x04</span>, <span class="number">0x2e</span>, <span class="number">0xfc</span>, <span class="number">0x7b</span>, <span class="number">0x27</span>, <span class="number">0x3d</span>, <span class="number">0xa7</span>, <span class="number">0x5d</span>, <span class="number">0x38</span>, <span class="number">0x57</span>, <span class="number">0xa8</span>, <span class="number">0xdd</span>, <span class="number">0x1f</span>, <span class="number">0xbf</span>, <span class="number">0x07</span>, <span class="number">0x40</span>, <span class="number">0xcb</span>, <span class="number">0x39</span>, <span class="number">0x8b</span>, <span class="number">0x60</span>, <span class="number">0x86</span>, <span class="number">0x51</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x05</span>, <span class="number">0x2f</span>, <span class="number">0xfd</span>, <span class="number">0x7a</span>, <span class="number">0x26</span>, <span class="number">0x3c</span>, <span class="number">0xa6</span>, <span class="number">0x5c</span>, <span class="number">0x39</span>, <span class="number">0x56</span>, <span class="number">0xa9</span>, <span class="number">0xdc</span>, <span class="number">0x1e</span>, <span class="number">0xbe</span>, <span class="number">0x06</span>, <span class="number">0x41</span>, <span class="number">0xca</span>, <span class="number">0x38</span>, <span class="number">0x8a</span>, <span class="number">0x61</span>, <span class="number">0x87</span>, <span class="number">0x50</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x06</span>, <span class="number">0x2c</span>, <span class="number">0xfe</span>, <span class="number">0x79</span>, <span class="number">0x25</span>, <span class="number">0x3f</span>, <span class="number">0xa5</span>, <span class="number">0x5f</span>, <span class="number">0x3a</span>, <span class="number">0x55</span>, <span class="number">0xaa</span>, <span class="number">0xdf</span>, <span class="number">0x1d</span>, <span class="number">0xbd</span>, <span class="number">0x05</span>, <span class="number">0x42</span>, <span class="number">0xc9</span>, <span class="number">0x3b</span>, <span class="number">0x89</span>, <span class="number">0x62</span>, <span class="number">0x84</span>, <span class="number">0x53</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x07</span>, <span class="number">0x2d</span>, <span class="number">0xff</span>, <span class="number">0x78</span>, <span class="number">0x24</span>, <span class="number">0x3e</span>, <span class="number">0xa4</span>, <span class="number">0x5e</span>, <span class="number">0x3b</span>, <span class="number">0x54</span>, <span class="number">0xab</span>, <span class="number">0xde</span>, <span class="number">0x1c</span>, <span class="number">0xbc</span>, <span class="number">0x04</span>, <span class="number">0x43</span>, <span class="number">0xc8</span>, <span class="number">0x3a</span>, <span class="number">0x88</span>, <span class="number">0x63</span>, <span class="number">0x85</span>, <span class="number">0x52</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x00</span>, <span class="number">0x2a</span>, <span class="number">0xf8</span>, <span class="number">0x7f</span>, <span class="number">0x23</span>, <span class="number">0x39</span>, <span class="number">0xa3</span>, <span class="number">0x59</span>, <span class="number">0x3c</span>, <span class="number">0x53</span>, <span class="number">0xac</span>, <span class="number">0xd9</span>, <span class="number">0x1b</span>, <span class="number">0xbb</span>, <span class="number">0x03</span>, <span class="number">0x44</span>, <span class="number">0xcf</span>, <span class="number">0x3d</span>, <span class="number">0x8f</span>, <span class="number">0x64</span>, <span class="number">0x82</span>, <span class="number">0x55</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x01</span>, <span class="number">0x2b</span>, <span class="number">0xf9</span>, <span class="number">0x7e</span>, <span class="number">0x22</span>, <span class="number">0x38</span>, <span class="number">0xa2</span>, <span class="number">0x58</span>, <span class="number">0x3d</span>, <span class="number">0x52</span>, <span class="number">0xad</span>, <span class="number">0xd8</span>, <span class="number">0x1a</span>, <span class="number">0xba</span>, <span class="number">0x02</span>, <span class="number">0x45</span>, <span class="number">0xce</span>, <span class="number">0x3c</span>, <span class="number">0x8e</span>, <span class="number">0x65</span>, <span class="number">0x83</span>, <span class="number">0x54</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x02</span>, <span class="number">0x28</span>, <span class="number">0xfa</span>, <span class="number">0x7d</span>, <span class="number">0x21</span>, <span class="number">0x3b</span>, <span class="number">0xa1</span>, <span class="number">0x5b</span>, <span class="number">0x3e</span>, <span class="number">0x51</span>, <span class="number">0xae</span>, <span class="number">0xdb</span>, <span class="number">0x19</span>, <span class="number">0xb9</span>, <span class="number">0x01</span>, <span class="number">0x46</span>, <span class="number">0xcd</span>, <span class="number">0x3f</span>, <span class="number">0x8d</span>, <span class="number">0x66</span>, <span class="number">0x80</span>, <span class="number">0x57</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x03</span>, <span class="number">0x29</span>, <span class="number">0xfb</span>, <span class="number">0x7c</span>, <span class="number">0x20</span>, <span class="number">0x3a</span>, <span class="number">0xa0</span>, <span class="number">0x5a</span>, <span class="number">0x3f</span>, <span class="number">0x50</span>, <span class="number">0xaf</span>, <span class="number">0xda</span>, <span class="number">0x18</span>, <span class="number">0xb8</span>, <span class="number">0x00</span>, <span class="number">0x47</span>, <span class="number">0xcc</span>, <span class="number">0x3e</span>, <span class="number">0x8c</span>, <span class="number">0x67</span>, <span class="number">0x81</span>, <span class="number">0x56</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0c</span>, <span class="number">0x26</span>, <span class="number">0xf4</span>, <span class="number">0x73</span>, <span class="number">0x2f</span>, <span class="number">0x35</span>, <span class="number">0xaf</span>, <span class="number">0x55</span>, <span class="number">0x30</span>, <span class="number">0x5f</span>, <span class="number">0xa0</span>, <span class="number">0xd5</span>, <span class="number">0x17</span>, <span class="number">0xb7</span>, <span class="number">0x0f</span>, <span class="number">0x48</span>, <span class="number">0xc3</span>, <span class="number">0x31</span>, <span class="number">0x83</span>, <span class="number">0x68</span>, <span class="number">0x8e</span>, <span class="number">0x59</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0d</span>, <span class="number">0x27</span>, <span class="number">0xf5</span>, <span class="number">0x72</span>, <span class="number">0x2e</span>, <span class="number">0x34</span>, <span class="number">0xae</span>, <span class="number">0x54</span>, <span class="number">0x31</span>, <span class="number">0x5e</span>, <span class="number">0xa1</span>, <span class="number">0xd4</span>, <span class="number">0x16</span>, <span class="number">0xb6</span>, <span class="number">0x0e</span>, <span class="number">0x49</span>, <span class="number">0xc2</span>, <span class="number">0x30</span>, <span class="number">0x82</span>, <span class="number">0x69</span>, <span class="number">0x8f</span>, <span class="number">0x58</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0e</span>, <span class="number">0x24</span>, <span class="number">0xf6</span>, <span class="number">0x71</span>, <span class="number">0x2d</span>, <span class="number">0x37</span>, <span class="number">0xad</span>, <span class="number">0x57</span>, <span class="number">0x32</span>, <span class="number">0x5d</span>, <span class="number">0xa2</span>, <span class="number">0xd7</span>, <span class="number">0x15</span>, <span class="number">0xb5</span>, <span class="number">0x0d</span>, <span class="number">0x4a</span>, <span class="number">0xc1</span>, <span class="number">0x33</span>, <span class="number">0x81</span>, <span class="number">0x6a</span>, <span class="number">0x8c</span>, <span class="number">0x5b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0f</span>, <span class="number">0x25</span>, <span class="number">0xf7</span>, <span class="number">0x70</span>, <span class="number">0x2c</span>, <span class="number">0x36</span>, <span class="number">0xac</span>, <span class="number">0x56</span>, <span class="number">0x33</span>, <span class="number">0x5c</span>, <span class="number">0xa3</span>, <span class="number">0xd6</span>, <span class="number">0x14</span>, <span class="number">0xb4</span>, <span class="number">0x0c</span>, <span class="number">0x4b</span>, <span class="number">0xc0</span>, <span class="number">0x32</span>, <span class="number">0x80</span>, <span class="number">0x6b</span>, <span class="number">0x8d</span>, <span class="number">0x5a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x08</span>, <span class="number">0x22</span>, <span class="number">0xf0</span>, <span class="number">0x77</span>, <span class="number">0x2b</span>, <span class="number">0x31</span>, <span class="number">0xab</span>, <span class="number">0x51</span>, <span class="number">0x34</span>, <span class="number">0x5b</span>, <span class="number">0xa4</span>, <span class="number">0xd1</span>, <span class="number">0x13</span>, <span class="number">0xb3</span>, <span class="number">0x0b</span>, <span class="number">0x4c</span>, <span class="number">0xc7</span>, <span class="number">0x35</span>, <span class="number">0x87</span>, <span class="number">0x6c</span>, <span class="number">0x8a</span>, <span class="number">0x5d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x09</span>, <span class="number">0x23</span>, <span class="number">0xf1</span>, <span class="number">0x76</span>, <span class="number">0x2a</span>, <span class="number">0x30</span>, <span class="number">0xaa</span>, <span class="number">0x50</span>, <span class="number">0x35</span>, <span class="number">0x5a</span>, <span class="number">0xa5</span>, <span class="number">0xd0</span>, <span class="number">0x12</span>, <span class="number">0xb2</span>, <span class="number">0x0a</span>, <span class="number">0x4d</span>, <span class="number">0xc6</span>, <span class="number">0x34</span>, <span class="number">0x86</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0x5c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0a</span>, <span class="number">0x20</span>, <span class="number">0xf2</span>, <span class="number">0x75</span>, <span class="number">0x29</span>, <span class="number">0x33</span>, <span class="number">0xa9</span>, <span class="number">0x53</span>, <span class="number">0x36</span>, <span class="number">0x59</span>, <span class="number">0xa6</span>, <span class="number">0xd3</span>, <span class="number">0x11</span>, <span class="number">0xb1</span>, <span class="number">0x09</span>, <span class="number">0x4e</span>, <span class="number">0xc5</span>, <span class="number">0x37</span>, <span class="number">0x85</span>, <span class="number">0x6e</span>, <span class="number">0x88</span>, <span class="number">0x5f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x0b</span>, <span class="number">0x21</span>, <span class="number">0xf3</span>, <span class="number">0x74</span>, <span class="number">0x28</span>, <span class="number">0x32</span>, <span class="number">0xa8</span>, <span class="number">0x52</span>, <span class="number">0x37</span>, <span class="number">0x58</span>, <span class="number">0xa7</span>, <span class="number">0xd2</span>, <span class="number">0x10</span>, <span class="number">0xb0</span>, <span class="number">0x08</span>, <span class="number">0x4f</span>, <span class="number">0xc4</span>, <span class="number">0x36</span>, <span class="number">0x84</span>, <span class="number">0x6f</span>, <span class="number">0x89</span>, <span class="number">0x5e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x14</span>, <span class="number">0x3e</span>, <span class="number">0xec</span>, <span class="number">0x6b</span>, <span class="number">0x37</span>, <span class="number">0x2d</span>, <span class="number">0xb7</span>, <span class="number">0x4d</span>, <span class="number">0x28</span>, <span class="number">0x47</span>, <span class="number">0xb8</span>, <span class="number">0xcd</span>, <span class="number">0x0f</span>, <span class="number">0xaf</span>, <span class="number">0x17</span>, <span class="number">0x50</span>, <span class="number">0xdb</span>, <span class="number">0x29</span>, <span class="number">0x9b</span>, <span class="number">0x70</span>, <span class="number">0x96</span>, <span class="number">0x41</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x15</span>, <span class="number">0x3f</span>, <span class="number">0xed</span>, <span class="number">0x6a</span>, <span class="number">0x36</span>, <span class="number">0x2c</span>, <span class="number">0xb6</span>, <span class="number">0x4c</span>, <span class="number">0x29</span>, <span class="number">0x46</span>, <span class="number">0xb9</span>, <span class="number">0xcc</span>, <span class="number">0x0e</span>, <span class="number">0xae</span>, <span class="number">0x16</span>, <span class="number">0x51</span>, <span class="number">0xda</span>, <span class="number">0x28</span>, <span class="number">0x9a</span>, <span class="number">0x71</span>, <span class="number">0x97</span>, <span class="number">0x40</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x16</span>, <span class="number">0x3c</span>, <span class="number">0xee</span>, <span class="number">0x69</span>, <span class="number">0x35</span>, <span class="number">0x2f</span>, <span class="number">0xb5</span>, <span class="number">0x4f</span>, <span class="number">0x2a</span>, <span class="number">0x45</span>, <span class="number">0xba</span>, <span class="number">0xcf</span>, <span class="number">0x0d</span>, <span class="number">0xad</span>, <span class="number">0x15</span>, <span class="number">0x52</span>, <span class="number">0xd9</span>, <span class="number">0x2b</span>, <span class="number">0x99</span>, <span class="number">0x72</span>, <span class="number">0x94</span>, <span class="number">0x43</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x17</span>, <span class="number">0x3d</span>, <span class="number">0xef</span>, <span class="number">0x68</span>, <span class="number">0x34</span>, <span class="number">0x2e</span>, <span class="number">0xb4</span>, <span class="number">0x4e</span>, <span class="number">0x2b</span>, <span class="number">0x44</span>, <span class="number">0xbb</span>, <span class="number">0xce</span>, <span class="number">0x0c</span>, <span class="number">0xac</span>, <span class="number">0x14</span>, <span class="number">0x53</span>, <span class="number">0xd8</span>, <span class="number">0x2a</span>, <span class="number">0x98</span>, <span class="number">0x73</span>, <span class="number">0x95</span>, <span class="number">0x42</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x10</span>, <span class="number">0x3a</span>, <span class="number">0xe8</span>, <span class="number">0x6f</span>, <span class="number">0x33</span>, <span class="number">0x29</span>, <span class="number">0xb3</span>, <span class="number">0x49</span>, <span class="number">0x2c</span>, <span class="number">0x43</span>, <span class="number">0xbc</span>, <span class="number">0xc9</span>, <span class="number">0x0b</span>, <span class="number">0xab</span>, <span class="number">0x13</span>, <span class="number">0x54</span>, <span class="number">0xdf</span>, <span class="number">0x2d</span>, <span class="number">0x9f</span>, <span class="number">0x74</span>, <span class="number">0x92</span>, <span class="number">0x45</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x11</span>, <span class="number">0x3b</span>, <span class="number">0xe9</span>, <span class="number">0x6e</span>, <span class="number">0x32</span>, <span class="number">0x28</span>, <span class="number">0xb2</span>, <span class="number">0x48</span>, <span class="number">0x2d</span>, <span class="number">0x42</span>, <span class="number">0xbd</span>, <span class="number">0xc8</span>, <span class="number">0x0a</span>, <span class="number">0xaa</span>, <span class="number">0x12</span>, <span class="number">0x55</span>, <span class="number">0xde</span>, <span class="number">0x2c</span>, <span class="number">0x9e</span>, <span class="number">0x75</span>, <span class="number">0x93</span>, <span class="number">0x44</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x12</span>, <span class="number">0x38</span>, <span class="number">0xea</span>, <span class="number">0x6d</span>, <span class="number">0x31</span>, <span class="number">0x2b</span>, <span class="number">0xb1</span>, <span class="number">0x4b</span>, <span class="number">0x2e</span>, <span class="number">0x41</span>, <span class="number">0xbe</span>, <span class="number">0xcb</span>, <span class="number">0x09</span>, <span class="number">0xa9</span>, <span class="number">0x11</span>, <span class="number">0x56</span>, <span class="number">0xdd</span>, <span class="number">0x2f</span>, <span class="number">0x9d</span>, <span class="number">0x76</span>, <span class="number">0x90</span>, <span class="number">0x47</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x13</span>, <span class="number">0x39</span>, <span class="number">0xeb</span>, <span class="number">0x6c</span>, <span class="number">0x30</span>, <span class="number">0x2a</span>, <span class="number">0xb0</span>, <span class="number">0x4a</span>, <span class="number">0x2f</span>, <span class="number">0x40</span>, <span class="number">0xbf</span>, <span class="number">0xca</span>, <span class="number">0x08</span>, <span class="number">0xa8</span>, <span class="number">0x10</span>, <span class="number">0x57</span>, <span class="number">0xdc</span>, <span class="number">0x2e</span>, <span class="number">0x9c</span>, <span class="number">0x77</span>, <span class="number">0x91</span>, <span class="number">0x46</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1c</span>, <span class="number">0x36</span>, <span class="number">0xe4</span>, <span class="number">0x63</span>, <span class="number">0x3f</span>, <span class="number">0x25</span>, <span class="number">0xbf</span>, <span class="number">0x45</span>, <span class="number">0x20</span>, <span class="number">0x4f</span>, <span class="number">0xb0</span>, <span class="number">0xc5</span>, <span class="number">0x07</span>, <span class="number">0xa7</span>, <span class="number">0x1f</span>, <span class="number">0x58</span>, <span class="number">0xd3</span>, <span class="number">0x21</span>, <span class="number">0x93</span>, <span class="number">0x78</span>, <span class="number">0x9e</span>, <span class="number">0x49</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1d</span>, <span class="number">0x37</span>, <span class="number">0xe5</span>, <span class="number">0x62</span>, <span class="number">0x3e</span>, <span class="number">0x24</span>, <span class="number">0xbe</span>, <span class="number">0x44</span>, <span class="number">0x21</span>, <span class="number">0x4e</span>, <span class="number">0xb1</span>, <span class="number">0xc4</span>, <span class="number">0x06</span>, <span class="number">0xa6</span>, <span class="number">0x1e</span>, <span class="number">0x59</span>, <span class="number">0xd2</span>, <span class="number">0x20</span>, <span class="number">0x92</span>, <span class="number">0x79</span>, <span class="number">0x9f</span>, <span class="number">0x48</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1e</span>, <span class="number">0x34</span>, <span class="number">0xe6</span>, <span class="number">0x61</span>, <span class="number">0x3d</span>, <span class="number">0x27</span>, <span class="number">0xbd</span>, <span class="number">0x47</span>, <span class="number">0x22</span>, <span class="number">0x4d</span>, <span class="number">0xb2</span>, <span class="number">0xc7</span>, <span class="number">0x05</span>, <span class="number">0xa5</span>, <span class="number">0x1d</span>, <span class="number">0x5a</span>, <span class="number">0xd1</span>, <span class="number">0x23</span>, <span class="number">0x91</span>, <span class="number">0x7a</span>, <span class="number">0x9c</span>, <span class="number">0x4b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1f</span>, <span class="number">0x35</span>, <span class="number">0xe7</span>, <span class="number">0x60</span>, <span class="number">0x3c</span>, <span class="number">0x26</span>, <span class="number">0xbc</span>, <span class="number">0x46</span>, <span class="number">0x23</span>, <span class="number">0x4c</span>, <span class="number">0xb3</span>, <span class="number">0xc6</span>, <span class="number">0x04</span>, <span class="number">0xa4</span>, <span class="number">0x1c</span>, <span class="number">0x5b</span>, <span class="number">0xd0</span>, <span class="number">0x22</span>, <span class="number">0x90</span>, <span class="number">0x7b</span>, <span class="number">0x9d</span>, <span class="number">0x4a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x18</span>, <span class="number">0x32</span>, <span class="number">0xe0</span>, <span class="number">0x67</span>, <span class="number">0x3b</span>, <span class="number">0x21</span>, <span class="number">0xbb</span>, <span class="number">0x41</span>, <span class="number">0x24</span>, <span class="number">0x4b</span>, <span class="number">0xb4</span>, <span class="number">0xc1</span>, <span class="number">0x03</span>, <span class="number">0xa3</span>, <span class="number">0x1b</span>, <span class="number">0x5c</span>, <span class="number">0xd7</span>, <span class="number">0x25</span>, <span class="number">0x97</span>, <span class="number">0x7c</span>, <span class="number">0x9a</span>, <span class="number">0x4d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x19</span>, <span class="number">0x33</span>, <span class="number">0xe1</span>, <span class="number">0x66</span>, <span class="number">0x3a</span>, <span class="number">0x20</span>, <span class="number">0xba</span>, <span class="number">0x40</span>, <span class="number">0x25</span>, <span class="number">0x4a</span>, <span class="number">0xb5</span>, <span class="number">0xc0</span>, <span class="number">0x02</span>, <span class="number">0xa2</span>, <span class="number">0x1a</span>, <span class="number">0x5d</span>, <span class="number">0xd6</span>, <span class="number">0x24</span>, <span class="number">0x96</span>, <span class="number">0x7d</span>, <span class="number">0x9b</span>, <span class="number">0x4c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1a</span>, <span class="number">0x30</span>, <span class="number">0xe2</span>, <span class="number">0x65</span>, <span class="number">0x39</span>, <span class="number">0x23</span>, <span class="number">0xb9</span>, <span class="number">0x43</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0xb6</span>, <span class="number">0xc3</span>, <span class="number">0x01</span>, <span class="number">0xa1</span>, <span class="number">0x19</span>, <span class="number">0x5e</span>, <span class="number">0xd5</span>, <span class="number">0x27</span>, <span class="number">0x95</span>, <span class="number">0x7e</span>, <span class="number">0x98</span>, <span class="number">0x4f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x1b</span>, <span class="number">0x31</span>, <span class="number">0xe3</span>, <span class="number">0x64</span>, <span class="number">0x38</span>, <span class="number">0x22</span>, <span class="number">0xb8</span>, <span class="number">0x42</span>, <span class="number">0x27</span>, <span class="number">0x48</span>, <span class="number">0xb7</span>, <span class="number">0xc2</span>, <span class="number">0x00</span>, <span class="number">0xa0</span>, <span class="number">0x18</span>, <span class="number">0x5f</span>, <span class="number">0xd4</span>, <span class="number">0x26</span>, <span class="number">0x94</span>, <span class="number">0x7f</span>, <span class="number">0x99</span>, <span class="number">0x4e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0xdc</span>, <span class="number">0x5b</span>, <span class="number">0x07</span>, <span class="number">0x1d</span>, <span class="number">0x87</span>, <span class="number">0x7d</span>, <span class="number">0x18</span>, <span class="number">0x77</span>, <span class="number">0x88</span>, <span class="number">0xfd</span>, <span class="number">0x3f</span>, <span class="number">0x9f</span>, <span class="number">0x27</span>, <span class="number">0x60</span>, <span class="number">0xeb</span>, <span class="number">0x19</span>, <span class="number">0xab</span>, <span class="number">0x40</span>, <span class="number">0xa6</span>, <span class="number">0x71</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x25</span>, <span class="number">0x0f</span>, <span class="number">0xdd</span>, <span class="number">0x5a</span>, <span class="number">0x06</span>, <span class="number">0x1c</span>, <span class="number">0x86</span>, <span class="number">0x7c</span>, <span class="number">0x19</span>, <span class="number">0x76</span>, <span class="number">0x89</span>, <span class="number">0xfc</span>, <span class="number">0x3e</span>, <span class="number">0x9e</span>, <span class="number">0x26</span>, <span class="number">0x61</span>, <span class="number">0xea</span>, <span class="number">0x18</span>, <span class="number">0xaa</span>, <span class="number">0x41</span>, <span class="number">0xa7</span>, <span class="number">0x70</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x26</span>, <span class="number">0x0c</span>, <span class="number">0xde</span>, <span class="number">0x59</span>, <span class="number">0x05</span>, <span class="number">0x1f</span>, <span class="number">0x85</span>, <span class="number">0x7f</span>, <span class="number">0x1a</span>, <span class="number">0x75</span>, <span class="number">0x8a</span>, <span class="number">0xff</span>, <span class="number">0x3d</span>, <span class="number">0x9d</span>, <span class="number">0x25</span>, <span class="number">0x62</span>, <span class="number">0xe9</span>, <span class="number">0x1b</span>, <span class="number">0xa9</span>, <span class="number">0x42</span>, <span class="number">0xa4</span>, <span class="number">0x73</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x27</span>, <span class="number">0x0d</span>, <span class="number">0xdf</span>, <span class="number">0x58</span>, <span class="number">0x04</span>, <span class="number">0x1e</span>, <span class="number">0x84</span>, <span class="number">0x7e</span>, <span class="number">0x1b</span>, <span class="number">0x74</span>, <span class="number">0x8b</span>, <span class="number">0xfe</span>, <span class="number">0x3c</span>, <span class="number">0x9c</span>, <span class="number">0x24</span>, <span class="number">0x63</span>, <span class="number">0xe8</span>, <span class="number">0x1a</span>, <span class="number">0xa8</span>, <span class="number">0x43</span>, <span class="number">0xa5</span>, <span class="number">0x72</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x20</span>, <span class="number">0x0a</span>, <span class="number">0xd8</span>, <span class="number">0x5f</span>, <span class="number">0x03</span>, <span class="number">0x19</span>, <span class="number">0x83</span>, <span class="number">0x79</span>, <span class="number">0x1c</span>, <span class="number">0x73</span>, <span class="number">0x8c</span>, <span class="number">0xf9</span>, <span class="number">0x3b</span>, <span class="number">0x9b</span>, <span class="number">0x23</span>, <span class="number">0x64</span>, <span class="number">0xef</span>, <span class="number">0x1d</span>, <span class="number">0xaf</span>, <span class="number">0x44</span>, <span class="number">0xa2</span>, <span class="number">0x75</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x21</span>, <span class="number">0x0b</span>, <span class="number">0xd9</span>, <span class="number">0x5e</span>, <span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x82</span>, <span class="number">0x78</span>, <span class="number">0x1d</span>, <span class="number">0x72</span>, <span class="number">0x8d</span>, <span class="number">0xf8</span>, <span class="number">0x3a</span>, <span class="number">0x9a</span>, <span class="number">0x22</span>, <span class="number">0x65</span>, <span class="number">0xee</span>, <span class="number">0x1c</span>, <span class="number">0xae</span>, <span class="number">0x45</span>, <span class="number">0xa3</span>, <span class="number">0x74</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x22</span>, <span class="number">0x08</span>, <span class="number">0xda</span>, <span class="number">0x5d</span>, <span class="number">0x01</span>, <span class="number">0x1b</span>, <span class="number">0x81</span>, <span class="number">0x7b</span>, <span class="number">0x1e</span>, <span class="number">0x71</span>, <span class="number">0x8e</span>, <span class="number">0xfb</span>, <span class="number">0x39</span>, <span class="number">0x99</span>, <span class="number">0x21</span>, <span class="number">0x66</span>, <span class="number">0xed</span>, <span class="number">0x1f</span>, <span class="number">0xad</span>, <span class="number">0x46</span>, <span class="number">0xa0</span>, <span class="number">0x77</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x23</span>, <span class="number">0x09</span>, <span class="number">0xdb</span>, <span class="number">0x5c</span>, <span class="number">0x00</span>, <span class="number">0x1a</span>, <span class="number">0x80</span>, <span class="number">0x7a</span>, <span class="number">0x1f</span>, <span class="number">0x70</span>, <span class="number">0x8f</span>, <span class="number">0xfa</span>, <span class="number">0x38</span>, <span class="number">0x98</span>, <span class="number">0x20</span>, <span class="number">0x67</span>, <span class="number">0xec</span>, <span class="number">0x1e</span>, <span class="number">0xac</span>, <span class="number">0x47</span>, <span class="number">0xa1</span>, <span class="number">0x76</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2c</span>, <span class="number">0x06</span>, <span class="number">0xd4</span>, <span class="number">0x53</span>, <span class="number">0x0f</span>, <span class="number">0x15</span>, <span class="number">0x8f</span>, <span class="number">0x75</span>, <span class="number">0x10</span>, <span class="number">0x7f</span>, <span class="number">0x80</span>, <span class="number">0xf5</span>, <span class="number">0x37</span>, <span class="number">0x97</span>, <span class="number">0x2f</span>, <span class="number">0x68</span>, <span class="number">0xe3</span>, <span class="number">0x11</span>, <span class="number">0xa3</span>, <span class="number">0x48</span>, <span class="number">0xae</span>, <span class="number">0x79</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2d</span>, <span class="number">0x07</span>, <span class="number">0xd5</span>, <span class="number">0x52</span>, <span class="number">0x0e</span>, <span class="number">0x14</span>, <span class="number">0x8e</span>, <span class="number">0x74</span>, <span class="number">0x11</span>, <span class="number">0x7e</span>, <span class="number">0x81</span>, <span class="number">0xf4</span>, <span class="number">0x36</span>, <span class="number">0x96</span>, <span class="number">0x2e</span>, <span class="number">0x69</span>, <span class="number">0xe2</span>, <span class="number">0x10</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0xaf</span>, <span class="number">0x78</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2e</span>, <span class="number">0x04</span>, <span class="number">0xd6</span>, <span class="number">0x51</span>, <span class="number">0x0d</span>, <span class="number">0x17</span>, <span class="number">0x8d</span>, <span class="number">0x77</span>, <span class="number">0x12</span>, <span class="number">0x7d</span>, <span class="number">0x82</span>, <span class="number">0xf7</span>, <span class="number">0x35</span>, <span class="number">0x95</span>, <span class="number">0x2d</span>, <span class="number">0x6a</span>, <span class="number">0xe1</span>, <span class="number">0x13</span>, <span class="number">0xa1</span>, <span class="number">0x4a</span>, <span class="number">0xac</span>, <span class="number">0x7b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2f</span>, <span class="number">0x05</span>, <span class="number">0xd7</span>, <span class="number">0x50</span>, <span class="number">0x0c</span>, <span class="number">0x16</span>, <span class="number">0x8c</span>, <span class="number">0x76</span>, <span class="number">0x13</span>, <span class="number">0x7c</span>, <span class="number">0x83</span>, <span class="number">0xf6</span>, <span class="number">0x34</span>, <span class="number">0x94</span>, <span class="number">0x2c</span>, <span class="number">0x6b</span>, <span class="number">0xe0</span>, <span class="number">0x12</span>, <span class="number">0xa0</span>, <span class="number">0x4b</span>, <span class="number">0xad</span>, <span class="number">0x7a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x28</span>, <span class="number">0x02</span>, <span class="number">0xd0</span>, <span class="number">0x57</span>, <span class="number">0x0b</span>, <span class="number">0x11</span>, <span class="number">0x8b</span>, <span class="number">0x71</span>, <span class="number">0x14</span>, <span class="number">0x7b</span>, <span class="number">0x84</span>, <span class="number">0xf1</span>, <span class="number">0x33</span>, <span class="number">0x93</span>, <span class="number">0x2b</span>, <span class="number">0x6c</span>, <span class="number">0xe7</span>, <span class="number">0x15</span>, <span class="number">0xa7</span>, <span class="number">0x4c</span>, <span class="number">0xaa</span>, <span class="number">0x7d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x29</span>, <span class="number">0x03</span>, <span class="number">0xd1</span>, <span class="number">0x56</span>, <span class="number">0x0a</span>, <span class="number">0x10</span>, <span class="number">0x8a</span>, <span class="number">0x70</span>, <span class="number">0x15</span>, <span class="number">0x7a</span>, <span class="number">0x85</span>, <span class="number">0xf0</span>, <span class="number">0x32</span>, <span class="number">0x92</span>, <span class="number">0x2a</span>, <span class="number">0x6d</span>, <span class="number">0xe6</span>, <span class="number">0x14</span>, <span class="number">0xa6</span>, <span class="number">0x4d</span>, <span class="number">0xab</span>, <span class="number">0x7c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2a</span>, <span class="number">0x00</span>, <span class="number">0xd2</span>, <span class="number">0x55</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, <span class="number">0x89</span>, <span class="number">0x73</span>, <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0x86</span>, <span class="number">0xf3</span>, <span class="number">0x31</span>, <span class="number">0x91</span>, <span class="number">0x29</span>, <span class="number">0x6e</span>, <span class="number">0xe5</span>, <span class="number">0x17</span>, <span class="number">0xa5</span>, <span class="number">0x4e</span>, <span class="number">0xa8</span>, <span class="number">0x7f</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x2b</span>, <span class="number">0x01</span>, <span class="number">0xd3</span>, <span class="number">0x54</span>, <span class="number">0x08</span>, <span class="number">0x12</span>, <span class="number">0x88</span>, <span class="number">0x72</span>, <span class="number">0x17</span>, <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xf2</span>, <span class="number">0x30</span>, <span class="number">0x90</span>, <span class="number">0x28</span>, <span class="number">0x6f</span>, <span class="number">0xe4</span>, <span class="number">0x16</span>, <span class="number">0xa4</span>, <span class="number">0x4f</span>, <span class="number">0xa9</span>, <span class="number">0x7e</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x34</span>, <span class="number">0x1e</span>, <span class="number">0xcc</span>, <span class="number">0x4b</span>, <span class="number">0x17</span>, <span class="number">0x0d</span>, <span class="number">0x97</span>, <span class="number">0x6d</span>, <span class="number">0x08</span>, <span class="number">0x67</span>, <span class="number">0x98</span>, <span class="number">0xed</span>, <span class="number">0x2f</span>, <span class="number">0x8f</span>, <span class="number">0x37</span>, <span class="number">0x70</span>, <span class="number">0xfb</span>, <span class="number">0x09</span>, <span class="number">0xbb</span>, <span class="number">0x50</span>, <span class="number">0xb6</span>, <span class="number">0x61</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x35</span>, <span class="number">0x1f</span>, <span class="number">0xcd</span>, <span class="number">0x4a</span>, <span class="number">0x16</span>, <span class="number">0x0c</span>, <span class="number">0x96</span>, <span class="number">0x6c</span>, <span class="number">0x09</span>, <span class="number">0x66</span>, <span class="number">0x99</span>, <span class="number">0xec</span>, <span class="number">0x2e</span>, <span class="number">0x8e</span>, <span class="number">0x36</span>, <span class="number">0x71</span>, <span class="number">0xfa</span>, <span class="number">0x08</span>, <span class="number">0xba</span>, <span class="number">0x51</span>, <span class="number">0xb7</span>, <span class="number">0x60</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x36</span>, <span class="number">0x1c</span>, <span class="number">0xce</span>, <span class="number">0x49</span>, <span class="number">0x15</span>, <span class="number">0x0f</span>, <span class="number">0x95</span>, <span class="number">0x6f</span>, <span class="number">0x0a</span>, <span class="number">0x65</span>, <span class="number">0x9a</span>, <span class="number">0xef</span>, <span class="number">0x2d</span>, <span class="number">0x8d</span>, <span class="number">0x35</span>, <span class="number">0x72</span>, <span class="number">0xf9</span>, <span class="number">0x0b</span>, <span class="number">0xb9</span>, <span class="number">0x52</span>, <span class="number">0xb4</span>, <span class="number">0x63</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x37</span>, <span class="number">0x1d</span>, <span class="number">0xcf</span>, <span class="number">0x48</span>, <span class="number">0x14</span>, <span class="number">0x0e</span>, <span class="number">0x94</span>, <span class="number">0x6e</span>, <span class="number">0x0b</span>, <span class="number">0x64</span>, <span class="number">0x9b</span>, <span class="number">0xee</span>, <span class="number">0x2c</span>, <span class="number">0x8c</span>, <span class="number">0x34</span>, <span class="number">0x73</span>, <span class="number">0xf8</span>, <span class="number">0x0a</span>, <span class="number">0xb8</span>, <span class="number">0x53</span>, <span class="number">0xb5</span>, <span class="number">0x62</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x30</span>, <span class="number">0x1a</span>, <span class="number">0xc8</span>, <span class="number">0x4f</span>, <span class="number">0x13</span>, <span class="number">0x09</span>, <span class="number">0x93</span>, <span class="number">0x69</span>, <span class="number">0x0c</span>, <span class="number">0x63</span>, <span class="number">0x9c</span>, <span class="number">0xe9</span>, <span class="number">0x2b</span>, <span class="number">0x8b</span>, <span class="number">0x33</span>, <span class="number">0x74</span>, <span class="number">0xff</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0x54</span>, <span class="number">0xb2</span>, <span class="number">0x65</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x31</span>, <span class="number">0x1b</span>, <span class="number">0xc9</span>, <span class="number">0x4e</span>, <span class="number">0x12</span>, <span class="number">0x08</span>, <span class="number">0x92</span>, <span class="number">0x68</span>, <span class="number">0x0d</span>, <span class="number">0x62</span>, <span class="number">0x9d</span>, <span class="number">0xe8</span>, <span class="number">0x2a</span>, <span class="number">0x8a</span>, <span class="number">0x32</span>, <span class="number">0x75</span>, <span class="number">0xfe</span>, <span class="number">0x0c</span>, <span class="number">0xbe</span>, <span class="number">0x55</span>, <span class="number">0xb3</span>, <span class="number">0x64</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x32</span>, <span class="number">0x18</span>, <span class="number">0xca</span>, <span class="number">0x4d</span>, <span class="number">0x11</span>, <span class="number">0x0b</span>, <span class="number">0x91</span>, <span class="number">0x6b</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x9e</span>, <span class="number">0xeb</span>, <span class="number">0x29</span>, <span class="number">0x89</span>, <span class="number">0x31</span>, <span class="number">0x76</span>, <span class="number">0xfd</span>, <span class="number">0x0f</span>, <span class="number">0xbd</span>, <span class="number">0x56</span>, <span class="number">0xb0</span>, <span class="number">0x67</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x33</span>, <span class="number">0x19</span>, <span class="number">0xcb</span>, <span class="number">0x4c</span>, <span class="number">0x10</span>, <span class="number">0x0a</span>, <span class="number">0x90</span>, <span class="number">0x6a</span>, <span class="number">0x0f</span>, <span class="number">0x60</span>, <span class="number">0x9f</span>, <span class="number">0xea</span>, <span class="number">0x28</span>, <span class="number">0x88</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0xfc</span>, <span class="number">0x0e</span>, <span class="number">0xbc</span>, <span class="number">0x57</span>, <span class="number">0xb1</span>, <span class="number">0x66</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x3c</span>, <span class="number">0x16</span>, <span class="number">0xc4</span>, <span class="number">0x43</span>, <span class="number">0x1f</span>, <span class="number">0x05</span>, <span class="number">0x9f</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x6f</span>, <span class="number">0x90</span>, <span class="number">0xe5</span>, <span class="number">0x27</span>, <span class="number">0x87</span>, <span class="number">0x3f</span>, <span class="number">0x78</span>, <span class="number">0xf3</span>, <span class="number">0x01</span>, <span class="number">0xb3</span>, <span class="number">0x58</span>, <span class="number">0xbe</span>, <span class="number">0x69</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x3d</span>, <span class="number">0x17</span>, <span class="number">0xc5</span>, <span class="number">0x42</span>, <span class="number">0x1e</span>, <span class="number">0x04</span>, <span class="number">0x9e</span>, <span class="number">0x64</span>, <span class="number">0x01</span>, <span class="number">0x6e</span>, <span class="number">0x91</span>, <span class="number">0xe4</span>, <span class="number">0x26</span>, <span class="number">0x86</span>, <span class="number">0x3e</span>, <span class="number">0x79</span>, <span class="number">0xf2</span>, <span class="number">0x00</span>, <span class="number">0xb2</span>, <span class="number">0x59</span>, <span class="number">0xbf</span>, <span class="number">0x68</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x3e</span>, <span class="number">0x14</span>, <span class="number">0xc6</span>, <span class="number">0x41</span>, <span class="number">0x1d</span>, <span class="number">0x07</span>, <span class="number">0x9d</span>, <span class="number">0x67</span>, <span class="number">0x02</span>, <span class="number">0x6d</span>, <span class="number">0x92</span>, <span class="number">0xe7</span>, <span class="number">0x25</span>, <span class="number">0x85</span>, <span class="number">0x3d</span>, <span class="number">0x7a</span>, <span class="number">0xf1</span>, <span class="number">0x03</span>, <span class="number">0xb1</span>, <span class="number">0x5a</span>, <span class="number">0xbc</span>, <span class="number">0x6b</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x3f</span>, <span class="number">0x15</span>, <span class="number">0xc7</span>, <span class="number">0x40</span>, <span class="number">0x1c</span>, <span class="number">0x06</span>, <span class="number">0x9c</span>, <span class="number">0x66</span>, <span class="number">0x03</span>, <span class="number">0x6c</span>, <span class="number">0x93</span>, <span class="number">0xe6</span>, <span class="number">0x24</span>, <span class="number">0x84</span>, <span class="number">0x3c</span>, <span class="number">0x7b</span>, <span class="number">0xf0</span>, <span class="number">0x02</span>, <span class="number">0xb0</span>, <span class="number">0x5b</span>, <span class="number">0xbd</span>, <span class="number">0x6a</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x38</span>, <span class="number">0x12</span>, <span class="number">0xc0</span>, <span class="number">0x47</span>, <span class="number">0x1b</span>, <span class="number">0x01</span>, <span class="number">0x9b</span>, <span class="number">0x61</span>, <span class="number">0x04</span>, <span class="number">0x6b</span>, <span class="number">0x94</span>, <span class="number">0xe1</span>, <span class="number">0x23</span>, <span class="number">0x83</span>, <span class="number">0x3b</span>, <span class="number">0x7c</span>, <span class="number">0xf7</span>, <span class="number">0x05</span>, <span class="number">0xb7</span>, <span class="number">0x5c</span>, <span class="number">0xba</span>, <span class="number">0x6d</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x39</span>, <span class="number">0x13</span>, <span class="number">0xc1</span>, <span class="number">0x46</span>, <span class="number">0x1a</span>, <span class="number">0x00</span>, <span class="number">0x9a</span>, <span class="number">0x60</span>, <span class="number">0x05</span>, <span class="number">0x6a</span>, <span class="number">0x95</span>, <span class="number">0xe0</span>, <span class="number">0x22</span>, <span class="number">0x82</span>, <span class="number">0x3a</span>, <span class="number">0x7d</span>, <span class="number">0xf6</span>, <span class="number">0x04</span>, <span class="number">0xb6</span>, <span class="number">0x5d</span>, <span class="number">0xbb</span>, <span class="number">0x6c</span> &#125;,</span><br><span class="line">&#123; <span class="number">0x3a</span>, <span class="number">0x10</span>, <span class="number">0xc2</span>, <span class="number">0x45</span>, <span class="number">0x19</span>, <span class="number">0x03</span>, <span class="number">0x99</span>, <span class="number">0x63</span>, <span class="number">0x06</span>, <span class="number">0x69</span>, <span class="number">0x96</span>, <span class="number">0xe3</span>, <span class="number">0x21</span>, <span class="number">0x81</span>, <span class="number">0x39</span>, <span class="number">0x7e</span>, <span class="number">0xf5</span>, <span class="number">0x07</span>, <span class="number">0xb5</span>, <span class="number">0x5e</span>, <span class="number">0xb8</span>, <span class="number">0x6f</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">23</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(Sbak2, S, <span class="number">256</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> lasti = <span class="number">0</span>; lasti &lt; <span class="number">256</span>; lasti++)</span><br><span class="line">&#123;</span><br><span class="line">ZeroMemory(flag, <span class="number">23</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(S, Sbak2, <span class="number">256</span>);</span><br><span class="line">k = l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j != <span class="number">22</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(Sbak, S, <span class="number">256</span>);</span><br><span class="line"><span class="type">int</span> kbak = k;</span><br><span class="line"><span class="type">int</span> lbak = l;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">char</span> e = <span class="number">32</span>; e &lt; <span class="number">129</span>; e++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(S, Sbak, <span class="number">256</span>);</span><br><span class="line">k = kbak;</span><br><span class="line">l = lbak;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = (<span class="type">unsigned</span> __int8)S[(<span class="type">unsigned</span> __int8)++k];</span><br><span class="line">l += m;</span><br><span class="line">S[(<span class="type">unsigned</span> __int8)k] = S[(<span class="type">unsigned</span> __int8)l];</span><br><span class="line">S[(<span class="type">unsigned</span> __int8)l] = m;</span><br><span class="line">BYTE v3 = ((((<span class="type">unsigned</span> __int8)(e &lt;&lt; <span class="number">7</span>) | (e &gt;&gt; <span class="number">1</span>)) &lt;&lt; <span class="number">6</span>) ^ <span class="number">0xC0</span> | ((<span class="type">unsigned</span> __int8)((e &lt;&lt; <span class="number">7</span>) | (e &gt;&gt; <span class="number">1</span>)) &gt;&gt; <span class="number">2</span>) ^ <span class="number">0x3B</span>) ^ <span class="number">0xBE</span>;</span><br><span class="line">out[j] = S[(<span class="type">unsigned</span> __int8)(S[(<span class="type">unsigned</span> __int8)k] + m)] ^ key2[j &amp; <span class="number">3</span>] ^ (((<span class="type">unsigned</span> __int8)(((<span class="number">16</span> * (((<span class="number">32</span> * v3) | (v3 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>)) | ((<span class="type">unsigned</span> __int8)(((<span class="number">32</span> * v3) | (v3 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>) &gt;&gt; <span class="number">4</span>)) ^ <span class="number">0xDE</span>) &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * (((<span class="number">16</span> * (((<span class="number">32</span> * v3) | (v3 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>)) | ((<span class="type">unsigned</span> __int8)(((<span class="number">32</span> * v3) | (v3 &gt;&gt; <span class="number">3</span>)) ^ <span class="number">0xAD</span>) &gt;&gt; <span class="number">4</span>)) ^ <span class="number">0xDE</span>)));</span><br><span class="line"><span class="keyword">if</span> (out[j] == last[lasti][j]) &#123;</span><br><span class="line">flag[j] = e;</span><br><span class="line"><span class="comment">//printf(&quot;%c &quot;, e);</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(flag) == <span class="number">22</span> &amp;&amp; flag[<span class="number">21</span>] == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;<span class="symbol">QeMu_r3v3rs3in9_h@</span>ck6&#125;</span><br></pre></td></tr></table></figure><h2 id="mapp-bbox"><a href="#mapp-bbox" class="headerlink" title="mapp&#x2F;bbox"></a>mapp&#x2F;bbox</h2><p>一个简单的推箱子，很简单，直接手算即可</p><p>可以直接到最后看输出得到提示</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">k = &#x27;&#x27;&#x27;</span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11411111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11030011111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011011111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">00000211111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">01100110001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000001000</span><span class="number">111110</span></span><br><span class="line"><span class="number">01111111111000</span><span class="number">000010</span></span><br><span class="line"><span class="number">00000000001000</span><span class="number">000010</span></span><br><span class="line"><span class="number">00001111111000</span><span class="number">111110</span></span><br><span class="line"><span class="number">00001000001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01111000001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000001111</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01000000001111</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">01111111111111</span><span class="number">111110</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01200300040000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01111111111111</span><span class="number">101110</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01000011111000</span><span class="number">111110</span></span><br><span class="line"><span class="number">01000010001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01111110001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">00000010000000</span><span class="number">100010</span></span><br><span class="line"><span class="number">00111110001000</span><span class="number">111110</span></span><br><span class="line"><span class="number">00100000001000</span><span class="number">000010</span></span><br><span class="line"><span class="number">00100010111000</span><span class="number">111110</span></span><br><span class="line"><span class="number">00100030001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">00111100001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">00400000001000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01111111111000</span><span class="number">100010</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"><span class="number">01000000000000</span><span class="number">000010</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">14000000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">100001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10103000000000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10111011101111</span><span class="number">100001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">011111</span></span><br><span class="line"><span class="number">10000000100000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10000000100000</span><span class="number">001001</span></span><br><span class="line"><span class="number">11111111100000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">002001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">14000000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000001111111</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000000300001</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000001000001</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000001000021</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000001111111</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000100000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000000100000</span><span class="number">000111</span></span><br><span class="line"><span class="number">10000000100000</span><span class="number">000100</span></span><br><span class="line"><span class="number">10111111100000</span><span class="number">000100</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000100</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101011111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101010000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101010111111</span><span class="number">111101</span></span><br><span class="line"><span class="number">10001000100000</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10000001111111</span><span class="number">101101</span></span><br><span class="line"><span class="number">10000001000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">040001</span></span><br><span class="line"><span class="number">10000001111111</span><span class="number">110101</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">300001</span></span><br><span class="line"><span class="number">11111011111111</span><span class="number">101111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">020001</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">14000003000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">100001</span></span><br><span class="line"><span class="number">10100000002000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101111111111</span><span class="number">101101</span></span><br><span class="line"><span class="number">10101000001000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101011111011</span><span class="number">101001</span></span><br><span class="line"><span class="number">10001010001010</span><span class="number">001001</span></span><br><span class="line"><span class="number">10111010101010</span><span class="number">101101</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">101111</span></span><br><span class="line"><span class="number">10000001000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000001111111</span><span class="number">011101</span></span><br><span class="line"><span class="number">10000001000000</span><span class="number">301001</span></span><br><span class="line"><span class="number">11111111400000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000001</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000010000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101000021000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101011111011</span><span class="number">111101</span></span><br><span class="line"><span class="number">10101010000010</span><span class="number">000001</span></span><br><span class="line"><span class="number">10001010111110</span><span class="number">111101</span></span><br><span class="line"><span class="number">11111010100000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10000010101111</span><span class="number">101101</span></span><br><span class="line"><span class="number">10111110101000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10100000101011</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101111101010</span><span class="number">000001</span></span><br><span class="line"><span class="number">10003000000000</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111011111010</span><span class="number">100001</span></span><br><span class="line"><span class="number">10000000000010</span><span class="number">101111</span></span><br><span class="line"><span class="number">10111111111110</span><span class="number">001001</span></span><br><span class="line"><span class="number">14000000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">14000000000002</span><span class="number">003001</span></span><br><span class="line"><span class="number">10111011111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101111111011</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101400001000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101011111010</span><span class="number">101001</span></span><br><span class="line"><span class="number">10101010001010</span><span class="number">101001</span></span><br><span class="line"><span class="number">10101010111010</span><span class="number">101101</span></span><br><span class="line"><span class="number">10003000100000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10111011111111</span><span class="number">111101</span></span><br><span class="line"><span class="number">10000001000010</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111101</span></span><br><span class="line"><span class="number">10003000000000</span><span class="number">041001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000001000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101111111011</span><span class="number">111101</span></span><br><span class="line"><span class="number">10101000001000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101011111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">000001</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">10000000000000</span><span class="number">100001</span></span><br><span class="line"><span class="number">10111111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10101111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10101000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101110111011</span><span class="number">111101</span></span><br><span class="line"><span class="number">10001013001010</span><span class="number">001001</span></span><br><span class="line"><span class="number">11111002111010</span><span class="number">101001</span></span><br><span class="line"><span class="number">10000010100000</span><span class="number">101001</span></span><br><span class="line"><span class="number">10111114101111</span><span class="number">111001</span></span><br><span class="line"><span class="number">10100000001000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10101111101111</span><span class="number">111101</span></span><br><span class="line"><span class="number">10101000000000</span><span class="number">001001</span></span><br><span class="line"><span class="number">10001111111111</span><span class="number">111001</span></span><br><span class="line"><span class="number">11111000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10000011111111</span><span class="number">111101</span></span><br><span class="line"><span class="number">10111110000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">10100000000000</span><span class="number">000001</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11100000000001</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11100000000001</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011110111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011110111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011110111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011110111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11011110111101</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101101010111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11110101010111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11110101010111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111011101111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11100000000011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11101111111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11100000000011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110000011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110111011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111110000011</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111000111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111010111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111010111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111000111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"><span class="number">11111111111111</span><span class="number">111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>3是箱子，4是终点，2是出生点</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">2</span></span><br><span class="line"><span class="attribute">4</span>+<span class="number">8</span></span><br><span class="line"><span class="attribute">13</span></span><br><span class="line"><span class="attribute">9</span></span><br><span class="line"><span class="attribute">21</span></span><br><span class="line"><span class="attribute">6</span>+<span class="number">7</span></span><br><span class="line"><span class="attribute">25</span></span><br><span class="line"><span class="attribute">15</span>+<span class="number">5</span>+<span class="number">11</span></span><br><span class="line"><span class="attribute">3</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">212139211325313</span></span><br></pre></td></tr></table></figure><p>md5加头即可</p><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2>]]></content>
    
    
    <summary type="html">被暴打的悲伤</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    <category term="CTF" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/"/>
    
    <category term="比赛" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/%E6%AF%94%E8%B5%9B/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="linux" scheme="https://www.pri87.vip/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>强网拟态2024复现</title>
    <link href="https://www.pri87.vip/posts/44d650c4.html"/>
    <id>https://www.pri87.vip/posts/44d650c4.html</id>
    <published>2024-11-04T14:56:55.000Z</published>
    <updated>2024-11-16T10:27:08.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="a-game"><a href="#a-game" class="headerlink" title="a_game"></a>a_game</h2><p>坑，我找了好久胜利的时候的条件，没想到是在退出的时候检查的QAQ，不过学到了注册表的相关函数，</p><p><img src="https://s2.loli.net/2024/11/01/h3wZqCtpuPBMymd.png" alt="image-20241101003113092"></p><p>把这里解密的脚本直接dump然后每次把最前面的函数名改成Write-Out输出没有混淆的版本，</p><p>比如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Write-Output</span>( ( [<span class="type">RuntIme.INteroPsErviCEs.maRSHal</span>]::PTrtostriNGAUTo( [<span class="type">rUNtIme.inteRopServIces.MarshAl</span>]::seCuREsTrinGtobStr( <span class="variable">$</span>(<span class="string">&#x27;76492d1116743f0423413b160省略base64内容&#x27;</span> | <span class="built_in">conveRTTo-SECureSTrinG</span>  <span class="literal">-K</span> (<span class="number">94</span>..<span class="number">117</span>)) ) ))) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时可以直接在pwsh里执行，然后得到输出的代码，继续解密</p><p>然后继续直到解密出来代码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enenenenene</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$plaintextBytes</span>,</span><br><span class="line">        <span class="variable">$keyBytes</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># Initialize S and KSA</span></span><br><span class="line">    <span class="variable">$S</span> = <span class="number">0</span>..<span class="number">255</span></span><br><span class="line">    <span class="variable">$j</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">256</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$S</span>[<span class="variable">$i</span>] + <span class="variable">$keyBytes</span>[<span class="variable">$i</span> % <span class="variable">$keyBytes</span><span class="type">.Length</span>]) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$S</span>[<span class="variable">$i</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$i</span>] = <span class="variable">$S</span>[<span class="variable">$j</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PRGA and encryption</span></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable">$j</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable">$ciphertextBytes</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$plaintextBytes</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$i</span> = (<span class="variable">$i</span> + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$S</span>[<span class="variable">$i</span>]) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$S</span>[<span class="variable">$i</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$i</span>] = <span class="variable">$S</span>[<span class="variable">$j</span>]</span><br><span class="line">        <span class="variable">$S</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span></span><br><span class="line">        <span class="variable">$t</span> = (<span class="variable">$S</span>[<span class="variable">$i</span>] + <span class="variable">$S</span>[<span class="variable">$j</span>]) % <span class="number">256</span></span><br><span class="line">        <span class="variable">$ciphertextBytes</span> += (<span class="variable">$plaintextBytes</span>[<span class="variable">$k</span>] <span class="operator">-bxor</span> <span class="variable">$S</span>[<span class="variable">$t</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return ciphertext as a string</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ciphertextBytes</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enenenenene1</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x6f, <span class="number">0</span>x77, <span class="number">0</span>x65, <span class="number">0</span>x72)</span><br><span class="line">    <span class="variable">$encryptedText</span> = <span class="selector-tag">@</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$encryptedText</span> = enenenenene <span class="literal">-plaintextBytes</span> <span class="variable">$inputbyte</span> <span class="literal">-keyBytes</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="variable">$key</span> = enenenenene <span class="literal">-plaintextBytes</span> <span class="variable">$key</span> <span class="literal">-keyBytes</span> <span class="variable">$encryptedText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$encryptedText</span> + <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enenenenene2</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x30, <span class="number">0</span>x77, <span class="number">0</span>x65, <span class="number">0</span>x72)</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] = <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] + <span class="variable">$key</span>[<span class="variable">$k</span> % <span class="variable">$key</span><span class="type">.Length</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$inputbyte</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enenenenene3</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        <span class="variable">$inputbyte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable">$key</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x70, <span class="number">0</span>x30, <span class="number">0</span>x77, <span class="number">0</span>x33, <span class="number">0</span>x72)</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$inputbyte</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">        <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] = <span class="variable">$inputbyte</span>[<span class="variable">$k</span>] * <span class="variable">$key</span>[<span class="variable">$k</span> % <span class="variable">$key</span><span class="type">.Length</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$inputbyte</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$registryPath</span> = <span class="string">&#x27;HKCU:\Software\PacManX&#x27;</span></span><br><span class="line"><span class="variable">$valueName</span> = <span class="string">&#x27;MYFLAG&#x27;</span></span><br><span class="line"><span class="variable">$value</span> = <span class="built_in">Get-ItemPropertyValue</span> <span class="variable">$registryPath</span> <span class="variable">$valueName</span></span><br><span class="line"><span class="variable">$plaintext</span> = <span class="selector-tag">@</span>(<span class="variable">$value</span>) | <span class="built_in">ForEach-Object</span> &#123;</span><br><span class="line">    <span class="variable">$input</span> = <span class="variable">$_</span></span><br><span class="line">    <span class="variable">$plaintext</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$input</span>.Length; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$plaintext</span> += [<span class="built_in">int</span>][<span class="built_in">char</span>]<span class="variable">$input</span>[<span class="variable">$i</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$plaintext</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$plaintext</span>.Length <span class="operator">-ne</span> <span class="number">36</span>) &#123;</span><br><span class="line">    <span class="built_in">Set-Content</span> <span class="literal">-Path</span> <span class="string">&quot;log.txt&quot;</span> <span class="literal">-Value</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$encrypted1Text</span> = enENenenene2 <span class="literal">-inputbyte</span> (enenenENene2 <span class="literal">-inputbyte</span> (enenenenene3 <span class="literal">-inputbyte</span> (Enenenenene2 <span class="literal">-inputbyte</span> (enenenenene2 <span class="literal">-inputbyte</span> (enenenenene2 <span class="literal">-inputbyte</span> (enenenenene1 <span class="literal">-input</span> <span class="variable">$plaintext</span>))))))</span><br><span class="line"><span class="variable">$result</span> = <span class="selector-tag">@</span>(<span class="number">38304</span>, <span class="number">8928</span>, <span class="number">43673</span>, <span class="number">25957</span> , <span class="number">67260</span>, <span class="number">47152</span>, <span class="number">16656</span>, <span class="number">62832</span> , <span class="number">19480</span> , <span class="number">66690</span>, <span class="number">40432</span>, <span class="number">15072</span> , <span class="number">63427</span> , <span class="number">28558</span> , <span class="number">54606</span>, <span class="number">47712</span> , <span class="number">18240</span> , <span class="number">68187</span> , <span class="number">18256</span>, <span class="number">63954</span> , <span class="number">48384</span>, <span class="number">14784</span>, <span class="number">60690</span> , <span class="number">21724</span> , <span class="number">53238</span> , <span class="number">64176</span> , <span class="number">9888</span> , <span class="number">54859</span> , <span class="number">23050</span> , <span class="number">58368</span> , <span class="number">46032</span> , <span class="number">15648</span> , <span class="number">64260</span> , <span class="number">17899</span> , <span class="number">52782</span> , <span class="number">51968</span> , <span class="number">12336</span> , <span class="number">69377</span> , <span class="number">27844</span> , <span class="number">43206</span> , <span class="number">63616</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> <span class="operator">-lt</span> <span class="variable">$result</span>.Length; <span class="variable">$k</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$encrypted1Text</span>[<span class="variable">$k</span>] <span class="operator">-ne</span> <span class="variable">$result</span>[<span class="variable">$k</span>]) &#123;</span><br><span class="line">        <span class="built_in">Set-Content</span> <span class="literal">-Path</span> <span class="string">&quot;log.txt&quot;</span> <span class="literal">-Value</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"> <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Set-Content</span> <span class="literal">-Path</span> <span class="string">&quot;log.txt&quot;</span> <span class="literal">-Value</span> <span class="string">&quot;RIGHT&quot;</span></span><br></pre></td></tr></table></figure><p>然后直接逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_encrypt</span>(<span class="params">plaintext_bytes, key_bytes</span>):</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key_bytes[i % <span class="built_in">len</span>(key_bytes)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    ciphertext_bytes = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext_bytes)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        t = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        ciphertext_bytes.append(plaintext_bytes[k] ^ S[t])</span><br><span class="line">    <span class="keyword">return</span> ciphertext_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_layer_rc4_encrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    key = [<span class="number">0x70</span>, <span class="number">0x6f</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>]</span><br><span class="line">    encrypted_text = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        encrypted_text = rc4_encrypt(input_bytes, key)</span><br><span class="line">        key = rc4_encrypt(key, encrypted_text)</span><br><span class="line">    <span class="keyword">return</span> encrypted_text + key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">additive_encrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    key = [<span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        input_bytes[k] = (input_bytes[k] + key[k % <span class="built_in">len</span>(key)]) &amp; <span class="number">0xFF</span>  <span class="comment"># Ensure bytes are in range 0-255</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiplicative_encrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    key = [<span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0x33</span>, <span class="number">0x72</span>]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        input_bytes[k] = (input_bytes[k] * key[k % <span class="built_in">len</span>(key)]) &amp; <span class="number">0xFF</span>  <span class="comment"># Ensure bytes are in range 0-255</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes</span><br><span class="line"></span><br><span class="line">result = [<span class="number">38304</span>, <span class="number">8928</span>, <span class="number">43673</span>, <span class="number">25957</span> , <span class="number">67260</span>, <span class="number">47152</span>, <span class="number">16656</span>, <span class="number">62832</span> , <span class="number">19480</span> , <span class="number">66690</span>, <span class="number">40432</span>, <span class="number">15072</span> , <span class="number">63427</span> , <span class="number">28558</span> , <span class="number">54606</span>, <span class="number">47712</span> , <span class="number">18240</span> , <span class="number">68187</span> , <span class="number">18256</span>, <span class="number">63954</span> , <span class="number">48384</span>, <span class="number">14784</span>, <span class="number">60690</span> , <span class="number">21724</span> , <span class="number">53238</span> , <span class="number">64176</span> , <span class="number">9888</span> , <span class="number">54859</span> , <span class="number">23050</span> , <span class="number">58368</span> , <span class="number">46032</span> , <span class="number">15648</span> , <span class="number">64260</span> , <span class="number">17899</span> , <span class="number">52782</span> , <span class="number">51968</span> , <span class="number">12336</span> , <span class="number">69377</span> , <span class="number">27844</span> , <span class="number">43206</span> , <span class="number">63616</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_layer_rc4_decrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    <span class="comment"># key = [0x70, 0x6f, 0x77, 0x65, 0x72]</span></span><br><span class="line">    <span class="comment"># input_bytes = input_bytes[:-5]</span></span><br><span class="line">    input_bytes,key_last = input_bytes[:-<span class="number">5</span>],input_bytes[-<span class="number">5</span>:]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        key_last = rc4_encrypt(key_last, input_bytes)</span><br><span class="line">        input_bytes = rc4_encrypt(input_bytes, key_last)</span><br><span class="line">        <span class="comment"># print(input_bytes)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(input_byte&lt;=<span class="number">127</span> <span class="keyword">and</span> input_byte&gt;=<span class="number">32</span> <span class="keyword">for</span> input_byte <span class="keyword">in</span> input_bytes):</span><br><span class="line">                pl(input_bytes,<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">additive_decrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    key = [<span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        input_bytes[k] = (input_bytes[k] - key[k % <span class="built_in">len</span>(key)])  <span class="comment"># Ensure bytes are in range 0-255</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiplicative_decrypt</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    key = [<span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x77</span>, <span class="number">0x33</span>, <span class="number">0x72</span>]</span><br><span class="line">    <span class="comment"># inv_key = [mod_inverse(key[i], 0xff) for i in range(5)]</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_bytes)):</span><br><span class="line">        <span class="keyword">assert</span> input_bytes[k] % key[k % <span class="built_in">len</span>(key)] == <span class="number">0</span></span><br><span class="line">        input_bytes[k] = (input_bytes[k] // key[k % <span class="built_in">len</span>(key)])  <span class="comment"># Ensure bytes are in range 0-255</span></span><br><span class="line">    <span class="keyword">return</span> input_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = additive_decrypt(additive_decrypt(result))</span><br><span class="line">res = multiplicative_decrypt(res)</span><br><span class="line">res = additive_decrypt(additive_decrypt(res))</span><br><span class="line">res = additive_decrypt(res)</span><br><span class="line">res = multi_layer_rc4_decrypt(res)</span><br><span class="line"><span class="comment"># print(res)</span></span><br></pre></td></tr></table></figure><h2 id="servers"><a href="#servers" class="headerlink" title="servers"></a>servers</h2><p>打开应用，发现有两个按钮input和check，对应了两个onClick函数</p><p><img src="https://s2.loli.net/2024/11/01/rag4cT3hXQJMlso.png" alt="image-20241101004406675"></p><p>很明显用了动态加载类。尝试先对decode函数进行hook</p><p>得到</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myclass.decode is called: <span class="attribute">str</span>=RtHTxaKcRXIdES5ktXugN2ww1d91EMp/QOxAh8bV</span><br><span class="line">myclass.decode <span class="attribute">result</span>=android.content.ContextWrapper</span><br><span class="line">myclass.decode is called: <span class="attribute">str</span>=VMvWxbmmRC4IFyN1</span><br><span class="line">myclass.decode <span class="attribute">result</span>=startService</span><br><span class="line">myclass.decode is called: <span class="attribute">str</span>=RtHTxaKcRXIdES5ktXugN2ww1d91EMp/QOxAh8bV</span><br><span class="line">myclass.decode <span class="attribute">result</span>=android.content.ContextWrapper</span><br><span class="line">myclass.decode is called: <span class="attribute">str</span>=VMvYx56QUyoXHSU=</span><br><span class="line">myclass.decode <span class="attribute">result</span>=stopService</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">    EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), <span class="keyword">new</span> <span class="title class_">OnApplyWindowInsetsListener</span>() &#123; <span class="comment">// from class: com.nobody.Serv1ce.MainActivity$$ExternalSyntheticLambda0</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// androidx.core.view.OnApplyWindowInsetsListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> WindowInsetsCompat <span class="title function_">onApplyWindowInsets</span><span class="params">(View view, WindowInsetsCompat windowInsetsCompat)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> MainActivity.lambda$onCreate$<span class="number">0</span>(view, windowInsetsCompat);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button) findViewById(R.id.ClickMe);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> (Button) findViewById(R.id.ClickMe1);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, (Class&lt;?&gt;) MyService.class);</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.nobody.Serv1ce.MainActivity.1</span></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            <span class="type">myclass</span> <span class="variable">myclassVar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">myclass</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; mycall = myclassVar.mycall(myclassVar.decode(<span class="string">&quot;RtHTxaKcRXIdES5ktXugN2ww1d91EMp/QOxAh8bV&quot;</span>));</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> mycall.getMethod(myclassVar.decode(<span class="string">&quot;VMvWxbmmRC4IFyN1&quot;</span>), Intent.class);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">newInstance</span> <span class="operator">=</span> mycall.getConstructor(Context.class).newInstance(<span class="built_in">this</span>);</span><br><span class="line">                intent.putExtra(<span class="string">&quot;input&quot;</span>, ((TextView) MainActivity.<span class="built_in">this</span>.findViewById(R.id.Input)).getText().toString());</span><br><span class="line">                method.invoke(newInstance, intent);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, (Class&lt;?&gt;) MyService.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> mycall.getMethod(myclassVar.decode(<span class="string">&quot;VMvWxbmmRC4IFyN1&quot;</span>), Intent.class);</span><br><span class="line">method.invoke(newInstance, intent);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明它用自己的service调用了startService</p><p>查看这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String str, <span class="type">byte</span>[] bArr, <span class="type">int</span> i)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>native函数</p><p>继续hook检查函数</p><p>得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bArr</span>=-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>, i=<span class="number">11</span></span><br></pre></td></tr></table></figure><p>得到最后检查值</p><p>然后看so文件，直接就有加密逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_nobody_Serv1ce_MyService_check</span><span class="params">(JNIEnv *a1, jclass *a2, <span class="type">void</span> *a3, <span class="type">void</span> *a4, <span class="type">char</span> a5)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v8; <span class="comment">// x20</span></span><br><span class="line">  jbyte *v9; <span class="comment">// x21</span></span><br><span class="line">  __int64 v10; <span class="comment">// x8</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v11; <span class="comment">// w10</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">4</span>]; <span class="comment">// [xsp+4h] [xbp-Ch] BYREF</span></span><br><span class="line">  __int64 v14; <span class="comment">// [xsp+8h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  v8 = (*a1)-&gt;GetStringUTFChars(a1, a3, v13);</span><br><span class="line">  v9 = (*a1)-&gt;GetByteArrayElements(a1, a4, v13);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v8) == <span class="number">36LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = (v8[v10] ^ v9[v10]) * a5;</span><br><span class="line">      v8[v10] = v11;</span><br><span class="line">      <span class="keyword">if</span> ( v[v10] != v11 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ++v10 == <span class="number">36</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常明显，直接爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">last = [<span class="number">0xB9</span>, <span class="number">0x32</span>, <span class="number">0xC2</span>, <span class="number">0xD4</span>, <span class="number">0x69</span>, <span class="number">0xD5</span>, <span class="number">0xCA</span>, <span class="number">0xFB</span>, <span class="number">0xF8</span>, <span class="number">0xFB</span>, <span class="number">0x80</span>, <span class="number">0x7C</span>, <span class="number">0xD4</span>, <span class="number">0xE5</span>, <span class="number">0x93</span>, <span class="number">0xD5</span>, <span class="number">0x1C</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xDF</span>, <span class="number">0xDA</span>, <span class="number">0xA1</span>, <span class="number">0x11</span>, <span class="number">0xF8</span>, <span class="number">0xA1</span>, <span class="number">0x93</span>, <span class="number">0x93</span>, <span class="number">0xC2</span>, <span class="number">0x7C</span>, <span class="number">0x8B</span>, <span class="number">0x1C</span>, <span class="number">0x66</span>, <span class="number">0x01</span>, <span class="number">0x3D</span>, <span class="number">0xA3</span>, <span class="number">0x67</span>]</span><br><span class="line"><span class="comment"># print(len(last))</span></span><br><span class="line">key = [-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">30</span>,-<span class="number">83</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">30</span>,-<span class="number">59</span>,-<span class="number">59</span>,-<span class="number">83</span>,-<span class="number">30</span>,-<span class="number">27</span>,-<span class="number">59</span>]</span><br><span class="line">num = <span class="number">11</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(last)):</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> ((key[i]^ch)*num)&amp;<span class="number">0xff</span> == last[i]:</span><br><span class="line">            flag.append(ch)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">pl(flag)</span><br></pre></td></tr></table></figure><h2 id="baby-re"><a href="#baby-re" class="headerlink" title="baby_re"></a>baby_re</h2><p>打开一看，第一个函数有很明显的AES特征，可以使用自己的值测试一下，发现确实是AES</p><p><img src="https://s2.loli.net/2024/11/01/1DbyM6Av5iL8sgJ.png" alt="image-20241101145041414"></p><p>第二段是一个将加密后每个输入切为bit，然后附上4位index值</p><p><img src="https://s2.loli.net/2024/11/01/EZNFhcsgR5AvHzY.png" alt="image-20241101144424639"></p><p>最后一段的检查函数是bit的一堆运算，本来想用z3，但是z3类型一直报错，然后一想发现只有8+4位，直接开爆</p><p><img src="https://s2.loli.net/2024/11/01/Gc5CqzRadITxtSo.png" alt="image-20241101145100006"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_combinations</span>(<span class="params">n</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">current:<span class="built_in">list</span>, length</span>):</span><br><span class="line">        <span class="keyword">if</span> length == n:</span><br><span class="line">            result.append(current[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        backtrack(current+[<span class="number">0</span>], length + <span class="number">1</span>)</span><br><span class="line">        backtrack(current+[<span class="number">1</span>], length + <span class="number">1</span>)</span><br><span class="line">    backtrack([], <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">datab = generate_combinations(<span class="number">8</span>)</span><br><span class="line">dataf = generate_combinations(<span class="number">4</span>)</span><br><span class="line">res = []</span><br><span class="line"><span class="comment"># print(datab)</span></span><br><span class="line"><span class="comment"># print(dataf)</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dataf)):</span><br><span class="line">    turn_choice = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(datab)):</span><br><span class="line">        data = datab[i] + dataf[j]</span><br><span class="line">        v1 = data[<span class="number">9</span>] &amp; data[<span class="number">8</span>] &amp; data[<span class="number">7</span>] &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; data[<span class="number">3</span>] &amp; ((data[<span class="number">2</span>] | data[<span class="number">1</span>] | data[<span class="number">0</span>]) == <span class="number">0</span>) &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | data[<span class="number">9</span>] &amp; data[<span class="number">7</span>] &amp; data[<span class="number">5</span>] &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; data[<span class="number">0</span>] &amp; (data[<span class="number">1</span>] == <span class="number">0</span>) &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | data[<span class="number">10</span>] &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; data[<span class="number">5</span>] &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] &amp; data[<span class="number">1</span>] &amp; data[<span class="number">0</span>]) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>)</span><br><span class="line">        v2 = data[<span class="number">11</span>] &amp; data[<span class="number">10</span>] &amp; data[<span class="number">8</span>] &amp; data[<span class="number">7</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">5</span>] &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; (data[<span class="number">1</span>] &amp; data[<span class="number">0</span>]) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) | (data[<span class="number">10</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) &amp; data[<span class="number">8</span>] &amp; data[<span class="number">7</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">4</span>] &amp; data[<span class="number">3</span>] &amp; data[<span class="number">1</span>] &amp; (data[<span class="number">0</span>] == <span class="number">0</span>) &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">11</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) &amp; data[<span class="number">8</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">4</span>] &amp; data[<span class="number">3</span>] &amp; data[<span class="number">2</span>] &amp; data[<span class="number">0</span>] &amp; (data[<span class="number">1</span>] == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; data[<span class="number">9</span>] &amp; data[<span class="number">8</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">5</span>] &amp; data[<span class="number">3</span>] &amp; data[<span class="number">2</span>] &amp; (data[<span class="number">1</span>] == <span class="number">0</span>) &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | (v1 | data[<span class="number">10</span>] &amp; data[<span class="number">9</span>] &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; data[<span class="number">6</span>] &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; data[<span class="number">3</span>] &amp; data[<span class="number">2</span>] &amp; data[<span class="number">0</span>] &amp; (data[<span class="number">1</span>] == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>)) &amp; (data[<span class="number">11</span>] == <span class="number">0</span>)</span><br><span class="line">        v3 = data[<span class="number">11</span>] &amp; data[<span class="number">10</span>] &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; data[<span class="number">6</span>] &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; (data[<span class="number">1</span>] &amp; data[<span class="number">0</span>]) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) | (data[<span class="number">10</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; data[<span class="number">6</span>] &amp; (data[<span class="number">4</span>] == <span class="number">0</span>) &amp; data[<span class="number">3</span>] &amp; ((data[<span class="number">2</span>] | data[<span class="number">1</span>] | data[<span class="number">0</span>]) == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">11</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; data[<span class="number">10</span>] &amp; data[<span class="number">9</span>] &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; data[<span class="number">5</span>] &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; data[<span class="number">1</span>] &amp; (data[<span class="number">0</span>] == <span class="number">0</span>) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; data[<span class="number">9</span>] &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; data[<span class="number">5</span>] &amp; ((data[<span class="number">4</span>] | data[<span class="number">3</span>] | data[<span class="number">2</span>] | data[<span class="number">1</span>] | data[<span class="number">0</span>]) == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) &amp; (data[<span class="number">8</span>] == <span class="number">0</span>) &amp; data[<span class="number">7</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">5</span>] &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; data[<span class="number">0</span>] &amp; (data[<span class="number">1</span>] == <span class="number">0</span>) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">10</span>] == <span class="number">0</span>) | v2</span><br><span class="line">        <span class="keyword">if</span> ((data[<span class="number">10</span>] &amp; data[<span class="number">8</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; data[<span class="number">1</span>] &amp; (data[<span class="number">0</span>] == <span class="number">0</span>) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">9</span>] == <span class="number">0</span>) &amp; (data[<span class="number">11</span>] == <span class="number">0</span>) | data[<span class="number">11</span>] &amp; data[<span class="number">10</span>] &amp; data[<span class="number">9</span>] &amp; data[<span class="number">8</span>] &amp; (data[<span class="number">6</span>] == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; data[<span class="number">4</span>] &amp; (data[<span class="number">2</span>] == <span class="number">0</span>) &amp; data[<span class="number">1</span>] &amp; (data[<span class="number">0</span>] == <span class="number">0</span>) &amp; (data[<span class="number">3</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) | v3 | data[<span class="number">10</span>] &amp; data[<span class="number">9</span>] &amp; data[<span class="number">8</span>] &amp; data[<span class="number">6</span>] &amp; data[<span class="number">4</span>] &amp; ((data[<span class="number">3</span>] | data[<span class="number">2</span>] | data[<span class="number">1</span>] | data[<span class="number">0</span>]) == <span class="number">0</span>) &amp; (data[<span class="number">5</span>] == <span class="number">0</span>) &amp; (data[<span class="number">7</span>] == <span class="number">0</span>) &amp; (data[<span class="number">11</span>] == <span class="number">0</span>)) ):</span><br><span class="line">            turn_choice.append(data)</span><br><span class="line">    res.append(turn_choice)</span><br><span class="line">    <span class="comment"># print((turn_choice))</span></span><br><span class="line"></span><br><span class="line">fi = []</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> res:</span><br><span class="line">    qu = []</span><br><span class="line">    <span class="keyword">for</span> ie <span class="keyword">in</span> b:</span><br><span class="line">        t = ie[:<span class="number">8</span>]</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(i)<span class="keyword">for</span> i <span class="keyword">in</span> t),<span class="number">2</span>)</span><br><span class="line">        qu.append(t)</span><br><span class="line">    fi.append(qu)</span><br><span class="line"><span class="comment"># for f in fi:</span></span><br><span class="line"><span class="comment">#     phex(f)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_com</span>(<span class="params">lists</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    </span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> lists[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> rest <span class="keyword">in</span> list_com(lists[<span class="number">1</span>:]):</span><br><span class="line">            result.append([item] + rest)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">reallylast = list_com(fi)</span><br><span class="line"><span class="built_in">print</span>(reallylast)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;3577402ECCA44A3F9AB72182F9B01F35&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">dec = [cipher.decrypt(<span class="built_in">bytes</span>(i)).<span class="built_in">hex</span>() <span class="keyword">for</span> i <span class="keyword">in</span> reallylast]</span><br><span class="line"><span class="built_in">print</span>(dec[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dec[<span class="number">1</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">4d87ef03-77bb-491a-80f5-4620245807c4</span></span><br><span class="line"><span class="string">0461d177-8471-23e0-dd55-0c471123c3f1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>最后有两个值，但是只有第一个是对的，不知道为什么。</p><h2 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h2><p>这个题一打开人就傻了，全是花，我该怎么分析流程呢</p><p>那就硬调吧QAQ</p><p><img src="https://s2.loli.net/2024/11/01/FQd9oBjMCPXDHaL.png" alt="image-20241101153119187"></p><p>输入完之后步出，到这里，说明这之前在输入之前</p><p>然后转到data段开头，有一个56长度的数据，后面有一个0x12345678</p><p>猜测长度是56，对上面两个数据下断点，然后run</p><p>在某个地方断下来了（触发了0x12345678的断点），发现某个寄存器保存的输入被异或了</p><p>输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">11111111111111111111111111111111111111111111111111</span>&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0x19</span>, <span class="number">0</span>x13, <span class="number">0</span>x1E, <span class="number">0</span>x18, <span class="number">0</span>x04, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, </span><br><span class="line"><span class="attribute">0x4E</span>, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, </span><br><span class="line"><span class="attribute">0x4E</span>, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, </span><br><span class="line"><span class="attribute">0x4E</span>, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x4E, <span class="number">0</span>x02</span><br></pre></td></tr></table></figure><p>继续往后调，7FF7FBA45F18位置发现RAX变成了9E3779B9，有可能是Tea</p><p>后面会发现它把eax的值放到栈里面，接着就是这一次的加密数据</p><p><img src="https://s2.loli.net/2024/11/01/ZexVLnO3dpksPht.png" alt="image-20241101193839970"></p><p>猜是个tea，然后不会了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;a-game&quot;&gt;&lt;a href=&quot;#a-game&quot; class=&quot;headerlink&quot; title=&quot;a_game&quot;&gt;&lt;/a&gt;a_game&lt;/h2&gt;&lt;p&gt;坑，我找了好久胜利的时候的条件，没想到是在退出的时候检查的QAQ，不过学到了注册表的相关函数，&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    <category term="CTF" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/"/>
    
    <category term="比赛" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/%E6%AF%94%E8%B5%9B/"/>
    
    
    <category term="混淆" scheme="https://www.pri87.vip/tags/%E6%B7%B7%E6%B7%86/"/>
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="安卓" scheme="https://www.pri87.vip/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="注册表" scheme="https://www.pri87.vip/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    
    <category term="AES" scheme="https://www.pri87.vip/tags/AES/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯-青龙组-RE复现</title>
    <link href="https://www.pri87.vip/posts/5dbf475c.html"/>
    <id>https://www.pri87.vip/posts/5dbf475c.html</id>
    <published>2024-10-29T09:49:59.000Z</published>
    <updated>2024-11-16T10:26:59.196Z</updated>
    
    <content type="html"><![CDATA[<p>另外那个签到就不说了</p><h2 id="easystd"><a href="#easystd" class="headerlink" title="easystd"></a>easystd</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42878956/1730194715128-2d39fc92-6bba-4c3b-a2a8-de200a10cde7.png" alt="img"></p><p>这里可以看到用的是so层的函数</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42878956/1730194757654-d1eed919-fe92-471a-9372-4699fed4c6e3.png" alt="img"></p><p>分析加密</p><p>核心加密逻辑：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42878956/1730194870372-fbed92b0-ce4b-442c-9227-fac368beeec3.png" alt="img"></p><p>每4字节字节加密，通过前4个取得下一个</p><p>每轮的伪代码类似于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="built_in">input</span>[i+<span class="number">1</span>]^<span class="built_in">input</span>[i+<span class="number">2</span>]^<span class="built_in">input</span>[i+<span class="number">3</span>]^Abox[i]</span><br><span class="line">mid = xxxx(key)</span><br><span class="line">output = mid^<span class="built_in">input</span>[i]</span><br></pre></td></tr></table></figure><p>ARM汇编看不了一点，所以只能全靠猜，最后还是在za师傅的协助下完成了，好耶！</p><p>取得最后的输出然后写脚本逆向即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;Windows.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstdlib&gt;</span></span><br><span class="line">UINT8 change_box[] = &#123; <span class="number">0xD1</span>, <span class="number">0x97</span>, <span class="number">0xEE</span>, <span class="number">0xF9</span>, <span class="number">0xCB</span>, <span class="number">0xE6</span>, <span class="number">0x3A</span>, <span class="number">0xB0</span>, <span class="number">0x11</span>, <span class="number">0xB1</span>, <span class="number">0x13</span>, <span class="number">0xC5</span>, <span class="number">0x2F</span>, <span class="number">0xFC</span>, <span class="number">0x2B</span>, <span class="number">0x02</span>, <span class="number">0x2C</span>, <span class="number">0x60</span>, <span class="number">0x9D</span>, <span class="number">0x71</span>, <span class="number">0x2D</span>, <span class="number">0xB9</span>, <span class="number">0x03</span>, <span class="number">0xC4</span>, <span class="number">0xAD</span>, <span class="number">0x43</span>, <span class="number">0x14</span>, <span class="number">0x21</span>, <span class="number">0x4E</span>, <span class="number">0x81</span>, <span class="number">0x01</span>, <span class="number">0x9E</span>, <span class="number">0x9B</span>, <span class="number">0x45</span>, <span class="number">0x57</span>, <span class="number">0xF3</span>, <span class="number">0x96</span>, <span class="number">0xE8</span>, <span class="number">0x9F</span>, <span class="number">0x7D</span>, <span class="number">0x34</span>, <span class="number">0x53</span>, <span class="number">0x0C</span>, <span class="number">0x44</span>, <span class="number">0xEA</span>, <span class="number">0xC8</span>, <span class="number">0xAB</span>, <span class="number">0x65</span>, <span class="number">0xE3</span>, <span class="number">0xB4</span>, <span class="number">0x1B</span>, <span class="number">0xAE</span>, <span class="number">0xCE</span>, <span class="number">0x0F</span>, <span class="number">0xEF</span>, <span class="number">0x92</span>, <span class="number">0x87</span>, <span class="number">0xD8</span>, <span class="number">0x93</span>, <span class="number">0xFD</span>, <span class="number">0x72</span>, <span class="number">0x88</span>, <span class="number">0x38</span>, <span class="number">0xA1</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xA0</span>, <span class="number">0xFB</span>, <span class="number">0xF4</span>, <span class="number">0x74</span>, <span class="number">0x10</span>, <span class="number">0xBD</span>, <span class="number">0x84</span>, <span class="number">0x5E</span>, <span class="number">0x3B</span>, <span class="number">0x1E</span>, <span class="number">0xE1</span>, <span class="number">0x82</span>, <span class="number">0x48</span>, <span class="number">0xAF</span>, <span class="number">0x6F</span>, <span class="number">0x6C</span>, <span class="number">0x86</span>, <span class="number">0xB5</span>, <span class="number">0x76</span>, <span class="number">0x63</span>, <span class="number">0xDD</span>, <span class="number">0x8C</span>, <span class="number">0xFF</span>, <span class="number">0xEC</span>, <span class="number">0x08</span>, <span class="number">0x4C</span>, <span class="number">0x77</span>, <span class="number">0x51</span>, <span class="number">0x9A</span>, <span class="number">0x32</span>, <span class="number">0x19</span>, <span class="number">0x23</span>, <span class="number">0x09</span>, <span class="number">0x59</span>, <span class="number">0x64</span>, <span class="number">0x5F</span>, <span class="number">0xD6</span>, <span class="number">0xA5</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0x7B</span>, <span class="number">0x3C</span>, <span class="number">0x06</span>, <span class="number">0x26</span>, <span class="number">0x7F</span>, <span class="number">0x80</span>, <span class="number">0xD3</span>, <span class="number">0x07</span>, <span class="number">0x41</span>, <span class="number">0x50</span>, <span class="number">0x98</span>, <span class="number">0xD4</span>, <span class="number">0x20</span>, <span class="number">0x55</span>, <span class="number">0x4B</span>, <span class="number">0x31</span>, <span class="number">0x05</span>, <span class="number">0xE0</span>, <span class="number">0xA7</span>, <span class="number">0xC3</span>, <span class="number">0xCF</span>, <span class="number">0x99</span>, <span class="number">0xED</span>, <span class="number">0xB8</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x47</span>, <span class="number">0xC0</span>, <span class="number">0x3F</span>, <span class="number">0xB2</span>, <span class="number">0xA4</span>, <span class="number">0xF0</span>, <span class="number">0xF5</span>, <span class="number">0xC9</span>, <span class="number">0xFE</span>, <span class="number">0x66</span>, <span class="number">0x12</span>, <span class="number">0xA6</span>, <span class="number">0xE7</span>, <span class="number">0xA9</span>, <span class="number">0x5A</span>, <span class="number">0xA3</span>, <span class="number">0x9C</span>, <span class="number">0x33</span>, <span class="number">0x1D</span>, <span class="number">0x52</span>, <span class="number">0xAA</span>, <span class="number">0x94</span>, <span class="number">0x35</span>, <span class="number">0x37</span>, <span class="number">0xF2</span>, <span class="number">0x8B</span>, <span class="number">0xB6</span>, <span class="number">0xE4</span>, <span class="number">0x1A</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x29</span>, <span class="number">0x85</span>, <span class="number">0x61</span>, <span class="number">0xCD</span>, <span class="number">0x67</span>, <span class="number">0xC7</span>, <span class="number">0x2E</span>, <span class="number">0x24</span>, <span class="number">0xAC</span>, <span class="number">0x0A</span>, <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x68</span>, <span class="number">0xD2</span>, <span class="number">0xDC</span>, <span class="number">0x30</span>, <span class="number">0x42</span>, <span class="number">0xD9</span>, <span class="number">0xFA</span>, <span class="number">0x89</span>, <span class="number">0x28</span>, <span class="number">0x04</span>, <span class="number">0xF8</span>, <span class="number">0x6D</span>, <span class="number">0x75</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x5C</span>, <span class="number">0x56</span>, <span class="number">0x8A</span>, <span class="number">0x1C</span>, <span class="number">0xA8</span>, <span class="number">0x95</span>, <span class="number">0xBC</span>, <span class="number">0xDA</span>, <span class="number">0xBB</span>, <span class="number">0x78</span>, <span class="number">0x16</span>, <span class="number">0xDE</span>, <span class="number">0x5B</span>, <span class="number">0x46</span>, <span class="number">0x18</span>, <span class="number">0x17</span>, <span class="number">0x5D</span>, <span class="number">0xDF</span>, <span class="number">0x0D</span>, <span class="number">0xC6</span>, <span class="number">0x36</span>, <span class="number">0x8F</span>, <span class="number">0xA2</span>, <span class="number">0xCA</span>, <span class="number">0x7C</span>, <span class="number">0xBA</span>, <span class="number">0x2A</span>, <span class="number">0x73</span>, <span class="number">0xD7</span>, <span class="number">0x15</span>, <span class="number">0xBF</span>, <span class="number">0xE2</span>, <span class="number">0xB3</span>, <span class="number">0xB7</span>, <span class="number">0x8E</span>, <span class="number">0x6E</span>, <span class="number">0x90</span>, <span class="number">0x4D</span>, <span class="number">0x0B</span>, <span class="number">0x91</span>, <span class="number">0x70</span>, <span class="number">0x79</span>, <span class="number">0x62</span>, <span class="number">0xBE</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0xC2</span>, <span class="number">0x69</span>, <span class="number">0xC1</span>, <span class="number">0x83</span>, <span class="number">0x1F</span>, <span class="number">0xF7</span>, <span class="number">0x7A</span>, <span class="number">0xEB</span>, <span class="number">0x3D</span>, <span class="number">0xDB</span>, <span class="number">0x4A</span>, <span class="number">0x27</span>, <span class="number">0x7E</span>, <span class="number">0xE9</span>, <span class="number">0x58</span>, <span class="number">0x39</span>, <span class="number">0xD0</span>, <span class="number">0xCC</span>, <span class="number">0x3E</span>, <span class="number">0x4F</span> &#125;;</span><br><span class="line">UINT32 xor_box[] = &#123; <span class="number">0x80A3B97F</span>, <span class="number">0xB9D4ECD6</span>, <span class="number">0x7425ECAA</span>, <span class="number">0x339BD365</span>, <span class="number">0xA5D18B13</span>, <span class="number">0x56A7A4DE</span>, <span class="number">0xE907C73E</span>, <span class="number">0xD0AA04A9</span>, <span class="number">0x6C827F28</span>, <span class="number">0xE997196A</span>, <span class="number">0x0C2F2AD8</span>, <span class="number">0xFD9D6DA5</span>, <span class="number">0x164DDA6D</span>, <span class="number">0x5FDCC2A4</span>, <span class="number">0x489987B7</span>, <span class="number">0xFDEF5978</span>, <span class="number">0x96C21ACA</span>, <span class="number">0x7FF46259</span>, <span class="number">0xB9ADC94E</span>, <span class="number">0x47FB566D</span>, <span class="number">0x8CCFC943</span>, <span class="number">0x8DA5E336</span>, <span class="number">0x1B49D41B</span>, <span class="number">0x6647A175</span>, <span class="number">0xC3DE9068</span>, <span class="number">0xF6708794</span>, <span class="number">0xE94AB191</span>, <span class="number">0x540B89A4</span>, <span class="number">0xB6ABA320</span>, <span class="number">0x2A7764D0</span>, <span class="number">0xEDC490A7</span>, <span class="number">0xC1F6DA35</span> &#125;;</span><br><span class="line">unsigned <span class="built_in">int</span> last[<span class="number">12</span>] = &#123;</span><br><span class="line"><span class="number">0x2DF2B839</span>, <span class="number">0x4CA553D7</span>, <span class="number">0x72FC8455</span>, <span class="number">0xBFEC6CFF</span>, <span class="number">0x597F4EE6</span>, <span class="number">0x9EC140C6</span>, <span class="number">0xB1E70DEA</span>, <span class="number">0xBFDC0DAB</span>,</span><br><span class="line"><span class="number">0xD05154AF</span>, <span class="number">0x25A2F8C6</span>, <span class="number">0x36A4EE33</span>, <span class="number">0xD116C3F1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">unsigned <span class="built_in">int</span> lastb[<span class="number">12</span>] = &#123; <span class="number">0x39B8F22D</span>,<span class="number">0xD753A54C</span>,<span class="number">0x5584FC72</span>,<span class="number">0xFF6CECBF</span>,<span class="number">0xE64E7F59</span>,<span class="number">0xC640C19E</span>,<span class="number">0xEA0DE7B1</span>,<span class="number">0xAB0DDCBF</span>,<span class="number">0xAF5451D0</span>,<span class="number">0xC6F8A225</span>,<span class="number">0x33EEA436</span>,<span class="number">0xF1C316D1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define PAIR64(high, low) (((uint64_t)(high) &lt;&lt; 32) | (uint32_t)(low))</span></span><br><span class="line">UINT64 get(<span class="built_in">int</span> index) &#123;</span><br><span class="line"><span class="keyword">return</span> change_box[index &amp; <span class="number">0xff</span>] ^ <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void enc(UINT32* <span class="built_in">input</span>) &#123;</span><br><span class="line">UINT32 changer, p2, p4, p3, p1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">p1 = <span class="built_in">input</span>[i];</span><br><span class="line">p2 = <span class="built_in">input</span>[i + <span class="number">1</span>];</span><br><span class="line">p3 = <span class="built_in">input</span>[i + <span class="number">2</span>];</span><br><span class="line">p4 = <span class="built_in">input</span>[i + <span class="number">3</span>];</span><br><span class="line">UINT32 m = p2 ^ p3 ^ p4 ^ xor_box[i];</span><br><span class="line">UINT32* pm = &amp;m;</span><br><span class="line">UINT8* p = (UINT8*)pm;</span><br><span class="line">UINT32 need1 = get(p[<span class="number">3</span>]);</span><br><span class="line">UINT32 need2 = (need1 &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">UINT32 cul_num1 = (get(p[<span class="number">3</span>]) &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>) | (get(p[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) | get(p[<span class="number">0</span>]);</span><br><span class="line">UINT64 cul_num2 = ((get(p[<span class="number">0</span>]) &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">3</span>]) &lt;&lt; <span class="number">16</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) | get(p[<span class="number">1</span>])) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">UINT32 final_enc = cul_num1 ^ (cul_num2 &gt;&gt; <span class="number">8</span>) ^ p1 ^ ((need1 &gt;&gt; <span class="number">6</span>) | cul_num1 &lt;&lt; <span class="number">2</span>) ^ (PAIR64(cul_num1, need2) &gt;&gt; <span class="number">22</span>) ^ (PAIR64(cul_num1, cul_num2) &gt;&gt; <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">//std::cout &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; final_enc &lt;&lt; <span class="string">&quot; ,&quot;</span>;</span><br><span class="line"><span class="built_in">input</span>[i + <span class="number">4</span>] = final_enc;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dec(UINT* <span class="built_in">input</span>) &#123;</span><br><span class="line">UINT32 changer, p2, p4, p3, p1;</span><br><span class="line">UINT32 out[<span class="number">5</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">35</span>; i &gt; <span class="number">3</span>; i--) &#123;</span><br><span class="line">p1 = <span class="built_in">input</span>[i - <span class="number">3</span>];</span><br><span class="line">p2 = <span class="built_in">input</span>[i - <span class="number">2</span>];</span><br><span class="line">p3 = <span class="built_in">input</span>[i - <span class="number">1</span>];</span><br><span class="line">p4 = <span class="built_in">input</span>[i];</span><br><span class="line"></span><br><span class="line">UINT32 m = p1 ^ p2 ^ p3 ^ xor_box[i - <span class="number">4</span>];</span><br><span class="line">UINT32* pm = &amp;m;</span><br><span class="line">UINT8* p = (UINT8*)pm;</span><br><span class="line">UINT32 need1 = get(p[<span class="number">3</span>]);</span><br><span class="line">UINT32 need2 = (need1 &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">UINT32 cul_num1 = (get(p[<span class="number">3</span>]) &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>) | (get(p[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) | get(p[<span class="number">0</span>]);</span><br><span class="line">UINT64 cul_num2 = ((get(p[<span class="number">0</span>]) &lt;&lt; <span class="number">24</span>) | (get(p[<span class="number">3</span>]) &lt;&lt; <span class="number">16</span>) | (get(p[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) | get(p[<span class="number">1</span>])) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">UINT32 final_dec = cul_num1 ^ (cul_num2 &gt;&gt; <span class="number">8</span>) ^ p4 ^ ((need1 &gt;&gt; <span class="number">6</span>) | cul_num1 &lt;&lt; <span class="number">2</span>) ^ (PAIR64(cul_num1, need2) &gt;&gt; <span class="number">22</span>) ^ (PAIR64(cul_num1, cul_num2) &gt;&gt; <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">8</span>) &#123;</span><br><span class="line">out[i - <span class="number">4</span>] = final_dec;</span><br><span class="line"><span class="built_in">input</span>[i - <span class="number">4</span>] = final_dec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">input</span>[i - <span class="number">4</span>] = final_dec;</span><br><span class="line">&#125;</span><br><span class="line">//std::cout &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; final_dec &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//std::cout &lt;&lt; std::endl;</span><br><span class="line">//std::cout &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; out[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; out[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; out[<span class="number">2</span>] &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::<span class="built_in">hex</span> &lt;&lt; out[<span class="number">3</span>];</span><br><span class="line">std::cout &lt;&lt; (char*)out &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(void) &#123;</span><br><span class="line">//UINT32 input_num[<span class="number">36</span>] = &#123; <span class="number">0x31323334</span>, <span class="number">0x31323334</span>, <span class="number">0x35363738</span>, <span class="number">0x35363738</span> &#125;;</span><br><span class="line">//UINT32 encn[<span class="number">36</span>] = &#123;&#125;;</span><br><span class="line">//<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">//&#123;</span><br><span class="line">//encn[i] = input_num[i];</span><br><span class="line">//&#125;</span><br><span class="line">//enc(encn);</span><br><span class="line">//UINT32 lll[<span class="number">32</span>] = &#123; <span class="number">0xee53ae6d</span> ,<span class="number">0xad8d58d3</span> ,<span class="number">0xe904c44a</span> ,<span class="number">0xffa30914</span> ,<span class="number">0xa34d50fe</span> ,<span class="number">0x6d0b76d8</span> ,<span class="number">0x93d7b44c</span> ,<span class="number">0x9f34dba</span> ,<span class="number">0x43f64ea2</span> ,<span class="number">0xd2961d0a</span> ,<span class="number">0xabc12a71</span> ,<span class="number">0x5506c498</span> ,<span class="number">0xe60804c1</span> ,<span class="number">0x6fab9817</span> ,<span class="number">0xa680fb2e</span> ,<span class="number">0xc903775d</span> ,<span class="number">0xacae3b34</span> ,<span class="number">0x564cb9a3</span> ,<span class="number">0x93db754a</span> ,<span class="number">0x66321125</span> ,<span class="number">0xbc6fcb43</span> ,<span class="number">0x5a069224</span> ,<span class="number">0x3661a351</span> ,<span class="number">0xa06815fb</span> ,<span class="number">0xa7096626</span> ,<span class="number">0xc78b501</span> ,<span class="number">0xf9d14107</span> ,<span class="number">0x1ecbf7c7</span> ,<span class="number">0xd23229c8</span> ,<span class="number">0xf04e9414</span> ,<span class="number">0x4eee3557</span> ,<span class="number">0xd01d30b3</span> &#125;;</span><br><span class="line">//<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">//&#123;</span><br><span class="line">//encn[i] = <span class="number">0</span>;</span><br><span class="line">//&#125;</span><br><span class="line">//dec(encn);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">UINT32 tround[<span class="number">36</span>] = &#123;&#125;;</span><br><span class="line">tround[<span class="number">32</span>] = lastb[i + <span class="number">3</span>];</span><br><span class="line">tround[<span class="number">33</span>] = lastb[i + <span class="number">2</span>];</span><br><span class="line">tround[<span class="number">34</span>] = lastb[i + <span class="number">1</span>];</span><br><span class="line">tround[<span class="number">35</span>] = lastb[i];</span><br><span class="line">dec(tround);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意最后输出顺序是倒序输出，当时被这个坑了</p><hr><p>最后看完其它人的wp发现这个就是个SM4，我白学了QAQ</p>]]></content>
    
    
    <summary type="html">又被打爆蜡</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    <category term="CTF" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/"/>
    
    <category term="比赛" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/%E6%AF%94%E8%B5%9B/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
    <category term="so" scheme="https://www.pri87.vip/tags/so/"/>
    
    <category term="SM4" scheme="https://www.pri87.vip/tags/SM4/"/>
    
  </entry>
  
  <entry>
    <title>多线程基本知识</title>
    <link href="https://www.pri87.vip/posts/db8fb698.html"/>
    <id>https://www.pri87.vip/posts/db8fb698.html</id>
    <published>2024-10-28T06:11:54.000Z</published>
    <updated>2024-11-18T04:44:33.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序，进程，线程"><a href="#程序，进程，线程" class="headerlink" title="程序，进程，线程"></a>程序，进程，线程</h2><p>程序是有自己内存布局的一种模块。内存布局一部分由已经实现好的确定的数据和动态执行时的区域两部分。</p><p><img src="https://s2.loli.net/2024/10/28/qPehVxkaOfTtvNj.png" alt="image-20241028143850519"></p><p>程序是进程的组件。进程需要通过组件来完成对应的功能。如果这个程序不依赖其它程序即可完成其既定的功能，它的内存布局也就是进程的内存布局。如若不是，那么上图中的布局（代码区和静态数据区）会有多份。</p><p>进程就是计算机正在执行的任务。它有自己的指令流和内存空间以及一颗虚拟CPU。</p><p>默认情况下一个进程只有一个控制流，但是在现代操作系统结构中，进程可以有多个控制流。每个控制流有一个单独的调用栈。这就是线程。线程隶属于一个进程，可以访问这个进程中绝大部分资源。Windows下，所有任务运行的单位就是线程。</p><h2 id="几个模型"><a href="#几个模型" class="headerlink" title="几个模型"></a>几个模型</h2><h3 id="多进程模型"><a href="#多进程模型" class="headerlink" title="多进程模型"></a>多进程模型</h3><p>时分伪并行：对于进程来说，把CPU时间切片，在对应的时间执行对应的进程，由于时间很短，就会有并行的效果。每个进程还有一个独立空间和映射的虚拟CPU，每次切换时都会通过某些硬件机制或软件机制切换控制权，同时保存好切换的进程的环境信息。因此对于进程而言，它们是连续执行的。</p><h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><p>分为用户级线程和内核级线程</p><p>用户级线程为应用程序在某些控制点上分离虚拟控制流以模拟多个控制流行为。线程切换效率（较内核级线程）高，可以自定义切换算法，但控制力弱</p><p>内核级线程指操作系统提供线程能力，可以直接控制线程的工作。系统维护一张全局线程表，记录线程的各种信息。在一些情况下（如：sleep，wait，select等函数或硬中断和异常）执行对应的线程调度。从而应用进程不需要考虑切换进程，也不需要担心自己会占用过多CPU时间，因为操作系统会协调</p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>三种构造并发程序的方式：</p><ul><li>基于进程：内核实现的多进程通信</li><li>基于IO多路复用：逻辑流被抽象化为状态机，主动监测文件描述符</li><li>基于线程：内核调度，共享虚拟地址</li></ul><p>IO多路复用：<a href="https://www.cnblogs.com/yrxing/p/14143644.html">一文搞懂I&#x2F;O多路复用及其技术 - 尹瑞星 - 博客园</a></p><p>另外2个：《深入理解计算机系统》</p><h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><p>如果一个进程有多个线程，那么如何判断什么时候该执行哪个线程呢。Windows中线程调度依赖于<code>异常</code>的触发。(写这篇的时候还没学中断和异常，具体内容先留着)，异常拥有等级，高等级的异常可以打断低等级的异常的处理，等级被称为IRQL，对于IRQL等于1的线程，表示正在插入异步过程调用（APC）对象，若IRQL等于2，表示正在执行线程调度(选择新线程，处理硬件中断中不紧急的部分)，被称为延迟过程调用（DPC）。通过这两种异常，可以对线程进行调度。</p>]]></content>
    
    
    <summary type="html">了解一点关于多线程的知识</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="开发" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/"/>
    
    <category term="基础" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="windows" scheme="https://www.pri87.vip/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>clash-bug修复</title>
    <link href="https://www.pri87.vip/posts/6e34e55a.html"/>
    <id>https://www.pri87.vip/posts/6e34e55a.html</id>
    <published>2024-10-16T00:50:58.000Z</published>
    <updated>2024-11-16T10:24:19.440Z</updated>
    
    <content type="html"><![CDATA[<p>最近也开始使用clash了，但是每次都是用的系统代理，导致一些网站总是出奇怪的bug。<br>然后开始想可不可以像burpsuit一样从浏览器监听端口，然后成功了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">localhost</span>:<span class="number">7890</span></span><br></pre></td></tr></table></figure><p>浏览器设置好后即可防止全局代理直接在浏览器使用clash代理</p>]]></content>
    
    
    <summary type="html">实现不通过系统代理来使用clash</summary>
    
    
    
    <category term="实践" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="记录" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="clash" scheme="https://www.pri87.vip/tags/clash/"/>
    
  </entry>
  
  <entry>
    <title>Frida-基本使用方法</title>
    <link href="https://www.pri87.vip/posts/d2ac55a9.html"/>
    <id>https://www.pri87.vip/posts/d2ac55a9.html</id>
    <published>2024-10-11T13:18:00.000Z</published>
    <updated>2024-11-16T10:24:08.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h1><p><a href="https://www.cnblogs.com/Only-xiaoxiao/p/17294561.html">Frida 原理及简单使用 - Only-xiaoxiao - 博客园 (cnblogs.com)</a></p><p>找的一篇佬的博客</p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="基本环境创建"><a href="#基本环境创建" class="headerlink" title="基本环境创建"></a>基本环境创建</h3><p>对于安卓模拟器：</p><p>首先需要手机端有frida server，如果是模拟器需要x86和x64的版本，如果是真机，需要arm86和arm64。然后本机需要frida。</p><h3 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h3><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><p>在电脑端使用adb shell连接至手机端，在shell中启动frida_server，启动参数为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frida-server-x -l 0.0.0.0:xxxx</span><br></pre></td></tr></table></figure><p>启动server时，-l指定ip和端口号，，用于创建和电脑端的连接</p><p>电脑端使用adb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:xxxx tcp:xxxx</span><br></pre></td></tr></table></figure><p>和手机端建立通信完成，现在frida-server正在等待电脑的frida连接</p><h4 id="附加进程"><a href="#附加进程" class="headerlink" title="附加进程"></a>附加进程</h4><p>不过frida附加的是进程，所以先使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -H 127.0.0.1:xxxx</span><br></pre></td></tr></table></figure><p>-H表示frida指定使用端口号连接目标，用ps来查看目标的进程名，</p><p>得到进程名yyy后，使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -H 127.0.0.1:xxxx yyy -l hook.js</span><br></pre></td></tr></table></figure><p>使用同样的方法附加目标的yyy进程，并直接附加脚本hook.js，这里的脚本需要指定全部路径</p><p>连接上之后应该会出现frida提示信息和字符画</p><p>之后出现的命令行可以写入任意frida-js指令</p><h3 id="真机"><a href="#真机" class="headerlink" title="真机"></a>真机</h3><p>建立连接，由于手机是通过usb连接的，所以先在手机端启动server。<br>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U</span><br></pre></td></tr></table></figure><p>U指usb调试</p><p>取得进程名。</p><p>然后使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U apk_name -l hook.js</span><br></pre></td></tr></table></figure><p>使用hook.js附加到apk_name进程</p><h3 id="使用脚本"><a href="#使用脚本" class="headerlink" title="使用脚本"></a>使用脚本</h3><p>native层的Hook：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;<span class="comment">//Java.perform函数会把后面传入的函数在Java环境中执行，这里使用匿名函数比较方便，里面写hook函数，如果只有一个hook函数可以直接传hook函数</span></span><br><span class="line">        <span class="title function_">hook</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);<span class="comment">//根据GPT，该函数把传入的函数注册到本轮消息队列末尾，IO操作完成时触发的函数之后，不会阻塞IO操作同时也会尽可能快速地执行这个函数</span></span><br></pre></td></tr></table></figure><p>在hook中写自己的代码比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> xtea = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;example.encrypt.xtea&quot;</span>);<span class="comment">//加载对应类</span></span><br><span class="line">    xtea[<span class="string">&quot;encrypt&quot;</span>].<span class="property">implementation</span> = </span><br><span class="line">    <span class="keyword">function</span> (<span class="params">iArr, iArr2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`xtea.encrypt is called: iArr=<span class="subst">$&#123;iArr&#125;</span>, iArr2=<span class="subst">$&#123;iArr2&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&quot;encrypt&quot;</span>](iArr, iArr2);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtea[<span class="string">&quot;encrypt&quot;</span>]可以通过[]取对应的方法，然后使用implementation来重写方法，后面跟一个相同传参的匿名函数，注意一定要在这个函数中调用<span class="variable language_">this</span>[<span class="string">&quot;encrypt&quot;</span>](iArr, iArr2);来调用原函数，如果这个函数有返回值可以令<span class="keyword">let</span> retV = <span class="variable language_">this</span>[<span class="string">&quot;encrypt&quot;</span>](iArr, iArr2);再<span class="variable language_">console</span>.<span class="property">log</span>出来</span><br></pre></td></tr></table></figure><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> base = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;xxx.exe&quot;</span>)<span class="comment">//通过exe来寻找基址</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inject success&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (base)&#123;</span><br><span class="line">        <span class="title class_">Intercepor</span>.<span class="title function_">attach</span>(base.<span class="title function_">add</span>(<span class="number">0xFFF</span>),&#123;<span class="comment">//这里的数值是目标指令地址相对于base的偏移量</span></span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;<span class="comment">//进入时执行</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;<span class="comment">//离开时执行</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(retval)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是插指令的桩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">functionsToHook.<span class="title function_">forEach</span>(<span class="function"><span class="params">functionName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&quot;xxx.dll&quot;</span>, functionName), &#123;<span class="comment">//通过导出表直接插函数</span></span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            xxx</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">           xxx</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是插函数的桩</p><hr><p>未完结</p>]]></content>
    
    
    <summary type="html">Frida-好！</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="工具" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="插桩及hook" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E5%B7%A5%E5%85%B7/%E6%8F%92%E6%A1%A9%E5%8F%8Ahook/"/>
    
    
    <category term="插桩" scheme="https://www.pri87.vip/tags/%E6%8F%92%E6%A1%A9/"/>
    
    <category term="Hook" scheme="https://www.pri87.vip/tags/Hook/"/>
    
  </entry>
  
  <entry>
    <title>SCTF_RE_复现</title>
    <link href="https://www.pri87.vip/posts/359c2434.html"/>
    <id>https://www.pri87.vip/posts/359c2434.html</id>
    <published>2024-10-10T05:17:01.000Z</published>
    <updated>2024-11-16T10:23:37.721Z</updated>
    
    <content type="html"><![CDATA[<p>死磕了那么久，还是没搞出来QAQ，太菜了，还是，不过这个WP给我了些做这种语言类题目的想法。按WP的方法复现了一下，确实可以直接出</p><h2 id="ez-cython"><a href="#ez-cython" class="headerlink" title="ez_cython"></a>ez_cython</h2><p>对于这类题目，以往我只会hook一下传入参数和返回值。但是这个WP通过构造自己的类使其返回了符号值从而直接打印流程，十分NB，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Symbol</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Symbol):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> + <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> + <span class="subst">&#123;<span class="built_in">hex</span>(other)&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__radd__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__add__(other)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__xor__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Symbol):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> ^ <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> ^ <span class="subst">&#123;<span class="built_in">hex</span>(other)&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rxor__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__xor__(other)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lshift__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &lt;&lt; <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rshift__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &gt;&gt; <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__and__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, Symbol):</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &amp; <span class="subst">&#123;other&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Symbol(<span class="string">f&quot;(<span class="subst">&#123;self&#125;</span> &amp; <span class="subst">&#123;<span class="built_in">hex</span>(other)&#125;</span>)&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">cout = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums</span>):</span><br><span class="line">        self.nums = [Symbol(<span class="built_in">str</span>(num)) <span class="keyword">for</span> num <span class="keyword">in</span> nums]</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">return</span> self.nums[index]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> SA(self.nums)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.nums)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, index, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;new_<span class="subst">&#123;self.nums[index]&#125;</span> = <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">        self.nums[index] = Symbol(<span class="string">f&#x27;new_<span class="subst">&#123;self.nums[index]&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">global</span> cout </span><br><span class="line">        cout += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, value: <span class="built_in">object</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n<span class="subst">&#123;self.nums&#125;</span> \n= \n<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.nums == value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inp = SA([<span class="string">f&quot;a[<span class="subst">&#123;i&#125;</span>]&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line">output = cy.sub14514(inp)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;round = <span class="subst">&#123;cout//<span class="number">32</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>根据输出可以一眼看出是xxtea</p><p>然后直接写XXTEA脚本就好QAQ</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arr.h&quot;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[] = &#123; <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">83</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">121</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deXXTEA</span><span class="params">(Arr&amp; input)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line"><span class="type">uint32_t</span> len = input.<span class="built_in">getsize</span>();</span><br><span class="line"><span class="type">uint32_t</span> round = <span class="number">60</span> / len + <span class="number">4</span>;</span><br><span class="line"><span class="type">uint32_t</span> sum = delta * round;</span><br><span class="line"><span class="type">int</span> t = <span class="number">32</span> * <span class="number">5</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; round; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> now = len - <span class="number">1</span>; now &gt; <span class="number">-1</span>; now--)</span><br><span class="line">&#123;</span><br><span class="line">input[now] -= (((input[now - <span class="number">1</span>] &gt;&gt; <span class="number">3</span> ^ input[now + <span class="number">1</span>] &lt;&lt; <span class="number">3</span>) +</span><br><span class="line">(input[now + <span class="number">1</span>] &gt;&gt; <span class="number">4</span> ^ input[now - <span class="number">1</span>] &lt;&lt; <span class="number">2</span>)) ^ ((sum ^ input[now + <span class="number">1</span>]) +</span><br><span class="line">(key[t] ^ input[now - <span class="number">1</span>])));</span><br><span class="line">t--;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; ((now &amp; 2) ^ ((sum &gt;&gt; 3) &amp; 3)) &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>] = &#123; <span class="number">0x53</span>,<span class="number">0x79</span>,<span class="number">0x43</span>,<span class="number">0x31</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> data[] = &#123; <span class="number">0xf4e984ac</span>, <span class="number">0xcaf0191d</span>, <span class="number">0x576ffc19</span>, <span class="number">0x2ef90939</span>, <span class="number">0x585c0e45</span>, <span class="number">0x2eaa8337</span>, <span class="number">0x617f6b89</span>, <span class="number">0xf55432a7</span>, <span class="number">0xa81cb817</span>, <span class="number">0xbf1ee8c3</span>, <span class="number">0x656309c6</span>, <span class="number">0x92ace1cc</span>, <span class="number">0x8efeb57e</span>, <span class="number">0x39c000bb</span>, <span class="number">0x4d650916</span>, <span class="number">0x6a78dba7</span>, <span class="number">0xeba5c0a3</span>, <span class="number">0x92fdb0f3</span>, <span class="number">0xf4b5dea2</span>, <span class="number">0x2e7098d9</span>, <span class="number">0x112df304</span>, <span class="number">0xc60e9667</span>, <span class="number">0xf5b523ec</span>, <span class="number">0x7c8eb381</span>, <span class="number">0x2720ac77</span>, <span class="number">0xb8939ede</span>, <span class="number">0x8428a41a</span>, <span class="number">0x288ac504</span>, <span class="number">0xca50bcfd</span>, <span class="number">0x2992ba6f</span>, <span class="number">0x4222d1a6</span>, <span class="number">0x876c84df</span></span><br><span class="line">&#125;;</span><br><span class="line">Arr* test = <span class="keyword">new</span> <span class="built_in">Arr</span>(data, <span class="number">32</span>);</span><br><span class="line"><span class="comment">//XXTEA(*test, (uint32_t*)key);</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; *test;</span></span><br><span class="line"><span class="comment">//deXXTEA(*test, (uint32_t*)key);</span></span><br><span class="line"><span class="built_in">deXXTEA</span>(*test);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">33</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">str[i] = (test-&gt;<span class="built_in">getarr</span>())[i];</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; str;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arr.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Arr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">size_t</span> size;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>* arr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Arr</span>(<span class="type">size_t</span> s);</span><br><span class="line"><span class="built_in">Arr</span>(<span class="type">uint32_t</span>* p, <span class="type">unsigned</span> s);</span><br><span class="line"><span class="built_in">Arr</span>(std::initializer_list&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; init);</span><br><span class="line">~<span class="built_in">Arr</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">getsize</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">getarr</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Arr&amp; obj);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">unsigned</span> i);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">begin</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">end</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arr.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(<span class="type">size_t</span> s) : <span class="built_in">size</span>(s), <span class="built_in">arr</span>(<span class="keyword">new</span> <span class="type">uint32_t</span>[s]) &#123;</span><br><span class="line">std::<span class="built_in">fill_n</span>(arr, s, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(<span class="type">uint32_t</span>* p, <span class="type">unsigned</span> s) : <span class="built_in">Arr</span>(s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Arr::<span class="built_in">Arr</span>(std::initializer_list&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; init) :<span class="built_in">size</span>(init.<span class="built_in">size</span>()), <span class="built_in">arr</span>(<span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">int</span>[init.<span class="built_in">size</span>()])</span><br><span class="line">&#123;</span><br><span class="line">std::<span class="built_in">copy</span>(init.<span class="built_in">begin</span>(), init.<span class="built_in">end</span>(), arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arr::~<span class="built_in">Arr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Arr::getsize</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::getarr</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>&amp; Arr::<span class="keyword">operator</span>[](<span class="type">unsigned</span> i)</span><br><span class="line">&#123;</span><br><span class="line">i = (i + size) % size;</span><br><span class="line">i = i &gt;= <span class="number">0</span> ? i : (i + size);</span><br><span class="line"><span class="keyword">return</span> arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::begin</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title">Arr::end</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr + size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Arr&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;len: &quot;</span> &lt;&lt; obj.<span class="built_in">getsize</span>() &lt;&lt; std::endl;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;element list:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> i : obj) &#123;</span><br><span class="line">os &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; std::hex &lt;&lt; std::uppercase &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; std::<span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>) &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>我一开始是想使用frida和python setattr一起搞的，最后失败了QAQ。<br>我现在在想，会不会对于那些语言形成的混淆，其实可以用语言本身的特性去解决，至少对于解释型语言似乎重点都在混淆里面，那么对于Java的so文件，似乎也可以这样？如果加密是传入一个byte[]类型，那我继承byte生成自己的类传进去，似乎就没有问题了。</p><p>再往编译型语言看看，像rust，go似乎都是直接看汇编比看ida反编译的更好。但是如果他们写成dll似乎也可以被我们主动触发。而剩下的exe类型，还是直接让之后专门的反编译器来解决吧。</p><p>我觉得像这种语言层面的混淆，会随着语言变多&#x2F;发展而愈来愈多，所以我觉得深入研究某个语言的内容是不划算的（除非专门研究某个语言的逆向，但是这样也可能遇到很多不开源的框架，对于框架来说，我们也很难分析）。那么对于这些内容，我们为了理清逻辑，更应该使用通解：HOOK？来获取具体流程。</p><hr><p>关于我一开始的方法：frida_hook py38.dll的运算函数</p><p>hook到的永远是一个地址，且如果先传给python再解引用会导致一些bug，frida直接解引用也会导致bug。</p><p>所以还是要看一下具体的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span><span class="comment">//定长类型</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">&#125; PyObject;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//变长类型</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">&#125; PyVarObject;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//float为定长类型</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    <span class="type">double</span> ob_fval;</span><br><span class="line">&#125; PyFloatObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PyLongValue</span> &#123;</span><span class="comment">//int为变长类型</span></span><br><span class="line">    <span class="type">uintptr_t</span> lv_tag; <span class="comment">/* Number of digits, sign and flags */</span></span><br><span class="line">    digit ob_digit[<span class="number">1</span>];</span><br><span class="line">&#125; _PyLongValue;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">longobject</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    _PyLongValue long_value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://www.thinkinpython.com/post/deep_py_vm_3.html">3. Object 的基本结构 - Think In Python</a></p><p><a href="https://github.com/python/cpython/blob/main/Include/cpython/longintrepr.h#L98">cpython&#x2F;Include&#x2F;cpython&#x2F;longintrepr.h at main · python&#x2F;cpython (github.com)</a></p><p>根据如上去查找PyObject_HEAD，发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PyObject_HEAD                   PyObject ob_base;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span></span><br><span class="line">    _PyObject_HEAD_EXTRA</span><br><span class="line">    Py_ssize_t ob_refcnt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> *<span class="title">ob_type</span>;</span></span><br><span class="line">&#125; PyObject;</span><br></pre></td></tr></table></figure><p>其中_PyObject_HEAD_EXTRA被定义为NULL，Py_ssize_t为int64，struct _typeobject *是指针也为64<br>所以这里有16字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PyLongValue</span> &#123;</span></span><br><span class="line">    <span class="type">uintptr_t</span> lv_tag; <span class="comment">/* Number of digits, sign and flags */</span></span><br><span class="line">    digit ob_digit[<span class="number">1</span>];</span><br><span class="line">&#125; _PyLongValue;</span><br></pre></td></tr></table></figure><p>lv_tag保存了</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">低2位：符号信息：0：正数，1：0，2：<span class="string">-1</span></span><br><span class="line">第三低位：保留</span><br><span class="line">之前的：保存长整数中数字的个数，ndigits = lv_tag &gt;&gt; 3（64位中为(1&lt;&lt;61)<span class="string">-1</span>）</span><br></pre></td></tr></table></figure><p>ob_digit为数组，存放无符号整型，会放30位内容进去，作为值</p><p><a href="https://www.cnblogs.com/ChangAn223/p/11495690.html">Python 3 的 int 类型详解（为什么 int 不存在溢出问题？） - 长安223 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.thinkinpython.com/post/deep_python_4.html">4. Long Object 初探 - Think In Python</a></p><p>那么我们可以直接使用以下转换函数来转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNumber</span>(<span class="params">Nptr</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> ps = <span class="title class_">Process</span>.<span class="property">pointerSize</span></span><br><span class="line">    <span class="keyword">let</span> shift = ps == <span class="number">8</span>? <span class="number">30</span>:<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="title class_">Nptr</span>.<span class="title function_">add</span>(<span class="number">0x10</span>).<span class="title function_">readPointer</span>().<span class="title function_">toInt32</span>();</span><br><span class="line">    <span class="keyword">let</span> number = <span class="title function_">ptr</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> this_block = <span class="title function_">ptr</span>(<span class="title class_">Nptr</span>.<span class="title function_">add</span>(<span class="number">0x18</span>+i*(ps/<span class="number">2</span>)).<span class="title function_">readU32</span>())</span><br><span class="line">        number = number.<span class="title function_">or</span>(this_block.<span class="title function_">shl</span>(shift*i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据测试，这个可以hook出正确的值，但是乘法不对，似乎和底层实现有关，QAQ有没有佬教教我</p><p>  hook出的每轮的值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_And</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x9e3779ce&#x27;</span>, <span class="string">&#x27;0xffffffff&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_And</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x9e3779ce</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x13c6ef39&#x27;</span>, <span class="string">&#x27;0x10&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x13c6ef29</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x0&#x27;</span>, <span class="string">&#x27;0x278dde738&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x278dde738</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x13c6ef29&#x27;</span>, <span class="string">&#x27;0x278dde738&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x28ca4d661</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x2&#x27;</span>, <span class="string">&#x27;0x9e3779b9&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x9e3779bb</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x0&#x27;</span>, <span class="string">&#x27;0x3&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x3</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x31&#x27;</span>, <span class="string">&#x27;0x9e3779ce&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x9e3779ff</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x9e3779bb&#x27;</span>, <span class="string">&#x27;0x9e3779ff&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x13c6ef3ba</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x28ca4d661&#x27;</span>, <span class="string">&#x27;0x13c6ef3ba&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Xor</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x3b0ca25db</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x5&#x27;</span>, <span class="string">&#x27;0x3b0ca25db&#x27;</span>]</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_Add</span> <span class="selector-tag">returned</span>: <span class="number">0</span><span class="selector-tag">x3b0ca25e0</span></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Function</span> <span class="selector-tag">PyNumber_And</span> <span class="selector-tag">called</span> <span class="selector-tag">with</span> <span class="selector-tag">arguments</span>: <span class="selector-attr">[<span class="string">&#x27;0x3b0ca25e0&#x27;</span>, <span class="string">&#x27;0xffffffff&#x27;</span>]</span></span><br></pre></td></tr></table></figure><p>感觉还是很对的。</p>]]></content>
    
    
    <summary type="html">悲伤的CYthon</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="CTF" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="比赛" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/%E6%AF%94%E8%B5%9B/"/>
    
    <category term="语言" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="python" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E8%AF%AD%E8%A8%80/python/"/>
    
    
    <category term="RE" scheme="https://www.pri87.vip/tags/RE/"/>
    
    <category term="python" scheme="https://www.pri87.vip/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Cython学习</title>
    <link href="https://www.pri87.vip/posts/98181542.html"/>
    <id>https://www.pri87.vip/posts/98181542.html</id>
    <published>2024-10-01T15:29:23.000Z</published>
    <updated>2024-11-16T10:22:29.724Z</updated>
    
    <content type="html"><![CDATA[<p>怎么最近这么多Cython的题，做起来好痛苦。而且这种题还是那种很好出，但是不好逆的。当然，也就是暂时了。但凡有佬研究清楚结构，都可以搞个反编译器出来直接秒。不过好像就连rust，go这种都没有专门的反编译器，可能就还早了。。。</p><p>这次SCTF，某出题人叫我试试他出的题，然后就被恶心到了。</p><p>我本身是不喜欢去研究那些什么结构之类的东西，因为不一样的格式太多了，每个都研究显然是不高效的，我想找到一个可能的通解去研究某些问题</p><p>因为这不是python系列的第一篇了，所以这里只说一下我想的新方法。</p><h2 id="Cython"><a href="#Cython" class="headerlink" title="Cython"></a>Cython</h2><p><a href="https://blog.csdn.net/MOU_IT/article/details/81876879">cython是什么-CSDN博客</a></p><p>Cython是一个语言：完全包含python语言和部分包含C语言和魔改C语言的集合。它由python实现用于写python模块。文件后缀是pyx，它的作用在于提高python的速度，编译过程：pyx-&gt;c-&gt;pyd&#x2F;so（分别为Windows，linux）</p><p>可以尝试自写一个pyx文件生成pyd后用ida打开pyd文件，发现内容和原来的内容已经截然不同，可以说根本没有辨识度，极难分析。但是可以发现pyd都调用了python.dll的函数，其中所有运算符都在其中有对应的函数。我在想是不是可以通过这个方法来得到pyd的执行流程。</p><h2 id="Hook，启动！"><a href="#Hook，启动！" class="headerlink" title="Hook，启动！"></a>Hook，启动！</h2><p>frida：挂钩时间在python层hook后第一次执行hook函数。好像不能全部hook，所以只hook基本运算函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> functionsToHook = [</span><br><span class="line">    <span class="string">&quot;PyNumber_Add&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Subtract&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Multiply&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_TrueDivide&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Or&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Xor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_And&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Lshift&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyNumber_Rshift&quot;</span>,</span><br><span class="line">    <span class="string">&quot;PyObject_GetItem&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">functionsToHook.<span class="title function_">forEach</span>(<span class="function"><span class="params">functionName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&quot;python38.dll&quot;</span>, functionName), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> argsArray = [];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                argsArray.<span class="title function_">push</span>(args[<span class="number">0</span>]); </span><br><span class="line">                argsArray.<span class="title function_">push</span>(args[<span class="number">1</span>]); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Error reading arguments: <span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(argsArray);</span><br><span class="line">            <span class="title function_">send</span>(&#123; <span class="attr">function</span>: functionName, <span class="attr">arguments</span>: argsArray &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="title function_">send</span>(&#123; <span class="attr">function</span>: functionName, <span class="attr">returnValue</span>: retval &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后测试，结果失败了。QAQ因为这些函数的传参和传出都是python的值对象。所以要找个方法去解析那些对象。以及最后的比较不知道是什么函数，要知道最后的密文需要hook这个函数。</p><p>尝试先使用ida动调python，看看里面的值对象的空间是怎么样的。</p>]]></content>
    
    
    <summary type="html">python,NO!!!</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="语言" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="python" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E8%AF%AD%E8%A8%80/python/"/>
    
    
    <category term="逆向" scheme="https://www.pri87.vip/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="python" scheme="https://www.pri87.vip/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C语言总结</title>
    <link href="https://www.pri87.vip/posts/76cbc618.html"/>
    <id>https://www.pri87.vip/posts/76cbc618.html</id>
    <published>2024-10-01T11:05:33.000Z</published>
    <updated>2024-11-16T10:22:04.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言入门"><a href="#C语言入门" class="headerlink" title="C语言入门"></a>C语言入门</h1><p>本章快速过一遍C语言的知识，同时提供一种从逆向角度看待不同语言的视角。</p><h2 id="0x01-为了实现"><a href="#0x01-为了实现" class="headerlink" title="0x01 为了实现"></a>0x01 为了实现</h2><p>任何一个语言，均是为了实现一个目的而使用的。任何一个语言，均是为了解决一个痛点而出现的。C正是解决了汇编的繁琐而出现的，它把寄存器和内存的各种操作封装到每个过程的变量之中来简化指令的编写。</p><p>C语言基于面向过程。CPU从程序入口点抽出一条指令，然后执行，再抽出下一个指令，然后再执行，直到程序结束。这就叫过程，一般来说，面向过程的过程也可以叫做函数。一个函数的结束可以说是一个过程的结束。在C语言中也是如此。</p><h2 id="0x02-过程"><a href="#0x02-过程" class="headerlink" title="0x02 过程"></a>0x02 过程</h2><h3 id="00-过程的定义"><a href="#00-过程的定义" class="headerlink" title="00 过程的定义"></a>00 过程的定义</h3><p>C语言中，过程的定义就是一个有0或多个输入，0或多个输出的函数。通常来讲，只要是{}大括号包裹的空间，都被视为一个单独的过程，包括后面的循环体，选择体等等。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程是0输入，1输出的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">say</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程是一个2输入，0输出的函数。</p><p>对于一个函数，其主要作用就是返回一个数值，我们叫它返回值，也就是<code>return 0;</code>这个语句，但是还可能有其它效果，比如打印一个字符串到屏幕，这种除了返回一个值的其它效果被叫做<code>副作用</code>。printf的副作用就是输出内容到屏幕，它的返回值就是输出内容成功的个数。C语言中函数的本质就是它的返回值</p><h3 id="01-创建一个过程"><a href="#01-创建一个过程" class="headerlink" title="01 创建一个过程"></a>01 创建一个过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">return_type <span class="title function_">identifier</span><span class="params">(type parameter,...)</span>&#123;</span><br><span class="line">    <span class="comment">//function body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个过程（在C语言中的函数）需要返回类型，过程名，传入参数和函数体。</p><p>上面的例子标识了函数如何定义。</p><ul><li><code>return_type</code> 表示返回值的类型(具体见0x03)</li><li><code>identifier</code> 是你为这个函数标识的名字（标识符）</li><li><code>type parameter</code> 即括号中的内容是传入的参数类型和传入值的标识符，如果没有，可以填void，标识为空(具体见0x03)</li><li><code>function body</code> 函数体，你会在这里写这个过程需要干什么，就像上面的main函数一样</li></ul><p>值得一提的是：每个C语言程序都需要一个main函数作为用户自定义过程的入口点。也就是说，当用户打开一个C程序，CPU从start函数（自动生成的）开始初始化所有需要的环境，成功后，自动调用main函数从而执行用户自定义的过程，main函数结束后，再自动回收&#x2F;清理环境内容然后结束程序。</p><h3 id="02-调用一个过程"><a href="#02-调用一个过程" class="headerlink" title="02 调用一个过程"></a>02 调用一个过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> c = add(a,b);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用是指：进入一个过程并完成它，在C语言中还有计算出它的返回值的含义</p><p>这个例子中，scanf和printf和add就是被调用的过程。以add举例，CPU执行到这里，会先进入add过程，然后一条一条执行其中的代码，返回出设定的值。函数调用的格式即是identifier(parameters)，再次说明：它的含义就是计算出这个过程的返回值，一个函数调用的本质就是得到它的值。对于printf这类含有副作用的函数，它们会在计算返回值的过程中“顺带”表现副作用。</p><h2 id="0x03-参数，计算，表达式和语句"><a href="#0x03-参数，计算，表达式和语句" class="headerlink" title="0x03 参数，计算，表达式和语句"></a>0x03 参数，计算，表达式和语句</h2><p>刚刚说明了函数的本质就是返回值，那么对于C语言来说，添加&#x2F;删除&#x2F;修改”值“就是C程序的本职工作。这一章就介绍一下，C语言如何操作值</p><h3 id="00-标识符"><a href="#00-标识符" class="headerlink" title="00 标识符"></a>00 标识符</h3><p>在计算机的底层实现中，任何一个内存地址都对应一个值，C语言通过使用标识符的方法来简化对内存空间的操作。现在可以假设内存地址是一个街道的所有门牌号，地址对应的值是门牌号内的东西。</p><p>在汇编中实现两数相加的运算过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;省略</span><br><span class="line">mov [rsp+4],4;在栈对应的内存地址放置一个值</span><br><span class="line">mov rax,3;另外一个操作数放到加法寄存器中</span><br><span class="line">add rax,[rsp+4];执行加法操作</span><br><span class="line">mov rax,rax;把返回值放到rax寄存器中，用于返回，这个步骤可能被优化</span><br><span class="line">;省略</span><br></pre></td></tr></table></figure><p>在C语言中实现两数相加的运算过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，C语言省略了对栈空间&#x2F;内存地址以及寄存器的描述，将我们的精力放到了实现效果上。其中的a和b被叫做标识符，它们代表了内存空间的某个地址（这时又可以被叫做变量）。标识符即是内存空间一个区域的代号，是供我们操作其中值的中介</p><h3 id="01-声明一个标识符"><a href="#01-声明一个标识符" class="headerlink" title="01 声明一个标识符"></a>01 声明一个标识符</h3><h4 id="1单独声明"><a href="#1单独声明" class="headerlink" title="1单独声明"></a>1单独声明</h4><p>基本格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;qualifier&gt; type identifier;</span><br><span class="line"><span class="comment">//特殊写法</span></span><br><span class="line"><span class="type">int</span> a,b,c;<span class="comment">//连续声明</span></span><br></pre></td></tr></table></figure><p><code>type</code>：说明这个标识符对应空间的大小和默认的类型，其中默认类型影响运算效果，虽然可以强制类型转化，但是还是尽量在定义时就写好</p><table><thead><tr><th>type</th><th>大小</th><th>默认类型</th></tr></thead><tbody><tr><td>char</td><td>1字节</td><td>有符号字符型</td></tr><tr><td>short</td><td>2字节</td><td>有符号短整型</td></tr><tr><td>int</td><td>4字节</td><td>有符号整型</td></tr><tr><td>long</td><td>4字节</td><td>有符号长整型</td></tr><tr><td>long long</td><td>8字节</td><td>有符号长长整形</td></tr><tr><td>bool</td><td>1字节</td><td>只存放0和1，C23</td></tr></tbody></table><p><code>identifier</code>：一个你定义的名字，用来标识这块区域，之后对这块区域的操作转换为对这个标识符的操作。内容必须为：大小写字母和数字和下划线的组合。不能以数字开头，不能和已有内容重名（同一作用域下之前的标识符，关键字（比如char return））</p><p><code>&lt;qualifier&gt;</code>：可选的限定符，可以写多个内容。</p><table><thead><tr><th>qualifier</th><th>效果</th></tr></thead><tbody><tr><td>signed</td><td>表明这个区域的值默认为有符号，省略默认为signed</td></tr><tr><td>unsigned</td><td>表明这个区域的值默认为无符号，使用unsigned时省略type表明是无符号整型</td></tr><tr><td>const</td><td>表明这个区域的值除了初始赋值外不可更改，声明时必须直接赋值</td></tr><tr><td>volatile</td><td>不建议编译器优化这个区域的操作</td></tr><tr><td>extren</td><td>表明这个变量来自其它源代码文件</td></tr><tr><td>static</td><td>表明这个变量不能被extren，只能在本文件使用</td></tr><tr><td>auto</td><td>表明这个变量是局部变量，块作用域，省略默认为auto</td></tr><tr><td>register</td><td>建议编译器把这个值放到寄存器</td></tr></tbody></table><h4 id="2声明时赋值"><a href="#2声明时赋值" class="headerlink" title="2声明时赋值"></a>2声明时赋值</h4><p>一个区域只声明，其中的内容是不会因为你给了这个区域一个名字而改变的。所以我们一般在声明时直接赋值。</p><p>基本格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;qualifier&gt; type identifier=number;</span><br><span class="line"><span class="comment">//特殊写法，连续赋值</span></span><br><span class="line"><span class="keyword">auto</span> a=<span class="number">1</span>,b=<span class="number">4</span>,c=<span class="number">0</span>;<span class="comment">//auto只能赋值一种类型</span></span><br></pre></td></tr></table></figure><p>这里的&#x3D;为赋值号，作用是把整个等式右边的值计算出来给左边。形如a&#x3D;b这样的式子被叫做表达式，和函数类似，这也是一个过程，对于赋值来说，副作用是把右边的值给左边，返回值是结束后左边的空间中的值。</p><p>所以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=b=c=d=e=f=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>的效果就是先让f等于5，再让e等于（f&#x3D;5）这个表达式的值即5，以此类推，直到a&#x3D;5.</p><p>大家也发现，对于赋值符号，左边一定是一个空间，右边则不一定，空间不一定在左侧，但是数一定在右侧。为了简便描述，我们把可以在赋值号左边的值（标识空间的）称为<code>左值</code>，而不可以在左边的值（只能视为数的）被称为<code>右值</code></p><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=b=c=d=e=f=<span class="number">5</span>;<span class="comment">//a,b,c,d,e,f为左值，5，f=5，e=f=5，d=e=f=5，c=d=e=f=5，b=c=d=e=f=5，a=b=c=d=e=f=5为右值</span></span><br><span class="line">c = add(a,b)-d;<span class="comment">//a,b,c,d为左值，add(a,b)，add(a,b)-d，c = add(a,b)-d为右值</span></span><br></pre></td></tr></table></figure><p>对于声明时赋值，number可以是左值也可以是右值。而前面的限定符和类型描述符均和赋值相同。</p><p>特别的，声明时赋值可以使用这样的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> a=<span class="number">1</span>;<span class="comment">//默认int</span></span><br><span class="line"><span class="keyword">auto</span> b=<span class="number">0.1f</span>;<span class="comment">//默认float</span></span><br><span class="line"><span class="keyword">auto</span> c=<span class="number">8.9</span>;<span class="comment">//默认double</span></span><br></pre></td></tr></table></figure><p>C23引入了这种写法,auto自动判断类型，甚至可以把函数返回值设为auto启用自动推断。</p><h4 id="3-声明数组"><a href="#3-声明数组" class="headerlink" title="3 声明数组"></a>3 声明数组</h4><p>假设我的程序需要100个变量，难道我要写100个auto a,b,c,d,…吗？当然不是，通过数组，我们可以向系统申请一块连续的内存用来存放我们的多个变量。</p><p>声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;qualifier&gt; type identifier[size];</span><br><span class="line"><span class="type">int</span> arr[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><p>这里的type identifier[size]就是连续申请size个type大小的空间的意思。这个空间的名字就是identifier。如果写成结构体，类似这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">arr</span>&#123;</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">...<span class="comment">//一共100个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以这样赋值和初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//初始化为0</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;&#125;; <span class="comment">//初始化为0，从C23开始</span></span><br></pre></td></tr></table></figure><p>其中的0,1用于指定从arr开始我们申请的第几个type长度的小空间，[]中的数我们称为下标，我们通过下标去访问数组的值。</p><p>那么，我们的数组下表支持变量吗，回答是肯定的。我们可以这样使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">arr[a] = <span class="number">1</span>; <span class="comment">//讲arr[0]的值改为1,因为a是0</span></span><br></pre></td></tr></table></figure><p>其实，可以把内存当作一个超长的数组，每个地址都是一个下标，访问地址0x10000时，可以理解为取memory[0x10000]中存放的值。C语言虽然没有直接定义一个memory数组来让我们直接操作，但是提供了一个额外的类型和操作符*&amp;（解引用运算符和取址运算符）来让我们自由地使用内存，那就是<code>指针</code>，指针就相当于memory数组的下标</p><h4 id="4-声明指针"><a href="#4-声明指针" class="headerlink" title="4 声明指针"></a>4 声明指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type *identifier;</span><br><span class="line"><span class="type">int</span> *ptr;<span class="comment">//声明一个指向int型数据的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//操作memory[0x10000]</span></span><br><span class="line">ptr = (<span class="type">int</span>*)<span class="number">0x10000</span>;<span class="comment">//这里原来的数据是int型，和指针类型不同，所以要先进行转换</span></span><br><span class="line">*ptr = <span class="number">100</span>;<span class="comment">//等价于memory[0x10000]=100;</span></span><br><span class="line"><span class="type">int</span> a = *ptr;<span class="comment">//等价于a = memory[0x10000];</span></span><br></pre></td></tr></table></figure><p>通过以上的方法可以实现自由操作内存地址的值。</p><p>你可能会好奇，按上面所说ptr直接表示了一个内存地址，为什么还需要添加type标识来表示它指向空间的类型呢。其实这也很好理解。内存是连续的字节数组，但是使用时并不一定按字节使用，如果这里的空间是你给<code>int a</code>生成的空间，那这个空间肯定是int型的，你如果按char来使用，那就会错误。</p><p>好了，我们了解了指针如何赋值了，但是有个问题，如果我想要指向一个已经生成的标识符的地址，又该怎么赋值呢，这里就用到了另一个运算符&amp;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ptr;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">ptr = a;<span class="comment">//错误，不能把一个数赋给指针（或者说内存数组的下标）</span></span><br><span class="line">*ptr = a;<span class="comment">//正确，可以把数赋给指针指向的地址(等价memory[ptr]=a)</span></span><br><span class="line">ptr = &amp;a;<span class="comment">//正确，对标识符使用&amp;取址运算符取得目标标识符在内存中的地址，然后赋给指针，这样ptr指向的地址就是a的地址。对*ptr进行的操作就是对a进行的操作</span></span><br></pre></td></tr></table></figure><p>不难看出，*和&amp;是两个互逆的运算符，*把一个地址转为地址中的值，&amp;把一个值转为对应的地址，当然，&amp;运算符使用的前提是这里要有这个空间，标识符表明一个空间，因此可以使用&amp;标识符来获取这个空间的地址，单纯的一个数没有空间所以不能&amp;1。</p><p>可以来看看指针和普通标识符的区别及联系：</p><table><thead><tr><th></th><th>普通标识符</th><th>指针标识符</th></tr></thead><tbody><tr><td>默认表示</td><td>数据</td><td>目标地址</td></tr><tr><td>使用*</td><td>无效</td><td>数据</td></tr><tr><td>使用&amp;</td><td>自身地址</td><td>自身地址</td></tr></tbody></table><p>可以理解为：普通标识符是默认为值的，用&amp;获取地址，而指针标识符是默认为地址的，用*获取值。</p><p>现在假设</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *ptr1 = &amp;a;</span><br><span class="line"><span class="type">int</span> **ptr2 = ptr1;</span><br></pre></td></tr></table></figure><p>根据上面的表格可以得出</p><table><thead><tr><th></th><th>a</th><th>ptr1</th><th>ptr2</th></tr></thead><tbody><tr><td>默认表示</td><td>0</td><td>a的地址</td><td>ptr1的地址</td></tr><tr><td>使用*</td><td>无效数据</td><td>0</td><td>ptr1的值(即a的地址)</td></tr><tr><td>使用**</td><td>无效数据</td><td>无效数据</td><td>0</td></tr><tr><td>使用&amp;</td><td>a的地址</td><td>ptr1的地址</td><td>ptr2的地址</td></tr></tbody></table><p>很好理解吧。</p><h3 id="02-计算"><a href="#02-计算" class="headerlink" title="02 计算"></a>02 计算</h3><p>基础运算符，这里就只说明一下，具体去网络上搜索</p><h4 id="1算数运算符"><a href="#1算数运算符" class="headerlink" title="1算数运算符"></a>1算数运算符</h4><p>+,-,*,&#x2F;,%，结合性均为从左至右</p><p>返回值类型为操作数的类型（不一样按空间大的计算），返回值为数学计算出的值</p><p>&#x2F;和%右操作数不能为0，如果&#x2F;的操作数有一个是浮点型，结果就是浮点型，否则为整除运算.</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>/<span class="number">3</span></span><br><span class="line"><span class="comment">//结果为1</span></span><br><span class="line"><span class="number">5.0</span>/<span class="number">3</span></span><br><span class="line"><span class="comment">//结果为1.666666</span></span><br></pre></td></tr></table></figure><p>%的左操作数决定返回值类型</p><p>C语言的取整为趋零截断，出现的所有小数变为整数时向0取整</p><h4 id="2自增运算符"><a href="#2自增运算符" class="headerlink" title="2自增运算符"></a>2自增运算符</h4><p>i++,++i,i–,–i，和最近的一个结合</p><p>i++表明先运算完这个语句，然后执行i&#x3D;i+1</p><p>++i表明先执行i&#x3D;i+1，然后运算这个语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i++);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,--i);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,++i);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="3赋值运算符"><a href="#3赋值运算符" class="headerlink" title="3赋值运算符"></a>3赋值运算符</h4><p>结合性从右到左</p><p>复合赋值</p><p>+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;</p><p>a+&#x3D;1表示a&#x3D;a+1同理其它的</p><h4 id="4关系运算符"><a href="#4关系运算符" class="headerlink" title="4关系运算符"></a>4关系运算符</h4><p>返回值均为真假（0或1），结合从左到右</p><p>&lt;,&gt;,&#x3D;&#x3D;,!&#x3D;,&gt;&#x3D;,&lt;&#x3D;</p><p>分别为是否小于，是否大于，是否等于，是否不等于，是否大于等于，是否小于等于</p><p>注意&#x3D;&#x3D;和&#x3D;的区别</p><h4 id="5逻辑运算符"><a href="#5逻辑运算符" class="headerlink" title="5逻辑运算符"></a>5逻辑运算符</h4><p>a &amp;&amp; b 是否同时成立</p><p>a || b 是否至少一个成立</p><p>!a 是否不成立</p><h4 id="6三元运算符"><a href="#6三元运算符" class="headerlink" title="6三元运算符"></a>6三元运算符</h4><p>a?b:c</p><p>表示a如果不为0，则返回（执行）为b，否则返回（执行）c，这里写执行是提醒副作用</p><h4 id="7位运算符"><a href="#7位运算符" class="headerlink" title="7位运算符"></a>7位运算符</h4><p>&amp; 按位与</p><p>| 按位或</p><p>~ 按位非</p><p>^ 按位异或</p><p>&lt;&lt; 左移，空位补0</p><p>&gt; &gt; 右移，如果有符号，补符号，称为算数右移，否则是逻辑右移</p><p>以上优先级表请自行查看，注意位运算符和算数运算的优先级关系</p><p>好了，通过以上内容，我们已经可以操作一个空间进行赋值和计算了，然后就是面向过程的核心，操作过程，即控制程序的执行流程。</p><h2 id="0x04-过程控制"><a href="#0x04-过程控制" class="headerlink" title="0x04 过程控制"></a>0x04 过程控制</h2><p>面向过程中分为三种结构：顺序，选择，循环</p><p>顺序就是指令依次执行从上到下的一种结构，所有指令执行且只执行一次。<br>选择就是根据条件来执行分支中代码的结构。指令执行0次或1次。<br>循环就是根据条件多次重复执行代码的结构。指令执行0次，1次或多次。</p><p>使用上面三种结构使得所有代码可以有逻辑地执行我们想让它执行的次数。<br>一般情况下，我们用顺序结构做连接，让选择和循环结构分块来执行我们的程序。由于顺序结构就是正常的语句，我们这里直接跳过。</p><h3 id="01-选择结构"><a href="#01-选择结构" class="headerlink" title="01 选择结构"></a>01 选择结构</h3><p>我们一般使用if&#x2F;else和switch来写选择结构</p><p>if-else</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x)&#123;<span class="comment">//单if</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( x )&#123;<span class="comment">//if+else</span></span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x)&#123;<span class="comment">//if+else&#123;if+else&#125;</span></span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">if</span>(y)&#123;</span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若if括号中任意内容的返回值为非0则执行，否则跳过，如果有else就执行else，如果if或else后只有一条语句则不需要写大括号，由于if本身也是一条语句所以：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a)</span><br><span class="line">    <span class="keyword">if</span>(b)</span><br><span class="line">        <span class="keyword">if</span>(c)</span><br><span class="line">            <span class="keyword">if</span>(d)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;不用写大括号，爽！&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;我和if(d)匹配&quot;</span>);<span class="comment">//else只和最近的未匹配的if匹配</span></span><br></pre></td></tr></table></figure><p>因此，if-else if语法也不需要定义可以直接使用因为if else整个是一条语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;神奇的&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果我们要选择的内容是离散的，可以直接枚举，那么使用switch更方便</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(a)&#123;</span><br><span class="line">    <span class="keyword">case</span> x:<span class="comment">//如果a的值是x</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;匹配成功&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> y:<span class="comment">//如果a的值是y</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;匹配成功&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> z:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:<span class="comment">//如果上面的都不是，默认</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里有一个新语法叫做case :，c语言中，只有两个地方使用了冒号，一个是switch，一个是goto，可以想象：冒号用于给一个语句开头贴标签，语句跳转时，直接跳转到这个标签的位置继续执行而不会考虑这里有没有其它标签。因此如果a的值是x，会输出两次匹配成功，因为它跳转到case x的标签处继续执行。那么有什么办法可以防止多个情况被匹配到呢，这里使用了break关键字来跳出这个块，从而结束了继续执行。因此，可以在每个case最后放一个break;来防止继续执行到下一个地方</p><h3 id="02-循环结构"><a href="#02-循环结构" class="headerlink" title="02 循环结构"></a>02 循环结构</h3><p>如何让一个操作多次执行呢，使用循环结构吧</p><p>基本循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(init;check;cycle)&#123;</span><br><span class="line">    <span class="comment">//body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下for的小括号里面的内容：</p><p>第一个是循环进入时执行的语句，cycle是每次循环结束时执行的语句，check是每次进入循环前执行的语句，如果这个语句的条件为否就跳出循环，否则一直循环。注意，这里的三个内容均为语句，不可以直接写表达式！比如：1。但是可以留空。</p><p>顺序是init-&gt;check-&gt;body-&gt;cycle-&gt;check-&gt;body-&gt;cycle-&gt;check-&gt;…</p><p>while循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(a)&#123;</span><br><span class="line"><span class="comment">//body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//body</span></span><br><span class="line">&#125;<span class="keyword">while</span>(a);</span><br></pre></td></tr></table></figure><p>这里的a可以写任意内容，只有当内容不为0时才会继续执行，否则跳出。</p><h4 id="1控制语句"><a href="#1控制语句" class="headerlink" title="1控制语句"></a>1控制语句</h4><p>有三个语句可以用来改变执行流：</p><ul><li>break;：离开循环体或switch块</li><li>continue;：跳过这个语句之后的内容。进行下一次循环</li><li>goto x;：跳到x标签的位置，设置标签直接在函数内使用x:就可以在这一行设置标签。</li></ul><p>（语法篇结束）</p><hr>]]></content>
    
    
    <summary type="html">C-yyds</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="开发" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/"/>
    
    <category term="语言学习" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="语言" scheme="https://www.pri87.vip/tags/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="C语言" scheme="https://www.pri87.vip/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>中国剩余定理证明</title>
    <link href="https://www.pri87.vip/posts/891a7930.html"/>
    <id>https://www.pri87.vip/posts/891a7930.html</id>
    <published>2024-09-15T12:27:45.000Z</published>
    <updated>2024-11-16T10:21:04.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定理描述"><a href="#定理描述" class="headerlink" title="定理描述"></a>定理描述</h3><p><img src="https://s2.loli.net/2024/09/15/jIlf4DvczOoGa6k.png" alt="image-20240915202907787"></p><p>假设解为<br>$$<br>x &#x3D; \sum^k_{i&#x3D;0}a_iN_im_i<br>$$<br>解释：</p><p>设$N_i &#x3D; \frac{N}{n_i}$，由于条件已知n互质，<br>那么根据$N_i$和$n_i$互质和贝祖定理<br>所以$N_im_i+n_ik_i&#x3D;1$,这里的m和k为任意可能的整数<br>这个式子左右同模$n_i$<br>可得:<br>$$<br>N_im_i \equiv 1 \mod n_i<br>$$</p><hr><p>好的，已经清楚x中每个字母的表示了，继续</p><p>在$\mod n_i$的情况下，(这里用j避免和n混淆，n的i是第i个，前面的sum是全部取值，j可以取到i)<br>$$<br>x \equiv \sum^k_{j&#x3D;0}a_jN_jm_j \mod n_i<br>$$</p><p>又当$N_j\not &#x3D; N_i$时，$N_j \mod n_i&#x3D;0$，所以:<br>$$<br>x \equiv a_iN_im_i \mod n_i<br>$$<br>又因为$N_im_i \equiv 1 \mod n_i$：<br>$$<br>x \equiv a_i \mod n_i<br>$$由于每步可逆，得证</p><hr><p>唯一性证明</p><p>若$x_1$和$x_2$均为方程的解，那么根据同余的定义<br>有$(x_1-x_2)|n_i$，所以$(x_1-x_2)|lim(n_1,n_2,…)$<br>所以$(x_1-x_2)|N$</p><p>所以$x_1 \equiv x_2 \mod N$<br>所以最多有一个解小于N</p><p>得证</p>]]></content>
    
    
    <summary type="html">当我只会用的时候</summary>
    
    
    
    <category term="密码学" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="定理" scheme="https://www.pri87.vip/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%AE%9A%E7%90%86/"/>
    
    
    <category term="crt" scheme="https://www.pri87.vip/tags/crt/"/>
    
  </entry>
  
  <entry>
    <title>python-运行时获取信息</title>
    <link href="https://www.pri87.vip/posts/36f452d0.html"/>
    <id>https://www.pri87.vip/posts/36f452d0.html</id>
    <published>2024-09-10T17:06:15.000Z</published>
    <updated>2024-11-16T10:21:01.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>基本信息获取，对类同理,获取函数传参用inspect</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(mod))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(mod))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="built_in">print</span>(inspect.signature(obj.func1))</span><br></pre></td></tr></table></figure><p>对类的函数进行hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setattr</span>(the_class,<span class="string">&#x27;true_func1&#x27;</span>,the_class.__dict__[<span class="string">&#x27;func1&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_func1</span>(<span class="params">self,a,b</span>): <span class="comment"># 改为正确的传参，</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func1&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(a),<span class="built_in">hex</span>(b))</span><br><span class="line">    ret = self.true_func1(a,b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(ret))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setattr</span>(the_class, <span class="string">&quot;func1&quot;</span>, hook_func1)</span><br></pre></td></tr></table></figure><h2 id="读取内存"><a href="#读取内存" class="headerlink" title="读取内存"></a>读取内存</h2><p>python进程运行时是由python解释器运行的，可以使用CE附加python解释器读取内存内容，效果和正常使用CE相同</p>]]></content>
    
    
    <summary type="html">之前我遇到的python题往往不方便调试，这里写一点运行时获取信息的手段</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="语言" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="python" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E8%AF%AD%E8%A8%80/python/"/>
    
    
    <category term="python逆向" scheme="https://www.pri87.vip/tags/python%E9%80%86%E5%90%91/"/>
    
  </entry>
  
</feed>
